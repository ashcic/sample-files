# Namespace: dotnetstart

Class: dotnetstart.DotNetInitialization

Constructor: dotnetstart.DotNetInitialization.DotNetInitialization()
Summary: Initializes a new instance of the DotNetInitialization class

Method: dotnetstart.DotNetInitialization.Start(string args)
Return: int
Modifiers: public, static

# Namespace: Rhino
Summary: Contains commonly-used value types and classes used in Rhino.

Class: Rhino.RhinoMath
Summary: Provides constants and static methods that are additional to <b>System.Math</b> .

Constructor: Rhino.RhinoMath.RhinoMath()
Summary: Initializes a new instance of the RhinoMath class

Method: Rhino.RhinoMath.Clamp(double value, double bound1, double bound2)
Return: double
Modifiers: public, static
Summary: Limits a <b>double</b> to be specified within an interval of two numbers, by specifying a fixed minimum and maximum.
Parameter: value (double)
Parameter Summary: A number.
Parameter: bound1 (double)
Parameter Summary: A first bound.
Parameter: bound2 (double)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

Method: Rhino.RhinoMath.Clamp(int value, int bound1, int bound2)
Return: int
Modifiers: public, static
Summary: Restricts a <b>int</b> to be specified within an interval of two integers.
Parameter: value (int)
Parameter Summary: An integer.
Parameter: bound1 (int)
Parameter Summary: A first bound.
Parameter: bound2 (int)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, byte buffer)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a byte array. http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: buffer (byte)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, double value)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a <b>double</b> . http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: value (double)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, int value)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a <b>int</b> . http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: value (int)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.EpsilonEquals(double x, double y, double epsilon)
Return: bool
Modifiers: public, static
Summary: Compare two doubles for equality within some "epsilon" range

Method: Rhino.RhinoMath.EpsilonEquals(float x, float y, float epsilon)
Return: bool
Modifiers: public, static
Summary: Compare to floats for equality within some "epsilon" range

Method: Rhino.RhinoMath.EvaluateNormal(int limitDirection, Rhino.Geometry.Vector3d ds, Rhino.Geometry.Vector3d dt, Rhino.Geometry.Vector3d dss, Rhino.Geometry.Vector3d dst, Rhino.Geometry.Vector3d dtt, out Rhino.Geometry.Vector3d n)
Return: bool
Modifiers: public, static
Summary: Expert tool to evaluate surface unit normal.
Parameter: limitDirection (int)
Parameter Summary: Determines which direction is used to compute the limit, where: 0 = default, 1 = from quadrant I, 2 = from quadrant II, etc.
Parameter: ds (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dss (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dst (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dtt (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: n (Rhino.Geometry.Vector3d)
Parameter Summary: Unit normal.

Method: Rhino.RhinoMath.EvaluateNormalPartials(Rhino.Geometry.Vector3d ds, Rhino.Geometry.Vector3d dt, Rhino.Geometry.Vector3d dss, Rhino.Geometry.Vector3d dst, Rhino.Geometry.Vector3d dtt, out Rhino.Geometry.Vector3d ns, out Rhino.Geometry.Vector3d nt)
Return: bool
Modifiers: public, static
Summary: Expert tool to evaluate partial derivatives of surface unit normal.
Parameter: ds (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dss (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dst (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dtt (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: ns (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative of unit normal. If the Jacobian is degenerate, ns is set to zero.
Parameter: nt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative of unit normal. If the Jacobian is degenerate, nt is set to zero.

Method: Rhino.RhinoMath.IntIndexToString(int index)
Return: string
Modifiers: public, static
Summary: Portrays an <b>int</b> index in text.
Parameter: index (int)
Parameter Summary: <b>int</b> number express as string.

Method: Rhino.RhinoMath.IsValidDouble(double x)
Return: bool
Modifiers: public, static
Summary: Determines whether a <b>double</b> value is valid within the RhinoCommon context.
Rhino does not use Double.NaN by convention, so this test evaluates to True if:
x is not equal to RhinoMath.UnsetValue
System.Double.IsNaN(x) evaluates to false
System.Double.IsInfinity(x) evaluates to false | Parameter: x (double) | Parameter Summary: <b>double</b> number to test for validity.

Method: Rhino.RhinoMath.IsValidSingle(float x)
Return: bool
Modifiers: public, static
Summary: Determines whether a <b>float</b> value is valid within the RhinoCommon context.
Rhino does not use Single.NaN by convention, so this test evaluates to True if:
x is not equal to RhinoMath.UnsetValue,
System.Single.IsNaN(x) evaluates to false
System.Single.IsInfinity(x) evaluates to false | Parameter: x (float) | Parameter Summary: <b>float</b> number to test for validity.

Method: Rhino.RhinoMath.MetersPerUnit(UnitSystem units)
Return: double
Modifiers: public, static
Summary: Return number of meters per one unit of a given unit system

Method: Rhino.RhinoMath.ParseNumber(string expression)
Return: double
Modifiers: public, static
Summary: Evaluates command line math expression.

Method: Rhino.RhinoMath.ToDegrees(double radians)
Return: double
Modifiers: public, static
Summary: Convert an angle from radians to degrees.
Parameter: radians (double)
Parameter Summary: Radians to convert (180 degrees equals pi radians).

Method: Rhino.RhinoMath.ToRadians(double degrees)
Return: double
Modifiers: public, static
Summary: Convert an angle from degrees to radians.
Parameter: degrees (double)
Parameter Summary: Degrees to convert (180 degrees equals pi radians).

Method: Rhino.RhinoMath.TryParseNumber(string expression, out double result)
Return: bool
Modifiers: public, static
Summary: Evaluates command line math expression.

Method: Rhino.RhinoMath.UnitScale(UnitSystem from, double fromMetersPerUnit, UnitSystem to, double toMetersPerUnit)
Return: double
Modifiers: public, static
Summary: Computes the scale factor for changing the measurements unit systems.
Parameter: from (UnitSystem)
Parameter Summary: The system to convert from.
Parameter: fromMetersPerUnit (double)
Parameter Summary: For custom units, specify the meters per unit.
Parameter: to (UnitSystem)
Parameter Summary: The system to convert measurements into.
Parameter: toMetersPerUnit (double)
Parameter Summary: For custom units, specify the meters per unit.

Method: Rhino.RhinoMath.UnitScale(UnitSystem from, UnitSystem to)
Return: double
Modifiers: public, static
Summary: Computes the scale factor for changing the measurements unit systems.
Parameter: from (UnitSystem)
Parameter Summary: The system to convert from.
Parameter: to (UnitSystem)
Parameter Summary: The system to convert measurements into.

Method: Rhino.RhinoMath.Wrap(double value, double bound1, double bound2)
Return: double
Modifiers: public, static
Summary: Limits a <b>double</b> to be specified within an interval of two numbers by repeating the available interval cyclically.
Parameter: value (double)
Parameter Summary: A number.
Parameter: bound1 (double)
Parameter Summary: A first bound.
Parameter: bound2 (double)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

# Namespace: Rhino.Collections

Class: Rhino.Collections.ArchivableDictionary
Summary: Represents a dictionary class that can be attached to objects and can be serialized (saved) at necessity.
See remarks for layout.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary()
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(int version, string name)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(int version)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(UserData parentUserData)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive

Property: Rhino.Collections.ArchivableDictionary.ChangeSerialNumber
Return: uint
Modifiers: public
Summary: Retrieve current change serial number. This is a number that gets increased each time a datum is set or changed.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Count
Return: int
Modifiers: public
Summary: Gets the number of key/value pairs contained in the dictionary.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Keys
Return: string[]
Modifiers: public
Summary: Gets all entry names or keys.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Name
Return: string
Modifiers: public
Summary: Gets or sets the name string of this <b>ArchivableDictionary</b> .
Accessors: get set

Property: Rhino.Collections.ArchivableDictionary.ParentUserData
Return: UserData
Modifiers: public
Summary: If this dictionary is part of user-data (or is a UserDictionary), then this is the parent user data. None if this dictionary is not part of user-data
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Values
Return: object[]
Modifiers: public
Summary: Gets all values in this dictionary.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Version
Return: int
Modifiers: public
Summary: Gets or sets the version of this <b>ArchivableDictionary</b> .
Accessors: get set

Property: Rhino.Collections.ArchivableDictionary.this[string key]
Return: object
Modifiers: public
Summary: Gets the value associated with the specified key.

Method: Rhino.Collections.ArchivableDictionary.AddContentsFrom(ArchivableDictionary source)
Return: bool
Modifiers: public
Summary: Add the contents from the source dictionary.

Method: Rhino.Collections.ArchivableDictionary.Clear()
Return: void
Modifiers: public
Summary: Removes all keys and values from the dictionary.

Method: Rhino.Collections.ArchivableDictionary.Clone()
Return: ArchivableDictionary
Modifiers: public
Summary: Constructs a deep copy of this object.

Method: Rhino.Collections.ArchivableDictionary.ContainsKey(string key)
Return: bool
Modifiers: public
Summary: Determines whether the dictionary contains the specified key.
Parameter: key (string)
Parameter Summary: The key to locate.

Method: Rhino.Collections.ArchivableDictionary.GetBool(string key, bool defaultValue)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will return defaultValue unless value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.GetBool(string key)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.GetBytes(string key, byte defaultValue)
Return: byte
Modifiers: public
Summary: Get value as byte[], will return defaultValue unless value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.GetBytes(string key)
Return: byte
Modifiers: public
Summary: Get value as byte[], will only succeed if value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.GetDictionary(string key, ArchivableDictionary defaultValue)
Return: ArchivableDictionary
Modifiers: public
Summary: Get value as ArchivableDictionary, will return defaultValue unless value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.GetDictionary(string key)
Return: ArchivableDictionary
Modifiers: public
Summary: Get value as ArchivableDictionary, will only succeed if value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.GetDouble(string key, double defaultValue)
Return: double
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.GetDouble(string key)
Return: double
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.object>> GetEnumerator()
Return: IEnumerator<KeyValuePair<string,
Modifiers: public
Summary: Gets the enumerator of this dictionary.

Method: Rhino.Collections.ArchivableDictionary.GetEnumValue()
Return: T
Modifiers: public
Summary: Get an enum value

Method: Rhino.Collections.ArchivableDictionary.GetEnumValue(string key)
Return: T
Modifiers: public
Summary: Get an enum value from the dictionary using a custom key.

Method: Rhino.Collections.ArchivableDictionary.GetFloat(string key, float defaultValue)
Return: float
Modifiers: public
Summary: Get value as float, will return defaultValue unless value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.GetFloat(string key)
Return: float
Modifiers: public
Summary: Get value as float, will only succeed if value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.GetGuid(string key, System.Guid defaultValue)
Return: System.Guid
Modifiers: public
Summary: Get value as Guid, will return defaultValue unless value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.GetGuid(string key)
Return: System.Guid
Modifiers: public
Summary: Get value as Guid, will only succeed if value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.Getint(string key, int defaultValue)
Return: int
Modifiers: public
Summary: Get value as int, will return defaultValue unless value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetInteger(string key, int defaultValue)
Return: int
Modifiers: public
Summary: Get value as int, will return defaultValue unless value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetInteger(string key)
Return: int
Modifiers: public
Summary: Get value as int, will only succeed if value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.Collections.ArchivableDictionary.GetPlane(string key, Geometry.Plane defaultValue)
Return: Geometry.Plane
Modifiers: public
Summary: Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.
Parameter: defaultValue (Geometry.Plane)
Parameter Summary: The default value.

Method: Rhino.Collections.ArchivableDictionary.GetPlane(string key)
Return: Geometry.Plane
Modifiers: public
Summary: Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.

Method: Rhino.Collections.ArchivableDictionary.GetPoint3d(string key, Geometry.Point3d defaultValue)
Return: Geometry.Point3d
Modifiers: public
Summary: Get value as Point3d, will return defaultValue unless value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3d(string key)
Return: Geometry.Point3d
Modifiers: public
Summary: Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3f(string key, Geometry.Point3f defaultValue)
Return: Geometry.Point3f
Modifiers: public
Summary: Get value as Point3f, will return defaultValue unless value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3f(string key)
Return: Geometry.Point3f
Modifiers: public
Summary: Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.GetString(string key, string defaultValue)
Return: string
Modifiers: public
Summary: Get value as string, will return defaultValue unless value was created using Set(string key, string value)
Parameter: key (string)
Parameter Summary: The key which points to the string
Parameter: defaultValue (string)
Parameter Summary: The string

Method: Rhino.Collections.ArchivableDictionary.GetString(string key)
Return: string
Modifiers: public
Summary: Get value as string, will only succeed if value was created using Set(string key, string value)
Parameter: key (string)
Parameter Summary: The key which points to the string

Method: Rhino.Collections.ArchivableDictionary.GetVector3d(string key, Geometry.Vector3d defaultValue)
Return: Geometry.Vector3d
Modifiers: public
Summary: Get value as Vector3d, will return defaultValue unless value was created using Set(string key, Vector3d value)

Method: Rhino.Collections.ArchivableDictionary.GetVector3d(string key)
Return: Geometry.Vector3d
Modifiers: public
Summary: Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)

Method: Rhino.Collections.ArchivableDictionary.Remove(string key)
Return: bool
Modifiers: public
Summary: Removes the value with the specified key from the dictionary.
Parameter: key (string)
Parameter Summary: The key of the element to remove.

Method: Rhino.Collections.ArchivableDictionary.RemoveEnumValue()
Return: bool
Modifiers: public
Summary: Remove an enum value from the dictionary.

Method: Rhino.Collections.ArchivableDictionary.ReplaceContentsWith(ArchivableDictionary source)
Return: bool
Modifiers: public
Summary: Replace the contents of the dictionary with that of the given source dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, ArchivableDictionary val)
Return: bool
Modifiers: public
Summary: Sets another <b>ArchivableDictionary</b> as entry in this dictionary.
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (ArchivableDictionary)
Parameter Summary: An object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, bool val)
Return: bool
Modifiers: public
Summary: Sets a <b>bool</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (bool)
Parameter Summary: A <b>bool</b> value.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, byte val)
Return: bool
Modifiers: public
Summary: Sets a <b>byte</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (byte)
Parameter Summary: A <b>byte</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, DocObjects.ObjRef val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.DocObjects.ObjRef</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (DocObjects.ObjRef)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, double val)
Return: bool
Modifiers: public
Summary: Sets a <b>double</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (double)
Parameter Summary: A <b>double</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, float val)
Return: bool
Modifiers: public
Summary: Sets a <b>float</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (float)
Parameter Summary: A <b>float</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.BoundingBox val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.BoundingBox</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.BoundingBox)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.GeometryBase val)
Return: bool
Modifiers: public
Summary: Sets any class deriving from the <b>Rhino.Geometry.GeometryBase</b> base class.
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.GeometryBase)
Parameter Summary: A geometry object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate. You can use for this.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Interval val)
Return: bool
Modifiers: public
Summary: Sets an <b>Rhino.Geometry.Interval</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Interval)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Line val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Line</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Line)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.MeshingParameters val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.MeshingParameters</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.MeshingParameters)
Parameter Summary: An object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Plane val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Plane</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Plane)
Parameter Summary: A plane for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point2d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point2d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point2d)
Parameter Summary: A point for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point3d)
Parameter Summary: A point for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point3f val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point3f</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point3f)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point4d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point4d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point4d)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Ray3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Ray3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Ray3d)
Parameter Summary: A value for that key.
Because has value semantics and is immutable, no changes to this object are possible.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Transform val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Transform</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Transform)
Parameter Summary: A transform for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector2d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector2d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector2d)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector3d)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector3f val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector3f</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector3f)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<bool> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>bool</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<bool>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<byte> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>byte</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<byte>)
Parameter Summary: A value for that key
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<double> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>double</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<double>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<float> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>float</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<float>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<GeometryBase> val)
Return: bool
Modifiers: public
Summary: Sets an array of <b>Rhino.Geometry.GeometryBase</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (IEnumerable<Geometry.GeometryBase>)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<Guid> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>Guid</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<Guid>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<int> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>int</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<int>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<ObjRef> val)
Return: bool
Modifiers: public
Summary: Sets an array of <b>Rhino.DocObjects.ObjRef</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (IEnumerable<DocObjects.ObjRef>)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<sbyte> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>sbyte</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<sbyte>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<short> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>short</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<short>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<string> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>string</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<string>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, int val)
Return: bool
Modifiers: public
Summary: Sets a <b>int</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (int)
Parameter Summary: A <b>int</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, sbyte val)
Return: bool
Modifiers: public
Summary: Sets a <b>sbyte</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (sbyte)
Parameter Summary: A <b>sbyte</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, short val)
Return: bool
Modifiers: public
Summary: Sets a <b>short</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (short)
Parameter Summary: A <b>short</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, string val)
Return: bool
Modifiers: public
Summary: Sets a <b>string</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (string)
Parameter Summary: A <b>string</b> .
Because is immutable, it is not possible to modify the object while it is in this dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Color val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Color</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Color)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Font val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Font</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Font)
Parameter Summary: A value for that key.
Because is immutable, it is not possible to modify the object while it is in this dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Point val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Point</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Point)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.PointF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.PointF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.PointF)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Rectangle val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Rectangle</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Rectangle)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.RectangleF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.RectangleF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.RectangleF)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Size val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Size</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Size)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.SizeF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.SizeF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.SizeF)
Parameter Summary: A value for that key.
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Guid val)
Return: bool
Modifiers: public
Summary: Sets a <b>Guid</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (System.Guid)
Parameter Summary: A <b>Guid</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Int64 val)
Return: bool
Modifiers: public
Summary: Sets a <b>long</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (System.Int64)
Parameter Summary: A <b>long</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, uint val)
Return: bool
Modifiers: public
Summary: Sets a <b>uint</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (uint)
Parameter Summary: A <b>uint</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, ushort val)
Return: bool
Modifiers: public
Summary: Sets a <b>ushort</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (ushort)
Parameter Summary: A <b>ushort</b> .
Because has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.SetEnumValue(string key, T enumValue)
Return: bool
Modifiers: public
Summary: Set an enum value in the dictionary with a custom key.

Method: Rhino.Collections.ArchivableDictionary.SetEnumValue(T enumValue)
Return: bool
Modifiers: public
Summary: Set an enum value

Method: Rhino.Collections.ArchivableDictionary.TryGetBool(string key, out bool value)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.TryGetBytes(string key, out byte value)
Return: bool
Modifiers: public
Summary: Get value as byte[], will only succeed if value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.TryGetDictionary(string key, out ArchivableDictionary value)
Return: bool
Modifiers: public
Summary: Get value as ArchivableDictionary, will only succeed if value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.TryGetDouble(string key, out double value)
Return: bool
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.TryGetEnumValue(string key, out T enumValue)
Return: bool
Modifiers: public
Summary: Attempt to get an enum value from the dictionary using a custom key.

Method: Rhino.Collections.ArchivableDictionary.TryGetFloat(string key, out float value)
Return: bool
Modifiers: public
Summary: Get value as float, will only succeed if value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.TryGetGuid(string key, out System.Guid value)
Return: bool
Modifiers: public
Summary: Get value as Guid, will only succeed if value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.TryGetInteger(string key, out int value)
Return: bool
Modifiers: public
Summary: Get value as int, will only succeed if value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.TryGetPlane(string key, out Geometry.Plane value)
Return: bool
Modifiers: public
Summary: Get value as Plane, will only succeed if value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.
Parameter: value (Geometry.Plane)
Parameter Summary: The value.

Method: Rhino.Collections.ArchivableDictionary.TryGetPoint3d(string key, out Geometry.Point3d value)
Return: bool
Modifiers: public
Summary: Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.TryGetPoint3f(string key, out Geometry.Point3f value)
Return: bool
Modifiers: public
Summary: Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.TryGetString(string key, out string value)
Return: bool
Modifiers: public
Summary: Get value as string, will only succeed if value was created using Set(string key, string value)

Method: Rhino.Collections.ArchivableDictionary.TryGetValue(string key, out object value)
Return: bool
Modifiers: public
Summary: Gets the value associated with the specified key.
Parameter: key (string)
Parameter Summary: The key of the value to get.
Parameter: value (object)
Parameter Summary: When this method returns and if the key is found, contains the value associated with the specified key; otherwise, null. This parameter is passed uninitialized.

Method: Rhino.Collections.ArchivableDictionary.TryGetVector3d(string key, out Geometry.Vector3d value)
Return: bool
Modifiers: public
Summary: Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)

Class: Rhino.Collections.CurveList
Summary: Represents a list of curves.

Constructor: Rhino.Collections.CurveList.CurveList()
Summary: Initializes a new empty list of curves.

Constructor: Rhino.Collections.CurveList.CurveList(IEnumerable<Curve> collection)
Summary: Initializes a new list that is filled with all items of the input enumerable.
Input items are not explicitly duplicated (this is a shallow copy).

Constructor: Rhino.Collections.CurveList.CurveList(int initialCapacity)
Summary: Initializes a new empty list of curves with a predefined capacity.
This is the amount of items the list will accept before resizing.

Method: Rhino.Collections.CurveList.Add(Arc arc)
Return: void
Modifiers: public
Summary: Adds an arc to this list.
Parameter: arc (Arc)
Parameter Summary: An arc value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(Circle circle)
Return: void
Modifiers: public
Summary: Adds a circle to this list.
Parameter: circle (Circle)
Parameter Summary: A circle value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(Ellipse ellipse)
Return: void
Modifiers: public
Summary: Adds an ellipse to this list.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(IEnumerable<Point3d> polyline)
Return: void
Modifiers: public
Summary: Adds a polyline to this list.
Parameter: polyline (IEnumerable<Point3d>)
Parameter Summary: A polyline value that will be copied in a new polyline.
This argument can be null, an array, a list or any enumerable set of .

Method: Rhino.Collections.CurveList.Add(Line line)
Return: void
Modifiers: public
Summary: Adds a line to this list.
Parameter: line (Line)
Parameter Summary: A line value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Insert(int index, Arc arc)
Return: void
Modifiers: public
Summary: Inserts an arc at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: arc (Arc)
Parameter Summary: The arc value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, Circle circle)
Return: void
Modifiers: public
Summary: Inserts a line at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: circle (Circle)
Parameter Summary: The circle value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, Ellipse ellipse)
Return: void
Modifiers: public
Summary: Inserts an ellipse at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: ellipse (Ellipse)
Parameter Summary: The ellipse value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, IEnumerable<Point3d> polyline)
Return: void
Modifiers: public
Summary: Inserts a polyline at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: polyline (IEnumerable<Point3d>)
Parameter Summary: The polyline enumerable from which to construct a copy curve.
This argument can be null, an array, a list or any enumerable set of .

Method: Rhino.Collections.CurveList.Insert(int index, Line line)
Return: void
Modifiers: public
Summary: Inserts a line at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: line (Line)
Parameter Summary: The line value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transform all the curves in this list. If at least a single transform failed this function returns false.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to all curves.

Class: Rhino.Collections.Point3dList
Summary: Represents a list of <b>Point3d</b> .

Constructor: Rhino.Collections.Point3dList.Point3dList()
Summary: Initializes a new empty list with default capacity.

Constructor: Rhino.Collections.Point3dList.Point3dList(IEnumerable<Point3d> collection)
Summary: Initializes a new point list by copying the values from another set.

Constructor: Rhino.Collections.Point3dList.Point3dList(int initialCapacity)
Summary: Initializes a new point list with a preallocated initial capacity.

Constructor: Rhino.Collections.Point3dList.Point3dList(Point3d[] initialPoints)
Summary: Constructs a new point list from values in a point array.

Property: Rhino.Collections.Point3dList.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Even though this is a property, it is not a "fast" calculation. Every point is evaluated in order to get the bounding box of the list.
Accessors: get

Property: Rhino.Collections.Point3dList.X
Return: XAccess
Modifiers: public
Summary: Returns an indexer with all X coordinates in this list.
Accessors: get

Property: Rhino.Collections.Point3dList.Y
Return: YAccess
Modifiers: public
Summary: Returns an indexer with all Y coordinates in this list.
Accessors: get

Property: Rhino.Collections.Point3dList.Z
Return: ZAccess
Modifiers: public
Summary: Returns an indexer with all Z coordinates in this list.
Accessors: get

Method: Rhino.Collections.Point3dList.ClosestIndexInList(IList<Point3d> list, Point3d testPoint)
Return: int
Modifiers: public, static
Summary: Finds the index of the point in a list of points that is closest to a test point.
Parameter: list (IList<Point3d>)
Parameter Summary: A list of points.
Parameter: testPoint (Point3d)
Parameter Summary: Point to compare against.

Method: Rhino.Collections.Point3dList.ClosestPointInList(IList<Point3d> list, Point3d testPoint)
Return: Point3d
Modifiers: public, static
Summary: Finds the point in a list of points that is closest to a test point.
Parameter: list (IList<Point3d>)
Parameter Summary: A list of points.
Parameter: testPoint (Point3d)
Parameter Summary: Point to compare against.

Method: Rhino.Collections.Point3dList.Add(double x, double y, double z)
Return: void
Modifiers: public
Summary: Adds a Point3d to the end of the list with given x,y,z coordinates.
Parameter: x (double)
Parameter Summary: The X coordinate.
Parameter: y (double)
Parameter Summary: The Y coordinate.
Parameter: z (double)
Parameter Summary: The Z coordinate.

Method: Rhino.Collections.Point3dList.ClosestIndex(Point3d testPoint)
Return: int
Modifiers: public
Summary: Finds the index of the point that is closest to a test point in this list.
Parameter: testPoint (Point3d)
Parameter Summary: point to compare against.

Method: Rhino.Collections.Point3dList.Duplicate()
Return: Point3dList
Modifiers: public, new
Summary: Returns a deep copy of this point list instance.

Method: Rhino.Collections.Point3dList.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Overrides the default object equality to compare lists by value.

Method: Rhino.Collections.Point3dList.Equals(Point3dList other)
Return: bool
Modifiers: public
Summary: Determines if the point lists are exactly equal.

Method: Rhino.Collections.Point3dList.GetHashCode()
Return: int
Modifiers: public, override
Summary: Creates a hash code for this object.

Method: Rhino.Collections.Point3dList.SetAllX(double xValue)
Return: void
Modifiers: public
Summary: Set all the X values for the points to a single value

Method: Rhino.Collections.Point3dList.SetAllY(double yValue)
Return: void
Modifiers: public
Summary: Set all the Y values for the points to a single value

Method: Rhino.Collections.Point3dList.SetAllZ(double zValue)
Return: void
Modifiers: public
Summary: Set all the Z values for the points to a single value

Method: Rhino.Collections.Point3dList.Transform(Transform xform)
Return: void
Modifiers: public
Summary: Applies a transform to all the points in the list.
Parameter: xform (Transform)
Parameter Summary: Transform to apply.

Class: Rhino.Collections.Point3dList.XAccess
Summary: Utility class for easy-access of x-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.XAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the x-coordinate of the specified point.

Class: Rhino.Collections.Point3dList.YAccess
Summary: Utility class for easy-access of x-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.YAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the y-coordinate of the specified point.

Class: Rhino.Collections.Point3dList.ZAccess
Summary: Utility class for easy-access of z-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.ZAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the z-coordinate of the specified point.

Class: Rhino.Collections.RhinoList
Summary: Provides helper methods to work with <b>RhinoList<T></b> and other collections.

Constructor: Rhino.Collections.RhinoList.RhinoList()
Summary: Initializes a new instance of the RhinoList class

Method: Rhino.Collections.RhinoList.Point2dKNeighbors(IEnumerable<Point2d> hayPoints, IEnumerable<Point2d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point2d>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point2d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point2fKNeighbors(IEnumerable<Point2f> hayPoints, IEnumerable<Point2f> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point2f>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point2f>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point3dKNeighbors(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list". See RTree KNeighbors for alternatives.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point3fKNeighbors(IEnumerable<Point3f> hayPoints, IEnumerable<Point3f> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point3f>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3f>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.PointCloudKNeighbors(PointCloud pointcloud, IEnumerable<Point3d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a short list.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Class: Rhino.Collections.RhinoList<T>
Summary: Represents a list of generic data. This class is similar to System.Collections.Generic.List(T) but exposes a few more methods.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>()
Summary: Initializes a new, empty list.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(IEnumerable<T> collection)
Summary: Initializes this list as a shallow duplicate of another list, array or any other enumerable set of T.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(int amount, T defaultValue)
Summary: Initializes a new list with a specified amount of values.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(int initialCapacity)
Summary: Initializes an empty list with a certain capacity.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(RhinoList<T> list)
Summary: Initializes an new list by shallow duplicating another list.

Property: Rhino.Collections.RhinoList<T>.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of elements the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.Count
Return: int
Modifiers: public
Summary: Gets the number of elements actually contained in the List.
Accessors: get

Property: Rhino.Collections.RhinoList<T>.First
Return: T
Modifiers: public
Summary: Gets or sets the first item in the list. This is synonymous to calling List[0].
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.Last
Return: T
Modifiers: public
Summary: Gets or sets the last item in the list. This is synonymous to calling List[Count-1].
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.NullCount
Return: int
Modifiers: public
Summary: Gets the number of None references (Nothing in Visual Basic) in this list. If T is a ValueType, this property always return zero.
Accessors: get

Property: Rhino.Collections.RhinoList<T>.this[int index]
Return: T
Modifiers: public
Summary: Gets or sets the element at the specified index.

Method: Rhino.Collections.RhinoList<T>.Add(T item)
Return: void
Modifiers: public
Summary: Adds an object to the end of the List.
Parameter: item (T)
Parameter Summary: Item to append.

Method: Rhino.Collections.RhinoList<T>.AddRange(IEnumerable<T> collection)
Return: void
Modifiers: public
Summary: Adds the elements of the specified collection to the end of the List.
Parameter: collection (IEnumerable<T>)
Parameter Summary: The collection whose elements should be added to the end of the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic), if type T is a reference type.

Method: Rhino.Collections.RhinoList<T>.AddRange(System.Collections.IEnumerable collection)
Return: void
Modifiers: public
Summary: Adds the elements of the specified collection to the end of the List.
Parameter: collection (System.Collections.IEnumerable)
Parameter Summary: The collection whose elements should be added to the end of the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic). Objects in collection which cannot be represented as T will throw exceptions.

Method: Rhino.Collections.RhinoList<T>.AsReadOnly()
Return: ReadOnlyCollection<T>
Modifiers: public
Summary: Constructs a read-only wrapper of this class.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(int index, int count, T item, IComparer<T> comparer)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the specified comparer and returns the zero-based index of the element.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to search.
Parameter: count (int)
Parameter Summary: The length of the range to search.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements. Or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T)::Default.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(T item, IComparer<T> comparer)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the specified comparer and returns the zero-based index of the element.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements. Or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T)::Default.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(T item)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the default comparer and returns the zero-based index of the element.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.Clear()
Return: void
Modifiers: public
Summary: Removes all elements from the List.

Method: Rhino.Collections.RhinoList<T>.Contains(T item)
Return: bool
Modifiers: public
Summary: Determines whether an element is in the List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.ConvertAll(Converter<T, TOutput> converter)
Return: RhinoList<TOutput>
Modifiers: public
Summary: Aggregates all results of a conversion function over this table into a new list.
Parameter: converter (Converter<T, TOutput>)
Parameter Summary: A conversion function that can transform from T to TOutput.

Method: Rhino.Collections.RhinoList<T>.CopyTo(int index, T[] array, int arrayIndex, int count)
Return: void
Modifiers: public
Summary: Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the target array.
Parameter: index (int)
Parameter Summary: The zero-based index in the source List at which copying begins.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.
Parameter: count (int)
Parameter Summary: The number of elements to copy.

Method: Rhino.Collections.RhinoList<T>.CopyTo(T[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the entire List to a compatible one-dimensional array, starting at the specified index of the target array.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.

Method: Rhino.Collections.RhinoList<T>.CopyTo(T[] array)
Return: void
Modifiers: public
Summary: Copies the entire List to a compatible one-dimensional array, starting at the beginning of the target array.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.

Method: Rhino.Collections.RhinoList<T>.Duplicate()
Return: RhinoList<T>
Modifiers: public
Summary: Returns a shallow copy of this instance. If the generic type is comprised of only value types (struct, enum, ptr), then the result will be a deep copy.

Method: Rhino.Collections.RhinoList<T>.Exists(Predicate<T> match)
Return: bool
Modifiers: public
Summary: Determines whether the List contains elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to search for.

Method: Rhino.Collections.RhinoList<T>.Find(Predicate<T> match)
Return: T
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindAll(Predicate<T> match)
Return: RhinoList<T>
Modifiers: public
Summary: Retrieves all the elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(int startIndex, int count, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the List that extends from the specified index to the last element.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(int startIndex, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLast(Predicate<T> match)
Return: T
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(int startIndex, int count, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(int startIndex, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.ForEach(Action<T> action)
Return: void
Modifiers: public
Summary: Performs the specified action on each element of the List.
Parameter: action (Action<T>)
Parameter Summary: The Action(T) delegate to perform on each element of the List.

Method: Rhino.Collections.RhinoList<T>.GetEnumerator()
Return: IEnumerator<T>
Modifiers: public
Summary: Constructs an enumerator that is capable of iterating over all items in this list.

Method: Rhino.Collections.RhinoList<T>.GetRange(int index, int count)
Return: RhinoList<T>
Modifiers: public
Summary: Constructs a shallow copy of a range of elements in the source List.
Parameter: index (int)
Parameter Summary: The zero-based List index at which the range starts.
Parameter: count (int)
Parameter Summary: The number of elements in the range.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item, int index, int count)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List that starts at the specified index and contains the specified number of elements.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item, int index)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List that extends from the specified index to the last element.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the search.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.Insert(int index, T item)
Return: void
Modifiers: public
Summary: Inserts an element into the List at the specified index.
Parameter: index (int)
Parameter Summary: The zero-based index at which item should be inserted.
Parameter: item (T)
Parameter Summary: The object to insert. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.InsertRange(int index, IEnumerable<T> collection)
Return: void
Modifiers: public
Summary: Inserts the elements of a collection into the List at the specified index.
Parameter: index (int)
Parameter Summary: The zero-based index at which the new elements should be inserted.
Parameter: collection (IEnumerable<T>)
Parameter Summary: The collection whose elements should be inserted into the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic), if type T is a reference type.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item, int index, int count)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List that contains the specified number of elements and ends at the specified index.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item, int index)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List that extends from the first element to the specified index.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the backward search.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.RemapIndex(int index)
Return: int
Modifiers: public
Summary: Remap an index in the infinite range onto the List index range.
Parameter: index (int)
Parameter Summary: Index to remap.

Method: Rhino.Collections.RhinoList<T>.Remove(T item)
Return: bool
Modifiers: public
Summary: Removes the first occurrence of a specific object from the List.
Parameter: item (T)
Parameter Summary: The object to remove from the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.RemoveAll(Predicate<T> match)
Return: int
Modifiers: public
Summary: Removes the all the elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to remove.

Method: Rhino.Collections.RhinoList<T>.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes the element at the specified index of the List.
Parameter: index (int)
Parameter Summary: The zero-based index of the element to remove.

Method: Rhino.Collections.RhinoList<T>.RemoveNulls()
Return: int
Modifiers: public
Summary: Removes all elements from the List that are None references (Nothing in Visual Basic). This function will not do anything if T is not a Reference type.

Method: Rhino.Collections.RhinoList<T>.RemoveRange(int index, int count)
Return: void
Modifiers: public
Summary: Removes a range of elements from the List.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range of elements to remove.
Parameter: count (int)
Parameter Summary: The number of elements to remove.

Method: Rhino.Collections.RhinoList<T>.Reverse()
Return: void
Modifiers: public
Summary: Reverses the order of the elements in the entire List.

Method: Rhino.Collections.RhinoList<T>.Reverse(int index, int count)
Return: void
Modifiers: public
Summary: Reverses the order of the elements in the specified range.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to reverse.
Parameter: count (int)
Parameter Summary: The number of elements in the range to reverse.

Method: Rhino.Collections.RhinoList<T>.Sort()
Return: void
Modifiers: public
Summary: Sorts the elements in the entire List using the default comparer.

Method: Rhino.Collections.RhinoList<T>.Sort(Comparison<T> comparison)
Return: void
Modifiers: public
Summary: Sorts the elements in the entire list using the specified comparer.
Parameter: comparison (Comparison<T>)
Parameter Summary: The System.Comparison(T) to use when comparing elements.

Method: Rhino.Collections.RhinoList<T>.Sort(double keys)
Return: void
Modifiers: public
Summary: Sort this list based on a list of numeric keys of equal length. The keys array will not be altered.
Parameter: keys (double)
Parameter Summary: Numeric keys to sort with.

Method: Rhino.Collections.RhinoList<T>.Sort(IComparer<T> comparer)
Return: void
Modifiers: public
Summary: Sorts the elements in the entire list using the specified System.Comparison(T)
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements, or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.

Method: Rhino.Collections.RhinoList<T>.Sort(int index, int count, IComparer<T> comparer)
Return: void
Modifiers: public
Summary: Sorts the elements in a range of elements in list using the specified comparer.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to sort.
Parameter: count (int)
Parameter Summary: The length of the range to sort.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements, or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.

Method: Rhino.Collections.RhinoList<T>.Sort(int keys)
Return: void
Modifiers: public
Summary: Sort this list based on a list of numeric keys of equal length. The keys array will not be altered.
Parameter: keys (int)
Parameter Summary: Numeric keys to sort with.

Method: Rhino.Collections.RhinoList<T>.ToArray()
Return: T[]
Modifiers: public
Summary: Constructs an array that contains all items in this list.

Method: Rhino.Collections.RhinoList<T>.TrimExcess()
Return: void
Modifiers: public
Summary: Sets the capacity to the actual number of elements in the List, if that number is less than a threshold value.

Method: Rhino.Collections.RhinoList<T>.TrueForAll(Predicate<T> match)
Return: bool
Modifiers: public
Summary: Determines whether every element in the List matches the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions to check against the elements.

Class: Rhino.Collections.TransformObjectList
Summary: A collection of Rhino object, grip objects, and the Rhino objects that owns the grips. Used by the TransformCommand and GetTransform classes.

Constructor: Rhino.Collections.TransformObjectList.TransformObjectList()

Property: Rhino.Collections.TransformObjectList.Count
Return: int
Modifiers: public
Summary: Number of elements in this list
Accessors: get

Property: Rhino.Collections.TransformObjectList.DisplayFeedbackEnabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Collections.TransformObjectList.GripCount
Return: int
Modifiers: public
Summary: Number of elements in grip list
Accessors: get

Property: Rhino.Collections.TransformObjectList.GripOwnerCount
Return: int
Modifiers: public
Summary: Number of elements in grip owner list
Accessors: get

Method: Rhino.Collections.TransformObjectList.Add(DocObjects.ObjRef objref)
Return: void
Modifiers: public
Summary: Add an ObjRef to this list. Use this to add polyedges so the references are properly counted

Method: Rhino.Collections.TransformObjectList.Add(DocObjects.RhinoObject rhinoObject)
Return: void
Modifiers: public
Summary: Add a RhinoObject to this list

Method: Rhino.Collections.TransformObjectList.AddObjects(GetObject go, bool allowGrips)
Return: int
Modifiers: public
Summary: Add objects to list with a GetObject
Parameter: go (GetObject)
Parameter Summary: Setup the GetObject, i.e. prompt, geometry filter, allow pre/post select before passing it as an argument.
Parameter: allowGrips (bool)
Parameter Summary: Specifically allow grips to be selected. if true, grips must also be included in geometry filter of the GetObject in order to be selected.

Method: Rhino.Collections.TransformObjectList.Clear()
Return: void
Modifiers: public
Summary: Remove all elements from this list

Method: Rhino.Collections.TransformObjectList.Dispose()
Return: void
Modifiers: public

Method: Rhino.Collections.TransformObjectList.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Collections.TransformObjectList.GetBoundingBox(bool regularObjects, bool grips)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of all of the objects that this list contains.
Parameter: regularObjects (bool)
Parameter Summary: True if any object except grips should be included; otherwise false.
Parameter: grips (bool)
Parameter Summary: True if grips should be included; otherwise false.

Method: Rhino.Collections.TransformObjectList.GripArray()
Return: GripObject[]
Modifiers: public
Summary: Gets access to the internal GripObject array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.GripOwnerArray()
Return: RhinoObject[]
Modifiers: public
Summary: Gets access to the internal GripOwner array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.ObjectArray()
Return: RhinoObject[]
Modifiers: public
Summary: Gets access to the internal RhinoObject array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.UpdateDisplayFeedbackTransform(Transform xform)
Return: bool
Modifiers: public

# Namespace: Rhino.Commands

Class: Rhino.Commands.Command
Summary: Defines a base class for all commands. This class is abstract.

Constructor: Rhino.Commands.Command.Command()
Summary: Default protected constructor. It only allows instantiation through sub-classing.

Property: Rhino.Commands.Command.LastCommandId
Return: Guid
Modifiers: public, static
Summary: Gets the ID of the last commands.
Accessors: get

Property: Rhino.Commands.Command.LastCommandResult
Return: Result
Modifiers: public, static
Summary: Gets the result code of the last command.
Accessors: get

Property: Rhino.Commands.Command.CommandContextHelpUrl
Return: string
Modifiers: protected, virtual
Summary: Gets the URL of the command contextual help. This is usually a location of a local CHM file.
The default implementation return an empty string. | Accessors: get

Property: Rhino.Commands.Command.EnglishName
Return: string
Modifiers: public, abstract
Summary: Gets the name of the command. This method is abstract.
Accessors: get

Property: Rhino.Commands.Command.Id
Return: Guid
Modifiers: public, virtual
Summary: Gets the unique ID of this command. It is best to use a Guid attribute for each custom derived command class since this will keep the id consistent between sessions of Rhino <b>System.Runtime.InteropServices.GuidAttribute</b>
Accessors: get

Property: Rhino.Commands.Command.LocalName
Return: string
Modifiers: public, virtual
Summary: Gets the local name of the command.
Accessors: get

Property: Rhino.Commands.Command.PlugIn
Return: PlugIn
Modifiers: public
Summary: Gets the plug-in where this commands is placed.
Accessors: get set

Property: Rhino.Commands.Command.Settings
Return: PersistentSettings
Modifiers: public
Summary: Gets the settings of the command.
Accessors: get

Method: Rhino.Commands.Command.DisplayHelp(System.Guid commandId)
Return: void
Modifiers: public, static
Summary: Displays help for a command.
Parameter: commandId (System.Guid)
Parameter Summary: A command ID.

Method: Rhino.Commands.Command.GetCommandNames(bool english, bool loaded)
Return: string
Modifiers: public, static
Summary: Gets list of command names in Rhino. This list does not include Test, Alpha, or System commands.
Parameter: english (bool)
Parameter Summary: if true, retrieve the English name for every command. if false, retrieve the local name for every command.
Parameter: loaded (bool)
Parameter Summary: if true, only get names of currently loaded commands. if false, get names of all registered (may not be currently loaded) commands.

Method: Rhino.Commands.Command.GetCommandStack()
Return: System.Guid[]
Modifiers: public, static
Summary: Determines if Rhino is currently running a command. Because Rhino allow for transparent commands (commands that can be run from inside of other commands), this method returns the total ids of active commands.

Method: Rhino.Commands.Command.GetMostRecentCommands()
Return: MostRecentCommandDescription[]
Modifiers: public, static
Summary: Gets an array of most recent command descriptions.

Method: Rhino.Commands.Command.InCommand()
Return: bool
Modifiers: public, static
Summary: Determines if Rhino is currently running a command.

Method: Rhino.Commands.Command.InScriptRunnerCommand()
Return: bool
Modifiers: public, static
Summary: This is a low level tool to determine if Rhino is currently running a script running command like "ReadCommandFile" or the RhinoScript plug-in's "RunScript".

Method: Rhino.Commands.Command.IsCommand(string name)
Return: bool
Modifiers: public, static
Summary: Determines is a string is a command.
Parameter: name (string)
Parameter Summary: A string.

Method: Rhino.Commands.Command.IsValidCommandName(string name)
Return: bool
Modifiers: public, static
Summary: Determines if a string is a valid command name.
Parameter: name (string)
Parameter Summary: A string.

Method: Rhino.Commands.Command.LookupCommandId(string name, bool searchForEnglishName)
Return: System.Guid
Modifiers: public, static
Summary: Returns the ID of a command.
Parameter: name (string)
Parameter Summary: The name of the command.
Parameter: searchForEnglishName (bool)
Parameter Summary: True if the name is to searched in English. This ensures that a '_' is prepended to the name.

Method: Rhino.Commands.Command.LookupCommandName(System.Guid commandId, bool englishName)
Return: string
Modifiers: public, static
Summary: Returns the command name given a command ID.
Parameter: commandId (System.Guid)
Parameter Summary: A command ID.
Parameter: englishName (bool)
Parameter Summary: True if the requested command is in English.

Method: Rhino.Commands.Command.RunProxyCommand(RunCommandDelegate commandCallback, RhinoDoc doc, object data)
Return: void
Modifiers: public, static
Summary: Execute some code as if it were running in a command
Parameter: commandCallback (RunCommandDelegate)
Parameter Summary:
Parameter: doc (RhinoDoc)
Parameter Summary:
Parameter: data (object)
Parameter Summary: optional extra data to pass to callback

Method: Rhino.Commands.Command.OnHelp()
Return: void
Modifiers: protected, virtual
Summary: Is called when the user needs assistance with this command.

Method: Rhino.Commands.Command.ReplayHistory(Rhino.DocObjects.ReplayHistoryData replayData)
Return: bool
Modifiers: protected, virtual
Summary: Repeats an operation of a command.
In order to make this function work, you will likely need to grab the Result property that gives the list of input objects. Then, you will be able to replace these inputs by using one of the UpdateToX() methods of the ReplayHistoryResult.
You should NOT use any document AddX() or ReplaceX() functions, as they will break history. | Parameter: replayData (Rhino.DocObjects.ReplayHistoryData) | Parameter Summary: The replay history information.

Method: Rhino.Commands.Command.RunCommand(RhinoDoc doc, RunMode mode)
Return: Result
Modifiers: protected, abstract
Summary: Executes the command.
Parameter: doc (RhinoDoc)
Parameter Summary: The current document.
Parameter: mode (RunMode)
Parameter Summary: The command running mode.

Class: Rhino.Commands.CommandEventArgs

Property: Rhino.Commands.CommandEventArgs.CommandEnglishName
Return: string
Modifiers: public
Summary: Gets the English name of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandHelpURL
Return: string
Modifiers: public
Summary: Gets the help url of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandId
Return: Guid
Modifiers: public
Summary: Gets the ID of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandLocalName
Return: string
Modifiers: public
Summary: Gets the name of the command that raised this event in the local language.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandPluginName
Return: string
Modifiers: public
Summary: Gets the name of the plug-in that this command belongs to. If the command is internal to Rhino, then this property is an empty string.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandResult
Return: Result
Modifiers: public
Summary: Gets the result of the command that raised this event. This value is only meaningful during EndCommand events.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Commands.CommandEventArgs.DocumentRuntimeSerialNumber
Return: uint
Modifiers: public
Accessors: get set

Class: Rhino.Commands.CommandStyleAttribute
Summary: Decorates <b>Command</b> to provide styles.

Constructor: Rhino.Commands.CommandStyleAttribute.CommandStyleAttribute(Style styles)
Summary: Initializes a new command style attribute class.

Property: Rhino.Commands.CommandStyleAttribute.Styles
Return: Style
Modifiers: public
Summary: Gets the associated style.
Accessors: get

Class: Rhino.Commands.CustomUndoEventArgs
Summary: Argument package that is passed to a custom undo delegate

Property: Rhino.Commands.CustomUndoEventArgs.ActionDescription
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.CommandId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.CreatedByRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.Tag
Return: object
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.UndoSerialNumber
Return: uint
Modifiers: public
Accessors: get

Class: Rhino.Commands.MostRecentCommandDescription
Summary: Stores the macro and display string of the most recent command.

Constructor: Rhino.Commands.MostRecentCommandDescription.MostRecentCommandDescription()
Summary: Initializes a new instance of the MostRecentCommandDescription class

Property: Rhino.Commands.MostRecentCommandDescription.DisplayString
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Commands.MostRecentCommandDescription.Macro
Return: string
Modifiers: public
Accessors: get set

Class: Rhino.Commands.SelCommand
Summary: For adding nestable whole object and subobject selection commands, derive your command from SelCommand and override the abstract SelFilter and virtual SelSubObjectFilter functions.

Constructor: Rhino.Commands.SelCommand.SelCommand()
Summary: Initializes a new instance of the SelCommand class

Property: Rhino.Commands.SelCommand.BeQuiet
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Commands.SelCommand.TestGrips
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Commands.SelCommand.TestLights
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Commands.SelCommand.RunCommand(RhinoDoc doc, RunMode mode)
Return: Result
Modifiers: protected, override

Method: Rhino.Commands.SelCommand.SelFilter(Rhino.DocObjects.RhinoObject rhObj)
Return: bool
Modifiers: protected, abstract
Summary: Override this abstract function and return True if object should be selected.
Parameter: rhObj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to check regarding selection status.

Method: Rhino.Commands.SelCommand.SelSubObjectFilter(Rhino.DocObjects.RhinoObject rhObj, List<ComponentIndex> indicesToSelect)
Return: bool
Modifiers: protected, virtual
Summary: To select subobjects, override this virtual function, add component indices of the subobjects that should get selected to indicesToSelect list and return true. This is called only if the SelFilter returns False and the whole object does not get selected.
Parameter: rhObj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to check regarding selection status.
Parameter: indicesToSelect (List<Rhino.Geometry.ComponentIndex>)
Parameter Summary: The component indices of the subobjects to select.

Class: Rhino.Commands.TransformCommand

Constructor: Rhino.Commands.TransformCommand.TransformCommand()
Summary: Initializes a new instance of the TransformCommand class

Method: Rhino.Commands.TransformCommand.DuplicateObjects(Rhino.Collections.TransformObjectList list)
Return: void
Modifiers: protected

Method: Rhino.Commands.TransformCommand.ResetGrips(Rhino.Collections.TransformObjectList list)
Return: void
Modifiers: protected
Summary: Sets dynamic grip locations back to starting grip locations. This makes things like the Copy command work when grips are "copied".
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of object to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.SelectObjects(string prompt, DocObjects.ObjectType filter, Rhino.Collections.TransformObjectList list)
Return: Result
Modifiers: protected
Summary: Selects objects within the command.
Parameter: prompt (string)
Parameter Summary: The selection prompt.
Parameter: filter (DocObjects.ObjectType)
Parameter Summary: Geometry filter to limit selection. Use function above if you do not need specific types.
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of objects to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.SelectObjects(string prompt, Rhino.Collections.TransformObjectList list)
Return: Result
Modifiers: protected
Summary: Selects objects within the command.
Parameter: prompt (string)
Parameter Summary: The selection prompt.
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of objects to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.TransformObjects(Rhino.Collections.TransformObjectList list, Rhino.Geometry.Transform xform, bool copy, bool autoHistory)
Return: void
Modifiers: protected

Class: Rhino.Commands.UndoRedoEventArgs

Property: Rhino.Commands.UndoRedoEventArgs.CommandId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeforeBeginRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeforeEndRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginUndo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndUndo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsPurgeRecord
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.UndoSerialNumber
Return: uint
Modifiers: public
Accessors: get

# Namespace: Rhino.Display

Class: Rhino.Display.CalculateBoundingBoxEventArgs

Property: Rhino.Display.CalculateBoundingBoxEventArgs.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the current bounding box.
Accessors: get

Method: Rhino.Display.CalculateBoundingBoxEventArgs.IncludeBoundingBox(BoundingBox box)
Return: void
Modifiers: public
Summary: Unites a bounding box with the current display bounding box in order to ensure dynamic objects in "box" are drawn.
Parameter: box (BoundingBox)
Parameter Summary: The box to unite.

Class: Rhino.Display.ColorGradient

Constructor: Rhino.Display.ColorGradient.ColorGradient()
Summary: Initializes a new instance of the ColorGradient class

Property: Rhino.Display.ColorGradient.EndPoint
Return: Point3d
Modifiers: public
Summary: End point of gradient
Accessors: get set

Property: Rhino.Display.ColorGradient.GradientType
Return: GradientType
Modifiers: public
Summary: Gradient fill type associated with this hatch
Accessors: get set

Property: Rhino.Display.ColorGradient.Repeat
Return: double
Modifiers: public
Summary: Repeat factor for gradient. Factors greater than 1 define a reflected repeat factor while values less than -1 define a wrapped repeat factor.
Accessors: get set

Property: Rhino.Display.ColorGradient.StartPoint
Return: Point3d
Modifiers: public
Summary: Start point of gradient
Accessors: get set

Method: Rhino.Display.ColorGradient.Duplicate()
Return: ColorGradient
Modifiers: public
Summary: Create a duplicate of this color gradient.

Method: Rhino.Display.ColorGradient.GetColorStops()
Return: ColorStop[]
Modifiers: public
Summary: Get sorted list of colors / positions that a gradient is defined over

Method: Rhino.Display.ColorGradient.SetColorStops(IEnumerable<ColorStop> stops)
Return: void
Modifiers: public
Summary: Set color stops for the gradient

Class: Rhino.Display.CullObjectEventArgs

Property: Rhino.Display.CullObjectEventArgs.CullObject
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.CullObjectEventArgs.RhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.CullObjectEventArgs.RhinoObjectSerialNumber
Return: uint
Modifiers: public
Summary: Gets the rhino object runtime serial number.
Accessors: get

Class: Rhino.Display.CustomDisplay
Summary: Provides some basic (indeed, very basic) mechanisms for drawing custom geometry in viewports.

Constructor: Rhino.Display.CustomDisplay.CustomDisplay(bool enable)
Summary: Constructs a new CustomDisplay instance. Youmustcall Dispose() when you are done with this instance, otherwise the display methods will never be switched off.

Property: Rhino.Display.CustomDisplay.ClippingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the clipping box of this CustomDisplay.
Accessors: get

Property: Rhino.Display.CustomDisplay.Enabled
Return: bool
Modifiers: public
Summary: Gets or sets the Enabled state of this CustomDisplay instance. If you wish to terminate this CustomDisplay, place a call to Dispose() instead.
Accessors: get set

Property: Rhino.Display.CustomDisplay.IsDisposed
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this CustomDisplay instance has been disposed. Once a CustomDisplay has been disposed, you can no longer use it.
Accessors: get

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.
Parameter: color (Color)
Parameter Summary: Color of arc.
Parameter: thickness (int)
Parameter Summary: Thickness of arc.

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.
Parameter: color (Color)
Parameter Summary: Color of arc.

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc)
Return: void
Modifiers: public
Summary: Adds a new, black arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored circle to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.
Parameter: color (Color)
Parameter Summary: Color of circle.
Parameter: thickness (int)
Parameter Summary: Thickness of circle.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.
Parameter: color (Color)
Parameter Summary: Color of circle.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle)
Return: void
Modifiers: public
Summary: Adds a new, black circle to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.
Parameter: color (Color)
Parameter Summary: Color of curve.
Parameter: thickness (int)
Parameter Summary: Thickness of curve.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.
Parameter: color (Color)
Parameter Summary: Color of curve.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve)
Return: void
Modifiers: public
Summary: Adds a new, black curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.

Method: Rhino.Display.CustomDisplay.AddLine(Line line, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.
Parameter: color (Color)
Parameter Summary: Color of line.
Parameter: thickness (int)
Parameter Summary: Thickness of line.

Method: Rhino.Display.CustomDisplay.AddLine(Line line, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.
Parameter: color (Color)
Parameter Summary: Color of line.

Method: Rhino.Display.CustomDisplay.AddLine(Line line)
Return: void
Modifiers: public
Summary: Adds a new, black line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point, Color color, PointStyle style, int radius)
Return: void
Modifiers: public
Summary: Adds a new stylized point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.
Parameter: color (Color)
Parameter Summary: Color of point.
Parameter: style (PointStyle)
Parameter Summary: Display style of point.
Parameter: radius (int)
Parameter Summary: Radius of point widget.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point, Color color)
Return: void
Modifiers: public
Summary: Adds a new colored point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.
Parameter: color (Color)
Parameter Summary: Color of point.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point)
Return: void
Modifiers: public
Summary: Adds a new, black point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points, Color color, PointStyle style, int radius)
Return: void
Modifiers: public
Summary: Adds a collection of stylized points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: color (Color)
Parameter Summary: Color of points.
Parameter: style (PointStyle)
Parameter Summary: Display style of points.
Parameter: radius (int)
Parameter Summary: Radius of point widgets.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points, Color color)
Return: void
Modifiers: public
Summary: Adds a collection of colored points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: color (Color)
Parameter Summary: Color of points.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Adds a collection of black points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.

Method: Rhino.Display.CustomDisplay.AddPolygon(IEnumerable<Point3d> polygon, Color fillColor, Color edgeColor, bool drawFill, bool drawEdge)
Return: void
Modifiers: public
Summary: Adds a polygon to the drawing list. Polygons are not like Hatches, when you supply a concave polygon, the shading probably won't work.
Parameter: polygon (IEnumerable<Point3d>)
Parameter Summary: Points that define the corners of the polygon.
Parameter: fillColor (Color)
Parameter Summary: Fill color of polygon.
Parameter: edgeColor (Color)
Parameter Summary: Edge color of polygon.
Parameter: drawFill (bool)
Parameter Summary: If true, the polygon contents will be drawn.
Parameter: drawEdge (bool)
Parameter Summary: If true, the polygon edge will be drawn.

Method: Rhino.Display.CustomDisplay.AddText(string text, Plane plane, double size, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored 3D text object to the display list.
Parameter: text (string)
Parameter Summary: Text to add.
Parameter: plane (Plane)
Parameter Summary: Plane for text orientation.
Parameter: size (double)
Parameter Summary: Height (in units) of font.
Parameter: color (Color)
Parameter Summary: Color of text.

Method: Rhino.Display.CustomDisplay.AddText(string text, Plane plane, double size)
Return: void
Modifiers: public
Summary: Adds a new, black 3D text object to the display list.
Parameter: text (string)
Parameter Summary: Text to add.
Parameter: plane (Plane)
Parameter Summary: Plane for text orientation.
Parameter: size (double)
Parameter Summary: Height (in units) of font.

Method: Rhino.Display.CustomDisplay.AddText(Text3d text, Color color)
Return: void
Modifiers: public
Summary: Adds a new 3D text object to the display list.
Parameter: text (Text3d)
Parameter Summary: Text object to add.
Parameter: color (Color)
Parameter Summary: Color of text object.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span, Color color, bool drawAnchor)
Return: void
Modifiers: public
Summary: Adds a new, colored vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.
Parameter: color (Color)
Parameter Summary: Color of vector.
Parameter: drawAnchor (bool)
Parameter Summary: Include a point at the vector anchor.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.
Parameter: color (Color)
Parameter Summary: Color of vector.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span)
Return: void
Modifiers: public
Summary: Adds a new, black vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.

Method: Rhino.Display.CustomDisplay.Clear()
Return: void
Modifiers: public
Summary: Clear the drawing lists.

Method: Rhino.Display.CustomDisplay.Dispose()
Return: void
Modifiers: public
Summary: Dispose this CustomDisplay instance. You must call this function in order to properly shut down the CustomDisplay.

Class: Rhino.Display.DisplayBitmap
Summary: A bitmap resource that can be used by the display pipeline (currently only in OpenGL display). Reuse DisplayBitmaps for drawing if possible; it is much more expensive to construct new DisplayBitmaps than it is to reuse existing DisplayBitmaps.

Constructor: Rhino.Display.DisplayBitmap.DisplayBitmap(Bitmap bitmap)
Summary: Constructs a DisplayBitmap from an existing bitmap.

Constructor: Rhino.Display.DisplayBitmap.DisplayBitmap(string path, Bitmap bitmap)
Summary: Creates a DisplayBitmap either from a path, or a bitmap. If the path is null, a random tag name will be used. If the bitmap is null, the bitmap will be loaded from the path. If both are null, the object is invalid. if both are valid objects, the bitmap will be used and it will be added to Rhino's bitmap cache with the path supplied. In other words, this is a way to add a bitmap from memory directly into Rhino's memory cache.

Property: Rhino.Display.DisplayBitmap.Size
Return: Size
Modifiers: public
Summary: Size of the underlying bitmap image
Accessors: get

Method: Rhino.Display.DisplayBitmap.Load(string path)
Return: DisplayBitmap
Modifiers: public, static
Summary: Load a DisplayBitmap from and image file on disk or from URL. If path starts with http:// or https:// then an attempt is made to load the bitmap from an online resource
Parameter: path (string)
Parameter Summary: A location from which to load the file.

Method: Rhino.Display.DisplayBitmap.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.DisplayBitmap.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Display.DisplayBitmap.GetBlendModes(out BlendMode source, out BlendMode destination)
Return: void
Modifiers: public
Summary: Gets the source and destination blend modes.
Parameter: source (BlendMode)
Parameter Summary: The source blend mode is assigned to this out parameter.
Parameter: destination (BlendMode)
Parameter Summary: The destination blend mode is assigned to this out parameter.

Method: Rhino.Display.DisplayBitmap.SetBlendFunction(BlendMode source, BlendMode destination)
Return: void
Modifiers: public
Summary: Sets blending function used to determine how this bitmap is blended with the current frame buffer color. The default setting is SourceAlpha for source and OneMinusSourceAlpha for destination. See OpenGL's glBlendFunc for details.
http://www.opengl.org/sdk/docs/man/xhtml/glBlendFunc.xml | Parameter: source (BlendMode) | Parameter Summary: The source blend mode. | Parameter: destination (BlendMode) | Parameter Summary: The destination blend mode.

Method: Rhino.Display.DisplayBitmap.Update(System.Drawing.Bitmap bitmap)
Return: void
Modifiers: public
Summary: Update the image used for this DisplayBitmap

Class: Rhino.Display.DisplayBitmapDrawList

Constructor: Rhino.Display.DisplayBitmapDrawList.DisplayBitmapDrawList()

Property: Rhino.Display.DisplayBitmapDrawList.BoundingBox
Return: BoundingBox
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayBitmapDrawList.MaximumCachedSortLists
Return: int
Modifiers: public
Summary: Maximum number of cached sort order index lists stored on this class. Default is 10, but depending on the number of points in this list you may get better performance by setting this value to a certain percentage of the point count.
Accessors: get set

Property: Rhino.Display.DisplayBitmapDrawList.SortAngleTolerance
Return: double
Modifiers: public
Summary: Angle in radians used to determine if an index list is "parallel enough" to a viewports camera angle. Default is 0.0873 radians (5 degrees)
Accessors: get set

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points, IEnumerable<Color> colors)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points, System.Drawing.Color blendColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.Sort(Geometry.Vector3d cameraDirection)
Return: int
Modifiers: public

Class: Rhino.Display.DisplayConduit

Constructor: Rhino.Display.DisplayConduit.DisplayConduit()

Property: Rhino.Display.DisplayConduit.Enabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayConduit.GeometryFilter
Return: ObjectType
Modifiers: public
Summary: The geometry filter will ensure that your conduit's per-object functions will only be called for objects that are of certain geometry type
Accessors: get set

Property: Rhino.Display.DisplayConduit.SpaceFilter
Return: ActiveSpace
Modifiers: public
Summary: If you want this conduit to only work in a specific space (model or page), then set this filter to that specific space. The default is None meaning no filter is applied
Accessors: get set

Method: Rhino.Display.DisplayConduit.CalculateBoundingBox(CalculateBoundingBoxEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Library developers should override this function to increase the bounding box of scene so it includes the geometry that you plan to draw in the "Draw" virtual functions.
The default implementation does nothing. | Parameter: e (CalculateBoundingBoxEventArgs) | Parameter Summary: The event argument contain the current bounding box state.

Method: Rhino.Display.DisplayConduit.CalculateBoundingBoxZoomExtents(CalculateBoundingBoxEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: If you want to participate in the Zoom Extents command with your display conduit, then you will need to override ZoomExtentsBoundingBox. Typically you could just call your CalculateBoundingBox override, but you may also want to spend a little more time here and compute a tighter bounding box for your conduit geometry if that is needed.
The default implementation does nothing. | Parameter: e (CalculateBoundingBoxEventArgs) | Parameter Summary: The event argument contain the current bounding box state.

Method: Rhino.Display.DisplayConduit.DrawForeground(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called after all non-highlighted objects have been drawn and PostDrawObjects has been called. Depth writing and testing are turned OFF. If you want to draw with depth writing/testing, see PostDrawObjects.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.DrawOverlay(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: If Rhino is in a feedback mode, the draw overlay call allows for temporary geometry to be drawn on top of everything in the scene. This is similar to the dynamic draw routine that occurs with custom get point.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.GetSelectionFilter(out bool on, out bool checkSubObjects)
Return: void
Modifiers: public
Summary: The selection filter will make per-object conduit functions only be called for selected objects (when the filter is turned on)

Method: Rhino.Display.DisplayConduit.ObjectCulling(CullObjectEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: The default implementation does nothing.

Method: Rhino.Display.DisplayConduit.OnEnable(bool enable)
Return: void
Modifiers: protected, virtual
Summary: Called when the enabled state changes for this class instance

Method: Rhino.Display.DisplayConduit.PostDrawObjects(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called after all non-highlighted objects have been drawn. Depth writing and testing are still turned on. If you want to draw without depth writing/testing, see DrawForeground.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.PreDrawObject(DrawObjectEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called before every object in the scene is drawn.

Method: Rhino.Display.DisplayConduit.PreDrawObjects(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called before objects are been drawn. Depth writing and testing are on.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contain the current viewport and display state.

Method: Rhino.Display.DisplayConduit.SetObjectIdFilter(IEnumerable<Guid> ids)
Return: void
Modifiers: public
Summary: Set object Ids that this conduit's per-object functions will only be called for

Method: Rhino.Display.DisplayConduit.SetObjectIdFilter(System.Guid id)
Return: void
Modifiers: public
Summary: Set an object Id that this conduit's per-object functions will only be called for

Method: Rhino.Display.DisplayConduit.SetSelectionFilter(bool on, bool checkSubObjects)
Return: void
Modifiers: public
Summary: The selection filter will make per-object conduit functions only be called for selected objects (when the filter is turned on)

Class: Rhino.Display.DisplayEngine

Constructor: Rhino.Display.DisplayEngine.DisplayEngine()

Method: Rhino.Display.DisplayEngine.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Class: Rhino.Display.DisplayMaterial

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial()
Summary: Constructs a default material.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse, Color specular, Color ambient, Color emission, double shine, double transparency)
Summary: Constructs a material with custom properties.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse, double transparency)
Summary: Constructs a default material with a specific diffuse color and transparency.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse)
Summary: Constructs a default material with a specific diffuse color.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(DisplayMaterial other)
Summary: Duplicate another material.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Material material)

Property: Rhino.Display.DisplayMaterial.Ambient
Return: Color
Modifiers: public
Summary: Gets or sets the Ambient color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackAmbient
Return: Color
Modifiers: public
Summary: Gets or sets the Ambient color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackDiffuse
Return: Color
Modifiers: public
Summary: Gets or sets the Diffuse color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackEmission
Return: Color
Modifiers: public
Summary: Gets or sets the Emissive color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackShine
Return: double
Modifiers: public
Summary: Gets or sets the shine factor of the back side of the material (0.0 to 1.0)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackSpecular
Return: Color
Modifiers: public
Summary: Gets or sets the Specular color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackTransparency
Return: double
Modifiers: public
Summary: Gets or sets the transparency of the back side material (0.0 = opaque to 1.0 = transparent)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Diffuse
Return: Color
Modifiers: public
Summary: Gets or sets the Diffuse color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Emission
Return: Color
Modifiers: public
Summary: Gets or sets the Emissive color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.IsTwoSided
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Shine
Return: double
Modifiers: public
Summary: Gets or sets the shine factor of the material (0.0 to 1.0)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Specular
Return: Color
Modifiers: public
Summary: Gets or sets the Specular color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Transparency
Return: double
Modifiers: public
Summary: Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
Accessors: get set

Method: Rhino.Display.DisplayMaterial.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayMaterial.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.DisplayMaterial.GetBitmapTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.GetBumpTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public
Summary: Gets the bump texture for this display material.

Method: Rhino.Display.DisplayMaterial.GetEnvironmentTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.GetTransparencyTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBitmapTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBitmapTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBumpTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBumpTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetEnvironmentTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetEnvironmentTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetTransparencyTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetTransparencyTexture(string filename, bool front)
Return: bool
Modifiers: public

Class: Rhino.Display.DisplayModeChangedEventArgs

Property: Rhino.Display.DisplayModeChangedEventArgs.ChangedDisplayModeId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.OldDisplayModeId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.RhinoDoc
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Class: Rhino.Display.DisplayModeDescription
Summary: Description of a how Rhino will display in a viewport. These are the modes that are listed under "Advanced display" in the options dialog.

Property: Rhino.Display.DisplayModeDescription.AmbientOcclusionId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.ArtisticId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.GhostedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.MonochromeId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.PenId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RaytracedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RenderedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RenderedShadowsId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.ShadedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.TechId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.WireframeId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.XRayId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.AllowObjectAssignment
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.DisplayAttributes
Return: DisplayPipelineAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.EnglishName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.Id
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.InMenu
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.LocalName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.PipelineLocked
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.ShadedPipelineRequired
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.SupportsShadeCommand
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.SupportsShading
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.WireframePipelineRequired
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayModeDescription.AddDisplayMode(DisplayModeDescription displayMode)
Return: System.Guid
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.AddDisplayMode(string name)
Return: System.Guid
Modifiers: public, static
Summary: Adds a new display mode.
Parameter: name (string)
Parameter Summary: The name of the new display mode.

Method: Rhino.Display.DisplayModeDescription.CopyDisplayMode(System.Guid id, string name)
Return: System.Guid
Modifiers: public, static
Summary: Copies an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to copy.
Parameter: name (string)
Parameter Summary: The name of the new display mode.

Method: Rhino.Display.DisplayModeDescription.DeleteDiplayMode(System.Guid id)
Return: bool
Modifiers: public, static
Summary: Deletes an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to delete.

Method: Rhino.Display.DisplayModeDescription.DeleteDisplayMode(System.Guid id)
Return: bool
Modifiers: public, static
Summary: Deletes an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to delete.

Method: Rhino.Display.DisplayModeDescription.ExportToFile(DisplayModeDescription displayMode, string filename)
Return: bool
Modifiers: public, static
Summary: Exports a DisplayModeDescription to a Windows-style .ini file.
Parameter: displayMode (DisplayModeDescription)
Parameter Summary: The DisplayModeDescription to export.
Parameter: filename (string)
Parameter Summary: The name of the file to create.

Method: Rhino.Display.DisplayModeDescription.FindByName(string englishName)
Return: DisplayModeDescription
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.GetDisplayMode(System.Guid id)
Return: DisplayModeDescription
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.GetDisplayModes()
Return: DisplayModeDescription[]
Modifiers: public, static
Summary: Gets all display mode descriptions that Rhino currently knows about.

Method: Rhino.Display.DisplayModeDescription.ImportFromFile(string filename)
Return: System.Guid
Modifiers: public, static
Summary: Imports a DisplayModeDescription from a Windows-style .ini file.
Parameter: filename (string)
Parameter Summary: The name of the file to import.

Method: Rhino.Display.DisplayModeDescription.UpdateDisplayMode(DisplayModeDescription displayMode)
Return: bool
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayModeDescription.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.Display.DisplayPen
Summary: Pen used to define stroke applied to several DisplayPipeline draw functions

Constructor: Rhino.Display.DisplayPen.DisplayPen()
Summary: Initializes a new instance of the DisplayPen class

Property: Rhino.Display.DisplayPen.CapStyle
Return: LineCapStyle
Modifiers: public
Summary: How caps are drawn at the ends of open curves
Accessors: get set

Property: Rhino.Display.DisplayPen.Color
Return: Color
Modifiers: public
Summary: Color applied to stroke
Accessors: get set

Property: Rhino.Display.DisplayPen.HaloColor
Return: Color
Modifiers: public
Summary: Halos are blended colors drawn around a curve for purposes like selection
Accessors: get set

Property: Rhino.Display.DisplayPen.HaloThickness
Return: float
Modifiers: public
Summary: Halos are blended colors drawn around a curve for purposes like selection
Accessors: get set

Property: Rhino.Display.DisplayPen.JoinStyle
Return: LineJoinStyle
Modifiers: public
Summary: How corners of curves are joined
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternBySegment
Return: bool
Modifiers: public
Summary: Restart patterns at corners in a curve
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternLengthInWorldUnits
Return: bool
Modifiers: public
Summary: If true, lengths in pattern definition are interpreted to be in world units. If false, screen pixel distances are used.
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternOffset
Return: float
Modifiers: public
Summary: Offset to apply to pattern. If RhinoMath.UnsetSingle, then pattern is centered to keep even dash lengths at ends
Accessors: get set

Property: Rhino.Display.DisplayPen.Thickness
Return: float
Modifiers: public
Summary: Thickness for stroke
Accessors: get set

Property: Rhino.Display.DisplayPen.ThicknessSpace
Return: CoordinateSystem
Modifiers: public
Summary: Coordinate system for the pen's thickness
Accessors: get set

Method: Rhino.Display.DisplayPen.FromLinetype(Linetype linetype, System.Drawing.Color color, double patternScale)
Return: DisplayPen
Modifiers: public, static
Summary: Create a display pen that matches a linetype definition
Parameter: linetype (Linetype)
Parameter Summary:
Parameter: color (System.Drawing.Color)
Parameter Summary:
Parameter: patternScale (double)
Parameter Summary: scale to be applied to linetype dash pattern. Typically this is 1

Method: Rhino.Display.DisplayPen.Duplicate()
Return: DisplayPen
Modifiers: public
Summary: Create a duplicate of this display pen.

Method: Rhino.Display.DisplayPen.PatternAsArray()
Return: float
Modifiers: public
Summary: Get the pattern for this pen as an array of dash,gap,dash,gap... values

Method: Rhino.Display.DisplayPen.SetPattern(IEnumerable<float> dashesAndGaps)
Return: void
Modifiers: public
Summary: Set pattern to apply for a stroke.
Parameter: dashesAndGaps (System.Collections.Generic.IEnumerable<float>)
Parameter Summary: Lengths of dashes and gaps for a pattern. Dash is always assumed the first item. There is a limit to 8 dashes and gaps total

Method: Rhino.Display.DisplayPen.SetTaper(float startThickness, float endThickness, Point2f taperPoint)
Return: void
Modifiers: public
Summary: Positions and thickness at those positions along a curve that define a taper.

Method: Rhino.Display.DisplayPen.TaperAsArray()
Return: Point2f[]
Modifiers: public
Summary: Collection of positions and thicknesses at those positions to define a taper Rhino currently only supports either no taper or a single taper. An array is used here in case Rhino supports multiple taper values in the future.

Class: Rhino.Display.DisplayPipeline
Summary: The display pipeline calls events during specific phases of drawing During the drawing of a single frame the events are called in the following order. [Begin Drawing of a Frame] <ul><li>CalculateBoundingBox</li><li>CalculateClippingPanes</li><li>SetupFrustum</li><li>SetupLighting</li><li>InitializeFrameBuffer</li><li>DrawBackground</li><li>If this is a layout and detail objects exist the channels are called in the same order for each detail object (drawn as a nested viewport)</li><li>PreDrawObjects</li><li>For Each Visible Non Highlighted Object<ul><li>SetupObjectDisplayAttributes</li><li>PreDrawObject</li><li>DrawObject</li><li>PostDrawObject</li></ul></li><li>PostDrawObjects - depth writing/testing on</li><li>DrawForeGround - depth writing/testing off</li><li>For Each Visible Highlighted Object<ul><li>SetupObjectDisplayAttributes</li><li>PreDrawObject</li><li>DrawObject</li><li>PostDrawObject</li></ul></li><li>PostProcessFrameBuffer (If a delegate exists that requires this)</li><li>DrawOverlay (if Rhino is in a feedback mode)</li></ul> [End of Drawing of a Frame]
NOTE: There may be multiple DrawObject calls for a single object. An example of when this could happen would be with a shaded sphere. The shaded mesh is first drawn and these channels would be processed; then at a later time the isocurves for the sphere would be drawn.

Property: Rhino.Display.DisplayPipeline.ActiveObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveObjectNestingLevel
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveObjectNestingStack
Return: RhinoObject[]
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveTopLevelObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.DefaultCurveThickness
Return: int
Modifiers: public
Summary: Gets the curve thickness as defined by the current display mode. Note: this only applies to curve objects, Brep and Mesh wires may have different settings.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DepthMode
Return: DepthMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipeline.DisplayPipelineAttributes
Return: DisplayPipelineAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.DpiScale
Return: float
Modifiers: public
Summary: Scale factor used for high resolution displays. When a monitor that this pipeline is drawing to is at a DPI of 96, this value is one. On high DPI monitors, this value will commonly be greater than one.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingGrips
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a grip drawing operation.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingSurfaces
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a surface drawing operation. Surface drawing means draw the shaded triangles of a mesh representing the surface (mesh, extrusion, or brep). This is useful when inside of a draw event or display conduit to check and see if the geometry is about to be drawn as a shaded set of triangles representing the geometry. See DrawingWires to check and see if the wireframe representation of the geometry is going to be drawn.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingWires
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a curve drawing operation. This is useful when inside of a draw event or display conduit to check and see if the geometry is about to be drawn is going to be drawing the wire representation of the geometry (mesh, extrusion, or brep). See DrawingSurfaces to check and see if the shaded mesh representation of the geometry is going to be drawn.
Accessors: get

Property: Rhino.Display.DisplayPipeline.FrameBuffer
Return: Bitmap
Modifiers: public
Summary: Gets the contents of the frame buffer that this pipeline is drawing to.
Accessors: get

Property: Rhino.Display.DisplayPipeline.FrameSize
Return: Size
Modifiers: public
Summary: Gets the size of the frame buffer that this pipeline is drawing to.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsDynamicDisplay
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the viewport is in Dynamic Display state. Dynamic display is the state a viewport is in when it is rapidly redrawing because of an operation like panning or rotating. The pipeline will drop some level of detail while inside a dynamic display state to keep the frame rate as high as possible.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsInViewCapture
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently drawing for ViewCaptureToFile or ViewCaptureToClipboard
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsOpen
Return: bool
Modifiers: public
Summary: Is True of the pipeline is open, False otherwise.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsOpenGL
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this pipeline is drawing into an OpenGL context.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsPrinting
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently drawing for printing purposes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsStereoMode
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently using an engine that is performing stereo style drawing. Stereo drawing is for providing an "enhanced 3-D" effect through stereo viewing devices.
Accessors: get

Property: Rhino.Display.DisplayPipeline.ModelTransform
Return: Transform
Modifiers: public
Summary: Gets or sets the current model transformation that is applied to vertices when drawing.
Accessors: get set

Property: Rhino.Display.DisplayPipeline.ModelTransformIsIdentity
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the Model Transform is an Identity transformation.
Accessors: get

Property: Rhino.Display.DisplayPipeline.NestLevel
Return: int
Modifiers: public
Summary: Gets the current nested viewport drawing level. This is used to know if you are currently inside the drawing of a nested viewport (detail object in Rhino).
Nest level = 0 Drawing is occurring in a standard Rhino viewport or on the page viewport.
Nest level = 1 Drawing is occurring inside a detail view object. | Accessors: get

Property: Rhino.Display.DisplayPipeline.RenderPass
Return: int
Modifiers: public
Summary: Gets the current pass that the pipeline is in for drawing a frame. Typically drawing a frame requires a single pass through the DrawFrameBuffer function, but some special display effects can be achieved through drawing with multiple passes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.ShadingRequired
Return: bool
Modifiers: public
Summary: Gets or sets the "ShadingRequired" flag. This flag gets set inside the pipeline when a request is made to draw a shaded mesh but the current render engine doesn't support shaded mesh drawing...at this point the redraw mechanism will make sure everything will work the next time around.
Accessors: get set

Property: Rhino.Display.DisplayPipeline.StereoProjection
Return: int
Modifiers: public
Summary: Gets the current stereo projection if stereo mode is on.
0 = left, 1 = right If stereo mode is not enables, this property always returns 0.
Accessors: get

Property: Rhino.Display.DisplayPipeline.SupportsShading
Return: bool
Modifiers: public
Summary: Gets whether or not this pipeline supports shaded meshes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ZBiasMode
Return: ZBiasMode
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayPipeline.AvailableOpenGLVersion(out bool coreProfile)
Return: uint
Modifiers: public, static
Summary: If Rhino is using OpenGL for display, this function will return major.minor version of OpenGL available for this instance of Rhino
Parameter: coreProfile (bool)
Parameter Summary: If true, OpenGL is being used in "core profile" mode

Method: Rhino.Display.DisplayPipeline.CullControlPolygon()
Return: bool
Modifiers: public, static
Summary: Returns a value indicating if only points on the side of the surface that face the camera are displayed.

Method: Rhino.Display.DisplayPipeline.DrawToBitmap(RhinoViewport viewport, int width, int height)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Draw a given viewport to an off-screen bitmap.
Parameter: viewport (RhinoViewport)
Parameter Summary: Viewport to draw.
Parameter: width (int)
Parameter Summary: Width of target image.
Parameter: height (int)
Parameter Summary: Height of target image.

Method: Rhino.Display.DisplayPipeline.GetDrawListSerialNumbers(out uint modelSerialNumber, out uint pageSerialNumber)
Return: void
Modifiers: public, static
Summary: Gets the current model and page view draw list serial numbers, which can be used to determine if a model or page view needs to be redrawn.
Parameter: modelSerialNumber (uint)
Parameter Summary: The current model draw list serial number.
Parameter: pageSerialNumber (uint)
Parameter Summary: The current page view draw list serial number.

Method: Rhino.Display.DisplayPipeline.MakeDefaultOpenGLContextCurrent()
Return: bool
Modifiers: public, static
Summary: Make a "default" OpenGL context current

Method: Rhino.Display.DisplayPipeline.AddClippingPlane(Point3d point, Vector3d normal)
Return: int
Modifiers: public
Summary: Add a clipping plane to be used during the drawing of this frame
Parameter: point (Point3d)
Parameter Summary: point on the plane
Parameter: normal (Vector3d)
Parameter Summary: vector perpendicular to the plane

Method: Rhino.Display.DisplayPipeline.ClearFrameBuffer(System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Fill the frame buffer with a single color. This function also clears the depth buffer for engines that support depth buffered drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: the color to fill the frame buffer with

Method: Rhino.Display.DisplayPipeline.Clone(RhinoViewport viewport)
Return: DisplayPipeline
Modifiers: public
Summary: Clones the pipeline. Creates an identical copy of "this" pipeline. Copies all conduits from "this" pipeline to the new pipeline.

Method: Rhino.Display.DisplayPipeline.Close()
Return: bool
Modifiers: public
Summary: Closes the pipeline.

Method: Rhino.Display.DisplayPipeline.Draw2dLine(System.Drawing.Point from, System.Drawing.Point to, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dLine(System.Drawing.PointF from, System.Drawing.PointF to, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dRectangle(System.Drawing.Rectangle rectangle, System.Drawing.Color strokeColor, int thickness, System.Drawing.Color fillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified, int height, string fontface)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)
Parameter: fontface (string)
Parameter Summary: font name (good default is "Arial")

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified, int height)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified, int height, string fontface)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: Definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: If True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: Height in pixels (good default is 12).
Parameter: fontface (string)
Parameter Summary: Font name (good default is "Arial").

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified, int height)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface, bool bold, bool italic, DocObjects.TextHorizontalAlignment horizontalAlignment, DocObjects.TextVerticalAlignment verticalAlignment)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface, bool bold, bool italic)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color, Plane textPlane)
Return: void
Modifiers: public
Summary: Draws 3d text with a different plane than what is defined in the Text3d class.
Parameter: text (Text3d)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: textPlane (Plane)
Parameter Summary: The plane for the text object.

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color, Point3d textPlaneOrigin)
Return: void
Modifiers: public
Summary: Draws 3d text using the Text3d plane with an adjusted origin.
Parameter: text (Text3d)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: textPlaneOrigin (Point3d)
Parameter Summary: The origin of the plane to draw.

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawActivePoint(Point3d point)
Return: void
Modifiers: public
Summary: Draws a point in style used during "GetPoint" operations
Parameter: point (Point3d)
Parameter Summary: Location of the point in world coordinates

Method: Rhino.Display.DisplayPipeline.DrawAnnotation(AnnotationBase annotation, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawAnnotationArrowhead(Arrowhead arrowhead, Transform xform, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawArc(Arc arc, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single arc object.
Parameter: arc (Arc)
Parameter Summary: Arc to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of arc.

Method: Rhino.Display.DisplayPipeline.DrawArc(Arc arc, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single arc object.
Parameter: arc (Arc)
Parameter Summary: Arc to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawArrow(Line line, System.Drawing.Color color, double screenSize, double relativeSize)
Return: void
Modifiers: public
Summary: Draws a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: line (Line)
Parameter Summary: Arrow shaft.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.
Parameter: screenSize (double)
Parameter Summary: If screenSize != 0.0 then the size (in screen pixels) of the arrow head will be equal to screenSize.
Parameter: relativeSize (double)
Parameter Summary: If relativeSize != 0.0 and screen size == 0.0 the size of the arrow head will be proportional to the arrow shaft length.

Method: Rhino.Display.DisplayPipeline.DrawArrow(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: line (Line)
Parameter Summary: Arrow shaft.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.

Method: Rhino.Display.DisplayPipeline.DrawArrowHead(Point3d tip, Vector3d direction, System.Drawing.Color color, double screenSize, double worldSize)
Return: void
Modifiers: public
Summary: Draws a single arrow head.
Parameter: tip (Point3d)
Parameter Summary: Point of arrow head tip.
Parameter: direction (Vector3d)
Parameter Summary: Direction in which arrow head is pointing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow head.
Parameter: screenSize (double)
Parameter Summary: If screenSize != 0.0, then the size (in screen pixels) of the arrow head will be equal to the screenSize.
Parameter: worldSize (double)
Parameter Summary: If worldSize != 0.0 and screen size == 0.0 the size of the arrow head will be equal to the number of units in worldSize.

Method: Rhino.Display.DisplayPipeline.DrawArrows(IEnumerable<Line> lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Arrow shafts.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrows.

Method: Rhino.Display.DisplayPipeline.DrawArrows(Line[] lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: lines (Line[])
Parameter Summary: Arrow shafts.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrows.

Method: Rhino.Display.DisplayPipeline.DrawBitmap(DisplayBitmap bitmap, int left, int top)
Return: void
Modifiers: public
Summary: Draws a bitmap in screen coordinates
Parameter: bitmap (DisplayBitmap)
Parameter Summary: bitmap to draw
Parameter: left (int)
Parameter Summary: where top/left corner of bitmap should appear in screen coordinates
Parameter: top (int)
Parameter Summary: where top/left corner of bitmap should appear in screen coordinates

Method: Rhino.Display.DisplayPipeline.DrawBox(BoundingBox box, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws the edges of a BoundingBox.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of box edges.

Method: Rhino.Display.DisplayPipeline.DrawBox(BoundingBox box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws the edges of a BoundingBox.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawBox(Box box, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws the edges of a Box object.
Parameter: box (Box)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of box edges.

Method: Rhino.Display.DisplayPipeline.DrawBox(Box box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws the edges of a Box object.
Parameter: box (Box)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color, double size, int thickness)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: size (double)
Parameter Summary: Size (in model units) of the corner widgets.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the corner widgets.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color, double size)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: size (double)
Parameter Summary: Size (in model units) of the corner widgets.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box. Widget size will be 5% of the Box diagonal.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawBrepShaded(Brep brep, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draws a shaded mesh representation of a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.

Method: Rhino.Display.DisplayPipeline.DrawBrepWires(Brep brep, System.Drawing.Color color, int wireDensity)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a brep object.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.
Parameter: wireDensity (int)
Parameter Summary: "Density" of wireframe curves.
-1 = no internal wires.
0 = default internal wires.
>0 = custom high density.

Method: Rhino.Display.DisplayPipeline.DrawBrepWires(Brep brep, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a brep object.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.

Method: Rhino.Display.DisplayPipeline.DrawCircle(Circle circle, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single circle object.
Parameter: circle (Circle)
Parameter Summary: Circle to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of circle.

Method: Rhino.Display.DisplayPipeline.DrawCircle(Circle circle, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single circle object.
Parameter: circle (Circle)
Parameter Summary: Circle to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawCone(Cone cone, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe cone.
Parameter: cone (Cone)
Parameter Summary: Cone to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of Cone wires.

Method: Rhino.Display.DisplayPipeline.DrawCone(Cone cone, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe cone.
Parameter: cone (Cone)
Parameter Summary: Cone to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawConstructionPlane(DocObjects.ConstructionPlane constructionPlane)
Return: void
Modifiers: public
Summary: Draws a construction plane.
Parameter: constructionPlane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to draw.

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color, int hairScale, int hairDensity, int sampleDensity)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.
Parameter: hairScale (int)
Parameter Summary: 100 = True length, > 100 magnified, < 100 shortened.
Parameter: hairDensity (int)
Parameter Summary: >= 0 larger numbers = more hairs (good default is 1).
Parameter: sampleDensity (int)
Parameter Summary: Between 1 and 10. Higher numbers draw smoother outer curves. (good default is 2).

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color, int hairScale)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.
Parameter: hairScale (int)
Parameter Summary: 100 = True length, > 100 magnified, < 100 shortened.

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single Curve object.
Parameter: curve (Curve)
Parameter Summary: Curve to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of curve.

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single Curve object.
Parameter: curve (Curve)
Parameter Summary: Curve to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawCylinder(Cylinder cylinder, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of cylinder wires.

Method: Rhino.Display.DisplayPipeline.DrawCylinder(Cylinder cylinder, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawDirectionArrow(Point3d location, Vector3d direction, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawDot(float screenX, float screenY, string text, System.Drawing.Color dotColor, System.Drawing.Color textColor)
Return: void
Modifiers: public
Summary: Draws a text dot in screen coordinates.
Parameter: screenX (float)
Parameter Summary: X coordinate (in pixels) of dot center.
Parameter: screenY (float)
Parameter Summary: Y coordinate (in pixels) of dot center.
Parameter: text (string)
Parameter Summary: Text content of dot.
Parameter: dotColor (System.Drawing.Color)
Parameter Summary: Dot background color.
Parameter: textColor (System.Drawing.Color)
Parameter Summary: Dot foreground color.

Method: Rhino.Display.DisplayPipeline.DrawDot(float screenX, float screenY, string text)
Return: void
Modifiers: public
Summary: Draws a text dot in screen coordinates.
Parameter: screenX (float)
Parameter Summary: X coordinate (in pixels) of dot center.
Parameter: screenY (float)
Parameter Summary: Y coordinate (in pixels) of dot center.
Parameter: text (string)
Parameter Summary: Text content of dot.

Method: Rhino.Display.DisplayPipeline.DrawDot(Point3d worldPosition, string text, System.Drawing.Color dotColor, System.Drawing.Color textColor)
Return: void
Modifiers: public
Summary: Draw a text dot in world coordinates.
Parameter: worldPosition (Point3d)
Parameter Summary: Location of dot in world coordinates.
Parameter: text (string)
Parameter Summary: Text content of dot.
Parameter: dotColor (System.Drawing.Color)
Parameter Summary: Dot background color.
Parameter: textColor (System.Drawing.Color)
Parameter Summary: Dot foreground color.

Method: Rhino.Display.DisplayPipeline.DrawDot(Point3d worldPosition, string text)
Return: void
Modifiers: public
Summary: Draws a text dot in world coordinates.
Parameter: worldPosition (Point3d)
Parameter Summary: Location of dot in world coordinates.
Parameter: text (string)
Parameter Summary: Text content of dot.

Method: Rhino.Display.DisplayPipeline.DrawDot(TextDot dot, System.Drawing.Color fillColor, System.Drawing.Color textColor, System.Drawing.Color borderColor)
Return: void
Modifiers: public
Summary: Draw a text dot as defined by the text dot class

Method: Rhino.Display.DisplayPipeline.DrawDottedLine(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single dotted line.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.

Method: Rhino.Display.DisplayPipeline.DrawDottedLine(Point3d from, Point3d to, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single dotted line.
Parameter: from (Point3d)
Parameter Summary: Line start point.
Parameter: to (Point3d)
Parameter Summary: Line end point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.

Method: Rhino.Display.DisplayPipeline.DrawDottedPolyline(IEnumerable<Point3d> points, System.Drawing.Color color, bool close)
Return: void
Modifiers: public
Summary: Draws a set of connected lines (polyline) in a dotted pattern (0x00001111).
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: End points of each line segment.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of polyline.
Parameter: close (bool)
Parameter Summary: Draw a line between the first and last points.

Method: Rhino.Display.DisplayPipeline.DrawExtrusionWires(Extrusion extrusion, System.Drawing.Color color, int wireDensity)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of an extrusion object.
Parameter: extrusion (Extrusion)
Parameter Summary: Extrusion to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.
Parameter: wireDensity (int)
Parameter Summary: "Density" of wireframe curves.
-1 = no internal wires.
0 = default internal wires.
>0 = custom high density.

Method: Rhino.Display.DisplayPipeline.DrawExtrusionWires(Extrusion extrusion, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of an extrusion object.
Parameter: extrusion (Extrusion)
Parameter Summary: Extrusion to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat, DisplayPen boundary, System.Drawing.Color backgroundFillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat, float boundaryThickness, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, System.Drawing.Color color1, System.Drawing.Color color2, Point3d point1, Point3d point2, bool linearGradient, float boundaryThickness, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public
Summary: Draw a two point gradient filled hatch

Method: Rhino.Display.DisplayPipeline.DrawGradientLines(IEnumerable<Line> lines, float strokeWidth, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientMesh(Mesh mesh, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawHatch(Hatch hatch, System.Drawing.Color hatchColor, DisplayPen boundary, System.Drawing.Color backgroundFillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawHatch(Hatch hatch, System.Drawing.Color hatchColor, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawInstanceDefinition(DocObjects.InstanceDefinition instanceDefinition, Transform xform)
Return: void
Modifiers: public
Summary: Draws an <b>DocObjects.InstanceDefinition</b> .
Parameter: instanceDefinition (DocObjects.InstanceDefinition)
Parameter Summary: The instance definition.
Parameter: xform (Transform)
Parameter Summary: The transformation.

Method: Rhino.Display.DisplayPipeline.DrawInstanceDefinition(DocObjects.InstanceDefinition instanceDefinition)
Return: void
Modifiers: public
Summary: Draws an <b>DocObjects.InstanceDefinition</b> .
Parameter: instanceDefinition (DocObjects.InstanceDefinition)
Parameter Summary: The instance definition.

Method: Rhino.Display.DisplayPipeline.DrawLight(Light light, System.Drawing.Color wireframeColor)
Return: void
Modifiers: public
Summary: Draws a light.
Parameter: light (Light)
Parameter Summary: The light to draw.
Parameter: wireframeColor (System.Drawing.Color)
Parameter Summary: The wireframe color.

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.

Method: Rhino.Display.DisplayPipeline.DrawLine(Point3d from, Point3d to, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLine(Point3d from, Point3d to, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.

Method: Rhino.Display.DisplayPipeline.DrawLineArrow(Line line, System.Drawing.Color color, int thickness, double size)
Return: void
Modifiers: public
Summary: Draws an arrow made up of three line segments.
Parameter: line (Line)
Parameter Summary: Base line for arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the arrow line segments.
Parameter: size (double)
Parameter Summary: Size (in world units) of the arrow tip lines.

Method: Rhino.Display.DisplayPipeline.DrawLineNoClip(Point3d from, Point3d to, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object .This version of line drawing will draw the segments of the line that extend beyond the near and far planes of the view frustum with depths on those planes
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLines(IEnumerable<Line> lines, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines to be drawn, pass a Line[] for lines.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Lines to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawLines(IEnumerable<Line> lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines to be drawn, pass a Line[] for lines.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Lines to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawLines(Line[] lines, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness, double size, double rotation)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.
Parameter: size (double)
Parameter Summary: Size (in pixels) of the arrow shaft.
Parameter: rotation (double)
Parameter Summary: Rotational angle adjustment (in radians, counter-clockwise of direction.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness, double size)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.
Parameter: size (double)
Parameter Summary: Size (in pixels) of the arrow shaft.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.

Method: Rhino.Display.DisplayPipeline.DrawMeshFalseColors(Mesh mesh)
Return: void
Modifiers: public
Summary: Draws the mesh faces as False color patches. The mesh must have Vertex Colors defined for this to work.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.

Method: Rhino.Display.DisplayPipeline.DrawMeshShaded(Mesh mesh, DisplayMaterial material, int faceIndices)
Return: void
Modifiers: public
Summary: Draws the shaded faces of a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.
Parameter: faceIndices (int)
Parameter Summary: Indices of specific faces to draw

Method: Rhino.Display.DisplayPipeline.DrawMeshShaded(Mesh mesh, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draws the shaded faces of a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.

Method: Rhino.Display.DisplayPipeline.DrawMeshVertices(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the vertices in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for vertex drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh vertices.

Method: Rhino.Display.DisplayPipeline.DrawMeshWires(Mesh mesh, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws all the wires in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for wire drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh wires.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of mesh wires.

Method: Rhino.Display.DisplayPipeline.DrawMeshWires(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wires in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for wire drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh wires.

Method: Rhino.Display.DisplayPipeline.DrawObject(DocObjects.RhinoObject rhinoObject, Transform xform)
Return: void
Modifiers: public
Summary: Draws a <b>DocObjects.RhinoObject</b> with an applied transformation.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: The Rhino object.
Parameter: xform (Transform)
Parameter Summary: The transformation.

Method: Rhino.Display.DisplayPipeline.DrawObject(DocObjects.RhinoObject rhinoObject)
Return: void
Modifiers: public
Summary: Draws a <b>DocObjects.RhinoObject</b> .
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: The Rhino object.

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles, DisplayBitmap bitmap)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles, DisplayBitmap[] bitmaps)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPatternedLine(Line line, System.Drawing.Color color, int pattern, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line with specified pattern.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.
Parameter: pattern (int)
Parameter Summary: Pattern of the line (like 0x00001111 for dotted line).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawPatternedLine(Point3d from, Point3d to, System.Drawing.Color color, int pattern, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line with specified pattern.
Parameter: from (Point3d)
Parameter Summary: Line start point.
Parameter: to (Point3d)
Parameter Summary: Line end point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.
Parameter: pattern (int)
Parameter Summary: Pattern of the line (like 0x00001111 for dotted line).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawPatternedPolyline(IEnumerable<Point3d> points, System.Drawing.Color color, int pattern, int thickness, bool close)
Return: void
Modifiers: public
Summary: Draws a set of connected lines (polyline) with specified pattern.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: End points of each line segment.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of polyline.
Parameter: pattern (int)
Parameter Summary: Pattern to use for the line (like 0x00001111 for dotted).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.
Parameter: close (bool)
Parameter Summary: Draw a line between the first and last points.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, float radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (float)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, int radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (int)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, System.Drawing.Color strokeColor, System.Drawing.Color fillColor, float radius, float strokeWidth, float secondarySize, float rotationRadians, bool diameterIsInPixels, bool autoScaleForDpi)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point)
Return: void
Modifiers: public
Summary: Draws a point using the current display attribute size, style and color
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, float size, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw.
Parameter: size (float)
Parameter Summary: Size of points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points in the cloud, if the cloud has a color array this setting is ignored.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, float size)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw, if the cloud has a color array, it will be used, otherwise the points will be black.
Parameter: size (float)
Parameter Summary: Size of points.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, int size, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw.
Parameter: size (int)
Parameter Summary: Size of points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points in the cloud, if the cloud has a color array this setting is ignored.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, int size)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw, if the cloud has a color array, it will be used, otherwise the points will be black.
Parameter: size (int)
Parameter Summary: Size of points.

Method: Rhino.Display.DisplayPipeline.DrawPoints(DisplayPointSet points, DisplayPointAttributes fallbackAttributes, DisplayPointAttributes overrideAttributes)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoints(DisplayPointSet points)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, float radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a set of points with a given radius, style and color.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Location of points in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (float)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, int radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a set of points with a given radius, style and color.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Location of points in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (int)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, System.Drawing.Color strokeColor, System.Drawing.Color fillColor, float radius, float strokeWidth, float secondarySize, float rotationRadians, bool diameterIsInPixels, bool autoScaleForDpi)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPolygon(IEnumerable<Point3d> points, System.Drawing.Color color, bool filled)
Return: void
Modifiers: public
Summary: Draws a filled, convex polygon from a collection of points.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Collection of world coordinate points that are connected by lines to form a closed shape. Collection must contain at least 3 points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: filled (bool)
Parameter Summary: True if the closed area should be filled with color. False if you want to draw just the border of the closed shape.

Method: Rhino.Display.DisplayPipeline.DrawPolyline(IEnumerable<Point3d> polyline, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single Polyline object.
Parameter: polyline (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Polyline to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the Polyline.

Method: Rhino.Display.DisplayPipeline.DrawPolyline(IEnumerable<Point3d> polyline, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single Polyline object.
Parameter: polyline (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Polyline to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawRoundedRectangle(System.Drawing.PointF center, float pixelWidth, float pixelHeight, float cornerRadius, System.Drawing.Color strokeColor, float strokeWidth, System.Drawing.Color fillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSphere(Sphere sphere, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe sphere.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of Sphere wires.

Method: Rhino.Display.DisplayPipeline.DrawSphere(Sphere sphere, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe sphere.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float width, float height)
Return: void
Modifiers: public
Summary: Draw screen oriented image centered at 2d screen location

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float size, System.Drawing.Color blendColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float size)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point3d worldLocation, float size, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point3d worldLocation, float size, System.Drawing.Color blendColor, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprites(DisplayBitmap bitmap, DisplayBitmapDrawList items, float size, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprites(DisplayBitmap bitmap, DisplayBitmapDrawList items, float size, Vector3d translation, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawStereoFrameBuffer(DocObjects.ViewportInfo viewportLeft, DocObjects.ViewportInfo viewportRight, out uint handleLeft, out uint handleRight)
Return: bool
Modifiers: public
Summary: Draws the viewport as seen from the left and the right eye viewports and returns the result as OpenGL texture handles.
Parameter: viewportLeft (DocObjects.ViewportInfo)
Parameter Summary: The viewport representing the left eye location and look direction.
Parameter: viewportRight (DocObjects.ViewportInfo)
Parameter Summary: The viewport representing the right eye location and look direction.
Parameter: handleLeft (uint)
Parameter Summary: Will contain the OpenGL texture handle which references the left output color buffer.
Parameter: handleRight (uint)
Parameter Summary: Will contain the OpenGL texture handle which references the right output color buffer.

Method: Rhino.Display.DisplayPipeline.DrawSubDShaded(SubD subd, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draw a shaded mesh representation of a SubD
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with

Method: Rhino.Display.DisplayPipeline.DrawSubDWires(SubD subd, DisplayPen boundaryPen, DisplayPen smoothInteriorPen, DisplayPen creasePen, DisplayPen nonmanifoldPen)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves os a SubD object using different pens
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: boundaryPen (DisplayPen)
Parameter Summary: Pen to use for boundary wires. If null, no boundary wires will be drawn
Parameter: smoothInteriorPen (DisplayPen)
Parameter Summary: Pen to use for smooth interior wires. If null, no smooth interior wires will be drawn
Parameter: creasePen (DisplayPen)
Parameter Summary: Pen to use for crease wires. If null, no crease wires will be drawn
Parameter: nonmanifoldPen (DisplayPen)
Parameter Summary: Pen to use for non-manifold wires. If null, no non-manifold wires will be drawn

Method: Rhino.Display.DisplayPipeline.DrawSubDWires(SubD subd, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a SubD object
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: color (System.Drawing.Color)
Parameter Summary: wire color
Parameter: thickness (float)
Parameter Summary: wire thickness

Method: Rhino.Display.DisplayPipeline.DrawSurface(Surface surface, System.Drawing.Color wireColor, int wireDensity)
Return: void
Modifiers: public
Summary: Draw wireframe display for a single surface.
Parameter: surface (Surface)
Parameter Summary: Surface to draw.
Parameter: wireColor (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: wireDensity (int)
Parameter Summary: Thickness (in pixels) or wires to draw.

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color, double scale)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color, Transform xform)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawTorus(Torus torus, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe torus.
Parameter: torus (Torus)
Parameter Summary: Torus to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of torus wires.

Method: Rhino.Display.DisplayPipeline.DrawTorus(Torus torus, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe torus.
Parameter: torus (Torus)
Parameter Summary: Torus to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawZebraPreview(Brep brep, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a shaded Brep with Zebra stripe preview.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Object color.

Method: Rhino.Display.DisplayPipeline.DrawZebraPreview(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a shaded Mesh with Zebra stripe preview.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Object color.

Method: Rhino.Display.DisplayPipeline.EnableClippingPlanes(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the Clipping Plane logic of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable Clipping Planes, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableColorWriting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the ColorWriting behavior of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable ColorWriting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableDepthTesting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the DepthTesting behavior of the engine. When DepthTesting is disabled, objects in front will no longer occlude objects behind them.
Parameter: enable (bool)
Parameter Summary: True to enable DepthTesting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableDepthWriting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the DepthWriting behavior of the engine. When DepthWriting is disabled, drawn geometry does not affect the Z-Buffer.
Parameter: enable (bool)
Parameter Summary: True to enable DepthWriting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableLighting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the Lighting logic of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable Lighting, False to disable.

Method: Rhino.Display.DisplayPipeline.Flush()
Return: void
Modifiers: public
Summary: Force the pipeline to immediately flush any cached geometry to the display

Method: Rhino.Display.DisplayPipeline.GetLights()
Return: Light[]
Modifiers: public
Summary: Get lights that this pipeline is current using

Method: Rhino.Display.DisplayPipeline.GetOpenGLCameraToClip()
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "camera" to "clip" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.GetOpenGLWorldToCamera(bool includeModelTransform)
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "world" to "camera" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.GetOpenGLWorldToClip(bool includeModelTransform)
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "world" to "clip" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.InterruptDrawing()
Return: bool
Modifiers: public
Summary: Tests to see if the pipeline should stop drawing more geometry and just show what it has so far. If a drawing operation is taking a long time, this function will return True and tell Rhino it should just finish up and show the frame buffer. This is used in dynamic drawing operations.

Method: Rhino.Display.DisplayPipeline.IsActive(DocObjects.RhinoObject rhinoObject)
Return: bool
Modifiers: public
Summary: Determines if an object can be visible in this viewport based on it's object type and display attributes. This test does not check for visibility based on location of the object. NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" tests based on location (is some part of the object in the view frustum). Use CRhinoDisplayPipeline::IsActive() to perform "visibility" tests based on object type.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: Object to test.

Method: Rhino.Display.DisplayPipeline.IsInTiledDraw(out System.Drawing.Size fullSize, out System.Drawing.Rectangle currentTile)
Return: bool
Modifiers: public
Summary: Returns True if the currently drawn frame is part of a tiled capture. Tiled captures are performed when creating large raster outputs.
Parameter: fullSize (System.Drawing.Size)
Parameter Summary: Final full size area that is being created
Parameter: currentTile (System.Drawing.Rectangle)
Parameter Summary: What portion of the fullSize area that is currently being drawn

Method: Rhino.Display.DisplayPipeline.IsVisible(BoundingBox bbox)
Return: bool
Modifiers: public
Summary: Test a given box for visibility inside the view frustum under the current viewport and model transformation settings.
Parameter: bbox (BoundingBox)
Parameter Summary: Box to test for visibility.

Method: Rhino.Display.DisplayPipeline.IsVisible(DocObjects.RhinoObject rhinoObject)
Return: bool
Modifiers: public
Summary: Test a given object for visibility inside the view frustum under the current viewport and model transformation settings. This function calls a virtual IsVisibleFinal function that sub-classed pipelines can add extra tests to. In the base class, this test only tests visibility based on the objects world coordinates location and does not pay attention to the object's attributes. NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" tests based on location (is some part of the object in the view frustum). Use CRhinoDisplayPipeline::IsActive() to perform "visibility" tests based on object type.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: Object to test.

Method: Rhino.Display.DisplayPipeline.IsVisible(Point3d worldCoordinate)
Return: bool
Modifiers: public
Summary: Test a given 3d world coordinate point for visibility inside the view frustum under the current viewport and model transformation settings.
Parameter: worldCoordinate (Point3d)
Parameter Summary: Point to test for visibility.

Method: Rhino.Display.DisplayPipeline.Measure2dText(string text, Point2d definitionPoint, bool middleJustified, double rotationRadians, int height, string fontFace)
Return: System.Drawing.Rectangle
Modifiers: public
Summary: Determines screen rectangle that would be drawn to using the Draw2dText(..) function with the same parameters.
Parameter: text (string)
Parameter Summary: text to measure.
Parameter: definitionPoint (Point2d)
Parameter Summary: either lower-left or middle of text.
Parameter: middleJustified (bool)
Parameter Summary: true=middle justified. false=lower-left justified.
Parameter: rotationRadians (double)
Parameter Summary: text rotation in radians
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)
Parameter: fontFace (string)
Parameter Summary: font name (good default is "Arial")

Method: Rhino.Display.DisplayPipeline.Open()
Return: bool
Modifiers: public
Summary: Opens the pipeline.

Method: Rhino.Display.DisplayPipeline.PopClipTesting()
Return: void
Modifiers: public
Summary: Pop a ClipTesting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopCullFaceMode()
Return: void
Modifiers: public
Summary: Pop a FaceCull flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopDepthTesting()
Return: void
Modifiers: public
Summary: Pop a DepthTesting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopDepthWriting()
Return: void
Modifiers: public
Summary: Pop a DepthWriting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopModelTransform()
Return: void
Modifiers: public
Summary: Pop a model transformation off the engine's model transform stack.

Method: Rhino.Display.DisplayPipeline.PopProjection()
Return: void
Modifiers: public
Summary: Pop a view projection off this pipelines projection stack

Method: Rhino.Display.DisplayPipeline.Push2dProjection()
Return: void
Modifiers: public
Summary: Push the current view projection and set the viewport up to be a simple 2D top projection where the camera frustum matches the same size as the screen port. This allows geometry draw functions to act like they are working with typical 2d graphics APIs on a window

Method: Rhino.Display.DisplayPipeline.PushClipTesting(bool enable)
Return: void
Modifiers: public
Summary: Push a ClipTesting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: ClipTesting flag.

Method: Rhino.Display.DisplayPipeline.PushCullFaceMode(CullFaceMode mode)
Return: void
Modifiers: public
Summary: Push a FaceCull flag on the engine's stack.
Parameter: mode (CullFaceMode)
Parameter Summary: FaceCull flag.

Method: Rhino.Display.DisplayPipeline.PushDepthTesting(bool enable)
Return: void
Modifiers: public
Summary: Push a DepthTesting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: DepthTesting flag.

Method: Rhino.Display.DisplayPipeline.PushDepthWriting(bool enable)
Return: void
Modifiers: public
Summary: Push a DepthWriting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: DepthWriting flag.

Method: Rhino.Display.DisplayPipeline.PushModelTransform(Transform xform)
Return: void
Modifiers: public
Summary: Push a model transformation on the engine's model transform stack.
Parameter: xform (Transform)
Parameter Summary: Transformation to push.

Method: Rhino.Display.DisplayPipeline.RemoveClippingPlane(int index)
Return: void
Modifiers: public
Summary: Remove a clipping plane from the pipeline for this frame

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject, ObjectAttributes attributes, Transform instanceTransform)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The object attributes.
Parameter: instanceTransform (Transform)
Parameter Summary: The instance object transformation.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject, ObjectAttributes attributes)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The object attributes.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(System.Drawing.Color color)
Return: DisplayMaterial
Modifiers: public

Class: Rhino.Display.DisplayPipelineAttributes
Summary: Represents display pipeline settings, such as "show transparency" and "show grips".

Constructor: Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributes(SerializationInfo info, StreamingContext context)

Property: Rhino.Display.DisplayPipelineAttributes.AmbientLightingColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.AxesSizePercentage
Return: int
Modifiers: public
Summary: Size of axes as a percentage of the grid extents.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialDiffuseColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialShine
Return: double
Modifiers: public
Summary: Get or set the back material shine (0 to Rhino.DocObjects.MaxShine). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialTransparency
Return: double
Modifiers: public
Summary: Get or set the back material transparency (0 to 100). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BakeTextures
Return: bool
Modifiers: public
Summary: Adds the ability to display procedural textures in viewports. When it is turned off, procedural textures in viewports look different from the rendering.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BoundingBoxMode
Return: BoundingBoxDisplayMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CastShadows
Return: bool
Modifiers: public
Summary: Cast shadows.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeColor
Return: Color
Modifiers: public
Summary: Clipping edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeColorUsage
Return: ClippingEdgeColorUse
Modifiers: public
Summary: Specifies how the color for the Edges is determined
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeThickness
Return: int
Modifiers: public
Summary: Edge thickness in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingFillColor
Return: Color
Modifiers: public
Summary: Clipping plane fill color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingPlaneFillColorUsage
Return: ClippingPlaneFillColorUse
Modifiers: public
Summary: Specifies how the color for the clipping plane object fill is determined.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeColor
Return: Color
Modifiers: public
Summary: Clipping plane solid color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeColorUsage
Return: ClippingShadeColorUse
Modifiers: public
Summary: Specifies how to shade the clipping plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeSelectedPlane
Return: bool
Modifiers: public
Summary: Shades the selected clipping plane.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeTransparency
Return: int
Modifiers: public
Summary: Specifies the clipping plane transparency percentage.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClipSelectionHighlight
Return: bool
Modifiers: public
Summary: Clips the highlight wires. Shaded selections always clip.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ColorReductionPct
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ContextForDraw
Return: ContextsForDraw
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonColor
Return: Color
Modifiers: public
Summary: Control polygon color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonGripSize
Return: int
Modifiers: public
Summary: The control point size in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonHighlight
Return: bool
Modifiers: public
Summary: Highlights the segments of the control polygon on either side of the control points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShow
Return: bool
Modifiers: public
Summary: Shows the control polygon and only shows the control points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShowPoints
Return: bool
Modifiers: public
Summary: Shows the control points while the control polygon is displayed.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShowSurface
Return: bool
Modifiers: public
Summary: Shows the object while the control polygon is displayed.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonStyle
Return: PointStyle
Modifiers: public
Summary: PointStyle for the control polygon. Supported values are ControlPoint, RoundControlPoint, VariableDot, and RoundDot
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonUseFixedSingleColor
Return: bool
Modifiers: public
Summary: Specifies a color for the control polygon.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonUseSolidLines
Return: bool
Modifiers: public
Summary: Use dotted / solid lines
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonWireThickness
Return: int
Modifiers: public
Summary: The width of the control polygon lines in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CullBackfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveColor
Return: Color
Modifiers: public
Summary: Color used for drawing curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThickness
Return: int
Modifiers: public
Summary: Pixel thickness for curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThicknessScale
Return: float
Modifiers: public
Summary: Scale thickness for curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThicknessUsage
Return: CurveThicknessUse
Modifiers: public
Summary: Use a pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneAltitude
Return: double
Modifiers: public
Summary: Height above the world XY plane in model units
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneAutomaticAltitude
Return: bool
Modifiers: public
Summary: Turns on auto-elevation that moves Ground Plane to the lowest point of the objects in the model.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneOn
Return: bool
Modifiers: public
Summary: Turn the custom ground plane on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneShadowOnly
Return: bool
Modifiers: public
Summary: Makes the ground plane transparent, but allows shadows to still be cast on it.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DisableConduits
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DisableTransparency
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DynamicDisplayUsage
Return: DynamicDisplayUse
Modifiers: public
Summary: Sets the appearance of objects in the display
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.EnglishName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FillMode
Return: FrameBufferFillMode
Modifiers: public
Summary: Get or set the frame buffer fill mode.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontDiffuse
Return: Color
Modifiers: public
Summary: Shades the current viewport with no smoothing so the individual render mesh faces are visible.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontFlatShaded
Return: bool
Modifiers: public
Summary: Shades the current viewport with no smoothing so the individual render mesh faces are visible.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontMaterialShine
Return: double
Modifiers: public
Summary: Get or set the front material shine (0 to Rhino.DocObjects.MaxShine). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontMaterialTransparency
Return: double
Modifiers: public
Summary: Get or set the front material transparency (0 to 100). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontOverrideObjectColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GhostLockedObjects
Return: bool
Modifiers: public
Summary: Set locked appearance
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneColor
Return: Color
Modifiers: public
Summary: The color of the grid plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneTransparency
Return: int
Modifiers: public
Summary: Transparency of the grid plane, percentage (0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneVisibility
Return: GridPlaneVisibilityMode
Modifiers: public
Summary: Set when to show the grid plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridTransparency
Return: int
Modifiers: public
Summary: Transparency of the grid, percentage (0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GroundPlaneUsage
Return: GroundPlaneUsages
Modifiers: public
Summary: Turn on or off custom Ground plane settungs
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.HighlightSurfaces
Return: bool
Modifiers: public
Summary: Shades entire object with highlight color.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.Id
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.IgnoreHighlights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LayersFollowLockUsage
Return: bool
Modifiers: public
Summary: Applies the settings for locked objects to locked layers.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LightingScheme
Return: LightingSchema
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LinearWorkflowUsage
Return: LinearWorkflowUsages
Modifiers: public
Summary: Turn on or off custom linear workflow settings
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LocalName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.LockedColor
Return: Color
Modifiers: public
Summary: Locked Object Color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectsDrawBehindOthers
Return: bool
Modifiers: public
Summary: Locked object are drawn behind other objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectTransparency
Return: int
Modifiers: public
Summary: LockedObjectTransparency.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectUsage
Return: LockedObjectUse
Modifiers: public
Summary: Set asource of display attributes for locked objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeColor
Return: Color
Modifiers: public
Summary: Sets the mesh edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeThickness
Return: int
Modifiers: public
Summary: Mesh edge width in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeColor
Return: Color
Modifiers: public
Summary: Sets the naked edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeThickness
Return: int
Modifiers: public
Summary: Naked mesh edge width in pixels.}
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeColor
Return: Color
Modifiers: public
Summary: Sets the nonmanifold edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeThickness
Return: int
Modifiers: public
Summary: Non-manifold mesh edge width in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshSpecificAttributes
Return: MeshDisplayAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.MeshVertexSize
Return: int
Modifiers: public
Summary: Mesh vertex size in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ObjectColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PlaneUsesGridColor
Return: bool
Modifiers: public
Summary: If true, use the grid thin line color in App settings
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointCloudRadius
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointCloudStyle
Return: PointStyle
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointRadius
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointStyle
Return: PointStyle
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PostProcessFrameBuffer
Return: bool
Modifiers: public
Summary: Linear workflow Adjust output image
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PostProcessGamma
Return: bool
Modifiers: public
Summary: Linear workflow Output image gamma
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessColors
Return: bool
Modifiers: public
Summary: Linear workflow input colors
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessGamma
Return: bool
Modifiers: public
Summary: Linear workflow input gamma
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessTextures
Return: bool
Modifiers: public
Summary: Linear workflow input textures
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.RealtimeDisplayId
Return: Guid
Modifiers: public
Summary: Get the ID of the real-time display engine attached to the view. This will be Guid.Empty if no real-time display engine is in use. This can be the case for instance when starting a _Render session for a real-time viewport integration. That still would cause this ID to be Guid.Empty.
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.RealtimeRenderPasses
Return: int
Modifiers: public
Summary: Get or set the real-time passes amount
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadeVertexColors
Return: bool
Modifiers: public
Summary: Shade using vertex colors.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadingEnabled
Return: bool
Modifiers: public
Summary: Draw shaded meshes and surfaces
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowBiasX
Return: double
Modifiers: public
Summary: ShadowBiasX (Self shadowing artifacts) from 0 (dirty) to 50 (cleaner).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowClippingRadius
Return: float
Modifiers: public
Summary: Camera-based shadow clipping radius
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowEdgeBlur
Return: double
Modifiers: public
Summary: Set blurring from 0 (no blurring) to 16 (maximum blurring)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowIntensity
Return: int
Modifiers: public
Summary: Shadow intensity (percentage 0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowMemoryUsage
Return: int
Modifiers: public
Summary: Value from 1 to 16384 indicating how much memory is to be allocated. Actual memory use is ShadowMemoryUsage*ShadowMemoryUsage*4.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowsIgnoreUserDefinedClippingPlanes
Return: bool
Modifiers: public
Summary: If true, shadows ignore user-defined clipping planes
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowSoftEdgeQuality
Return: int
Modifiers: public
Summary: Soft edge quality, from 0 (none/faster) to 12 (softer/slower)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowsOn
Return: bool
Modifiers: public
Summary: Enable shadows
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowTransparencyTolerance
Return: int
Modifiers: public
Summary: Transparency tolerance from 0 (never cast shadows) to 100 (always case shadows)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowAnnotations
Return: bool
Modifiers: public
Summary: Show annotations.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClipIntersectionEdges
Return: bool
Modifiers: public
Summary: Show edges and hatches where clipping planes clip objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClipIntersectionSurfaces
Return: bool
Modifiers: public
Summary: Show fills where clipping planes clip solid objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingEdges
Return: bool
Modifiers: public
Summary: Shows the edges between the clipping plane and clipped objects.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingFills
Return: bool
Modifiers: public
Summary: When a clipping plane intersects a 3-D object and the section is closed, the section is filled.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingPlanes
Return: bool
Modifiers: public
Summary: Show clipping planes.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowCurves
Return: bool
Modifiers: public
Summary: Draw curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowGrips
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowIsoCurves
Return: bool
Modifiers: public
Summary: Draw surface ISO curves.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowLights
Return: bool
Modifiers: public
Summary: Show light widgets.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshEdges
Return: bool
Modifiers: public
Summary: Display mesh edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshNakedEdges
Return: bool
Modifiers: public
Summary: Display mesh naked edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshNonmanifoldEdges
Return: bool
Modifiers: public
Summary: Display mesh manifold edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowPointClouds
Return: bool
Modifiers: public
Summary: Show point clouds.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowPoints
Return: bool
Modifiers: public
Summary: Show points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowRealtimeRenderProgressBar
Return: bool
Modifiers: public
Summary: Get or set whether the display is used for preview rendering or not.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDBoundary
Return: bool
Modifiers: public
Summary: Set visibility of SubD naked edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDCreases
Return: bool
Modifiers: public
Summary: Set visibility of SubD creased edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDEdges
Return: bool
Modifiers: public
Summary: Set visibility of SubD smooth edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDNonmanifoldEdges
Return: bool
Modifiers: public
Summary: Turn on/off color differentiation of SubD symmetry children.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDReflectionPlanePreview
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceEdge
Return: bool
Modifiers: public
Summary: Turn Surface Edge visibility on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceEdges
Return: bool
Modifiers: public
Summary: Show surface edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceNakedEdge
Return: bool
Modifiers: public
Summary: Turn Surface Naked Edge visibility on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowTangentEdges
Return: bool
Modifiers: public
Summary: Show tangent edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowTangentSeams
Return: bool
Modifiers: public
Summary: Show tangent seams.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowText
Return: bool
Modifiers: public
Summary: Show text.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SkylightShadowQuality
Return: int
Modifiers: public
Summary: Skylight shadow quality, from 0 (lowest) to 8 (highest)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.StereoContext
Return: StereoContext
Modifiers: public
Summary: Get or set the stereo render context.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionAxisLineColor
Return: Color
Modifiers: public
Summary: Reflection axis line color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneAxisLineOn
Return: bool
Modifiers: public
Summary: Apply Turnh on or off the reflection plane axis line
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColor
Return: Color
Modifiers: public
Summary: Reflection plane color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColorReduction
Return: int
Modifiers: public
Summary: SubD replection plane color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColorUsage
Return: SubDReflectionPlaneColorUse
Modifiers: public
Summary: SubD replection plane color use
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Summary: Thickness usage, pixel thickness or a scale thickness
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeApplyPattern
Return: bool
Modifiers: public
Summary: Turn pattern application on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorReduction
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorReductionPercent
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorUsage
Return: SurfaceEdgeColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeThickness
Return: int
Modifiers: public
Summary: Thickness for surface edges
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeThicknessScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoColorsUsed
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoShowForFlatFaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoSingleColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessUScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessUsed
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessVScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessWScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUVColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoVColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoVThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedAdgeColorReduction
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeApplyPattern
Return: bool
Modifiers: public
Summary: Turn pattern application on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColorReductionPercent
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColorUsage
Return: SurfaceNakedEdgeColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeThicknessScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseAssignedObjectMaterial
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using their assigned rendering material.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectColor
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom color.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectColorBackfaces
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom color for back faces.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectMaterial
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom material.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectMaterialBackfaces
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom material on backfaces.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseLightColor
Return: bool
Modifiers: public
Summary: Draw lights using light color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseSectionStyles
Return: bool
Modifiers: public
Summary: When enabled, the appearances of clipping fills and edges are based on objects' section style properties.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseSingleCurveColor
Return: bool
Modifiers: public
Summary: Use a single color for drawing curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewSpecificAttributes
Return: ViewDisplayAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.WorldAxesIconColorUsage
Return: WorldAxesIconColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.XrayAllObjects
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayPipelineAttributes.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipelineAttributes.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.DisplayPipelineAttributes.GetColorFadeEffect(out Color fadeColor, out float fadeAmount)
Return: void
Modifiers: public
Summary: Get the current color fade effect data.
Parameter: fadeColor (Color)
Parameter Summary: The current fade amount
Parameter: fadeAmount (float)
Parameter Summary: The current fade color

Method: Rhino.Display.DisplayPipelineAttributes.GetCurveThicknessUsage()
Return: CurveThicknessUse
Modifiers: public
Summary: Gets current usage, pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)

Method: Rhino.Display.DisplayPipelineAttributes.GetDiagonalHatchEffect(out float hatchStrength, out float hatchWidth)
Return: void
Modifiers: public
Summary: Get the current diagonal hatch strength and width in pixels.
Parameter: hatchStrength (float)
Parameter Summary: The strength of the hatch effect.
Parameter: hatchWidth (float)
Parameter Summary: The width of the diagonal hatch in pixels.

Method: Rhino.Display.DisplayPipelineAttributes.GetDitherTransparencyEffect()
Return: float
Modifiers: public
Summary: Get the current dither transparency amount.

Method: Rhino.Display.DisplayPipelineAttributes.GetFill(out Color topLeft, out Color bottomLeft, out Color topRight, out Color bottomRight)
Return: void
Modifiers: public
Summary: Get fill colors used for clearing the frame buffer

Method: Rhino.Display.DisplayPipelineAttributes.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceEdgeThicknessUsage()
Return: SurfaceThicknessUse
Modifiers: public
Summary: Helper function for setting the SurfaceEdgeThicknessFlags

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoApplyPattern(out bool u, out bool v, out bool w)
Return: void
Modifiers: public
Parameter: u (bool)
Parameter Summary: Gets mode in the u direction
Parameter: v (bool)
Parameter Summary: Gets mode in the v direction
Parameter: w (bool)
Parameter Summary: Gets mode in the w direction

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoColorUsage()
Return: SurfaceIsoColorUse
Modifiers: public
Summary: Helper function for getting SurfaceIsoColorsUsed and SurfaceSingleIsoColor

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoThicknessUsage()
Return: SurfaceIsoThicknessUse
Modifiers: public
Summary: This is a helper function that combines getting IsoThicknessUsed and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceNakedEdgeThicknessUsage()
Return: SurfaceNakedEdgeThicknessUse
Modifiers: public
Summary: This is a helper function that combines getting SurfaceNakeEdgeUseNormalThickness and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.HasColorFadeEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a color fade effect enabled with a color fade effect amount larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.HasDiagonalHatchEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a diagonal hatch effect enabled with a hatch strength larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.HasDitherTransparencyEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a dither transparency effect enabled with a transparency amount larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.SetColorFadeEffect(in Color fadeColor, in float fadeAmount)
Return: void
Modifiers: public
Summary: Set a color fade effect to make objects fade a given amount towards a given color.
Parameter: fadeColor (Color)
Parameter Summary: The amount of fade towards the given color (0..1).
Parameter: fadeAmount (float)
Parameter Summary: The color to fade towards.

Method: Rhino.Display.DisplayPipelineAttributes.SetCurveThicknessUsage(CurveThicknessUse usage)
Return: void
Modifiers: public
Summary: Sets usage, pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)

Method: Rhino.Display.DisplayPipelineAttributes.SetDiagonalHatchEffect(in float hatchStrength, in float hatchWidth)
Return: void
Modifiers: public
Summary: Set a diagonal hatch effect to make objects render with diagonal hatch with a given strength and width in pixels. The effect works by brightening and darkening pixels in a diagonal pattern.
Parameter: hatchStrength (float)
Parameter Summary: The strength of the hatch effect (0..1).
Parameter: hatchWidth (float)
Parameter Summary: The width of the diagonal hatch in pixels (>= 0).

Method: Rhino.Display.DisplayPipelineAttributes.SetDitherTransparencyEffect(in float transparencyAmount)
Return: void
Modifiers: public
Summary: Set a dither transparency effect to make objects render with a given amount of transparency using a dither effect.
Parameter: transparencyAmount (float)
Parameter Summary: The amount of transparency (0..1).

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color gradientTopLeft, Color gradientBottomLeft, Color gradientTopRight, Color gradientBottomRight)
Return: void
Modifiers: public
Summary: Set the fill mode to four color gradient and set the colors

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color gradientTop, Color gradientBottom)
Return: void
Modifiers: public
Summary: Set fill mode to two color and set the colors

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color singleColor)
Return: void
Modifiers: public
Summary: Set fill mode to solid color and set the fill color

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceEdgeThicknessUsage(SurfaceThicknessUse use)
Return: void
Modifiers: public
Summary: Helper function for getting the SurfaceEdgeThicknessFlags

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoApplyPattern(bool u, bool v, bool w)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoColorUsage(SurfaceIsoColorUse use)
Return: void
Modifiers: public
Summary: Helper function for setting SurfaceIsoColorsUsed and SurfaceIsoSingleColor

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoThicknessUsage(SurfaceIsoThicknessUse value)
Return: void
Modifiers: public
Summary: This is a helper function that combines setting IsoThicknessUsed and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceNakedEdgeThicknessUsage(SurfaceNakedEdgeThicknessUse use)
Return: void
Modifiers: public
Summary: This is a helper function that combines setting SurfaceNakeEdgeUseNormalThickness and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Class: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.AllMeshWiresColor
Return: Color
Modifiers: public
Summary: Color.Empty means that we are NOT using a single color for all mesh wires.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.HighlightMeshes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.MeshWireThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.ShowMeshVertices
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.ShowMeshWires
Return: bool
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.BlendGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawGridAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawTransparentGridPlane
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawWorldAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawZAxis
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.HorizontalViewportScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.ShowGridOnTop
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.UseDocumentGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.VerticalViewportScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorX
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorY
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorZ
Return: Color
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPoint
Summary: A 3d point with attributes used by the display pipeline

Constructor: Rhino.Display.DisplayPoint.DisplayPoint(Point3d location)

Property: Rhino.Display.DisplayPoint.Location
Return: Point3d
Modifiers: public
Accessors: get

Method: Rhino.Display.DisplayPoint.WithAttributes(DisplayPointAttributes attributes)
Return: DisplayPoint
Modifiers: public

Class: Rhino.Display.DisplayPointAttributes

Constructor: Rhino.Display.DisplayPointAttributes.DisplayPointAttributes()

Constructor: Rhino.Display.DisplayPointAttributes.DisplayPointAttributes(DisplayPointAttributes attributes)

Property: Rhino.Display.DisplayPointAttributes.Diameter
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.FillColor
Return: Color?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.PointStyle
Return: PointStyle?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.RotationRadians
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.SecondarySize
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.StrokeColor
Return: Color?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.StrokeWidth
Return: float?
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPointSet

Constructor: Rhino.Display.DisplayPointSet.DisplayPointSet()
Summary: Initializes a new instance of the DisplayPointSet class

Method: Rhino.Display.DisplayPointSet.Create(IEnumerable<DisplayPoint> points)
Return: DisplayPointSet
Modifiers: public, static

Method: Rhino.Display.DisplayPointSet.Dispose()
Return: void
Modifiers: public

Class: Rhino.Display.DrawEventArgs

Property: Rhino.Display.DrawEventArgs.Display
Return: DisplayPipeline
Modifiers: public
Accessors: get

Property: Rhino.Display.DrawEventArgs.RhinoDoc
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.DrawEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Class: Rhino.Display.DrawForegroundEventArgs

Property: Rhino.Display.DrawForegroundEventArgs.DrawWorldAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DrawForegroundEventArgs.WorldAxesDrawn
Return: bool
Modifiers: public
Accessors: get set

Class: Rhino.Display.DrawObjectEventArgs

Property: Rhino.Display.DrawObjectEventArgs.DrawObject
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DrawObjectEventArgs.RhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Class: Rhino.Display.InitFrameBufferEventArgs

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color topLeft, System.Drawing.Color bottomLeft, System.Drawing.Color topRight, System.Drawing.Color bottomRight)
Return: void
Modifiers: public

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color top, System.Drawing.Color bottom)
Return: void
Modifiers: public

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color color)
Return: void
Modifiers: public

Class: Rhino.Display.PageViewPropertiesChangeEventArgs
Summary: PageView properties change event arguments.

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the Rhino document.
Accessors: get

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.DocumentSerialNumber
Return: uint
Modifiers: public
Summary: The serial number of the Rhino document.
Accessors: get set

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.PageView
Return: RhinoPageView
Modifiers: public
Summary: Gets the Rhino page view.
Accessors: get

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.PageViewSerialNumber
Return: uint
Modifiers: public
Summary: The serial number of the page view.
Accessors: get set

Class: Rhino.Display.PageViewSpaceChangeEventArgs

Property: Rhino.Display.PageViewSpaceChangeEventArgs.NewActiveDetailId
Return: Guid
Modifiers: public
Summary: The id of the detail object was set active. Note, if this id is equal to Guid.Empty, then the active detail object is the page view itself.
Accessors: get set

Property: Rhino.Display.PageViewSpaceChangeEventArgs.OldActiveDetailId
Return: Guid
Modifiers: public
Summary: The id of the previously active detail object. Note, if this id is equal to Guid.Empty, then the active detail object was the page view itself.
Accessors: get set

Property: Rhino.Display.PageViewSpaceChangeEventArgs.PageView
Return: RhinoPageView
Modifiers: public
Summary: The page view on which a different detail object was set active.
Accessors: get

Class: Rhino.Display.RhinoPageView
Summary: A window that contains a single layout 'page'

Property: Rhino.Display.RhinoPageView.ActiveDetail
Return: DetailViewObject
Modifiers: public
Summary: Returns the active detail object. If no detail is active, or if the page is active, then None is returned.
Accessors: get

Property: Rhino.Display.RhinoPageView.ActiveDetailId
Return: Guid
Modifiers: public
Summary: Returns the id of the active detail. If no detail is active, or if the page is active, then Guid.Empty is returned.
Accessors: get

Property: Rhino.Display.RhinoPageView.ActiveViewport
Return: RhinoViewport
Modifiers: public, override
Summary: Gets the active viewport. The ActiveViewport is the same as the MainViewport for standard RhinoViews. In a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object. Most of the time, you will use ActiveViewport unless you explicitly need to work with the main viewport.
Accessors: get

Property: Rhino.Display.RhinoPageView.PageHeight
Return: double
Modifiers: public
Summary: Height of the page in the document's PageUnitSystem
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageIsActive
Return: bool
Modifiers: public
Summary: Returns True if the page is active, rather than any detail view. This occurs when the MainViewport.Id == ActiveViewportID.
Accessors: get

Property: Rhino.Display.RhinoPageView.PageName
Return: string
Modifiers: public
Summary: Same as the MainViewport.Name.
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageNumber
Return: int
Modifiers: public
Summary: Gets or sets the runtime page number and updates the page number for all of the other pages. The first page has a value of 0.
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageWidth
Return: double
Modifiers: public
Summary: Width of the page in the document's PageUnitSystem
Accessors: get set

Property: Rhino.Display.RhinoPageView.PaperName
Return: string
Modifiers: public
Summary: Returns the name of the layout's media, or paper (e.g. Letter, Legal, A1, etc.), used to determine the page width and page height.
Accessors: get

Property: Rhino.Display.RhinoPageView.PrinterName
Return: string
Modifiers: public
Summary: Returns the name of the layout's destination printer.
Accessors: get

Method: Rhino.Display.RhinoPageView.AddDetailView(string title, Geometry.Point2d corner0, Geometry.Point2d corner1, DefinedViewportProjection initialProjection)
Return: DetailViewObject
Modifiers: public
Summary: Creates a detail view object that is displayed on this page and adds it to the document.
Parameter: title (string)
Parameter Summary: The detail view title.
Parameter: corner0 (Geometry.Point2d)
Parameter Summary: Corners of the detail view in world coordinates.
Parameter: corner1 (Geometry.Point2d)
Parameter Summary: Corners of the detail view in world coordinates.
Parameter: initialProjection (DefinedViewportProjection)
Parameter Summary: The defined initial projection type.

Method: Rhino.Display.RhinoPageView.Duplicate(bool duplicatePageGeometry)
Return: RhinoPageView
Modifiers: public
Summary: Copies a page view.
Parameter: duplicatePageGeometry (bool)
Parameter Summary: Set True if you want the page view geometry copied, along with the view.

Method: Rhino.Display.RhinoPageView.GetDetailViews()
Return: DetailViewObject[]
Modifiers: public
Summary: Gets a list of the detail view objects associated with this layout.

Method: Rhino.Display.RhinoPageView.GetPreviewImage(System.Drawing.Size size, bool grayScale)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview image of the page.
Parameter: size (System.Drawing.Size)
Parameter Summary: The size of the preview image.
Parameter: grayScale (bool)
Parameter Summary: Set True to produce a grayscale image, False to produce a color image.

Method: Rhino.Display.RhinoPageView.SetActiveDetail(string detailName, bool compareCase)
Return: bool
Modifiers: public
Summary: Sets the active detail.
Parameter: detailName (string)
Parameter Summary: The name, or title, of the detail to set active.
Parameter: compareCase (bool)
Parameter Summary: Unused.

Method: Rhino.Display.RhinoPageView.SetActiveDetail(System.Guid detailId)
Return: bool
Modifiers: public
Summary: Sets the active detail.
Parameter: detailId (System.Guid)
Parameter Summary: The id of the detail view object to set active.

Method: Rhino.Display.RhinoPageView.SetPageAsActive()
Return: void
Modifiers: public
Summary: Deactivates the active details and sets the page view as active.

Class: Rhino.Display.RhinoView
Summary: A RhinoView represents a single "window" display of a document. A view could contain one or many RhinoViewports (many in the case of Layout views with detail viewports). Standard Rhino modeling views have one viewport.

Property: Rhino.Display.RhinoView.EnableDrawing
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'drawing enabled' flag. By default, drawing is enabled.
There are some rare situations where scripts want to disable drawing for a while. | Accessors: get set

Property: Rhino.Display.RhinoView.ActiveViewport
Return: RhinoViewport
Modifiers: public, virtual
Summary: The ActiveViewport is the same as the MainViewport for standard RhinoViews. In a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object. Most of the time, you will use ActiveViewport unless you explicitly need to work with the main viewport.
Accessors: get

Property: Rhino.Display.RhinoView.ActiveViewportID
Return: Guid
Modifiers: public
Summary: Returns viewport ID for the active viewport. Faster than ActiveViewport function when working with page views.
Accessors: get

Property: Rhino.Display.RhinoView.Bounds
Return: Rectangle
Modifiers: public
Summary: Gets the size and location of the view including its non-client elements, in pixels, relative to the parent control.
Accessors: get

Property: Rhino.Display.RhinoView.ClientRectangle
Return: Rectangle
Modifiers: public
Summary: Gets the rectangle that represents the client area of the view.
Accessors: get

Property: Rhino.Display.RhinoView.DisplayPipeline
Return: DisplayPipeline
Modifiers: public
Summary: Gets the display pipeline used for this view.
Accessors: get

Property: Rhino.Display.RhinoView.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoView.Floating
Return: bool
Modifiers: public
Summary: Floating state of RhinoView. if true, then the view will be in a floating frame window. Otherwise the view will be embedded in the main frame.
Accessors: get set

Property: Rhino.Display.RhinoView.Handle
Return: IntPtr
Modifiers: public
Summary: Gets the window handle that this view is bound to.
Accessors: get

Property: Rhino.Display.RhinoView.InDynamicViewChange
Return: bool
Modifiers: public
Summary: True if the view is being dynamically changed by mouse moves, arrow keys, trackballs, etc.
Accessors: get

Property: Rhino.Display.RhinoView.MainViewport
Return: RhinoViewport
Modifiers: public
Summary: A RhinoView contains a "main viewport" that fills the entire view client window. RhinoPageViews may also contain nested child RhinoViewports for implementing detail viewports. The MainViewport will always return this RhinoView's m_vp.
Accessors: get

Property: Rhino.Display.RhinoView.Maximized
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoView.RealtimeDisplayMode
Return: RealtimeDisplayMode
Modifiers: public
Summary: Gets the RealtimeDisplayMode active for this view. None if the view doesn't have a RealtimeDisplayMode set.
Accessors: get

Property: Rhino.Display.RhinoView.RuntimeSerialNumber
Return: uint
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoView.ScreenRectangle
Return: Rectangle
Modifiers: public
Summary: Gets the rectangle that represents the client area of the view in screen coordinates.
Accessors: get

Property: Rhino.Display.RhinoView.Size
Return: Size
Modifiers: public
Summary: Gets or sets the size of the view
Accessors: get set

Property: Rhino.Display.RhinoView.TitleVisible
Return: bool
Modifiers: public
Summary: Visibility of the viewport title window.
Accessors: get set

Method: Rhino.Display.RhinoView.FromRuntimeSerialNumber(uint serialNumber)
Return: RhinoView
Modifiers: public, static
Summary: Get a RhinoView from it's unique runtime serial number

Method: Rhino.Display.RhinoView.CaptureToBitmap()
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap.

Method: Rhino.Display.RhinoView.CaptureToBitmap(bool grid, bool worldAxes, bool cplaneAxes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures the view contents to a bitmap allowing for visibility of grid and axes.
Parameter: grid (bool)
Parameter Summary: True if the construction plane grid should be visible.
Parameter: worldAxes (bool)
Parameter Summary: True if the world axis should be visible.
Parameter: cplaneAxes (bool)
Parameter Summary: True if the construction plane close the grid should be visible.

Method: Rhino.Display.RhinoView.CaptureToBitmap(DisplayModeDescription mode)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using a display mode description to define how drawing is performed.
Parameter: mode (DisplayModeDescription)
Parameter Summary: The display mode.

Method: Rhino.Display.RhinoView.CaptureToBitmap(DisplayPipelineAttributes attributes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures view contents to a bitmap using display attributes to define how drawing is performed.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The specific display mode attributes.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, bool grid, bool worldAxes, bool cplaneAxes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures a part of the view contents to a bitmap allowing for visibility of grid and axes.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: grid (bool)
Parameter Summary: True if the construction plane grid should be visible.
Parameter: worldAxes (bool)
Parameter Summary: True if the world axis should be visible.
Parameter: cplaneAxes (bool)
Parameter Summary: True if the construction plane close the grid should be visible.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, DisplayModeDescription mode)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using a display mode description to define how drawing is performed.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: mode (DisplayModeDescription)
Parameter Summary: The display mode.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, DisplayPipelineAttributes attributes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using display attributes to define how drawing is performed.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The specific display mode attributes.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap.
Parameter: size (System.Drawing.Size)
Parameter Summary: Size of Bitmap to capture to.

Method: Rhino.Display.RhinoView.ClientToScreen(Geometry.Point2d clientPoint)
Return: Geometry.Point2d
Modifiers: public

Method: Rhino.Display.RhinoView.ClientToScreen(System.Drawing.Point clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoView.Close()
Return: bool
Modifiers: public
Summary: Remove this View from Rhino. DO NOT attempt to use this instance of this class after calling Close.

Method: Rhino.Display.RhinoView.CreateShadedPreviewImage(string imagePath, System.Drawing.Size size, bool ignoreHighlights, bool drawConstructionPlane, bool useGhostedShading)
Return: bool
Modifiers: public
Summary: Creates a bitmap preview image of model.
Parameter: imagePath (string)
Parameter Summary: [in] The name of the bitmap file to create. The extension of the imagePath controls the format of the bitmap file created (BMP, TGA, JPG, PCX, PNG, TIF).
Parameter: size (System.Drawing.Size)
Parameter Summary: [in] The width and height of the bitmap in pixels.
Parameter: ignoreHighlights (bool)
Parameter Summary: True if highlighted elements should be drawn normally.
Parameter: drawConstructionPlane (bool)
Parameter Summary: True if the CPlane should be drawn.
Parameter: useGhostedShading (bool)
Parameter Summary: True if ghosted shading (partially transparent shading) should be used.

Method: Rhino.Display.RhinoView.CreateWireframePreviewImage(string imagePath, System.Drawing.Size size, bool ignoreHighlights, bool drawConstructionPlane)
Return: bool
Modifiers: public
Summary: Creates a bitmap preview image of model.
Parameter: imagePath (string)
Parameter Summary: [in] The name of the bitmap file to create. The extension of the imagePath controls the format of the bitmap file created (BMP, TGA, JPG, PCX, PNG, TIF).
Parameter: size (System.Drawing.Size)
Parameter Summary: [in] The width and height of the bitmap in pixels.
Parameter: ignoreHighlights (bool)
Parameter Summary: True if highlighted elements should be drawn normally.
Parameter: drawConstructionPlane (bool)
Parameter Summary: True if the CPlane should be drawn.

Method: Rhino.Display.RhinoView.Equals(object obj)
Return: bool
Modifiers: public, override

Method: Rhino.Display.RhinoView.GetHashCode()
Return: int
Modifiers: public, override

Method: Rhino.Display.RhinoView.MouseCaptured(bool bIncludeMovement)
Return: bool
Modifiers: public
Summary: Returns whether or not the mouse is captured in this view.
Parameter: bIncludeMovement (bool)
Parameter Summary: If captured, test if the mouse has moved between mouse button down and mouse button up.

Method: Rhino.Display.RhinoView.Redraw()
Return: void
Modifiers: public
Summary: Redraws this view.

Method: Rhino.Display.RhinoView.ScreenToClient(Geometry.Point2d screenPoint)
Return: Geometry.Point2d
Modifiers: public

Method: Rhino.Display.RhinoView.ScreenToClient(System.Drawing.Point screenPoint)
Return: System.Drawing.Point
Modifiers: public
Summary: Converts a point in screen coordinates to client coordinates for this view.
Parameter: screenPoint (System.Drawing.Point)
Parameter Summary: The 2D screen point.

Method: Rhino.Display.RhinoView.ShowToast(string message, int textHeight, System.Drawing.PointF location)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown
Parameter: textHeight (int)
Parameter Summary: The height of the message
Parameter: location (System.Drawing.PointF)
Parameter Summary: The location of the message

Method: Rhino.Display.RhinoView.ShowToast(string message, int textHeight)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown
Parameter: textHeight (int)
Parameter Summary: The height of the message

Method: Rhino.Display.RhinoView.ShowToast(string message)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown

Method: Rhino.Display.RhinoView.SpeedTest(int frameCount, bool freezeDrawList, int direction, double angleDeltaRadians)
Return: double
Modifiers: public

Class: Rhino.Display.RhinoViewport
Summary: Displays geometry with a given projection. In standard modeling views there is a one to one relationship between RhinoView and RhinoViewports. In a page layout, there may be multiple RhinoViewports for a single layout.

Constructor: Rhino.Display.RhinoViewport.RhinoViewport()

Constructor: Rhino.Display.RhinoViewport.RhinoViewport(RhinoViewport other)

Property: Rhino.Display.RhinoViewport.Bounds
Return: Rectangle
Modifiers: public
Summary: Gets the size and location of the viewport, in pixels, relative to the parent view.
Accessors: get

Property: Rhino.Display.RhinoViewport.Camera35mmLensLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.CameraDirection
Return: Vector3d
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraLocation
Return: Point3d
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraTarget
Return: Point3d
Modifiers: public
Summary: Viewport target point.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraUp
Return: Vector3d
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.CameraX
Return: Vector3d
Modifiers: public
Summary: Gets the "unit to the right" vector.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraY
Return: Vector3d
Modifiers: public
Summary: Gets the "unit up" vector.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraZ
Return: Vector3d
Modifiers: public
Summary: Gets the unit vector in CameraDirection.
Accessors: get

Property: Rhino.Display.RhinoViewport.ChangeCounter
Return: uint
Modifiers: public
Summary: The value of change counter is incremented every time the view projection or construction plane changes. The user can the mouse and nestable view manipulation commands to change a view at any time. The value of change counter can be used to detect these changes in code that is sensitive to the view projection.
Accessors: get

Property: Rhino.Display.RhinoViewport.ConstructionAxesVisible
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.ConstructionGridVisible
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.DisplayMode
Return: DisplayModeDescription
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.FrustumAspect
Return: double
Modifiers: public
Summary: Gets the width/height ratio of the frustum.
Accessors: get

Property: Rhino.Display.RhinoViewport.Id
Return: Guid
Modifiers: public
Summary: Unique id for this viewport.
Accessors: get

Property: Rhino.Display.RhinoViewport.IsParallelProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsPerspectiveProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsPlanView
Return: bool
Modifiers: public
Summary: True if construction plane z axis is parallel to camera direction.
Accessors: get

Property: Rhino.Display.RhinoViewport.IsTwoPointPerspectiveProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsValidCamera
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsValidFrustum
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.LockedProjection
Return: bool
Modifiers: public
Summary: If true, the the camera location, camera direction, and lens angle should not be changed.
Accessors: get set

Property: Rhino.Display.RhinoViewport.Name
Return: string
Modifiers: public
Summary: Name associated with this viewport.
Accessors: get set

Property: Rhino.Display.RhinoViewport.ParentView
Return: RhinoView
Modifiers: public
Summary: Gets the parent view, if there is one Every RhinoView has an associated RhinoViewport that does all the 3d display work. Those associated viewports return the RhinoView as their parent view. However, RhinoViewports are used in other image creating contexts that do not have a parent RhinoView. If you call ParentView, you MUST check for NULL return values.
Accessors: get

Property: Rhino.Display.RhinoViewport.ScreenPortAspect
Return: double
Modifiers: public
Summary: screen port's width/height.
Accessors: get

Property: Rhino.Display.RhinoViewport.Size
Return: Size
Modifiers: public
Summary: Get or set the height and width of the viewport (in pixels)
Accessors: get set

Property: Rhino.Display.RhinoViewport.UserStringCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.ViewportType
Return: ViewportType
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperFilename
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperGrayscale
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperVisible
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WorldAxesVisible
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.RhinoViewport.FromId(System.Guid id)
Return: RhinoViewport
Modifiers: public, static
Summary: Call this method to get the viewport with the specified Id.
Parameter: id (System.Guid)
Parameter Summary: Id to search for.

Method: Rhino.Display.RhinoViewport.ChangeToParallelProjection(bool symmetricFrustum)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from perspective to parallel. It will make common additional adjustments to the frustum so the resulting views are similar. The camera location and direction will not be changed.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.

Method: Rhino.Display.RhinoViewport.ChangeToParallelReflectedProjection()
Return: bool
Modifiers: public
Summary: When a viewport is set to Parallel Reflected projection, the geometry on the ceiling is shown as if it is mirrored to the floor below.

Method: Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(bool symmetricFrustum, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective. It will make common additional adjustments to the frustum and camera location so the resulting views are similar. The camera direction and target point are not be changed.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(double targetDistance, bool symmetricFrustum, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective. It will make common additional adjustments to the frustum and camera location so the resulting views are similar. The camera direction and target point are not be changed.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(double targetDistance, Rhino.Geometry.Vector3d up, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports to a two point perspective. It will make common additional adjustments to the frustum and camera location and direction so the resulting views are similar.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: up (Rhino.Geometry.Vector3d)
Parameter Summary: This direction will be the locked up direction. Pass ON_3dVector::ZeroVector if you want to use the world axis direction that is closest to the current up direction. Pass CameraY() if you want to preserve the current up direction.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports to a two point perspective. It will make common additional adjustments to the frustum and camera location and direction so the resulting views are similar.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ClearTraceImage()
Return: void
Modifiers: public
Summary: Remove trace image (background bitmap) for this viewport if one exists.

Method: Rhino.Display.RhinoViewport.ClientToScreen(Point2d clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToScreen(System.Drawing.Point clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToWorld(Point2d clientPoint)
Return: Line
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToWorld(System.Drawing.Point clientPoint)
Return: Line
Modifiers: public

Method: Rhino.Display.RhinoViewport.ConstructionPlane()
Return: Plane
Modifiers: public
Summary: Simple plane information for this viewport's construction plane. If you want detailed construction plane information, use GetConstructionPlane.

Method: Rhino.Display.RhinoViewport.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.RhinoViewport.GetCameraAngle(out double halfDiagonalAngle, out double halfVerticalAngle, out double halfHorizontalAngle)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetCameraExtents(IEnumerable<Point3d> points)
Return: BoundingBox
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetCameraFrame(out Plane frame)
Return: bool
Modifiers: public
Summary: Gets the camera plane.
Parameter: frame (Plane)
Parameter Summary: A plane is assigned to this out parameter during the call, if the operation succeeded.

Method: Rhino.Display.RhinoViewport.GetConstructionPlane()
Return: DocObjects.ConstructionPlane
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetDepth(BoundingBox bbox, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a bounding box.
Parameter: bbox (BoundingBox)
Parameter Summary: The bounding box.
Parameter: nearDistance (double)
Parameter Summary: The near distance is assigned to this out parameter during this call.
Parameter: farDistance (double)
Parameter Summary: The far distance is assigned to this out parameter during this call.

Method: Rhino.Display.RhinoViewport.GetDepth(Point3d point, out double distance)
Return: bool
Modifiers: public
Summary: Gets clipping distance of a point.
Parameter: point (Point3d)
Parameter Summary: A 3D point.
Parameter: distance (double)
Parameter Summary: A computed distance is assigned to this out parameter if this call succeeds.

Method: Rhino.Display.RhinoViewport.GetDepth(Sphere sphere, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: The sphere.
Parameter: nearDistance (double)
Parameter Summary: The near distance is assigned to this out parameter during this call.
Parameter: farDistance (double)
Parameter Summary: The far distance is assigned to this out parameter during this call.

Method: Rhino.Display.RhinoViewport.GetFarRect()
Return: Point3d[]
Modifiers: public
Summary: Get corners of far clipping plane rectangle.

Method: Rhino.Display.RhinoViewport.GetFrustum(out double left, out double right, out double bottom, out double top, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets the view frustum.
Parameter: left (double)
Parameter Summary: left < right.
Parameter: right (double)
Parameter Summary: left < right.
Parameter: bottom (double)
Parameter Summary: bottom < top.
Parameter: top (double)
Parameter Summary: bottom < top.
Parameter: nearDistance (double)
Parameter Summary: 0 < nearDistance < farDistance.
Parameter: farDistance (double)
Parameter Summary: 0 < nearDistance < farDistance.

Method: Rhino.Display.RhinoViewport.GetFrustumBottomPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get bottom world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum bottom side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumBoundingBox()
Return: BoundingBox
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetFrustumCenter(out Point3d center)
Return: bool
Modifiers: public
Summary: Returns world coordinates of frustum's center.
Parameter: center (Point3d)
Parameter Summary: The center coordinate is assigned to this out parameter if this call succeeds.

Method: Rhino.Display.RhinoViewport.GetFrustumFarPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get far clipping plane.
Parameter: plane (Plane)
Parameter Summary: far clipping plane if camera and frustum are valid. The plane's frame is the same as the camera's frame. The origin is located at the intersection of the camera direction ray and the far clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumLeftPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get left world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum left side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumLine(double screenX, double screenY, out Line worldLine)
Return: bool
Modifiers: public
Summary: Gets the world coordinate line in the view frustum that projects to a point on the screen.
Parameter: screenX (double)
Parameter Summary: (screenx,screeny) = screen location.
Parameter: screenY (double)
Parameter Summary: (screenx,screeny) = screen location.
Parameter: worldLine (Line)
Parameter Summary: 3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumNearPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get near clipping plane.
Parameter: plane (Plane)
Parameter Summary: near clipping plane if camera and frustum are valid. The plane's frame is the same as the camera's frame. The origin is located at the intersection of the camera direction ray and the near clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumRightPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get right world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum right side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumTopPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get top world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum top side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetNearRect()
Return: Point3d[]
Modifiers: public
Summary: Get corners of near clipping plane rectangle.

Method: Rhino.Display.RhinoViewport.GetPickTransform(int clientX, int clientY)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box. This takes a single point and inflates it by Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define the screen rectangle.
Parameter: clientX (int)
Parameter Summary: The client point X coordinate.
Parameter: clientY (int)
Parameter Summary: The client point Y coordinate.

Method: Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Point clientPoint)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box. This takes a single point and inflates it by Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define the screen rectangle.
Parameter: clientPoint (System.Drawing.Point)
Parameter Summary: The client point.

Method: Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Rectangle clientRectangle)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box.
Parameter: clientRectangle (System.Drawing.Rectangle)
Parameter Summary: The client rectangle.

Method: Rhino.Display.RhinoViewport.GetScreenPort(out int portLeft, out int portRight, out int portBottom, out int portTop, out int portNear, out int portFar)
Return: bool
Modifiers: public
Summary: Location of viewport in pixels. These are provided so you can set the port you are using and get the appropriate transformations to and from screen space.
Parameter: portLeft (int)
Parameter Summary: portLeft != portRight.
Parameter: portRight (int)
Parameter Summary: portLeft != portRight.
Parameter: portBottom (int)
Parameter Summary: portTop != portBottom.
Parameter: portTop (int)
Parameter Summary: portTop != portBottom.
Parameter: portNear (int)
Parameter Summary: The viewport near value.
Parameter: portFar (int)
Parameter Summary: The viewport far value.

Method: Rhino.Display.RhinoViewport.GetTransform(DocObjects.CoordinateSystem sourceSystem, DocObjects.CoordinateSystem destinationSystem)
Return: Transform
Modifiers: public
Summary: Gets a transform from origin coordinate system to a target coordinate system.
Parameter: sourceSystem (DocObjects.CoordinateSystem)
Parameter Summary: The origin coordinate system.
Parameter: destinationSystem (DocObjects.CoordinateSystem)
Parameter Summary: The target coordinate system.

Method: Rhino.Display.RhinoViewport.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets a user string.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Display.RhinoViewport.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.

Method: Rhino.Display.RhinoViewport.GetViewScale()
Return: double
Modifiers: public
Summary: Get Scale transform applied to the viewport

Method: Rhino.Display.RhinoViewport.GetWorldToScreenScale(Point3d pointInFrustum, out double pixelsPerUnit)
Return: bool
Modifiers: public
Summary: Gets the world to screen size scaling factor at a point in frustum.
Parameter: pointInFrustum (Point3d)
Parameter Summary: A point in frustum.
Parameter: pixelsPerUnit (double)
Parameter Summary: scale = number of pixels per world unit at the 3d point.
This out parameter is assigned during this call.

Method: Rhino.Display.RhinoViewport.IsVisible(BoundingBox bbox)
Return: bool
Modifiers: public
Summary: Returns True if some portion of a world coordinate bounding box is potentially visible in the viewing frustum.
Parameter: bbox (BoundingBox)
Parameter Summary: A bounding box that is tested for visibility.

Method: Rhino.Display.RhinoViewport.IsVisible(Point3d point)
Return: bool
Modifiers: public
Summary: Determines if a world coordinate point is visible in the viewing frustum.
Parameter: point (Point3d)
Parameter Summary: A point that is tested for visibility.

Method: Rhino.Display.RhinoViewport.KeyboardDolly(bool leftRight, double amount)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: leftRight (bool)
Parameter Summary: left/right dolly if true, up/down dolly if false.
Parameter: amount (double)
Parameter Summary: The dolly amount.

Method: Rhino.Display.RhinoViewport.KeyboardDollyInOut(double amount)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: amount (double)
Parameter Summary: The dolly amount.

Method: Rhino.Display.RhinoViewport.KeyboardRotate(bool leftRight, double angleRadians)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: leftRight (bool)
Parameter Summary: left/right rotate if true, up/down rotate if false.
Parameter: angleRadians (double)
Parameter Summary: If less than 0, rotation is to left or down. If greater than 0, rotation is to right or up.

Method: Rhino.Display.RhinoViewport.Magnify(double magnificationFactor, bool mode, System.Drawing.Point fixedScreenPoint)
Return: bool
Modifiers: public
Summary: Zooms or dollies in order to scale the viewport projection of observed objects.
Parameter: magnificationFactor (double)
Parameter Summary: The scale factor.
Parameter: mode (bool)
Parameter Summary: False = perform a "dolly" magnification by moving the camera towards/away from the target so that the amount of the screen subtended by an object changes. True = perform a "zoom" magnification by adjusting the "lens" angle
Parameter: fixedScreenPoint (System.Drawing.Point)
Parameter Summary: A point in the screen that should remain fixed.

Method: Rhino.Display.RhinoViewport.Magnify(double magnificationFactor, bool mode)
Return: bool
Modifiers: public
Summary: Zooms or dollies in order to scale the viewport projection of observed objects.
Parameter: magnificationFactor (double)
Parameter Summary: The scale factor.
Parameter: mode (bool)
Parameter Summary: False = perform a "dolly" magnification by moving the camera towards/away from the target so that the amount of the screen subtended by an object changes. True = perform a "zoom" magnification by adjusting the "lens" angle

Method: Rhino.Display.RhinoViewport.MouseAdjustLensLength(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint, bool moveTarget)
Return: bool
Modifiers: public
Summary: Adjusts the camera lens length.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.
Parameter: moveTarget (bool)
Parameter Summary: Should this operation move the target?

Method: Rhino.Display.RhinoViewport.MouseDollyZoom(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Zooms lens (thus adjusting the field of view) while moving the camera.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseInOutDolly(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Moves the camera towards or away from the view maintaining focus on the view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseLateralDolly(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Pans the camera
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseMagnify(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Moves the camera towards or away from the view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseRotateAroundTarget(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Rotates the viewport around target.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseRotateCamera(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Rotates the view around the camera location.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseTilt(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Tilts the camera view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.NextConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to PreviousConstructionPlane.

Method: Rhino.Display.RhinoViewport.NextViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings that were active before the last call to PrevView.

Method: Rhino.Display.RhinoViewport.PopConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to PushConstructionPlane.

Method: Rhino.Display.RhinoViewport.PopViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings at the top of the view stack and removes those settings from the view stack.

Method: Rhino.Display.RhinoViewport.PreviousConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to NextConstructionPlane or SetConstructionPlane.

Method: Rhino.Display.RhinoViewport.PreviousViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings that were active before the last call to NextViewProjection.

Method: Rhino.Display.RhinoViewport.PushConstructionPlane(DocObjects.ConstructionPlane cplane)
Return: void
Modifiers: public
Summary: Pushes the current construction plane on the viewport's construction plane stack and sets the construction plane to cplane.
Parameter: cplane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to push.

Method: Rhino.Display.RhinoViewport.PushViewInfo(DocObjects.ViewInfo viewinfo, bool includeTraceImage)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.PushViewProjection()
Return: void
Modifiers: public
Summary: Appends the current view projection and target to the viewport's view stack.

Method: Rhino.Display.RhinoViewport.Rotate(double angleRadians, Vector3d rotationAxis, Point3d rotationCenter)
Return: bool
Modifiers: public
Summary: Rotates about the specified axis. A positive rotation angle results in a counter-clockwise rotation about the axis (right hand rule).
Parameter: angleRadians (double)
Parameter Summary: angle of rotation in radians.
Parameter: rotationAxis (Vector3d)
Parameter Summary: direction of the axis of rotation.
Parameter: rotationCenter (Point3d)
Parameter Summary: point on the axis of rotation.

Method: Rhino.Display.RhinoViewport.ScreenToClient(System.Drawing.Point screenPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetCameraDirection(Vector3d cameraDirection, bool updateTargetLocation)
Return: void
Modifiers: public
Summary: Set viewport camera direction. By default the target location is changed so that the vector from the camera location to the target is parallel to the camera direction.
Parameter: cameraDirection (Vector3d)
Parameter Summary: new camera direction.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction. If false, the target location is not changed. See the remarks section of RhinoViewport.SetTarget for important details.

Method: Rhino.Display.RhinoViewport.SetCameraLocation(Point3d cameraLocation, bool updateTargetLocation)
Return: void
Modifiers: public
Summary: Set viewport camera location. By default the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector.
Parameter: cameraLocation (Point3d)
Parameter Summary: new camera location.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector. If false, the target location is not changed. See the remarks section of RhinoViewport.SetTarget for important details.

Method: Rhino.Display.RhinoViewport.SetCameraLocations(Point3d targetLocation, Point3d cameraLocation)
Return: void
Modifiers: public
Summary: Set viewport camera location and target location. The camera direction vector is changed so that it is parallel to the vector from the camera location to the target location.
Parameter: targetLocation (Point3d)
Parameter Summary: new target location.
Parameter: cameraLocation (Point3d)
Parameter Summary: new camera location.

Method: Rhino.Display.RhinoViewport.SetCameraTarget(Point3d targetLocation, bool updateCameraLocation)
Return: void
Modifiers: public
Summary: Set viewport target point. By default the camera location is translated so that the camera direction vector is parallel to the vector from the camera location to the target location.
Parameter: targetLocation (Point3d)
Parameter Summary: new target location.
Parameter: updateCameraLocation (bool)
Parameter Summary: if true, the camera location is translated so that the camera direction vector is parallel to the vector from the camera location to the target location. If false, the camera location is not changed.

Method: Rhino.Display.RhinoViewport.SetClippingPlanes(BoundingBox box)
Return: void
Modifiers: public
Summary: Sets optimal clipping planes to view objects in a world coordinate 3d bounding box.
Parameter: box (BoundingBox)
Parameter Summary: The bounding box

Method: Rhino.Display.RhinoViewport.SetConstructionPlane(DocObjects.ConstructionPlane cplane)
Return: void
Modifiers: public
Summary: Sets the construction plane to cplane.
Parameter: cplane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to set.

Method: Rhino.Display.RhinoViewport.SetConstructionPlane(Plane plane)
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetProjection(DefinedViewportProjection projection, string viewName, bool updateConstructionPlane)
Return: bool
Modifiers: public
Summary: Set viewport to a defined projection.
Parameter: projection (DefinedViewportProjection)
Parameter Summary: The "standard" projection type.
Parameter: viewName (string)
Parameter Summary: If not None or empty, the name is set.
Parameter: updateConstructionPlane (bool)
Parameter Summary: If true, the construction plane is set to the viewport plane.

Method: Rhino.Display.RhinoViewport.SetToPlanView(Point3d planeOrigin, Vector3d planeXaxis, Vector3d planeYaxis, bool setConstructionPlane)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetTraceImage(string bitmapFileName, Plane plane, double width, double height, bool grayscale, bool filtered)
Return: bool
Modifiers: public
Summary: Set trace image (background bitmap) for this viewport.
Parameter: bitmapFileName (string)
Parameter Summary: The bitmap file name.
Parameter: plane (Plane)
Parameter Summary: A picture plane.
Parameter: width (double)
Parameter Summary: The picture width.
Parameter: height (double)
Parameter Summary: The picture height.
Parameter: grayscale (bool)
Parameter Summary: True if the picture should be in grayscale.
Parameter: filtered (bool)
Parameter Summary: True if image should be filtered (bilinear) before displayed.

Method: Rhino.Display.RhinoViewport.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key. If null, the key will be removed

Method: Rhino.Display.RhinoViewport.SetViewProjection(DocObjects.ViewportInfo projection, bool updateTargetLocation)
Return: bool
Modifiers: public
Summary: Sets the viewport camera projection.
Parameter: projection (DocObjects.ViewportInfo)
Parameter Summary: The "standard" projection type.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector. If false, the target location is not changed.

Method: Rhino.Display.RhinoViewport.SetWallpaper(string imageFilename, bool grayscale, bool visible)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetWallpaper(string imageFilename, bool grayscale)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.WorldToClient(Point3d worldPoint)
Return: Point2d
Modifiers: public
Summary: Convert a point from world coordinates in the viewport to a 2d screen point in the local coordinates of the viewport (X/Y of point is relative to top left corner of viewport on screen)
Parameter: worldPoint (Point3d)
Parameter Summary: The 3D point in world coordinates.

Method: Rhino.Display.RhinoViewport.ZoomBoundingBox(BoundingBox box)
Return: bool
Modifiers: public
Summary: Zooms the viewport to the given bounding box.
Parameter: box (BoundingBox)
Parameter Summary: The bounding box to zoom.

Method: Rhino.Display.RhinoViewport.ZoomExtents()
Return: bool
Modifiers: public
Summary: Dollies the camera location and so that the view frustum contains all of the selected document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.

Method: Rhino.Display.RhinoViewport.ZoomExtentsSelected()
Return: bool
Modifiers: public
Summary: Dollies the camera location and so that the view frustum contains all of the selected document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.

Method: Rhino.Display.RhinoViewport.ZoomWindow(Rectangle rect)
Return: bool
Modifiers: public
Summary: Zooms the viewport to the given rectangle.
Parameter: rect (Rectangle)
Parameter Summary: A 2d screen rectangle in client coordinates of the parent Rhino view, where 0,0 is the upper left corner of the view window.

Class: Rhino.Display.Text3d
Summary: 3D aligned text with font settings.

Constructor: Rhino.Display.Text3d.Text3d(string text, Plane plane, double height)
Summary: Constructs a new instance of Text3d.

Constructor: Rhino.Display.Text3d.Text3d(string text)
Summary: Constructs a new instance of Text3d.

Property: Rhino.Display.Text3d.Bold
Return: bool
Modifiers: public
Summary: Gets or sets whether this Text3d object will be drawn in Bold.
Accessors: get set

Property: Rhino.Display.Text3d.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box for this Text3d object.
Accessors: get

Property: Rhino.Display.Text3d.FontFace
Return: string
Modifiers: public
Summary: Gets or sets the FontFace name.
Accessors: get set

Property: Rhino.Display.Text3d.Height
Return: double
Modifiers: public
Summary: Gets or sets the height (in units) of this Text3d object. The height should be a positive number larger than zero.
Accessors: get set

Property: Rhino.Display.Text3d.HorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Horizontal alignment that this Text3d is drawn with
Accessors: get set

Property: Rhino.Display.Text3d.Italic
Return: bool
Modifiers: public
Summary: Gets or sets whether this Text3d object will be drawn in Italics.
Accessors: get set

Property: Rhino.Display.Text3d.Text
Return: string
Modifiers: public
Summary: Gets or sets the text string for this Text3d object.
Accessors: get set

Property: Rhino.Display.Text3d.TextPlane
Return: Plane
Modifiers: public
Summary: Gets or sets the 3D aligned plane for this Text3d object.
Accessors: get set

Property: Rhino.Display.Text3d.VerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Summary: Vertical alignment that this Text3d is drawn with
Accessors: get set

Method: Rhino.Display.Text3d.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Class: Rhino.Display.ViewCapture

Constructor: Rhino.Display.ViewCapture.ViewCapture()

Property: Rhino.Display.ViewCapture.DrawAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.DrawGridAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.Height
Return: int
Modifiers: public
Summary: Height of capture in Pixels
Accessors: get set

Property: Rhino.Display.ViewCapture.Preview
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.RealtimeRenderPasses
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.ScaleScreenItems
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.TransparentBackground
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.Width
Return: int
Modifiers: public
Summary: Width of capture in Pixels
Accessors: get set

Method: Rhino.Display.ViewCapture.CaptureToBitmap(ViewCaptureSettings settings)
Return: Bitmap
Modifiers: public, static

Method: Rhino.Display.ViewCapture.CaptureToSvg(ViewCaptureSettings settings)
Return: System.Xml.XmlDocument
Modifiers: public, static

Method: Rhino.Display.ViewCapture.SendToPrinter(string printerName, ViewCaptureSettings[] settings, int copies)
Return: bool
Modifiers: public, static
Summary: Send a list of view capture settings to a printer. Each setting represents a single page.
Parameter: printerName (string)
Parameter Summary:
Parameter: settings (ViewCaptureSettings[])
Parameter Summary:
Parameter: copies (int)
Parameter Summary: number of copies to print

Method: Rhino.Display.ViewCapture.SendToPrinter(string printerName, ViewCaptureSettings[] settings)
Return: bool
Modifiers: public, static
Summary: Send a list of view capture settings to a printer. Each setting represents a single page.

Method: Rhino.Display.ViewCapture.CaptureToBitmap(RhinoView sourceView)
Return: Bitmap
Modifiers: public

Class: Rhino.Display.ViewCaptureSettings
Summary: Holds information required to generate high resolution output of a RhinoViewport. This is used for generating paper prints or image files

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings()
Summary: Construct default view capture settings

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(RhinoPageView sourcePageView, double dpi)
Summary: Constructor

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(RhinoView sourceView, Size mediaSize, double dpi)
Summary: Constructor

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(ViewCaptureSettings other)
Summary: Copy constructor

Property: Rhino.Display.ViewCaptureSettings.ApplyDisplayModeThicknessScales
Return: bool
Modifiers: public
Summary: Should curves and edges have their thicknesses scaled based the on the display mode settings for a view being captured (default is false)
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.ArrowheadSizeMillimeters
Return: double
Modifiers: public
Summary: Arrowhead size in millimeters.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.CropRectangle
Return: Rectangle
Modifiers: public
Summary: Actual area of output rectangle that view capture is sent to.
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.DefaultPrintWidthMillimeters
Return: double
Modifiers: public
Summary: Line thickness, in millimeters, used to print objects with no defined thickness.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.Document
Return: RhinoDoc
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawAxis
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawBackground
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawBackgroundBitmap
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawClippingPlanes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawLockedObjects
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawMargins
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawRectangle
Return: Rectangle
Modifiers: public
Summary: Rectangle where drawing is confined to on MediaSize
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.DrawSelectedObjectsOnly
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawWallpaper
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.FooterText
Return: string
Modifiers: public
Summary: Text drawn at the bottom of the output
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.HeaderText
Return: string
Modifiers: public
Summary: Text drawn at the top of the output
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.HorizontalScale
Return: double
Modifiers: public
Summary: Horizontal stretch to be applied to output. Useful for calibrating printers
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.IsScaleToFit
Return: bool
Modifiers: public
Summary: Returns True if the model has been scaled to fit.
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.IsValid
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.LinetypeWidthUnitsArePageLengths
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.MatchLinetypePatternDefinition
Return: bool
Modifiers: public
Summary: Default is true. Linetype scales are normally generated right before printing/view capture in order to get linetypes to print to the same lengths as defined. If false, the linetypes are not scaled and the current pattern lengths as seen on the screen as used.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.MediaSize
Return: Size
Modifiers: public
Summary: Total size of the image or page in dots
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.ModelScaleType
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.OffsetAnchor
Return: AnchorLocation
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.OutputColor
Return: ColorMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.PointSizeMillimeters
Return: double
Modifiers: public
Summary: Size of point objects in millimeters. if scale <= 0 the size is minimized so points are always drawn as small as possible
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.RasterMode
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.Resolution
Return: double
Modifiers: public
Summary: Capture "density" in dots per inch.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.TextDotPointSize
Return: double
Modifiers: public
Summary: Font point size use for printing text dots. The default value is 10.0. This has morphed into a scale setting as individual text dots have their own sizes. A value of 20 will print dots at double of their size setting while a value of 10 will print with no scaling applied.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.UsePrintWidths
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.VerticalScale
Return: double
Modifiers: public
Summary: Vertical stretch to be applied to output. Useful for calibrating printers
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.ViewArea
Return: ViewAreaMapping
Modifiers: public
Summary: How the RhinoViewport is mapped to the output rectangle
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.WireThicknessScale
Return: double
Modifiers: public
Summary: Scaling factor to apply to object print widths (typically 1.0). This is helpful when printing something at 1/2 scale and having all of the curves print 1/2 as thick.
Accessors: get set

Method: Rhino.Display.ViewCaptureSettings.CreatePreviewSettings(System.Drawing.Size size)
Return: ViewCaptureSettings
Modifiers: public
Summary: Create a ViewCaptureSettings based on this instance, but scaled to fit in a different sized area. Scaling is also performed on dpi. This is primarily used to for capturing images that are shown as print previews

Method: Rhino.Display.ViewCaptureSettings.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.ViewCaptureSettings.Equals(ViewCaptureSettings other)
Return: bool
Modifiers: public
Summary: Check if the contents of this object is the same as another object
Parameter: other (ViewCaptureSettings)
Parameter Summary: other settings to compare against

Method: Rhino.Display.ViewCaptureSettings.GetMargins(UnitSystem lengthUnits, out double left, out double top, out double right, out double bottom)
Return: bool
Modifiers: public
Summary: Get distances from the edge of the paper (MediaSize) to the CropRectangle in a defined unit system
Parameter: lengthUnits (UnitSystem)
Parameter Summary: Units to get distances in
Parameter: left (double)
Parameter Summary: Distance from left edge of paper to left edge of CropRectangle
Parameter: top (double)
Parameter Summary: Distance from top edge of paper to top edge of CropRectangle
Parameter: right (double)
Parameter Summary: Distance from right edge of paper to right edge of CropRectangle
Parameter: bottom (double)
Parameter Summary: Distance from bottom edge of paper to bottom edge of CropRectangle

Method: Rhino.Display.ViewCaptureSettings.GetModelScale(UnitSystem pageUnits, UnitSystem modelUnits)
Return: double
Modifiers: public
Summary: Returns the model scale factor.
Parameter: pageUnits (UnitSystem)
Parameter Summary: The current page units.
Parameter: modelUnits (UnitSystem)
Parameter Summary: The current model units.

Method: Rhino.Display.ViewCaptureSettings.GetOffset(UnitSystem lengthUnits, out bool fromMargin, out double x, out double y)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.GetViewport()
Return: RhinoViewport
Modifiers: public
Summary: Get RhinoViewport that this view capture settings is targeting

Method: Rhino.Display.ViewCaptureSettings.Load(string name, PersistentSettings settings)
Return: bool
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.MatchViewportAspectRatio()
Return: bool
Modifiers: public
Summary: Adjust crop rectangle to match the aspect ratio of the original viewport that these settings reference

Method: Rhino.Display.ViewCaptureSettings.MaximizePrintableArea()
Return: void
Modifiers: public
Summary: Minimize cropping so the full drawable area is used

Method: Rhino.Display.ViewCaptureSettings.Save(string name, PersistentSettings settings)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetLayout(Size mediaSize, Rectangle cropRectangle)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetMarginBottom(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the bottom edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMarginLeft(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the left edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMarginRight(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the right edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMargins(UnitSystem lengthUnits, double left, double top, double right, double bottom)
Return: bool
Modifiers: public
Summary: Set distances from the edge of the paper (MediaSize) to the CropRectange in a defined unit system
Parameter: lengthUnits (UnitSystem)
Parameter Summary: Units that left, top, right, and bottom are defined in
Parameter: left (double)
Parameter Summary: Distance from left edge of paper to left edge of CropRectangle
Parameter: top (double)
Parameter Summary: Distance from top edge of paper to top edge of CropRectangle
Parameter: right (double)
Parameter Summary: Distance from right edge of paper to right edge of CropRectangle
Parameter: bottom (double)
Parameter Summary: Distance from bottom edge of paper to bottom edge of CropRectangle

Method: Rhino.Display.ViewCaptureSettings.SetMarginTop(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the top edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetModelScaleToFit(bool promptOnChange)
Return: void
Modifiers: public
Summary: Scales the model to fit.
Parameter: promptOnChange (bool)
Parameter Summary: Prompt the user if the model scale will change.

Method: Rhino.Display.ViewCaptureSettings.SetModelScaleToValue(double scale)
Return: void
Modifiers: public
Summary: Sets the model scale to a value.
Parameter: scale (double)
Parameter Summary: The scale value.

Method: Rhino.Display.ViewCaptureSettings.SetOffset(UnitSystem lengthUnits, bool fromMargin, double x, double y)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetViewport(RhinoViewport viewport)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetWindowRect(Point2d screenPoint1, Point2d screenPoint2)
Return: void
Modifiers: public
Summary: Set the print area to a window selection based on two points in screen coordinates
Parameter: screenPoint1 (Point2d)
Parameter Summary: first point; it doesn't matter what corner of the rectangle this point represents
Parameter: screenPoint2 (Point2d)
Parameter Summary: point representing opposite corner of rectangle from screenPoint1

Method: Rhino.Display.ViewCaptureSettings.SetWindowRect(Point3d worldPoint1, Point3d worldPoint2)
Return: void
Modifiers: public
Summary: Set the print area to a window selection based on two points in world coordinates
Parameter: worldPoint1 (Point3d)
Parameter Summary: First point in world coordinates. This point is projected to screen coordinates
Parameter: worldPoint2 (Point3d)
Parameter Summary: Second point in world coordinates. This point is projected to screen coordinates

Class: Rhino.Display.ViewEventArgs

Property: Rhino.Display.ViewEventArgs.View
Return: RhinoView
Modifiers: public
Accessors: get

Class: Rhino.Display.VisualAnalysisMode
Summary: Represents a base class for visual analysis modes.
This class is abstract.

Constructor: Rhino.Display.VisualAnalysisMode.VisualAnalysisMode()
Summary: Initializes a new instance of the VisualAnalysisMode class

Property: Rhino.Display.VisualAnalysisMode.RhinoCurvatureColorAnalyisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in curvature color analysis mode. Surface curvature is shown using False color mapping.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoCurvatureGraphAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in curvature graphs analysis mode. Curvature hair is shown on curves and surfaces.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoDraftAngleAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in draft angle analysis mode. Draft angle is displayed using False colors.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEdgeAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in edge analysis mode. Brep and mesh edges are shown in a selected color.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEdgeContinuityAlalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in edge continuity analysis mode.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEmapAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in emap analysis mode. An environment map is shown on surfaces and meshes.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoThicknessAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in thickness analysis mode.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoZebraStripeAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in zebra stripe analysis mode. Zebra stripes are shown on surfaces and meshes.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Id
Return: Guid
Modifiers: public
Summary: Gets the visual analysis mode GUID. The Guid is specified with the <b>System.Runtime.InteropServices.GuidAttribute</b> applied to the class.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Name
Return: string
Modifiers: public, abstract
Summary: Gets the name of the analysis mode. It is used by the _What command and the object properties details window to describe the object.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.ShowIsoCurves
Return: bool
Modifiers: public, virtual
Summary: Gets True if this visual analysis mode will show isocuves on shaded surface objects. Often a mode's user interface will provide a way to change this setting.
The default is false. | Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Style
Return: AnalysisStyle
Modifiers: public, abstract
Summary: Gets the visual analysis mode style.
Accessors: get

Method: Rhino.Display.VisualAnalysisMode.AdjustAnalysisMeshes(RhinoDoc doc, System.Guid analysisModeId)
Return: bool
Modifiers: public, static
Summary: Interactively adjusts surface analysis meshes of objects using a Rhino built-in analysis mode.
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document.
Parameter: analysisModeId (System.Guid)
Parameter Summary: The id of the analysis mode.

Method: Rhino.Display.VisualAnalysisMode.Find(System.Guid id)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Finds a visual analysis mode by guid.
Parameter: id (System.Guid)
Parameter Summary: The globally unique identifier to search for.

Method: Rhino.Display.VisualAnalysisMode.Find(System.Type t)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Finds a visual analysis mode by type.
Parameter: t (System.Type)
Parameter Summary: A visual analysis mode type.

Method: Rhino.Display.VisualAnalysisMode.Register(System.Type customAnalysisModeType)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Registers a custom visual analysis mode for use in Rhino. It is OK to call register multiple times for a single custom analysis mode type, since subsequent register calls will notice that the type has already been registered.
Parameter: customAnalysisModeType (System.Type)
Parameter Summary: Must be a type that is a subclass of VisualAnalysisMode.

Method: Rhino.Display.VisualAnalysisMode.DrawBrepObject(Rhino.DocObjects.BrepObject brep, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one brep. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: brep (Rhino.DocObjects.BrepObject) | Parameter Summary: A brep object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawCurveObject(Rhino.DocObjects.CurveObject curve, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: If Style==Wireframe, then the default decomposes the curve object into nurbs curve segments and calls the virtual DrawNurbsCurve for each segment.
Parameter: curve (Rhino.DocObjects.CurveObject)
Parameter Summary: A document curve object.
Parameter: pipeline (DisplayPipeline)
Parameter Summary: The drawing pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawMesh(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.Mesh mesh, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a mesh.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the surface. | Parameter: mesh (Rhino.Geometry.Mesh) | Parameter Summary: The mesh geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawMeshObject(Rhino.DocObjects.MeshObject mesh, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one mesh. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: mesh (Rhino.DocObjects.MeshObject) | Parameter Summary: A mesh object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawNurbsCurve(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.NurbsCurve curve, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a NURBS curve. This is a good function to override for analysis modes like curvature hair display.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the curve. | Parameter: curve (Rhino.Geometry.NurbsCurve) | Parameter Summary: The curve geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawNurbsSurface(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.NurbsSurface surface, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a NURBS surface. This is a good function to override to display object-related meshes.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the surface. | Parameter: surface (Rhino.Geometry.NurbsSurface) | Parameter Summary: The surface geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawPointCloudObject(Rhino.DocObjects.PointCloudObject pointCloud, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one point cloud. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: pointCloud (Rhino.DocObjects.PointCloudObject) | Parameter Summary: A point cloud object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawPointObject(Rhino.DocObjects.PointObject point, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one point. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: point (Rhino.DocObjects.PointObject) | Parameter Summary: A point object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.EnableUserInterface(bool on)
Return: void
Modifiers: public, virtual
Summary: Turns the analysis mode's user interface on and off. For Rhino's built in modes this opens or closes the modeless dialog that controls the analysis mode's display settings.
Parameter: on (bool)
Parameter Summary: True if the interface should be shown; False if it should be concealed.

Method: Rhino.Display.VisualAnalysisMode.ObjectSupportsAnalysisMode(Rhino.DocObjects.RhinoObject obj)
Return: bool
Modifiers: public, virtual
Summary: Gets a value indicating if this visual analysis mode can be used on a given Rhino object.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to be tested.

Method: Rhino.Display.VisualAnalysisMode.SetUpDisplayAttributes(Rhino.DocObjects.RhinoObject obj, DisplayPipelineAttributes attributes)
Return: void
Modifiers: protected, virtual
Summary: If an analysis mode needs to modify display attributes, this is the place to do it. In particular, Style==Texture, then this function must be overridden.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object for which to set up attributes.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The linked attributes.

Method: Rhino.Display.VisualAnalysisMode.UpdateVertexColors(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.Mesh[] meshes)
Return: void
Modifiers: protected, virtual
Summary: If Style==falseColor, then this virtual function must be overridden. Rhino calls this function when it is time for to set the False colors on the analysis mesh vertices. For breps, there is one mesh per face. For mesh objects there is a single mesh.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object for which to update vertex colors.
Parameter: meshes (Rhino.Geometry.Mesh[])
Parameter Summary: An array of meshes that should be updated.

Class: Rhino.Display.ZBufferCapture
Summary: Provides functionality for getting the z-buffer values from a viewport and a given display mode

Constructor: Rhino.Display.ZBufferCapture.ZBufferCapture(RhinoViewport viewport)

Method: Rhino.Display.ZBufferCapture.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.ZBufferCapture.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Display.ZBufferCapture.GrayscaleDib()
Return: System.Drawing.Bitmap
Modifiers: public

Method: Rhino.Display.ZBufferCapture.HitCount()
Return: int
Modifiers: public

Method: Rhino.Display.ZBufferCapture.MaxZ()
Return: float
Modifiers: public

Method: Rhino.Display.ZBufferCapture.MinZ()
Return: float
Modifiers: public

Method: Rhino.Display.ZBufferCapture.SetDisplayMode(System.Guid modeId)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowAnnotations(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowCurves(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowIsocurves(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowLights(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowMeshWires(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowPoints(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowText(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.WorldPointAt(int x, int y)
Return: Point3d
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ZValueAt(int x, int y)
Return: float
Modifiers: public

# Namespace: Rhino.Geometry
Summary: The Geometry namespace contains geometric types used in Rhino.
Examples are lines, curves, meshes and boundary representations.

Class: Rhino.Geometry.AngularDimension
Summary: Represents a dimension of an entity that can be measured with an angle.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension()
Summary: Constructs an angular dimension.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Arc arc, double offset)
Summary: Constructs an angular dimension from a given arc.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Line line1, Point3d pointOnLine1, Line line2, Point3d pointOnLine2, Point3d pointOnAngularDimensionArc, bool bSetExtensionPoints)
Summary: Constructs an angular dimension between the lines. If the lines intersect in a single point, that point is used as the center of the angular dimension arc.In this case, there are eight possible angles to dimension.The pointOnAngularDimensionArc and pointOnLine parameters are used to select the correct angle to dimension. If a pointOnLine parameter is not set, the corresponding line's midpoint is used. If the lines are colinear, the point on the line closest to pointOnAngularDimensionArc is the center of the angular dimension arc.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Plane plane, Vector3d horizontal, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Summary: Constructs an angular dimension from parameters.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Plane plane, Vector3d horizontal, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Summary: Constructs an angular dimension with extension lines starting at plane origin (arc center).

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.AngularDimension.AngleFormat
Return: AngleDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.ArrowPoint1
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AngularDimension.ArrowPoint2
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AngularDimension.CenterPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DefPoint1
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DefPoint2
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DimlinePoint
Return: Point2d
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Line line1, Point3d pointOnLine1, Line line2, Point3d pointOnLine2, Point3d pointOnAngularDimensionArc, bool bSetExtensionPoints)
Return: AngularDimension
Modifiers: public, static
Summary: The angle between the lines is dimensioned. If the lines intersect in a single point, that point is used as the center of the angular dimension arc.In this case, there are eight possible angles to dimension.The pointOnAngularDimensionArc and pointOnLine parameters are used to select the correct angle to dimension. If a pointOnLine parameter is not set, the corresponding line's midpoint is used. If the lines are colinear, the point on the line closest to pointOnAngularDimensionArc is the center of the angular dimension arc.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension style.
Parameter: line1 (Line)
Parameter Summary: The first line.
Parameter: pointOnLine1 (Point3d)
Parameter Summary: If specified, indicates which semi-infinite portion of line1 to dimension. Otherwise the midpoint of line1 as a segment is used. When in doubt, use Point3d.Unset.
Parameter: line2 (Line)
Parameter Summary: The second line.
Parameter: pointOnLine2 (Point3d)
Parameter Summary:
Parameter: pointOnAngularDimensionArc (Point3d)
Parameter Summary: A point on the interior of the angular dimension arc.
Parameter: bSetExtensionPoints (bool)
Parameter Summary: If bSetExtensionPoints is true, and a pointOnLine parameter is valid, that point is used as the extension point. Otherwise the angular dimension arc endpoint is used.

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static
Summary: Creates an angular dimension from parameters.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: The dimension style.
Parameter: plane (Plane)
Parameter Summary: The dimension's plane.
Parameter: horizontal (Vector3d)
Parameter Summary: The horizontal direction.
Parameter: extpoint1 (Point3d)
Parameter Summary: Start of first extension line.
Parameter: extpoint2 (Point3d)
Parameter Summary: start of second extension line.
Parameter: dirpoint1 (Point3d)
Parameter Summary: point on first extension vector.
Parameter: dirpoint2 (Point3d)
Parameter Summary: Spoint on second extension vector.
Parameter: dimlinepoint (Point3d)
Parameter Summary: point on dimension line.

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static
Summary: Creates an angular dimension with extension lines starting at plane origin (arc center).
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: horizontal (Vector3d)
Parameter Summary: Horizontal reference direction.
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension center point.
Parameter: defpoint1 (Point3d)
Parameter Summary: Point on first extension line.
Parameter: defpoint2 (Point3d)
Parameter Summary: Point on second extension line.
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension arc.

Method: Rhino.Geometry.AngularDimension.Create(System.Guid styleId, Plane plane, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static

Method: Rhino.Geometry.AngularDimension.AdjustFromPoints(Plane plane, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: bool
Modifiers: public
Summary: Update angular dimension from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: extpoint1 (Point3d)
Parameter Summary: Start of first extension line.
Parameter: extpoint2 (Point3d)
Parameter Summary: start of second extension line.
Parameter: dirpoint1 (Point3d)
Parameter Summary: point on first extension vector.
Parameter: dirpoint2 (Point3d)
Parameter Summary: Spoint on second extension vector.
Parameter: dimlinepoint (Point3d)
Parameter Summary: point on dimension line.

Method: Rhino.Geometry.AngularDimension.AdjustFromPoints(Plane plane, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Return: bool
Modifiers: public
Summary: Updates dimension geometry from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: defpoint1 (Point3d)
Parameter Summary: Point on first extension line.
Parameter: defpoint2 (Point3d)
Parameter Summary: Point on second extension line.
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension arc.

Method: Rhino.Geometry.AngularDimension.Get3dPoints(out Point3d centerpoint, out Point3d defpoint1, out Point3d defpoint2, out Point3d arrowpoint1, out Point3d arrowpoint2, out Point3d dimlinepoint, out Point3d textpoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: defpoint1 (Point3d)
Parameter Summary: First definition point
Parameter: defpoint2 (Point3d)
Parameter Summary: Second definition point
Parameter: arrowpoint1 (Point3d)
Parameter Summary: First arrow point
Parameter: arrowpoint2 (Point3d)
Parameter Summary: Second arrow point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: textpoint (Point3d)
Parameter Summary: Text location point

Method: Rhino.Geometry.AngularDimension.GetAngleDisplayText(DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.AngularDimension.GetDisplayLines(DimensionStyle style, double scale, out Line[] lines, out Arc[] arcs)
Return: bool
Modifiers: public

Method: Rhino.Geometry.AngularDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.AnnotationBase
Summary: Provides a common base class to all annotation geometry.
This class refers to the geometric element that is independent from the document.

Constructor: Rhino.Geometry.AnnotationBase.AnnotationBase()
Summary: Protected constructor for internal use.

Constructor: Rhino.Geometry.AnnotationBase.AnnotationBase(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.AnnotationBase.AlternateDimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Summary: Alternate length display units and format
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.AnnotationType
Return: AnnotationType
Modifiers: public, virtual
Summary: Type of annotation
Accessors: get

Property: Rhino.Geometry.AnnotationBase.DecimalSeparator
Return: char
Modifiers: public
Summary: Set or get the decimal separator c
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Summary: Length display units and format
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionScale
Return: double
Modifiers: public
Summary: Gets or sets the dimension scale
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: If there are no overrides then the parent style is returned otherwise the dimension style saved with the annotation is returned.
Accessors: get

Property: Rhino.Geometry.AnnotationBase.DimensionStyleId
Return: Guid
Modifiers: public
Summary: Id of this annotation's parent dimstyle If this annotation has overrides to dimstyle properties, those overrides will be represented in the DimensionStyle returned by DimensionStyle(ParentStyle)
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DrawForward
Return: bool
Modifiers: public
Summary: Gets or sets whether the text is oriented towards the reader when viewed from behind
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DrawTextFrame
Return: bool
Modifiers: public
Summary: Gets or sets whether to draw a frame around a text mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FirstCharFont
Return: Font
Modifiers: public
Summary: Returns the font used by the first run of text in an annotation
Accessors: get

Property: Rhino.Geometry.AnnotationBase.Font
Return: Font
Modifiers: public
Summary: The base Font for the text of the annotation. The text string is rich text and therefore a different font that the base font can be associated with sub strings of the text
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FontIndex
Return: int
Modifiers: public
Summary: Obsolete; use Font property instead
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FormatWidth
Return: double
Modifiers: public
Summary: Text format width (Wrapping rectangle)
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.HasPropertyOverrides
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AnnotationBase.MaskColor
Return: Color
Modifiers: public
Summary: Color to use for drawing a text mask when it is enabled. If the mask is enabled and MaskColor is System.Drawing.Color.Transparent, then the viewport's color will be used for the MaskColor
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskColorSource
Return: MaskType
Modifiers: public
Summary: Gets or sets whether the mask background color is from the background or from a color
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskEnabled
Return: bool
Modifiers: public
Summary: Determines whether or not to draw a Text Mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskFrame
Return: MaskFrame
Modifiers: public
Summary: Gets or sets whether to draw a frame around a text mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskOffset
Return: double
Modifiers: public
Summary: Offset for the border around text of the rectangle used to draw the mask. This value multiplied by TextHeight is the offset on each side of the tight rectangle around the text characters to the mask rectangle. The default value is 0.1.
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskUsesViewportColor
Return: bool
Modifiers: public
Summary: If true, the viewport's color is used for the mask color. If false, the color defined by MaskColor is used
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.ParentDimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: The parent dimension style associated with this annotation
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.PlainText
Return: string
Modifiers: public
Summary: Text stripped of RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.PlainTextWithFields
Return: string
Modifiers: public
Summary: Text stripped of RTF formatting information and with field expressions intact
Accessors: get

Property: Rhino.Geometry.AnnotationBase.Plane
Return: Plane
Modifiers: public
Summary: Plane that this annotation lies on
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.RichText
Return: string
Modifiers: public
Summary: Text including additional RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.Text
Return: string
Modifiers: public
Summary: Text including additional RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextFormula
Return: string
Modifiers: public
Summary: See RichText
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextHasRtfFormatting
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AnnotationBase.TextHeight
Return: double
Modifiers: public
Summary: AnnotationBase.TextHeight Gets the parent dimstyle for the annotation and gets or sets the text height in the dimstyle
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextIsWrapped
Return: bool
Modifiers: public
Summary: Is text wrapping on
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextModelWidth
Return: double
Modifiers: public
Summary: Width of text in the model
Accessors: get

Property: Rhino.Geometry.AnnotationBase.TextRotationDegrees
Return: double
Modifiers: public
Summary: Rotation of text in degrees
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextRotationRadians
Return: double
Modifiers: public
Summary: Rotation of text in radians
Accessors: get set

Method: Rhino.Geometry.AnnotationBase.FirstCharProperties(string rtf_str, ref bool bold, ref bool italic, ref bool underline, ref string facename)
Return: bool
Modifiers: static, public

Method: Rhino.Geometry.AnnotationBase.FormatRtfString(string rtf_in, bool clear_bold, bool set_bold, bool clear_italic, bool set_italic, bool clear_underline, bool set_underline, bool clear_facename, bool set_facename, string facename)
Return: string
Modifiers: static, public

Method: Rhino.Geometry.AnnotationBase.GetDimensionScale(RhinoDoc doc, DimensionStyle dimstyle, Rhino.Display.RhinoViewport vport)
Return: double
Modifiers: public, static
Summary: Get view dependent dimension scale

Method: Rhino.Geometry.AnnotationBase.PlainTextToRtf(string str)
Return: string
Modifiers: public, static

Method: Rhino.Geometry.AnnotationBase.ClearPropertyOverrides()
Return: bool
Modifiers: public
Summary: Clears all overridden properties for this annotation

Method: Rhino.Geometry.AnnotationBase.GetBoundingBox(Transform xform)
Return: BoundingBox
Modifiers: public, override
Summary: Aligned bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to bounding box after calculation. The geometry is not modified.

Method: Rhino.Geometry.AnnotationBase.GetDimensionStyle(DimensionStyle parentDimStyle)
Return: DimensionStyle
Modifiers: public
Summary: Return the proper dimension style from which to get properties for this annotation object If this object has style overrides, those will be included in the returned dimension style and the style will be updated to include the current state of the parent style for non-overridden fields

Method: Rhino.Geometry.AnnotationBase.GetPlainTextWithRunMap(ref int map)
Return: string
Modifiers: public
Summary: Return plain text string for this annotation with field expressions unevaluated.
Parameter: map (int)
Parameter Summary: an array of int values in groups of 3: run index, character start position, and length.

Method: Rhino.Geometry.AnnotationBase.IsAllBold()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Bold, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsAllItalic()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Italic, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsAllUnderlined()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Underlined, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsPropertyOverridden(DimensionStyle.Field field)
Return: bool
Modifiers: public
Summary: Returns True if a property is overridden

Method: Rhino.Geometry.AnnotationBase.RunReplace(string replaceString, int startRunIndex, int startRunPosition, int endRunIndex, int endRunPosition)
Return: bool
Modifiers: public
Summary: Replace text within a formatted string

Method: Rhino.Geometry.AnnotationBase.SetBold(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetFacename(bool set_on, string facename)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetItalic(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetOverrideDimStyle(DimensionStyle OverrideStyle)
Return: bool
Modifiers: public
Summary: Set a style including overrides for this annotation object. The DimensionStyle OverrideStyle must have the override fields marked as overridden and must have it's Id set to nil. Use DimensinoStyle.SetFieldOverride(Field field) and related functions to manage override settings. To override a field, the field value must be set and the field must be marked as an override. The DimensionStyle passed in here must not be in the dimstyle table

Method: Rhino.Geometry.AnnotationBase.SetRichText(string rtfText, DimensionStyle dimstyle)
Return: void
Modifiers: public

Method: Rhino.Geometry.AnnotationBase.SetUnderline(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.WrapText()
Return: void
Modifiers: public
Summary: Wrap text

Class: Rhino.Geometry.ArcCurve
Summary: Represent arcs and circles.
ArcCurve.IsCircle returns True if the curve is a complete circle.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve()
Summary: Initializes a new <b>ArcCurve</b> instance.
Radius is set to 1, position to Origin and Domain to full span (circle).

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Arc arc, double t0, double t1)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>Arc</b> and specifying the needed parametrization of the arc.
Arc will not be cut again at these parameterizations.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Arc arc)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>Arc</b> .

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(ArcCurve other)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>ArcCurve</b> .

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Circle circle, double t0, double t1)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from a <b>Circle</b> and specifying the needed parametrization of the arc.
Circle will not be newly cut at these parameterizations.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Circle circle)
Summary: Initializes a new <b>ArcCurve</b> instance, copying the shape of a <b>Circle</b> .
Parameterization will be [0;circle.Circumference]

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.ArcCurve.AngleDegrees
Return: double
Modifiers: public
Summary: Gets the angles of this arc in degrees.
Accessors: get

Property: Rhino.Geometry.ArcCurve.AngleRadians
Return: double
Modifiers: public
Summary: Gets the angles of this arc in radians.
Accessors: get

Property: Rhino.Geometry.ArcCurve.Arc
Return: Arc
Modifiers: public
Summary: Gets the arc that is contained within this ArcCurve.
Accessors: get

Property: Rhino.Geometry.ArcCurve.IsCompleteCircle
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve can be represented by a complete circle.
Accessors: get

Property: Rhino.Geometry.ArcCurve.Radius
Return: double
Modifiers: public
Summary: Gets the radius of this ArcCurve.
Accessors: get

Class: Rhino.Geometry.AreaMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of area, area centroid and area moments in closed planar curves, in meshes, in surfaces, in hatches and in boundary representations.

Constructor: Rhino.Geometry.AreaMassProperties.AreaMassProperties()
Summary: Initializes a new instance of the AreaMassProperties class

Property: Rhino.Geometry.AreaMassProperties.Area
Return: double
Modifiers: public
Summary: Gets the area solution.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.AreaError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the area calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the area centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the centroid calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the area Y is integral of "y dm" over the area Z is integral of "z dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the area Y is integral of "yz dm" over the area Z is integral of "zx dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the area Y is integral of "yy dm" over the area Z is integral of "zz dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep, bool area, bool firstMoments, bool secondMoments, bool productMoments, double relativeTolerance, double absoluteTolerance)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.
Parameter: relativeTolerance (double)
Parameter Summary: The relative tolerance used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.
Parameter: absoluteTolerance (double)
Parameter Summary: The absolute tolerancwe used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Curve closedPlanarCurve, double planarTolerance)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a closed planar curve.
Parameter: closedPlanarCurve (Curve)
Parameter Summary: Curve to measure.
Parameter: planarTolerance (double)
Parameter Summary: absolute tolerance used to insure the closed curve is planar

Method: Rhino.Geometry.AreaMassProperties.Compute(Curve closedPlanarCurve)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a closed planar curve.
Parameter: closedPlanarCurve (Curve)
Parameter Summary: Curve to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Hatch hatch)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a hatch.
Parameter: hatch (Hatch)
Parameter Summary: Hatch to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(IEnumerable<GeometryBase> geometry, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes the AreaMassProperties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the area computation.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(IEnumerable<GeometryBase> geometry)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes the Area properties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the area computation.

Method: Rhino.Geometry.AreaMassProperties.Compute(Mesh mesh, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Mesh mesh)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Surface surface, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Surface surface)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.

Method: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.AreaMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Class: Rhino.Geometry.Arrowhead
Summary: Arrowhead used by annotation

Constructor: Rhino.Geometry.Arrowhead.Arrowhead()
Summary: Constructor

Constructor: Rhino.Geometry.Arrowhead.Arrowhead(ArrowType arrowType, Guid blockId)
Summary: Constructor

Property: Rhino.Geometry.Arrowhead.ArrowType
Return: ArrowType
Modifiers: public
Summary: Type of arrowhead used by annotation
Accessors: get

Property: Rhino.Geometry.Arrowhead.BlockId
Return: Guid
Modifiers: public
Summary: Id of block used for user-defined arrowhead
Accessors: get

Class: Rhino.Geometry.BezierCurve
Summary: Represents a Bezier curve.
Note: as an exception, the bezier curve is not derived from .

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point2d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 2d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point3d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 3d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point4d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 4d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.BezierCurve.ControlVertexCount
Return: int
Modifiers: public
Summary: Number of control vertices in this curve
Accessors: get

Property: Rhino.Geometry.BezierCurve.Dimension
Return: int
Modifiers: public
Summary: Dimension of Bezier
Accessors: get

Property: Rhino.Geometry.BezierCurve.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the curve is rational. Rational curves have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.BezierCurve.IsValid
Return: bool
Modifiers: public
Summary: Tests an object to see if it is valid.
Accessors: get

Method: Rhino.Geometry.BezierCurve.CreateBeziers(Curve sourceCurve)
Return: BezierCurve[]
Modifiers: public, static
Summary: Create an array of Bezier curves that fit to an existing curve. Please note, these Beziers can be of any order and may be rational.
Parameter: sourceCurve (Curve)
Parameter Summary: The curve to fit Beziers to

Method: Rhino.Geometry.BezierCurve.CreateCubicBeziers(Curve sourceCurve, double distanceTolerance, double kinkTolerance)
Return: BezierCurve[]
Modifiers: public, static
Summary: Constructs an array of cubic, non-rational Beziers that fit a curve to a tolerance.
Parameter: sourceCurve (Curve)
Parameter Summary: A curve to approximate.
Parameter: distanceTolerance (double)
Parameter Summary: The max fitting error. Use RhinoMath.SqrtEpsilon as a minimum.
Parameter: kinkTolerance (double)
Parameter Summary: If the input curve has a g1-discontinuity with angle radian measure greater than kinkTolerance at some point P, the list of beziers will also have a kink at P.

Method: Rhino.Geometry.BezierCurve.CreateLoftedBezier(IEnumerable<Point2d> points)
Return: BezierCurve
Modifiers: public, static
Summary: Loft a bezier through a list of points
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: 2 or more points to interpolate

Method: Rhino.Geometry.BezierCurve.CreateLoftedBezier(IEnumerable<Point3d> points)
Return: BezierCurve
Modifiers: public, static
Summary: Loft a bezier through a list of points
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: 2 or more points to interpolate

Method: Rhino.Geometry.BezierCurve.ChangeDimension(int desiredDimension)
Return: bool
Modifiers: public
Summary: Change dimension of bezier.

Method: Rhino.Geometry.BezierCurve.CurvatureAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluate the curvature vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.BezierCurve.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.BezierCurve.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the curve.
Parameter: accurate (bool)
Parameter Summary: If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. For some geometry types there is no difference between the estimate and the accurate bounding box. Estimated bounding boxes can be computed much (much) faster than accurate (or "tight") bounding boxes. Estimated bounding boxes are always similar to or larger than accurate bounding boxes.

Method: Rhino.Geometry.BezierCurve.GetControlVertex2d(int index)
Return: Point2d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetControlVertex3d(int index)
Return: Point3d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetControlVertex4d(int index)
Return: Point4d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.Geometry.BezierCurve.IncreaseDegree(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase degree of bezier

Method: Rhino.Geometry.BezierCurve.MakeNonRational()
Return: bool
Modifiers: public
Summary: Make bezier non-rational

Method: Rhino.Geometry.BezierCurve.MakeRational()
Return: bool
Modifiers: public
Summary: Make bezier rational

Method: Rhino.Geometry.BezierCurve.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.Split(double t, out BezierCurve left, out BezierCurve right)
Return: bool
Modifiers: public
Summary: Divides the Bezier curve at the specified parameter.
Parameter: t (double)
Parameter Summary: parameter must satisfy 0 < t < 1
Parameter: left (BezierCurve)
Parameter Summary:
Parameter: right (BezierCurve)
Parameter Summary:

Method: Rhino.Geometry.BezierCurve.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.

Class: Rhino.Geometry.BezierSurface
Summary: Represents a Bezier surface.

Property: Rhino.Geometry.BezierSurface.Dimension
Return: int
Modifiers: public
Summary: Dimension of Bezier
Accessors: get

Property: Rhino.Geometry.BezierSurface.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the surface is rational. Rational surfaces have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.BezierSurface.IsValid
Return: bool
Modifiers: public
Summary: Tests an object to see if it is valid.
Accessors: get

Method: Rhino.Geometry.BezierSurface.CreateLoftedBezier(IEnumerable<BezierCurve> curves)
Return: BezierSurface
Modifiers: public, static
Summary: Loft a bezier surface through a list of bezier curves.
Parameter: curves (IEnumerable<BezierCurve>)
Parameter Summary: list of curves that have the same degree

Method: Rhino.Geometry.BezierSurface.ControlVertexCount(int direction)
Return: int
Modifiers: public
Summary: Number of control vertices in this surface
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.BezierSurface.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.BezierSurface.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.BezierSurface.Domain(int direction)
Return: Interval
Modifiers: public
Summary: Gets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter, 1 gets second parameter.

Method: Rhino.Geometry.BezierSurface.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the surface.

Method: Rhino.Geometry.BezierSurface.GetControlVertex2d(int i, int j)
Return: Point2d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.GetControlVertex3d(int i, int j)
Return: Point3d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.GetControlVertex4d(int i, int j)
Return: Point4d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.MakeNonRational()
Return: bool
Modifiers: public
Summary: Make bezier non-rational

Method: Rhino.Geometry.BezierSurface.MakeRational()
Return: bool
Modifiers: public
Summary: Make bezier rational

Method: Rhino.Geometry.BezierSurface.PointAt(double u, double v)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a surface parameter.
Parameter: u (double)
Parameter Summary: evaluation parameters.
Parameter: v (double)
Parameter Summary: evaluation parameters.

Method: Rhino.Geometry.BezierSurface.Reverse(int direction)
Return: BezierSurface
Modifiers: public
Summary: Reverses parameterization Domain changes from [a,b] to [-b,-a]
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.BezierSurface.Split(int direction, double t, out BezierSurface left, out BezierSurface right)
Return: bool
Modifiers: public
Summary: Divides the Bezier surface at the specified parameter.
Parameter: direction (int)
Parameter Summary: 0 is split along u and 1 is split along v
Parameter: t (double)
Parameter Summary: parameter must satisfy 0 < t < 1
Parameter: left (BezierSurface)
Parameter Summary:
Parameter: right (BezierSurface)
Parameter Summary:

Method: Rhino.Geometry.BezierSurface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface representation of this surface.

Method: Rhino.Geometry.BezierSurface.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transforms the surface
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to geometry.

Method: Rhino.Geometry.BezierSurface.Transpose()
Return: BezierSurface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Class: Rhino.Geometry.Brep
Summary: Boundary Representation. A surface or polysurface along with trim curve information.

Constructor: Rhino.Geometry.Brep.Brep()
Summary: Initializes a new empty brep

Constructor: Rhino.Geometry.Brep.Brep(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Brep.Curves2D
Return: BrepCurveList
Modifiers: public
Summary: Parameter space trimming curves (used by trims)
Accessors: get

Property: Rhino.Geometry.Brep.Curves3D
Return: BrepCurveList
Modifiers: public
Summary: Pointers to 3d curves (used by edges)
Accessors: get

Property: Rhino.Geometry.Brep.Edges
Return: BrepEdgeList
Modifiers: public
Summary: Gets the brep edges list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.Faces
Return: BrepFaceList
Modifiers: public
Summary: Gets the brep faces list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.HasRegionTopology
Return: bool
Modifiers: public
Summary: Returns True if the Brep has region topology information, False otherwise.
Accessors: get

Property: Rhino.Geometry.Brep.IsManifold
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the Brep is manifold. Non-Manifold breps have at least one edge that is shared among three or more faces.
Accessors: get

Property: Rhino.Geometry.Brep.IsSolid
Return: bool
Modifiers: public
Summary: Determines whether this brep is a solid, or a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.Brep.IsSurface
Return: bool
Modifiers: public
Summary: Returns True if the Brep has a single face and that face is geometrically the same as the underlying surface. I.e., the face has trivial trimming.
In this case, the surface is the first face surface. The flag Brep.Faces[0].OrientationIsReversed records the correspondence between the surface's natural parametric orientation and the orientation of the Brep.
trivial trimming here means that there is only one loop curve in the brep and that loop curve is the same as the underlying surface boundary. | Accessors: get

Property: Rhino.Geometry.Brep.Loops
Return: BrepLoopList
Modifiers: public
Summary: Gets the brep loop list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.SolidOrientation
Return: BrepSolidOrientation
Modifiers: public
Summary: Gets the solid orientation state of this Brep.
Accessors: get

Property: Rhino.Geometry.Brep.Surfaces
Return: BrepSurfaceList
Modifiers: public
Summary: Parametric surfaces used by faces
Accessors: get

Property: Rhino.Geometry.Brep.Trims
Return: BrepTrimList
Modifiers: public
Summary: Gets the brep trims list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.Vertices
Return: BrepVertexList
Modifiers: public
Summary: Gets the brep vertices list accessor.
Accessors: get

Method: Rhino.Geometry.Brep.ChangeSeam(BrepFace face, int direction, double parameter, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Change the seam of a closed trimmed surface.
Parameter: face (BrepFace)
Parameter Summary: A Brep face with a closed underlying surface.
Parameter: direction (int)
Parameter Summary: The parameter direction (0 = U, 1 = V). The face's underlying surface must be closed in this direction.
Parameter: parameter (double)
Parameter Summary: The parameter at which to place the seam.
Parameter: tolerance (double)
Parameter Summary: Tolerance used to cut up surface.

Method: Rhino.Geometry.Brep.CopyTrimCurves(BrepFace trimSource, Surface surfaceSource, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Copy all trims from a Brep face onto a surface.
Parameter: trimSource (BrepFace)
Parameter Summary: Brep face which defines the trimming curves.
Parameter: surfaceSource (Surface)
Parameter Summary: The surface to trim.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for rebuilding 3D trim curves.

Method: Rhino.Geometry.Brep.CreateBaseballSphere(Point3d center, double radius, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Creates a brep representation of the sphere with two similar trimmed NURBS surfaces, and no singularities.
Parameter: center (Point3d)
Parameter Summary: The center of the sphere.
Parameter: radius (double)
Parameter Summary: The radius of the sphere.
Parameter: tolerance (double)
Parameter Summary: Used in computing 2d trimming curves. If >= 0.0, then the max of ON_0.0001 * radius and RhinoMath.ZeroTolerance will be used.

Method: Rhino.Geometry.Brep.CreateBlendShape(BrepFace face0, BrepEdge edge0, double t0, bool rev0, BlendContinuity continuity0, BrepFace face1, BrepEdge edge1, double t1, bool rev1, BlendContinuity continuity1)
Return: Curve
Modifiers: public, static
Summary: Makes a curve blend between points on two surface edges. The blend will be tangent to the surfaces and perpendicular to the edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to blend from.
Parameter: edge0 (BrepEdge)
Parameter Summary: First edge to blend from.
Parameter: t0 (double)
Parameter Summary: Location on first edge for first end of blend curve.
Parameter: rev0 (bool)
Parameter Summary: If false, edge0 will be used in its natural direction. If true, edge0 will be used in the reversed direction.
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to blend from.
Parameter: edge1 (BrepEdge)
Parameter Summary: Second edge to blend from.
Parameter: t1 (double)
Parameter Summary: Location on second edge for second end of blend curve.
Parameter: rev1 (bool)
Parameter Summary: If false, edge1 will be used in its natural direction. If true, edge1 will be used in the reversed direction.
Parameter: continuity1 (BlendContinuity)
Parameter Summary: >Continuity for the blend at the end.

Method: Rhino.Geometry.Brep.CreateBlendSurface(BrepFace face0, BrepEdge edge0, Interval domain0, bool rev0, BlendContinuity continuity0, BrepFace face1, BrepEdge edge1, Interval domain1, bool rev1, BlendContinuity continuity1)
Return: Brep[]
Modifiers: public, static
Summary: Makes a surface blend between two surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to blend from.
Parameter: edge0 (BrepEdge)
Parameter Summary: First edge to blend from.
Parameter: domain0 (Interval)
Parameter Summary: The domain of edge0 to use.
Parameter: rev0 (bool)
Parameter Summary: If false, edge0 will be used in its natural direction. If true, edge0 will be used in the reversed direction.
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to blend from.
Parameter: edge1 (BrepEdge)
Parameter Summary: Second edge to blend from.
Parameter: domain1 (Interval)
Parameter Summary: The domain of edge1 to use.
Parameter: rev1 (bool)
Parameter Summary: If false, edge1 will be used in its natural direction. If true, edge1 will be used in the reversed direction.
Parameter: continuity1 (BlendContinuity)
Parameter Summary: Continuity for the blend at the end.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(Brep firstBrep, Brep secondBrep, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean difference.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean difference.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean difference.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean difference.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps (the set to subtract from).
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps (the set to subtract).
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps (the set to subtract from).
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps (the set to subtract).
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.

Method: Rhino.Geometry.Brep.CreateBooleanDifferenceWithIndexMap(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly, out int indexMap)
Return: Brep[]
Modifiers: public, static
Summary: Compute the solid difference between two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: The set to be differenced from.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: The set to difference with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for the boolean operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.
Parameter: indexMap (int)
Parameter Summary: results[i] is the result if subtracting something from firstSet[indexMap[i]].

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(Brep firstBrep, Brep secondBrep, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean intersection.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean intersection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean intersection.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean intersection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreateBooleanSplit(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits shared areas of Breps and creates separate Breps from the shared and unshared parts.
Parameter: firstBrep (Brep)
Parameter Summary: The Brep to split.
Parameter: secondBrep (Brep)
Parameter Summary: The cutting Brep.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for splitting operation. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateBooleanSplit(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits shared areas of Breps and creates separate Breps from the shared and unshared parts.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: The Breps to split.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: The cutting Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for splitting operation. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance, bool manifoldOnly, out Point3d[] nakedEdgePoints, out Point3d[] badIntersectionPoints, out Point3d[] nonManifoldEdgePoints)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.
Parameter: nakedEdgePoints (Point3d[])
Parameter Summary: If Boolean failed because the intersection hit a naked edge, a point will be added where the intersection hits the edge.
Parameter: badIntersectionPoints (Point3d[])
Parameter Summary: If Boolean failed because an intersection ends on the interior of both surfaces, a point is added.This happens when the surface intersector fails.
Parameter: nonManifoldEdgePoints (Point3d[])
Parameter Summary: If Boolean failed because the intersection hit a non-manifold edge, a point will be added where the intersection hits the edge.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreateChamferSurface(BrepFace face0, Point2d uv0, double radius0, BrepFace face1, Point2d uv1, double radius1, bool trim, bool extend, double tolerance, out Brep[] outBreps0, out Brep[] outBreps1)
Return: Brep[]
Modifiers: public, static
Summary: Creates a ruled surface as a bevel between two input surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to chamfer from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after chamfering.
Parameter: radius0 (double)
Parameter Summary: The distance from the intersection of face0 to the edge of the chamfer.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to chamfer from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after chamfering.
Parameter: radius1 (double)
Parameter Summary: The distance from the intersection of face1 to the edge of the chamfer.
Parameter: trim (bool)
Parameter Summary: If true, the input faces will be trimmed, if false, the input faces will be split.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the chamfer surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: outBreps0 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face0.
Parameter: outBreps1 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face1.

Method: Rhino.Geometry.Brep.CreateChamferSurface(BrepFace face0, Point2d uv0, double radius0, BrepFace face1, Point2d uv1, double radius1, bool extend, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a ruled surface as a bevel between two input surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to chamfer from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after chamfering.
Parameter: radius0 (double)
Parameter Summary: The distance from the intersection of face0 to the edge of the chamfer.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to chamfer from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after chamfering.
Parameter: radius1 (double)
Parameter Summary: The distance from the intersection of face1 to the edge of the chamfer.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the chamfer surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateContourCurves(Brep brepToContour, Plane sectionPlane)
Return: Curve[]
Modifiers: public, static
Summary: Constructs the contour curves for a brep, using a slicing plane.
Parameter: brepToContour (Brep)
Parameter Summary: A brep or polysurface.
Parameter: sectionPlane (Plane)
Parameter Summary: A plane.

Method: Rhino.Geometry.Brep.CreateContourCurves(Brep brepToContour, Point3d contourStart, Point3d contourEnd, double interval)
Return: Curve[]
Modifiers: public, static
Summary: Constructs the contour curves for a brep at a specified interval.
Parameter: brepToContour (Brep)
Parameter Summary: A brep or polysurface.
Parameter: contourStart (Point3d)
Parameter Summary: A point to start.
Parameter: contourEnd (Point3d)
Parameter Summary: A point to use as the end.
Parameter: interval (double)
Parameter Summary: The interaxial offset in world units.

Method: Rhino.Geometry.Brep.CreateCurvatureAnalysisMesh(Brep brep, Rhino.ApplicationSettings.CurvatureAnalysisSettingsState state)
Return: Mesh[]
Modifiers: public, static
Summary: Create an array of analysis meshes for the brep using the specified settings. Meshes aren't set on the brep.
Parameter: brep (Brep)
Parameter Summary:
Parameter: state (Rhino.ApplicationSettings.CurvatureAnalysisSettingsState)
Parameter Summary: CurvatureAnalysisSettingsState

Method: Rhino.Geometry.Brep.CreateDevelopableLoft(Curve crv0, Curve crv1, bool reverse0, bool reverse1, int density)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single developable surface between two curves.
Parameter: crv0 (Curve)
Parameter Summary: The first rail curve.
Parameter: crv1 (Curve)
Parameter Summary: The second rail curve.
Parameter: reverse0 (bool)
Parameter Summary: Reverse the first rail curve.
Parameter: reverse1 (bool)
Parameter Summary: Reverse the second rail curve
Parameter: density (int)
Parameter Summary: The number of rulings across the surface.

Method: Rhino.Geometry.Brep.CreateDevelopableLoft(NurbsCurve rail0, NurbsCurve rail1, IEnumerable<Point2d> fixedRulings)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single developable surface between two curves.
Parameter: rail0 (NurbsCurve)
Parameter Summary: The first rail curve.
Parameter: rail1 (NurbsCurve)
Parameter Summary: The second rail curve.
Parameter: fixedRulings (IEnumerable<Point2d>)
Parameter Summary: Rulings define lines across the surface that define the straight sections on the developable surface, where rulings[i].X = parameter on first rail curve, and rulings[i].Y = parameter on second rail curve. Note, rulings will be automatically adjusted to minimum twist.

Method: Rhino.Geometry.Brep.CreateEdgeSurface(IEnumerable<Curve> curves)
Return: Brep
Modifiers: public, static
Summary: Constructs a coons patch from 2, 3, or 4 curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list, an array or any enumerable set of curves.

Method: Rhino.Geometry.Brep.CreateFilletEdges(Brep brep, IEnumerable<int> edgeIndices, IEnumerable<double> startRadii, IEnumerable<double> endRadii, BlendType blendType, RailType railType, bool setbackFillets, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: startRadii (IEnumerable<double>)
Parameter Summary: An array of starting fillet, chamfer, or blend radaii, one for each edge index.
Parameter: endRadii (IEnumerable<double>)
Parameter Summary: An array of ending fillet, chamfer, or blend radaii, one for each edge index.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: setbackFillets (bool)
Parameter Summary: UJse setback fillets (only used with blendType= <b>BlendType.Blend</b> )
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance to be used to perform calculations [radians].

Method: Rhino.Geometry.Brep.CreateFilletEdges(Brep brep, IEnumerable<int> edgeIndices, IEnumerable<double> startRadii, IEnumerable<double> endRadii, BlendType blendType, RailType railType, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: startRadii (IEnumerable<double>)
Parameter Summary: An array of starting fillet, chamfer, or blend radaii, one for each edge index.
Parameter: endRadii (IEnumerable<double>)
Parameter Summary: An array of ending fillet, chamfer, or blend radaii, one for each edge index.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.

Method: Rhino.Geometry.Brep.CreateFilletEdgesVariableRadius(Brep brep, IEnumerable<int> edgeIndices, IDictionary<int, IList<BrepEdgeFilletDistance>> edgeDistances, BlendType blendType, RailType railType, bool setbackFillets, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: edgeDistances (IDictionary<int, IList<BrepEdgeFilletDistance>>)
Parameter Summary: A dictionary with key the edge index on the input brep, and value a list of <b>BrepEdgeFilletDistance</b> items to apply.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: setbackFillets (bool)
Parameter Summary: UJse setback fillets (only used with blendType= <b>BlendType.Blend</b> )
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance to be used to perform calculations [radians].

Method: Rhino.Geometry.Brep.CreateFilletSurface(BrepFace face0, Point2d uv0, BrepFace face1, Point2d uv1, double radius, bool trim, bool extend, double tolerance, out Brep[] outBreps0, out Brep[] outBreps1)
Return: Brep[]
Modifiers: public, static
Summary: Creates a constant-radius round surface between two surfaces.
Parameter: face0 (BrepFace)
Parameter Summary: First face to fillet from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after filleting.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to fillet from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after filleting.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: trim (bool)
Parameter Summary: If true, the input faces will be trimmed, if false, the input faces will be split.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: outBreps0 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face0.
Parameter: outBreps1 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face1.

Method: Rhino.Geometry.Brep.CreateFilletSurface(BrepFace face0, Point2d uv0, BrepFace face1, Point2d uv1, double radius, bool extend, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a constant-radius round surface between two surfaces.
Parameter: face0 (BrepFace)
Parameter Summary: First face to fillet from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after filleting.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to fillet from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after filleting.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateFromBox(BoundingBox box)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep that matches a bounding box.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for creation.

Method: Rhino.Geometry.Brep.CreateFromBox(Box box)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep that matches an aligned box.
Parameter: box (Box)
Parameter Summary: Box to match.

Method: Rhino.Geometry.Brep.CreateFromBox(IEnumerable<Point3d> corners)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep from 8 corner points.
Parameter: corners (IEnumerable<Point3d>)
Parameter Summary: 8 points defining the box corners arranged as the vN labels indicate.

Method: Rhino.Geometry.Brep.CreateFromCone(Cone cone, bool capBottom)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep representation of the cone with a single face for the cone, an edge along the cone seam, and vertices at the base and apex ends of this seam edge. The optional cap is a single face with one circular edge starting and ending at the base vertex.
Parameter: cone (Cone)
Parameter Summary: A cone value.
Parameter: capBottom (bool)
Parameter Summary: if True the base of the cone should be capped.

Method: Rhino.Geometry.Brep.CreateFromCornerPoints(Point3d corner1, Point3d corner2, Point3d corner3, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Makes a Brep with one face from three corner points.
Parameter: corner1 (Point3d)
Parameter Summary: A first corner.
Parameter: corner2 (Point3d)
Parameter Summary: A second corner.
Parameter: corner3 (Point3d)
Parameter Summary: A third corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length allowed before collapsing the side into a singularity.

Method: Rhino.Geometry.Brep.CreateFromCornerPoints(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Makes a Brep with one face from four corner points.
Parameter: corner1 (Point3d)
Parameter Summary: A first corner.
Parameter: corner2 (Point3d)
Parameter Summary: A second corner.
Parameter: corner3 (Point3d)
Parameter Summary: A third corner.
Parameter: corner4 (Point3d)
Parameter Summary: A fourth corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length allowed before collapsing the side into a singularity.

Method: Rhino.Geometry.Brep.CreateFromCylinder(Cylinder cylinder, bool capBottom, bool capTop)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: cylinder.IsFinite() must be true.
Parameter: capBottom (bool)
Parameter Summary: if True end at cylinder.m_height[0] should be capped.
Parameter: capTop (bool)
Parameter Summary: if True end at cylinder.m_height[1] should be capped.

Method: Rhino.Geometry.Brep.CreateFromJoinedEdges(Brep brep0, int edgeIndex0, Brep brep1, int edgeIndex1, double joinTolerance)
Return: Brep
Modifiers: public, static
Summary: Joins two naked edges, or edges that are coincident or close together, from two Breps.
Parameter: brep0 (Brep)
Parameter Summary: The first Brep.
Parameter: edgeIndex0 (int)
Parameter Summary: The edge index on the first Brep.
Parameter: brep1 (Brep)
Parameter Summary: The second Brep.
Parameter: edgeIndex1 (int)
Parameter Summary: The edge index on the second Brep.
Parameter: joinTolerance (double)
Parameter Summary: The join tolerance.

Method: Rhino.Geometry.Brep.CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, bool StartTangent, bool EndTangent, BrepTrim StartTrim, BrepTrim EndTrim, LoftType loftType, bool closed)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves, optionally matching start and end tangents of surfaces when first and/or last loft curves are surface edges
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point. "start" and "StartTangent" cannot both be true.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point. "end and "EndTangent" cannot both be true.
Parameter: StartTangent (bool)
Parameter Summary: If StartTangent is True and the first loft curve is a surface edge, the loft will match the tangent of the surface behind that edge.
Parameter: EndTangent (bool)
Parameter Summary: If EndTangent is True and the first loft curve is a surface edge, the loft will match the tangent of the surface behind that edge.
Parameter: StartTrim (BrepTrim)
Parameter Summary: BrepTrim from the surface edge where start tangent is to be matched
Parameter: EndTrim (BrepTrim)
Parameter Summary: BrepTrim from the surface edge where end tangent is to be matched
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.

Method: Rhino.Geometry.Brep.CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.

Method: Rhino.Geometry.Brep.CreateFromLoftRebuild(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed, int rebuildPointCount)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by rebuilding to a specified number of control points.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.
Parameter: rebuildPointCount (int)
Parameter Summary: A number of points to use while rebuilding the curves. 0 leaves turns this parameter off.

Method: Rhino.Geometry.Brep.CreateFromLoftRefit(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by refitting to a specified tolerance.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.
Parameter: refitTolerance (double)
Parameter Summary: A distance to use in refitting, or 0 if you want to turn this parameter off.

Method: Rhino.Geometry.Brep.CreateFromMesh(Mesh mesh, bool trimmedTriangles)
Return: Brep
Modifiers: public, static
Summary: Create a brep representation of a mesh
Parameter: mesh (Mesh)
Parameter Summary:
Parameter: trimmedTriangles (bool)
Parameter Summary: if true, triangles in the mesh will be represented by trimmed planes in the brep. If false, triangles in the mesh will be represented by untrimmed singular bilinear NURBS surfaces in the brep.

Method: Rhino.Geometry.Brep.CreateFromOffsetFace(BrepFace face, double offsetDistance, double offsetTolerance, bool bothSides, bool createSolid)
Return: Brep
Modifiers: public, static
Summary: Offsets a face including trim information to create a new brep.
Parameter: face (BrepFace)
Parameter Summary: the face to offset.
Parameter: offsetDistance (double)
Parameter Summary: An offset distance.
Parameter: offsetTolerance (double)
Parameter Summary: Use 0.0 to make a loose offset. Otherwise, the document's absolute tolerance is usually sufficient.
Parameter: bothSides (bool)
Parameter Summary: When true, offset to both sides of the input face.
Parameter: createSolid (bool)
Parameter Summary: When true, make a solid object.

Method: Rhino.Geometry.Brep.CreateFromRevSurface(RevSurface surface, bool capStart, bool capEnd)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep form of a surface of revolution.
Parameter: surface (RevSurface)
Parameter Summary: The surface of revolution.
Parameter: capStart (bool)
Parameter Summary: if true, the start of the revolute is not on the axis of revolution, and the surface of revolution is closed, then a circular cap will be added to close of the hole at the start of the revolute.
Parameter: capEnd (bool)
Parameter Summary: if true, the end of the revolute is not on the axis of revolution, and the surface of revolution is closed, then a circular cap will be added to close of the hole at the end of the revolute.

Method: Rhino.Geometry.Brep.CreateFromSphere(Sphere sphere)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.

Method: Rhino.Geometry.Brep.CreateFromSurface(Surface surface)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep from a surface. The resulting Brep has an outer boundary made from four trims. The trims are ordered so that they run along the south, east, north, and then west side of the surface's parameter space.
Parameter: surface (Surface)
Parameter Summary: A surface to convert.

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a profile curve that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: General 2 rail sweep. If you are not producing the sweep results that you are after, then use the SweepTwoRail class with options to generate the swept geometry.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: General 2 rail sweep. If you are not producing the sweep results that you are after, then use the SweepTwoRail class with options to generate the swept geometry.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, Point3d start, Point3d end, bool closed, double tolerance, SweepRebuild rebuild, int rebuildPointCount, double refitTolerance, bool preserveHeight, bool autoAdjust)
Return: Brep[]
Modifiers: public, static
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines the surface edges.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: start (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.
Parameter: rebuild (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0
Parameter: preserveHeight (bool)
Parameter Summary: Removes the association between the height scaling from the width scaling
Parameter: autoAdjust (bool)
Parameter Summary: Set to True to have shape curves adjusted, sorted, and matched automatically. This will produce results comparable to Rhino's Sweep2 command. Set to False to not have shape curves adjusted, sorted, and matched automatically.

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, Point3d start, Point3d end, bool closed, double tolerance, SweepRebuild rebuild, int rebuildPointCount, double refitTolerance, bool preserveHeight)
Return: Brep[]
Modifiers: public, static
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines the surface edges.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: start (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.
Parameter: rebuild (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0
Parameter: preserveHeight (bool)
Parameter Summary: Removes the association between the height scaling from the width scaling

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through profile curves that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, IEnumerable<Curve> shapes, Point3d startPoint, Point3d endPoint, SweepFrame frameType, Vector3d roadlikeNormal, bool closed, SweepBlend blendType, SweepMiter miterType, double tolerance, SweepRebuild rebuildType, int rebuildPointCount, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: startPoint (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: endPoint (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: frameType (SweepFrame)
Parameter Summary: The frame type.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: The roadlike normal directoion. Use Vector3d.Unset if the frame type is not set to roadlike.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: blendType (SweepBlend)
Parameter Summary: The shape blending type.
Parameter: miterType (SweepMiter)
Parameter Summary: The mitering type.
Parameter: tolerance (double)
Parameter Summary:
Parameter: rebuildType (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0

Method: Rhino.Geometry.Brep.CreateFromSweepInParts(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, IEnumerable<Point2d> rail_params, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Makes a 2 rail sweep. Like CreateFromSweep but the result is split where parameterization along a rail changes abruptly.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: rail_params (IEnumerable<Point2d>)
Parameter Summary: Shape parameters
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a profile curve that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, IEnumerable<Curve> shapes, Point3d startPoint, Point3d endPoint, SweepFrame frameType, Vector3d roadlikeNormal, bool closed, SweepBlend blendType, SweepMiter miterType, double tolerance, SweepRebuild rebuildType, int rebuildPointCount, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: startPoint (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: endPoint (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: frameType (SweepFrame)
Parameter Summary: The frame type.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: The roadlike normal directoion. Use Vector3d.Unset if the frame type is not set to roadlike.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: blendType (SweepBlend)
Parameter Summary: The shape blending type.
Parameter: miterType (SweepMiter)
Parameter Summary: The mitering type.
Parameter: tolerance (double)
Parameter Summary:
Parameter: rebuildType (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrude(Curve curveToExtrude, double distance, Vector3d direction, Point3d basePoint, double draftAngleRadians, ExtrudeCornerType cornerType, double tolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Extrude a curve to a taper making a brep (potentially more than 1)
Parameter: curveToExtrude (Curve)
Parameter Summary: the curve to extrude
Parameter: distance (double)
Parameter Summary: the distance to extrude
Parameter: direction (Vector3d)
Parameter Summary: the direction of the extrusion
Parameter: basePoint (Point3d)
Parameter Summary: the base point of the extrusion
Parameter: draftAngleRadians (double)
Parameter Summary: angle of the extrusion
Parameter: cornerType (ExtrudeCornerType)
Parameter Summary:
Parameter: tolerance (double)
Parameter Summary: tolerance to use for the extrusion
Parameter: angleToleranceRadians (double)
Parameter Summary: angle tolerance to use for the extrusion

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrude(Curve curveToExtrude, double distance, Vector3d direction, Point3d basePoint, double draftAngleRadians, ExtrudeCornerType cornerType)
Return: Brep[]
Modifiers: public, static
Summary: Extrude a curve to a taper making a brep (potentially more than 1)
Parameter: curveToExtrude (Curve)
Parameter Summary: the curve to extrude
Parameter: distance (double)
Parameter Summary: the distance to extrude
Parameter: direction (Vector3d)
Parameter Summary: the direction of the extrusion
Parameter: basePoint (Point3d)
Parameter Summary: the base point of the extrusion
Parameter: draftAngleRadians (double)
Parameter Summary: angle of the extrusion
Parameter: cornerType (ExtrudeCornerType)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrudeWithRef(Curve curve, Vector3d direction, double distance, double draftAngle, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates one or more Breps by extruding a curve a distance along an axis with draft angle.
Parameter: curve (Curve)
Parameter Summary: The curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: The extrusion direction.
Parameter: distance (double)
Parameter Summary: The extrusion distance.
Parameter: draftAngle (double)
Parameter Summary: The extrusion draft angle in radians.
Parameter: plane (Plane)
Parameter Summary: The end of the extrusion will be parallel to this plane, and "distance" from the plane's origin. The plane's origin is generally be a point on the curve. For planar curves, a natural choice for the plane's normal direction will be the normal direction of the curve's plane. In any case, plane.Normal = direction may make sense.
Parameter: tolerance (double)
Parameter Summary: The intersecting and trimming tolerance.

Method: Rhino.Geometry.Brep.CreateFromTorus(Torus torus)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a torus.
Parameter: torus (Torus)
Parameter Summary: The torus.

Method: Rhino.Geometry.Brep.CreateOffsetBrep(Brep brep, double distance, bool solid, bool extend, bool shrink, double tolerance, out Brep[] outBlends, out Brep[] outWalls)
Return: Brep[]
Modifiers: public, static
Summary: Offsets a Brep.
Parameter: brep (Brep)
Parameter Summary: The Brep to offset.
Parameter: distance (double)
Parameter Summary: The distance to offset. This is a signed distance value with respect to face normals and flipped faces.
Parameter: solid (bool)
Parameter Summary: If true, then the function makes a closed solid from the input and offset surfaces by lofting a ruled surface between all of the matching edges.
Parameter: extend (bool)
Parameter Summary: If true, then the function maintains the sharp corners when the original surfaces have sharps corner. If False, then the function creates fillets at sharp corners in the original surfaces.
Parameter: shrink (bool)
Parameter Summary: If true, then the function shrinks the underlying surfaces to their face's outer boundary loop.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.
Parameter: outBlends (Brep[])
Parameter Summary: The results of the calculation.
Parameter: outWalls (Brep[])
Parameter Summary: The results of the calculation.

Method: Rhino.Geometry.Brep.CreateOffsetBrep(Brep brep, double distance, bool solid, bool extend, double tolerance, out Brep[] outBlends, out Brep[] outWalls)
Return: Brep[]
Modifiers: public, static
Summary: Offsets a Brep.
Parameter: brep (Brep)
Parameter Summary: The Brep to offset.
Parameter: distance (double)
Parameter Summary: The distance to offset. This is a signed distance value with respect to face normals and flipped faces.
Parameter: solid (bool)
Parameter Summary: If true, then the function makes a closed solid from the input and offset surfaces by lofting a ruled surface between all of the matching edges.
Parameter: extend (bool)
Parameter Summary: If true, then the function maintains the sharp corners when the original surfaces have sharps corner. If False, then the function creates fillets at sharp corners in the original surfaces.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.
Parameter: outBlends (Brep[])
Parameter Summary: The results of the calculation.
Parameter: outWalls (Brep[])
Parameter Summary: The results of the calculation.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, int uSpans, int vSpans, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch.
This is the simple version of fit that uses a plane with u x v spans. It makes a plane by fitting to the points from the input geometry to use as the starting surface. The surface has the specified u and v span count. | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A combination of <b>Curve</b> , brep trims, <b>Point</b> , <b>PointCloud</b> or <b>Mesh</b> . Curves and trims are sampled to get points. Trims are sampled for points and normals. | Parameter: uSpans (int) | Parameter Summary: The number of spans in the U direction. | Parameter: vSpans (int) | Parameter Summary: The number of spans in the V direction. | Parameter: tolerance (double) | Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, Surface startingSurface, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch.
This is the simple version of fit that uses a specified starting surface. | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: Combination of Curves, BrepTrims, Points, PointClouds or Meshes. Curves and trims are sampled to get points. Trims are sampled for points and normals. | Parameter: startingSurface (Surface) | Parameter Summary: A starting surface (can be null). | Parameter: tolerance (double) | Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, Surface startingSurface, int uSpans, int vSpans, bool trim, bool tangency, double pointSpacing, double flexibility, double surfacePull, bool fixEdges, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch using all controls
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: A combination of <b>Curve</b> , brep trims, <b>Point</b> , <b>PointCloud</b> or <b>Mesh</b> . Curves and trims are sampled to get points. Trims are sampled for points and normals.
Parameter: startingSurface (Surface)
Parameter Summary: A starting surface (can be null).
Parameter: uSpans (int)
Parameter Summary: Number of surface spans used when a plane is fit through points to start in the U direction.
Parameter: vSpans (int)
Parameter Summary: Number of surface spans used when a plane is fit through points to start in the U direction.
Parameter: trim (bool)
Parameter Summary: If true, try to find an outer loop from among the input curves and trim the result to that loop
Parameter: tangency (bool)
Parameter Summary: If true, try to find brep trims in the outer loop of curves and try to fit to the normal direction of the trim's surface at those locations.
Parameter: pointSpacing (double)
Parameter Summary: Basic distance between points sampled from input curves.
Parameter: flexibility (double)
Parameter Summary: Determines the behavior of the surface in areas where its not otherwise controlled by the input. Lower numbers make the surface behave more like a stiff material; higher, less like a stiff material. That is, each span is made to more closely match the spans adjacent to it if there is no input geometry mapping to that area of the surface when the flexibility value is low. The scale is logarithmic. Numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 make the surface flexible.
Parameter: surfacePull (double)
Parameter Summary: Tends to keep the result surface where it was before the fit in areas where there is on influence from the input geometry
Parameter: fixEdges (bool)
Parameter Summary: Array of four elements. Flags to keep the edges of a starting (untrimmed) surface in place while fitting the interior of the surface. Order of flags is left, bottom, right, top
Parameter: tolerance (double)
Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePipe(Curve rail, double radius, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: radius (double)
Parameter Summary: The radius of the pipe.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreatePipe(Curve rail, IEnumerable<double> railRadiiParameters, IEnumerable<double> radii, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: railRadiiParameters (IEnumerable<double>)
Parameter Summary: One or more normalized curve parameters where changes in radius occur. Important: curve parameters must be normalized - ranging between 0.0 and 1.0. Use Interval.NormalizedParameterAt to calculate these.
Parameter: radii (IEnumerable<double>)
Parameter Summary: One or more radii - one at each normalized curve parameter in railRadiiParameters.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Curve inputLoop, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoop (Curve)
Parameter Summary: A curve that should form the boundaries of the surfaces or polysurfaces.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Curve inputLoop)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoop (Curve)
Parameter Summary: A curve that should form the boundaries of the surfaces or polysurfaces.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(IEnumerable<Curve> inputLoops, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoops (IEnumerable<Curve>)
Parameter Summary: Curve loops that delineate the planar boundaries.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(IEnumerable<Curve> inputLoops)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoops (IEnumerable<Curve>)
Parameter Summary: Curve loops that delineate the planar boundaries.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList inputLoops, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar Breps as outlines by the loops.
Parameter: inputLoops (Rhino.Collections.CurveList)
Parameter Summary: Curve loops that delineate the planar boundaries.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList inputLoops)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar Breps as outlines by the loops.
Parameter: inputLoops (Rhino.Collections.CurveList)
Parameter Summary: Curve loops that delineate the planar boundaries.

Method: Rhino.Geometry.Brep.CreatePlanarDifference(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarDifference
Parameter: b0 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: b1 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for Difference operation.

Method: Rhino.Geometry.Brep.CreatePlanarIntersection(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarIntersection
Parameter: b0 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: b1 (Brep)
Parameter Summary: The second brep to intersect.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreatePlanarUnion(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarUnion
Parameter: b0 (Brep)
Parameter Summary: The first brep to union.
Parameter: b1 (Brep)
Parameter Summary: The first brep to union.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreatePlanarUnion(IEnumerable<Brep> breps, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarUnion
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The planar regions on which to perform the union operation.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreateQuadSphere(Sphere sphere)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a quad sphere.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.

Method: Rhino.Geometry.Brep.CreateShell(Brep brep, IEnumerable<int> facesToRemove, double distance, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a hollowed out shell from a solid Brep. Function only operates on simple, solid, manifold Breps.
Parameter: brep (Brep)
Parameter Summary: The solid Brep to shell.
Parameter: facesToRemove (IEnumerable<int>)
Parameter Summary: The indices of the Brep faces to remove. These surfaces are removed and the remainder is offset inward, using the outer parts of the removed surfaces to join the inner and outer parts.
Parameter: distance (double)
Parameter Summary: The distance, or thickness, for the shell. This is a signed distance value with respect to face normals and flipped faces.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance. When in doubt, use the document's absolute tolerance.

Method: Rhino.Geometry.Brep.CreateSolid(IEnumerable<Brep> breps, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs closed polysurfaces from surfaces and polysurfaces that bound a region in space.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The intersecting surfaces and polysurfaces to automatically trim and join into closed polysurfaces.
Parameter: tolerance (double)
Parameter Summary: The trim and join tolerance. If set to RhinoMath.UnsetValue, Rhino's global absolute tolerance is used.

Method: Rhino.Geometry.Brep.CreateThickPipe(Curve rail, double radius0, double radius1, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a double-walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: radius0 (double)
Parameter Summary: The first radius of the pipe.
Parameter: radius1 (double)
Parameter Summary: The second radius of the pipe.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreateThickPipe(Curve rail, IEnumerable<double> railRadiiParameters, IEnumerable<double> radii0, IEnumerable<double> radii1, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a double-walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: railRadiiParameters (IEnumerable<double>)
Parameter Summary: One or more normalized curve parameters where changes in radius occur. Important: curve parameters must be normalized - ranging between 0.0 and 1.0. Use Interval.NormalizedParameterAt to calculate these.
Parameter: radii0 (IEnumerable<double>)
Parameter Summary: One or more radii for the first wall - one at each normalized curve parameter in railRadiiParameters.
Parameter: radii1 (IEnumerable<double>)
Parameter Summary: One or more radii for the second wall - one at each normalized curve parameter in railRadiiParameters.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreateTrimmedPlane(Plane plane, Curve curve)
Return: Brep
Modifiers: public, static
Summary: Create a Brep trimmed plane.
Parameter: plane (Plane)
Parameter Summary: Plane that will be trimmed.
Parameter: curve (Curve)
Parameter Summary: A simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.

Method: Rhino.Geometry.Brep.CreateTrimmedPlane(Plane plane, IEnumerable<Curve> curves)
Return: Brep
Modifiers: public, static
Summary: Create a Brep trimmed plane.
Parameter: plane (Plane)
Parameter Summary: Plane that will be trimmed.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list of curves that form a simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.

Method: Rhino.Geometry.Brep.CreateTrimmedSurface(BrepFace trimSource, Surface surfaceSource, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep using the trimming information of a brep face and a surface. Surface must be roughly the same shape and in the same location as the trimming brep face.
Parameter: trimSource (BrepFace)
Parameter Summary: BrepFace which contains trimmingSource brep.
Parameter: surfaceSource (Surface)
Parameter Summary: Surface that trims of BrepFace will be applied to.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreateTrimmedSurface(BrepFace trimSource, Surface surfaceSource)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep using the trimming information of a brep face and a surface. Surface must be roughly the same shape and in the same location as the trimming brep face.
Parameter: trimSource (BrepFace)
Parameter Summary: BrepFace which contains trimmingSource brep.
Parameter: surfaceSource (Surface)
Parameter Summary: Surface that trims of BrepFace will be applied to.

Method: Rhino.Geometry.Brep.CutUpSurface(Surface surface, IEnumerable<Curve> curves, bool flip, double fitTolerance, double keepTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits, or cuts up, a surface. Designed to split the underlying surface of a Brep face with edge curves.
Parameter: surface (Surface)
Parameter Summary: The surface to cut up.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The edge curves with consistent orientation. The curves should lie on the surface.
Parameter: flip (bool)
Parameter Summary: If true, the input curves are oriented clockwise.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance.
Parameter: keepTolerance (double)
Parameter Summary: Used to decide which face to keep. For best results, should be at least 2 * fitTolerance.

Method: Rhino.Geometry.Brep.CutUpSurface(Surface surface, IEnumerable<Curve> curves, bool useEdgeCurves, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Takes a surface and a set of all 3D curves that define a single trimmed surface, and splits the surface with the curves, keeping the piece that uses all of the curves.
Parameter: surface (Surface)
Parameter Summary: The surface.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves.
Parameter: useEdgeCurves (bool)
Parameter Summary: The 2D trimming curves are made by pulling back the 3D curves using the fitting tolerance. If useEdgeCurves is true, the input 3D curves will be used as the edge curves in the result. Otherwise, the edges will come from pushing up the 2D pullbacks.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.ExtendBrepFacesToConnect(BrepFace Face0, int edgeIndex0, BrepFace Face1, int edgeIndex1, double tol, double angleTol, out Brep outBrep0, out Brep outBrep1)
Return: bool
Modifiers: public, static
Summary: Extends Faces to meet and trims the faces to each other. If input faces intersect without extending, the selection point indicates the side to keep
Parameter: Face0 (BrepFace)
Parameter Summary: [in] first face to connect
Parameter: edgeIndex0 (int)
Parameter Summary: [in] edge to extend.
Parameter: Face1 (BrepFace)
Parameter Summary: [in] second surface
Parameter: edgeIndex1 (int)
Parameter Summary: [in] edge to extend.
Parameter: tol (double)
Parameter Summary: [in] tolerance used for intersecting faces and simplifing extension curve
Parameter: angleTol (double)
Parameter Summary: [in] angle tolerance in radians used for simplifying extendsion curve
Parameter: outBrep0 (Brep)
Parameter Summary: [out] first face extended and trimmed to connect with the second face
Parameter: outBrep1 (Brep)
Parameter Summary: [out] second face extended and trimmed to connect with the first face

Method: Rhino.Geometry.Brep.ExtendBrepFacesToConnect(BrepFace Face0, Point3d f0_sel_pt, BrepFace Face1, Point3d f1_sel_pt, double tol, double angleTol, out Brep outBrep0, out Brep outBrep1)
Return: bool
Modifiers: public, static
Summary: Extends Faces to meet and trims the faces to each other. If input faces intersect without extending, the selection point indicates the side to keep
Parameter: Face0 (BrepFace)
Parameter Summary: [in] first face to connect
Parameter: f0_sel_pt (Point3d)
Parameter Summary: selection point on first face near the edge to extend.
Parameter: Face1 (BrepFace)
Parameter Summary: [in] second surface
Parameter: f1_sel_pt (Point3d)
Parameter Summary: selection point on second face near the edge to extend.
Parameter: tol (double)
Parameter Summary: [in] tolerance used for intersecting faces and simplifing extension curve
Parameter: angleTol (double)
Parameter Summary: [in] angle tolerance in radians used for simplifying extendsion curve
Parameter: outBrep0 (Brep)
Parameter Summary: [out] first face extended and trimmed to connect with the second face
Parameter: outBrep1 (Brep)
Parameter Summary: [out] second face extended and trimmed to connect with the first face

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance, double angleTolerance, out List<int[]> indexMap)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges. When in doubt, use the document's model absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, used for merging edges. When in doubt, use the document's model angle tolerance.
Parameter: indexMap (List<int[]>)
Parameter Summary: List of integer arrays, one for each joined result, containing all input Brep indices that went into making each result. Note, this can be null.

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges. When in doubt, use the document's model absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, used for merging edges. When in doubt, use the document's model angle tolerance.

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges.

Method: Rhino.Geometry.Brep.MergeBreps(IEnumerable<Brep> brepsToMerge, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Combines two or more breps into one. A merge is like a boolean union that keeps the inside pieces. This function creates non-manifold Breps which in general are unusual in Rhino. You may want to consider using JoinBreps or CreateBooleanUnion functions instead.
Parameter: brepsToMerge (IEnumerable<Brep>)
Parameter Summary: must contain more than one Brep.
Parameter: tolerance (double)
Parameter Summary: the tolerance to use when merging.

Method: Rhino.Geometry.Brep.MergeSurfaces(Brep brep0, Brep brep1, double tolerance, double angleToleranceRadians, Point2d point0, Point2d point1, double roundness, bool smooth)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges. Both surfaces must be untrimmed and share an edge.
Parameter: brep0 (Brep)
Parameter Summary: The first single-face Brep to merge.
Parameter: brep1 (Brep)
Parameter Summary: The second single-face Brep to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.
Parameter: point0 (Point2d)
Parameter Summary: 2D pick point on the first single-face Brep. The value can be unset.
Parameter: point1 (Point2d)
Parameter Summary: 2D pick point on the second single-face Brep. The value can be unset.
Parameter: roundness (double)
Parameter Summary: Defines the roundness of the merge. Acceptable values are between 0.0 (sharp) and 1.0 (smooth).
Parameter: smooth (bool)
Parameter Summary: The surface will be smooth. This makes the surface behave better for control point editing, but may alter the shape of both surfaces.

Method: Rhino.Geometry.Brep.MergeSurfaces(Brep brep0, Brep brep1, double tolerance, double angleToleranceRadians)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges. Both surfaces must be untrimmed and share an edge.
Parameter: brep0 (Brep)
Parameter Summary: The first single-face Brep to merge.
Parameter: brep1 (Brep)
Parameter Summary: The second single-face Brep to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.

Method: Rhino.Geometry.Brep.MergeSurfaces(Surface surface0, Surface surface1, double tolerance, double angleToleranceRadians)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges.
Parameter: surface0 (Surface)
Parameter Summary: The first surface to merge.
Parameter: surface1 (Surface)
Parameter Summary: The second surface to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.

Method: Rhino.Geometry.Brep.TryConvertBrep(GeometryBase geometry)
Return: Brep
Modifiers: public, static
Summary: Attempts to convert a generic Geometry object into a Brep.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry to convert, not all types of GeometryBase can be represented by BReps.

Method: Rhino.Geometry.Brep.AddEdgeCurve(Curve curve)
Return: int
Modifiers: public
Summary: Add a 3d curve used by the brep edges

Method: Rhino.Geometry.Brep.AddSurface(Surface surface)
Return: int
Modifiers: public
Summary: Adds a 3D surface used by BrepFace.
Parameter: surface (Surface)
Parameter Summary: A copy of the surface is added to this brep.

Method: Rhino.Geometry.Brep.AddTrimCurve(Curve curve)
Return: int
Modifiers: public
Summary: Add a 2d curve used by the brep trims

Method: Rhino.Geometry.Brep.Append(Brep other)
Return: void
Modifiers: public
Summary: Appends a copy of another brep to this and updates indices of appended brep parts. Duplicates are not removed

Method: Rhino.Geometry.Brep.CapPlanarHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Returns a new Brep that is equivalent to this Brep with all planar holes capped.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for capping.

Method: Rhino.Geometry.Brep.ClosestPoint(Point3d testPoint, out Point3d closestPoint, out ComponentIndex ci, out double s, out double t, double maximumDistance, out Vector3d normal)
Return: bool
Modifiers: public
Summary: Finds a point on the Brep that is closest to testPoint. The method searches all Brep faces looking for the one closest to testPoint. When found, if the closest point falls on the inactive region of the face, then the method finds the face's edge that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: Base point to project to surface.
Parameter: closestPoint (Point3d)
Parameter Summary: Location of the closest Brep point.
Parameter: ci (ComponentIndex)
Parameter Summary: Component index of the Brep component that contains the closest point. Possible component index types are ComponentIndexType.BrepEdge and ComponentIndexType.BrepFace.
Parameter: s (double)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepEdge, then s is the parameter of the closest edge point.
Parameter: t (double)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepFace, then (s,t) is the parameter of the closest face point.
Parameter: maximumDistance (double)
Parameter Summary: If maximumDistance > 0, then only points whose distance is <= maximumDistance will be returned. Using a positive value of maximumDistance can substantially speed up the search.
Parameter: normal (Vector3d)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepEdge, then this is the tangent to the edge at s. If ci.ComponentIndexType == ComponentIndexType.BrepFace, then this is the normal to the face at (s,t).

Method: Rhino.Geometry.Brep.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Finds a point on the brep that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: Base point to project to brep.

Method: Rhino.Geometry.Brep.Compact()
Return: void
Modifiers: public
Summary: Deletes any unreferenced objects from arrays, re-indexes as needed, and shrinks arrays to minimum required size. Uses CUllUnused* members to delete any unreferenced objects from arrays.

Method: Rhino.Geometry.Brep.CullUnused2dCurves()
Return: bool
Modifiers: public
Summary: Culls 3d curves not referenced by an edge.

Method: Rhino.Geometry.Brep.CullUnused3dCurves()
Return: bool
Modifiers: public
Summary: Culls 2d curves not referenced by a trim.

Method: Rhino.Geometry.Brep.CullUnusedEdges()
Return: bool
Modifiers: public
Summary: Culls edges with m_edge_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedFaces()
Return: bool
Modifiers: public
Summary: Culls faces with m_face_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedLoops()
Return: bool
Modifiers: public
Summary: Culls loops with m_loop_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedSurfaces()
Return: bool
Modifiers: public
Summary: Culls surfaces not referenced by a face.

Method: Rhino.Geometry.Brep.CullUnusedTrims()
Return: bool
Modifiers: public
Summary: Culls trims with m_trim_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedVertices()
Return: bool
Modifiers: public
Summary: Culls vertices with m_vertex_index == -1.

Method: Rhino.Geometry.Brep.DestroyRegionTopology()
Return: void
Modifiers: public
Summary: Destroys a Brep's region topology information.

Method: Rhino.Geometry.Brep.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Copies this brep.

Method: Rhino.Geometry.Brep.DuplicateBrep()
Return: Brep
Modifiers: public
Summary: Same as <b>Duplicate()</b> , but already performs a cast to a brep.
This cast always succeeds.

Method: Rhino.Geometry.Brep.DuplicateEdgeCurves()
Return: Curve[]
Modifiers: public
Summary: Duplicate all the edges of this Brep.

Method: Rhino.Geometry.Brep.DuplicateEdgeCurves(bool nakedOnly)
Return: Curve[]
Modifiers: public
Summary: Duplicate edges of this Brep.
Parameter: nakedOnly (bool)
Parameter Summary: If true, then only the "naked" edges are duplicated. If false, then all edges are duplicated.

Method: Rhino.Geometry.Brep.DuplicateNakedEdgeCurves(bool nakedOuter, bool nakedInner)
Return: Curve[]
Modifiers: public
Summary: Duplicate naked edges of this Brep.
Parameter: nakedOuter (bool)
Parameter Summary: Return naked edges that are part of an outer loop.
Parameter: nakedInner (bool)
Parameter Summary: Return naked edges that are part of an inner loop.

Method: Rhino.Geometry.Brep.DuplicateSubBrep(IEnumerable<int> faceIndices)
Return: Brep
Modifiers: public
Summary: Copy a subset of this Brep into another Brep.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: array of face indices in this brep to copy. (If any values in faceIndices are out of range or if faceIndices contains duplicates, this function will return null.)

Method: Rhino.Geometry.Brep.DuplicateVertices()
Return: Point3d[]
Modifiers: public
Summary: Duplicate all the corner vertices of this Brep.

Method: Rhino.Geometry.Brep.FindCoincidentBrepComponents(Point3d point, double tolerance, out int faces, out int edges, out int vertices)
Return: void
Modifiers: public
Summary: Find the indices of all brep faces, edges and vertices that are within tolerance of a test-point.
Parameter: point (Point3d)
Parameter Summary: Test point.
Parameter: tolerance (double)
Parameter Summary: Coincidence tolerance.
Parameter: faces (int)
Parameter Summary: Array of BrepFace indices.
Parameter: edges (int)
Parameter Summary: Array of BrepEdge indices.
Parameter: vertices (int)
Parameter Summary: Array of BrepVertex indices.

Method: Rhino.Geometry.Brep.Flip()
Return: void
Modifiers: public
Summary: Reverses entire brep orientation of all faces.

Method: Rhino.Geometry.Brep.GetArea()
Return: double
Modifiers: public
Summary: Compute the Area of the Brep. If you want proper Area data with moments and error information, use the AreaMassProperties class.

Method: Rhino.Geometry.Brep.GetArea(double relativeTolerance, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Compute the Area of the Brep. If you want proper Area data with moments and error information, use the AreaMassProperties class.
Parameter: relativeTolerance (double)
Parameter Summary: Relative tolerance to use for area calculation.
Parameter: absoluteTolerance (double)
Parameter Summary: Absolute tolerance to use for area calculation.

Method: Rhino.Geometry.Brep.GetConnectedComponents()
Return: Brep[]
Modifiers: public
Summary: If this Brep has two or more connected components, then duplicates of the connected components are returned.

Method: Rhino.Geometry.Brep.GetPointInside(double tolerance, out Point3d point)
Return: bool
Modifiers: public
Summary: Finds a point inside of a solid Brep.
Parameter: tolerance (double)
Parameter Summary: Used for intersecting rays and is not necessarily related to the distance from the brep to the found point. When in doubt, use the document's model absolute tolerance.
Parameter: point (Point3d)
Parameter Summary: A point inside the solid Brep.

Method: Rhino.Geometry.Brep.GetRegions()
Return: BrepRegion[]
Modifiers: public
Summary: Gets an array containing all regions in this brep.

Method: Rhino.Geometry.Brep.GetTangentConnectedComponents(double angleTolerance, bool includeMeshes)
Return: Brep[]
Modifiers: public
Summary: If this Brep has two or more components connected by tangent edges, then duplicates of the connected components are returned.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance, in radians, used to determine tangent edges.
Parameter: includeMeshes (bool)
Parameter Summary: If true, any cached meshes on this Brep are copied to the returned Breps.

Method: Rhino.Geometry.Brep.GetVolume()
Return: double
Modifiers: public
Summary: Compute the Volume of the Brep. If you want proper Volume data with moments and error information, use the VolumeMassProperties class.

Method: Rhino.Geometry.Brep.GetVolume(double relativeTolerance, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Compute the Volume of the Brep. If you want proper Volume data with moments and error information, use the VolumeMassProperties class.
Parameter: relativeTolerance (double)
Parameter Summary: Relative tolerance to use for area calculation.
Parameter: absoluteTolerance (double)
Parameter Summary: Absolute tolerance to use for area calculation.

Method: Rhino.Geometry.Brep.GetWireframe(int density)
Return: Curve[]
Modifiers: public
Summary: Constructs all the Wireframe curves for this Brep.
Parameter: density (int)
Parameter Summary: Wireframe density. Valid values range between -1 and 99.

Method: Rhino.Geometry.Brep.InsetFaces(IEnumerable<int> faceIndices, double distance, bool loose, bool ignoreSeams, bool creaseCorners, double tolerance, double angleTolerance)
Return: Brep
Modifiers: public
Summary: Individually insets faces of a brep by offsetting the faces outer edges inward and inner edges out then splitting the face with the offset curves.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: the indices of the faces to inset
Parameter: distance (double)
Parameter Summary: The distance to offset along the face
Parameter: loose (bool)
Parameter Summary: If true, offset by moving edit points otherwise offset within tolerance.
Parameter: ignoreSeams (bool)
Parameter Summary: If true, the seam edges are not offset and adjacent edges are extended to meet the seam. Otherwise offset normally.
Parameter: creaseCorners (bool)
Parameter Summary: If true, splitting curves will be made between the creases on edge curves and creases on the inset curves.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance for the offset. When in doubt, use the document's absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians for identifying creases when creasing corners. When in doubt, use the document's angle tolerance.

Method: Rhino.Geometry.Brep.IsBox()
Return: bool
Modifiers: public
Summary: Verifies a Brep is in the form of a solid box.

Method: Rhino.Geometry.Brep.IsBox(double tolerance)
Return: bool
Modifiers: public
Summary: Verifies a Brep is in the form of a solid box.
Parameter: tolerance (double)
Parameter Summary: The tolerance used to determine if faces are planar and to compare face normals.

Method: Rhino.Geometry.Brep.IsDuplicate(Brep other, double tolerance)
Return: bool
Modifiers: public
Summary: See if this and other are same brep geometry.
Parameter: other (Brep)
Parameter Summary: other brep.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when comparing control points.

Method: Rhino.Geometry.Brep.IsPointInside(Point3d point, double tolerance, bool strictlyIn)
Return: bool
Modifiers: public
Summary: Determines if point is inside a Brep. This question only makes sense when the brep is a closed and manifold. This function does not check for closed or manifold, so result is not valid in those cases. Intersects a line through point with brep, finds the intersection point Q closest to point, and looks at face normal at Q. If the point Q is on an edge or the intersection is not transverse at Q, then another line is used.
Parameter: point (Point3d)
Parameter Summary: 3d point to test.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance used for intersection and determining strict inclusion. A good default is RhinoMath.SqrtEpsilon.
Parameter: strictlyIn (bool)
Parameter Summary: if true, point is in if inside brep by at least tolerance. if false, point is in if truly in or within tolerance of boundary.

Method: Rhino.Geometry.Brep.IsValidGeometry(out string log)
Return: bool
Modifiers: public
Summary: Expert user function that tests the brep to see if its geometry information is valid. The value of brep.IsValidTopology() must be True before brep.IsValidGeometry() can be safely called.
Parameter: log (string)
Parameter Summary: If the brep geometry is not valid, then a brief description of the problem in English is assigned to this out parameter. The information is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool. Otherwise, <b>string.Empty</b> .

Method: Rhino.Geometry.Brep.IsValidTolerancesAndFlags(out string log)
Return: bool
Modifiers: public
Summary: Expert user function that tests the brep to see if its tolerances and flags are valid. The values of brep.IsValidTopology() and brep.IsValidGeometry() must be True before brep.IsValidTolerancesAndFlags() can be safely called.
Parameter: log (string)
Parameter Summary: If the brep tolerance or flags are not valid, then a brief description of the problem in English is assigned to this out parameter. The information is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool. Otherwise, <b>string.Empty</b> .

Method: Rhino.Geometry.Brep.IsValidTopology(out string log)
Return: bool
Modifiers: public
Summary: Tests the brep to see if its topology information is valid.
Parameter: log (string)
Parameter Summary: If the brep topology is not valid, then a brief English description of the problem is appended to the log. The information appended to log is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool.

Method: Rhino.Geometry.Brep.Join(Brep otherBrep, double tolerance, bool compact)
Return: bool
Modifiers: public
Summary: If any edges of this brep overlap edges of otherBrep, merge a copy of otherBrep into this brep joining all edges that overlap within tolerance.
Parameter: otherBrep (Brep)
Parameter Summary: Brep to be added to this brep.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges.
Parameter: compact (bool)
Parameter Summary: if true, set brep flags and tolerances, remove unused faces and edges.

Method: Rhino.Geometry.Brep.JoinEdges(int edgeIndex0, int edgeIndex1, double joinTolerance, bool compact)
Return: bool
Modifiers: public
Summary: Joins two naked edges, or edges that are coincident or close together.
Parameter: edgeIndex0 (int)
Parameter Summary: The first edge index.
Parameter: edgeIndex1 (int)
Parameter Summary: The second edge index.
Parameter: joinTolerance (double)
Parameter Summary: The join tolerance.
Parameter: compact (bool)
Parameter Summary: If joining more than one edge pair and want the edge indices of subsequent pairs to remain valid, set to false. But then call Brep.Compact() on the final result.

Method: Rhino.Geometry.Brep.JoinNakedEdges(double tolerance)
Return: int
Modifiers: public
Summary: Joins naked edge pairs within the same brep that overlap within tolerance.
Parameter: tolerance (double)
Parameter Summary: The tolerance value.

Method: Rhino.Geometry.Brep.MakeValidForV2()
Return: bool
Modifiers: public
Summary: No support is available for this function.
Expert user function that converts all geometry in Brep to NURB form.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(int faceIndex, double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges coplanar faces adjacent to Brep face into a single face.
Parameter: faceIndex (int)
Parameter Summary: The index of the Brep face to search.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(int faceIndex0, int faceIndex1, double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges two coplanar, adjacent Brep faces into a single face.
Parameter: faceIndex0 (int)
Parameter Summary: The index of the first Brep face.
Parameter: faceIndex1 (int)
Parameter Summary: The index of the second Brep face.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.RebuildTrimsForV2(BrepFace face, NurbsSurface nurbsSurface)
Return: void
Modifiers: public
Summary: No support is available for this function.
Expert user function used by MakeValidForV2 to convert trim curves from one surface to its NURBS form. After calling this function, you need to change the surface of the face to a NurbsSurface. | Parameter: face (BrepFace) | Parameter Summary: Face whose underlying surface has a parameterization that is different from its NURBS form. | Parameter: nurbsSurface (NurbsSurface) | Parameter Summary: NURBS form of the face's underlying surface.

Method: Rhino.Geometry.Brep.RemoveFins()
Return: bool
Modifiers: public
Summary: Recursively removes any Brep face with a naked edge. This function is only useful for non-manifold Breps.

Method: Rhino.Geometry.Brep.RemoveHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Remove all inner loops, or holes, in a Brep.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.RemoveHoles(IEnumerable<ComponentIndex> loops, double tolerance)
Return: Brep
Modifiers: public
Summary: Removes inner loops, or holes, in a Brep.
Parameter: loops (IEnumerable<ComponentIndex>)
Parameter Summary: A list of BrepLoop component indexes, where BrepLoop.LoopType == Rhino.Geometry.BrepLoopType.Inner.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.Repair(double tolerance)
Return: bool
Modifiers: public
Summary: Fills in missing or fixes incorrect component information from a Brep. Useful when reading Brep information from other file formats that do not provide as complete of a Brep definition as required by Rhino.
Parameter: tolerance (double)
Parameter Summary: The repair tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags()
Return: void
Modifiers: public
Summary: Set tolerances and flags in a Brep.

Method: Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags(bool bLazy, bool bSetVertexTolerances, bool bSetEdgeTolerances, bool bSetTrimTolerances, bool bSetTrimIsoFlags, bool bSetTrimTypeFlags, bool bSetLoopTypeFlags, bool bSetTrimBoxes)
Return: void
Modifiers: public
Summary: Set tolerances and flags in a Brep.
Parameter: bLazy (bool)
Parameter Summary: If true, only flags and tolerances that are not set will be calculated.
Parameter: bSetVertexTolerances (bool)
Parameter Summary: Set True to compute BrepVertex tolerances.
Parameter: bSetEdgeTolerances (bool)
Parameter Summary: Set True to compute BrepEdge tolerances.
Parameter: bSetTrimTolerances (bool)
Parameter Summary: Set True to compute BrepTrim tolerances.
Parameter: bSetTrimIsoFlags (bool)
Parameter Summary: Set True to compute BrepTrim.IsoStatus values.
Parameter: bSetTrimTypeFlags (bool)
Parameter Summary: Set True to compute BrepTrim.TrimType values.
Parameter: bSetLoopTypeFlags (bool)
Parameter Summary: Set True to compute BrepLoop.BrepLoopType values.
Parameter: bSetTrimBoxes (bool)
Parameter Summary: Set True to compute BrepTrim bounding boxes.

Method: Rhino.Geometry.Brep.SetTrimIsoFlags()
Return: void
Modifiers: public
Summary: This function can be used to set the BrepTrim::m_iso flag. It is intended to be used when creating a Brep from a definition that does not include compatible parameter space type information.

Method: Rhino.Geometry.Brep.SetVertices()
Return: void
Modifiers: public
Summary: This function can be used to compute vertex information for a b-rep when everything but the Vertices array is properly filled in. It is intended to be used when creating a Brep from a definition that does not include explicit vertex information.

Method: Rhino.Geometry.Brep.Split(Brep cutter, double intersectionTolerance, out bool toleranceWasRaised)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a Brep as a cutter.
Parameter: cutter (Brep)
Parameter Summary: The Brep to use as a cutter.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.
Parameter: toleranceWasRaised (bool)
Parameter Summary: Set to True if the split failed at intersectionTolerance but succeeded when the tolerance was increased to twice intersectionTolerance.

Method: Rhino.Geometry.Brep.Split(Brep cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a Brep as a cutter.
Parameter: cutter (Brep)
Parameter Summary: The Brep to use as a cutter.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<Brep> cutters, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using Breps as cutters.
Parameter: cutters (IEnumerable<Brep>)
Parameter Summary: One or more Breps to use as cutters.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<Curve> cutters, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using curves, at least partially on the Brep, as cutters.
Parameter: cutters (IEnumerable<Curve>)
Parameter Summary: The splitting curves. Only the portion of the curve on the Brep surface will be used for cutting.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<GeometryBase> cutters, Vector3d normal, bool planView, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a combination of curves, to be extruded, and Breps as cutters.
Parameter: cutters (IEnumerable<GeometryBase>)
Parameter Summary: The curves, surfaces, faces and Breps to be used as cutters. Any other geometry is ignored.
Parameter: normal (Vector3d)
Parameter Summary: A construction plane normal, used in deciding how to extrude a curve into a cutter.
Parameter: planView (bool)
Parameter Summary: Set True if the assume view is a plan, or parallel projection, view.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Standardize()
Return: void
Modifiers: public
Summary: Standardizes all trims, edges, and faces in the brep. After standardizing, there may be unused curves and surfaces in the brep. Call Brep.Compact to remove these unused curves and surfaces.

Method: Rhino.Geometry.Brep.TransformComponent(IEnumerable<ComponentIndex> components, Transform xform, double tolerance, double timeLimit, bool useMultipleThreads)
Return: bool
Modifiers: public
Summary: Transform an array of Brep components, bend neighbors to match, and leave the rest fixed.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: The Brep components to transform.
Parameter: xform (Transform)
Parameter Summary: The transformation to apply.
Parameter: tolerance (double)
Parameter Summary: The desired fitting tolerance to use when bending faces that share edges with both fixed and transformed components.
Parameter: timeLimit (double)
Parameter Summary: If the deformation is extreme, it can take a long time to calculate the result. If time_limit > 0, then the value specifies the maximum amount of time in seconds you want to spend before giving up.
Parameter: useMultipleThreads (bool)
Parameter Summary: True if multiple threads can be used.

Method: Rhino.Geometry.Brep.Trim(Brep cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Trims a brep with an oriented cutter. The parts of the brep that lie inside (opposite the normal) of the cutter are retained while the parts to the outside (in the direction of the normal) are discarded. If the Cutter is closed, then a connected component of the Brep that does not intersect the cutter is kept if and only if it is contained in the inside of cutter. That is the region bounded by cutter opposite from the normal of cutter, If cutter is not closed all these components are kept.
Parameter: cutter (Brep)
Parameter Summary: A cutting brep.
Parameter: intersectionTolerance (double)
Parameter Summary: A tolerance value with which to compute intersections.

Method: Rhino.Geometry.Brep.Trim(Plane cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Trims a Brep with an oriented cutter. The parts of Brep that lie inside (opposite the normal) of the cutter are retained while the parts to the outside ( in the direction of the normal ) are discarded. A connected component of Brep that does not intersect the cutter is kept if and only if it is contained in the inside of Cutter. That is the region bounded by cutter opposite from the normal of cutter, or in the case of a Plane cutter the half space opposite from the plane normal.
Parameter: cutter (Plane)
Parameter Summary: A cutting plane.
Parameter: intersectionTolerance (double)
Parameter Summary: A tolerance value with which to compute intersections.

Method: Rhino.Geometry.Brep.UnjoinEdges(IEnumerable<int> edgesToUnjoin)
Return: Brep[]
Modifiers: public
Summary: Un-joins, or separates, edges within the Brep. Note, seams in closed surfaces will not separate.
Parameter: edgesToUnjoin (IEnumerable<int>)
Parameter Summary: The indices of the Brep edges to un-join.

Class: Rhino.Geometry.BrepEdge
Summary: Represents a single edge curve in a Brep object.

Property: Rhino.Geometry.BrepEdge.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this edge.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeCurve
Return: Curve
Modifiers: public
Summary: Get the brep.Curves3D[] 3d curve geometry used by this edge or null.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeCurveIndex
Return: int
Modifiers: public
Summary: Get the brep.Curves3D[] index of the 3d curve geometry used by this edge or -1.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeIndex
Return: int
Modifiers: public
Summary: Gets the index of this edge in the Brep.Edges collection.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EndVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at end of edge
Accessors: get

Property: Rhino.Geometry.BrepEdge.ProxyBrepSubDEdgeId
Return: uint
Modifiers: public
Summary: If this edge is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD edge is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepEdge.StartVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at start of edge
Accessors: get

Property: Rhino.Geometry.BrepEdge.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets the accuracy of the edge curve (>=0.0 or RhinoMath.UnsetValue) A value of UnsetValue indicates that the tolerance should be computed. The maximum distance from the edge's 3d curve to any surface of a face that has this edge as a portion of its boundary must be <= this tolerance.
Accessors: get set

Property: Rhino.Geometry.BrepEdge.TrimCount
Return: int
Modifiers: public
Summary: Gets the number of trim-curves that use this edge.
Accessors: get

Property: Rhino.Geometry.BrepEdge.Valence
Return: EdgeAdjacency
Modifiers: public
Summary: Gets the topological valency of this edge. The topological valency is defined by how many adjacent faces share this edge.
Accessors: get

Method: Rhino.Geometry.BrepEdge.AdjacentFaces()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepFaces that use this edge.

Method: Rhino.Geometry.BrepEdge.ConcavityAt(double t, double tolerance)
Return: Concavity
Modifiers: public
Summary: Determine the concavity of this edge at a specific parameter.
Parameter: t (double)
Parameter Summary: Edge curve parameter.
Parameter: tolerance (double)
Parameter Summary: Angle tolerance for tangent faces.

Method: Rhino.Geometry.BrepEdge.GetEdgeParameter(int trimIndex, double trimParameter, out double edgeParameter)
Return: bool
Modifiers: public
Summary: Get corresponding edge parameter for given trim at given trim parameter.

Method: Rhino.Geometry.BrepEdge.IsSmoothManifoldEdge(double angleToleranceRadians)
Return: bool
Modifiers: public
Summary: For a manifold, non-boundary edge, decides whether or not the two surfaces on either side meet smoothly.
Parameter: angleToleranceRadians (double)
Parameter Summary: used to decide if surface normals on either side are parallel.

Method: Rhino.Geometry.BrepEdge.SetEdgeCurve(int curve3dIndex, Interval subDomain)
Return: bool
Modifiers: public
Summary: Set 3d curve geometry used by a b-rep edge.
Parameter: curve3dIndex (int)
Parameter Summary: index of 3d curve in m_C3[] array
Parameter: subDomain (Interval)
Parameter Summary:

Method: Rhino.Geometry.BrepEdge.SetEdgeCurve(int curve3dIndex)
Return: bool
Modifiers: public
Summary: Set 3d curve geometry used by a b-rep edge.
Parameter: curve3dIndex (int)
Parameter Summary: index of 3d curve in m_C3[] array

Method: Rhino.Geometry.BrepEdge.TrimIndices()
Return: int
Modifiers: public
Summary: Gets the indices of all trims associated with this edge.

Class: Rhino.Geometry.BrepEdgeFilletDistance
Summary: Fillet distances along a BrepEdge

Constructor: Rhino.Geometry.BrepEdgeFilletDistance.BrepEdgeFilletDistance(double edgeParameter, double filletDistance)
Summary: Construct a fillet distance

Property: Rhino.Geometry.BrepEdgeFilletDistance.EdgeParameter
Return: double
Modifiers: public
Summary: The parameter along the BrepEdge where to apply a fillet distance (radius)
Accessors: get

Property: Rhino.Geometry.BrepEdgeFilletDistance.FilletDistance
Return: double
Modifiers: public
Summary: Distance to fillet
Accessors: get

Class: Rhino.Geometry.BrepFace
Summary: Provides strongly-typed access to brep faces.
A Brep face is composed of one surface and trimming curves.

Property: Rhino.Geometry.BrepFace.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this face.
Accessors: get

Property: Rhino.Geometry.BrepFace.FaceIndex
Return: int
Modifiers: public
Summary: Index of face in Brep.Faces array.
Accessors: get

Property: Rhino.Geometry.BrepFace.Id
Return: Guid
Modifiers: public
Summary: Gets or sets the persistent id of this Brep face. By default, the id is Guid.Zero. Note, Rhino does not set this id. Thus, the property is available for use as a way of tracking Brep faces.
Accessors: get set

Property: Rhino.Geometry.BrepFace.IsSurface
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the face is synonymous with the underlying surface. If a Face has no trimming curves then it is considered a Surface.
Accessors: get

Property: Rhino.Geometry.BrepFace.Loops
Return: BrepLoopList
Modifiers: public
Summary: Loops in this face.
Accessors: get

Property: Rhino.Geometry.BrepFace.MaterialChannelIndex
Return: int
Modifiers: public
Summary: This face's rendering material channel index.
Accessors: get set

Property: Rhino.Geometry.BrepFace.OrientationIsReversed
Return: bool
Modifiers: public
Summary: True if face orientation is opposite of natural surface orientation.
Accessors: get set

Property: Rhino.Geometry.BrepFace.OuterLoop
Return: BrepLoop
Modifiers: public
Summary: Every face has a single outer loop.
Accessors: get

Property: Rhino.Geometry.BrepFace.PackId
Return: uint
Modifiers: public
Summary: 0 if the pack it is unset, or >0 if the set pack id.
Accessors: get

Property: Rhino.Geometry.BrepFace.PerFaceColor
Return: Color
Modifiers: public
Summary: If per-face color is "Empty", then this face does not have a custom color
Accessors: get set

Property: Rhino.Geometry.BrepFace.ProxyBrepSubDFaceId
Return: uint
Modifiers: public
Summary: If this face is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD face is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepFace.SurfaceIndex
Return: int
Modifiers: public
Summary: Surface index of the 3d surface geometry used by this face or -1
Accessors: get

Method: Rhino.Geometry.BrepFace.AdjacentEdges()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepEdges that delineate this Face.

Method: Rhino.Geometry.BrepFace.AdjacentFaces()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepFaces that surround (are adjacent to) this face.

Method: Rhino.Geometry.BrepFace.ChangeSurface(int surfaceIndex)
Return: bool
Modifiers: public
Summary: Expert user tool that replaces the 3d surface geometry use by the face.
Parameter: surfaceIndex (int)
Parameter Summary: brep surface index of new surface.

Method: Rhino.Geometry.BrepFace.ClearMaterialChannelIndex()
Return: void
Modifiers: public
Summary: Clear this face's rendering material channel index.

Method: Rhino.Geometry.BrepFace.ClearPackId()
Return: void
Modifiers: public
Summary: Sets BrepFace.PackId to 0.

Method: Rhino.Geometry.BrepFace.CreateExtrusion(Curve pathCurve, bool cap)
Return: Brep
Modifiers: public
Summary: Extrude a face in a Brep.
Parameter: pathCurve (Curve)
Parameter Summary: The path to extrude along. Note, the direction of the extrusion will follow the direction of the curve.
Parameter: cap (bool)
Parameter Summary: If true, the extrusion is capped with a translation of the face being extruded

Method: Rhino.Geometry.BrepFace.DraftAnglePoint(Point2d testPoint, double testAngle, Vector3d pullDirection, bool edge, out Point3d draftPoint, out double draftAngle)
Return: bool
Modifiers: public
Summary: Returns the surface draft angle and point at a parameter.
Parameter: testPoint (Point2d)
Parameter Summary: The u,v parameter on the face to evaluate.
Parameter: testAngle (double)
Parameter Summary: The angle in radians to test.
Parameter: pullDirection (Vector3d)
Parameter Summary: The pull direction.
Parameter: edge (bool)
Parameter Summary: Restricts the point placement to an edge.
Parameter: draftPoint (Point3d)
Parameter Summary: The draft angle point.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians.

Method: Rhino.Geometry.BrepFace.DuplicateFace(bool duplicateMeshes)
Return: Brep
Modifiers: public
Summary: Duplicate a face from the brep to create new single face brep.
Parameter: duplicateMeshes (bool)
Parameter Summary: If true, shading meshes will be copied as well.

Method: Rhino.Geometry.BrepFace.DuplicateSurface()
Return: Surface
Modifiers: public
Summary: Gets a copy to the untrimmed surface that this face is based on.

Method: Rhino.Geometry.BrepFace.FilletSurfaceToCurve(Curve curve, double t, double u, double v, double radius, int alignToCurve, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, double tolerance, List<Brep> out_fillets, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a constant-radius fillet surface between a surface and the curve.
Parameter: curve (Curve)
Parameter Summary: the curve to which this face is being filleted.
Parameter: t (double)
Parameter Summary: A parameter on the curve, indicating region of fillet.
Parameter: u (double)
Parameter Summary: A parameter in the u direction of the face indicating which side of the curve to fillet.
Parameter: v (double)
Parameter Summary: A parameter in the v direction of the face indicating which side of the curve to fillet.
Parameter: radius (double)
Parameter Summary: The radius of the constant-radius fillet desired. NOTE: using arcSliders will change the shape of the arcs themselves
Parameter: alignToCurve (int)
Parameter Summary: Does the user want the fillet to align to the curve? 0 - No, ignore the curve's b-spline structure 1 - Yes, match the curves's degree, spans, CVs as much as possible 2 - Same as 1, but iterate to fit to tolerance Note that a value of 1 or 2 will cause nBezierSrfs to be ignored
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the curve
Parameter: arcDegree (int)
Parameter Summary: Desired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: he results of the fillet calculation.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along curve [1] max 3d point deviation along face [2] max angle deviation along face(in degrees) [3] max angle deviation between Bézier surfaces(in degrees) [4] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.BrepFace.FilletSurfaceToRail(Curve curveOnFace, BrepFace secondFace, double u1, double v1, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, bool extend, FilletSurfaceSplitType split_type, double tolerance, List<Brep> out_fillets, List<Brep> out_breps0, List<Brep> out_breps1, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a surface between two surfaces, with a fixed rail curve on the first surface.
Parameter: curveOnFace (Curve)
Parameter Summary: A curve on this face
Parameter: secondFace (BrepFace)
Parameter Summary: The second face
Parameter: u1 (double)
Parameter Summary: A parameter in the u direction of the second face at the side you want to keep after filleting.
Parameter: v1 (double)
Parameter Summary: A parameter in the v direction of the second face at the side you want to keep after filleting.
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the rails
Parameter: arcDegree (int)
Parameter Summary: esired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: split_type (FilletSurfaceSplitType)
Parameter Summary: The split type
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: The results of the fillet calculation.
Parameter: out_breps0 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by faceWithCurve.
Parameter: out_breps1 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by pFace1.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along surface 0 [1] max 3d point deviation along surface 1 [2] max angle deviation along surface 0 (in degrees) [3] max angle deviation along surface 1 (in degrees) [4] max angle deviation between Bézier surfaces(in degrees) [5] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.BrepFace.GetMesh(MeshType meshType)
Return: Mesh
Modifiers: public
Summary: Obtains a reference to a specified type of mesh for this brep face.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.BrepFace.IsPointOnFace(double u, double v, double tolerance)
Return: PointFaceRelation
Modifiers: public
Summary: Tests if a parameter space point is in the active region of a face.
Parameter: u (double)
Parameter Summary: Parameter space point U value.
Parameter: v (double)
Parameter Summary: Parameter space point V value.
Parameter: tolerance (double)
Parameter Summary: 3D tolerance used when checking to see if the point is on a face or inside of a loop.

Method: Rhino.Geometry.BrepFace.IsPointOnFace(double u, double v)
Return: PointFaceRelation
Modifiers: public
Summary: Tests if a parameter space point is in the active region of a face.
Parameter: u (double)
Parameter Summary: Parameter space point U value.
Parameter: v (double)
Parameter Summary: Parameter space point V value.

Method: Rhino.Geometry.BrepFace.PullPointsToFace(IEnumerable<Point3d> points, double tolerance)
Return: Point3d[]
Modifiers: public
Summary: Pulls one or more points to a brep face.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to pull.
Parameter: tolerance (double)
Parameter Summary: Tolerance for pulling operation. Only points that are closer than tolerance will be pulled to the face.

Method: Rhino.Geometry.BrepFace.RebuildEdges(double tolerance, bool rebuildSharedEdges, bool rebuildVertices)
Return: bool
Modifiers: public
Summary: Rebuild the edges used by a face so they lie on the surface.
Parameter: tolerance (double)
Parameter Summary: tolerance for fitting 3d edge curves.
Parameter: rebuildSharedEdges (bool)
Parameter Summary: if False and edge is used by this face and a neighbor, then the edge will be skipped.
Parameter: rebuildVertices (bool)
Parameter Summary: if true, vertex locations are updated to lie on the surface.

Method: Rhino.Geometry.BrepFace.RefitTrim(BrepEdge edge, IEnumerable<double> knots, double tolerance, bool bSections, ref double fitQuality)
Return: Surface[]
Modifiers: public
Summary: The RefitTrim command replaces a trimmed surface edge with an untrimmed edge.
Parameter: edge (BrepEdge)
Parameter Summary: The edge to fit.
Parameter: knots (IEnumerable<double>)
Parameter Summary: The custom knot vector to use, or an empty vector to use the existing knots of the surface.
Parameter: tolerance (double)
Parameter Summary: The 3d tolerance for projection, splitting, and fitting.
Parameter: bSections (bool)
Parameter Summary: If true, the surface is divided into seperate surface patches at all knots.
Parameter: fitQuality (double)
Parameter Summary: A measure of the 3d fit to the trim curve.

Method: Rhino.Geometry.BrepFace.RemoveHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Remove all inner loops, or holes, from a Brep face.

Method: Rhino.Geometry.BrepFace.SetDomain(int direction, Interval domain)
Return: bool
Modifiers: public, override
Summary: Sets the surface domain of this face.
Parameter: direction (int)
Parameter Summary: Direction of face to set (0 = U, 1 = V).
Parameter: domain (Interval)
Parameter Summary: Domain to apply.

Method: Rhino.Geometry.BrepFace.SetMesh(MeshType meshType, Mesh mesh)
Return: bool
Modifiers: public
Summary: Sets a reference to a specified type of mesh for this brep face.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.
Parameter: mesh (Mesh)
Parameter Summary: The new mesh.

Method: Rhino.Geometry.BrepFace.SetPackId(uint packId)
Return: void
Modifiers: public
Summary: Used by SubD functions that create breps to transmit the subd face SubDFace.PackId value to the brep face or faces generated from the subd face. Unless you are an expert and doing something very carefully and very fancy, to not call this function.
Parameter: packId (uint)
Parameter Summary: The pack id.

Method: Rhino.Geometry.BrepFace.ShrinkFace(ShrinkDisableSide disableSide)
Return: bool
Modifiers: public
Summary: Shrinks the underlying untrimmed surface of this Brep face close to trimming boundaries. Shrinking a surface is like extending smoothly, only backwards. knot of full multiplicity are added where you want the surface to be cut off. Then the remaining control points are thrown away.
Parameter: disableSide (ShrinkDisableSide)
Parameter Summary: The side(s) of the surface to not shrink.

Method: Rhino.Geometry.BrepFace.ShrinkSurfaceToEdge()
Return: bool
Modifiers: public
Summary: Shrinks the underlying untrimmed surface of this Brep face right to the trimming boundaries. Note, shrinking the trimmed surface can sometimes cause problems later since having the edges so close to the trimming boundaries can cause commands that use the surface edges as input to fail.

Method: Rhino.Geometry.BrepFace.Split(IEnumerable<Curve> curves, double tolerance)
Return: Brep
Modifiers: public
Summary: Split this face using 3D trimming curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to split with.
Parameter: tolerance (double)
Parameter Summary: Tolerance for splitting, when in doubt use the Document Absolute Tolerance.

Method: Rhino.Geometry.BrepFace.TrimAwareIsoCurve(int direction, double constantParameter)
Return: Curve[]
Modifiers: public
Summary: Similar to IsoCurve function, except this function pays attention to trims on faces and may return multiple curves.
Parameter: direction (int)
Parameter Summary: Direction of isocurve.
0 = Isocurve connects all points with a constant U value.
1 = Isocurve connects all points with a constant V value. | Parameter: constantParameter (double) | Parameter Summary: Surface parameter that remains identical along the isocurves.

Method: Rhino.Geometry.BrepFace.TrimAwareIsoIntervals(int direction, double constantParameter)
Return: Interval[]
Modifiers: public
Summary: Gets intervals where the iso curve exists on a BrepFace (trimmed surface)
Parameter: direction (int)
Parameter Summary: Direction of isocurve.
0 = Isocurve connects all points with a constant U value.
1 = Isocurve connects all points with a constant V value. | Parameter: constantParameter (double) | Parameter Summary: Surface parameter that remains identical along the isocurves.

Method: Rhino.Geometry.BrepFace.UnderlyingSurface()
Return: Surface
Modifiers: public
Summary: Gets the untrimmed surface that is the base of this face.

Class: Rhino.Geometry.BrepLoop
Summary: Represent a single loop in a Brep object. A loop is composed of a list of trim curves.

Property: Rhino.Geometry.BrepLoop.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this loop.
Accessors: get

Property: Rhino.Geometry.BrepLoop.Face
Return: BrepFace
Modifiers: public
Summary: BrepFace this loop belongs to.
Accessors: get

Property: Rhino.Geometry.BrepLoop.LoopIndex
Return: int
Modifiers: public
Summary: Gets the index of this loop in the Brep.Loops collection.
Accessors: get

Property: Rhino.Geometry.BrepLoop.LoopType
Return: BrepLoopType
Modifiers: public
Summary: type of loop.
Accessors: get

Property: Rhino.Geometry.BrepLoop.Trims
Return: BrepTrimList
Modifiers: public
Summary: List of trims for this loop
Accessors: get

Method: Rhino.Geometry.BrepLoop.To2dCurve()
Return: Curve
Modifiers: public
Summary: Create a 2d curve that traces the entire loop

Method: Rhino.Geometry.BrepLoop.To3dCurve()
Return: Curve
Modifiers: public
Summary: Create a 3D curve that approximates the loop geometry.

Class: Rhino.Geometry.BrepRegion
Summary: Represents a brep topological region that has sides.

Property: Rhino.Geometry.BrepRegion.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the region bounding box.
Accessors: get

Property: Rhino.Geometry.BrepRegion.Brep
Return: Brep
Modifiers: public
Summary: Gets a reference to the Brep this region belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegion.Index
Return: int
Modifiers: public
Summary: Gets the index of region in the RegionTopology array.
Accessors: get

Property: Rhino.Geometry.BrepRegion.IsFinite
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this region is finite.
Accessors: get

Method: Rhino.Geometry.BrepRegion.BoundaryBrep()
Return: Brep
Modifiers: public
Summary: Gets the boundary of a region as a brep object. If the region is finite, the boundary will be a closed manifold brep. The boundary may have more than one connected component.

Method: Rhino.Geometry.BrepRegion.GetFaceSides()
Return: BrepRegionFaceSide[]
Modifiers: public
Summary: Gets an array of <b>BrepRegionFaceSide</b> entities delimiting this region.

Method: Rhino.Geometry.BrepRegion.NonConstOperation()
Return: void
Modifiers: protected, override

Class: Rhino.Geometry.BrepRegionFaceSide
Summary: Represents a side of a <b>BrepRegion</b> entity.

Property: Rhino.Geometry.BrepRegionFaceSide.Brep
Return: Brep
Modifiers: public
Summary: The brep this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.Face
Return: BrepFace
Modifiers: public
Summary: Gets the face this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.Region
Return: BrepRegion
Modifiers: public
Summary: The region this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.SurfaceNormalPointsIntoRegion
Return: bool
Modifiers: public
Summary: Gets True if BrepFace's surface normal points into region; False otherwise.
Accessors: get

Method: Rhino.Geometry.BrepRegionFaceSide.NonConstOperation()
Return: void
Modifiers: protected, override

Class: Rhino.Geometry.BrepTrim
Summary: Brep trim information is stored in BrepTrim classes. Brep.Trims is an array of all the trims in the brep. A BrepTrim is derived from CurveProxy so the trim can supply easy to use evaluation tools via the Curve virtual member functions. Note well that the domains and orientations of the curve m_C2[trim.m_c2i] and the trim as a curve may not agree.

Property: Rhino.Geometry.BrepTrim.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this trim.
Accessors: get

Property: Rhino.Geometry.BrepTrim.Edge
Return: BrepEdge
Modifiers: public
Summary: Brep edge this trim belongs to. This will be None for singular trims
Accessors: get

Property: Rhino.Geometry.BrepTrim.EndVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at end of trim
Accessors: get

Property: Rhino.Geometry.BrepTrim.Face
Return: BrepFace
Modifiers: public
Summary: Brep face this trim belongs to
Accessors: get

Property: Rhino.Geometry.BrepTrim.IsoStatus
Return: IsoStatus
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.BrepTrim.Loop
Return: BrepLoop
Modifiers: public
Summary: Loop that this trim belongs to
Accessors: get

Property: Rhino.Geometry.BrepTrim.StartVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at start of trim
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimCurve
Return: Curve
Modifiers: public
Summary: Gets the Brep.Curves2D 2d curve geometry used by this trim, or null.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimCurveIndex
Return: int
Modifiers: public
Summary: Gets the Brep.Curves2D 2d curve index of the 2d curve geometry used by this trim, or -1.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimIndex
Return: int
Modifiers: public
Summary: Gets the index of this trim in the Brep.Trims collection.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimType
Return: BrepTrimType
Modifiers: public
Summary: Type of trim
Accessors: get set

Method: Rhino.Geometry.BrepTrim.GetTolerances(out double toleranceU, out double toleranceV)
Return: void
Modifiers: public
Summary: The values in tolerance[] record the accuracy of the parameter space trimming curves.

Method: Rhino.Geometry.BrepTrim.GetTrimParameter(double edgeParameter, out double trimParameter)
Return: bool
Modifiers: public
Summary: Get corresponding trim parameter at given edge parameter.

Method: Rhino.Geometry.BrepTrim.IsReversed()
Return: bool
Modifiers: public
Summary: Get orientation of trim with respect to it's corresponding edge.

Method: Rhino.Geometry.BrepTrim.SetTolerances(double toleranceU, double toleranceV)
Return: void
Modifiers: public
Summary: The values in tolerance[] record the accuracy of the parameter space trimming curves.

Method: Rhino.Geometry.BrepTrim.SetTrimCurve(int curve2dIndex, Interval subDomain)
Return: bool
Modifiers: public
Summary: Set 2d curve geometry used by a b-rep trim.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in m_C2[] array
Parameter: subDomain (Interval)
Parameter Summary:

Method: Rhino.Geometry.BrepTrim.SetTrimCurve(int curve2dIndex)
Return: bool
Modifiers: public
Summary: Set 2d curve geometry used by a b-rep trim.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in m_C2[] array

Class: Rhino.Geometry.BrepVertex
Summary: Brep vertex information

Property: Rhino.Geometry.BrepVertex.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this vertex.
Accessors: get

Property: Rhino.Geometry.BrepVertex.ProxyBrepSubDVertexId
Return: uint
Modifiers: public
Summary: If this vertex is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD vertex is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepVertex.Tolerance
Return: double
Modifiers: public
Summary: Accuracy of vertex point, either >=0.0 or <b>RhinoMath.UnsetValue</b> . A value of <b>RhinoMath.UnsetValue</b> indicates that the tolerance should be computed. A value of 0.0 indicates that the distance from the vertex to any applicable edge or trim end is <= <b>RhinoMath.ZeroTolerance</b> . If an edge begins or ends at this vertex, then the distance from the vertex's 3d point to the appropriate end of the edge's 3d curve must be <= this tolerance. If a trim begins or ends at this vertex, then the distance from the vertex's 3d point to the 3d point on the surface obtained by evaluating the surface at the appropriate end of the trimming curve must be <= this tolerance.
Accessors: get

Property: Rhino.Geometry.BrepVertex.VertexIndex
Return: int
Modifiers: public
Summary: Gets the index of this vertex in the Brep.Vertices collection.
Accessors: get

Method: Rhino.Geometry.BrepVertex.EdgeIndices()
Return: int
Modifiers: public
Summary: Gets the indices of all edges associated with this vertex.

Class: Rhino.Geometry.Centermark
Summary: Represents a center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark()
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(Plane plane, Curve curve, double curveParameter)
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(Plane plane, Point3d centerPoint, double radius)
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Centermark.Radius
Return: double
Modifiers: public
Summary: Gets or sets the center mark's radius.
Accessors: get set

Method: Rhino.Geometry.Centermark.Create(DimensionStyle dimStyle, Plane plane, Curve curve, double curveParameter)
Return: Centermark
Modifiers: public, static
Summary: Creates a new center mark dimension.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: curve (Curve)
Parameter Summary: Curve used to determine the center mark's radius.
Parameter: curveParameter (double)
Parameter Summary: Parameter on curve used to determine the center mark's radius.

Method: Rhino.Geometry.Centermark.Create(DimensionStyle dimStyle, Plane plane, Point3d centerPoint, double radius)
Return: Centermark
Modifiers: public, static
Summary: Creates a new center mark dimension.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: centerPoint (Point3d)
Parameter Summary: Dimension's center point.
Parameter: radius (double)
Parameter Summary: Center mark's radius.

Method: Rhino.Geometry.Centermark.AdjustFromPoints(Plane plane, Point3d centerPoint)
Return: bool
Modifiers: public
Summary: Update dimension geometry from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: centerPoint (Point3d)
Parameter Summary: Dimension's center point.

Class: Rhino.Geometry.ClippingPlaneSurface
Summary: Represents a planar surface that is used as clipping plane in viewports. A clipping plane object maintains a list of viewports that it clips against.

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface()
Summary: Constructs an empty clipping plane surface

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(Plane plane)
Summary: Constructs a clipping plane surface from a Plane

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(PlaneSurface planeSurface)
Summary: Constructs a ClippingPlaneSurface from a PlaneSurface

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.ClippingPlaneSurface.ParticipationListsEnabled
Return: bool
Modifiers: public
Summary: Should the object and layer participation lists be used when determining clipping
Accessors: get set

Property: Rhino.Geometry.ClippingPlaneSurface.PlaneDepth
Return: double
Modifiers: public
Summary: Distance that the clipping has an effect
Accessors: get set

Property: Rhino.Geometry.ClippingPlaneSurface.PlaneDepthEnabled
Return: bool
Modifiers: public
Summary: Determines if the PlaneDepth value should be used
Accessors: get set

Method: Rhino.Geometry.ClippingPlaneSurface.AddClipViewportId(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Adds a viewport id to the list of viewports that this clipping plane clips.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the RhinoViewport to add.

Method: Rhino.Geometry.ClippingPlaneSurface.ClearClipParticipationLists()
Return: void
Modifiers: public
Summary: Remove list of object ids that this clipping plane surface clips. This causes the clipping plane surface to clip all objects

Method: Rhino.Geometry.ClippingPlaneSurface.GetClipParticipation(out IEnumerable<Guid> objectIds, out IEnumerable<int> layerIndices, out bool isExclusionList)
Return: void
Modifiers: public

Method: Rhino.Geometry.ClippingPlaneSurface.RemoveClipViewportId(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Removes a viewport id that this being clipped by this clipping plane.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the RhinoViewport to remove.

Method: Rhino.Geometry.ClippingPlaneSurface.SetClipParticipation(IEnumerable<Guid> objectIds, IEnumerable<int> layerIndices, bool isExclusionList)
Return: void
Modifiers: public
Summary: Set a list of specific object ids and layers that this clipping plane surface clips.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary:
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary:
Parameter: isExclusionList (bool)
Parameter Summary: Is the list a set of ids to not clip or a set to clip

Method: Rhino.Geometry.ClippingPlaneSurface.ViewportIds()
Return: System.Guid[]
Modifiers: public
Summary: Returns the ids of RhinoViewport objects that are clipped by this clipping plane.

Class: Rhino.Geometry.Curve
Summary: Represents a base class that is common to most RhinoCommon curve types.
A curve represents an entity that can be all visited by providing a single parameter, usually called t.

Constructor: Rhino.Geometry.Curve.Curve(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.Curve.Degree
Return: int
Modifiers: public
Summary: Gets the maximum algebraic degree of any span or a good estimate if curve spans are not algebraic.
Accessors: get

Property: Rhino.Geometry.Curve.Dimension
Return: int
Modifiers: public
Summary: Gets the dimension of the object.
The dimension is typically three. For parameter space trimming curves the dimension is two. In rare cases the dimension can be one or greater than three. | Accessors: get

Property: Rhino.Geometry.Curve.Domain
Return: Interval
Modifiers: public
Summary: Gets or sets the domain of the curve.
Accessors: get set

Property: Rhino.Geometry.Curve.IsClosed
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve is a closed curve.
Accessors: get

Property: Rhino.Geometry.Curve.IsPeriodic
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve is considered to be Periodic.
Accessors: get

Property: Rhino.Geometry.Curve.IsSubDFriendly
Return: bool
Modifiers: public
Summary: Returns True if the curve is a cubic, non-rational, uniform NURBS curve that is either periodic or has natural end conditions. Otherwise, False is returned.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtEnd
Return: Point3d
Modifiers: public
Summary: Evaluates point at the end of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtMid
Return: Point3d
Modifiers: public
Summary: Evaluates point at the middle, or mid, of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtStart
Return: Point3d
Modifiers: public
Summary: Evaluates point at the start of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.SpanCount
Return: int
Modifiers: public
Summary: Gets the number of non-empty smooth (c-infinity) spans in the curve.
Accessors: get

Property: Rhino.Geometry.Curve.TangentAtEnd
Return: Vector3d
Modifiers: public
Summary: Evaluate unit tangent vector at the end of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.TangentAtStart
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at the start of the curve.
Accessors: get

Method: Rhino.Geometry.Curve.CreateArcBlend(Point3d startPt, Vector3d startDir, Point3d endPt, Vector3d endDir, double controlPointLengthRatio)
Return: Curve
Modifiers: public, static
Summary: Creates a polycurve consisting of two tangent arc segments that connect two points and two directions.
Parameter: startPt (Point3d)
Parameter Summary: Start of the arc blend curve.
Parameter: startDir (Vector3d)
Parameter Summary: Start direction of the arc blend curve.
Parameter: endPt (Point3d)
Parameter Summary: End of the arc blend curve.
Parameter: endDir (Vector3d)
Parameter Summary: End direction of the arc blend curve.
Parameter: controlPointLengthRatio (double)
Parameter Summary: The ratio of the control polygon lengths of the two arcs. Note, a value of 1.0 means the control polygon lengths for both arcs will be the same.

Method: Rhino.Geometry.Curve.CreateArcCornerRectangle(Rectangle3d rectangle, double radius)
Return: Curve
Modifiers: public, static
Summary: Creates an arc-cornered (rounded) rectangular curve.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: radius (double)
Parameter Summary: The arc radius at each corner.

Method: Rhino.Geometry.Curve.CreateArcLineArcBlend(Point3d startPt, Vector3d startDir, Point3d endPt, Vector3d endDir, double radius)
Return: Curve
Modifiers: public, static
Summary: Creates an arc-line-arc blend curve between two curves. The output is generally a PolyCurve with three segments: arc, line, arc. In some cases, one or more of those segments will be absent because they would have 0 length. If there is only a single segment, the result will either be an ArcCurve or a LineCurve.
Parameter: startPt (Point3d)
Parameter Summary: Start of the blend curve.
Parameter: startDir (Vector3d)
Parameter Summary: Start direction of the blend curve.
Parameter: endPt (Point3d)
Parameter Summary: End of the blend curve.
Parameter: endDir (Vector3d)
Parameter Summary: End direction of the arc blend curve.
Parameter: radius (double)
Parameter Summary: The radius of the arc segments.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curveA, Curve curveB, BlendContinuity continuity, double bulgeA, double bulgeB)
Return: Curve
Modifiers: public, static
Summary: Create a Blend curve between two existing curves.
Parameter: curveA (Curve)
Parameter Summary: Curve to blend from (blending will occur at curve end point).
Parameter: curveB (Curve)
Parameter Summary: Curve to blend to (blending will occur at curve start point).
Parameter: continuity (BlendContinuity)
Parameter Summary: Continuity of blend.
Parameter: bulgeA (double)
Parameter Summary: Bulge factor at curveA end of blend. Values near 1.0 work best.
Parameter: bulgeB (double)
Parameter Summary: Bulge factor at curveB end of blend. Values near 1.0 work best.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curveA, Curve curveB, BlendContinuity continuity)
Return: Curve
Modifiers: public, static
Summary: Create a Blend curve between two existing curves.
Parameter: curveA (Curve)
Parameter Summary: Curve to blend from (blending will occur at curve end point).
Parameter: curveB (Curve)
Parameter Summary: Curve to blend to (blending will occur at curve start point).
Parameter: continuity (BlendContinuity)
Parameter Summary: Continuity of blend.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curve0, double t0, bool reverse0, BlendContinuity continuity0, Curve curve1, double t1, bool reverse1, BlendContinuity continuity1)
Return: Curve
Modifiers: public, static
Summary: Makes a curve blend between 2 curves at the parameters specified with the directions and continuities specified
Parameter: curve0 (Curve)
Parameter Summary: First curve to blend from
Parameter: t0 (double)
Parameter Summary: Parameter on first curve for blend endpoint
Parameter: reverse0 (bool)
Parameter Summary: If false, the blend will go in the natural direction of the curve. If true, the blend will go in the opposite direction to the curve
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start
Parameter: curve1 (Curve)
Parameter Summary: Second curve to blend from
Parameter: t1 (double)
Parameter Summary: Parameter on second curve for blend endpoint
Parameter: reverse1 (bool)
Parameter Summary: If false, the blend will go in the natural direction of the curve. If true, the blend will go in the opposite direction to the curve
Parameter: continuity1 (BlendContinuity)
Parameter Summary: Continuity for the blend at the end

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, Curve curveB, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, Curve curveB)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, IEnumerable<Curve> subtractors, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between a closed planar curve, and a list of closed planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: subtractors (IEnumerable<Curve>)
Parameter Summary: curves to subtract from the first closed curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, IEnumerable<Curve> subtractors)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between a closed planar curve, and a list of closed planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: subtractors (IEnumerable<Curve>)
Parameter Summary: curves to subtract from the first closed curve.

Method: Rhino.Geometry.Curve.CreateBooleanIntersection(Curve curveA, Curve curveB, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean intersection of two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanIntersection(Curve curveA, Curve curveB)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean intersection of two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.

Method: Rhino.Geometry.Curve.CreateBooleanRegions(IEnumerable<Curve> curves, Plane plane, bool combineRegions, double tolerance)
Return: CurveBooleanRegions
Modifiers: public, static
Summary: Calculates curve Boolean regions, which trims and splits curves based on their overlapping regions.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: plane (Plane)
Parameter Summary: Regions will be found in the projection of the curves to this plane.
Parameter: combineRegions (bool)
Parameter Summary: If true, then adjacent regions will be combined.
Parameter: tolerance (double)
Parameter Summary: Function tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateBooleanRegions(IEnumerable<Curve> curves, Plane plane, IEnumerable<Point3d> points, bool combineRegions, double tolerance)
Return: CurveBooleanRegions
Modifiers: public, static
Summary: Curve Boolean method, which trims and splits curves based on their overlapping regions.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: plane (Plane)
Parameter Summary: Regions will be found in the projection of the curves to this plane.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: These points will be projected to plane. All regions that contain at least one of these points will be found.
Parameter: combineRegions (bool)
Parameter Summary: If true, then adjacent regions will be combined.
Parameter: tolerance (double)
Parameter Summary: Function tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateBooleanUnion(IEnumerable<Curve> curves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean union of two or more closed, planar curves. Note, curves must be co-planar.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The co-planar curves to union.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanUnion(IEnumerable<Curve> curves)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean union of two or more closed, planar curves. Note, curves must be co-planar.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The co-planar curves to union.

Method: Rhino.Geometry.Curve.CreateConicCornerRectangle(Rectangle3d rectangle, double rho)
Return: Curve
Modifiers: public, static
Summary: Creates a conic-corned (rounded) rectangular curve.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: rho (double)
Parameter Summary: The rho value at each corner, in the exclusive range (0.0, 1.0).

Method: Rhino.Geometry.Curve.CreateControlPointCurve(IEnumerable<Point3d> points, int degree)
Return: Curve
Modifiers: public, static
Summary: Constructs a curve from a set of control-point locations.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control points.
Parameter: degree (int)
Parameter Summary: Degree of curve. The number of control points must be at least degree+1.

Method: Rhino.Geometry.Curve.CreateControlPointCurve(IEnumerable<Point3d> points)
Return: Curve
Modifiers: public, static
Summary: Constructs a control-point of degree=3 (or less).
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control points of curve.

Method: Rhino.Geometry.Curve.CreateCurve2View(Curve curveA, Curve curveB, Vector3d vectorA, Vector3d vectorB, double tolerance, double angleTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates a third curve from two curves that are planar in different construction planes. The new curve looks the same as each of the original curves when viewed in each plane.
Parameter: curveA (Curve)
Parameter Summary: The first curve.
Parameter: curveB (Curve)
Parameter Summary: The second curve.
Parameter: vectorA (Vector3d)
Parameter Summary: A vector defining the normal direction of the plane which the first curve is drawn upon.
Parameter: vectorB (Vector3d)
Parameter Summary: A vector defining the normal direction of the plane which the second curve is drawn upon.
Parameter: tolerance (double)
Parameter Summary: The tolerance for the operation.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance for the operation.

Method: Rhino.Geometry.Curve.CreateFillet(Curve curve0, Curve curve1, double radius, double t0Base, double t1Base)
Return: Arc
Modifiers: public, static
Summary: Computes the fillet arc for a curve filleting operation.
Parameter: curve0 (Curve)
Parameter Summary: First curve to fillet.
Parameter: curve1 (Curve)
Parameter Summary: Second curve to fillet.
Parameter: radius (double)
Parameter Summary: Fillet radius.
Parameter: t0Base (double)
Parameter Summary: Parameter on curve0 where the fillet ought to start (approximately).
Parameter: t1Base (double)
Parameter Summary: Parameter on curve1 where the fillet ought to end (approximately).

Method: Rhino.Geometry.Curve.CreateFilletCornersCurve(Curve curve, double radius, double tolerance, double angleTolerance)
Return: Curve
Modifiers: public, static
Summary: Rounds the corners of a kinked curve with arcs of a single, specified radius.
Parameter: curve (Curve)
Parameter Summary: The curve to fillet.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. When in doubt, use the document's model space angle tolerance.

Method: Rhino.Geometry.Curve.CreateFilletCurves(Curve curve0, Point3d point0, Curve curve1, Point3d point1, double radius, bool join, bool trim, bool arcExtension, double tolerance, double angleTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates a tangent arc between two curves and trims or extends the curves to the arc.
Parameter: curve0 (Curve)
Parameter Summary: The first curve to fillet.
Parameter: point0 (Point3d)
Parameter Summary: A point on the first curve that is near the end where the fillet will be created.
Parameter: curve1 (Curve)
Parameter Summary: The second curve to fillet.
Parameter: point1 (Point3d)
Parameter Summary: A point on the second curve that is near the end where the fillet will be created.
Parameter: radius (double)
Parameter Summary: The radius of the fillet.
Parameter: join (bool)
Parameter Summary: Join the output curves.
Parameter: trim (bool)
Parameter Summary: Trim copies of the input curves to the output fillet curve.
Parameter: arcExtension (bool)
Parameter Summary: Applies when arcs are filleted but need to be extended to meet the fillet curve or chamfer line. If true, then the arc is extended maintaining its validity. If false, then the arc is extended with a line segment, which is joined to the arc converting it to a polycurve.
Parameter: tolerance (double)
Parameter Summary: The tolerance, generally the document's absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree, CurveKnotStyle knots, Vector3d startTangent, Vector3d endTangent)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate. For periodic curves if the final point is a duplicate of the initial point it is ignored. (Count must be >=2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1. Note: Even degree > 3 periodic interpolation results in a non-periodic closed curve.
Parameter: knots (CurveKnotStyle)
Parameter Summary: Knot-style to use and specifies if the curve should be periodic.
Parameter: startTangent (Vector3d)
Parameter Summary: A starting tangent.
Parameter: endTangent (Vector3d)
Parameter Summary: An ending tangent.

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree, CurveKnotStyle knots)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate. For periodic curves if the final point is a duplicate of the initial point it is ignored. (Count must be >=2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1. Note: Even degree > 3 periodic interpolation results in a non-periodic closed curve.
Parameter: knots (CurveKnotStyle)
Parameter Summary: Knot-style to use and specifies if the curve should be periodic.

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate (Count must be >= 2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1. Degree must be odd.

Method: Rhino.Geometry.Curve.CreateMatchCurve(Curve curve0, bool reverse0, BlendContinuity continuity, Curve curve1, bool reverse1, PreserveEnd preserve, bool average)
Return: Curve[]
Modifiers: public, static
Summary: Changes a curve end to meet a specified curve with a specified continuity.
Parameter: curve0 (Curve)
Parameter Summary: The open curve to change.
Parameter: reverse0 (bool)
Parameter Summary: Reverse the direction of the curve to change before matching.
Parameter: continuity (BlendContinuity)
Parameter Summary: The continuity at the curve end.
Parameter: curve1 (Curve)
Parameter Summary: The open curve to match.
Parameter: reverse1 (bool)
Parameter Summary: Reverse the direction of the curve to match before matching.
Parameter: preserve (PreserveEnd)
Parameter Summary: Prevent modification of the curvature at the end opposite the match for curves with fewer than six control points.
Parameter: average (bool)
Parameter Summary: Adjust both curves to match each other.

Method: Rhino.Geometry.Curve.CreateMeanCurve(Curve curveA, Curve curveB, double angleToleranceRadians)
Return: Curve
Modifiers: public, static
Summary: Constructs a mean, or average, curve from two curves.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance, in radians, used to match kinks between curves. If you are unsure how to set this parameter, then either use the document's angle tolerance RhinoDoc.AngleToleranceRadians, or the default value (RhinoMath.UnsetValue)

Method: Rhino.Geometry.Curve.CreateMeanCurve(Curve curveA, Curve curveB)
Return: Curve
Modifiers: public, static
Summary: Constructs a mean, or average, curve from two curves.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.

Method: Rhino.Geometry.Curve.CreatePeriodicCurve(Curve curve, bool smooth)
Return: Curve
Modifiers: public, static
Summary: Removes kinks from a curve. Periodic curves deform smoothly without kinks.
Parameter: curve (Curve)
Parameter Summary: The curve to make periodic. Curve must have degree >= 2.
Parameter: smooth (bool)
Parameter Summary: If true, smooths any kinks in the curve and moves control points to make a smooth curve. If false, control point locations are not changed or changed minimally (only one point may move) and only the knot vector is altered.

Method: Rhino.Geometry.Curve.CreatePeriodicCurve(Curve curve)
Return: Curve
Modifiers: public, static
Summary: Removes kinks from a curve. Periodic curves deform smoothly without kinks.
Parameter: curve (Curve)
Parameter Summary: The curve to make periodic. Curve must have degree >= 2.

Method: Rhino.Geometry.Curve.CreateRevisionCloud(Curve curve, int segmentCount, double angle, bool flip)
Return: Curve
Modifiers: public, static
Summary: Creates a revision cloud curve from a planar curve.
Parameter: curve (Curve)
Parameter Summary: The input planar curve.
Parameter: segmentCount (int)
Parameter Summary: The number of segments in the output revision cloud curve. If zero, the number of segments in the output revision cloud curve is based on the NURB form of the input curve.
Parameter: angle (double)
Parameter Summary: The angle in radians, between PI/2.0 and PI radians (90 and 180 degrees). This angle indicates the amount of bulge in the segments.
Parameter: flip (bool)
Parameter Summary: The arc segments in output revision cloud curve will be in the opposite direction to the input curve.

Method: Rhino.Geometry.Curve.CreateRevisionCloud(IEnumerable<Point3d> points, double angle, bool flip)
Return: Curve
Modifiers: public, static
Summary: Creates a revision cloud curve from points that make up a planar polyline.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The input points.
Parameter: angle (double)
Parameter Summary: The angle in radians, between PI/2.0 and PI radians (90 and 180 degrees). This angle indicates the amount of bulge in the segments.
Parameter: flip (bool)
Parameter Summary: The arc segments in output revision cloud curve will be in the opposite direction to the input curve.

Method: Rhino.Geometry.Curve.CreateSoftEditCurve(Curve curve, double t, Vector3d delta, double length, bool fixEnds)
Return: Curve
Modifiers: public, static
Summary: Creates a soft edited curve from an existing curve using a smooth field of influence.
Parameter: curve (Curve)
Parameter Summary: The curve to soft edit.
Parameter: t (double)
Parameter Summary: A parameter on the curve to move from. This location on the curve is moved, and the move is smoothly tapered off with increasing distance along the curve from this parameter.
Parameter: delta (Vector3d)
Parameter Summary: The direction and magnitude, or maximum distance, of the move.
Parameter: length (double)
Parameter Summary: The distance along the curve from the editing point over which the strength of the editing falls off smoothly.
Parameter: fixEnds (bool)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTextOutlines(string text, string font, double textHeight, int textStyle, bool closeLoops, Plane plane, double smallCapsScale, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates outline curves created from a text string. The functionality is similar to what you find in Rhino's TextObject command or TextEntity.Explode() in RhinoCommon.
Parameter: text (string)
Parameter Summary: The text from which to create outline curves.
Parameter: font (string)
Parameter Summary: The text font. If the font does not exist on the system. Rhino will use a substitute with similar properties.
Parameter: textHeight (double)
Parameter Summary: The text height.
Parameter: textStyle (int)
Parameter Summary: The font style. The font style can be any number of the following: 0 - Normal, 1 - Bold, 2 - Italic
Parameter: closeLoops (bool)
Parameter Summary: Set this value to True when dealing with normal fonts and when you expect closed loops. You may want to set this to False when specifying a single-stroke font where you don't want closed loops.
Parameter: plane (Plane)
Parameter Summary: The plane on which the outline curves will lie.
Parameter: smallCapsScale (double)
Parameter Summary: Displays lower-case letters as small caps. Set the relative text size to a percentage of the normal text.
Parameter: tolerance (double)
Parameter Summary: The tolerance for the operation.

Method: Rhino.Geometry.Curve.CreateTweenCurves(Curve curve0, Curve curve1, int numCurves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves. That means the first control point of first curve is matched to first control point of the second curve and so on. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTweenCurves(Curve curve0, Curve curve1, int numCurves)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves. That means the first control point of first curve is matched to first control point of the second curve and so on. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(Curve curve0, Curve curve1, int numCurves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed. Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless input curves are compatible and no refit is needed. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(Curve curve0, Curve curve1, int numCurves)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed. Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless input curves are compatible and no refit is needed. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(Curve curve0, Curve curve1, int numCurves, int numSamples, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Use sample points method to make curves compatible. This is how the algorithm works: Divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input curves.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(Curve curve0, Curve curve1, int numCurves, int numSamples)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Use sample points method to make curves compatible. This is how the algorithm works: Divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input curves.

Method: Rhino.Geometry.Curve.DoDirectionsMatch(Curve curveA, Curve curveB)
Return: bool
Modifiers: public, static
Summary: Determines whether two curves travel more or less in the same direction.
Parameter: curveA (Curve)
Parameter Summary: First curve to test.
Parameter: curveB (Curve)
Parameter Summary: Second curve to test.

Method: Rhino.Geometry.Curve.GetDistancesBetweenCurves(Curve curveA, Curve curveB, double tolerance, out double maxDistance, out double maxDistanceParameterA, out double maxDistanceParameterB, out double minDistance, out double minDistanceParameterA, out double minDistanceParameterB)
Return: bool
Modifiers: public, static
Summary: Calculates the minimum and maximum distances between two curves. This function is useful for computing curve deviation. If you are not computing curve deviation, use <b>ClosestPoints(Curve, out Point3d, out Point3d)</b> .
Parameter: curveA (Curve)
Parameter Summary: A curve.
Parameter: curveB (Curve)
Parameter Summary: Another curve.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: maxDistance (double)
Parameter Summary: The maximum distance value. This is an out reference argument.
Parameter: maxDistanceParameterA (double)
Parameter Summary: The maximum distance parameter on curve A. This is an out reference argument.
Parameter: maxDistanceParameterB (double)
Parameter Summary: The maximum distance parameter on curve B. This is an out reference argument.
Parameter: minDistance (double)
Parameter Summary: The minimum distance value. This is an out reference argument.
Parameter: minDistanceParameterA (double)
Parameter Summary: The minimum distance parameter on curve A. This is an out reference argument.
Parameter: minDistanceParameterB (double)
Parameter Summary: The minimum distance parameter on curve B. This is an out reference argument.

Method: Rhino.Geometry.Curve.GetFilletPoints(Curve curve0, Curve curve1, double radius, double t0Base, double t1Base, out double t0, out double t1, out Plane filletPlane)
Return: bool
Modifiers: public, static
Summary: Finds points at which to cut a pair of curves so that a fillet of given radius can be inserted.
Parameter: curve0 (Curve)
Parameter Summary: First curve to fillet.
Parameter: curve1 (Curve)
Parameter Summary: Second curve to fillet.
Parameter: radius (double)
Parameter Summary: Fillet radius.
Parameter: t0Base (double)
Parameter Summary: Parameter value for base point on curve0.
Parameter: t1Base (double)
Parameter Summary: Parameter value for base point on curve1.
Parameter: t0 (double)
Parameter Summary: Parameter value of fillet point on curve 0.
Parameter: t1 (double)
Parameter Summary: Parameter value of fillet point on curve 1.
Parameter: filletPlane (Plane)
Parameter Summary: The fillet is contained in this plane with the fillet center at the plane origin.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection, bool simpleJoin, out int key)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output. | Parameter: simpleJoin (bool) | Parameter Summary: Set True to use the simple joining method. In general, set this parameter to false. | Parameter: key (int) | Parameter Summary: inputCurves[i] is part of returnValue[key[i]]

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection, out int key)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output. | Parameter: key (int) | Parameter Summary: inputCurves[i] is part of returnValue[key[i]]

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: Curve segments to join.

Method: Rhino.Geometry.Curve.MakeEndsMeet(Curve curveA, bool adjustStartCurveA, Curve curveB, bool adjustStartCurveB)
Return: bool
Modifiers: public, static
Summary: Makes adjustments to the ends of one or both input curves so that they meet at a point.
Parameter: curveA (Curve)
Parameter Summary: 1st curve to adjust.
Parameter: adjustStartCurveA (bool)
Parameter Summary: Which end of the 1st curve to adjust: True is start, False is end.
Parameter: curveB (Curve)
Parameter Summary: 2nd curve to adjust.
Parameter: adjustStartCurveB (bool)
Parameter Summary: which end of the 2nd curve to adjust true==start, false==end.

Method: Rhino.Geometry.Curve.PlanarClosedCurveRelationship(Curve curveA, Curve curveB, Plane testPlane, double tolerance)
Return: RegionContainment
Modifiers: public, static
Summary: Determines whether two coplanar simple closed curves are disjoint or intersect; otherwise, if the regions have a containment relationship, discovers which curve encloses the other.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.
Parameter: testPlane (Plane)
Parameter Summary: A plane.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.PlanarCurveCollision(Curve curveA, Curve curveB, Plane testPlane, double tolerance)
Return: bool
Modifiers: public, static
Summary: Determines if two coplanar curves collide (intersect).
Parameter: curveA (Curve)
Parameter Summary: A curve.
Parameter: curveB (Curve)
Parameter Summary: Another curve.
Parameter: testPlane (Plane)
Parameter Summary: A valid plane containing the curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value for intersection.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, Brep brep, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a Brep along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: brep (Brep)
Parameter Summary: Brep to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, IEnumerable<Brep> breps, Vector3d direction, double tolerance, out int brepIndices)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a collection of Breps along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.
Parameter: brepIndices (int)
Parameter Summary: (out) Integers that identify for each resulting curve which Brep it was projected onto.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, IEnumerable<Brep> breps, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a collection of Breps along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToBrep(IEnumerable<Curve> curves, IEnumerable<Brep> breps, Vector3d direction, double tolerance, out int curveIndices, out int brepIndices)
Return: Curve[]
Modifiers: public, static
Summary: Projects a collection of Curves onto a collection of Breps along a given direction.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.
Parameter: curveIndices (int)
Parameter Summary: Index of which curve in the input list was the source for a curve in the return array.
Parameter: brepIndices (int)
Parameter Summary: Index of which brep was used to generate a curve in the return array.

Method: Rhino.Geometry.Curve.ProjectToBrep(IEnumerable<Curve> curves, IEnumerable<Brep> breps, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a collection of Curves onto a collection of Breps along a given direction.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToMesh(Curve curve, IEnumerable<Mesh> meshes, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a set of meshes using a direction and tolerance.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: A list, an array or any enumerable of meshes.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToMesh(Curve curve, Mesh mesh, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a mesh using a direction and tolerance.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: mesh (Mesh)
Parameter Summary: A mesh.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToMesh(IEnumerable<Curve> curves, IEnumerable<Mesh> meshes, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a set of meshes using a direction and tolerance.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list, an array or any enumerable of curves.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: A list, an array or any enumerable of meshes.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToPlane(Curve curve, Plane plane)
Return: Curve
Modifiers: public, static
Summary: Constructs a curve by projecting an existing curve to a plane.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: plane (Plane)
Parameter Summary: A plane.

Method: Rhino.Geometry.Curve.PullToBrepFace(Curve curve, BrepFace face, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Pull a curve to a BrepFace using closest point projection.
Parameter: curve (Curve)
Parameter Summary: Curve to pull.
Parameter: face (BrepFace)
Parameter Summary: Brep face that pulls.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for pulling.

Method: Rhino.Geometry.Curve.ChangeClosedCurveSeam(double t)
Return: bool
Modifiers: public
Summary: If this curve is closed, then modify it so that the start/end point is at curve parameter t.
Parameter: t (double)
Parameter Summary: Curve parameter of new start/end point. The returned curves domain will start at t.

Method: Rhino.Geometry.Curve.ChangeDimension(int desiredDimension)
Return: bool
Modifiers: public
Summary: Changes the dimension of a curve.
Parameter: desiredDimension (int)
Parameter Summary: The desired dimension.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation()
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in the world XY plane. Only works with simple (no self intersections) closed, planar curves.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Plane plane)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane. Only works with simple (no self intersections) closed, planar curves.
Parameter: plane (Plane)
Parameter Summary: The plane in which to solve the orientation.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Transform xform)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve. Only works with simple (no self intersections) closed, planar curves.
Parameter: xform (Transform)
Parameter Summary: Transformation to map the curve to the world XY plane.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Vector3d upDirection)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane. Only works with simple (no self intersections) closed, planar curves.
Parameter: upDirection (Vector3d)
Parameter Summary: A vector that is considered "up".

Method: Rhino.Geometry.Curve.ClosestPoint(Point3d testPoint, out double t, double maximumDistance)
Return: bool
Modifiers: public
Summary: Finds the parameter of the point on a curve that is closest to testPoint. If the maximumDistance parameter is > 0, then only points whose distance to the given point is <= maximumDistance will be returned. Using a positive value of maximumDistance can substantially speed up the search.
Parameter: testPoint (Point3d)
Parameter Summary: Point to project.
Parameter: t (double)
Parameter Summary: parameter of local closest point returned here.
Parameter: maximumDistance (double)
Parameter Summary: The maximum allowed distance.
Past this distance, the search is given up and False is returned.
Use 0 to turn off this parameter.

Method: Rhino.Geometry.Curve.ClosestPoint(Point3d testPoint, out double t)
Return: bool
Modifiers: public
Summary: Finds parameter of the point on a curve that is closest to testPoint. If the maximumDistance parameter is > 0, then only points whose distance to the given point is <= maximumDistance will be returned. Using a positive value of maximumDistance can substantially speed up the search.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search from.
Parameter: t (double)
Parameter Summary: Parameter of local closest point.

Method: Rhino.Geometry.Curve.ClosestPoints(Curve otherCurve, out Point3d pointOnThisCurve, out Point3d pointOnOtherCurve)
Return: bool
Modifiers: public
Summary: Gets closest points between this and another curves.
Parameter: otherCurve (Curve)
Parameter Summary: The other curve.
Parameter: pointOnThisCurve (Point3d)
Parameter Summary: The point on this curve. This out parameter is assigned during this call.
Parameter: pointOnOtherCurve (Point3d)
Parameter Summary: The point on other curve. This out parameter is assigned during this call.

Method: Rhino.Geometry.Curve.ClosestPoints(IEnumerable<GeometryBase> geometry, out Point3d pointOnCurve, out Point3d pointOnObject, out int whichGeometry, double maximumDistance)
Return: bool
Modifiers: public
Summary: Finds the object (and the closest point in that object) that is closest to this curve.
Breps, surfaces, curves and point clouds are examples of objects that can be passed to this function. | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A list, an array or any enumerable set of geometry to search. | Parameter: pointOnCurve (Point3d) | Parameter Summary: The point on curve. This out parameter is assigned during this call. | Parameter: pointOnObject (Point3d) | Parameter Summary: The point on geometry. This out parameter is assigned during this call. | Parameter: whichGeometry (int) | Parameter Summary: The index of the geometry. This out parameter is assigned during this call. | Parameter: maximumDistance (double) | Parameter Summary: Maximum allowable distance. Past this distance, the research is given up and False is returned.

Method: Rhino.Geometry.Curve.ClosestPoints(IEnumerable<GeometryBase> geometry, out Point3d pointOnCurve, out Point3d pointOnObject, out int whichGeometry)
Return: bool
Modifiers: public
Summary: Finds the object (and the closest point in that object) that is closest to this curve.
Breps, surfaces, curves and point clouds are examples of objects that can be passed to this function. | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A list, an array or any enumerable set of geometry to search. | Parameter: pointOnCurve (Point3d) | Parameter Summary: The point on curve. This out parameter is assigned during this call. | Parameter: pointOnObject (Point3d) | Parameter Summary: The point on geometry. This out parameter is assigned during this call. | Parameter: whichGeometry (int) | Parameter Summary: The index of the geometry. This out parameter is assigned during this call.

Method: Rhino.Geometry.Curve.CombineShortSegments(double tolerance)
Return: bool
Modifiers: public
Summary: Looks for segments that are shorter than tolerance that can be combined. For NURBS of degree greater than 1, spans are combined by removing knots. Similarly for NURBS segments of polycurves. Otherwise, RemoveShortSegments() is called. Does not change the domain, but it will change the relative parameterization.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint, Plane plane, double tolerance)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.
Parameter: plane (Plane)
Parameter Summary: Plane in which to compare point and region.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during comparison.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint, Plane plane)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.
Parameter: plane (Plane)
Parameter Summary: Plane in which to compare point and region.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset. Both curve and point are projected to the World XY plane.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.

Method: Rhino.Geometry.Curve.ControlPolygon()
Return: Polyline
Modifiers: public
Summary: Gets the curve's control polygon.

Method: Rhino.Geometry.Curve.CurvatureAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluate the curvature vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.DerivativeAt(double t, int derivativeCount, CurveEvaluationSide side)
Return: Vector3d[]
Modifiers: public
Summary: Evaluate the derivatives at the specified curve parameter.
Parameter: t (double)
Parameter Summary: Curve parameter to evaluate.
Parameter: derivativeCount (int)
Parameter Summary: Number of derivatives to evaluate, must be at least 0.
Parameter: side (CurveEvaluationSide)
Parameter Summary: Side of parameter to evaluate. If the parameter is at a kink, it makes a big difference whether the evaluation is from below or above.

Method: Rhino.Geometry.Curve.DerivativeAt(double t, int derivativeCount)
Return: Vector3d[]
Modifiers: public
Summary: Evaluate the derivatives at the specified curve parameter.
Parameter: t (double)
Parameter Summary: Curve parameter to evaluate.
Parameter: derivativeCount (int)
Parameter Summary: Number of derivatives to evaluate, must be at least 0.

Method: Rhino.Geometry.Curve.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Curve.DivideAsContour(Point3d contourStart, Point3d contourEnd, double interval)
Return: Point3d[]
Modifiers: public
Summary: Divides this curve at fixed steps along a defined contour line.
Parameter: contourStart (Point3d)
Parameter Summary: The start of the contouring line.
Parameter: contourEnd (Point3d)
Parameter Summary: The end of the contouring line.
Parameter: interval (double)
Parameter Summary: A distance to measure on the contouring axis.

Method: Rhino.Geometry.Curve.DivideByCount(int segmentCount, bool includeEnds, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into a number of equal-length segments.
Parameter: segmentCount (int)
Parameter Summary: Segment count. Note that the number of division points may differ from the segment count.
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: points (Point3d[])
Parameter Summary: A list of division points. If the function returns successfully, this point-array will be filled in.

Method: Rhino.Geometry.Curve.DivideByCount(int segmentCount, bool includeEnds)
Return: double
Modifiers: public
Summary: Divide the curve into a number of equal-length segments.
Parameter: segmentCount (int)
Parameter Summary: Segment count. Note that the number of division points may differ from the segment count.
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, bool reverse, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: reverse (bool)
Parameter Summary: If true, then the divisions start from the end of the curve.
Parameter: points (Point3d[])
Parameter Summary: If function is successful, points at each parameter value are returned in points.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, bool reverse)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: reverse (bool)
Parameter Summary: If true, then the divisions start from the end of the curve.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: points (Point3d[])
Parameter Summary: If function is successful, points at each parameter value are returned in points.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.

Method: Rhino.Geometry.Curve.DivideEquidistant(double distance, out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Calculates 3d points on a curve where the linear distance between the points is equal.
Parameter: distance (double)
Parameter Summary: The distance between division points.
Parameter: curveParameters (double)
Parameter Summary: If successful, an array of curve parameters at the point locations.

Method: Rhino.Geometry.Curve.DivideEquidistant(double distance)
Return: Point3d[]
Modifiers: public
Summary: Calculates 3d points on a curve where the linear distance between the points is equal.
Parameter: distance (double)
Parameter Summary: The distance between division points.

Method: Rhino.Geometry.Curve.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Constructs an exact duplicate of this Curve.

Method: Rhino.Geometry.Curve.DuplicateCurve()
Return: Curve
Modifiers: public
Summary: Constructs an exact duplicate of this curve.

Method: Rhino.Geometry.Curve.DuplicateSegments()
Return: Curve[]
Modifiers: public
Summary: Duplicates curve segments. Explodes polylines, polycurves and G1 discontinuous NURBS curves. Single segment curves, such as lines, arcs, unkinked NURBS curves, are duplicated.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, CurveExtensionStyle style, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: style (CurveExtensionStyle)
Parameter Summary: The style or type of extension to use.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, CurveExtensionStyle style, Point3d endPoint)
Return: Curve
Modifiers: public
Summary: Extends a curve to a point.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: style (CurveExtensionStyle)
Parameter Summary: The style or type of extension to use.
Parameter: endPoint (Point3d)
Parameter Summary: A new end point.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, double length, CurveExtensionStyle style)
Return: Curve
Modifiers: public
Summary: Extends a curve by a specific length.
Parameter: side (CurveEnd)
Parameter Summary: Curve end to extend.
Parameter: length (double)
Parameter Summary: Length to add to the curve end.
Parameter: style (CurveExtensionStyle)
Parameter Summary: Extension style.

Method: Rhino.Geometry.Curve.Extend(double t0, double t1)
Return: Curve
Modifiers: public
Summary: Where possible, analytically extends curve to include the given domain. This will not work on closed curves. The original curve will be identical to the restriction of the resulting curve to the original curve domain.
Parameter: t0 (double)
Parameter Summary: Start of extension domain, if the start is not inside the Domain of this curve, an attempt will be made to extend the curve.
Parameter: t1 (double)
Parameter Summary: End of extension domain, if the end is not inside the Domain of this curve, an attempt will be made to extend the curve.

Method: Rhino.Geometry.Curve.Extend(Interval domain)
Return: Curve
Modifiers: public
Summary: Where possible, analytically extends curve to include the given domain. This will not work on closed curves. The original curve will be identical to the restriction of the resulting curve to the original curve domain.
Parameter: domain (Interval)
Parameter Summary: Extension domain.

Method: Rhino.Geometry.Curve.ExtendByArc(CurveEnd side, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve by an Arc until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.ExtendByLine(CurveEnd side, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve by a line until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.ExtendOnSurface(CurveEnd side, BrepFace face)
Return: Curve
Modifiers: public
Summary: Extends a curve on a surface.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: face (BrepFace)
Parameter Summary: BrepFace that contains the curve.

Method: Rhino.Geometry.Curve.ExtendOnSurface(CurveEnd side, Surface surface)
Return: Curve
Modifiers: public
Summary: Extends a curve on a surface.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: surface (Surface)
Parameter Summary: Surface that contains the curve.

Method: Rhino.Geometry.Curve.ExtremeParameters(Vector3d direction)
Return: double
Modifiers: public
Summary: Returns the parameter values of all local extrema. Parameter values are in increasing order so consecutive extrema define an interval on which each component of the curve is monotone. Note, non-periodic curves always return the end points.
Parameter: direction (Vector3d)
Parameter Summary: The direction in which to perform the calculation.

Method: Rhino.Geometry.Curve.Fair(double distanceTolerance, double angleTolerance, int clampStart, int clampEnd, int iterations)
Return: Curve
Modifiers: public
Summary: Fairs a curve object. Fair works best on degree 3 (cubic) curves. Attempts to remove large curvature variations while limiting the geometry changes to be no more than the specified tolerance.
Parameter: distanceTolerance (double)
Parameter Summary: Maximum allowed distance the faired curve is allowed to deviate from the input.
Parameter: angleTolerance (double)
Parameter Summary: (in radians) kinks with angles <= angleTolerance are smoothed out 0.05 is a good default.
Parameter: clampStart (int)
Parameter Summary: The number of (control vertices-1) to preserve at start.
0 = preserve start point
1 = preserve start point and 1st derivative
2 = preserve start point, 1st and 2nd derivative | Parameter: clampEnd (int) | Parameter Summary: Same as clampStart. | Parameter: iterations (int) | Parameter Summary: The number of iterations to use in adjusting the curve.

Method: Rhino.Geometry.Curve.FilletSurfaceToCurve(BrepFace face, double t, double u, double v, double radius, int alignToCurve, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, double tolerance, List<Brep> out_fillets, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a constant-radius fillet surface between a surface and the curve.
Parameter: face (BrepFace)
Parameter Summary: the face being filleted.
Parameter: t (double)
Parameter Summary: A parameter on the curve, indicating region of fillet.
Parameter: u (double)
Parameter Summary: A parameter in the u direction of the face indicating which side of the curve to fillet.
Parameter: v (double)
Parameter Summary: A parameter in the v direction of the face indicating which side of the curve to fillet.
Parameter: radius (double)
Parameter Summary: The radius of the constant-radius fillet desired. NOTE: using arcSliders will change the shape of the arcs themselves
Parameter: alignToCurve (int)
Parameter Summary: Does the user want the fillet to align to the curve? 0 - No, ignore the curve's b-spline structure 1 - Yes, match the curves's degree, spans, CVs as much as possible 2 - Same as 1, but iterate to fit to tolerance Note that a value of 1 or 2 will cause nBezierSrfs to be ignored
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the curve
Parameter: arcDegree (int)
Parameter Summary: Desired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: he results of the fillet calculation.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along curve [1] max 3d point deviation along face [2] max angle deviation along face(in degrees) [3] max angle deviation between Bézier surfaces(in degrees) [4] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.Curve.FilletSurfaceToRail(BrepFace faceWithCurve, BrepFace secondFace, double u1, double v1, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, bool extend, FilletSurfaceSplitType split_type, double tolerance, List<Brep> out_fillets, List<Brep> out_breps0, List<Brep> out_breps1, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a surface between two surfaces, with a fixed rail curve on the first surface.
Parameter: faceWithCurve (BrepFace)
Parameter Summary: The first face on which the curve exists
Parameter: secondFace (BrepFace)
Parameter Summary: The second face
Parameter: u1 (double)
Parameter Summary: A parameter in the u direction of the second face at the side you want to keep after filleting.
Parameter: v1 (double)
Parameter Summary: A parameter in the v direction of the second face at the side you want to keep after filleting.
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the rails
Parameter: arcDegree (int)
Parameter Summary: esired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: split_type (FilletSurfaceSplitType)
Parameter Summary: The split type
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: The results of the fillet calculation.
Parameter: out_breps0 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by faceWithCurve.
Parameter: out_breps1 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by pFace1.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along surface 0 [1] max 3d point deviation along surface 1 [2] max angle deviation along surface 0 (in degrees) [3] max angle deviation along surface 1 (in degrees) [4] max angle deviation between Bézier surfaces(in degrees) [5] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.Curve.FindLocalInflection(Vector3d N, Interval subDomain, double seed, out double curveParameter, out double angleError)
Return: bool
Modifiers: public
Summary: Local minimization for point on a curve with tangent perpendicular to N.
Parameter: N (Vector3d)
Parameter Summary: This vector and the curve tangent define a plane. In this plane, there is a vector V perpendicular to the tangent.
Parameter: subDomain (Interval)
Parameter Summary: Subdomain of of curve to evaluate. This must not be empty.
Parameter: seed (double)
Parameter Summary: A seed parameter, which must be included in the subdomain.
Parameter: curveParameter (double)
Parameter Summary: The parameter on the curve if successful, <b>RhinoMath.UnsetValue</b> if unsuccessful.
Parameter: angleError (double)
Parameter Summary: The measure, in radians, of the angle between N and V. The angle will be zero when the result is an inflection.

Method: Rhino.Geometry.Curve.Fit(int degree, double fitTolerance, double angleTolerance)
Return: Curve
Modifiers: public
Summary: Fits a new curve through an existing curve.
Parameter: degree (int)
Parameter Summary: The degree of the returned Curve. Must be bigger than 1.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance. If fitTolerance is RhinoMath.UnsetValue or <=0.0, the document absolute tolerance is used.
Parameter: angleTolerance (double)
Parameter Summary: The kink smoothing tolerance in radians.
If angleTolerance is 0.0, all kinks are smoothed
If angleTolerance is >0.0, kinks smaller than angleTolerance are smoothed
If angleTolerance is RhinoMath.UnsetValue or <0.0, the document angle tolerance is used for the kink smoothing

Method: Rhino.Geometry.Curve.FrameAt(double t, out Plane plane)
Return: bool
Modifiers: public
Summary: Returns a 3d frame at a parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.
Parameter: plane (Plane)
Parameter Summary: The frame is returned here.

Method: Rhino.Geometry.Curve.GetConicSectionType()
Return: ConicSectionType
Modifiers: public
Summary: Returns the type of conic section based on the curve's shape.

Method: Rhino.Geometry.Curve.GetConicSectionType(out Point3d focus1, out Point3d focus2, out Point3d center)
Return: ConicSectionType
Modifiers: public
Summary: Returns the type of conic section based on the curve's shape.
Parameter: focus1 (Point3d)
Parameter Summary: The first focus point, if applicable.
Parameter: focus2 (Point3d)
Parameter Summary: The second focus point, if applicable.
Parameter: center (Point3d)
Parameter Summary: The center point, if applicable.

Method: Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(double nurbsParameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Convert a NURBS curve parameter to a curve parameter.
Parameter: nurbsParameter (double)
Parameter Summary: NURBS form parameter.
Parameter: curveParameter (double)
Parameter Summary: Curve parameter.

Method: Rhino.Geometry.Curve.GetLength()
Return: double
Modifiers: public
Summary: Gets the length of the curve with a fractional tolerance of 1.0e-8.

Method: Rhino.Geometry.Curve.GetLength(double fractionalTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Get the length of a sub-section of the curve.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).

Method: Rhino.Geometry.Curve.GetLength(double fractionalTolerance)
Return: double
Modifiers: public
Summary: Get the length of the curve.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.GetLength(Interval subdomain)
Return: double
Modifiers: public
Summary: Get the length of a sub-section of the curve with a fractional tolerance of 1e-8.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).

Method: Rhino.Geometry.Curve.GetLocalPerpPoint(Point3d testPoint, double seedParmameter, Interval subDomain, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is perpendicular to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the curve to search.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the perpendicular point

Method: Rhino.Geometry.Curve.GetLocalPerpPoint(Point3d testPoint, double seedParmameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is perpendicular to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the perpendicular point

Method: Rhino.Geometry.Curve.GetLocalTangentPoint(Point3d testPoint, double seedParmameter, Interval subDomain, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is tangent to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the curve to search.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the tangent point

Method: Rhino.Geometry.Curve.GetLocalTangentPoint(Point3d testPoint, double seedParmameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is tangent to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the tangent point

Method: Rhino.Geometry.Curve.GetNextDiscontinuity(Continuity continuityType, double t0, double t1, double cosAngleTolerance, double curvatureTolerance, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to search for.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 it will be ignored unless continuityType is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: cosAngleTolerance (double)
Parameter Summary: default = cos(1 degree) Used only when continuity is G1_continuous or G2_continuous. If the cosine of the angle between two tangent vectors is <= cos_angle_tolerance, then a G1 discontinuity is reported.
Parameter: curvatureTolerance (double)
Parameter Summary: (default = ON_SQRT_EPSILON) Used only when continuity is G2_continuous. If K0 and K1 are curvatures evaluated from above and below and |K0 - K1| > curvature_tolerance, then a curvature discontinuity is reported.
Parameter: t (double)
Parameter Summary: If a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Curve.GetNextDiscontinuity(Continuity continuityType, double t0, double t1, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to search for.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 it will be ignored unless continuityType is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: t (double)
Parameter Summary: If a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(double curveParameter, out double nurbsParameter)
Return: bool
Modifiers: public
Summary: Convert a curve parameter to a NURBS curve parameter.
Parameter: curveParameter (double)
Parameter Summary: Curve parameter.
Parameter: nurbsParameter (double)
Parameter Summary: NURBS form parameter.

Method: Rhino.Geometry.Curve.GetPerpendicularFrames(IEnumerable<double> parameters)
Return: Plane[]
Modifiers: public
Summary: Gets a collection of perpendicular frames along the curve. Perpendicular frames are also known as 'Zero-twisting frames' and they minimize rotation from one frame to the next.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection ofstrictly increasingcurve parameters to place perpendicular frames on.

Method: Rhino.Geometry.Curve.GetSubCurves()
Return: Curve[]
Modifiers: public
Summary: Gets subcurves from a curve. The results will be similar to what is produced by Rhino's Explode command.

Method: Rhino.Geometry.Curve.HasNurbsForm()
Return: int
Modifiers: public
Summary: Does a NURBS curve representation of this curve exist?

Method: Rhino.Geometry.Curve.InflectionPoints()
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's inflection points. An inflection point is a location on a curve at which the sign of the curvature (i.e., the concavity) changes. The curvature at these locations is always 0.

Method: Rhino.Geometry.Curve.InflectionPoints(out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's inflection points. An inflection point is a location on a curve at which the sign of the curvature (i.e., the concavity) changes. The curvature at these locations is always 0.
Parameter: curveParameters (double)
Parameter Summary: An array of curve parameters at the inflection points.

Method: Rhino.Geometry.Curve.IsArc()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsArc(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an arc or circle within the given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsCircle()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsCircle(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by a circle within the given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsClosable(double tolerance, double minimumAbsoluteSize, double minimumRelativeSize)
Return: bool
Modifiers: public
Summary: Decide if it makes sense to close off this curve by moving the endpoint to the start based on start-end gap size and length of curve as approximated by chord defined by 6 points.
Parameter: tolerance (double)
Parameter Summary: Maximum allowable distance between start and end. If start - end gap is greater than tolerance, this function will return false.
Parameter: minimumAbsoluteSize (double)
Parameter Summary: If greater than 0.0 and none of the interior sampled points are at least minimumAbsoluteSize from start, this function will return false.
Parameter: minimumRelativeSize (double)
Parameter Summary: If greater than 1.0 and chord length is less than minimumRelativeSize*gap, this function will return false.

Method: Rhino.Geometry.Curve.IsClosable(double tolerance)
Return: bool
Modifiers: public
Summary: Decide if it makes sense to close off this curve by moving the endpoint to the start based on start-end gap size and length of curve as approximated by chord defined by 6 points.
Parameter: tolerance (double)
Parameter Summary: Maximum allowable distance between start and end. If start - end gap is greater than tolerance, this function will return false.

Method: Rhino.Geometry.Curve.IsContinuous(Continuity continuityType, double t)
Return: bool
Modifiers: public
Summary: Test continuity at a curve parameter value.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to test for.
Parameter: t (double)
Parameter Summary: Parameter to test.

Method: Rhino.Geometry.Curve.IsEllipse()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsEllipse(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an ellipse within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for checking.

Method: Rhino.Geometry.Curve.IsInPlane(Plane testPlane, double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it lies in a specific plane.
Parameter: testPlane (Plane)
Parameter Summary: Plane to test for.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsInPlane(Plane testPlane)
Return: bool
Modifiers: public
Summary: Test a curve to see if it lies in a specific plane.
Parameter: testPlane (Plane)
Parameter Summary: Plane to test for.

Method: Rhino.Geometry.Curve.IsLinear()
Return: bool
Modifiers: public
Summary: Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).

Method: Rhino.Geometry.Curve.IsLinear(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it is linear to within the custom tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking linearity.

Method: Rhino.Geometry.Curve.IsPlanar()
Return: bool
Modifiers: public
Summary: Test a curve for planarity.

Method: Rhino.Geometry.Curve.IsPlanar(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve for planarity.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsPolyline()
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.

Method: Rhino.Geometry.Curve.IsShort(double tolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Used to quickly find short curves.
Parameter: tolerance (double)
Parameter Summary: Length threshold value for "shortness".
Parameter: subdomain (Interval)
Parameter Summary: The test is performed on the interval that is the intersection of sub-domain with Domain()

Method: Rhino.Geometry.Curve.IsShort(double tolerance)
Return: bool
Modifiers: public
Summary: Used to quickly find short curves.
Parameter: tolerance (double)
Parameter Summary: Length threshold value for "shortness".

Method: Rhino.Geometry.Curve.LcoalClosestPoint(Point3d testPoint, double seed, out double t)
Return: bool
Modifiers: public
Summary: Find parameter of the point on a curve that is locally closest to the testPoint. The search for a local close point starts at a seed parameter.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seed (double)
Parameter Summary: The seed parameter.
Parameter: t (double)
Parameter Summary: >Parameter of the curve that is closest to testPoint.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, double fractionalTolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the sub-domain.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the start of the sub-domain to t is s.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve rather than the whole curve.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, double fractionalTolerance)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the curve start point to t equals s.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, Interval subdomain)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the sub-domain.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the start of the sub-domain to t is s.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve rather than the whole curve.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the curve start point to t equals length.

Method: Rhino.Geometry.Curve.LocalClosestPoint(Point3d testPoint, double seed, out double t)
Return: bool
Modifiers: public
Summary: Find parameter of the point on a curve that is locally closest to the testPoint. The search for a local close point starts at a seed parameter.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seed (double)
Parameter Summary: The seed parameter.
Parameter: t (double)
Parameter Summary: >Parameter of the curve that is closest to testPoint.

Method: Rhino.Geometry.Curve.MakeClosed(double tolerance)
Return: bool
Modifiers: public
Summary: If IsClosed, just return true. Otherwise, decide if curve can be closed as follows: Linear curves polylinear curves with 2 segments, NURBS with 3 or less control points cannot be made closed. Also, if tolerance > 0 and the gap between start and end is larger than tolerance, curve cannot be made closed. Adjust the curve's endpoint to match its start point.
Parameter: tolerance (double)
Parameter Summary: If nonzero, and the gap is more than tolerance, curve cannot be made closed.

Method: Rhino.Geometry.Curve.MaxCurvaturePoints()
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's maximum curvature points. The maximum curvature points identify where the curvature starts to decrease in both directions from the points.

Method: Rhino.Geometry.Curve.MaxCurvaturePoints(out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's maximum curvature points. The maximum curvature points identify where the curvature starts to decrease in both directions from the points.
Parameter: curveParameters (double)
Parameter Summary: An array of curve parameters at the maximum curvature points.

Method: Rhino.Geometry.Curve.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: For derived classes implementers.
Defines the necessary implementation to free the instance from being constant.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, double fractionalTolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, double fractionalTolerance)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, Interval subdomain)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, double fractionalTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision for each segment. fabs("true" length - actual length)/(actual length) <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve. A 0.0 s value corresponds to sub-domain->Min() and a 1.0 s value corresponds to sub-domain->Max().

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, double fractionalTolerance)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision for each segment. fabs("true" length - actual length)/(actual length) <= fractionalTolerance.

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve. A 0.0 s value corresponds to sub-domain->Min() and a 1.0 s value corresponds to sub-domain->Max().

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.

Method: Rhino.Geometry.Curve.Offset(Plane plane, double distance, double tolerance, CurveOffsetCornerStyle cornerStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: plane (Plane)
Parameter Summary: Offset solution plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.

Method: Rhino.Geometry.Curve.Offset(Point3d directionPoint, Vector3d normal, double distance, double tolerance, CurveOffsetCornerStyle cornerStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset.
Parameter: normal (Vector3d)
Parameter Summary: The normal to the offset plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.

Method: Rhino.Geometry.Curve.Offset(Point3d directionPoint, Vector3d normal, double distance, double tolerance, double angleTolerance, bool loose, CurveOffsetCornerStyle cornerStyle, CurveOffsetEndStyle endStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset.
Parameter: normal (Vector3d)
Parameter Summary: The normal to the offset plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance, in radians, used to decide whether to split at kinks.
Parameter: loose (bool)
Parameter Summary: If false, offset within tolerance. If true, offset by moving edit points.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.
Parameter: endStyle (CurveOffsetEndStyle)
Parameter Summary: End style for non-loose, non-closed curve offsets.

Method: Rhino.Geometry.Curve.OffsetNormalToSurface(Surface surface, double height)
Return: Curve
Modifiers: public
Summary: Finds a curve by offsetting an existing curve normal to a surface. The caller is responsible for ensuring that the curve lies on the input surface.
Parameter: surface (Surface)
Parameter Summary: Surface from which normals are calculated.
Parameter: height (double)
Parameter Summary: Offset distance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, double curveParameters, double offsetDistances, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a brep face surface. This curve must lie on the surface.
This overload allows to specify different offsets for different curve parameters. | Parameter: face (BrepFace) | Parameter Summary: The brep face on which to offset. | Parameter: curveParameters (double) | Parameter Summary: Curve parameters corresponding to the offset distances. | Parameter: offsetDistances (double) | Parameter Summary: distances to offset (+)left, (-)right. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, double distance, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset this curve on a brep face surface. This curve must lie on the surface.
Parameter: face (BrepFace)
Parameter Summary: The brep face on which to offset.
Parameter: distance (double)
Parameter Summary: A distance to offset (+)left, (-)right.
Parameter: fittingTolerance (double)
Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, Point2d throughPoint, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a brep face surface. This curve must lie on the surface.
This overload allows to specify a surface point at which the offset will pass. | Parameter: face (BrepFace) | Parameter Summary: The brep face on which to offset. | Parameter: throughPoint (Point2d) | Parameter Summary: 2d point on the brep face to offset through. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, double curveParameters, double offsetDistances, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset this curve on a surface. This curve must lie on the surface.
This overload allows to specify different offsets for different curve parameters. | Parameter: surface (Surface) | Parameter Summary: A surface on which to offset. | Parameter: curveParameters (double) | Parameter Summary: Curve parameters corresponding to the offset distances. | Parameter: offsetDistances (double) | Parameter Summary: Distances to offset (+)left, (-)right. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, double distance, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a surface. This curve must lie on the surface.
Parameter: surface (Surface)
Parameter Summary: A surface on which to offset.
Parameter: distance (double)
Parameter Summary: A distance to offset (+)left, (-)right.
Parameter: fittingTolerance (double)
Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, Point2d throughPoint, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a surface. This curve must lie on the surface.
This overload allows to specify a surface point at which the offset will pass. | Parameter: surface (Surface) | Parameter Summary: A surface on which to offset. | Parameter: throughPoint (Point2d) | Parameter Summary: 2d point on the brep face to offset through. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetTangentToSurface(Surface surface, double height)
Return: Curve
Modifiers: public
Summary: Finds a curve by offsetting an existing curve tangent to a surface. The caller is responsible for ensuring that the curve lies on the input surface.
Parameter: surface (Surface)
Parameter Summary: Surface from which tangents are calculated.
Parameter: height (double)
Parameter Summary: Offset distance.

Method: Rhino.Geometry.Curve.PerpendicularFrameAt(double t, out Plane plane)
Return: bool
Modifiers: public
Summary: Return a 3d frame at a parameter. This is slightly different than FrameAt in that the frame is computed in a way so there is minimal rotation from one frame to the next.
Parameter: t (double)
Parameter Summary: Evaluation parameter.
Parameter: plane (Plane)
Parameter Summary: The frame is returned here.

Method: Rhino.Geometry.Curve.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.PointAtLength(double length)
Return: Point3d
Modifiers: public
Summary: Gets a point at a certain length along the curve. The length must be non-negative and less than or equal to the length of the curve. Lengths will not be wrapped when the curve is closed or periodic.
Parameter: length (double)
Parameter Summary: Length along the curve between the start point and the returned point.

Method: Rhino.Geometry.Curve.PointAtNormalizedLength(double length)
Return: Point3d
Modifiers: public
Summary: Gets a point at a certain normalized length along the curve. The length must be between or including 0.0 and 1.0, where 0.0 equals the start of the curve and 1.0 equals the end of the curve.
Parameter: length (double)
Parameter Summary: Normalized length along the curve between the start point and the returned point.

Method: Rhino.Geometry.Curve.PullToBrepFace(BrepFace face, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Pulls this curve to a brep face and returns the result of that operation.
Parameter: face (BrepFace)
Parameter Summary: A brep face.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.PullToMesh(Mesh mesh, double tolerance)
Return: PolylineCurve
Modifiers: public
Summary: Makes a polyline approximation of the curve and gets the closest point on the mesh for each point on the curve. Then it "connects the points" so that you have a polyline on the mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to project onto.
Parameter: tolerance (double)
Parameter Summary: Input tolerance (RhinoDoc.ModelAbsoluteTolerance is a good default)

Method: Rhino.Geometry.Curve.Rebuild(int pointCount, int degree, bool preserveTangents)
Return: NurbsCurve
Modifiers: public
Summary: Rebuild a curve with a specific point count.
Parameter: pointCount (int)
Parameter Summary: Number of control points in the rebuild curve.
Parameter: degree (int)
Parameter Summary: Degree of curve. Valid values are between and including 1 and 11.
Parameter: preserveTangents (bool)
Parameter Summary: If true, the end tangents of the input curve will be preserved.

Method: Rhino.Geometry.Curve.RemoveShortSegments(double tolerance)
Return: bool
Modifiers: public
Summary: Looks for segments that are shorter than tolerance that can be removed. Does not change the domain, but it will change the relative parameterization.
Parameter: tolerance (double)
Parameter Summary: Tolerance which defines "short" segments.

Method: Rhino.Geometry.Curve.Repair(double tolerance)
Return: bool
Modifiers: public
Summary: Repairs a curve.
Parameter: tolerance (double)
Parameter Summary: The repair tolerance.

Method: Rhino.Geometry.Curve.Reparameterize()
Return: Curve
Modifiers: public
Summary: Reparameterizes a curve using automatic parameterization.

Method: Rhino.Geometry.Curve.Reverse()
Return: bool
Modifiers: public
Summary: Reverses the direction of the curve.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance, out Curve[] crossSections, out Surface[] ruledSurfaces)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.
Parameter: crossSections (Curve[])
Parameter Summary: Contains lines between input and the offset that might be useful as input to Brep.CreateFromSweep or some other surface creation tool.
Parameter: ruledSurfaces (Surface[])
Parameter Summary: Contain ruled surfaces between the input and the parts of the offset that correspond exactly. Note, there will be gaps between these at blends.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance, out double outputParameters, out double curveParameters)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.
Parameter: outputParameters (double)
Parameter Summary: A list of parameter, paired with curveParameters, from the output curve for creating cross sections.
Parameter: curveParameters (double)
Parameter Summary: A list of parameter, paired with outputParameters, from the input curve for creating cross sections.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.

Method: Rhino.Geometry.Curve.RibbonOffset(RibbonOffsetParameters ribbonParameters, out Curve[] railCurves, out Curve[] crossSectionCurves, out Brep[] brepSurfaces)
Return: Curve
Modifiers: public
Summary: Ribbon offset method to mimic RibbonOffset command
Parameter: ribbonParameters (RibbonOffsetParameters)
Parameter Summary: The ribbon offset parameters
Parameter: railCurves (Curve[])
Parameter Summary: on success an array of split curves representing the sweep rail segments, None on failure
Parameter: crossSectionCurves (Curve[])
Parameter Summary: on success an array of cross section curves used during brep creation, None on failure
Parameter: brepSurfaces (Brep[])
Parameter Summary: on success and array of breps representing the ribbon surfaces, None on failure

Method: Rhino.Geometry.Curve.SetEndPoint(Point3d point)
Return: bool
Modifiers: public
Summary: Forces the curve to end at a specified point. Not all curve types support this operation.
Parameter: point (Point3d)
Parameter Summary: New end point of curve.

Method: Rhino.Geometry.Curve.SetStartPoint(Point3d point)
Return: bool
Modifiers: public
Summary: Forces the curve to start at a specified point. Not all curve types support this operation.
Parameter: point (Point3d)
Parameter Summary: New start point of curve.

Method: Rhino.Geometry.Curve.Simplify(CurveSimplifyOptions options, double distanceTolerance, double angleToleranceRadians)
Return: Curve
Modifiers: public
Summary: Returns a geometrically equivalent PolyCurve.
The PolyCurve has the following properties
1. All the PolyCurve segments are LineCurve, PolylineCurve, ArcCurve, or NurbsCurve.
2. The NURBS Curves segments do not have fully multiple interior knots.
3. Rational NURBS curves do not have constant weights.
4. Any segment for which IsLinear() or IsArc() is True is a Line, Polyline segment, or an Arc.
5. Adjacent co-linear or co-circular segments are combined.
6. Segments that meet with G1-continuity have there ends tuned up so that they meet with G1-continuity to within machine precision. | Parameter: options (CurveSimplifyOptions) | Parameter Summary: Simplification options. | Parameter: distanceTolerance (double) | Parameter Summary: A distance tolerance for the simplification. | Parameter: angleToleranceRadians (double) | Parameter Summary: An angle tolerance for the simplification.

Method: Rhino.Geometry.Curve.SimplifyEnd(CurveEnd end, CurveSimplifyOptions options, double distanceTolerance, double angleToleranceRadians)
Return: Curve
Modifiers: public
Summary: Same as SimplifyCurve, but simplifies only the last two segments at "side" end.
Parameter: end (CurveEnd)
Parameter Summary: If CurveEnd.Start the function simplifies the last two start side segments, otherwise if CurveEnd.End the last two end side segments are simplified.
Parameter: options (CurveSimplifyOptions)
Parameter Summary: Simplification options.
Parameter: distanceTolerance (double)
Parameter Summary: A distance tolerance for the simplification.
Parameter: angleToleranceRadians (double)
Parameter Summary: An angle tolerance for the simplification.

Method: Rhino.Geometry.Curve.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: Curve
Modifiers: public
Summary: Smooths a curve by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points. Note that this smoothFactor is equivalent to twice the smooth factor used in the Smooth command: on a polyline, Rhino _Smooth with a factor of 0.2 is the same as <b>Polyline.Smooth(double)</b> with a factor of 0.4.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the curve ends don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Curve.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: Curve
Modifiers: public
Summary: Smooths a curve by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points. Note that this smoothFactor is equivalent to twice the smooth factor used in the Smooth command: on a polyline, Rhino _Smooth with a factor of 0.2 is the same as <b>Polyline.Smooth(double)</b> with a factor of 0.4.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the curve ends don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Curve.SpanDomain(int spanIndex)
Return: Interval
Modifiers: public
Summary: Get the domain of the curve span with the given index. Use the SpanCount property to test how many spans there are.
Parameter: spanIndex (int)
Parameter Summary: Index of span.

Method: Rhino.Geometry.Curve.SpanVector()
Return: double
Modifiers: public

Method: Rhino.Geometry.Curve.Split(Brep cutter, double tolerance, double angleToleranceRadians)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a polysurface.
Parameter: cutter (Brep)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.
Parameter: angleToleranceRadians (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.Split(Brep cutter, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a polysurface.
Parameter: cutter (Brep)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.

Method: Rhino.Geometry.Curve.Split(double t)
Return: Curve[]
Modifiers: public
Summary: Splits (divides) the curve at the specified parameter. The parameter must be in the interior of the curve's domain.
Parameter: t (double)
Parameter Summary: Parameter to split the curve at in the interval returned by Domain().

Method: Rhino.Geometry.Curve.Split(IEnumerable<double> t)
Return: Curve[]
Modifiers: public
Summary: Splits (divides) the curve at a series of specified parameters. The parameter must be in the interior of the curve domain.
Parameter: t (IEnumerable<double>)
Parameter Summary: Parameters to split the curve at in the interval returned by Domain().

Method: Rhino.Geometry.Curve.Split(Surface cutter, double tolerance, double angleToleranceRadians)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a surface.
Parameter: cutter (Surface)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.
Parameter: angleToleranceRadians (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.Split(Surface cutter, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a surface.
Parameter: cutter (Surface)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.

Method: Rhino.Geometry.Curve.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.ToArcsAndLines(double tolerance, double angleTolerance, double minimumLength, double maximumLength)
Return: PolyCurve
Modifiers: public
Summary: Converts a curve into polycurve consisting of arc segments. Sections of the input curves that are nearly straight are converted to straight-line segments.
Parameter: tolerance (double)
Parameter Summary: The tolerance. This is the maximum deviation from arc midpoints to the curve. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. This is the maximum deviation of the arc end directions from the curve direction. When in doubt, use the document's model space angle tolerance.
Parameter: minimumLength (double)
Parameter Summary: The minimum segment length.
Parameter: maximumLength (double)
Parameter Summary: The maximum segment length.

Method: Rhino.Geometry.Curve.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.

Method: Rhino.Geometry.Curve.ToNurbsCurve(Interval subdomain)
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.
Parameter: subdomain (Interval)
Parameter Summary: The NURBS representation for this portion of the curve is returned.

Method: Rhino.Geometry.Curve.ToPolyline(double tolerance, double angleTolerance, double minimumLength, double maximumLength)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: tolerance (double)
Parameter Summary: The tolerance. This is the maximum deviation from line midpoints to the curve. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. This is the maximum deviation of the line directions. When in doubt, use the document's model space angle tolerance.
Parameter: minimumLength (double)
Parameter Summary: The minimum segment length.
Parameter: maximumLength (double)
Parameter Summary: The maximum segment length.

Method: Rhino.Geometry.Curve.ToPolyline(int mainSegmentCount, int subSegmentCount, double maxAngleRadians, double maxChordLengthRatio, double maxAspectRatio, double tolerance, double minEdgeLength, double maxEdgeLength, bool keepStartPoint, Interval curveDomain)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: mainSegmentCount (int)
Parameter Summary: If mainSegmentCount <= 0, then both subSegmentCount and mainSegmentCount are ignored. If mainSegmentCount > 0, then subSegmentCount must be >= 1. In this case the NURBS will be broken into mainSegmentCount equally spaced chords. If needed, each of these chords can be split into as many subSegmentCount sub-parts if the subdivision is necessary for the mesh to meet the other meshing constraints. In particular, if subSegmentCount = 0, then the curve is broken into mainSegmentCount pieces and no further testing is performed.
Parameter: subSegmentCount (int)
Parameter Summary: An amount of subsegments.
Parameter: maxAngleRadians (double)
Parameter Summary: ( 0 to pi ) Maximum angle (in radians) between unit tangents at adjacent vertices.
Parameter: maxChordLengthRatio (double)
Parameter Summary: Maximum permitted value of (distance chord midpoint to curve) / (length of chord).
Parameter: maxAspectRatio (double)
Parameter Summary: If maxAspectRatio < 1.0, the parameter is ignored. If 1 <= maxAspectRatio < sqrt(2), it is treated as if maxAspectRatio = sqrt(2). This parameter controls the maximum permitted value of (length of longest chord) / (length of shortest chord).
Parameter: tolerance (double)
Parameter Summary: If tolerance = 0, the parameter is ignored. This parameter controls the maximum permitted value of the distance from the curve to the polyline.
Parameter: minEdgeLength (double)
Parameter Summary: The minimum permitted edge length.
Parameter: maxEdgeLength (double)
Parameter Summary: If maxEdgeLength = 0, the parameter is ignored. This parameter controls the maximum permitted edge length.
Parameter: keepStartPoint (bool)
Parameter Summary: If True the starting point of the curve is added to the polyline. If False the starting point of the curve is not added to the polyline.
Parameter: curveDomain (Interval)
Parameter Summary: This sub-domain of the NURBS curve is approximated.

Method: Rhino.Geometry.Curve.ToPolyline(int mainSegmentCount, int subSegmentCount, double maxAngleRadians, double maxChordLengthRatio, double maxAspectRatio, double tolerance, double minEdgeLength, double maxEdgeLength, bool keepStartPoint)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: mainSegmentCount (int)
Parameter Summary: If mainSegmentCount <= 0, then both subSegmentCount and mainSegmentCount are ignored. If mainSegmentCount > 0, then subSegmentCount must be >= 1. In this case the NURBS will be broken into mainSegmentCount equally spaced chords. If needed, each of these chords can be split into as many subSegmentCount sub-parts if the subdivision is necessary for the mesh to meet the other meshing constraints. In particular, if subSegmentCount = 0, then the curve is broken into mainSegmentCount pieces and no further testing is performed.
Parameter: subSegmentCount (int)
Parameter Summary: An amount of subsegments.
Parameter: maxAngleRadians (double)
Parameter Summary: ( 0 to pi ) Maximum angle (in radians) between unit tangents at adjacent vertices.
Parameter: maxChordLengthRatio (double)
Parameter Summary: Maximum permitted value of (distance chord midpoint to curve) / (length of chord).
Parameter: maxAspectRatio (double)
Parameter Summary: If maxAspectRatio < 1.0, the parameter is ignored. If 1 <= maxAspectRatio < sqrt(2), it is treated as if maxAspectRatio = sqrt(2). This parameter controls the maximum permitted value of (length of longest chord) / (length of shortest chord).
Parameter: tolerance (double)
Parameter Summary: If tolerance = 0, the parameter is ignored. This parameter controls the maximum permitted value of the distance from the curve to the polyline.
Parameter: minEdgeLength (double)
Parameter Summary: The minimum permitted edge length.
Parameter: maxEdgeLength (double)
Parameter Summary: If maxEdgeLength = 0, the parameter is ignored. This parameter controls the maximum permitted edge length.
Parameter: keepStartPoint (bool)
Parameter Summary: If True the starting point of the curve is added to the polyline. If False the starting point of the curve is not added to the polyline.

Method: Rhino.Geometry.Curve.TorsionAt(double t)
Return: double
Modifiers: public
Summary: Evaluate the torsion of a curve at a parameter. Sometimes also called the "second curvature", torsion is the rate of change of a curve's osculating plane.
Parameter: t (double)
Parameter Summary: The evaluation parameter.

Method: Rhino.Geometry.Curve.Trim(CurveEnd side, double length)
Return: Curve
Modifiers: public
Summary: Shortens a curve by a given length

Method: Rhino.Geometry.Curve.Trim(double t0, double t1)
Return: Curve
Modifiers: public
Summary: Removes portions of the curve outside the specified interval.
Parameter: t0 (double)
Parameter Summary: Start of the trimming interval. Portions of the curve before curve(t0) are removed.
Parameter: t1 (double)
Parameter Summary: End of the trimming interval. Portions of the curve after curve(t1) are removed.

Method: Rhino.Geometry.Curve.Trim(Interval domain)
Return: Curve
Modifiers: public
Summary: Removes portions of the curve outside the specified interval.
Parameter: domain (Interval)
Parameter Summary: Trimming interval. Portions of the curve before curve(domain[0]) and after curve(domain[1]) are removed.

Method: Rhino.Geometry.Curve.TryGetArc(out Arc arc, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using a custom tolerance.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetArc(out Arc arc)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.

Method: Rhino.Geometry.Curve.TryGetArc(Plane plane, out Arc arc, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using a custom tolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetArc(Plane plane, out Arc arc)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.

Method: Rhino.Geometry.Curve.TryGetCircle(out Circle circle, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into a Circle using a custom tolerance.
Parameter: circle (Circle)
Parameter Summary: On success, the Circle will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetCircle(out Circle circle)
Return: bool
Modifiers: public
Summary: Try to convert this curve into a circle using RhinoMath.ZeroTolerance.
Parameter: circle (Circle)
Parameter Summary: On success, the Circle will be filled in.

Method: Rhino.Geometry.Curve.TryGetEllipse(out Ellipse ellipse, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse using a custom tolerance.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetEllipse(out Ellipse ellipse)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.

Method: Rhino.Geometry.Curve.TryGetEllipse(Plane plane, out Ellipse ellipse, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse using a custom tolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetEllipse(Plane plane, out Ellipse ellipse)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.

Method: Rhino.Geometry.Curve.TryGetPlane(out Plane plane, double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Test a curve for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.

Method: Rhino.Geometry.Curve.TryGetPolyline(out Polyline polyline, out double parameters)
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.
Parameter: polyline (Polyline)
Parameter Summary: If True is returned, then the polyline form is returned here.
Parameter: parameters (double)
Parameter Summary: if True is returned, then the parameters of the polyline points are returned here.

Method: Rhino.Geometry.Curve.TryGetPolyline(out Polyline polyline)
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.
Parameter: polyline (Polyline)
Parameter Summary: If True is returned, then the polyline form is returned here.

Class: Rhino.Geometry.CurveBooleanRegions
Summary: Represents the results of a Curve.CreateBooleanRegions calculation.

Constructor: Rhino.Geometry.CurveBooleanRegions.CurveBooleanRegions(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.CurveBooleanRegions.PlanarCurveCount
Return: int
Modifiers: public
Summary: Returns number of planar curves that were calculated by Curve.CreateBooleanRegions.
Accessors: get

Property: Rhino.Geometry.CurveBooleanRegions.PointCount
Return: int
Modifiers: public
Summary: If this object were created using the Curve.CreateBooleanRegions override that accepts a collection of points as input, then this value will be equal to the length of the points collection.
Accessors: get

Property: Rhino.Geometry.CurveBooleanRegions.RegionCount
Return: int
Modifiers: public
Summary: Returns the number of curve regions. A curve region is a collection of curves that bound a single connected region of the plane.
Accessors: get

Method: Rhino.Geometry.CurveBooleanRegions.BoundaryCount(int regionIndex)
Return: int
Modifiers: public
Summary: Returns the number of boundary curves in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.

Method: Rhino.Geometry.CurveBooleanRegions.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.CurveBooleanRegions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method. You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true. Also, you must call the base virtual method within your overriding method.

Method: Rhino.Geometry.CurveBooleanRegions.PlanarCurve(int planarCurveIndex)
Return: Curve
Modifiers: public
Summary: Returns a planar curve that was calculated by Curve.CreateBooleanRegions.

Method: Rhino.Geometry.CurveBooleanRegions.RegionCurves(int regionIndex)
Return: Curve[]
Modifiers: public
Summary: Returns the boundary curves in a curve region. A curve region is a collection of curves that bound a single connected region of the plane. Note, the first curve is always the outer boundary.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.

Method: Rhino.Geometry.CurveBooleanRegions.RegionPointIndex(int pointIndex)
Return: int
Modifiers: public
Summary: If this object were created using the Curve.CreateBooleanRegions override that accepts a collection of points as input, then you this method to retrieve the index of the point contained in a curve region. If this.RegionPointIndex(i) = n, then points[i] is contained in this.RegionCurves(n). If points[i] is not in any region, then this.RegionPointIndex(i) = -1.
Parameter: pointIndex (int)
Parameter Summary: The point index.

Method: Rhino.Geometry.CurveBooleanRegions.SegmentCount(int regionIndex, int boundaryIndex)
Return: int
Modifiers: public
Summary: Returns the number of segments in a boundary curve in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.
Parameter: boundaryIndex (int)
Parameter Summary: The boundary curve index.

Method: Rhino.Geometry.CurveBooleanRegions.SegmentDetails(int regionIndex, int boundaryIndex, int segmmentIndex, out Interval subDomain, out bool reversed)
Return: int
Modifiers: public
Summary: Returns the details of a segment in a boundary curve in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.
Parameter: boundaryIndex (int)
Parameter Summary: The boundary curve index.
Parameter: segmmentIndex (int)
Parameter Summary: The segment index.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the planar curve used by the segment.
Parameter: reversed (bool)
Parameter Summary: True if the piece of the planar curve should be reversed.

Class: Rhino.Geometry.CurveProxy
Summary: Represent curve geometry. Usually this is part of another piece of geometry that can be represented as a "proxy".

Constructor: Rhino.Geometry.CurveProxy.CurveProxy()
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.CurveProxy.ProxyCurveIsReversed
Return: bool
Modifiers: public
Summary: True if "this" is a curve is reversed from the "real" curve geometry
Accessors: get

Class: Rhino.Geometry.DetailView
Summary: Represents a view of the model placed on a page layout.

Constructor: Rhino.Geometry.DetailView.DetailView(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.DetailView.IsParallelProjection
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is parallel.
Accessors: get set

Property: Rhino.Geometry.DetailView.IsPerspectiveProjection
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is perspective.
Accessors: get set

Property: Rhino.Geometry.DetailView.IsProjectionLocked
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is locked.
Accessors: get set

Property: Rhino.Geometry.DetailView.PageToModelRatio
Return: double
Modifiers: public
Summary: Gets the page units/model units quotient.
Accessors: get

Method: Rhino.Geometry.DetailView.SetScale(double modelLength, Rhino.UnitSystem modelUnits, double pageLength, Rhino.UnitSystem pageUnits)
Return: bool
Modifiers: public
Summary: Sets the detail viewport's projection so geometry is displayed at a certain scale.
Parameter: modelLength (double)
Parameter Summary: Reference model length.
Parameter: modelUnits (Rhino.UnitSystem)
Parameter Summary: Units for model length.
Parameter: pageLength (double)
Parameter Summary: Length on page that the modelLength should equal.
Parameter: pageUnits (Rhino.UnitSystem)
Parameter Summary: Units for page length.

Class: Rhino.Geometry.DevelopableSrf
Summary: Helpers for developable surface functions

Constructor: Rhino.Geometry.DevelopableSrf.DevelopableSrf()
Summary: Initializes a new instance of the DevelopableSrf class

Method: Rhino.Geometry.DevelopableSrf.GetLocalDevopableRuling(NurbsCurve rail0, double t0, Interval dom0, NurbsCurve rail1, double t1, Interval dom1, ref double t0_out, ref double t1_out)
Return: int
Modifiers: static, public
Summary: Finds minimum twist ruling between 2 curves at local domains
Parameter: rail0 (NurbsCurve)
Parameter Summary: First rail
Parameter: t0 (double)
Parameter Summary: Seed parameter on first rail
Parameter: dom0 (Interval)
Parameter Summary: Parameter sub-domain to adjust in on first rail
Parameter: rail1 (NurbsCurve)
Parameter Summary: Second rail
Parameter: t1 (double)
Parameter Summary: Seed parameter on second rail
Parameter: dom1 (Interval)
Parameter Summary: Parameter sub-domain to adjust in on second rail
Parameter: t0_out (double)
Parameter Summary: Result ruling on first rail
Parameter: t1_out (double)
Parameter Summary: Result ruling on second rail

Method: Rhino.Geometry.DevelopableSrf.RulingMinTwist(NurbsCurve rail0, double t0, Interval dom0, NurbsCurve rail1, double t1, Interval dom1, ref double t0_out, ref double t1_out, ref double cos_twist_out)
Return: bool
Modifiers: static, public
Summary: Find a ruling from rail0(t0_out) to rail1(t1_out) that has the least twist across the ruling with t0_out in domain0 and t1_out in domain1. max_cos_twist is cos(twist) for the returned ruling

Method: Rhino.Geometry.DevelopableSrf.RulingMinTwist(NurbsCurve rail0, double t0, NurbsCurve rail1, double t1, Interval dom1, ref double t1_out, ref double cos_twist_out)
Return: bool
Modifiers: static, public
Summary: Find a ruling from rail0(t0) to rail1(t1_out) that has the least twist across the ruling with t1_out in domain1. max_cos_twist is cos(twist) for the returned ruling

Method: Rhino.Geometry.DevelopableSrf.UntwistRulings(NurbsCurve rail0, NurbsCurve rail1, ref IEnumerable<Point2d> rulings)
Return: bool
Modifiers: static, public

Class: Rhino.Geometry.Dimension
Summary: Base class for dimensions

Constructor: Rhino.Geometry.Dimension.Dimension()

Constructor: Rhino.Geometry.Dimension.Dimension(SerializationInfo info, StreamingContext context)

Property: Rhino.Geometry.Dimension.AlternateBelowLine
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltPrefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltSuffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltUnitsDisplay
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowBlockId1
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowBlockId2
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowFit
Return: ArrowFit
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowheadType1
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowheadType2
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.BaselineSpacing
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.CentermarkSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.CentermarkStyle
Return: CenterMarkStyle
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DetailMeasured
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DimensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DistanceScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ExtensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ExtensionLineOffset
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.FixedExtensionLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.FixedLengthExtensionOn
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceArrowPosition
Return: ForceArrow
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceDimensionLineBetweenExtensionLines
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceDimLine
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceTextPosition
Return: ForceText
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.NumericValue
Return: double
Modifiers: public
Summary: Gets the numeric value (or measurement), depending on geometry type.
LinearDimension: distance between arrow tips
RadialDimension: radius or diameter depending on type
AngularDimension: angle in radians | Accessors: get

Property: Rhino.Geometry.Dimension.PlainUserText
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Geometry.Dimension.Prefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.Suffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.SuppressExtension1
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.SuppressExtension2
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.TextAngleType
Return: LeaderContentAngleStyle
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextFit
Return: TextFit
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.TextFormula
Return: string
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.Dimension.TextLocation
Return: TextLocation
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextOrientation
Return: TextOrientation
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextPosition
Return: Point2d
Modifiers: public
Summary: Gets and sets the position of text on the plane.
Accessors: get set

Property: Rhino.Geometry.Dimension.TextRotation
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceFormat
Return: ToleranceDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceHeightScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceLowerValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceUpperValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.UseDefaultTextPoint
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.Dimension.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Explodes this dimension into its geometric components.

Method: Rhino.Geometry.Dimension.GetTextTransform(ViewportInfo viewport, DimensionStyle style, double textScale, bool drawForward)
Return: Transform
Modifiers: public
Summary: Get the transform for this text object's text geometry
Parameter: viewport (ViewportInfo)
Parameter Summary: Viewport where text is being used
Parameter: style (DimensionStyle)
Parameter Summary: Dimension's DimensionStyle
Parameter: textScale (double)
Parameter Summary: Scale to apply to text
Parameter: drawForward (bool)
Parameter Summary: Draw text front-facing

Method: Rhino.Geometry.Dimension.SetAltDimensionLengthDisplayWithZeroSuppressionReset(DimensionStyle.LengthDisplay ld)
Return: void
Modifiers: public

Method: Rhino.Geometry.Dimension.SetDimensionLengthDisplayWithZeroSuppressionReset(DimensionStyle.LengthDisplay ld)
Return: void
Modifiers: public

Method: Rhino.Geometry.Dimension.UpdateDimensionText(DimensionStyle style, UnitSystem units)
Return: void
Modifiers: public
Summary: Remakes dimension text geometry object and sets it on the dimension.
Parameter: style (DimensionStyle)
Parameter Summary: The dimension style.
Parameter: units (UnitSystem)
Parameter Summary: The unit system.

Class: Rhino.Geometry.Extrusion
Summary: Represents an extrusion, or objects such as beams or linearly extruded elements, that can be represented by profile curves and two miter planes at the extremes.

Constructor: Rhino.Geometry.Extrusion.Extrusion()
Summary: Initializes a new instance of the <b>Extrusion</b> class.

Constructor: Rhino.Geometry.Extrusion.Extrusion(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor.

Property: Rhino.Geometry.Extrusion.CapCount
Return: int
Modifiers: public
Summary: Gets the amount of capping surfaces.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsCappedAtBottom
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the surface that fills the bottom profile is existing.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsCappedAtTop
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the surface that fills the top profile is existing.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsMiteredAtEnd
Return: bool
Modifiers: public
Summary: Gets a value indicating whether a miter plane at the end is defined.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsMiteredAtStart
Return: bool
Modifiers: public
Summary: Returns a value indicating whether a miter plane at start is defined.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsSolid
Return: bool
Modifiers: public, override
Summary: Gets a value indicating whether there is no gap among all surfaces constructing this object.
Accessors: get

Property: Rhino.Geometry.Extrusion.MiterPlaneNormalAtEnd
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal of the miter plane at the end in profile coordinates. In profile coordinates, 0,0,1 always maps to the extrusion axis
Accessors: get set

Property: Rhino.Geometry.Extrusion.MiterPlaneNormalAtStart
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal of the miter plane at the start in profile coordinates. In profile coordinates, 0,0,1 always maps to the extrusion axis
Accessors: get set

Property: Rhino.Geometry.Extrusion.PathEnd
Return: Point3d
Modifiers: public
Summary: Gets the end point of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.PathStart
Return: Point3d
Modifiers: public
Summary: Gets the start point of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.PathTangent
Return: Vector3d
Modifiers: public
Summary: Gets the up vector of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.ProfileCount
Return: int
Modifiers: public
Summary: Gets the amount of profile curves.
Accessors: get

Method: Rhino.Geometry.Extrusion.Create(Curve planarCurve, double height, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Creates an extrusion of a 3d curve (which must be planar) and a height.
Parameter: planarCurve (Curve)
Parameter Summary: Planar curve used as profile
Parameter: height (double)
Parameter Summary: If the height > 0, the bottom of the extrusion will be in plane and the top will be height units above the plane. If the height < 0, the top of the extrusion will be in plane and the bottom will be height units below the plane. The plane used is the one that is returned from the curve's TryGetPlane function.
Parameter: cap (bool)
Parameter Summary: If the curve is closed and cap is true, then the resulting extrusion is capped.

Method: Rhino.Geometry.Extrusion.Create(Curve curve, Plane plane, double height, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Create an extrusion from a 3d curve, a plane and a height.
Parameter: curve (Curve)
Parameter Summary: A continuous 3d curve.
Parameter: plane (Plane)
Parameter Summary: A plane. The 3d curve is projected to this plane and the result is passed to <b>Extrusion.SetOuterProfile</b> .
Parameter: height (double)
Parameter Summary: If the height > 0, the bottom of the extrusion will be in plane and the top will be height units above the plane. If the height < 0, the top of the extrusion will be in plane and the bottom will be height units below the plane. The plane used is the one that is returned from the curve's TryGetPlane function.
Parameter: cap (bool)
Parameter Summary: If the curve is closed and cap is true, then the resulting extrusion is capped.

Method: Rhino.Geometry.Extrusion.CreateBoxExtrusion(Box box, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion from a box.
Parameter: box (Box)
Parameter Summary: IsValid must be true.
Parameter: cap (bool)
Parameter Summary: If true, the base and the top of the box will be capped. Defaults to true.

Method: Rhino.Geometry.Extrusion.CreateCylinderExtrusion(Cylinder cylinder, bool capBottom, bool capTop)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion form of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: IsFinite must be true.
Parameter: capBottom (bool)
Parameter Summary: If true, the end at cylinder.Height1 will be capped.
Parameter: capTop (bool)
Parameter Summary: If true, the end at cylinder.Height2 will be capped.

Method: Rhino.Geometry.Extrusion.CreatePipeExtrusion(Cylinder cylinder, double otherRadius, bool capTop, bool capBottom)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion form of a pipe.
Parameter: cylinder (Cylinder)
Parameter Summary: IsFinite must be true.
Parameter: otherRadius (double)
Parameter Summary: If cylinder.Radius is less than other radius, then the cylinder will be the inside of the pipe.
Parameter: capTop (bool)
Parameter Summary: If true, the end at cylinder.Height2 will be capped.
Parameter: capBottom (bool)
Parameter Summary: If true, the end at cylinder.Height1 will be capped.

Method: Rhino.Geometry.Extrusion.AddInnerProfile(Curve innerProfile)
Return: bool
Modifiers: public
Summary: Adds an inner profile.
Parameter: innerProfile (Curve)
Parameter Summary: Closed curve in the XY plane or a 2d curve.

Method: Rhino.Geometry.Extrusion.GetBrepFormComponentIndex(ComponentIndex extrusionComponentIndex)
Return: ComponentIndex
Modifiers: public
Summary: Convert a component index that identifies a part of this extrusion to a component index that identifies a part of the Brep created by Extrusion.ToBrep(false).
Parameter: extrusionComponentIndex (ComponentIndex)
Parameter Summary: The extrusion component index.

Method: Rhino.Geometry.Extrusion.GetMesh(MeshType meshType)
Return: Mesh
Modifiers: public
Summary: Obtains a reference to a specified type of mesh for this extrusion.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.Extrusion.GetPathPlane(double s)
Return: Plane
Modifiers: public
Summary: Gets the 3D plane perpendicular to the path at a normalized path parameter.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetProfilePlane(double s)
Return: Plane
Modifiers: public
Summary: Gets the 3D plane containing the profile curve at a normalized path parameter.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetProfileTransformation(double s)
Return: Transform
Modifiers: public
Summary: Gets the transformation that maps the XY profile curve to its 3d location.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetWireframe()
Return: Curve[]
Modifiers: public
Summary: Constructs all the Wireframe curves for this Extrusion.

Method: Rhino.Geometry.Extrusion.PathLineCurve()
Return: LineCurve
Modifiers: public
Summary: Gets the line-like curve that is the conceptual axis of the extrusion.

Method: Rhino.Geometry.Extrusion.Profile3d(ComponentIndex ci)
Return: Curve
Modifiers: public
Summary: Gets one of the profiles.
Parameter: ci (ComponentIndex)
Parameter Summary: The index of this profile.

Method: Rhino.Geometry.Extrusion.Profile3d(int profileIndex, double s)
Return: Curve
Modifiers: public
Summary: Gets a transversal isocurve of the extruded profile.
Parameter: profileIndex (int)
Parameter Summary: 0 <= profileIndex < ProfileCount The outer profile has index 0.
Parameter: s (double)
Parameter Summary: 0.0 <= s <= 1.0 A relative parameter controlling which profile is returned. 0 = bottom profile and 1 = top profile.

Method: Rhino.Geometry.Extrusion.ProfileIndex(double profileParameter)
Return: int
Modifiers: public
Summary: Gets the index of the profile curve at a domain related to a parameter.
Parameter: profileParameter (double)
Parameter Summary: Parameter on profile curve.

Method: Rhino.Geometry.Extrusion.SetMesh(Mesh mesh, MeshType meshType)
Return: bool
Modifiers: public
Summary: Sets a specified type of mesh for this extrusion.
Parameter: mesh (Mesh)
Parameter Summary: The mesh.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.Extrusion.SetOuterProfile(Curve outerProfile, bool cap)
Return: bool
Modifiers: public
Summary: Sets the outer profile of the extrusion.
Parameter: outerProfile (Curve)
Parameter Summary: curve in the XY plane or a 2D curve.
Parameter: cap (bool)
Parameter Summary: If outerProfile is a closed curve, then cap determines if the extrusion has end caps. If outerProfile is an open curve, cap is ignored.

Method: Rhino.Geometry.Extrusion.SetPathAndUp(Point3d a, Point3d b, Vector3d up)
Return: bool
Modifiers: public
Summary: Allows to set the two points at the extremes and the up vector.
Parameter: a (Point3d)
Parameter Summary: The start point.
Parameter: b (Point3d)
Parameter Summary: The end point.
Parameter: up (Vector3d)
Parameter Summary: The up vector.

Method: Rhino.Geometry.Extrusion.ToBrep(bool splitKinkyFaces)
Return: Brep
Modifiers: public
Summary: Constructs a brep form of the extrusion. The outer profile is always the first face of the brep. If there are inner profiles, additional brep faces are created for each profile. If the outer profile is closed, then end caps are added as the last two faces of the brep.
Parameter: splitKinkyFaces (bool)
Parameter Summary: If True and the profiles have kinks, then the faces corresponding to those profiles are split so they will be G1.

Method: Rhino.Geometry.Extrusion.WallEdge(ComponentIndex ci)
Return: Curve
Modifiers: public
Summary: Gets one of the longitudinal curves along the beam or extrusion.
Parameter: ci (ComponentIndex)
Parameter Summary: The index of this profile.

Method: Rhino.Geometry.Extrusion.WallSurface(ComponentIndex ci)
Return: Surface
Modifiers: public
Summary: Gets one of the longitudinal surfaces of the extrusion.
Parameter: ci (ComponentIndex)
Parameter Summary: The index specifying which precise item to retrieve.

Class: Rhino.Geometry.GeometryBase
Summary: Provides a common base for most geometric classes. This class is abstract.

Constructor: Rhino.Geometry.GeometryBase.GeometryBase(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.GeometryBase.HasBrepForm
Return: bool
Modifiers: public
Summary: Returns True if the Brep.TryConvertBrep function will be successful for this object
Accessors: get

Property: Rhino.Geometry.GeometryBase.IsDeformable
Return: bool
Modifiers: public
Summary: True if object can be accurately modified with "squishy" transformations like projections, shears, and non-uniform scaling.
Accessors: get

Property: Rhino.Geometry.GeometryBase.IsDocumentControlled
Return: bool
Modifiers: public, sealed, override
Summary: If True this object may not be modified. Any properties or functions that attempt to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
Accessors: get

Property: Rhino.Geometry.GeometryBase.ObjectType
Return: ObjectType
Modifiers: public
Summary: Useful for switch statements that need to differentiate between basic object types like points, curves, surfaces, and so on.
Accessors: get

Property: Rhino.Geometry.GeometryBase.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.Geometry.GeometryBase.GeometryEquals(GeometryBase first, GeometryBase second)
Return: bool
Modifiers: public, static
Summary: Determines if two geometries equal one another, in pure geometrical shape. This version only compares the geometry itself and does not include any user data comparisons. This is a comparison by value: for two identical items it will be true, no matter where in memory they may be stored.
Parameter: first (GeometryBase)
Parameter Summary: The first geometry
Parameter: second (GeometryBase)
Parameter Summary: The second geometry

Method: Rhino.Geometry.GeometryBase.GeometryReferenceEquals(GeometryBase one, GeometryBase other)
Return: bool
Modifiers: public, static
Summary: Determines if two objects are respectively shallow copies, new managed instantiations of the same geometry, or similar internal references to the exact same geometry, both in managed and in unmanaged code.
Parameter: one (GeometryBase)
Parameter Summary: The first object
Parameter: other (GeometryBase)
Parameter Summary: The other object

Method: Rhino.Geometry.GeometryBase.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: If this piece of geometry is a component in something larger, like a BrepEdge in a Brep, then this function returns the component index.

Method: Rhino.Geometry.GeometryBase.DataCRC(uint currentRemainder)
Return: uint
Modifiers: public
Summary: Returns a CRC calculated from the information that defines the object. This CRC can be used as a quick way to see if two objects are not identical.
Parameter: currentRemainder (uint)
Parameter Summary: The current remainder value.

Method: Rhino.Geometry.GeometryBase.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Geometry.GeometryBase.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Geometry.GeometryBase.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: Overridden in order to destroy local display cache information

Method: Rhino.Geometry.GeometryBase.Duplicate()
Return: GeometryBase
Modifiers: public, virtual
Summary: Constructs a deep (full) copy of this object.

Method: Rhino.Geometry.GeometryBase.DuplicateShallow()
Return: GeometryBase
Modifiers: public
Summary: Constructs a light copy of this object. By "light", it is meant that the same underlying data is used until something is done to attempt to change it. For example, you could have a shallow copy of a very heavy mesh object and the same underlying data will be used when doing things like inspecting the number of faces on the mesh. If you modify the location of one of the mesh vertices, the shallow copy will create a full duplicate of the underlying mesh data and the shallow copy will become a deep copy.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the geometry.
Parameter: accurate (bool)
Parameter Summary: If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. For some geometry types there is no difference between the estimate and the accurate bounding box. Estimated bounding boxes can be computed much (much) faster than accurate (or "tight") bounding boxes. Estimated bounding boxes are always similar to or larger than accurate bounding boxes.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Plane plane, out Box worldBox)
Return: BoundingBox
Modifiers: public
Summary: Aligned Bounding box solver. Gets the plane aligned bounding box.
Parameter: plane (Plane)
Parameter Summary: Orientation plane for BoundingBox.
Parameter: worldBox (Box)
Parameter Summary: Aligned box in World coordinates.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Plane plane)
Return: BoundingBox
Modifiers: public
Summary: Aligned Bounding box solver. Gets the plane aligned bounding box.
Parameter: plane (Plane)
Parameter Summary: Orientation plane for BoundingBox.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Transform xform)
Return: BoundingBox
Modifiers: public, virtual
Summary: Aligned Bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to object prior to the BoundingBox computation. The geometry itself is not modified.

Method: Rhino.Geometry.GeometryBase.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Geometry.GeometryBase.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.Geometry.GeometryBase.MakeDeformable()
Return: bool
Modifiers: public
Summary: If possible, converts the object into a form that can be accurately modified with "squishy" transformations like projections, shears, an non-uniform scaling.

Method: Rhino.Geometry.GeometryBase.MemoryEstimate()
Return: uint
Modifiers: public
Summary: Computes an estimate of the number of bytes that this object is using in memory.

Method: Rhino.Geometry.GeometryBase.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Destroy cache handle

Method: Rhino.Geometry.GeometryBase.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Is called when a non-constant operation occurs.

Method: Rhino.Geometry.GeometryBase.Rotate(double angleRadians, Vector3d rotationAxis, Point3d rotationCenter)
Return: bool
Modifiers: public
Summary: Rotates the object about the specified axis. A positive rotation angle results in a counter-clockwise rotation about the axis (right hand rule).
Parameter: angleRadians (double)
Parameter Summary: Angle of rotation in radians.
Parameter: rotationAxis (Vector3d)
Parameter Summary: Direction of the axis of rotation.
Parameter: rotationCenter (Point3d)
Parameter Summary: Point on the axis of rotation.

Method: Rhino.Geometry.GeometryBase.Scale(double scaleFactor)
Return: bool
Modifiers: public
Summary: Scales the object by the specified factor. The scale is centered at the origin.
Parameter: scaleFactor (double)
Parameter Summary: The uniform scaling factor.

Method: Rhino.Geometry.GeometryBase.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Method: Rhino.Geometry.GeometryBase.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transforms the geometry. If the input Transform has a SimilarityType of OrientationReversing, you may want to consider flipping the transformed geometry after calling this function when it makes sense. For example, you may want to call Flip() on a Brep after transforming it.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to geometry.

Method: Rhino.Geometry.GeometryBase.Translate(double x, double y, double z)
Return: bool
Modifiers: public
Summary: Translates the object along the specified vector.
Parameter: x (double)
Parameter Summary: The X component.
Parameter: y (double)
Parameter Summary: The Y component.
Parameter: z (double)
Parameter Summary: The Z component.

Method: Rhino.Geometry.GeometryBase.Translate(Vector3d translationVector)
Return: bool
Modifiers: public
Summary: Translates the object along the specified vector.
Parameter: translationVector (Vector3d)
Parameter Summary: A moving vector.

Class: Rhino.Geometry.Hatch
Summary: Represents a hatch in planar boundary loop or loops. This is a 2d entity with a plane defining a local coordinate system. The loops, patterns, angles, etc are all in this local coordinate system. The Hatch object manages the plane and loop array Fill definitions are in the HatchPattern or class derived from HatchPattern Hatch has an index to get the pattern definition from the pattern table.

Constructor: Rhino.Geometry.Hatch.Hatch(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Hatch.BasePoint
Return: Point3d
Modifiers: public
Summary: Gets or sets the hatch pattern base point
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternIndex
Return: int
Modifiers: public
Summary: Gets or sets the index of the pattern in the document hatch pattern table.
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternRotation
Return: double
Modifiers: public
Summary: Gets or sets the relative rotation of the pattern.
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternScale
Return: double
Modifiers: public
Summary: Gets or sets the scaling factor of the pattern.
Accessors: get set

Property: Rhino.Geometry.Hatch.Plane
Return: Plane
Modifiers: public
Summary: Gets or sets the hatch plane
Accessors: get set

Method: Rhino.Geometry.Hatch.Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from one curve.
Parameter: curve (Curve)
Parameter Summary: A <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from one curve.
Parameter: curve (Curve)
Parameter Summary: A <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.

Method: Rhino.Geometry.Hatch.Create(IEnumerable<Curve> curves, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.Create(IEnumerable<Curve> curves, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.

Method: Rhino.Geometry.Hatch.Create(Plane hatchPlane, Curve outerLoop, IEnumerable<Curve> innerLoops, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch
Modifiers: public, static
Summary: Create a hatch with a given set of outer and inner loops
Parameter: hatchPlane (Plane)
Parameter Summary:
Parameter: outerLoop (Curve)
Parameter Summary: 2d closed curve representing outer boundary of hatch
Parameter: innerLoops (IEnumerable<Curve>)
Parameter Summary: 2d closed curves for inner boundaries
Parameter: hatchPatternIndex (int)
Parameter Summary:
Parameter: rotationRadians (double)
Parameter Summary:
Parameter: scale (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.CreateFromBrep(Brep brep, int brepFaceIndex, int hatchPatternIndex, double rotationRadians, double scale, Point3d basePoint)
Return: Hatch
Modifiers: public, static
Summary: Create a hatch from a planar face of a Brep

Method: Rhino.Geometry.Hatch.CreateDisplayGeometry(DocObjects.HatchPattern pattern, double patternScale, out Curve[] bounds, out Line[] lines, out Brep solidBrep)
Return: void
Modifiers: public
Summary: Generate geometry that would be used to draw the hatch with a given hatch pattern

Method: Rhino.Geometry.Hatch.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Decomposes the hatch pattern into an array of geometry.

Method: Rhino.Geometry.Hatch.Get3dCurves(bool outer)
Return: Curve[]
Modifiers: public
Summary: Gets 3d curves that define the boundaries of the hatch
Parameter: outer (bool)
Parameter Summary: True to get the outer curves, False to get the inner curves

Method: Rhino.Geometry.Hatch.GetGradientFill()
Return: Rhino.Display.ColorGradient
Modifiers: public
Summary: Get gradient fill information for this hatch. If the "GradientType" for the fill is None, then this hatch doesn't have any gradient fill.

Method: Rhino.Geometry.Hatch.ScalePattern(Transform xform)
Return: void
Modifiers: public
Summary: Scale the hatch's pattern

Method: Rhino.Geometry.Hatch.SetGradientFill(Rhino.Display.ColorGradient fill)
Return: void
Modifiers: public

Method: Rhino.Geometry.Hatch.ToBrep()
Return: Brep
Modifiers: public
Summary: Constructs a Brep representation of this hatch.

Class: Rhino.Geometry.HermiteSurface
Summary: Create an ON_NurbsSurface satisfying Hermite interpolation conditions at a grid of points.

Constructor: Rhino.Geometry.HermiteSurface.HermiteSurface()
Summary: Initializes a new <b>HermiteSurface</b> instance.

Constructor: Rhino.Geometry.HermiteSurface.HermiteSurface(int uCount, int vCount)
Summary: Initializes a new <b>HermiteSurface</b> instance.

Property: Rhino.Geometry.HermiteSurface.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the all of values in all of the internal data structures contain valid values, False otherwise.
Accessors: get

Property: Rhino.Geometry.HermiteSurface.UCount
Return: int
Modifiers: public
Summary: Gets the number of parameters in the "u" direction.
Accessors: get

Property: Rhino.Geometry.HermiteSurface.VCount
Return: int
Modifiers: public
Summary: Gets the number of parameters in the "v" direction.
Accessors: get

Method: Rhino.Geometry.HermiteSurface.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.HermiteSurface.PointAt(int uIndex, int vIndex)
Return: Point3d
Modifiers: public
Summary: Gets the interpolation point at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.SetPointAt(int uIndex, int vIndex, Point3d point)
Return: void
Modifiers: public
Summary: Sets the interpolation point at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: point (Point3d)
Parameter Summary: The point location.

Method: Rhino.Geometry.HermiteSurface.SetTwistAt(int uIndex, int vIndex, Vector3d twist)
Return: void
Modifiers: public
Summary: Set the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: twist (Vector3d)
Parameter Summary: The twist direction.

Method: Rhino.Geometry.HermiteSurface.SetUParameterAt(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets the "u" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.
Parameter: parameter (double)
Parameter Summary: The parameter value.

Method: Rhino.Geometry.HermiteSurface.SetUTangentAt(int uIndex, int vIndex, Vector3d tangent)
Return: void
Modifiers: public
Summary: Set the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: tangent (Vector3d)
Parameter Summary: The tangent direction.

Method: Rhino.Geometry.HermiteSurface.SetVParameterAt(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets the "v" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.
Parameter: parameter (double)
Parameter Summary: The parameter value.

Method: Rhino.Geometry.HermiteSurface.SetVTangentAt(int uIndex, int vIndex, Vector3d tangent)
Return: void
Modifiers: public
Summary: Set the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: tangent (Vector3d)
Parameter Summary: The tangent direction.

Method: Rhino.Geometry.HermiteSurface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface satisfying the Hermite interpolation conditions.

Method: Rhino.Geometry.HermiteSurface.TwistAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.UParameterAt(int index)
Return: double
Modifiers: public
Summary: Gets the "u" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.HermiteSurface.UTangentAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.VParameterAt(int index)
Return: double
Modifiers: public
Summary: Gets the "v" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.HermiteSurface.VTangentAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Class: Rhino.Geometry.HiddenLineDrawing
Summary: Represents a hidden line drawing object. A hidden line drawing consists of curves generated from source objects. The curves correspond to edges, and silhouettes of source objects and intersections with cutting planes.

Constructor: Rhino.Geometry.HiddenLineDrawing.HiddenLineDrawing()
Summary: Initializes a new instance of the HiddenLineDrawing class

Property: Rhino.Geometry.HiddenLineDrawing.Points
Return: IEnumerable<HiddenLineDrawingPoint>
Modifiers: public
Summary: Point objects calculated by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.Segments
Return: IEnumerable<HiddenLineDrawingSegment>
Modifiers: public
Summary: Sub-curve objects calculated by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.Viewport
Return: ViewportInfo
Modifiers: public
Summary: Returns the ViewportInfo used by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.WorldToHiddenLine
Return: Transform
Modifiers: public
Summary: Returns the world-coordinate system to HLD-coordinate system transformation.
Accessors: get

Method: Rhino.Geometry.HiddenLineDrawing.Compute(HiddenLineDrawingParameters parameters, bool multipleThreads, IProgress<double> progress, System.Threading.CancellationToken cancelToken)
Return: HiddenLineDrawing
Modifiers: public, static
Summary: Perform the hidden line drawing calculation based on input parameters

Method: Rhino.Geometry.HiddenLineDrawing.Compute(HiddenLineDrawingParameters parameters, bool multipleThreads)
Return: HiddenLineDrawing
Modifiers: public, static
Summary: Perform the hidden line drawing calculation based on input parameters

Method: Rhino.Geometry.HiddenLineDrawing.BoundingBox(bool includeHidden)
Return: BoundingBox
Modifiers: public
Summary: Get tight bounding box of the hidden line drawing.
Parameter: includeHidden (bool)
Parameter Summary: Include hidden objects.

Method: Rhino.Geometry.HiddenLineDrawing.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.HiddenLineDrawing.RejoinCompatibleVisible()
Return: void
Modifiers: public
Summary: Join consecutive visible curves from a single FullCurve True if successful, False otherwise.

Class: Rhino.Geometry.HiddenLineDrawingObject
Summary: Represents an object added to a HiddenLineDrawing

Property: Rhino.Geometry.HiddenLineDrawingObject.Geometry
Return: GeometryBase
Modifiers: public
Summary: Returns the geometry in world coordinates if UseXform is false. Otherwise, the geometry in object space coordinates is returned.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObject.OccludingSections
Return: bool
Modifiers: public
Summary: Objects in this drawing could have occluding sections. Objects must added with the occluding section option set as desired.
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingObject.Tag
Return: object
Modifiers: public
Summary: Returns the extra data used to cross-reference the object specified in HiddenLineDrawing.AddObject.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObject.Transform
Return: Transform
Modifiers: public
Summary: Returns the transformation passed into the Add... function when setting up the hidden line drawing parameters.
Accessors: get

Class: Rhino.Geometry.HiddenLineDrawingObjectCurve
Summary: Curves generated from source objects which correspond to edges, and silhouettes of source objects and intersections with cutting planes. A HiddenLineDrawingObjectCurve is partitioned into hidden and visible segments called HiddenLineDrawingSegment

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.ClippingPlaneIndex
Return: int
Modifiers: public
Summary: Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Index
Return: int
Modifiers: public
Summary: Index of this object in HiddenLineDrawing.FullCurves.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.IsProjecting
Return: bool
Modifiers: public
Summary: Returns True if all the non clipped portions of this curve are projecting.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.IsValid
Return: bool
Modifiers: public
Summary: Verifies the object is valid.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.OriginalDomainStart
Return: double
Modifiers: public
Summary: Initialized to RhinoMath.UnsetValue. Valid if the full curve is closed. Rejoin can reparameterize the curve by moving the seam. When this has been done the original domain start is stored here.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Parameters
Return: double[]
Modifiers: public
Summary: Increasing, partition of curve.Domain.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Segments
Return: HiddenLineDrawingSegment[]
Modifiers: public
Summary: The HiddenLineDrawingCurve objects that make up this full curve.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SilhouetteType
Return: SilhouetteType
Modifiers: public
Summary: The silhouette event type
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SourceObject
Return: HiddenLineDrawingObject
Modifiers: public
Summary: Return the source object that this curve came from
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SourceObjectComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Component of source object part that generated this curve.
Accessors: get

Method: Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(double t, int side)
Return: HiddenLineDrawingSegment
Modifiers: public
Summary: Returns the HiddenLineDrawingCurve object containing parameter 't'.
Parameter: t (double)
Parameter Summary: The parameter.
Parameter: side (int)
Parameter Summary: Determines which side to return at breakpoints, where: 0 - default, <0 - curve that contains an interval [t-, t], for some t- < t, >0 - curve that contains an interval [t, t+], for some t+ > t.

Method: Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(double t)
Return: HiddenLineDrawingSegment
Modifiers: public
Summary: Returns the HiddenLineDrawingCurve object containing parameter 't'.
Parameter: t (double)
Parameter Summary: The parameter.

Class: Rhino.Geometry.HiddenLineDrawingParameters
Summary: Input used for computing a hidden line drawing

Constructor: Rhino.Geometry.HiddenLineDrawingParameters.HiddenLineDrawingParameters()
Summary: default constructor

Property: Rhino.Geometry.HiddenLineDrawingParameters.AbsoluteTolerance
Return: double
Modifiers: public
Summary: Absolute tolerance is used to decide if curves overlap or intersect. A suggested value is to use RhinoDoc.AbsoluteTolerance
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.Flatten
Return: bool
Modifiers: public
Summary: Flatten the computed geometry
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeHiddenCurves
Return: bool
Modifiers: public
Summary: Include hidden curves in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeTangentEdges
Return: bool
Modifiers: public
Summary: Include tangent edges in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeTangentSeams
Return: bool
Modifiers: public
Summary: Include tangent seams in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.OccludingSectionOption
Return: bool
Modifiers: public
Summary: Enable occluding section option (default is false)
Accessors: get set

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddClippingPlane(Plane plane)
Return: void
Modifiers: public
Summary: Specify clipping planes that are active for this view.

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, object tag, bool occluding_sections)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, object tag)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, Transform xform, object tag, bool occluding_sections)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary:
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, Transform xform, object tag)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary:
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, object tag, bool occluding_sections, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, object tag, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, Transform xform, object tag, bool occluding_sections, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary:
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, Transform xform, object tag, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary:
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(Display.RhinoViewport viewport)
Return: void
Modifiers: public
Summary: Set the viewport for the hidden line drawing (HLD). The viewport supplies the projection that determines the visibility of curves, and the HLD coordinate system in which the resulting curves are represented. The HLD-coordinate system is a right handed system for 3-D model space, in which the 3rd coordinate direction is the projection direction. In particular the z-coordinate direction points from the scene toward the camera.
Parameter: viewport (Display.RhinoViewport)
Parameter Summary: A copy of rhinoViewport is made inside of HiddenLineDrawing.

Method: Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(ViewportInfo viewport)
Return: void
Modifiers: public
Summary: Set the viewport for the hidden line drawing (HLD). The viewport supplies the projection that determines the visibility of curves, and the HLD coordinate system in which the resulting curves are represented. The HLD-coordinate system is a right handed system for 3-D model space, in which the 3rd coordinate direction is the projection direction. In particular the z-coordinate direction points from the scene toward the camera.
Parameter: viewport (ViewportInfo)
Parameter Summary: A copy of viewportInfo is made inside of HiddenLineDrawing.

Class: Rhino.Geometry.HiddenLineDrawingPoint
Summary: Points generated from source objects which correspond to point and point cloud source objects.

Property: Rhino.Geometry.HiddenLineDrawingPoint.ClippingPlaneIndex
Return: int
Modifiers: public
Summary: Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.Index
Return: int
Modifiers: public
Summary: Index of this object in HiddenLineDrawing.Points.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.Location
Return: Point3d
Modifiers: public
Summary: Returns the location of this object in HiddenLineDrawing coordinates.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.PointVisibility
Return: Visibility
Modifiers: public
Summary: Returns the point's visibility
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.SourceObject
Return: HiddenLineDrawingObject
Modifiers: public
Summary: Return the source object that this point came from.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.SourceObjectComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Component of source object part that generated this curve.
Accessors: get

Class: Rhino.Geometry.HiddenLineDrawingSegment
Summary: The results of HiddenLineDrawing calculation are a collection of segments. A segment is a sub-curve of a HiddenLineDrawingObjectCurve.

Property: Rhino.Geometry.HiddenLineDrawingSegment.CurveGeometry
Return: Curve
Modifiers: public
Summary: The actual curve geometry
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.CurveSideFills
Return: SideFill[]
Modifiers: public
Summary: The SideFill fields are only valid for visible curves. With respect to the HiddenLineDrawing, the region to the left (or right respectively) of this curve is described by CurveSideFills[0] or CurveSideFills[1], respectively. If exactly one of these regions is empty this is a scene silhouette. If this region contains a surface it is either a surface which in 3-D is adjacent to this edge or it an surface that is further away from the camera, we call this a shadow surface. unknown is used for unset values and for projecting curves
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.Index
Return: int
Modifiers: public
Summary: Index of this curve in HiddenLineDrawing.Curves.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.IsSceneSilhouette
Return: bool
Modifiers: public
Summary: Returns True if this curve is a scene silhouette.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.ParentCurve
Return: HiddenLineDrawingObjectCurve
Modifiers: public
Summary: This curve is a sub-curve of the returned HiddenLineDrawingFullCurve object.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.SegmentVisibility
Return: Visibility
Modifiers: public
Summary: Returns the segment's visibility
Accessors: get

Class: Rhino.Geometry.InstanceDefinitionGeometry
Summary: Represents a block definition in a File3dm. This is the same as Rhino.DocObjects.InstanceDefinition, but not associated with a RhinoDoc.

Constructor: Rhino.Geometry.InstanceDefinitionGeometry.InstanceDefinitionGeometry()
Summary: Initializes a new block definition.

Property: Rhino.Geometry.InstanceDefinitionGeometry.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.InstanceDefinition</b> .
Accessors: get

Property: Rhino.Geometry.InstanceDefinitionGeometry.Description
Return: string
Modifiers: public
Summary: Gets or sets the description of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.SourceArchive
Return: string
Modifiers: public
Summary: Gets the full file path for linked instance definitions.
Accessors: get

Property: Rhino.Geometry.InstanceDefinitionGeometry.Url
Return: string
Modifiers: public
Summary: Gets or sets the URL or hyperlink of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.UrlDescription
Return: string
Modifiers: public
Summary: Gets or sets the description of the URL or hyperlink of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.Geometry.InstanceDefinitionGeometry.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Geometry.InstanceDefinitionGeometry.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetObjectIds()
Return: System.Guid[]
Modifiers: public
Summary: list of object ids in the instance geometry table

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.Geometry.InstanceDefinitionGeometry.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.Geometry.InstanceReferenceGeometry
Summary: Represents a reference to the geometry in a block definition.

Constructor: Rhino.Geometry.InstanceReferenceGeometry.InstanceReferenceGeometry(Guid instanceDefinitionId, Transform transform)
Summary: Constructor used when creating nested instance references.

Constructor: Rhino.Geometry.InstanceReferenceGeometry.InstanceReferenceGeometry(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.InstanceReferenceGeometry.ParentIdefId
Return: Guid
Modifiers: public
Summary: The unique id for the parent instance definition of this instance reference.
Accessors: get

Property: Rhino.Geometry.InstanceReferenceGeometry.Xform
Return: Transform
Modifiers: public
Summary: Transformation for this reference.
Accessors: get

Class: Rhino.Geometry.Interpolator
Summary: Exposes a set of standard numeric interpolation algorithms.

Constructor: Rhino.Geometry.Interpolator.Interpolator()
Summary: Constructs a new, empty Interpolator.

Constructor: Rhino.Geometry.Interpolator.Interpolator(IEnumerable<double> collection)
Summary: Constructs an Interpolator from a collection of numbers.

Constructor: Rhino.Geometry.Interpolator.Interpolator(int amount, double defaultValue)
Summary: Constructs a new Interpolator with a specified amount of numbers.

Constructor: Rhino.Geometry.Interpolator.Interpolator(int initialCapacity)
Summary: Constructs an empty Interpolator with a certain capacity.

Constructor: Rhino.Geometry.Interpolator.Interpolator(RhinoList<double> list)
Summary: Copy all the numbers from an existing RhinoList.

Property: Rhino.Geometry.Interpolator.Cyclical
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the values inside this Interpolator are to be treated as cyclical (i.e. circular).
Accessors: get set

Method: Rhino.Geometry.Interpolator.InterpolateCatmullRom(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with Catmull-Rom interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateCosine(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with cosine interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateCubic(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with cubic interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateLinear(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with linear interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with Nearest Neighbor interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Class: Rhino.Geometry.InvalidDimensionStyleIdException
Summary: General exception that can be thrown by annotations

Constructor: Rhino.Geometry.InvalidDimensionStyleIdException.InvalidDimensionStyleIdException(string msg)

Class: Rhino.Geometry.Leader
Summary: Leader geometry class

Constructor: Rhino.Geometry.Leader.Leader()
Summary: Constructor

Constructor: Rhino.Geometry.Leader.Leader(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.Leader.Curve
Return: NurbsCurve
Modifiers: public
Summary: Gets the curve used by this leader
Accessors: get

Property: Rhino.Geometry.Leader.LeaderArrowBlockId
Return: Guid
Modifiers: public
Summary: Id of the block used as the arrow for the leader when the arrow type is 'User arrow'
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderArrowSize
Return: double
Modifiers: public
Summary: The size of the leader arrow
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderArrowType
Return: ArrowType
Modifiers: public
Summary: The arrowhead type for the leader
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderContentAngleStyle
Return: LeaderContentAngleStyle
Modifiers: public
Summary: Angle for text of leader text
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderCurveStyle
Return: LeaderCurveStyle
Modifiers: public
Summary: The style of the leader curve: polyline or spline
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderHasLanding
Return: bool
Modifiers: public
Summary: Returns True if the leader has a landing line
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderLandingLength
Return: double
Modifiers: public
Summary: Gets or sets the length of the landing line
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderTextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Gets or sets the horizontal alignment of the leader's text
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderTextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Summary: Gets or sets the vertical alignment of the leader's text
Accessors: get set

Property: Rhino.Geometry.Leader.Points2D
Return: Point2d[]
Modifiers: public
Summary: Get or set the 2d points defining the curve used by this leader
Accessors: get set

Property: Rhino.Geometry.Leader.Points3D
Return: Point3d[]
Modifiers: public
Summary: Get or set the 3d points defining the curve used by this leader
Accessors: get set

Method: Rhino.Geometry.Leader.Create(string text, Plane plane, DimensionStyle dimstyle, Point3d[] points)
Return: Leader
Modifiers: public, static
Summary: Creates a Leader geometry object

Method: Rhino.Geometry.Leader.CreateWithRichText(string richText, Plane plane, DimensionStyle dimstyle, Point3d[] points)
Return: Leader
Modifiers: public, static
Summary: Creates a Leader geometry object

Method: Rhino.Geometry.Leader.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Explodes this leader into its geometric components.

Class: Rhino.Geometry.LengthMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of length, length centroid, and length moments in curves.

Constructor: Rhino.Geometry.LengthMassProperties.LengthMassProperties()
Summary: Initializes a new instance of the LengthMassProperties class

Property: Rhino.Geometry.LengthMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the length centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the centroid calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.Length
Return: double
Modifiers: public
Summary: Gets the length solution.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.LengthError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the length calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the length Y is integral of "y dm" over the length Z is integral of "z dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the length Y is integral of "yz dm" over the length Z is integral of "zx dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the length Y is integral of "yy dm" over the length Z is integral of "zz dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.LengthMassProperties.Compute(Curve curve, bool length, bool firstMoments, bool secondMoments, bool productMoments)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of a curve.
Parameter: curve (Curve)
Parameter Summary: The curve to measure.
Parameter: length (bool)
Parameter Summary: True to calculate length.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate length first moments, length, and length centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate length second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate length product moments.

Method: Rhino.Geometry.LengthMassProperties.Compute(Curve curve)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of a curve.
Parameter: curve (Curve)
Parameter Summary: The curve to measure.

Method: Rhino.Geometry.LengthMassProperties.Compute(IEnumerable<Curve> curves, bool length, bool firstMoments, bool secondMoments, bool productMoments)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of an enumeration of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An enumeration of curves.
Parameter: length (bool)
Parameter Summary: True to calculate length.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate length first moments, length, and length centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate length second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate length product moments.

Method: Rhino.Geometry.LengthMassProperties.Compute(IEnumerable<Curve> curves)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of an enumeration of curves.

Method: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.LengthMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Class: Rhino.Geometry.Light
Summary: Represents a light that shines in the modeling space.

Constructor: Rhino.Geometry.Light.Light()
Summary: Initializes a new light.

Constructor: Rhino.Geometry.Light.Light(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Light.Ambient
Return: Color
Modifiers: public
Summary: Gets or sets the ambient color.
Accessors: get set

Property: Rhino.Geometry.Light.AttenuationType
Return: Attenuation
Modifiers: public
Summary: Get the type of attenuation for this light.
Accessors: get set

Property: Rhino.Geometry.Light.AttenuationVector
Return: Vector3d
Modifiers: public
Summary: Gets or Sets the attenuation vector.
Accessors: get set

Property: Rhino.Geometry.Light.CoordinateSystem
Return: CoordinateSystem
Modifiers: public
Summary: Gets a value, determined by LightStyle, that explains whether the camera directions are relative to World or Camera spaces.
Accessors: get

Property: Rhino.Geometry.Light.Diffuse
Return: Color
Modifiers: public
Summary: Gets or sets the diffuse color.
Accessors: get set

Property: Rhino.Geometry.Light.Direction
Return: Vector3d
Modifiers: public
Summary: Gets or sets the vector direction of the camera.
Accessors: get set

Property: Rhino.Geometry.Light.HotSpot
Return: double
Modifiers: public
Summary: The hot spot setting runs from 0.0 to 1.0 and is used to provides a linear interface for controlling the focus or concentration of a spotlight. A hot spot setting of 0.0 corresponds to a spot exponent of 128. A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
Accessors: get set

Property: Rhino.Geometry.Light.Id
Return: Guid
Modifiers: public
Summary: Gets the ID of this light.
Accessors: get set

Property: Rhino.Geometry.Light.Intensity
Return: double
Modifiers: public
Summary: Gets or sets the light intensity.
Accessors: get set

Property: Rhino.Geometry.Light.IsDirectionalLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraDirectional or WorldDirectional.
Accessors: get

Property: Rhino.Geometry.Light.IsEnabled
Return: bool
Modifiers: public
Summary: Gets or sets a value that defines if the light is turned on (true) or off (false).
Accessors: get set

Property: Rhino.Geometry.Light.IsLinearLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> WorldLinear.
Accessors: get

Property: Rhino.Geometry.Light.IsPointLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraPoint or WorldPoint.
Accessors: get

Property: Rhino.Geometry.Light.IsRectangularLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> WorldRectangular.
Accessors: get

Property: Rhino.Geometry.Light.IsSpotLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraSpot or WorldSpot.
Accessors: get

Property: Rhino.Geometry.Light.IsSunLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this object is a Sun light.
Accessors: get

Property: Rhino.Geometry.Light.Length
Return: Vector3d
Modifiers: public
Summary: Gets or sets the height in linear and rectangular lights.
(ignored for non-linear/rectangular lights.) | Accessors: get set

Property: Rhino.Geometry.Light.LightStyle
Return: LightStyle
Modifiers: public
Summary: Gets or sets a light style on this camera.
Accessors: get set

Property: Rhino.Geometry.Light.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the light or 3D position or location.
Accessors: get set

Property: Rhino.Geometry.Light.Name
Return: string
Modifiers: public
Summary: Gets or sets the spot light name.
Accessors: get set

Property: Rhino.Geometry.Light.PerpendicularDirection
Return: Vector3d
Modifiers: public
Summary: Gets a perpendicular vector to the camera direction.
Accessors: get

Property: Rhino.Geometry.Light.PowerCandela
Return: double
Modifiers: public
Summary: Gets or sets the light power in candelas (cd).
Accessors: get set

Property: Rhino.Geometry.Light.PowerLumens
Return: double
Modifiers: public
Summary: Gets or sets the light power in lumens (lm).
Accessors: get set

Property: Rhino.Geometry.Light.PowerWatts
Return: double
Modifiers: public
Summary: Gets or sets the light power in watts (W).
Accessors: get set

Property: Rhino.Geometry.Light.ShadowIntensity
Return: double
Modifiers: public
Summary: Gets or sets the shadow intensity for the light.
Accessors: get set

Property: Rhino.Geometry.Light.Specular
Return: Color
Modifiers: public
Summary: Gets or sets the specular color.
Accessors: get set

Property: Rhino.Geometry.Light.SpotAngleRadians
Return: double
Modifiers: public
Summary: Gets or sets the spot angle in radians.
Ignored for non-spot lights.
angle = 0 to pi/2 (0 to 90 degrees). | Accessors: get set

Property: Rhino.Geometry.Light.SpotExponent
Return: double
Modifiers: public
Summary: The spot exponent varies from 0.0 to 128.0 and provides an exponential interface for controlling the focus or concentration of a spotlight (like the OpenGL GL_SPOT_EXPONENT parameter). The spot exponent and hot spot parameters are linked; changing one will change the other. A hot spot setting of 0.0 corresponds to a spot exponent of 128. A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
Accessors: get set

Property: Rhino.Geometry.Light.SpotLightShadowIntensity
Return: double
Modifiers: public
Summary: Gets or sets the spot light shadow intensity.
(ignored for non-spot lights.) | Accessors: get set

Property: Rhino.Geometry.Light.Width
Return: Vector3d
Modifiers: public
Summary: Gets or sets the width in linear and rectangular lights.
(ignored for non-linear/rectangular lights.) | Accessors: get set

Method: Rhino.Geometry.Light.CreateSunLight(double northAngleDegrees, double azimuthDegrees, double altitudeDegrees)
Return: Light
Modifiers: public, static
Summary: Constructs a light that represents the Sun.
Parameter: northAngleDegrees (double)
Parameter Summary: The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.
Parameter: azimuthDegrees (double)
Parameter Summary: The Azimuth angle value in degrees. Azimuth is the compass angle from North.
Parameter: altitudeDegrees (double)
Parameter Summary: The Altitude angle in degrees. Altitude is the angle above the ground plane.

Method: Rhino.Geometry.Light.CreateSunLight(double northAngleDegrees, System.DateTime when, double latitudeDegrees, double longitudeDegrees)
Return: Light
Modifiers: public, static
Summary: Constructs a light which simulates the Sun based on a given time and location on Earth.
Parameter: northAngleDegrees (double)
Parameter Summary: The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.
Parameter: when (System.DateTime)
Parameter Summary: The time of the measurement. The Kind property of DateTime specifies whether this is in local or universal time.
Local and Undefined date-time kinds in this argument are considered local. | Parameter: latitudeDegrees (double) | Parameter Summary: The latitude, in degrees, of the location on Earth. | Parameter: longitudeDegrees (double) | Parameter Summary: The longitude, in degrees, of the location on Earth.

Method: Rhino.Geometry.Light.CreateSunLight(Render.Sun sun)
Return: Light
Modifiers: public, static
Summary: Constructs a light which simulates a <b>Rhino.Render.Sun</b> .
Parameter: sun (Render.Sun)
Parameter Summary: A Sun object from the Rhino.Render namespace.

Method: Rhino.Geometry.Light.GetAttenuation(double d)
Return: double
Modifiers: public
Summary: Gets the attenuation settings (ignored for "directional" and "ambient" lights).
attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light. | Parameter: d (double) | Parameter Summary: The distance to evaluate.

Method: Rhino.Geometry.Light.GetSpotLightRadii(out double innerRadius, out double outerRadius)
Return: bool
Modifiers: public
Summary: Gets the spot light radii.
Parameter: innerRadius (double)
Parameter Summary: The inner radius. This out parameter is assigned during this call.
Parameter: outerRadius (double)
Parameter Summary: The outer radius. This out parameter is assigned during this call.

Method: Rhino.Geometry.Light.SetAttenuation(double a0, double a1, double a2)
Return: void
Modifiers: public
Summary: Sets the attenuation settings (ignored for "directional" and "ambient" lights).
attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light. | Parameter: a0 (double) | Parameter Summary: The new constant attenuation divisor term. | Parameter: a1 (double) | Parameter Summary: The new reverse linear attenuation divisor term. | Parameter: a2 (double) | Parameter Summary: The new reverse quadratic attenuation divisor term.

Class: Rhino.Geometry.LinearDimension
Summary: Represents a linear dimension

Constructor: Rhino.Geometry.LinearDimension.LinearDimension()

Constructor: Rhino.Geometry.LinearDimension.LinearDimension(Plane dimensionPlane, Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)

Constructor: Rhino.Geometry.LinearDimension.LinearDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.LinearDimension.Aligned
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether this annotation is aligned.
Accessors: get set

Property: Rhino.Geometry.LinearDimension.AnnotationType
Return: AnnotationType
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.LinearDimension.Arrowhead1End
Return: Point2d
Modifiers: public
Summary: Gets the arrow head end of the first extension line.
Accessors: get

Property: Rhino.Geometry.LinearDimension.Arrowhead2End
Return: Point2d
Modifiers: public
Summary: Gets the arrow head end of the second extension line.
Accessors: get

Property: Rhino.Geometry.LinearDimension.DimensionLinePoint
Return: Point2d
Modifiers: public
Summary: Point on annotation plane where dimension line starts
Accessors: get set

Property: Rhino.Geometry.LinearDimension.DistanceBetweenArrowTips
Return: double
Modifiers: public
Summary: Gets the distance between arrow tips.
Accessors: get

Property: Rhino.Geometry.LinearDimension.ExtensionLine1End
Return: Point2d
Modifiers: public
Summary: End of the first extension line.
Accessors: get set

Property: Rhino.Geometry.LinearDimension.ExtensionLine2End
Return: Point2d
Modifiers: public
Summary: End of the second extension line.
Accessors: get set

Method: Rhino.Geometry.LinearDimension.Create(AnnotationType dimtype, DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint, double rotationInPlane)
Return: LinearDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimtype (AnnotationType)
Parameter Summary: AnnotationType.Rotated or AnnotationType.Aligned
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's DimensionStyle
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: horizontal (Vector3d)
Parameter Summary: Horizontal reference direction
Parameter: defpoint1 (Point3d)
Parameter Summary: First definition point
Parameter: defpoint2 (Point3d)
Parameter Summary: Second definition point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: rotationInPlane (double)
Parameter Summary: For Rotated style

Method: Rhino.Geometry.LinearDimension.FromPoints(Point3d extensionLine1End, Point3d extensionLine2End, Point3d pointOnDimensionLine)
Return: LinearDimension
Modifiers: public, static
Summary: Initializes a new instance of the <b>LinearDimension</b> class, based on three points.

Method: Rhino.Geometry.LinearDimension.Get3dPoints(out Point3d extensionLine1End, out Point3d extensionLine2End, out Point3d arrowhead1End, out Point3d arrowhead2End, out Point3d dimlinepoint, out Point3d textpoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: extensionLine1End (Point3d)
Parameter Summary: First definition point
Parameter: extensionLine2End (Point3d)
Parameter Summary: Second definition point
Parameter: arrowhead1End (Point3d)
Parameter Summary: First arrowhead point
Parameter: arrowhead2End (Point3d)
Parameter Summary: Second Arrowhead point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: textpoint (Point3d)
Parameter Summary: Text location

Method: Rhino.Geometry.LinearDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.LinearDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.LinearDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Method: Rhino.Geometry.LinearDimension.SetLocations(Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)
Return: void
Modifiers: public
Summary: Sets the three locations of the point, using two-dimensional points that refer to the plane of the annotation.

Class: Rhino.Geometry.LineCurve
Summary: Represents a linear curve.

Constructor: Rhino.Geometry.LineCurve.LineCurve()
Summary: Initializes a new instance of the <b>LineCurve</b> class.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Line line, double t0, double t1)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by retrieving its value from a <b>Line</b> and setting the domain.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Line line)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by retrieving its value from a <b>Line</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(LineCurve other)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by copying values from another linear curve.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Point2d from, Point2d to)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by setting start and end point from two <b>Point2d</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(Point3d from, Point3d to)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by setting start and end point from two <b>Point3d</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.LineCurve.Line
Return: Line
Modifiers: public
Summary: Gets or sets the Line value inside this curve.
Accessors: get set

Class: Rhino.Geometry.Matrix
Summary: Represents an arbitrarily sized matrix of <b>double</b> -precision floating point numbers. If you are working with a 4x4 matrix, then you may want to use the <b>Transform</b> class instead.

Constructor: Rhino.Geometry.Matrix.Matrix(int rowCount, int columnCount)
Summary: Initializes a new instance of the matrix.

Constructor: Rhino.Geometry.Matrix.Matrix(Transform xform)
Summary: Initializes a new instance of the matrix based on a 4x4 matrix <b>Transform</b> .

Property: Rhino.Geometry.Matrix.ColumnCount
Return: int
Modifiers: public
Summary: Gets the amount of columns.
Accessors: get

Property: Rhino.Geometry.Matrix.IsColumnOrthogonal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is column orthogonal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsColumnOrthoNormal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is column orthonormal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsRowOrthogonal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is row orthogonal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsRowOrthoNormal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is row orthonormal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsSquare
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this matrix has the same number of rows and columns. 0x0 matrices are not considered square.
Accessors: get

Property: Rhino.Geometry.Matrix.IsValid
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this matrix is valid.
Accessors: get

Property: Rhino.Geometry.Matrix.RowCount
Return: int
Modifiers: public
Summary: Gets the amount of rows.
Accessors: get

Property: Rhino.Geometry.Matrix.this[int row]
Return: double
Modifiers: public
Summary: Gets or sets the matrix value at the given row and column indices.

Method: Rhino.Geometry.Matrix.BackSolve(double zeroTolerance, double b)
Return: double
Modifiers: public
Summary: Solves M*x=b where M is upper triangular with a unit diagonal and b is a column of values.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) used to test for "zero" values in b in under determined systems of equations.
Parameter: b (double)
Parameter Summary: The values in B[RowCount],...,B[B.Length-1] are tested to make sure they are within "zeroTolerance".

Method: Rhino.Geometry.Matrix.BackSolvePoints(double zeroTolerance, Point3d[] b)
Return: Point3d[]
Modifiers: public
Summary: Solves M*x=b where M is upper triangular with a unit diagonal and b is a column of 3d points.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) used to test for "zero" values in b in under determined systems of equations.
Parameter: b (Point3d[])
Parameter Summary: The values in B[RowCount],...,B[B.Length-1] are tested to make sure they are "zero".

Method: Rhino.Geometry.Matrix.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Matrix.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Matrix.Duplicate()
Return: Matrix
Modifiers: public
Summary: Create a duplicate of this matrix.

Method: Rhino.Geometry.Matrix.GetHashCode()
Return: int
Modifiers: public, override
Summary: Gets the hash code for this matrix. The hash code will change when the matrix changes so you cannot change matrices while they are stored in hash tables.

Method: Rhino.Geometry.Matrix.Invert(double zeroTolerance)
Return: bool
Modifiers: public
Summary: Modifies this matrix to become its own inverse.
Matrix might be non-invertible (singular) and the return value will be false. | Parameter: zeroTolerance (double) | Parameter Summary: The admitted tolerance for 0.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, double b, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix as the first step in solving M*X=b where b is a column of values.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test. If the absolute value of a pivot is <= zero_tolerance, then the pivot is assumed to be zero.
Parameter: b (double)
Parameter Summary: an array of RowCount values that is row reduced with the matrix.
Parameter: pivot (double)
Parameter Summary: the value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, out double determinant, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix to calculate rank and determinant.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test. If a the absolute value of a pivot is <= zeroTolerance, then the pivot is assumed to be zero.
Parameter: determinant (double)
Parameter Summary: value of determinant is returned here.
Parameter: pivot (double)
Parameter Summary: value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, Point3d[] b, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix as the first step in solving M*X=b where b is a column of 3d points.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test. If the absolute value of a pivot is <= zero_tolerance, then the pivot is assumed to be zero.
Parameter: b (Point3d[])
Parameter Summary: An array of RowCount 3d points that is row reduced with the matrix.
Parameter: pivot (double)
Parameter Summary: The value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.Scale(double s)
Return: void
Modifiers: public
Summary: Modifies the current matrix by multiplying its values by a number.
Parameter: s (double)
Parameter Summary: A scale factor.

Method: Rhino.Geometry.Matrix.SetDiagonal(double d)
Return: void
Modifiers: public
Summary: Sets diagonal value and zeros off all non-diagonal values.
Parameter: d (double)
Parameter Summary: The new diagonal value.

Method: Rhino.Geometry.Matrix.SwapColumns(int columnA, int columnB)
Return: bool
Modifiers: public
Summary: Exchanges two columns.
Parameter: columnA (int)
Parameter Summary: A first column.
Parameter: columnB (int)
Parameter Summary: Another column.

Method: Rhino.Geometry.Matrix.SwapRows(int rowA, int rowB)
Return: bool
Modifiers: public
Summary: Exchanges two rows.
Parameter: rowA (int)
Parameter Summary: A first row.
Parameter: rowB (int)
Parameter Summary: Another row.

Method: Rhino.Geometry.Matrix.Transpose()
Return: bool
Modifiers: public
Summary: Modifies this matrix to be its transpose.
This is like swapping rows with columns.
http://en.wikipedia.org/wiki/Transpose

Method: Rhino.Geometry.Matrix.Zero()
Return: void
Modifiers: public
Summary: Sets all values inside the matrix to zero.

Class: Rhino.Geometry.Mesh
Summary: Represents a geometry type that is defined by vertices and faces.
This is often called a face-vertex mesh.

Constructor: Rhino.Geometry.Mesh.Mesh()
Summary: Initializes a new empty mesh.

Constructor: Rhino.Geometry.Mesh.Mesh(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Mesh.ComponentStates
Return: MeshVertexStatusList
Modifiers: public
Summary: Gets access to the vertex hidden/visibility collection in this mesh. This is a runtime property and it is not saved in the 3dm file.
Accessors: get

Property: Rhino.Geometry.Mesh.DisjointMeshCount
Return: int
Modifiers: public
Summary: Gets the number of disjoint (topologically unconnected) pieces in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.FaceNormals
Return: MeshFaceNormalList
Modifiers: public
Summary: Gets access to the face normal collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.Faces
Return: MeshFaceList
Modifiers: public
Summary: Gets access to the mesh face list.
Accessors: get

Property: Rhino.Geometry.Mesh.HasCachedTextureCoordinates
Return: bool
Modifiers: public
Summary: Will return True if SetCachedTextureCoordinates has been called; otherwise will return false.
Accessors: get

Property: Rhino.Geometry.Mesh.HasPrincipalCurvatures
Return: bool
Modifiers: public
Summary: HasPrincipalCurvatures
Accessors: get

Property: Rhino.Geometry.Mesh.IsClosed
Return: bool
Modifiers: public
Summary: Returns True if every mesh "edge" has two or more faces.
Accessors: get

Property: Rhino.Geometry.Mesh.IsOriented
Return: bool
Modifiers: public
Summary: Returns True if the mesh is manifold and every pair of faces that share an "edge" have compatible orientations.
Accessors: get

Property: Rhino.Geometry.Mesh.IsSolid
Return: bool
Modifiers: public
Summary: Returns True if the mesh is solid. A "solid" is a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.Mesh.Ngons
Return: MeshNgonList
Modifiers: public
Summary: Gets access to the mesh ngon list.
Ngons represent groups of Faces (triangles + quads).
Faces are used to tessellate an Ngon internally.
When a triangle or quad is referenced in the Ngon list, it is no longer visualized and conceived as a single entity, but takes part of the Ngon.
If you need to get access to both Ngons and the faces that are not referenced by Ngons, that is, all polygons that are visible in the mesh, then use the helper method. | Accessors: get

Property: Rhino.Geometry.Mesh.Normals
Return: MeshVertexNormalList
Modifiers: public
Summary: Gets access to the vertex normal collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.PartitionCount
Return: int
Modifiers: public
Summary: Number of partition information chunks stored on this mesh based on the last call to CreatePartitions
Accessors: get

Property: Rhino.Geometry.Mesh.TextureCoordinates
Return: MeshTextureCoordinateList
Modifiers: public
Summary: Gets access to the vertex texture coordinate collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.TopologyEdges
Return: MeshTopologyEdgeList
Modifiers: public
Summary: Gets the <b>Rhino.Geometry.Collections.MeshTopologyEdgeList</b> object associated with this mesh.
This object stores edge connectivity. | Accessors: get

Property: Rhino.Geometry.Mesh.TopologyVertices
Return: MeshTopologyVertexList
Modifiers: public
Summary: Gets the <b>Rhino.Geometry.Collections.MeshTopologyVertexList</b> object associated with this mesh.
This object stores vertex connectivity and the indices of vertices that were unified while computing the edge topology. | Accessors: get

Property: Rhino.Geometry.Mesh.VertexColors
Return: MeshVertexColorList
Modifiers: public
Summary: Gets access to the (optional) vertex color collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.Vertices
Return: MeshVertexList
Modifiers: public
Summary: Gets access to the vertices set of this mesh.
Accessors: get

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness, double sharpAngle, System.Threading.CancellationToken cancelToken)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.
Parameter: sharpAngle (double)
Parameter Summary: Sharpness angle in radians.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness, System.Threading.CancellationToken cancelToken)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.

Method: Rhino.Geometry.Mesh.CreateBooleanDifference(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet, MeshBooleanOptions options, out Commands.Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid difference of two sets of Meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes (the set to subtract from).
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes (the set to subtract).
Parameter: options (MeshBooleanOptions)
Parameter Summary: An option instance. Should have a valid Tolerance set.
Parameter: result (Commands.Result)
Parameter Summary: Indicates if the function succeeded, was cancelled, did nothing, or failed.

Method: Rhino.Geometry.Mesh.CreateBooleanDifference(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid difference of two sets of Meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes (the set to subtract from).
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes (the set to subtract).

Method: Rhino.Geometry.Mesh.CreateBooleanIntersection(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet, MeshBooleanOptions options, out Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid intersection of two sets of meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes.
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes.
Parameter: options (MeshBooleanOptions)
Parameter Summary: The boolean option instance, or null.
Parameter: result (Result)
Parameter Summary: A value indicating success, or cancel, or failure, or nothing.

Method: Rhino.Geometry.Mesh.CreateBooleanIntersection(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid intersection of two sets of meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes.
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes.

Method: Rhino.Geometry.Mesh.CreateBooleanSplit(IEnumerable<Mesh> meshesToSplit, IEnumerable<Mesh> meshSplitters, MeshBooleanOptions options, out Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Splits a set of meshes with another set.
Parameter: meshesToSplit (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes to be split. If this is null, None will be returned.
Parameter: meshSplitters (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes that cut. If this is null, None will be returned.
Parameter: options (MeshBooleanOptions)
Parameter Summary: The boolean option instance, or null.
Parameter: result (Result)
Parameter Summary: A value indicating success, or cancel, or failure, or nothing.

Method: Rhino.Geometry.Mesh.CreateBooleanSplit(IEnumerable<Mesh> meshesToSplit, IEnumerable<Mesh> meshSplitters)
Return: Mesh[]
Modifiers: public, static
Summary: Splits a set of meshes with another set.
Parameter: meshesToSplit (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes to be split. If this is null, None will be returned.
Parameter: meshSplitters (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes that cut. If this is null, None will be returned.

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes, double tolerance)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.
Parameter: tolerance (double)
Parameter Summary: A valid tolerance value. See <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes, MeshBooleanOptions options, out Commands.Result commandResult)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.
Parameter: options (MeshBooleanOptions)
Parameter Summary: An option instance. Can be null, but generally it should be instantiated and have a tolerance set.
Parameter: commandResult (Commands.Result)
Parameter Summary: A value indicating if the function was successful, or if it was cancelled, or if it did nothing, or failed.

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes. WARNING: Use the overload that takes a tolerance or options.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Plane sectionPlane, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Constructs contour curves for a mesh, sectioned at a plane.
Parameter: meshToContour (Mesh)
Parameter Summary: A mesh to contour.
Parameter: sectionPlane (Plane)
Parameter Summary: A cutting plane.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10. See comments at <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Plane sectionPlane)
Return: Curve[]
Modifiers: public, static
Summary: (Old call maintained for compatibility.)
Parameter: meshToContour (Mesh)
Parameter Summary: Avoid.
Parameter: sectionPlane (Plane)
Parameter Summary: Avoid.

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Constructs contour curves for a mesh, sectioned along a linear axis.
Parameter: meshToContour (Mesh)
Parameter Summary: A mesh to contour.
Parameter: contourStart (Point3d)
Parameter Summary: A start point of the contouring axis.
Parameter: contourEnd (Point3d)
Parameter Summary: An end point of the contouring axis.
Parameter: interval (double)
Parameter Summary: An interval distance.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10. See comments at <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval)
Return: Curve[]
Modifiers: public, static
Summary: (Old call maintained for compatibility.)
Parameter: meshToContour (Mesh)
Parameter Summary: Avoid.
Parameter: contourStart (Point3d)
Parameter Summary: Avoid.
Parameter: contourEnd (Point3d)
Parameter Summary: Avoid.
Parameter: interval (double)
Parameter Summary: Avoid.

Method: Rhino.Geometry.Mesh.CreateConvexHull3D(IEnumerable<Point3d> points, out int[] hullFacets, double tolerance, double angleTolerance)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a 3d convex hull mesh from input points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The 3D input points to be covered with the convex hull. These points must not be coplanar.
Parameter: hullFacets (int[])
Parameter Summary: An out parameter of jagged array of indices into the argument point enumerable. Each list item specifies the indices that make up a facet of the convex hull. These indices are not indices into the resulting mesh's indices. Can be the empty jagged array if the resulting mesh is null.
Parameter: tolerance (double)
Parameter Summary: The tolerance used to decide if points are coplanar or not. Use the document's tolerance if in doubt.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance used for merging coplanar points into facets. Use the document's angle tolerance in radians if in doubt.

Method: Rhino.Geometry.Mesh.CreateExtrusion(Curve profile, Vector3d direction, MeshingParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.
Parameter: parameters (MeshingParameters)
Parameter Summary: Parameters used to create the mesh.

Method: Rhino.Geometry.Mesh.CreateExtrusion(Curve profile, Vector3d direction)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.

Method: Rhino.Geometry.Mesh.CreateFromBox(BoundingBox box, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh that matches a bounding box.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for creation.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBox(Box box, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh that matches an aligned box.
Parameter: box (Box)
Parameter Summary: Box to match.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBox(IEnumerable<Point3d> corners, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh from 8 corner points.
Parameter: corners (IEnumerable<Point3d>)
Parameter Summary: 8 points defining the box corners arranged as the vN labels indicate.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBrep(Brep brep, MeshingParameters meshingParameters)
Return: Mesh[]
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to approximate.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: Parameters to use during meshing.

Method: Rhino.Geometry.Mesh.CreateFromBrep(Brep brep)
Return: Mesh[]
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to approximate.

Method: Rhino.Geometry.Mesh.CreateFromClosedPolyline(Polyline polyline)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a Mesh that is a triangulation of a simple closed polyline that projects onto a plane.
Parameter: polyline (Polyline)
Parameter Summary: must be closed

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around, bool solid, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cone.
Parameter: cone (Cone)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.
Parameter: solid (bool)
Parameter Summary: If False the mesh will be open with no faces on the circular planar portion.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around, bool solid)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cone.
Parameter: cone (Cone)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.
Parameter: solid (bool)
Parameter Summary: If False the mesh will be open with no faces on the circular planar portion.

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a solid mesh cone.
Parameter: cone (Cone)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.

Method: Rhino.Geometry.Mesh.CreateFromCurveExtrusion(Curve curve, Vector3d direction, MeshingParameters parameters, BoundingBox boundingBox)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from an extruded curve. This method is designed for projecting curves onto a mesh. In most cases, a better to use <b>Mesh.CreateExtrusion(Curve, Vector3d)</b> .
Parameter: curve (Curve)
Parameter Summary: A curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: The direction of extrusion.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters of meshing.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The bounding box controls the length of the extrusion.

Method: Rhino.Geometry.Mesh.CreateFromCurvePipe(Curve curve, double radius, int segments, int accuracy, MeshPipeCapStyle capType, bool faceted, IEnumerable<Interval> intervals)
Return: Mesh
Modifiers: public, static
Summary: Constructs a new mesh pipe from a curve.
Parameter: curve (Curve)
Parameter Summary: A curve to pipe.
Parameter: radius (double)
Parameter Summary: The radius of the pipe.
Parameter: segments (int)
Parameter Summary: The number of segments in the pipe.
Parameter: accuracy (int)
Parameter Summary: The accuracy of the pipe.
Parameter: capType (MeshPipeCapStyle)
Parameter Summary: The type of cap to be created at the end of the pipe.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the pipe is faceted, or not.
Parameter: intervals (IEnumerable<Interval>)
Parameter Summary: A series of intervals to pipe. This value can be null.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop, bool circumscribe, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.
Parameter: circumscribe (bool)
Parameter Summary: If True end polygons will circumscribe circle.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a capped mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary:
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.

Method: Rhino.Geometry.Mesh.CreateFromExtrusion(Extrusion extrusion, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: extrusion (Extrusion)
Parameter Summary: Brep to approximate.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: Parameters to use during meshing.

Method: Rhino.Geometry.Mesh.CreateFromFilteredFaceList(Mesh original, IEnumerable<bool> inclusion)
Return: Mesh
Modifiers: public, static
Summary: Constructs a sub-mesh, that contains a filtered list of faces.
Parameter: original (Mesh)
Parameter Summary: The mesh to copy. If null, None is returned.
Parameter: inclusion (IEnumerable<bool>)
Parameter Summary: A series of True and False values, that determine if each face is used in the new mesh. If None or empty, a non-filtered copy of the original mesh is returned.
If the amount does not match the length of the face list, the pattern is repeated. If it exceeds the amount of faces in the mesh face list, the pattern is truncated.

Method: Rhino.Geometry.Mesh.CreateFromIterativeCleanup(IEnumerable<Mesh> meshes, double tolerance)
Return: Mesh[]
Modifiers: public, static
Summary: Repairs meshes with vertices that are too near, using a tolerance value.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The meshes to be repaired.
Parameter: tolerance (double)
Parameter Summary: A minimum distance for clean vertices.

Method: Rhino.Geometry.Mesh.CreateFromLines(Curve[] lines, int maxFaceValence, double tolerance)
Return: Mesh
Modifiers: public, static
Summary: Creates a mesh by analizing the edge structure. Input lines could be from the extraction of edges from an original mesh.
Parameter: lines (Curve[])
Parameter Summary: Lines to use for computation. If curve is non-linear, curve ends are used
Parameter: maxFaceValence (int)
Parameter Summary: The maximum number of edges per face.
Parameter: tolerance (double)
Parameter Summary: The distance after which two end points of lines are considered coincident.

Method: Rhino.Geometry.Mesh.CreateFromPatchSingleFace(Mesh mesh, IEnumerable<ComponentIndex> components)
Return: Mesh
Modifiers: public, static
Summary: Creates a single mesh face from the given input.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: An enumeration of component indexes from the input mesh. This can be one following combinations: 1 vertex (MeshVertex or MeshTopologyVertex) and 1 edge (MeshTopologyEdge), 2 edges (MeshTopologyEdge), or 3 vertices (MeshVertex or MeshTopologyVertex).

Method: Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Curve boundary, MeshingParameters parameters, double tolerance)
Return: Mesh
Modifiers: public, static
Summary: Attempts to construct a mesh from a closed planar curve.RhinoMakePlanarMeshes
Parameter: boundary (Curve)
Parameter Summary: must be a closed planar curve.
Parameter: parameters (MeshingParameters)
Parameter Summary: parameters used for creating the mesh.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during operation.

Method: Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Curve boundary, MeshingParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Do not use this overload. Use version that takes a tolerance parameter instead.
Parameter: boundary (Curve)
Parameter Summary: Do not use.
Parameter: parameters (MeshingParameters)
Parameter Summary: Do not use.

Method: Rhino.Geometry.Mesh.CreateFromPlane(Plane plane, Interval xInterval, Interval yInterval, int xCount, int yCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs a planar mesh grid.
Parameter: plane (Plane)
Parameter Summary: Plane of mesh.
Parameter: xInterval (Interval)
Parameter Summary: Interval describing size and extends of mesh along plane x-direction.
Parameter: yInterval (Interval)
Parameter Summary: Interval describing size and extends of mesh along plane y-direction.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.

Method: Rhino.Geometry.Mesh.CreateFromSphere(Sphere sphere, int xCount, int yCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh sphere.
Parameter: sphere (Sphere)
Parameter Summary: Base sphere for mesh.
Parameter: xCount (int)
Parameter Summary: Number of faces in the around direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in the top-to-bottom direction.

Method: Rhino.Geometry.Mesh.CreateFromSubD(SubD subd, int displayDensity)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD limit surface
Parameter: subd (SubD)
Parameter Summary: SubD to mesh
Parameter: displayDensity (int)
Parameter Summary: Adaptive display density value to use. If in doubt, pass <b>SubDDisplayParameters.Density.DefaultDensity</b> : this is what the cache uses.

Method: Rhino.Geometry.Mesh.CreateFromSubDControlNet(SubD subd)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD control net

Method: Rhino.Geometry.Mesh.CreateFromSubDControlNetWithTextureCoordinates(SubD subd)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD control net including texture coordinates

Method: Rhino.Geometry.Mesh.CreateFromSurface(Surface surface, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a surface
Parameter: surface (Surface)
Parameter Summary: Surface to approximate
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: settings used to create the mesh

Method: Rhino.Geometry.Mesh.CreateFromSurface(Surface surface)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a surface
Parameter: surface (Surface)
Parameter Summary: Surface to approximate

Method: Rhino.Geometry.Mesh.CreateFromSurfaceControlNet(Surface surface)
Return: Mesh
Modifiers: public, static
Summary: Calculate a mesh representation of a surface's control net.
Parameter: surface (Surface)
Parameter Summary: The surface.

Method: Rhino.Geometry.Mesh.CreateFromTessellation(IEnumerable<Point3d> points, IEnumerable<IEnumerable<Point3d>> edges, Plane plane, bool allowNewVertices)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a mesh that is a triangulation of a list of points, projected on a plane, including its holes and fixed edges.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable of points.
Parameter: edges (IEnumerable<IEnumerable<Point3d>>)
Parameter Summary: A list of polylines, or other lists of points representing edges. This can be null. If nested enumerable items are null, they will be discarded.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: allowNewVertices (bool)
Parameter Summary: If true, the mesh might have more vertices than the list of input points, if doing so will improve long thin triangles.

Method: Rhino.Geometry.Mesh.CreateFromTorus(Torus torus, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh torus.
Parameter: torus (Torus)
Parameter Summary: The torus.
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the torus.

Method: Rhino.Geometry.Mesh.CreateIcoSphere(Sphere sphere, int subdivisions)
Return: Mesh
Modifiers: public, static
Summary: Constructs a icospherical mesh. A mesh icosphere differs from a standard UV mesh sphere in that it's vertices are evenly distributed. A mesh icosphere starts from an icosahedron (a regular polyhedron with 20 equilateral triangles). It is then refined by splitting each triangle into 4 smaller triangles. This splitting can be done several times.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.
Parameter: subdivisions (int)
Parameter Summary: The number of times you want the faces split, where 0 <= subdivisions <= 7. Note, the total number of mesh faces produces is: 20 * (4 ^ subdivisions)

Method: Rhino.Geometry.Mesh.CreatePatch(Polyline outerBoundary, double angleToleranceRadians, Surface pullbackSurface, IEnumerable<Curve> innerBoundaryCurves, IEnumerable<Curve> innerBothSideCurves, IEnumerable<Point3d> innerPoints, bool trimback, int divisions)
Return: Mesh
Modifiers: public, static
Summary: Construct a mesh patch from a variety of input geometry.
Parameter: outerBoundary (Polyline)
Parameter Summary: (optional: can be null) Outer boundary polyline, if provided this will become the outer boundary of the resulting mesh. Any of the input that is completely outside the outer boundary will be ignored and have no impact on the result. If any of the input intersects the outer boundary the result will be unpredictable and is likely to not include the entire outer boundary.
Parameter: angleToleranceRadians (double)
Parameter Summary: Maximum angle between unit tangents and adjacent vertices. Used to divide curve inputs that cannot otherwise be represented as a polyline.
Parameter: pullbackSurface (Surface)
Parameter Summary: (optional: can be null) Initial surface where 3d input will be pulled to make a 2d representation used by the function that generates the mesh. Providing a pullbackSurface can be helpful when it is similar in shape to the pattern of the input, the pulled 2d points will be a better representation of the 3d points. If all of the input is more or less coplanar to start with, providing pullbackSurface has no real benefit.
Parameter: innerBoundaryCurves (IEnumerable<Curve>)
Parameter Summary: (optional: can be null) Polylines to create holes in the output mesh. If innerBoundaryCurves are the only input then the result may be null if trimback is set to False (see comments for trimback) because the resulting mesh could be invalid (all faces created contained vertices from the perimeter boundary).
Parameter: innerBothSideCurves (IEnumerable<Curve>)
Parameter Summary: (optional: can be null) These polylines will create faces on both sides of the edge. If there are only input points(innerPoints) there is no way to guarantee a triangulation that will create an edge between two particular points. Adding a line, or polyline, to innerBothsideCurves that includes points from innerPoints will help guide the triangulation.
Parameter: innerPoints (IEnumerable<Point3d>)
Parameter Summary: (optional: can be null) Points to be used to generate the mesh. If outerBoundary is not null, points outside of that boundary after it has been pulled to pullbackSurface (or the best plane through the input if pullbackSurface is null) will be ignored.
Parameter: trimback (bool)
Parameter Summary: Only used when a outerBoundary has not been provided. When that is the case, the function uses the perimeter of the surface as the outer boundary instead. If true, any face of the resulting triangulated mesh that contains a vertex of the perimeter boundary will be removed.
Parameter: divisions (int)
Parameter Summary: Only used when a outerBoundary has not been provided. When that is the case, division becomes the number of divisions each side of the surface's perimeter will be divided into to create an outer boundary to work with.

Method: Rhino.Geometry.Mesh.CreateQuadSphere(Sphere sphere, int subdivisions)
Return: Mesh
Modifiers: public, static
Summary: Constructs a quad mesh sphere. A quad mesh sphere differs from a standard UV mesh sphere in that it's vertices are evenly distributed. A quad mesh sphere starts from a cube (a regular polyhedron with 6 square sides). It is then refined by splitting each quad into 4 smaller quads. This splitting can be done several times.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.
Parameter: subdivisions (int)
Parameter Summary: The number of times you want the faces split, where 0 <= subdivisions <= 8. Note, the total number of mesh faces produces is: 6 * (4 ^ subdivisions)

Method: Rhino.Geometry.Mesh.CreateRefinedCatmullClarkMesh(Mesh mesh, RefinementSettings settings)
Return: Mesh
Modifiers: public, static
Summary: Instantiates a new mesh that represents a Catmull-Clark subdivision of the mesh.
Parameter: mesh (Mesh)
Parameter Summary: The mesh to subdivide.
Parameter: settings (RefinementSettings)
Parameter Summary: An instance of the settings class, or None for defaults.

Method: Rhino.Geometry.Mesh.CreateRefinedLoopMesh(Mesh mesh, LoopFormula formula, RefinementSettings settings)
Return: Mesh
Modifiers: public, static
Summary: Instantiates a new mesh that represents a Loop subdivision of the mesh.
Parameter: mesh (Mesh)
Parameter Summary: The mesh to subdivide.
Parameter: formula (LoopFormula)
Parameter Summary: The Loop subdivision formula.
Parameter: settings (RefinementSettings)
Parameter Summary: An instance of the settings class, or None for defaults.

Method: Rhino.Geometry.Mesh.CreateUnweldedMesh(Mesh mesh)
Return: Mesh
Modifiers: public, static
Summary: Creates a new unwelded mesh from an existing mesh. Texture coordinates are ignored.
Parameter: mesh (Mesh)
Parameter Summary: The source mesh to copy.

Method: Rhino.Geometry.Mesh.QuadRemeshBrep(Brep brep, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves)
Return: Mesh
Modifiers: public, static
Summary: Create Quad Remesh from a Brep
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence

Method: Rhino.Geometry.Mesh.QuadRemeshBrep(Brep brep, QuadRemeshParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Create QuadRemesh from a Brep Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode

Method: Rhino.Geometry.Mesh.QuadRemeshBrepAsync(Brep brep, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public, static
Summary: Quad remesh this Brep asynchronously.
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary:
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshBrepAsync(Brep brep, QuadRemeshParameters parameters, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public, static
Summary: Quad remesh this Brep asynchronously.
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: progress (IProgress<int>)
Parameter Summary:
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.RequireIterativeCleanup(IEnumerable<Mesh> meshes, double tolerance)
Return: bool
Modifiers: public, static
Summary: Analyzes some meshes, and determines if a pass of CreateFromIterativeCleanup would change the array.
All available cleanup steps are used. Currently available cleanup steps are:
- mending of single precision coincidence even though double precision vertices differ.
- union of nearly identical vertices, irrespectively of their origin.
- removal of t-joints along edges. | Parameter: meshes (IEnumerable<Mesh>) | Parameter Summary: A list, and array or any enumerable of meshes. | Parameter: tolerance (double) | Parameter Summary: A 3d distance. This is usually a value of about 10e-7 magnitude.

Method: Rhino.Geometry.Mesh.ShrinkWrap(IEnumerable<GeometryBase> geometryBases, ShrinkWrapParameters parameters, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a collection of GeometryBase objects. returns None or error on failure
Parameter: geometryBases (IEnumerable<GeometryBase>)
Parameter Summary:
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: GeometryBase objects are converted to meshes first using the MeshingParameters provided. Those meshes are then used in the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.ShrinkWrap(IEnumerable<Mesh> meshes, ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a collection of input meshes. Returns None on error or failure.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary:
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.ShrinkWrap(PointCloud pointCloud, ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a point cloud returns None on error or failure

Method: Rhino.Geometry.Mesh.Append(IEnumerable<Mesh> meshes)
Return: void
Modifiers: public
Summary: Append a list of meshes. This function is much more efficient than making repeated calls to Mesh.Append(Mesh) when lots of meshes are being joined into a single large mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to append to this one.

Method: Rhino.Geometry.Mesh.Append(Mesh other)
Return: void
Modifiers: public
Summary: Appends a copy of another mesh to this one and updates indices of appended mesh parts.
Parameter: other (Mesh)
Parameter Summary: Mesh to append to this one.

Method: Rhino.Geometry.Mesh.Check(TextLog textLog, ref MeshCheckParameters parameters)
Return: bool
Modifiers: public
Summary: Examines the mesh and logs a description of what it finds right or wrong. The various properties the function checks for are described in MeshCheckParameters.
Parameter: textLog (TextLog)
Parameter Summary: The text log
Parameter: parameters (MeshCheckParameters)
Parameter Summary: The mesh checking parameter and results.

Method: Rhino.Geometry.Mesh.ClearSurfaceData()
Return: void
Modifiers: public
Summary: Removes surface parameters, curvature parameters and surface statistics from the mesh.

Method: Rhino.Geometry.Mesh.ClearTextureData()
Return: void
Modifiers: public
Summary: Removes all texture coordinate information from this mesh.

Method: Rhino.Geometry.Mesh.ClosestMeshPoint(Point3d testPoint, double maximumDistance)
Return: MeshPoint
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point. Similar to the ClosestPoint function except this returns a MeshPoint class which includes extra information beyond just the location of the closest point.
Parameter: testPoint (Point3d)
Parameter Summary: The source of the search.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint, out Point3d pointOnMesh, double maximumDistance)
Return: int
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.
Parameter: pointOnMesh (Point3d)
Parameter Summary: Point on the mesh closest to testPoint.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint, out Point3d pointOnMesh, out Vector3d normalAtPoint, double maximumDistance)
Return: int
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.
Parameter: pointOnMesh (Point3d)
Parameter Summary: Point on the mesh closest to testPoint.
Parameter: normalAtPoint (Vector3d)
Parameter Summary: The normal vector of the mesh at the closest point.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.

Method: Rhino.Geometry.Mesh.CollapseFacesByArea(double lessThanArea, double greaterThanArea)
Return: int
Modifiers: public
Summary: Collapses multiple mesh faces, with areas less than LessThanArea and greater than GreaterThanArea, based on the principles found in Stan Melax's mesh reduction PDF, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: lessThanArea (double)
Parameter Summary: Area in which faces are selected if their area is less than or equal to.
Parameter: greaterThanArea (double)
Parameter Summary: Area in which faces are selected if their area is greater than or equal to.

Method: Rhino.Geometry.Mesh.CollapseFacesByByAspectRatio(double aspectRatio)
Return: int
Modifiers: public
Summary: Collapses a multiple mesh faces, determined by face aspect ratio, based on criteria found in Stan Melax's polygon reduction, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: aspectRatio (double)
Parameter Summary: Faces with an aspect ratio less than aspectRatio are considered as candidates.

Method: Rhino.Geometry.Mesh.CollapseFacesByEdgeLength(bool bGreaterThan, double edgeLength)
Return: int
Modifiers: public
Summary: Collapses multiple mesh faces, with greater/less than edge length, based on the principles found in Stan Melax's mesh reduction PDF, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: bGreaterThan (bool)
Parameter Summary: Determines whether edge with lengths greater than or less than edgeLength are collapsed.
Parameter: edgeLength (double)
Parameter Summary: Length with which to compare to edge lengths.

Method: Rhino.Geometry.Mesh.ColorAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Color
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by <b>MeshPoint.T</b> .
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.ColorAt(MeshPoint meshPoint)
Return: Color
Modifiers: public
Summary: Evaluate a mesh color at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.Compact()
Return: bool
Modifiers: public
Summary: Removes any unreferenced objects from arrays, re-indexes as needed and shrinks arrays to minimum required size.

Method: Rhino.Geometry.Mesh.ComputeAutoCreaseInformation()
Return: byte
Modifiers: public
Summary: Do not use this method. Length: top.Mesh.Vertices.Count

Method: Rhino.Geometry.Mesh.ComputeCurvatureApproximation(int type, out double perVertexCurvatures)
Return: bool
Modifiers: public
Summary: Compute an approximation of the discrete curvatures of the mesh vertices, according to which type of curvature information is requested. This method will not yield meaningful values on nonmanifold vertices, and nan on naked vertices. For now, this method operates solely on the mesh topology (the fully welded mesh), but distribtes the result across all the ordinary vertices. This method is a const and thread-safe method and will leave the m_K array untouched. An integer indicating which curvature is desired. gaussian_curvature = 1, mean_curvature = 2, minimum unsigned radius of curvature = 3, maximum unsigned radius of curvature = 4 Resulting curvature array on success, None on failure. On success, the length of the array is the number of vertices.
Parameter: type (int)
Parameter Summary: An integer indicating which curvature is desired. gaussian_curvature = 1, mean_curvature = 2, minimum unsigned radius of curvature = 3, maximum unsigned radius of curvature = 4
Parameter: perVertexCurvatures (double)
Parameter Summary: Resulting curvature array on success, None on failure. On success, the length of the array is the number of vertices.

Method: Rhino.Geometry.Mesh.CopyFrom(Mesh other)
Return: void
Modifiers: public
Summary: Copies mesh values into this mesh from another mesh.
Parameter: other (Mesh)
Parameter Summary: The other mesh to copy from.

Method: Rhino.Geometry.Mesh.CreatePartitions(int maximumVertexCount, int maximumTriangleCount)
Return: bool
Modifiers: public
Summary: In ancient times (or modern smart phone times), some rendering engines were only able to process small batches of triangles and the CreatePartitions() function was provided to partition the mesh into subsets of vertices and faces that those rendering engines could handle.

Method: Rhino.Geometry.Mesh.CreateVertexColorsFromBitmap(RhinoDoc doc, TextureMapping mapping, Transform xform, System.Drawing.Bitmap bitmap)
Return: bool
Modifiers: public
Summary: Populate the vertex colors from a bitmap image.
Parameter: doc (RhinoDoc)
Parameter Summary: The document associated with this operation for searching purposes.
Parameter: mapping (TextureMapping)
Parameter Summary: The texture mapping to be used on the mesh. Surface parameter mapping is assumed if None - but surface parameters must be available on the mesh.
Parameter: xform (Transform)
Parameter Summary: Local mapping transform for the mesh mapping. Use identity for surface parameter mapping.
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: The bitmap to use for the colors.

Method: Rhino.Geometry.Mesh.DestroyPartition()
Return: void
Modifiers: public
Summary: Destroys mesh partition.

Method: Rhino.Geometry.Mesh.DestroyTopology()
Return: void
Modifiers: public
Summary: Removes topology data, forcing all topology information to be recomputed.

Method: Rhino.Geometry.Mesh.DestroyTree()
Return: void
Modifiers: public
Summary: Destroys the mesh vertex access tree.

Method: Rhino.Geometry.Mesh.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Constructs a copy of this mesh. This is the same as <b>DuplicateMesh</b> .

Method: Rhino.Geometry.Mesh.DuplicateMesh()
Return: Mesh
Modifiers: public
Summary: Constructs a copy of this mesh. This is the same as <b>Duplicate</b> .

Method: Rhino.Geometry.Mesh.EvaluateMeshGeometry(Surface surface)
Return: bool
Modifiers: public
Summary: If the mesh has SurfaceParameters, the surface is evaluated at these parameters and the mesh geometry is updated.
Parameter: surface (Surface)
Parameter Summary: An input surface.

Method: Rhino.Geometry.Mesh.ExplodeAtUnweldedEdges()
Return: Mesh[]
Modifiers: public
Summary: Explode the mesh into sub-meshes where a sub-mesh is a collection of faces that are contained within a closed loop of "unwelded" edges. Unwelded edges are edges where the faces that share the edge have unique mesh vertices (not mesh topology vertices) at both ends of the edge.

Method: Rhino.Geometry.Mesh.ExtendSelectionByEdgeRidge(int preselectedEdges, int newEdge, bool iterative)
Return: int
Modifiers: public
Summary: Suggests an extension of a selection set by using information related with topology and alignment.
Parameter: preselectedEdges (int)
Parameter Summary: An array of edges that were already selected.
Parameter: newEdge (int)
Parameter Summary: A new edge index.
Parameter: iterative (bool)
Parameter Summary:

Method: Rhino.Geometry.Mesh.ExtendSelectionByFaceLoop(int preselectedFaces, int newFace, bool iterative)
Return: int
Modifiers: public
Summary: Suggests an extension of a face selection set by using information related with topology and alignment.
Parameter: preselectedFaces (int)
Parameter Summary: An array of faces that were already selected.
Parameter: newFace (int)
Parameter Summary: A new face index. If this index is already part of the selection, no extension is suggested.
Parameter: iterative (bool)
Parameter Summary:

Method: Rhino.Geometry.Mesh.ExtractNonManifoldEdges(bool selective)
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, non-manifold mesh edges.
Parameter: selective (bool)
Parameter Summary: If true, then extract hanging faces only.

Method: Rhino.Geometry.Mesh.FileHole(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Given a starting "naked" edge index, this function attempts to determine a "hole" by chaining additional naked edges together until if returns to the start index. Then it triangulates the closed polygon and either adds the faces to the mesh.
Parameter: topologyEdgeIndex (int)
Parameter Summary: Starting naked edge index.

Method: Rhino.Geometry.Mesh.FillHoles()
Return: bool
Modifiers: public
Summary: Attempts to determine "holes" in the mesh by chaining naked edges together. Then it triangulates the closed polygons adds the faces to the mesh.

Method: Rhino.Geometry.Mesh.Flip(bool vertexNormals, bool faceNormals, bool faceOrientation, bool ngonsBoundaryDirection)
Return: void
Modifiers: public
Summary: Reverses the direction of the mesh.
Parameter: vertexNormals (bool)
Parameter Summary: If true, vertex normals will be reversed.
Parameter: faceNormals (bool)
Parameter Summary: If true, face normals will be reversed.
Parameter: faceOrientation (bool)
Parameter Summary: If true, face orientations will be reversed.
Parameter: ngonsBoundaryDirection (bool)
Parameter Summary: If true, ngon boundaries will be reversed

Method: Rhino.Geometry.Mesh.Flip(bool vertexNormals, bool faceNormals, bool faceOrientation)
Return: void
Modifiers: public
Summary: Reverses the direction of the mesh.
Parameter: vertexNormals (bool)
Parameter Summary: If true, vertex normals will be reversed.
Parameter: faceNormals (bool)
Parameter Summary: If true, face normals will be reversed.
Parameter: faceOrientation (bool)
Parameter Summary: If true, face orientations will be reversed.

Method: Rhino.Geometry.Mesh.GetCachedTextureCoordinates(RhinoObject rhinoObject, Rhino.DocObjects.Texture texture)
Return: CachedTextureCoordinates
Modifiers: public
Summary: Returns cached texture coordinate set based on the texture. Make sure to set up cached texture coordinates for all textures in the material first by calling SetCachedTextureCoordinatesFromMaterial(RhinoObject rhinoObject, Rhino.DocObjects.Material material) If this function returns None then there are no texture coordinates available.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: RhinoObject that defines texture mappings
Parameter: texture (Rhino.DocObjects.Texture)
Parameter Summary: Texture that defines the mapping channel

Method: Rhino.Geometry.Mesh.GetCachedTextureCoordinates(System.Guid textureMappingId)
Return: CachedTextureCoordinates
Modifiers: public
Summary: Call this method to get cached texture coordinates for a texture mapping with the specified Id.
Parameter: textureMappingId (System.Guid)
Parameter Summary: Texture mapping Id

Method: Rhino.Geometry.Mesh.GetNakedEdgePointStatus()
Return: bool
Modifiers: public
Summary: Returns an array of Boolean values equal in length to the number of vertices in this mesh. Each value corresponds to a mesh vertex and is set to True if the vertex is not completely surrounded by faces.

Method: Rhino.Geometry.Mesh.GetNakedEdges()
Return: Polyline[]
Modifiers: public
Summary: Returns all edges of a mesh that are considered "naked" in the sense that the edge only has one face.

Method: Rhino.Geometry.Mesh.GetNgonAndFacesCount()
Return: int
Modifiers: public
Summary: Retrieves the count of items that <b>GetNgonAndFacesEnumerable</b> will provide.

Method: Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable()
Return: IEnumerable<MeshNgon>
Modifiers: public
Summary: Retrieves a complete enumerable, i.e., one that provides an iterator over every face that is present, no matter if defined as a triangle, a quad, or a strictly over-four-sided ngon.

Method: Rhino.Geometry.Mesh.GetOutlines(Display.RhinoViewport viewport)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh. The projection information in the viewport is used to determine how the outlines are projected.
Parameter: viewport (Display.RhinoViewport)
Parameter Summary: A viewport to determine projection direction.

Method: Rhino.Geometry.Mesh.GetOutlines(Plane plane)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh projected against a plane.
Parameter: plane (Plane)
Parameter Summary: A plane to project against.

Method: Rhino.Geometry.Mesh.GetOutlines(ViewportInfo viewportInfo, Plane plane)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh.
Parameter: viewportInfo (ViewportInfo)
Parameter Summary: The viewport info that provides the outline direction.
Parameter: plane (Plane)
Parameter Summary: Usually the view's construction plane. If a parallel projection and view plane is parallel to this, then project the results to the plane.

Method: Rhino.Geometry.Mesh.GetPartition(int which)
Return: MeshPart
Modifiers: public
Summary: Retrieves a partition. See <b>CreatePartitions</b> for details.
Parameter: which (int)
Parameter Summary: The partition index.

Method: Rhino.Geometry.Mesh.GetSelfIntersections(double tolerance, out Polyline[] perforations, bool overlapsPolylines, out Polyline[] overlapsPolylinesResult, bool overlapsMesh, out Mesh overlapsMeshResult, FileIO.TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: bool
Modifiers: public
Summary: Gets the intersections of this mesh with itself.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: perforations (Polyline[])
Parameter Summary: The array of perforations.
Parameter: overlapsPolylines (bool)
Parameter Summary: If true, the next argument is computed.
Parameter: overlapsPolylinesResult (Polyline[])
Parameter Summary: The array of overlaps, in terms of polylines.
Parameter: overlapsMesh (bool)
Parameter Summary: If true, the next argument is computed.
Parameter: overlapsMeshResult (Mesh)
Parameter Summary: A mesh that represents the overlaps in terms of surfaces.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A report of the outcome.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter.

Method: Rhino.Geometry.Mesh.GetUnsafeLock(bool writable)
Return: MeshUnsafeLock
Modifiers: public
Summary: Allows to obtain unsafe pointers to the underlying unmanaged data structures of the mesh.
Parameter: writable (bool)
Parameter Summary: True if user will need to write onto the structure. False otherwise.

Method: Rhino.Geometry.Mesh.HealNakedEdges(double distance)
Return: bool
Modifiers: public
Summary: Attempts to "heal" naked edges in a mesh based on a given distance. First attempts to move vertices to neighboring vertices that are within that distance away. Then it finds edges that have a closest point to the vertex within the distance and splits the edge. When it finds one it splits the edge and makes two new edges using that point.
Parameter: distance (double)
Parameter Summary: Distance to not exceed when modifying the mesh.

Method: Rhino.Geometry.Mesh.InvalidateCachedTextureCoordinates(bool bOnlyInvalidateCachedSurfaceParameterMapping)
Return: void
Modifiers: public
Summary: Invalidates all cached texture coordinates. Call this function when you have made changes that will affect the texture coordinates on the mesh.
Parameter: bOnlyInvalidateCachedSurfaceParameterMapping (bool)
Parameter Summary: If True then only cached surface parameter mapping texture coordinates will be invalidated. Use this after making changes to the m_S array.

Method: Rhino.Geometry.Mesh.IsManifold()
Return: bool
Modifiers: public
Summary: Returns True if every mesh "edge" has at most two faces.

Method: Rhino.Geometry.Mesh.IsManifold(bool topologicalTest, out bool isOriented, out bool hasBoundary)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the mesh is manifold. A manifold mesh does not have any edge that borders more than two faces.
Parameter: topologicalTest (bool)
Parameter Summary: If true, the query treats coincident vertices as the same.
Parameter: isOriented (bool)
Parameter Summary: isOriented will be set to True if the mesh is a manifold and adjacent faces have compatible face normals.
Parameter: hasBoundary (bool)
Parameter Summary: hasBoundary will be set to True if the mesh is a manifold and there is at least one "edge" with no more than one adjacent face.

Method: Rhino.Geometry.Mesh.IsPointInside(Point3d point, double tolerance, bool strictlyIn)
Return: bool
Modifiers: public
Summary: Determines if a point is inside a solid mesh.
Parameter: point (Point3d)
Parameter Summary: 3d point to test.
Parameter: tolerance (double)
Parameter Summary: (>=0) 3d distance tolerance used for ray-mesh intersection and determining strict inclusion. This is expected to be a tiny value.
Parameter: strictlyIn (bool)
Parameter Summary: If strictlyIn is true, then point must be inside mesh by at least tolerance in order for this function to return true. If strictlyIn is false, then this function will return True if point is inside or the distance from point to a mesh face is <= tolerance.

Method: Rhino.Geometry.Mesh.MatchEdges(double distance, bool rachet)
Return: bool
Modifiers: public
Summary: Moves face edges of an open mesh to meet adjacent face edges. The method will first try to match vertices, and then then it will try to split edges to make the edges match.
Parameter: distance (double)
Parameter Summary: The distance tolerance. Use larger tolerances only if you select specific edges to close.
Parameter: rachet (bool)
Parameter Summary: If true, matching the mesh takes place in four passes starting at a tolerance that is smaller than your specified tolerance and working up to the specified tolerance with successive passes. This matches small edges first and works up to larger edges. If false, then a single pass is made.

Method: Rhino.Geometry.Mesh.MergeAllCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Mesh.MergeAllCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.Mesh.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Clear local cache on non constant calls

Method: Rhino.Geometry.Mesh.NormalAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Vector3d
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by MeshPoint.T.
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.NormalAt(MeshPoint meshPoint)
Return: Vector3d
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify, Vector3d direction, out List<int> wallFacesOut)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance along the direction parameter. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function. Returns list of wall faces, i.e. the faces that connect original and offset mesh when solidified.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.
Parameter: direction (Vector3d)
Parameter Summary: Direction of offset for all vertices.
Parameter: wallFacesOut (List<int>)
Parameter Summary: Returns list of wall faces.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify, Vector3d direction)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance along the direction parameter. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.
Parameter: direction (Vector3d)
Parameter Summary: Direction of offset for all vertices.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.

Method: Rhino.Geometry.Mesh.Offset(double distance)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals. Same as Mesh.Offset(distance, false)
Parameter: distance (double)
Parameter Summary: A distance value to use for offsetting.

Method: Rhino.Geometry.Mesh.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Performs some memory cleanup if necessary

Method: Rhino.Geometry.Mesh.PatchSingleFace(IEnumerable<ComponentIndex> components)
Return: bool
Modifiers: public
Summary: Creates a single mesh face from the given input. The new mesh will be apppended to this mesh.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: An enumeration of component indexes from this mesh. This can be one following combinations: 1 vertex (MeshVertex or MeshTopologyVertex) and 1 edge (MeshTopologyEdge), 2 edges (MeshTopologyEdge), or 3 vertices (MeshVertex or MeshTopologyVertex).

Method: Rhino.Geometry.Mesh.PointAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Point3d
Modifiers: public
Summary: Evaluates a mesh at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by MeshPoint.T.
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.PointAt(MeshPoint meshPoint)
Return: Point3d
Modifiers: public
Summary: Evaluate a mesh at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.PullCurve(Curve curve, double tolerance)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of the input curve and then moves its control points to the closest point on the mesh. Then it "connects the points" over edges so that a polyline on the mesh is formed.
Parameter: curve (Curve)
Parameter Summary: A curve to pull.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Mesh.PullPointsToMesh(IEnumerable<Point3d> points)
Return: Point3d[]
Modifiers: public
Summary: Pulls a collection of points to a mesh.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An array, a list or any enumerable set of points.

Method: Rhino.Geometry.Mesh.QuadRemesh(QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves)
Return: Mesh
Modifiers: public
Summary: Quad remesh this mesh.
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence

Method: Rhino.Geometry.Mesh.QuadRemesh(QuadRemeshParameters parameters)
Return: Mesh
Modifiers: public
Summary: Quad remesh this mesh.

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(IEnumerable<int> faceBlocks, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.
Parameter: faceBlocks (IEnumerable<int>)
Parameter Summary:
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary:
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.
Parameter: parameters (QuadRemeshParameters)
Parameter Summary:
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary:
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(QuadRemeshParameters parameters, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.

Method: Rhino.Geometry.Mesh.RebuildNormals()
Return: void
Modifiers: public
Summary: Removes mesh normals and reconstructs the face and vertex normals based on the orientation of the faces.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, System.Threading.CancellationToken cancelToken, IProgress<double> progress, out string problemDescription, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:
Parameter: progress (IProgress<double>)
Parameter Summary:
Parameter: problemDescription (string)
Parameter Summary:
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, System.Threading.CancellationToken cancelToken, IProgress<double> progress, out string problemDescription)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:
Parameter: progress (IProgress<double>)
Parameter Summary:
Parameter: problemDescription (string)
Parameter Summary:

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete

Method: Rhino.Geometry.Mesh.Reduce(ReduceMeshParameters parameters, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: parameters (ReduceMeshParameters)
Parameter Summary: Parameters
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(ReduceMeshParameters parameters)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: parameters (ReduceMeshParameters)
Parameter Summary: Parameters

Method: Rhino.Geometry.Mesh.ReleaseUnsafeLock(MeshUnsafeLock meshData)
Return: void
Modifiers: public
Summary: Updates the Mesh data with the information that was stored via the <b>MeshUnsafeLock</b> .
Parameter: meshData (MeshUnsafeLock)
Parameter Summary: The data that will be unlocked.

Method: Rhino.Geometry.Mesh.SetCachedTextureCoordinates(TextureMapping tm, ref Transform xf)
Return: void
Modifiers: public
Summary: Set cached texture coordinates using the specified mapping.

Method: Rhino.Geometry.Mesh.SetCachedTextureCoordinatesFromMaterial(RhinoObject rhinoObject, Rhino.DocObjects.Material material)
Return: void
Modifiers: public
Summary: Sets up cached texture coordinate set for each texture in the material. Textures in the Material define which mapping channels are used and the RhinoObject defines what texture mapping is used for each mapping channel. After this method is called all necessary texture coordinate sets are cached and correct texture coordinates for each texture can be fetched using GetCachedTextureCoordinates(RhinoObject rhinoObject, Rhino.DocObjects.Texture texture) If any texture coordinates are already cached they will not be re-computed.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: RhinoObject that defines texture mappings
Parameter: material (Rhino.DocObjects.Material)
Parameter Summary: Material with textures that define mapping channels

Method: Rhino.Geometry.Mesh.SetSurfaceParametersFromTextureCoordinates()
Return: bool
Modifiers: public
Summary: If the mesh does not have surface evaluation parameters, has texture coordinates, and the surface parameters can be set in a way so the existing texture coordinates can be computed from the surface parameters, then this function sets the surface parameters. This is useful when meshes that have texture coordinates and do not have surface parameters want to set the surface parameters in a way so that the texture mapping of type TextureMappingType.SurfaceParameters will restore the texture coordinates.

Method: Rhino.Geometry.Mesh.SetTextureCoordinates(TextureMapping tm, Transform xf, bool lazy, bool seamCheck)
Return: void
Modifiers: public
Summary: Set texture coordinates using given mapping and applying given transform. Set lazy to False to generate texture coordinates right away.
Parameter: tm (TextureMapping)
Parameter Summary: Texture mapping
Parameter: xf (Transform)
Parameter Summary: Transform to apply to the texture mapping
Parameter: lazy (bool)
Parameter Summary: Whether to generate lazily (true) or right away (false)
Parameter: seamCheck (bool)
Parameter Summary: If True then some mesh edges might be unwelded to better represent UV discontinuities in the texture mapping. This only happens for the following mappings: Box, Sphere, Cylinder

Method: Rhino.Geometry.Mesh.SetTextureCoordinates(TextureMapping tm, Transform xf, bool lazy)
Return: void
Modifiers: public
Summary: Set texture coordinates using given mapping and applying given transform. Set lazy to False to generate texture coordinates right away.
Parameter: tm (TextureMapping)
Parameter Summary: Texture mapping
Parameter: xf (Transform)
Parameter Summary: Transform to apply to the texture mapping
Parameter: lazy (bool)
Parameter Summary: Whether to generate lazily (true) or right away (false)

Method: Rhino.Geometry.Mesh.ShrinkWrap(ShrinkWrapParameters parameters, System.Threading.CancellationToken token)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrapped mesh or None when a mesh was not created or error.
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.
Parameter: token (System.Threading.CancellationToken)
Parameter Summary: A cancellation token

Method: Rhino.Geometry.Mesh.ShrinkWrap(ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrapped mesh or None when a mesh was not created or error.
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, int numSteps, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: numSteps (int)
Parameter Summary: The number of smoothing iterations.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(IEnumerable<int> vertexIndices, double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths part of a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: vertexIndices (IEnumerable<int>)
Parameter Summary: The mesh vertex indices that specify the part of the mesh to smooth.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(IEnumerable<int> vertexIndices, double smoothFactor, int numSteps, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths part of a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: vertexIndices (IEnumerable<int>)
Parameter Summary: The mesh vertex indices that specify the part of the mesh to smooth.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: numSteps (int)
Parameter Summary: The number of smoothing iterations.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.SolidOrientation()
Return: int
Modifiers: public
Summary: Determines orientation of a "solid" mesh.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes, double tolerance, bool splitAtCoplanar, bool createNgons, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.
Parameter: tolerance (double)
Parameter Summary: A value for intersection tolerance.
WARNING! Correct values are typically in the (10e-8 - 10e-4) range.
An option is to use the document tolerance diminished by a few orders or magnitude. | Parameter: splitAtCoplanar (bool) | Parameter Summary: If false, coplanar areas will not be separated. | Parameter: createNgons (bool) | Parameter Summary: If true, creates ngons along the split ridge. | Parameter: textLog (TextLog) | Parameter Summary: A text log to write onto. | Parameter: cancel (System.Threading.CancellationToken) | Parameter Summary: A cancellation token. | Parameter: progress (IProgress<double>) | Parameter Summary: A progress reporter item. This can be null.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes, double tolerance, bool splitAtCoplanar, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.
Parameter: tolerance (double)
Parameter Summary: A value for intersection tolerance.
WARNING! Correct values are typically in the (10e-8 - 10e-4) range.
An option is to use the document tolerance diminished by a few orders or magnitude. | Parameter: splitAtCoplanar (bool) | Parameter Summary: If false, coplanar areas will not be separated. | Parameter: textLog (TextLog) | Parameter Summary: A text log to write onto. | Parameter: cancel (System.Threading.CancellationToken) | Parameter Summary: A cancellation token. | Parameter: progress (IProgress<double>) | Parameter Summary: A progress reporter item. This can be null.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes. Suggestion: upgrade to overload with tolerance. Does not split at coplanar intersections.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.

Method: Rhino.Geometry.Mesh.Split(Mesh mesh)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with another mesh. Suggestion: upgrade to overload with tolerance.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to split with.

Method: Rhino.Geometry.Mesh.Split(Plane plane)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh by an infinite plane.
Parameter: plane (Plane)
Parameter Summary: The splitting plane.

Method: Rhino.Geometry.Mesh.SplitDisjointPieces()
Return: Mesh[]
Modifiers: public
Summary: Splits up the mesh into its unconnected pieces.

Method: Rhino.Geometry.Mesh.SplitWithProjectedPolylines(IEnumerable<PolylineCurve> curves, double tolerance, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Splits a mesh by adding edges in correspondence with input polylines, and divides the mesh at partitioned areas. Polyline segments that are measured not to be on the mesh will be ignored.
Parameter: curves (IEnumerable<PolylineCurve>)
Parameter Summary: An array, a list or any enumerable of polyline curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: textLog (TextLog)
Parameter Summary: A text log, or null.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token to stop the computation at a given point.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter to inform the user about progress. The reported value is indicative.

Method: Rhino.Geometry.Mesh.SplitWithProjectedPolylines(IEnumerable<PolylineCurve> curves, double tolerance)
Return: Mesh[]
Modifiers: public
Summary: Splits a mesh by adding edges in correspondence with input polylines, and divides the mesh at partitioned areas. Polyline segments that are measured not to be on the mesh will be ignored.
Parameter: curves (IEnumerable<PolylineCurve>)
Parameter Summary: An array, a list or any enumerable of polyline curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Mesh.Subdivide()
Return: bool
Modifiers: public
Summary: Subdivides the faces of the mesh.

Method: Rhino.Geometry.Mesh.Subdivide(IEnumerable<int> faceIndices)
Return: bool
Modifiers: public
Summary: Subdivides specific faces of the mesh.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: Indices of the faces to subdivide.

Method: Rhino.Geometry.Mesh.UnifyNormals()
Return: int
Modifiers: public
Summary: Attempts to fix inconsistencies in the directions of mesh faces in a mesh. This function does not modify mesh vertex normals, it rearranges the mesh face winding and face normals to make them all consistent. Note, you may want to call Mesh.Normals.ComputeNormals() to recompute vertex normals after calling this functions.

Method: Rhino.Geometry.Mesh.UnifyNormals(bool countOnly)
Return: int
Modifiers: public
Summary: Attempts to fix inconsistencies in the directions of mesh faces in a mesh. This function does not modify mesh vertex normals, it rearranges the mesh face winding and face normals to make them all consistent. Note, you may want to call Mesh.Normals.ComputeNormals() to recompute vertex normals after calling this functions.
Parameter: countOnly (bool)
Parameter Summary: If true, then only the number of faces that would be modified is determined.

Method: Rhino.Geometry.Mesh.Unweld(double angleToleranceRadians, bool modifyNormals)
Return: void
Modifiers: public
Summary: Makes sure that faces sharing an edge and having a difference of normal greater than or equal to angleToleranceRadians have unique vertices along that edge, adding vertices if necessary.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angle at which to make unique vertices.
Parameter: modifyNormals (bool)
Parameter Summary: Determines whether new vertex normals will have the same vertex normal as the original (false) or vertex normals made from the corresponding face normals (true)

Method: Rhino.Geometry.Mesh.UnweldEdge(IEnumerable<int> edgeIndices, bool modifyNormals)
Return: bool
Modifiers: public
Summary: Adds creases to a smooth mesh by creating coincident vertices along selected edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of mesh topology edge indices.
Parameter: modifyNormals (bool)
Parameter Summary: If true, the vertex normals on each side of the edge take the same value as the face to which they belong, giving the mesh a hard edge look. If false, each of the vertex normals on either side of the edge is assigned the same value as the original normal that the pair is replacing, keeping a smooth look.

Method: Rhino.Geometry.Mesh.UnweldVertices(IEnumerable<int> topologyVertexIndices, bool modifyNormals)
Return: bool
Modifiers: public
Summary: Ensures that faces sharing a common topological vertex have unique indices into the <b>Collections.MeshVertexList</b> collection.
Parameter: topologyVertexIndices (IEnumerable<int>)
Parameter Summary: Topological vertex indices, from the <b>Collections.MeshTopologyVertexList</b> collection, to be unwelded. Use <b>Collections.MeshTopologyVertexList.TopologyVertexIndex</b> to convert from vertex indices to topological vertex indices.
Parameter: modifyNormals (bool)
Parameter Summary: If true, the new vertex normals will be calculated from the face normal.

Method: Rhino.Geometry.Mesh.Volume()
Return: double
Modifiers: public
Summary: Compute volume of the mesh.

Method: Rhino.Geometry.Mesh.Weld(double angleToleranceRadians)
Return: void
Modifiers: public
Summary: Makes sure that faces sharing an edge and having a difference of normal greater than or equal to angleToleranceRadians share vertices along that edge, vertex normals are averaged.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angle at which to weld vertices.

Method: Rhino.Geometry.Mesh.WithDisplacement(MeshDisplacementInfo displacement)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with displacement applied to it.
Parameter: displacement (MeshDisplacementInfo)
Parameter Summary: Information on mesh displacement.

Method: Rhino.Geometry.Mesh.WithEdgeSoftening(double softeningRadius, bool chamfer, bool faceted, bool force, double angleThreshold)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with edge softening applied to it.
Parameter: softeningRadius (double)
Parameter Summary: The softening radius.
Parameter: chamfer (bool)
Parameter Summary: Specifies whether to chamfer the edges.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the edges are faceted.
Parameter: force (bool)
Parameter Summary: Specifies whether to soften edges despite too large a radius.
Parameter: angleThreshold (double)
Parameter Summary: Threshold angle (in degrees) which controls whether an edge is softened or not. The angle refers to the angles between the adjacent faces of an edge.

Method: Rhino.Geometry.Mesh.WithShutLining(bool faceted, double tolerance, IEnumerable<ShutLiningCurveInfo> curves)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with shut lining applied to it.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the shutline is faceted.
Parameter: tolerance (double)
Parameter Summary: The tolerance of the shutline.
Parameter: curves (IEnumerable<ShutLiningCurveInfo>)
Parameter Summary: A collection of curve arguments.

Class: Rhino.Geometry.MeshBooleanOptions
Summary: Contains a set of data to pass to boolean options.

Constructor: Rhino.Geometry.MeshBooleanOptions.MeshBooleanOptions()
Summary: Initializes a new instance of the MeshBooleanOptions class

Property: Rhino.Geometry.MeshBooleanOptions.CancellationToken
Return: CancellationToken
Modifiers: public
Summary: A token that allows to request the cancellation of the operation.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.ProgressReporter
Return: IProgress<double>
Modifiers: public
Summary: Gets or sets the object that is responsible to keep track of calculation progression.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.TextLog
Return: TextLog
Modifiers: public
Summary: Gets or sets a text log to write computed operations into.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets a tolerance value for intersections and overlaps. <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>
Accessors: get set

Class: Rhino.Geometry.MeshDisplacementInfo
Summary: Contains mesh displacement information.

Constructor: Rhino.Geometry.MeshDisplacementInfo.MeshDisplacementInfo(RenderTexture texture, TextureMapping mapping)
Summary: Constructs a displacement information instance with default values. Users of this class should not rely on default values to stay constant across service releases.

Property: Rhino.Geometry.MeshDisplacementInfo.Black
Return: double
Modifiers: public
Summary: Value considered lowest point in the displacement.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.BlackMove
Return: double
Modifiers: public
Summary: The amount of displacement for the black color in the texture.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.ChannelNumber
Return: int
Modifiers: public
Summary: Mapping channel number for the displacement mapping.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.FaceLimit
Return: int
Modifiers: public
Summary: Runs a mesh reduction as a post process o simplify the result of displacement to meet the specified number of faces.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.FairingAmount
Return: int
Modifiers: public
Summary: Straightens rough feature edges. The value specifies the number of passes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.InstanceTransform
Return: Transform
Modifiers: public
Summary: Instance transformation of the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.Mapping
Return: TextureMapping
Modifiers: public
Summary: The texture mapping of the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.MappingTransform
Return: Transform
Modifiers: public
Summary: Texture mapping transform.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.MemoryLimit
Return: int
Modifiers: public
Summary: Specifies how much memory can be allocated for use by the displacement mesh. Value in megabytes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.PostWeldAngle
Return: double
Modifiers: public
Summary: Specifies the maximum angle between face normals of adjacent faces that will get welded together.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.RefineSensitivity
Return: double
Modifiers: public
Summary: Specifies how sensitive the divider for contrasts is on the displacement texture.
Specify 1 to split all mesh edges on each refine step.
Specify 0.99 to make even slight contrasts on the displacement texture cause edges to be split.
Specifying 0.01 only splits edges where heavy contrast exists. | Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.RefineStepCount
Return: int
Modifiers: public
Summary: Specifies the number of refinement passes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.SweepPitch
Return: double
Modifiers: public
Summary: Specifies how densely the object is initially subdivided. The lower the value, the higher the resolution of the displaced mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.Texture
Return: RenderTexture
Modifiers: public
Summary: The texture used as displacement.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.White
Return: double
Modifiers: public
Summary: Value considered highest point of the displacement texture.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.WhiteMove
Return: double
Modifiers: public
Summary: The amount of displacement for the white color in the texture.
Accessors: get set

Class: Rhino.Geometry.MeshExtruder
Summary: Extrudes a mesh and provides preview

Constructor: Rhino.Geometry.MeshExtruder.MeshExtruder(Mesh inputMesh, IEnumerable<ComponentIndex> componentIndices)
Summary: Construct object to extrude given mesh faces, edges and ngons.

Property: Rhino.Geometry.MeshExtruder.EdgeBasedUVN
Return: bool
Modifiers: public
Summary: Edge based UVN defines UVN directions according to boundary edge directions
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.FaceDirectionMode
Return: MeshExtruderFaceDirectionMode
Modifiers: public
Summary: Face direction mode determines how faces are oriented
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.KeepOriginalFaces
Return: bool
Modifiers: public
Summary: Whether or not to keep original faces.
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.PreviewLines
Return: Line[]
Modifiers: public
Summary: Gets Line objects to preview extruded mesh.
Accessors: get

Property: Rhino.Geometry.MeshExtruder.SurfaceParameterMode
Return: MeshExtruderParameterMode
Modifiers: public
Summary: Mode for creating surface parameters for extruded areas
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.TextureCoordinateMode
Return: MeshExtruderParameterMode
Modifiers: public
Summary: Mode for creating texture coordinates for extruded areas
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.Transform
Return: Transform
Modifiers: public
Summary: Transform of extrusion
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.UVN
Return: bool
Modifiers: public
Summary: Whether or not to perform extrude in UVN basis.
Accessors: get set

Method: Rhino.Geometry.MeshExtruder.Dispose()
Return: void
Modifiers: public
Summary: Dispose of this object and any unmanaged memory associated with it.

Method: Rhino.Geometry.MeshExtruder.ExtrudedMesh(out Mesh extrudedMeshOut, out List<ComponentIndex> componentIndicesOut)
Return: bool
Modifiers: public
Summary: Creates new extruded mesh. Returns True if any edges or faces were extruded.
Parameter: extrudedMeshOut (Mesh)
Parameter Summary: Extruded mesh
Parameter: componentIndicesOut (List<ComponentIndex>)
Parameter Summary: Component indices of extruded faces and vertices

Method: Rhino.Geometry.MeshExtruder.ExtrudedMesh(out Mesh extrudedMeshOut)
Return: bool
Modifiers: public
Summary: Creates new extruded mesh. Returns True if any edges or faces were extruded.
Parameter: extrudedMeshOut (Mesh)
Parameter Summary: Extruded mesh

Method: Rhino.Geometry.MeshExtruder.GetWallFaces()
Return: List<int>
Modifiers: public
Summary: Return list of faces that were added to connect transformed edges/faces to non-transformed edges/faces.

Class: Rhino.Geometry.MeshingParameters
Summary: Represents settings used for creating a mesh representation of a brep or surface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters()
Summary: Initializes a new instance with default values.
Initial values are same as .

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(double density, double minimumEdgeLength)
Summary: Initializes a new instance with simple values, similar to that of Rhino's meshing slider interface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(double density)
Summary: Initializes a new instance with simple values, similar to that of Rhino's meshing slider interface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(MeshingParameters source)
Summary: Initializes a new instance copying values from source.
Initial values are same as .

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(SerializationInfo info, StreamingContext context)
Summary: Called by BinaryFormatter.Deserialize to create a new MeshParamaters object.

Property: Rhino.Geometry.MeshingParameters.Coarse
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters for coarse meshing.
This corresponds with the "Jagged and Faster" default in Rhino. | Accessors: get

Property: Rhino.Geometry.MeshingParameters.Default
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the default render mesh. Only use this if you plan on specifying your own custom meshing parameters.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.DefaultAnalysisMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the default analysis mesh.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.FastRenderMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the a render mesh when meshing speed is preferred over mesh quality.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.Minimal
Return: MeshingParameters
Modifiers: public, static
Summary: Gets minimal meshing parameters.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.QualityRenderMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the a render mesh when mesh quality is preferred over meshing speed.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.Smooth
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters for smooth meshing.
This corresponds with the "Smooth and Slower" default in Rhino. | Accessors: get

Property: Rhino.Geometry.MeshingParameters.ClosedObjectPostProcess
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not to post process non-closed meshes that should be closed. If the Brep being meshed is closed, JaggedSeams = false, and ClosedObjectPostProcess = true, and the resulting mesh is not closed, then a post meshing process is applied to find and close gaps in the mesh. Typically the resulting mesh is not closed because the input Brep has a geometric flaw, like loops in trimming curve.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.ComputeCurvature
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not surface curvature data will be embedded in the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.DoublePrecision
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the mesh should have double precision vertices in addition to the floats.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAmplification
Return: double
Modifiers: public
Summary: Gets or sets the grid amplification factor. Values lower than 1.0 will decrease the number of initial quads, values higher than 1.0 will increase the number of initial quads.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAngle
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed angle difference (in radians) for a single sampling quad. The angle pertains to the surface normals.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAspectRatio
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed aspect ratio of sampling quads.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridMaxCount
Return: int
Modifiers: public
Summary: Gets or sets the maximum number of grid quads in the initial sampling grid.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridMinCount
Return: int
Modifiers: public
Summary: Gets or sets the minimum number of grid quads in the initial sampling grid.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.JaggedSeams
Return: bool
Modifiers: public
Summary: Gets or sets whether or not the mesh is allowed to have jagged seams. When this flag is set to true, meshes on either side of a Brep Edge will not match up.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MaximumEdgeLength
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed mesh edge length.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MinimumEdgeLength
Return: double
Modifiers: public
Summary: Gets or sets the minimum allowed mesh edge length.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MinimumTolerance
Return: double
Modifiers: public
Summary: Gets or sets the minimum tolerance.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineAngle
Return: double
Modifiers: public
Summary: Gets or sets the mesh parameter refine angle in radians.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineAngleInDegrees
Return: double
Modifiers: public
Summary: Gets or sets the mesh parameter refine angle in degrees.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineGrid
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the sampling grid can be refined when certain tolerances are not met.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the relative tolerance.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.SimplePlanes
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not planar areas are allowed to be meshed in a simplified manner.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.TextureRange
Return: MeshingParameterTextureRange
Modifiers: public
Summary: Gets or sets how and if textures will be packed.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed edge deviation. This tolerance is measured between the center of the mesh edge and the surface.
Accessors: get set

Method: Rhino.Geometry.MeshingParameters.DocumentCurrentSetting(RhinoDoc doc)
Return: MeshingParameters
Modifiers: public, static
Summary: Gets the MeshingParameters that are currently set for a document. These are the same settings that are shown in the DocumentProperties "mesh settings" user interface.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document to query.

Method: Rhino.Geometry.MeshingParameters.FromEncodedString(string value)
Return: MeshingParameters
Modifiers: public, static
Summary: Converts encoded serialized string into a MeshingParameters
Parameter: value (string)
Parameter Summary: Encoded string returned by MeshingParameters.ToString()

Method: Rhino.Geometry.MeshingParameters.CopyFrom(MeshingParameters source)
Return: void
Modifiers: public
Summary: Call this method to copy MeshingParameters from another instance.

Method: Rhino.Geometry.MeshingParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.MeshingParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.MeshingParameters.Equals(MeshingParameters other)
Return: bool
Modifiers: public
Summary: Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
Parameter: other (MeshingParameters)
Parameter Summary: The specified MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
Parameter: obj (object)
Parameter Summary: The specified MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.GetHashCode()
Return: int
Modifiers: public, override
Summary: Computes a hash number that represents the current MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public

Method: Rhino.Geometry.MeshingParameters.SetSubDDisplayParameters(SubDDisplayParameters subDDisplayParameters)
Return: void
Modifiers: public
Summary: Sets the SubD display parameters.
Parameter: subDDisplayParameters (SubDDisplayParameters)
Parameter Summary: The SubD display parameters.

Method: Rhino.Geometry.MeshingParameters.SubDDisplayParameters()
Return: SubDDisplayParameters
Modifiers: public
Summary: Gets the SubD display parameters.

Method: Rhino.Geometry.MeshingParameters.ToEncodedString()
Return: string
Modifiers: public
Summary: Returns a encoded string that represents the MeshingParameters.

Class: Rhino.Geometry.MeshNgon
Summary: Represents a mesh ngon.
When retrieved from the Ngon property of a mesh, this contains faces that have edge valence strictly higher than 4.
When retrieving Ngons from , this might contain also triangles and quads.

Property: Rhino.Geometry.MeshNgon.Empty
Return: MeshNgon
Modifiers: public, static
Summary: Gets an empty MeshNgon.
Accessors: get

Property: Rhino.Geometry.MeshNgon.BoundaryVertexCount
Return: int
Modifiers: public
Summary: Get the number of vertices in this ngon. <b>MeshNgon</b> about length information.
Accessors: get

Property: Rhino.Geometry.MeshNgon.FaceCount
Return: int
Modifiers: public
Summary: Get the number of faces in this ngon.
Accessors: get

Property: Rhino.Geometry.MeshNgon.this[int index]
Return: int
Modifiers: public
Summary: Get a mesh vertex index from the ngon's vertex index list.

Method: Rhino.Geometry.MeshNgon.Create(IList<int> meshVertexIndexList, IList<int> meshFaceIndexList)
Return: MeshNgon
Modifiers: public, static
Summary: Constructs an ngon from lists of mesh vertex and face indexes.
Parameter: meshVertexIndexList (IList<int>)
Parameter Summary: A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
Parameter: meshFaceIndexList (IList<int>)
Parameter Summary: A list of mesh face indexes that define the interior of the ngon. The mesh face indexes may be in any order.

Method: Rhino.Geometry.MeshNgon.BoundaryVertexIndexList()
Return: uint
Modifiers: public
Summary: Get the outer boundary mesh vertex list of the ngon.
Vertices are sorted counterclockwise with respect to the direction of the face, although the degree by which vertex normals will respect this might vary.

Method: Rhino.Geometry.MeshNgon.CompareTo(MeshNgon otherNgon)
Return: int
Modifiers: public
Summary: Compares this <b>MeshNgon</b> with otherNgon and returns a value of 1, 0, or -1.
Priority is for vertex count, then face count, then vertex index list values, then face index list values. | Parameter: otherNgon (MeshNgon) | Parameter Summary: The other <b>MeshNgon</b> to use in comparison.

Method: Rhino.Geometry.MeshNgon.Equals(MeshNgon otherNgon)
Return: bool
Modifiers: public
Summary: Determines if this ngon and otherNgon are identical.
Parameter: otherNgon (MeshNgon)
Parameter Summary: The other ngon for comparison.

Method: Rhino.Geometry.MeshNgon.Equals(object otherObj)
Return: bool
Modifiers: public, override
Summary: Determines if otherObj is a MeshNgon and is identical to this ngon.
Parameter: otherObj (object)
Parameter Summary: Any object the represents the other mesh face for comparison.

Method: Rhino.Geometry.MeshNgon.FaceIndexList()
Return: uint
Modifiers: public
Summary: Get the ngon's mesh face index list.

Method: Rhino.Geometry.MeshNgon.GetHashCode()
Return: int
Modifiers: public, override
Summary: Returns a runtime-stable hash code for the current mesh ngon. You are not allowed to rely on persistence of this hash code in serialization, but for each instance of the application, this hash code will be the same for ngons with identical vertex and face lists.

Method: Rhino.Geometry.MeshNgon.Set(IList<int> meshVertexIndexList, IList<int> meshFaceIndexList)
Return: void
Modifiers: public
Summary: Set the ngon vertex and face index lists.
Parameter: meshVertexIndexList (IList<int>)
Parameter Summary: A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
Parameter: meshFaceIndexList (IList<int>)
Parameter Summary: A list of mesh face indexes that define the interior of the ngon. The mesh face indexes may be in any order.

Method: Rhino.Geometry.MeshNgon.ToString()
Return: string
Modifiers: public, override
Summary: Returns a string representation for this <b>MeshNgon</b> . This is to provide a meaningful visualization of this structure and is subject to change in newer releases.

Class: Rhino.Geometry.MeshPart
Summary: Represents a portion of a mesh for partitioning

Property: Rhino.Geometry.MeshPart.EndFaceIndex
Return: int
Modifiers: public
Summary: End of subinterval of parent mesh face array
Accessors: get

Property: Rhino.Geometry.MeshPart.EndVertexIndex
Return: int
Modifiers: public
Summary: End of subinterval of parent mesh vertex array
Accessors: get

Property: Rhino.Geometry.MeshPart.StartFaceIndex
Return: int
Modifiers: public
Summary: Start of subinterval of parent mesh face array
Accessors: get

Property: Rhino.Geometry.MeshPart.StartVertexIndex
Return: int
Modifiers: public
Summary: Start of subinterval of parent mesh vertex array
Accessors: get

Property: Rhino.Geometry.MeshPart.TriangleCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Geometry.MeshPart.VertexCount
Return: int
Modifiers: public
Summary: EndVertexIndex - StartVertexIndex
Accessors: get

Class: Rhino.Geometry.MeshPoint
Summary: Represents a point that is found on a mesh.

Property: Rhino.Geometry.MeshPoint.ComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of the intersecting element in the mesh.
Accessors: get

Property: Rhino.Geometry.MeshPoint.EdgeIndex
Return: int
Modifiers: public
Summary: When set, EdgeIndex is an index of an edge in the mesh's edge list.
Accessors: get

Property: Rhino.Geometry.MeshPoint.EdgeParameter
Return: double
Modifiers: public
Summary: Edge parameter when found.
Accessors: get

Property: Rhino.Geometry.MeshPoint.FaceIndex
Return: int
Modifiers: public
Summary: FaceIndex is an index of a face in mesh.Faces. When ComponentIndex refers to a vertex, any face that uses the vertex may appear as FaceIndex. When ComponenctIndex refers to an Edge or EdgeIndex is set, then any face that uses that edge may appear as FaceIndex.
Accessors: get

Property: Rhino.Geometry.MeshPoint.Mesh
Return: Mesh
Modifiers: public
Summary: The mesh that is related to this point.
Accessors: get

Property: Rhino.Geometry.MeshPoint.Point
Return: Point3d
Modifiers: public
Summary: Gets the location (position) of this point.
Accessors: get

Property: Rhino.Geometry.MeshPoint.T
Return: double[]
Modifiers: public
Summary: Barycentric quad coordinates for the point on the mesh face mesh.Faces[FaceIndex]. If the face is a triangle disregard T[3] (it should be set to 0.0). If the face is a quad and is split between vertices 0 and 2, then T[3] will be 0.0 when point is on the triangle defined by vi[0], vi[1], vi[2], and T[1] will be 0.0 when point is on the triangle defined by vi[0], vi[2], vi[3]. If the face is a quad and is split between vertices 1 and 3, then T[2] will be 0.0 when point is on the triangle defined by vi[0], vi[1], vi[3], and m_t[0] will be 0.0 when point is on the triangle defined by vi[1], vi[2], vi[3].
Accessors: get

Property: Rhino.Geometry.MeshPoint.Triangle
Return: char
Modifiers: public
Summary: Face triangle where the intersection takes place:
0 is unset
A is 0,1,2
B is 0,2,3
C is 0,1,3
D is 1,2,3 | Accessors: get

Method: Rhino.Geometry.MeshPoint.GetTriangle(out int a, out int b, out int c)
Return: bool
Modifiers: public
Summary: Gets the mesh face indices of the triangle where the intersection is on the face takes into consideration the way the quad was split during the intersection.

Class: Rhino.Geometry.MeshUnsafeLock
Summary: Permits access to the underlying mesh raw data structures in an unsafe way.

Method: Rhino.Geometry.MeshUnsafeLock.FaceNormalsArray(out int length)
Return: Vector3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh face normals array, which uses vectors defined with single precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.FacesArray(out int length)
Return: MeshFace*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw faces array, which uses 4 integers for each face. <b>MeshFace</b> .
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.NormalVector3fArray(out int length)
Return: Vector3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex normal array, which uses vectors defined with single precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.Release()
Return: void
Modifiers: public
Summary: Releases the lock and updates the underlying unmanaged data structures.

Method: Rhino.Geometry.MeshUnsafeLock.VertexColorsArray(out int length)
Return: int*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex colors array, which uses RGBA integers or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.VertexPoint3dArray(out int length)
Return: Point3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex array, which uses coordinates defined with double precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.VertexPoint3fArray(out int length)
Return: Point3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex array, which uses coordinates defined with single precision floating point numbers, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Class: Rhino.Geometry.MeshUnwrapper
Summary: Unwraps meshes and stores the result in their texture coordinates

Constructor: Rhino.Geometry.MeshUnwrapper.MeshUnwrapper(IEnumerable<Mesh> meshes)
Summary: Creates a mesh unwrapper for a set of meshes

Constructor: Rhino.Geometry.MeshUnwrapper.MeshUnwrapper(Mesh mesh)
Summary: Creates a mesh unwrapper for a single mesh

Property: Rhino.Geometry.MeshUnwrapper.SymmetryPlane
Return: Plane
Modifiers: public
Summary: Symmetry plane. Unwrapper tries to keep unwrap result symmetric to this plane.
Accessors: set

Method: Rhino.Geometry.MeshUnwrapper.Dispose()
Return: void
Modifiers: public
Summary: Dispose of this object and any unmanaged memory associated with it.

Method: Rhino.Geometry.MeshUnwrapper.Unwrap(MeshUnwrapMethod method)
Return: bool
Modifiers: public
Summary: Unwraps the meshes passed in as constructor arguments and stores the results in texture coordinates.
Parameter: method (MeshUnwrapMethod)
Parameter Summary: Unwrap method to be used

Class: Rhino.Geometry.MorphControl
Summary: Represents a geometry that is able to control the morphing behavior of some other geometry.

Constructor: Rhino.Geometry.MorphControl.MorphControl(NurbsCurve originCurve, NurbsCurve targetCurve)
Summary: Constructs a MorphControl that allows for morphing between two curves.

Constructor: Rhino.Geometry.MorphControl.MorphControl(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.MorphControl.Curve
Return: NurbsCurve
Modifiers: public
Summary: Returns the morph control's curve. While this should never be null, the calling function should check.
Accessors: get

Property: Rhino.Geometry.MorphControl.PreserveStructure
Return: bool
Modifiers: public
Summary: True if the morph should be done in a way that preserves the structure of the geometry. In particular, for NURBS objects, True means that only the control points are moved. The PreserveStructure value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.MorphControl.QuickPreview
Return: bool
Modifiers: public
Summary: True if the morph should be done as quickly as possible because the result is being used for some type of dynamic preview. If QuickPreview is true, the tolerance may be ignored. The QuickPreview value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.MorphControl.SpaceMorphTolerance
Return: double
Modifiers: public
Summary: The 3d fitting tolerance used when morphing surfaces and breps. The default is 0.0 and any value <= 0.0 is ignored by morphing functions. The value returned by Tolerance does not affect the way meshes and points are morphed.
Accessors: get set

Property: Rhino.Geometry.MorphControl.Surface
Return: NurbsSurface
Modifiers: public
Summary: Returns the morph control's surface. While this should never be null, the calling function should check.
Accessors: get

Method: Rhino.Geometry.MorphControl.Morph(GeometryBase geometry)
Return: bool
Modifiers: public
Summary: Applies the space morph to geometry.
Parameter: geometry (GeometryBase)
Parameter Summary: The geometry to be morphed.

Class: Rhino.Geometry.NurbsCurve
Summary: Represents a Non Uniform Rational B-Splines (NURBS) curve.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(int dimension, bool rational, int order, int pointCount)
Summary: Constructs a new NURBS curve with knot and CV memory allocated.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(int degree, int pointCount)
Summary: Constructs a new NURBS curve with a specific degree and control point count.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(NurbsCurve other)
Summary: Initializes a NURBS curve by copying its values from another NURBS curve.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.NurbsCurve.HasBezierSpans
Return: bool
Modifiers: public
Summary: Returns True if the NURBS curve has Bezier spans (all distinct knots have multiplicity = degree)
Accessors: get

Property: Rhino.Geometry.NurbsCurve.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the curve is rational. Rational curves have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Knots
Return: NurbsCurveKnotList
Modifiers: public
Summary: Gets access to the knots (or "knot vector") of this NURBS curve.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Order
Return: int
Modifiers: public
Summary: Gets the order of the curve. Order = Degree + 1.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Points
Return: NurbsCurvePointList
Modifiers: public
Summary: Gets access to the control points of this NURBS curve.
Accessors: get

Method: Rhino.Geometry.NurbsCurve.Create(bool periodic, int degree, IEnumerable<Point3d> points)
Return: NurbsCurve
Modifiers: public, static
Summary: Constructs a 3D NURBS curve from a list of control points.
Parameter: periodic (bool)
Parameter Summary: If true, create a periodic uniform curve. If false, create a clamped uniform curve.
Parameter: degree (int)
Parameter Summary: (>=1) degree=order-1.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: control vertex locations.

Method: Rhino.Geometry.NurbsCurve.CreateFromArc(Arc arc, int degree, int cvCount)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a uniform non-rational cubic NURBS approximation of an arc.
Parameter: arc (Arc)
Parameter Summary:
Parameter: degree (int)
Parameter Summary: >=1
Parameter: cvCount (int)
Parameter Summary: CV count >=5

Method: Rhino.Geometry.NurbsCurve.CreateFromArc(Arc arc)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the arc. Note that the parameterization of NURBS curve does not match arc's transcendental parameterization.

Method: Rhino.Geometry.NurbsCurve.CreateFromCircle(Circle circle, int degree, int cvCount)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a uniform non-rational cubic NURBS approximation of a circle.
Parameter: circle (Circle)
Parameter Summary:
Parameter: degree (int)
Parameter Summary: >=1
Parameter: cvCount (int)
Parameter Summary: CV count >=5

Method: Rhino.Geometry.NurbsCurve.CreateFromCircle(Circle circle)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the circle. Note that the parameterization of NURBS curve does not match circle's transcendental parameterization. Use GetRadianFromNurbFormParameter() and GetParameterFromRadian() to convert between the NURBS curve parameter and the transcendental parameter.

Method: Rhino.Geometry.NurbsCurve.CreateFromEllipse(Ellipse ellipse)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the ellipse.
Note that the parameterization of the NURBS curve does not match with the transcendental parameterization of the ellipsis.

Method: Rhino.Geometry.NurbsCurve.CreateFromFitPoints(IEnumerable<Point3d> points, double tolerance, bool periodic)
Return: NurbsCurve
Modifiers: public, static
Summary: Fits a NURBS curve to a dense, ordered set of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of 3D points.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: periodic (bool)
Parameter Summary: Set True to create a periodic curve.

Method: Rhino.Geometry.NurbsCurve.CreateFromFitPoints(IEnumerable<Point3d> points, double tolerance, int degree, bool periodic, Vector3d startTangent, Vector3d endTangent)
Return: NurbsCurve
Modifiers: public, static
Summary: Fits a NURBS curve to a dense, ordered set of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of 3D points.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: degree (int)
Parameter Summary: The desired degree of the output curve.
Parameter: periodic (bool)
Parameter Summary: Set True to create a periodic curve.
Parameter: startTangent (Vector3d)
Parameter Summary: The tangent direction at the start of the curve. If unknown, set to <b>Vector3d.Unset</b> .
Parameter: endTangent (Vector3d)
Parameter Summary: The tangent direction at the end of the curve. If unknown, set to <b>Vector3d.Unset</b> .

Method: Rhino.Geometry.NurbsCurve.CreateFromLine(Line line)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a non-rational, degree 1 NURBS curve representation of the line.

Method: Rhino.Geometry.NurbsCurve.CreateHSpline(IEnumerable<Point3d> points, Vector3d startTangent, Vector3d endTangent)
Return: NurbsCurve
Modifiers: public, static
Summary: Construct an H-spline from a sequence of interpolation points and optional start and end derivative information
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate
Parameter: startTangent (Vector3d)
Parameter Summary: Unit tangent vector or Unset
Parameter: endTangent (Vector3d)
Parameter Summary: Unit tangent vector or Unset

Method: Rhino.Geometry.NurbsCurve.CreateHSpline(IEnumerable<Point3d> points)
Return: NurbsCurve
Modifiers: public, static
Summary: Construct an H-spline from a sequence of interpolation points
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate

Method: Rhino.Geometry.NurbsCurve.CreateNonRationalArcBezier(int degree, Point3d center, Point3d start, Point3d end, double radius, double tanSlider, double midSlider)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a non-rational approximation of a rational arc as a single bezier segment
Parameter: degree (int)
Parameter Summary: The degree of the non-rational approximation, can be either 3, 4, or 5
Parameter: center (Point3d)
Parameter Summary: The arc center
Parameter: start (Point3d)
Parameter Summary: A point in the direction of the start point of the arc
Parameter: end (Point3d)
Parameter Summary: A point in the direction of the end point of the arc
Parameter: radius (double)
Parameter Summary: The radius of the arc
Parameter: tanSlider (double)
Parameter Summary: a number between zero and one which moves the tangent control point toward the mid control point of an equivalent quadratic rational arc
Parameter: midSlider (double)
Parameter Summary: a number between zero and one which moves the mid control points toward the mid control point of an equivalent quadratic rational arc

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromFocus(Point3d focus, Point3d startPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from focus and end points.
Parameter: focus (Point3d)
Parameter Summary: The focal point.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromPoints(Point3d startPoint, Point3d innerPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from three points.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: innerPoint (Point3d)
Parameter Summary: A point on the curve.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromVertex(Point3d vertex, Point3d startPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from vertex and end points.
Parameter: vertex (Point3d)
Parameter Summary: The vertex point.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateSpiral(Curve railCurve, double t0, double t1, Point3d radiusPoint, double pitch, double turnCount, double radius0, double radius1, int pointsPerTurn)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a C2 non-rational uniform cubic NURBS approximation of a swept helix or spiral.
Parameter: railCurve (Curve)
Parameter Summary: The rail curve.
Parameter: t0 (double)
Parameter Summary: Starting portion of rail curve's domain to sweep along.
Parameter: t1 (double)
Parameter Summary: Ending portion of rail curve's domain to sweep along.
Parameter: radiusPoint (Point3d)
Parameter Summary: Point used only to get a vector that is perpendicular to the axis. In particular, this vector must not be (anti)parallel to the axis vector.
Parameter: pitch (double)
Parameter Summary: The pitch. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation.
Parameter: turnCount (double)
Parameter Summary: The turn count. If != 0, then the resulting helix will have this many turns. If = 0, then pitch must be != 0 and the approximate distance between turns will be set to pitch. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation.
Parameter: radius0 (double)
Parameter Summary: The starting radius. At least one radii must be nonzero. Negative values are allowed.
Parameter: radius1 (double)
Parameter Summary: The ending radius. At least one radii must be nonzero. Negative values are allowed.
Parameter: pointsPerTurn (int)
Parameter Summary: Number of points to interpolate per turn. Must be greater than 4. When in doubt, use 12.

Method: Rhino.Geometry.NurbsCurve.CreateSpiral(Point3d axisStart, Vector3d axisDir, Point3d radiusPoint, double pitch, double turnCount, double radius0, double radius1)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a C1 cubic NURBS approximation of a helix or spiral. For a helix, you may have radius0 == radius1. For a spiral radius0 == radius1 produces a circle. Zero and negative radii are permissible.
Parameter: axisStart (Point3d)
Parameter Summary: Helix's axis starting point or center of spiral.
Parameter: axisDir (Vector3d)
Parameter Summary: Helix's axis vector or normal to spiral's plane.
Parameter: radiusPoint (Point3d)
Parameter Summary: Point used only to get a vector that is perpendicular to the axis. In particular, this vector must not be (anti)parallel to the axis vector.
Parameter: pitch (double)
Parameter Summary: The pitch, where a spiral has a pitch = 0, and pitch > 0 is the distance between the helix's "threads".
Parameter: turnCount (double)
Parameter Summary: The number of turns in spiral or helix. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation. Note, for a helix, turnCount * pitch = length of the helix's axis.
Parameter: radius0 (double)
Parameter Summary: The starting radius.
Parameter: radius1 (double)
Parameter Summary: The ending radius.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(Curve curve, int pointCount, bool periodicClosedCurve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, from an existing curve.
Parameter: curve (Curve)
Parameter Summary: Curve to rebuild as a SubD friendly curve.
Parameter: pointCount (int)
Parameter Summary: Desired number of control points. If periodicClosedCurve is true, the number must be >= 6, otherwise the number must be >= 4.
Parameter: periodicClosedCurve (bool)
Parameter Summary: True if the SubD friendly curve should be closed and periodic. False in all other cases.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(Curve curve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, from an existing curve.
Parameter: curve (Curve)
Parameter Summary: Curve to rebuild as a SubD friendly curve.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(IEnumerable<Point3d> points, bool interpolatePoints, bool periodicClosedCurve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, through a sequence of curves.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of points. Adjacent points must not be equal. If periodicClosedCurve is false, there must be at least two points. If periodicClosedCurve is true, there must be at least three points and it is not necessary to duplicate the first and last points. When periodicClosedCurve is True and the first and last points are equal, the duplicate last point is automatically ignored.
Parameter: interpolatePoints (bool)
Parameter Summary: True if the curve should interpolate the points. False if points specify control point locations. In either case, the curve will begin at the first point and end at the last point.
Parameter: periodicClosedCurve (bool)
Parameter Summary: True to create a periodic closed curve. Do not duplicate the start/end point in the point input.

Method: Rhino.Geometry.NurbsCurve.IsDuplicate(NurbsCurve curveA, NurbsCurve curveB, bool ignoreParameterization, double tolerance)
Return: bool
Modifiers: public, static
Summary: Determines if two curves are similar.
Parameter: curveA (NurbsCurve)
Parameter Summary: First curve used in comparison.
Parameter: curveB (NurbsCurve)
Parameter Summary: Second curve used in comparison.
Parameter: ignoreParameterization (bool)
Parameter Summary: if true, parameterization and orientation are ignored.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when comparing control points.

Method: Rhino.Geometry.NurbsCurve.MakeCompatible(IEnumerable<Curve> curves, Point3d startPt, Point3d endPt, int simplifyMethod, int numPoints, double refitTolerance, double angleTolerance)
Return: NurbsCurve[]
Modifiers: public, static
Summary: For expert use only. From the input curves, make an array of compatible NURBS curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: startPt (Point3d)
Parameter Summary: The start point. To omit, specify Point3d.Unset.
Parameter: endPt (Point3d)
Parameter Summary: The end point. To omit, specify Point3d.Unset.
Parameter: simplifyMethod (int)
Parameter Summary: The simplify method.
Parameter: numPoints (int)
Parameter Summary: The number of rebuild points.
Parameter: refitTolerance (double)
Parameter Summary: The refit tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians.

Method: Rhino.Geometry.NurbsCurve.Append(NurbsCurve nurbsCurve)
Return: bool
Modifiers: public
Summary: Appends a NURBS curve to this curve.
Parameter: nurbsCurve (NurbsCurve)
Parameter Summary: The NURBS curve to append.

Method: Rhino.Geometry.NurbsCurve.ConvertSpanToBezier(int spanIndex)
Return: BezierCurve
Modifiers: public
Summary: Converts a span of the NURBS curve into a Bezier.
Parameter: spanIndex (int)
Parameter Summary: The span index, where (0 <= spanIndex <= Points.Count - Order).

Method: Rhino.Geometry.NurbsCurve.CreatePlanarRailFrames(IEnumerable<double> parameters, Vector3d normal)
Return: Plane[]
Modifiers: public
Summary: Computes planar rail sweep frames at specified parameters.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection of curve parameters.
Parameter: normal (Vector3d)
Parameter Summary: Unit normal to the plane.

Method: Rhino.Geometry.NurbsCurve.CreateRailFrames(IEnumerable<double> parameters)
Return: Plane[]
Modifiers: public
Summary: Computes relatively parallel rail sweep frames at specified parameters.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection of curve parameters.

Method: Rhino.Geometry.NurbsCurve.EpsilonEquals(NurbsCurve other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.NurbsCurve.GrevilleParameter(int index)
Return: double
Modifiers: public
Summary: Gets the greville (edit point) parameter that belongs to the control point at the specified index.
Parameter: index (int)
Parameter Summary: Index of Greville (Edit) point.

Method: Rhino.Geometry.NurbsCurve.GrevilleParameters()
Return: double
Modifiers: public
Summary: Gets all Greville parameters for this curve.

Method: Rhino.Geometry.NurbsCurve.GrevillePoint(int index)
Return: Point3d
Modifiers: public
Summary: Gets the Greville parameter that belongs to the control point at the specified index.
Parameter: index (int)
Parameter Summary: Index of Greville point.

Method: Rhino.Geometry.NurbsCurve.GrevillePoints()
Return: Point3dList
Modifiers: public
Summary: Gets all Greville points for this curve.

Method: Rhino.Geometry.NurbsCurve.GrevillePoints(bool all)
Return: Point3dList
Modifiers: public
Summary: Gets Greville points for this curve.
Parameter: all (bool)
Parameter Summary: If true, then all Greville points are returns. If false, only edit points are returned.

Method: Rhino.Geometry.NurbsCurve.IncreaseDegree(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this curve.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(bool setEndWeightsToOne)
Return: bool
Modifiers: public
Summary: Clamps ends and adds knots so the NURBS curve has Bezier spans (all distinct knots have multiplicity = degree).
Parameter: setEndWeightsToOne (bool)
Parameter Summary: If True and the first or last weight is not one, then the first and last spans are re-parameterized so that the end weights are one.

Method: Rhino.Geometry.NurbsCurve.MatchToCurve(Curve targetCurve, double maxEndDistance, double maxInteriorDistance, double matchTolerance, int maxLevel)
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve with the start and end matching the start and end of targetCurve, and Greville points on targetCurve.
Parameter: targetCurve (Curve)
Parameter Summary: The target curve.
Parameter: maxEndDistance (double)
Parameter Summary: If maxEndDistance dist > 0, the curve's start must be within maxEndDistance of targetCurve start. If maxEndDistance dist > 0, the curve's end must be within maxEndDistance of targetCurve end.
Parameter: maxInteriorDistance (double)
Parameter Summary: If maxInteriorDistance > 0, all interior Greville points of the curve must be within maxInteriorDistance of targetCurve.
Parameter: matchTolerance (double)
Parameter Summary: The matching tolerance.
Parameter: maxLevel (int)
Parameter Summary: If maxLevel > 0, the result will be refined up to that many times, attempting to get the result within matchTolerance. If matchTolerance <= 0, no refinement will be done. In any case, the parameters closest points on targetCurve of the Greville points of the curve must be monotonic increasing.

Method: Rhino.Geometry.NurbsCurve.Reparameterize(double c)
Return: bool
Modifiers: public
Summary: Use a linear fractional transformation to re-parameterize the NURBS curve. This does not change the curve's domain.
Parameter: c (double)
Parameter Summary: re-parameterization constant (generally speaking, c should be > 0). The control points and knots are adjusted so that output_nurbs(t) = input_nurbs(lambda(t)), where lambda(t) = c*t/( (c-1)*t + 1 ). Note that lambda(0) = 0, lambda(1) = 1, lambda'(t) > 0, lambda'(0) = c and lambda'(1) = 1/c.

Method: Rhino.Geometry.NurbsCurve.SetEndCondition(bool bSetEnd, NurbsCurveEndConditionType continuity, Point3d point, Vector3d tangent, Vector3d curvature)
Return: bool
Modifiers: public
Summary: Set end condition of a NURBS curve to point, tangent and curvature.
Parameter: bSetEnd (bool)
Parameter Summary: true: set end of curve, false: set start of curve
Parameter: continuity (NurbsCurveEndConditionType)
Parameter Summary: Position: set start or end point, Tangency: set point and tangent, Curvature: set point, tangent and curvature
Parameter: point (Point3d)
Parameter Summary: point to set
Parameter: tangent (Vector3d)
Parameter Summary: tangent to set
Parameter: curvature (Vector3d)
Parameter Summary: curvature to set

Method: Rhino.Geometry.NurbsCurve.SetEndCondition(bool bSetEnd, NurbsCurveEndConditionType continuity, Point3d point, Vector3d tangent)
Return: bool
Modifiers: public
Summary: Set end condition of a NURBS curve to point, tangent and curvature.
Parameter: bSetEnd (bool)
Parameter Summary: true: set end of curve, false: set start of curve
Parameter: continuity (NurbsCurveEndConditionType)
Parameter Summary: Position: set start or end point, Tangency: set point and tangent, Curvature: set point, tangent and curvature
Parameter: point (Point3d)
Parameter Summary: point to set
Parameter: tangent (Vector3d)
Parameter Summary: tangent to set

Method: Rhino.Geometry.NurbsCurve.SetGrevillePoints(IEnumerable<Point3d> points)
Return: bool
Modifiers: public
Summary: Sets all Greville edit points for this curve.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The new point locations. The number of points should match the number of point returned by NurbsCurve.GrevillePoints(false).

Method: Rhino.Geometry.NurbsCurve.UVNDirectionsAt(double t, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the u, V, and N directions of a NURBS curve at a parameter similar to the method used by Rhino's MoveUVN command.
Parameter: t (double)
Parameter Summary: The evaluation parameter.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Class: Rhino.Geometry.NurbsSurface
Summary: Represents a Non Uniform Rational B-Splines (NURBS) surface.

Constructor: Rhino.Geometry.NurbsSurface.NurbsSurface(NurbsSurface other)
Summary: Initializes a new NURBS surface by copying the values from another surface.

Constructor: Rhino.Geometry.NurbsSurface.NurbsSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.NurbsSurface.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the NURBS surface is rational.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.KnotsU
Return: NurbsSurfaceKnotList
Modifiers: public
Summary: The U direction knot vector.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.KnotsV
Return: NurbsSurfaceKnotList
Modifiers: public
Summary: The V direction knot vector.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.OrderU
Return: int
Modifiers: public
Summary: Gets the order in the U direction.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.OrderV
Return: int
Modifiers: public
Summary: Gets the order in the V direction.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.Points
Return: NurbsSurfacePointList
Modifiers: public
Summary: Gets a collection of surface control points that form this surface.
Accessors: get

Method: Rhino.Geometry.NurbsSurface.Create(int dimension, bool isRational, int order0, int order1, int controlPointCount0, int controlPointCount1)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surface with internal uninitialized arrays.
Parameter: dimension (int)
Parameter Summary: The number of dimensions.
>= 1. This value is usually 3. | Parameter: isRational (bool) | Parameter Summary: True to make a rational NURBS. | Parameter: order0 (int) | Parameter Summary: The order in U direction.
>= 2. | Parameter: order1 (int) | Parameter Summary: The order in V direction.
>= 2. | Parameter: controlPointCount0 (int) | Parameter Summary: Control point count in U direction.
>= order0. | Parameter: controlPointCount1 (int) | Parameter Summary: Control point count in V direction.
>= order1.

Method: Rhino.Geometry.NurbsSurface.CreateCurveOnSurface(Surface surface, IEnumerable<Point2d> points, double tolerance, bool periodic)
Return: NurbsCurve
Modifiers: public, static
Summary: Fit a sequence of 2d points on a surface to make a curve on the surface.
Parameter: surface (Surface)
Parameter Summary: Surface on which to construct curve.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: Parameter space coordinates of the points to interpolate.
Parameter: tolerance (double)
Parameter Summary: Curve should be within tolerance of surface and points.
Parameter: periodic (bool)
Parameter Summary: When True make a periodic curve.

Method: Rhino.Geometry.NurbsSurface.CreateCurveOnSurfacePoints(Surface surface, IEnumerable<Point2d> fixedPoints, double tolerance, bool periodic, int initCount, int levels)
Return: Point2d[]
Modifiers: public, static
Summary: Computes a discrete spline curve on the surface. In other words, computes a sequence of points on the surface, each with a corresponding parameter value.
Parameter: surface (Surface)
Parameter Summary: The surface on which the curve is constructed. The surface should be G1 continuous. If the surface is closed in the u or v direction and is G1 at the seam, the function will construct point sequences that cross over the seam.
Parameter: fixedPoints (IEnumerable<Point2d>)
Parameter Summary: Surface points to interpolate given by parameters. These must be distinct.
Parameter: tolerance (double)
Parameter Summary: Relative tolerance used by the solver. When in doubt, use a tolerance of 0.0.
Parameter: periodic (bool)
Parameter Summary: When True constructs a smoothly closed curve.
Parameter: initCount (int)
Parameter Summary: Maximum number of points to insert between fixed points on the first level.
Parameter: levels (int)
Parameter Summary: The number of levels (between 1 and 3) to be used in multi-level solver. Use 1 for single level solve.

Method: Rhino.Geometry.NurbsSurface.CreateFromCone(Cone cone)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from cone data.
Parameter: cone (Cone)
Parameter Summary: A cone value.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4, double tolerance)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 4 corner points.
Parameter: corner1 (Point3d)
Parameter Summary: The first corner.
Parameter: corner2 (Point3d)
Parameter Summary: The second corner.
Parameter: corner3 (Point3d)
Parameter Summary: The third corner.
Parameter: corner4 (Point3d)
Parameter Summary: The fourth corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length without collapsing to a singularity.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 4 corner points.
This is the same as calling with tolerance 0. | Parameter: corner1 (Point3d) | Parameter Summary: The first corner. | Parameter: corner2 (Point3d) | Parameter Summary: The second corner. | Parameter: corner3 (Point3d) | Parameter Summary: The third corner. | Parameter: corner4 (Point3d) | Parameter Summary: The fourth corner.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 3 corner points.
Parameter: corner1 (Point3d)
Parameter Summary: The first corner.
Parameter: corner2 (Point3d)
Parameter Summary: The second corner.
Parameter: corner3 (Point3d)
Parameter Summary: The third corner.

Method: Rhino.Geometry.NurbsSurface.CreateFromCylinder(Cylinder cylinder)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from cylinder data.
Parameter: cylinder (Cylinder)
Parameter Summary: A cylinder value.

Method: Rhino.Geometry.NurbsSurface.CreateFromPlane(Plane plane, Interval uInterval, Interval vInterval, int uDegree, int vDegree, int uPointCount, int vPointCount)
Return: NurbsSurface
Modifiers: public, static
Summary: Creates a NURBS surface from a plane and additional parameters.
Parameter: plane (Plane)
Parameter Summary: The plane.
Parameter: uInterval (Interval)
Parameter Summary: The interval describing the extends of the output surface in the U direction.
Parameter: vInterval (Interval)
Parameter Summary: The interval describing the extends of the output surface in the V direction.
Parameter: uDegree (int)
Parameter Summary: The degree of the output surface in the U direction.
Parameter: vDegree (int)
Parameter Summary: The degree of the output surface in the V direction.
Parameter: uPointCount (int)
Parameter Summary: The number of control points of the output surface in the U direction.
Parameter: vPointCount (int)
Parameter Summary: The number of control points of the output surface in the V direction.

Method: Rhino.Geometry.NurbsSurface.CreateFromPoints(IEnumerable<Point3d> points, int uCount, int vCount, int uDegree, int vDegree)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a NURBS surface from a 2D grid of control points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control point locations.
Parameter: uCount (int)
Parameter Summary: Number of points in U direction.
Parameter: vCount (int)
Parameter Summary: Number of points in V direction.
Parameter: uDegree (int)
Parameter Summary: Degree of surface in U direction.
Parameter: vDegree (int)
Parameter Summary: Degree of surface in V direction.

Method: Rhino.Geometry.NurbsSurface.CreateFromSphere(Sphere sphere)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from sphere data.
Parameter: sphere (Sphere)
Parameter Summary: A sphere value.

Method: Rhino.Geometry.NurbsSurface.CreateFromTorus(Torus torus)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from torus data.
Parameter: torus (Torus)
Parameter Summary: A torus value.

Method: Rhino.Geometry.NurbsSurface.CreateNetworkSurface(IEnumerable<Curve> curves, int continuity, double edgeTolerance, double interiorTolerance, double angleTolerance, out int error)
Return: NurbsSurface
Modifiers: public, static
Summary: Builds a surface from an auto-sorted network of curves/edges.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curves/edges, sorted automatically into U and V curves.
Parameter: continuity (int)
Parameter Summary: continuity along edges, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: edgeTolerance (double)
Parameter Summary: tolerance to use along network surface edge.
Parameter: interiorTolerance (double)
Parameter Summary: tolerance to use for the interior curves.
Parameter: angleTolerance (double)
Parameter Summary: angle tolerance to use.
Parameter: error (int)
Parameter Summary: If the NurbsSurface could not be created, the error value describes where the failure occurred. 0 = success, 1 = curve sorter failed, 2 = network initializing failed, 3 = failed to build surface, 4 = network surface is not valid.

Method: Rhino.Geometry.NurbsSurface.CreateNetworkSurface(IEnumerable<Curve> uCurves, int uContinuityStart, int uContinuityEnd, IEnumerable<Curve> vCurves, int vContinuityStart, int vContinuityEnd, double edgeTolerance, double interiorTolerance, double angleTolerance, out int error)
Return: NurbsSurface
Modifiers: public, static
Summary: Builds a surface from an ordered network of curves/edges.
Parameter: uCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of U curves.
Parameter: uContinuityStart (int)
Parameter Summary: continuity at first U segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: uContinuityEnd (int)
Parameter Summary: continuity at last U segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: vCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of V curves.
Parameter: vContinuityStart (int)
Parameter Summary: continuity at first V segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: vContinuityEnd (int)
Parameter Summary: continuity at last V segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: edgeTolerance (double)
Parameter Summary: tolerance to use along network surface edge.
Parameter: interiorTolerance (double)
Parameter Summary: tolerance to use for the interior curves.
Parameter: angleTolerance (double)
Parameter Summary: angle tolerance to use.
Parameter: error (int)
Parameter Summary: If the NurbsSurface could not be created, the error value describes where the failure occurred. 0 = success, 1 = curve sorter failed, 2 = network initializing failed, 3 = failed to build surface, 4 = network surface is not valid.

Method: Rhino.Geometry.NurbsSurface.CreateRailRevolvedSurface(Curve profile, Curve rail, Line axis, bool scaleHeight)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a railed Surface-of-Revolution.
Parameter: profile (Curve)
Parameter Summary: Profile curve for revolution.
Parameter: rail (Curve)
Parameter Summary: Rail curve for revolution.
Parameter: axis (Line)
Parameter Summary: Axis of revolution.
Parameter: scaleHeight (bool)
Parameter Summary: If true, surface will be locally scaled.

Method: Rhino.Geometry.NurbsSurface.CreateRuledSurface(Curve curveA, Curve curveB)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a ruled surface between two curves. Curves must share the same knot-vector.
Parameter: curveA (Curve)
Parameter Summary: First curve.
Parameter: curveB (Curve)
Parameter Summary: Second curve.

Method: Rhino.Geometry.NurbsSurface.CreateSubDFriendly(Surface surface)
Return: NurbsSurface
Modifiers: public, static
Summary: Create a bi-cubic SubD friendly surface from a surface.
Parameter: surface (Surface)
Parameter Summary: >Surface to rebuild as a SubD friendly surface.

Method: Rhino.Geometry.NurbsSurface.CreateThroughPoints(IEnumerable<Point3d> points, int uCount, int vCount, int uDegree, int vDegree, bool uClosed, bool vClosed)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a NURBS surface from a 2D grid of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control point locations.
Parameter: uCount (int)
Parameter Summary: Number of points in U direction.
Parameter: vCount (int)
Parameter Summary: Number of points in V direction.
Parameter: uDegree (int)
Parameter Summary: Degree of surface in U direction.
Parameter: vDegree (int)
Parameter Summary: Degree of surface in V direction.
Parameter: uClosed (bool)
Parameter Summary: True if the surface should be closed in the U direction.
Parameter: vClosed (bool)
Parameter Summary: True if the surface should be closed in the V direction.

Method: Rhino.Geometry.NurbsSurface.MakeCompatible(Surface surface0, Surface surface1, out NurbsSurface nurb0, out NurbsSurface nurb1)
Return: bool
Modifiers: public, static
Summary: For expert use only. Makes a pair of compatible NURBS surfaces based on two input surfaces.
Parameter: surface0 (Surface)
Parameter Summary: The first surface.
Parameter: surface1 (Surface)
Parameter Summary: The second surface.
Parameter: nurb0 (NurbsSurface)
Parameter Summary: The first output NURBS surface.
Parameter: nurb1 (NurbsSurface)
Parameter Summary: The second output NURBS surface.

Method: Rhino.Geometry.NurbsSurface.ConvertSpanToBezier(int spanIndex0, int spanIndex1)
Return: BezierSurface
Modifiers: public
Summary: Convert a NURBS surface bispan into a Bezier surface.
Parameter: spanIndex0 (int)
Parameter Summary: Specifies the "u" span
Parameter: spanIndex1 (int)
Parameter Summary: Specifies the "v" span

Method: Rhino.Geometry.NurbsSurface.CopyFrom(NurbsSurface other)
Return: void
Modifiers: public
Summary: Copies this NURBS surface from another NURBS surface.
Parameter: other (NurbsSurface)
Parameter Summary: The other NURBS surface to use as source.

Method: Rhino.Geometry.NurbsSurface.EpsilonEquals(NurbsSurface other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.NurbsSurface.FindClosestIsoCurve(Point3d testPoint)
Return: IsoStatus
Modifiers: public
Summary: Find the closest isoparamentric curve, given a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.

Method: Rhino.Geometry.NurbsSurface.IncreaseDegreeU(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this surface in U direction.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsSurface.IncreaseDegreeV(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this surface in V direction.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsSurface.MakeNonRational()
Return: bool
Modifiers: public
Summary: Makes this surface non-rational.

Method: Rhino.Geometry.NurbsSurface.MakeRational()
Return: bool
Modifiers: public
Summary: Makes this surface rational.

Method: Rhino.Geometry.NurbsSurface.MatchToCurve(IsoStatus side, Curve targetCurve, double maxEndDistance, double maxInteriorDistance, double matchTolerance, int maxLevel)
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface with start and end edge isocurve matching the start and end of targetCurve, and Greville points on targetCurve.
Parameter: side (IsoStatus)
Parameter Summary: The isoparamentric curve direction.
Parameter: targetCurve (Curve)
Parameter Summary: The target curve.
Parameter: maxEndDistance (double)
Parameter Summary: If maxEndDistance dist > 0, the edge isocurve must be within maxEndDistance of targetCurve start. If maxEndDistance dist > 0, the edge isocurve must be within maxEndDistance of targetCurve end.
Parameter: maxInteriorDistance (double)
Parameter Summary: If maxInteriorDistance > 0, all interior Greville points of the edge isocurve must be within maxInteriorDistance of targetCurve.
Parameter: matchTolerance (double)
Parameter Summary: The matching tolerance.
Parameter: maxLevel (int)
Parameter Summary: If maxLevel > 0, the result will be refined up to that many times, attempting to get the result within matchTolerance. If matchTolerance <= 0, no refinement will be done. In any case, the parameters closest points on targetCurve of the Greville points of the edge isocurve must be monotonic increasing.

Method: Rhino.Geometry.NurbsSurface.UVNDirectionsAt(double u, double v, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS surface at a u,v parameter similar to the method used by Rhino's MoveUVN command.
Parameter: u (double)
Parameter Summary: The u evaluation parameter.
Parameter: v (double)
Parameter Summary: The v evaluation parameter.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Class: Rhino.Geometry.OrdinateDimension
Summary: Represents an ordinate dimension

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension()

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension(Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Summary: Constructs an ordinate dimension from parameters.

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.OrdinateDimension.DefPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.Direction
Return: MeasuredDirection
Modifiers: public
Summary: Gets or sets the measured direction.
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkOffset1
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkOffset2
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkPoint1
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.OrdinateDimension.KinkPoint2
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.OrdinateDimension.LeaderPoint
Return: Point2d
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.OrdinateDimension.Create(DimensionStyle dimStyle, Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Return: OrdinateDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's AnnotationStyle
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: direction (MeasuredDirection)
Parameter Summary: MeasuredDirection.XAxis or MeasuredDirection.YAxis
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkoffset1 (double)
Parameter Summary: Distance to first jog
Parameter: kinkoffset2 (double)
Parameter Summary: Distance to second jog

Method: Rhino.Geometry.OrdinateDimension.AdjustFromPoints(Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Return: bool
Modifiers: public
Summary: Update Dimension geometry from point locations
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: direction (MeasuredDirection)
Parameter Summary: MeasuredDirection.XAxis or MeasuredDirection.YAxisw
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkoffset1 (double)
Parameter Summary: Distance to first jog
Parameter: kinkoffset2 (double)
Parameter Summary: Distance to second jog

Method: Rhino.Geometry.OrdinateDimension.Get3dPoints(out Point3d basepoint, out Point3d defpoint, out Point3d leaderpoint, out Point3d kinkpoint1, out Point3d kinkpoint2)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkpoint1 (Point3d)
Parameter Summary: Point at first jog
Parameter: kinkpoint2 (Point3d)
Parameter Summary: Point at second jog

Method: Rhino.Geometry.OrdinateDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.OrdinateDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.OrdinateDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.Particle
Summary: Represents a simple particle.
This base class only defines position and display properties (size, color, bitmap id). You will most likely create a class that derives from this particle class to perform some sort of physical simulation (movement over time or frames).

Constructor: Rhino.Geometry.Particle.Particle()
Summary: Initializes a new instance of the <b>Particle</b> class.

Property: Rhino.Geometry.Particle.Color
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Particle.DisplayBitmapIndex
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Particle.Index
Return: int
Modifiers: public
Summary: Index in ParentSystem for this Particle. Can change when the particle system is modified.
Accessors: get set

Property: Rhino.Geometry.Particle.Location
Return: Point3d
Modifiers: public
Summary: 3d Location of the Particle.
Accessors: get set

Property: Rhino.Geometry.Particle.ParentSystem
Return: ParticleSystem
Modifiers: public
Summary: Gets the parent particle system of this particle.
Accessors: get set

Property: Rhino.Geometry.Particle.Size
Return: float
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.Particle.Update()
Return: void
Modifiers: public, virtual
Summary: Base class implementation does nothing.

Class: Rhino.Geometry.ParticleSystem

Constructor: Rhino.Geometry.ParticleSystem.ParticleSystem()
Summary: Initializes a new instance of the ParticleSystem class

Property: Rhino.Geometry.ParticleSystem.BoundingBox
Return: BoundingBox
Modifiers: public
Accessors: get

Property: Rhino.Geometry.ParticleSystem.DisplaySizesInWorldUnits
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ParticleSystem.DrawRequiresDepthSorting
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.ParticleSystem.Add(Particle particle)
Return: bool
Modifiers: public, virtual
Summary: Adds a particle to this ParticleSystem. A Particle can only be in one system at a time. If the Particle already exists in a different system, this function will return false. You should remove the particle from the other system first before adding it.
Parameter: particle (Particle)
Parameter Summary: A particle to be added.

Method: Rhino.Geometry.ParticleSystem.Clear()
Return: void
Modifiers: public, virtual
Summary: Remove all Particles from this system.

Method: Rhino.Geometry.ParticleSystem.GetEnumerator()
Return: IEnumerator<Particle>
Modifiers: public

Method: Rhino.Geometry.ParticleSystem.Remove(Particle particle)
Return: void
Modifiers: public, virtual
Summary: Removes a single particle from this system.
Parameter: particle (Particle)
Parameter Summary: The particle to be removed.

Method: Rhino.Geometry.ParticleSystem.Update()
Return: void
Modifiers: public, virtual
Summary: Calls Update on every particle in the system.

Class: Rhino.Geometry.PlaneSurface
Summary: Represents a plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface()
Summary: Constructs a new plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(Plane plane, Interval xExtents, Interval yExtents)
Summary: Constructs a plane surface with x and y extents.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(Plane plane)
Summary: Constructs a new plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PlaneSurface.Plane
Return: Plane
Modifiers: public
Summary: Gets or sets the plane surface's plane.
Accessors: get set

Method: Rhino.Geometry.PlaneSurface.CreateThroughBox(Line lineInPlane, Vector3d vectorInPlane, BoundingBox box)
Return: PlaneSurface
Modifiers: public, static
Summary: Create a plane that contains the intersection of a bounding box.
Parameter: lineInPlane (Line)
Parameter Summary: A line that will lie on the plane.
Parameter: vectorInPlane (Vector3d)
Parameter Summary: A vector the direction of which will be in plane.
Parameter: box (BoundingBox)
Parameter Summary: A box to cut through.

Method: Rhino.Geometry.PlaneSurface.CreateThroughBox(Plane plane, BoundingBox box)
Return: PlaneSurface
Modifiers: public, static
Summary: Create a plane that contains the intersection of a bounding box.
Parameter: plane (Plane)
Parameter Summary: An original plane value.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for extension boundary.

Method: Rhino.Geometry.PlaneSurface.GetExtents(int direction)
Return: Interval
Modifiers: public
Summary: Gets the extents of the plane surface.
Parameter: direction (int)
Parameter Summary: The direction, where 0 gets plane surface's x coordinate extents and 1 gets plane surface's y coordinate extents.

Method: Rhino.Geometry.PlaneSurface.SetExtents(int direction, Interval extents, bool syncDomain)
Return: void
Modifiers: public
Summary: Sets the extents of the plane surface.
Parameter: direction (int)
Parameter Summary: The direction, where 0 sets plane surface's x coordinate extents and 1 sets plane surface's y coordinate extents.
Parameter: extents (Interval)
Parameter Summary: An increasing interval.
Parameter: syncDomain (bool)
Parameter Summary: If true, the corresponding evaluation interval domain is set so that it matches the extents interval. If false, the corresponding evaluation interval domain is not changed.

Method: Rhino.Geometry.PlaneSurface.ToMesh()
Return: Mesh
Modifiers: public
Summary: Computes a polygon mesh of the surface made of one quad.

Class: Rhino.Geometry.Point
Summary: Represents a geometric point.
This is fundamentally a class that derives from and contains a single location.

Constructor: Rhino.Geometry.Point.Point(Point3d location)
Summary: Initializes a new point instance with a location.

Constructor: Rhino.Geometry.Point.Point(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Point.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the location (position) of this point.
Accessors: get set

Class: Rhino.Geometry.Point3dGrid
Summary: Represents a rectangular grid of 3D points.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid()
Summary: Initializes a rectangular grid of points, with no points in it.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid(int rows, int columns)
Summary: Initializes a rectangular grid of points with a given number of columns and rows.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Class: Rhino.Geometry.PointCloud
Summary: Represents a collection of coordinates with optional normal vectors and colors.

Constructor: Rhino.Geometry.PointCloud.PointCloud()
Summary: Initializes a new instance of the <b>PointCloud</b> class that is empty.

Constructor: Rhino.Geometry.PointCloud.PointCloud(IEnumerable<Point3d> points)
Summary: Initializes a new instance of the <b>PointCloud</b> class, copying the content from a set of points.

Constructor: Rhino.Geometry.PointCloud.PointCloud(PointCloud other)
Summary: Initializes a new instance of the <b>PointCloud</b> class, copying (Merge) the content of another point cloud.

Constructor: Rhino.Geometry.PointCloud.PointCloud(SerializationInfo info, StreamingContext context)
Summary: Binds with the Rhino default serializer to support object persistence.

Property: Rhino.Geometry.PointCloud.ContainsColors
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have colors assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsHiddenFlags
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have hidden flags assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsNormals
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have normals assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsPointValues
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have extra values assigned to them. Extra values can be used to store a user-defined values, such as intensity.
Accessors: get

Property: Rhino.Geometry.PointCloud.Count
Return: int
Modifiers: public
Summary: Gets the number of points in this point cloud.
Accessors: get

Property: Rhino.Geometry.PointCloud.HiddenPointCount
Return: int
Modifiers: public
Summary: Gets the number of points that have their Hidden flag set.
Accessors: get

Property: Rhino.Geometry.PointCloud.this[int index]
Return: PointCloudItem
Modifiers: public
Summary: Gets the item at the given index.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Color color)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal, Color color, double value)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.
Parameter: value (double)
Parameter Summary: Extra value of new point. An extra value can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal, Color color)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Color> colors)
Return: void
Modifiers: public
Summary: Appends a collection of points and normal vectors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals, IEnumerable<Color> colors, IEnumerable<double> values)
Return: void
Modifiers: public
Summary: Appends a collection of points, normal vectors, colors, and extra values to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.
Parameter: values (IEnumerable<double>)
Parameter Summary: Exta point values to append. Extra values can be used to store a user-defined values, such as intensity.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals, IEnumerable<Color> colors)
Return: void
Modifiers: public
Summary: Appends a collection of points, normal vectors, and colors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals)
Return: void
Modifiers: public
Summary: Appends a collection of points and normal vectors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Appends a collection of points to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.

Method: Rhino.Geometry.PointCloud.AppendNew()
Return: PointCloudItem
Modifiers: public
Summary: Appends a new PointCloudItem to the end of this point cloud.

Method: Rhino.Geometry.PointCloud.AsReadOnlyListOfPoints()
Return: IReadOnlyList<Point3d>
Modifiers: public
Summary: Returns an enumerator and list indexer over point cloud locations.

Method: Rhino.Geometry.PointCloud.ClearColors()
Return: void
Modifiers: public
Summary: Destroys the color information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearHiddenFlags()
Return: void
Modifiers: public
Summary: Destroys the hidden flag information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearNormals()
Return: void
Modifiers: public
Summary: Destroys the normal vector information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearPointValues()
Return: void
Modifiers: public
Summary: Destroys the extra value information in this point cloud. Extra values can be used to store a user-defined values, such as intensity.

Method: Rhino.Geometry.PointCloud.ClosestPoint(Point3d testPoint)
Return: int
Modifiers: public
Summary: Returns index of the closest point in the point cloud to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: .

Method: Rhino.Geometry.PointCloud.CreateContourCurves(Point3d startPoint, Point3d endPoint, double interval, double absoluteTolerance, double maxDistance, double minDistance, bool openCurves, bool createSpline, bool createPolyline, double fitTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curves by intersecting a plane with a point cloud.
Parameter: startPoint (Point3d)
Parameter Summary: Start point for vector that is normal to contour plane.
Parameter: endPoint (Point3d)
Parameter Summary: End point for vector that is normal to contour plane.
Parameter: interval (double)
Parameter Summary: he interval or distance between contours.
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance
Parameter: maxDistance (double)
Parameter Summary: Maximum distance to plane. The thickness of the "slab" around the plane from which sample points are taken. Those sample points are projected to the section plane and a polyline is found that connects them. This distance depends on the size of the point cloud and the spacing of the points.
Parameter: minDistance (double)
Parameter Summary: Minimum distance between points. A threshold for the minimum spacing between adjacent sample points. If there are points closer than that, some are not used.
Parameter: openCurves (bool)
Parameter Summary: True for open, False for closed.
Parameter: createSpline (bool)
Parameter Summary: Creates a smooth curve. You can create both a curve and a polyline.
Parameter: createPolyline (bool)
Parameter Summary: Creates a polyline. You can create both a curve and a polyline.
Parameter: fitTolerance (double)
Parameter Summary: The tolerance used to fit the curve through the polyline.

Method: Rhino.Geometry.PointCloud.CreateContourCurves(Point3d contourStart, Point3d contourEnd, double interval, double absoluteTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curves by intersecting a plane with a point cloud.
Parameter: contourStart (Point3d)
Parameter Summary: Start point for vector that is normal to contour plane.
Parameter: contourEnd (Point3d)
Parameter Summary: End point for vector that is normal to contour plane.
Parameter: interval (double)
Parameter Summary: he interval or distance between contours.
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance

Method: Rhino.Geometry.PointCloud.CreateSectionCurve(Plane plane, double absoluteTolerance, double maxDistance, double minDistance, bool openCurves, bool createSpline, bool createPolyline, double fitTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curve by intersecting a plane with a point cloud.
Parameter: plane (Plane)
Parameter Summary: The plane to intersect with
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance
Parameter: maxDistance (double)
Parameter Summary: Maximum distance to plane. The thickness of the "slab" around the plane from which sample points are taken. Those sample points are projected to the section plane and a polyline is found that connects them. This distance depends on the size of the point cloud and the spacing of the points.
Parameter: minDistance (double)
Parameter Summary: Minimum distance between points. A threshold for the minimum spacing between adjacent sample points. If there are points closer than that, some are not used.
Parameter: openCurves (bool)
Parameter Summary: True for open, False for closed.
Parameter: createSpline (bool)
Parameter Summary: Creates a smooth curve. You can create both a curve and a polyline.
Parameter: createPolyline (bool)
Parameter Summary: Creates a polyline. You can create both a curve and a polyline.
Parameter: fitTolerance (double)
Parameter Summary: The tolerance used to fit the curve through the polyline.

Method: Rhino.Geometry.PointCloud.CreateSectionCurve(Plane plane, double absoluteTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates planar curves by intersecting a plane with a point cloud.
Parameter: plane (Plane)
Parameter Summary: The plane to intersect with
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance

Method: Rhino.Geometry.PointCloud.GetColors()
Return: Color[]
Modifiers: public
Summary: Copy all the point colors in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetEnumerator()
Return: IEnumerator<PointCloudItem>
Modifiers: public
Summary: Gets an enumerator that allows to modify each point cloud point.

Method: Rhino.Geometry.PointCloud.GetNormals()
Return: Vector3d[]
Modifiers: public
Summary: Copy all the normal vectors in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetPoints()
Return: Point3d[]
Modifiers: public
Summary: Copy all the point coordinates in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetPointValues()
Return: double
Modifiers: public
Summary: Copy all the extra point values in this point cloud to an array. Extra values can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.GetRandomSubsample(uint numberOfPoints, System.Threading.CancellationToken cancelToken, IProgress<double> progress)
Return: PointCloud
Modifiers: public
Summary: Returns a random subsample of a point cloud.
Parameter: numberOfPoints (uint)
Parameter Summary: The number of points the new point cloud should contain.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: The cancellation token.
Parameter: progress (IProgress<double>)
Parameter Summary: The provider for progress updates.

Method: Rhino.Geometry.PointCloud.GetRandomSubsample(uint numberOfPoints)
Return: PointCloud
Modifiers: public
Summary: Returns a random subsample of a point cloud.
Parameter: numberOfPoints (uint)
Parameter Summary: The number of points the new point cloud should contain.

Method: Rhino.Geometry.PointCloud.GetUnsafeLock(bool writable)
Return: PointCloudUnsafeLock
Modifiers: public
Summary: Allows the developer to obtain unsafe pointers to the underlying unmanaged data structures of the PointCloud.
Parameter: writable (bool)
Parameter Summary: True if user will need to write onto the structure. False otherwise.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Color color)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal, Color color, double value)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.
Parameter: value (double)
Parameter Summary: An extra value of new point. An extra values can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal, Color color)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.

Method: Rhino.Geometry.PointCloud.InsertNew(int index)
Return: PointCloudItem
Modifiers: public
Summary: Inserts a new <b>PointCloudItem</b> at a specific position of the point cloud.
Parameter: index (int)
Parameter Summary: Index of new item.

Method: Rhino.Geometry.PointCloud.InsertRange(int index, IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Append a collection of points to this point cloud.
Parameter: index (int)
Parameter Summary: Index at which to insert the new collection.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.

Method: Rhino.Geometry.PointCloud.Merge(PointCloud other)
Return: void
Modifiers: public
Summary: Merges, or appends, a specified point cloud into this one.
Parameter: other (PointCloud)
Parameter Summary: PointCloud to merge with this one.

Method: Rhino.Geometry.PointCloud.PointAt(int index)
Return: Point3d
Modifiers: public
Summary: Returns the location of the point at a specific index.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.PointCloud.ReleaseUnsafeLock(PointCloudUnsafeLock pointCloudData)
Return: void
Modifiers: public
Summary: Updates the PointCloud data with the information that was stored via the <b>PointCloudUnsafeLock</b> .
Parameter: pointCloudData (PointCloudUnsafeLock)
Parameter Summary: The data that will be unlocked.

Method: Rhino.Geometry.PointCloud.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Remove the point at the given index.
Parameter: index (int)
Parameter Summary: Index of point to remove.

Method: Rhino.Geometry.PointCloud.RemoveRange(IEnumerable<int> indices)
Return: int
Modifiers: public
Summary: Removes points at given indices.
Parameter: indices (IEnumerable<int>)
Parameter Summary: An array of indices of the points to remove.

Method: Rhino.Geometry.PointCloud.ShrinkWrap(ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrap mesh from this point cloud object.

Class: Rhino.Geometry.PointCloudItem
Summary: Represents a single item in a point cloud. A PointCloud item always has a location, but it has an optional normal vector and color.

Property: Rhino.Geometry.PointCloudItem.Color
Return: Color
Modifiers: public
Summary: Gets or sets the color of this point cloud item. If this point cloud item does not have a color, System.Drawing.Color.Black is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Hidden
Return: bool
Modifiers: public
Summary: Gets or sets the hidden flag of this point cloud item. If this point cloud item does not have a hidden flag, False is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Index
Return: int
Modifiers: public
Summary: Gets the index of this point cloud item.
Accessors: get

Property: Rhino.Geometry.PointCloudItem.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the location of this point cloud item.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Normal
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal vector for this point cloud item. If this point cloud item does not have a normal vector, Vector3d.Unset is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.PointValue
Return: double
Modifiers: public
Summary: Gets or set the extra value of this point cloud item. The extra value can be used to store a user-defined value, such as intensity. If this point cloud item does not have an extra value, RhinoMath.UnsetValue is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.X
Return: double
Modifiers: public
Summary: Gets or sets the X component of this point cloud item location.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Y
Return: double
Modifiers: public
Summary: Gets or sets the Y component of this point cloud item location.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Z
Return: double
Modifiers: public
Summary: Gets or sets the Z component of this point cloud item location.
Accessors: get set

Class: Rhino.Geometry.PointCloudUnsafeLock
Summary: Permits access to the underlying PointCloud raw data structures in an unsafe way.

Method: Rhino.Geometry.PointCloudUnsafeLock.ColorArray(out int length)
Return: int*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of colors, which are represented as 32-bit integers in ARGB format, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.NormalArray(out int length)
Return: Vector3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of point normals, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.PointArray(out int length)
Return: Point3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw point array, which uses coordinates defined with double precision floating point numbers, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.Release()
Return: void
Modifiers: public
Summary: Releases the lock and updates the underlying unmanaged data structures.

Method: Rhino.Geometry.PointCloudUnsafeLock.ValueArray(out int length)
Return: double*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of point values, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Class: Rhino.Geometry.PolyCurve
Summary: Represents a curve that is the result of joining several (possibly different) types of curves.

Constructor: Rhino.Geometry.PolyCurve.PolyCurve()
Summary: Initializes a new, empty polycurve.

Constructor: Rhino.Geometry.PolyCurve.PolyCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PolyCurve.HasGap
Return: bool
Modifiers: public
Summary: This is a quick way to see if the curve has gaps between the sub curve segments.
Accessors: get

Property: Rhino.Geometry.PolyCurve.IsNested
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not a PolyCurve contains nested PolyCurves.
Accessors: get

Property: Rhino.Geometry.PolyCurve.SegmentCount
Return: int
Modifiers: public
Summary: Gets the number of segments that make up this Polycurve.
Accessors: get

Method: Rhino.Geometry.PolyCurve.Append(Arc arc)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the arc to the end of polycurve. This function will fail if the polycurve is closed or if SegmentCount > 0 and the arc is closed.
Parameter: arc (Arc)
Parameter Summary: Arc segment to append.

Method: Rhino.Geometry.PolyCurve.Append(Curve curve)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the curve to the end of polycurve. This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
Parameter: curve (Curve)
Parameter Summary: Segment to append.

Method: Rhino.Geometry.PolyCurve.Append(Line line)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the line to the end of polycurve. This function will fail if the polycurve is closed.
Parameter: line (Line)
Parameter Summary: Line segment to append.

Method: Rhino.Geometry.PolyCurve.AppendSegment(Curve curve)
Return: bool
Modifiers: public
Summary: Appends the curve to the polycurve without changing the new segment's geometry. This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
Parameter: curve (Curve)
Parameter Summary: Segment to append.

Method: Rhino.Geometry.PolyCurve.CleanUp()
Return: Curve
Modifiers: public
Summary: Removes any nesting of polycurves. If this polycurve has just a single segment, the segment is returned. If, after nest removal, there are adjacent segments which are polylines, they are combined into a single polyline. The new curve may have a different domain from this polycurve. If the start and end segments of a closed input are polylines, the result may have a different seam location since the start and end segments will be combined.

Method: Rhino.Geometry.PolyCurve.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Duplicates this polycurve.
When not overridden in a derived class, this calls .

Method: Rhino.Geometry.PolyCurve.DuplicatePolyCurve()
Return: PolyCurve
Modifiers: public
Summary: Duplicates this polycurve.
This is the same as .

Method: Rhino.Geometry.PolyCurve.Explode()
Return: Curve[]
Modifiers: public
Summary: Explodes this PolyCurve into a list of Curve segments. This willnot explodenested polycurves. Call <b>RemoveNesting</b> first if you need all individual segments.

Method: Rhino.Geometry.PolyCurve.PolyCurveParameter(int segmentIndex, double segmentCurveParameter)
Return: double
Modifiers: public
Summary: Converts a segment curve parameter to a polycurve parameter.
Parameter: segmentIndex (int)
Parameter Summary: Index of segment.
Parameter: segmentCurveParameter (double)
Parameter Summary: Parameter on segment.

Method: Rhino.Geometry.PolyCurve.RemoveNesting()
Return: bool
Modifiers: public
Summary: Explodes nested polycurve segments and reconstructs this curve from the shattered remains. The result will have not have any PolyCurves as segments but it will have identical locus and parameterization.

Method: Rhino.Geometry.PolyCurve.SegmentCurve(int index)
Return: Curve
Modifiers: public
Summary: Gets the segment curve at the given index.
Parameter: index (int)
Parameter Summary: Index of segment to retrieve.

Method: Rhino.Geometry.PolyCurve.SegmentCurveParameter(double polycurveParameter)
Return: double
Modifiers: public
Summary: Converts a polycurve parameter to a segment curve parameter.
Parameter: polycurveParameter (double)
Parameter Summary: Parameter on PolyCurve to convert.

Method: Rhino.Geometry.PolyCurve.SegmentDomain(int segmentIndex)
Return: Interval
Modifiers: public
Summary: Returns the polycurve sub-domain assigned to a segment curve.
Parameter: segmentIndex (int)
Parameter Summary: Index of segment.

Method: Rhino.Geometry.PolyCurve.SegmentIndex(double polycurveParameter)
Return: int
Modifiers: public
Summary: Finds the segment used for evaluation at polycurve_parameter.
Parameter: polycurveParameter (double)
Parameter Summary: Parameter on polycurve for segment lookup.

Method: Rhino.Geometry.PolyCurve.SegmentIndexes(Interval subdomain, out int segmentIndex0, out int segmentIndex1)
Return: int
Modifiers: public
Summary: Finds the segments that overlap the Polycurve sub domain.
Parameter: subdomain (Interval)
Parameter Summary: Domain on this PolyCurve.
Parameter: segmentIndex0 (int)
Parameter Summary: Index of first segment that overlaps the sub-domain.
Parameter: segmentIndex1 (int)
Parameter Summary: Index of last segment that overlaps the sub-domain. Note that segmentIndex0 <= i < segmentIndex1.

Class: Rhino.Geometry.Polyline
Summary: Represents an ordered set of points connected by linear segments.
Polylines are closed if start and end points coincide.

Constructor: Rhino.Geometry.Polyline.Polyline()
Summary: Initializes a new empty polyline.

Constructor: Rhino.Geometry.Polyline.Polyline(IEnumerable<Point3d> collection)
Summary: Initializes a new polyline from a collection of points.

Constructor: Rhino.Geometry.Polyline.Polyline(int initialCapacity)
Summary: Initializes a new empty polyline with an initial capacity.

Property: Rhino.Geometry.Polyline.IsClosed
Return: bool
Modifiers: public
Summary: Test a polyline to see if it is closed.
Accessors: get

Property: Rhino.Geometry.Polyline.IsValid
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this polyline is valid.
Valid polylines have at least one segment, no Invalid points and no zero length segments.
Closed polylines with only two segments are also not considered valid. | Accessors: get

Property: Rhino.Geometry.Polyline.Length
Return: double
Modifiers: public
Summary: Gets the total length of the polyline.
Accessors: get

Property: Rhino.Geometry.Polyline.SegmentCount
Return: int
Modifiers: public
Summary: Gets the number of segments for this polyline.
Accessors: get

Method: Rhino.Geometry.Polyline.CreateByJoiningLines(IEnumerable<Line> lines, double tolerance, bool splitAtIntersections)
Return: Polyline[]
Modifiers: public, static
Summary: Creates polylines by joining lines.
Parameter: lines (IEnumerable<Line>)
Parameter Summary: An array, a list or any enumerable of lines.
Parameter: tolerance (double)
Parameter Summary: The threshold distance for joining lines.
Parameter: splitAtIntersections (bool)
Parameter Summary: If true, splits lines at intersections.

Method: Rhino.Geometry.Polyline.CreateCircumscribedPolygon(Circle circle, int sideCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular polygon circumscribe about a circle. The midpoints of the polygon's edges will be tangent to the circle.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: sideCount (int)
Parameter Summary: The number of sides

Method: Rhino.Geometry.Polyline.CreateInscribedPolygon(Circle circle, int sideCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular polygon inscribed in a circle. The vertices of the polygon will be on the circle.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: sideCount (int)
Parameter Summary: The number of sides

Method: Rhino.Geometry.Polyline.CreateStarPolygon(Circle circle, double radius, int cornerCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular star polygon. The star begins at circle.PointAt(0) and the vertices alternate between being on circle and begin on a concentric circle of other_radius.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: radius (double)
Parameter Summary: The radius of other circle.
Parameter: cornerCount (int)
Parameter Summary: The number of corners on the circle. There will be 2*cornerCount sides and 2*cornerCount vertices.

Method: Rhino.Geometry.Polyline.BreakAtAngles(double angle)
Return: Polyline[]
Modifiers: public
Summary: Breaks this polyline into sections at sharp kinks. Closed polylines will also be broken at the first and last vertex.
Parameter: angle (double)
Parameter Summary: Angle (in radians) between adjacent segments for a break to occur.

Method: Rhino.Geometry.Polyline.CenterPoint()
Return: Point3d
Modifiers: public
Summary: Compute the center point of the polyline as the weighted average of all segments.

Method: Rhino.Geometry.Polyline.ClosestParameter(Point3d testPoint)
Return: double
Modifiers: public
Summary: Gets the parameter along the polyline which is closest to a test-point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to approximate.

Method: Rhino.Geometry.Polyline.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Gets the point on the polyline which is closest to a test-point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to approximate.

Method: Rhino.Geometry.Polyline.CollapseShortSegments(double tolerance)
Return: int
Modifiers: public
Summary: Collapses all segments until none are shorter than tolerance. This function is significantly slower than DeleteShortSegments, since it recursively operates on the shortest segment. When a segment is collapsed the end-points are placed in the center of the segment.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during collapsing.

Method: Rhino.Geometry.Polyline.DeleteShortSegments(double tolerance)
Return: int
Modifiers: public
Summary: Removes all points that are closer than tolerance to the previous point.
Start and end points are left intact. | Parameter: tolerance (double) | Parameter Summary: Vertices closer together than tolerance will be removed.

Method: Rhino.Geometry.Polyline.Duplicate()
Return: Polyline
Modifiers: public, new
Summary: Returns a deep copy of this polyline instance.

Method: Rhino.Geometry.Polyline.GetSegments()
Return: Line[]
Modifiers: public
Summary: Constructs an array of line segments that make up the entire polyline.

Method: Rhino.Geometry.Polyline.IsClosedWithinTolerance(double tolerance)
Return: bool
Modifiers: public
Summary: Test a polyline to see if it is closed.
Parameter: tolerance (double)
Parameter Summary: The tolerance.

Method: Rhino.Geometry.Polyline.MergeColinearSegments(double angleTolerance, bool includeSeam)
Return: int
Modifiers: public
Summary: Merge co-linear consecutive segments in a polyline. This method will automatically remove any zero-length segments as well.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance between adjacent segments for collinearity test.
Parameter: includeSeam (bool)
Parameter Summary: If true, the seam point of a closed polyline will be moved forwards if it is collinear too.

Method: Rhino.Geometry.Polyline.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Gets the point on the polyline at the given parameter. The integer part of the parameter indicates the index of the segment.
Parameter: t (double)
Parameter Summary: Polyline parameter.

Method: Rhino.Geometry.Polyline.ReduceSegments(double tolerance)
Return: int
Modifiers: public
Summary: Constructs a reduction of this polyline by recursively removing the least significant segments.
Parameter: tolerance (double)
Parameter Summary: Tolerance for reduction. Whenever a vertex of the polyline is more significant than tolerance, it will be included in the reduction.

Method: Rhino.Geometry.Polyline.RemoveNearlyEqualSubsequentPoints(double tolerance)
Return: void
Modifiers: public
Summary: Removes one copy of a point that is equal to the previous or later point, by an absolute tolerance factor.

Method: Rhino.Geometry.Polyline.SegmentAt(int index)
Return: Line
Modifiers: public
Summary: Gets the line segment at the given index.
Parameter: index (int)
Parameter Summary: Index of segment to retrieve.

Method: Rhino.Geometry.Polyline.Smooth(double amount)
Return: bool
Modifiers: public
Summary: Smoothen the polyline segments by averaging adjacent vertices. Smoothing requires a polyline with exclusively valid vertices.
Parameter: amount (double)
Parameter Summary: Amount to smooth. Zero equals no smoothing, one equals complete smoothing.

Method: Rhino.Geometry.Polyline.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Gets the unit tangent vector along the polyline at the given parameter. The integer part of the parameter indicates the index of the segment.
Parameter: t (double)
Parameter Summary: Polyline parameter.

Method: Rhino.Geometry.Polyline.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a nurbs curve representation of this polyline.

Method: Rhino.Geometry.Polyline.ToPolylineCurve()
Return: PolylineCurve
Modifiers: public
Summary: Constructs a polyline curve representation of this polyline.

Method: Rhino.Geometry.Polyline.TriangulateClosedPolyline()
Return: MeshFace[]
Modifiers: public
Summary: Attempts to create a list of triangles which represent a triangulation of a closed polyline

Method: Rhino.Geometry.Polyline.Trim(Interval domain)
Return: Polyline
Modifiers: public
Summary: Constructs a polyline out of a parameter sub-domain in this curve.
Parameter: domain (Interval)
Parameter Summary: The sub-domain of the polyline. The integer part of the domain parameters indicate the index of the segment.

Class: Rhino.Geometry.PolylineCurve
Summary: Represents the geometry of a set of linked line segments.
This is fundamentally a class that derives from and internally contains a .

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve()
Summary: Initializes a new empty polyline curve.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(IEnumerable<Point3d> points)
Summary: Initializes a new polyline curve by copying its content from another set of points.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(PolylineCurve other)
Summary: Initializes a new polyline curve by copying its content from another polyline curve.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PolylineCurve.PointCount
Return: int
Modifiers: public
Summary: Gets the number of points in this polyline.
Accessors: get

Method: Rhino.Geometry.PolylineCurve.CreateConvexHull2d(Point2d[] points, out int hullIndices)
Return: PolylineCurve
Modifiers: public, static
Summary: Attempts to create a closed PolylineCurve that is the anti-clockwise planar convex hull of the input points. In addition, the indices of the extremal points among the input points are returned in correct order. Possible duplicates among the input points are taken care of. The input pointsThe indices into the input points such that points[hullIndices[i]] = result[i]. Since the result is a closed polyline if successful, the start/end index is repeated at the beginning and end of the hullIndices. The closed PolylineCurve encompassing the input points, or None if the input points were either too few, or were found to be collinear.
Parameter: points (Point2d[])
Parameter Summary: The input points
Parameter: hullIndices (int)
Parameter Summary: The indices into the input points such that points[hullIndices[i]] = result[i]. Since the result is a closed polyline if successful, the start/end index is repeated at the beginning and end of the hullIndices.

Method: Rhino.Geometry.PolylineCurve.Parameter(int index)
Return: double
Modifiers: public
Summary: Gets a parameter at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.

Method: Rhino.Geometry.PolylineCurve.Point(int index)
Return: Point3d
Modifiers: public
Summary: Gets a point at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.

Method: Rhino.Geometry.PolylineCurve.SetArcLengthParameterization(double tolerance)
Return: void
Modifiers: public
Summary: Sets the polyline curve to use arc length parameterization for higher quality geometry.
Parameter: tolerance (double)
Parameter Summary: Minimum distance tolerance.

Method: Rhino.Geometry.PolylineCurve.SetParameter(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets a parameter at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.
Parameter: parameter (double)
Parameter Summary: A parameter to set.

Method: Rhino.Geometry.PolylineCurve.SetPoint(int index, Point3d point)
Return: void
Modifiers: public
Summary: Sets a point at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.
Parameter: point (Point3d)
Parameter Summary: A point location to set.

Method: Rhino.Geometry.PolylineCurve.ToArray()
Return: Point3d[]
Modifiers: public
Summary: Returns the underlying Polyline points as an array.

Method: Rhino.Geometry.PolylineCurve.ToPolyline()
Return: Polyline
Modifiers: public
Summary: Returns the underlying Polyline, or points.

Class: Rhino.Geometry.QuadRemeshParameters
Summary: Parameters for QuadRemesh method

Constructor: Rhino.Geometry.QuadRemeshParameters.QuadRemeshParameters()
Summary: Initializes a new instance of the QuadRemeshParameters class

Property: Rhino.Geometry.QuadRemeshParameters.AdaptiveQuadCount
Return: bool
Modifiers: public
Summary: Respect the original Target Quad Count value as much as possible. True returns more quads than TargetQuadCount depending on amount of high-curvature areas. Note: this value is ignored when TargetEdgeLength > 0
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.AdaptiveSize
Return: double
Modifiers: public
Summary: Larger values results in for quad sizes that adjust to match input curvature. Smaller values results in more uniform quad sizes at the risk of less feature preservation. Range [0 - 100] Note: this value is ignored when TargetEdgeLength > 0
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.DetectHardEdges
Return: bool
Modifiers: public
Summary: When enabled the hard edges in models will be retained.
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.GuideCurveInfluence
Return: int
Modifiers: public
Summary: 0 = Approximate 1 = Interpolate Edge Ring 2 = Interpolate Edge Loop This value is ignored if Guide Curves are not supplied
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.PreserveMeshArrayEdgesMode
Return: int
Modifiers: public
Summary: 0=off, 1=On(Smart), 2=On(Strict) : Mesh array's created from Breps will have their brep face edge boundaries retained. Smart - Small or insignificant input faces are ignored. Strict - All input faces are factored in re-meshed result.
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.SymmetryAxis
Return: QuadRemeshSymmetryAxis
Modifiers: public
Summary: Symmetry axis to use for symmetric re-meshing
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.TargetEdgeLength
Return: double
Modifiers: public
Summary: When TargetEdgeLength is greater than 0 TargetQuadCount will be re-computed with the target goal of an approximated edge length based on the area of the input mesh e.g TargetQuadCount = Input mesh Area * sqr(TargetEdgeLength) AdaptiveSize as well as AdaptiveQuadCount will also be ignored;
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.TargetQuadCount
Return: int
Modifiers: public
Summary: The number of quads to try to achieve in the final re-meshed object Note: This value is overridden if TargetEdgeLength > 0
Accessors: get set

Class: Rhino.Geometry.RadialDimension
Summary: Represents a dimension of a circular entity that can be measured with radius or diameter.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension()
Summary: Constructs a radial dimension.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension(AnnotationType dimtype, Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint)
Summary: Constructs a radial dimension from parameters.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.RadialDimension.AnnotationType
Return: AnnotationType
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.RadialDimension.CenterPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.DimlinePoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.IsDiameterDimension
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the value refers to the diameter, rather than the radius.
Accessors: get

Property: Rhino.Geometry.RadialDimension.KneePoint
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.RadialDimension.LeaderArrowBlockId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderArrowSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderArrowType
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderCurveStyle
Return: LeaderCurveStyle
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderTextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Gets or sets the horizontal alignment of the radial dimension's text
Accessors: get set

Property: Rhino.Geometry.RadialDimension.RadiusPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextAngleType
Return: LeaderContentAngleStyle
Modifiers: public, override
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextLocation
Return: TextLocation
Modifiers: public, override
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextOrientation
Return: TextOrientation
Modifiers: public, override
Accessors: get set

Method: Rhino.Geometry.RadialDimension.Create(DimensionStyle dimStyle, AnnotationType dimtype, Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint)
Return: RadialDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimstyle
Parameter: dimtype (AnnotationType)
Parameter Summary: AnnotationType.Diameter or AnnotationType.Radius
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line

Method: Rhino.Geometry.RadialDimension.AdjustFromPoints(Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint, double rotationInPlane)
Return: bool
Modifiers: public
Summary: Update Dimension geometry from point locations
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: rotationInPlane (double)
Parameter Summary: Rotation around plane origin

Method: Rhino.Geometry.RadialDimension.Get3dPoints(out Point3d centerpoint, out Point3d radiuspoint, out Point3d dimlinepoint, out Point3d kneepoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension's radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: kneepoint (Point3d)
Parameter Summary: Point where dimension line jogs

Method: Rhino.Geometry.RadialDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.RadialDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.RadialDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.ReduceMeshParameters
Summary: Parameters for Reduce method

Constructor: Rhino.Geometry.ReduceMeshParameters.ReduceMeshParameters()
Summary: Constructs a polygon reduction parameter object with default values. Users of this class should not rely on default values to stay constant across service releases.

Property: Rhino.Geometry.ReduceMeshParameters.Accuracy
Return: int
Modifiers: public
Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.AllowDistortion
Return: bool
Modifiers: public
Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.CancelToken
Return: CancellationToken
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.DesiredPolygonCount
Return: int
Modifiers: public
Summary: Desired or target number of faces
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.Error
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.FaceTags
Return: int[]
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.LockedComponents
Return: ComponentIndex[]
Modifiers: public
Summary: List of topological mesh vertices and mesh vertices that will not be moved or deleted in reduction process. Each mesh vertex will lock the corresponding topological mesh vertex. In other words it is not possible to have a locked and non-locked mesh vertex at the same location.
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.NormalizeMeshSize
Return: bool
Modifiers: public
Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.ProgressReporter
Return: IProgress<double>
Modifiers: public
Accessors: get set

Class: Rhino.Geometry.RevSurface
Summary: Represents a surface of revolution.
Revolutions can be incomplete (they can form arcs).

Constructor: Rhino.Geometry.RevSurface.RevSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.RevSurface.Angle
Return: Interval
Modifiers: public
Summary: Gets the start and end angles of revolution in radians. The interval angle must be increasing and satisfy RhinoMath.ZeroTolerance < Angle.Length<= 2.0 * System.Math.PI.
Accessors: get

Property: Rhino.Geometry.RevSurface.Axis
Return: Line
Modifiers: public
Summary: Gets the axis of revolution.
Accessors: get

Property: Rhino.Geometry.RevSurface.Curve
Return: Curve
Modifiers: public
Summary: Gets the revolute curve.
Accessors: get

Property: Rhino.Geometry.RevSurface.Interval
Return: Interval
Modifiers: public
Summary: Interval specifies the parameterization for the angular parameter. Interval must be an increasing interval. The parameter Interval[0] corresponds to Angle[0] and the parameter Interval[1] corresponds to Angle[1].
Accessors: get

Property: Rhino.Geometry.RevSurface.IsTransposed
Return: bool
Modifiers: public
Summary: If false, the "u" parameter is the angle parameter and the "v" parameter is the curve parameter. If true, the "u" parameter is the curve parameter and the "v" parameter is the angle parameter.
Accessors: get

Method: Rhino.Geometry.RevSurface.Create(Curve revoluteCurve, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix curve and an axis.
This overload accepts a slice start and end angles. | Parameter: revoluteCurve (Curve) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Curve revoluteCurve, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix curve and an axis.
Parameter: revoluteCurve (Curve)
Parameter Summary: A generatrix.
Parameter: axisOfRevolution (Line)
Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.Create(Line revoluteLine, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix line and an axis.
This overload accepts a slice start and end angles.
Results can be (truncated) cones, cylinders and circular hyperboloids, or can fail. | Parameter: revoluteLine (Line) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Line revoluteLine, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix line and an axis.
If the operation succeeds, results can be (truncated) cones, cylinders and circular hyperboloids. | Parameter: revoluteLine (Line) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.Create(Polyline revolutePolyline, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix polyline and an axis.
This overload accepts a slice start and end angles. | Parameter: revolutePolyline (Polyline) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Polyline revolutePolyline, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix polyline and an axis.
Parameter: revolutePolyline (Polyline)
Parameter Summary: A generatrix.
Parameter: axisOfRevolution (Line)
Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.CreateFromCone(Cone cone)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a cone.
Parameter: cone (Cone)
Parameter Summary: A cone.

Method: Rhino.Geometry.RevSurface.CreateFromCylinder(Cylinder cylinder)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: A cylinder.

Method: Rhino.Geometry.RevSurface.CreateFromSphere(Sphere sphere)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: A sphere.

Method: Rhino.Geometry.RevSurface.CreateFromTorus(Torus torus)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a torus.
Parameter: torus (Torus)
Parameter Summary: A torus.

Class: Rhino.Geometry.RibbonOffsetParameters
Summary: Advanced parameters for RibbonOffset Parameters mimic the RibbonOffset Command.

Constructor: Rhino.Geometry.RibbonOffsetParameters.RibbonOffsetParameters()
Summary: Initializes a new instance of the RibbonOffsetParameters class

Property: Rhino.Geometry.RibbonOffsetParameters.AlignCrossSections
Return: bool
Modifiers: public
Summary: When false: cross section slashes between input and output curve are located at the ends of ruled spans. When true: cross section slashes between input and output curve are located at the mid points of ruled spans and blends.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.BlendRadius
Return: double
Modifiers: public
Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetDistance
Return: double
Modifiers: public
Summary: Offset curve distance from input curve.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetLocation
Return: Point3d
Modifiers: public
Summary: Inside or Outside point location
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetPlaneVector3d
Return: Vector3d
Modifiers: public
Summary: A vector that indicates the normal of the plane in which the offset will occur. This vector is typically similar to a logical extrude direction for the closed input curve.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetTolerance
Return: double
Modifiers: public
Summary: Used to determine self-intersections of offset curve, not offset error.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RebuildPointCount
Return: int
Modifiers: public
Summary: Rebuild offset curve with defined number of control points 0 for disabled
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RefitTolerance
Return: double
Modifiers: public
Summary: Refit the offset curve to a specified tolerance 0 for disabled
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RibbonSurfaceGenerationMethod
Return: RibbonOffsetSurfaceMethod
Modifiers: public
Summary: 0 - no surfaces will be created, curves only 1 - Simple Sweep 2 2 - Sweep 2 mixed with NetworkSrf corners
Accessors: get set

Class: Rhino.Geometry.RTree
Summary: Represents a spatial search structure based on implementations of the R-tree algorithm by Toni Gutman.

Constructor: Rhino.Geometry.RTree.RTree()
Summary: Initializes a new, empty instance of the tree.

Property: Rhino.Geometry.RTree.Count
Return: int
Modifiers: public
Summary: Gets the number of items in this tree.
Accessors: get

Method: Rhino.Geometry.RTree.CreateFromPointArray(IEnumerable<Point3d> points)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each point cloud point.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points.

Method: Rhino.Geometry.RTree.CreateMeshFaceTree(Mesh mesh)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each face in the mesh. The element id is set to the index of the face.
Parameter: mesh (Mesh)
Parameter Summary: A mesh.

Method: Rhino.Geometry.RTree.CreatePointCloudTree(PointCloud cloud)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each point cloud point.
Parameter: cloud (PointCloud)
Parameter Summary: A point cloud.

Method: Rhino.Geometry.RTree.Point3dClosestPoints(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePts, double limitDistance)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds the point in a list of 3D points that is closest to a test point.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A series of points.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: limitDistance (double)
Parameter Summary: The maximum allowed distance.

Method: Rhino.Geometry.RTree.Point3dKNeighbors(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePts, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A series of points.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Geometry.RTree.PointCloudClosestPoints(PointCloud pointcloud, IEnumerable<Point3d> needlePts, double limitDistance)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds the point in a list of 3D points that is closest to a test point.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: limitDistance (double)
Parameter Summary: The maximum allowed distance.

Method: Rhino.Geometry.RTree.PointCloudKNeighbors(PointCloud pointcloud, IEnumerable<Point3d> needlePts, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Geometry.RTree.SearchOverlaps(RTree treeA, RTree treeB, double tolerance, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public, static
Summary: Searches two R-trees for all pairs elements whose bounding boxes overlap.
Parameter: treeA (RTree)
Parameter Summary: A first tree.
Parameter: treeB (RTree)
Parameter Summary: A second tree.
Parameter: tolerance (double)
Parameter Summary: If the distance between a pair of bounding boxes is less than tolerance, then callback is called.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: A callback event handler.

Method: Rhino.Geometry.RTree.Clear()
Return: void
Modifiers: public
Summary: Removes all elements.

Method: Rhino.Geometry.RTree.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.RTree.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.RTree.Insert(BoundingBox box, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(BoundingBox box, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Insert(Point2d point, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(Point2d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Insert(Point3d point, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(Point3d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Remove(BoundingBox box, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(BoundingBox box, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Remove(Point2d point, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(Point3d point, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(Point3d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Search(BoundingBox box, EventHandler<RTreeEventArgs> callback, object tag)
Return: bool
Modifiers: public
Summary: Searches for items in a bounding box.
The bounding box can be singular and contain exactly one single point. | Parameter: box (BoundingBox) | Parameter Summary: A bounding box. | Parameter: callback (EventHandler<RTreeEventArgs>) | Parameter Summary: An event handler to be raised when items are found. | Parameter: tag (object) | Parameter Summary: State to be passed inside the <b>RTreeEventArgs</b> Tag property.

Method: Rhino.Geometry.RTree.Search(BoundingBox box, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public
Summary: Searches for items in a bounding box.
The bounding box can be singular and contain exactly one single point. | Parameter: box (BoundingBox) | Parameter Summary: A bounding box. | Parameter: callback (EventHandler<RTreeEventArgs>) | Parameter Summary: An event handler to be raised when items are found.

Method: Rhino.Geometry.RTree.Search(Sphere sphere, EventHandler<RTreeEventArgs> callback, object tag)
Return: bool
Modifiers: public
Summary: Searches for items in a sphere.
Parameter: sphere (Sphere)
Parameter Summary: bounds used for searching.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: An event handler to be raised when items are found.
Parameter: tag (object)
Parameter Summary: State to be passed inside the <b>RTreeEventArgs</b> Tag property.

Method: Rhino.Geometry.RTree.Search(Sphere sphere, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public
Summary: Searches for items in a sphere.
Parameter: sphere (Sphere)
Parameter Summary: bounds used for searching.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: An event handler to be raised when items are found.

Class: Rhino.Geometry.RTreeEventArgs
Summary: Represents event data that is passed when an item that meets certain criteria is found and the passed RTree event is raised.

Property: Rhino.Geometry.RTreeEventArgs.Cancel
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if the search should be conducted farther.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.Id
Return: int
Modifiers: public
Summary: Gets the identifier of the found item.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdB
Return: int
Modifiers: public
Summary: If search is using two r-trees, IdB is element b in the search.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdBPtr
Return: IntPtr
Modifiers: public
Summary: If search is using two r-trees, IdB is the element b pointer in the search.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdPtr
Return: IntPtr
Modifiers: public
Summary: Gets the identifier pointer of the found item.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.SearchBoundingBox
Return: BoundingBox
Modifiers: public
Summary: Bounding box bounds used during a search. You may modify the box in a search callback to help reduce the bounds to search.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.SearchSphere
Return: Sphere
Modifiers: public
Summary: Sphere bounds used during a search. You can modify the sphere in a search callback to help reduce the bounds to search.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.Tag
Return: object
Modifiers: public
Summary: Gets or sets an arbitrary object that can be attached to this event args. This object will "stick" through a single search and can represent user-defined state.
Accessors: get set

Class: Rhino.Geometry.ShrinkWrapParameters
Summary: Parameters for ShrinkWrap method

Constructor: Rhino.Geometry.ShrinkWrapParameters.ShrinkWrapParameters()
Summary: Initializes a new instance of the ShrinkWrapParameters class

Property: Rhino.Geometry.ShrinkWrapParameters.FillHolesInInputObjects
Return: bool
Modifiers: public
Summary: Any input meshes will have "Fill Holes" applied to them before volume creation This value is ignored when input objects are Point Clouds
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.InflateVerticesAndPoints
Return: bool
Modifiers: public
Summary: Inflate mesh vertices, points and point clouds Mesh vertices will be inflated as though the mesh were a point cloud
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.Offset
Return: double
Modifiers: public
Summary: Distance to offset outward or inward
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.PolygonOptimization
Return: int
Modifiers: public
Summary: 0 - 100 the percentage of optimization desired. Polygons will be reduced in areas of lower curvature Lower values result in better feature preservation at the cost of more polygons
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.SmoothingIterations
Return: int
Modifiers: public
Summary: Number of times to apply smoothing
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.TargetEdgeLength
Return: double
Modifiers: public
Summary: The desired target edge length in document units Smaller values equal more mesh resolution at the expense of larger mesh sizes
Accessors: get set

Class: Rhino.Geometry.ShutLiningCurveInfo
Summary: Contains shutlining curve information. This is used in <b>Mesh.WithShutLining</b> .

Constructor: Rhino.Geometry.ShutLiningCurveInfo.ShutLiningCurveInfo(Curve curve, double radius, int profile, bool pull, bool isBump, IEnumerable<Interval> curveIntervals, bool enabled)
Summary: Creates a new instance of the ShutLining curve information class.

Property: Rhino.Geometry.ShutLiningCurveInfo.Curve
Return: Curve
Modifiers: public
Summary: The profile curve.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.CurveIntervals
Return: ReadOnlyCollection<Interval>
Modifiers: public
Summary: The parts of the curve to use as profiles.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Enabled
Return: bool
Modifiers: public
Summary: If true, this curve is active.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.IsBump
Return: bool
Modifiers: public
Summary: True if profile constitutes a bump. See Rhino's Help for more information.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Profile
Return: int
Modifiers: public
Summary: >The profile type.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Pull
Return: bool
Modifiers: public
Summary: True if the curve should be pulled.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Radius
Return: double
Modifiers: public
Summary: The profile radius.
Accessors: get

Class: Rhino.Geometry.Silhouette
Summary: Information about silhouette curves that are generated from geometry (surfaces, brep faces, meshes)

Constructor: Rhino.Geometry.Silhouette.Silhouette()
Summary: Initializes a new instance of the Silhouette class

Property: Rhino.Geometry.Silhouette.Curve
Return: Curve
Modifiers: public
Summary: 3D curve representing the shape of the silhouette.
Accessors: get set

Property: Rhino.Geometry.Silhouette.GeometryComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index corresponding with this silhouette curve. This field is only set when the entire silhouette curve is part of some geometry component.
Accessors: get set

Property: Rhino.Geometry.Silhouette.SilhouetteType
Return: SilhouetteType
Modifiers: public
Summary: Gets the type of this silhouette curve.
Accessors: get set

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Point3d perspectiveCameraLocation, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a perspective projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: perspectiveCameraLocation (Point3d)
Parameter Summary: Location of perspective camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Point3d perspectiveCameraLocation, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a perspective projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: perspectiveCameraLocation (Point3d)
Parameter Summary: Location of perspective camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Vector3d parallelCameraDirection, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a parallel projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: parallelCameraDirection (Vector3d)
Parameter Summary: Direction of parallel camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Vector3d parallelCameraDirection, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a parallel projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: parallelCameraDirection (Vector3d)
Parameter Summary: Direction of parallel camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, ViewportInfo viewport, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a specified projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: viewport (ViewportInfo)
Parameter Summary: Projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, ViewportInfo viewport, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a specified projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: viewport (ViewportInfo)
Parameter Summary: Projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.ComputeDraftCurve(GeometryBase geometry, double draftAngle, Vector3d pullDirection, double tolerance, double angleToleranceRadians, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Computes draft curve silhouettes of a shape.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians. Draft angle can be a positive or negative value.
Parameter: pullDirection (Vector3d)
Parameter Summary: 3d direction for the mold to be pulled in, directed away from the object.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.ComputeDraftCurve(GeometryBase geometry, double draftAngle, Vector3d pullDirection, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Computes draft curve silhouettes of a shape.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians. Draft angle can be a positive or negative value.
Parameter: pullDirection (Vector3d)
Parameter Summary: 3d direction for the mold to be pulled in, directed away from the object.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Class: Rhino.Geometry.SpaceMorph
Summary: Represents a spacial, Euclidean morph.

Constructor: Rhino.Geometry.SpaceMorph.SpaceMorph()
Summary: Initializes a new instance of the SpaceMorph class

Property: Rhino.Geometry.SpaceMorph.PreserveStructure
Return: bool
Modifiers: public
Summary: True if the morph should be done in a way that preserves the structure of the geometry. In particular, for NURBS objects, True means that only the control points are moved. The PreserveStructure value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.SpaceMorph.QuickPreview
Return: bool
Modifiers: public
Summary: True if the morph should be done as quickly as possible because the result is being used for some type of dynamic preview. If QuickPreview is true, the tolerance may be ignored. The QuickPreview value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.SpaceMorph.Tolerance
Return: double
Modifiers: public
Summary: The desired accuracy of the morph. This value is primarily used for deforming surfaces and breps. The default is 0.0 and any value <= 0.0 is ignored by morphing functions. The Tolerance value does not affect the way meshes and points are morphed.
Accessors: get set

Method: Rhino.Geometry.SpaceMorph.IsMorphable(GeometryBase geometry)
Return: bool
Modifiers: public, static
Summary: True if the geometry can be morphed by calling SpaceMorph.Morph(geometry)

Method: Rhino.Geometry.SpaceMorph.Morph(GeometryBase geometry)
Return: bool
Modifiers: public
Summary: Apply the space morph to geometry.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry to morph.

Method: Rhino.Geometry.SpaceMorph.Morph(ref Plane plane)
Return: bool
Modifiers: public
Summary: Apply the space morph to a plane.
Parameter: plane (Plane)
Parameter Summary: Plane to morph.

Method: Rhino.Geometry.SpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, abstract
Summary: Morphs an Euclidean point.
This method is abstract. | Parameter: point (Point3d) | Parameter Summary: A point that will be morphed by this function.

Class: Rhino.Geometry.Squisher
Summary: class used to wrap Squish functions

Constructor: Rhino.Geometry.Squisher.Squisher()
Summary: constructs a squisher with default parameters

Method: Rhino.Geometry.Squisher.Is2dPatternSquished(GeometryBase geometry)
Return: bool
Modifiers: public, static
Summary: Returns True if the input geometry was the result of a squish operation

Method: Rhino.Geometry.Squisher.SquishBack2dMarks(GeometryBase squishedGeometry, IEnumerable<GeometryBase> marks)
Return: IEnumerable<GeometryBase>
Modifiers: public, static
Summary: Maps 2D geometry from the squished surface or mesh back to the original 3D surface or mesh
Parameter: squishedGeometry (GeometryBase)
Parameter Summary: The squished surface or mesh
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: The input 2D geometry

Method: Rhino.Geometry.Squisher.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Squisher.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Squisher.Get2dMesh()
Return: Mesh
Modifiers: public
Summary: Get the 2d mesh that results from the squish operation

Method: Rhino.Geometry.Squisher.Get3dMesh()
Return: Mesh
Modifiers: public
Summary: Get the 3d mesh that was used for squish operation

Method: Rhino.Geometry.Squisher.GetAreaConstrainedTrianglesIndices()
Return: MeshFace[]
Modifiers: public
Summary: Gets mesh vertex indices for the triangular faces that were constrained during the squish. Indices can be used in both the 2d and 3d mesh vertices arrays.

Method: Rhino.Geometry.Squisher.GetLengthConstrained2dLines()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 2d mesh. The line at any index here corresponds to the same line in GetLengthConstrained3dLines.

Method: Rhino.Geometry.Squisher.GetLengthConstrained3dLines()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 3d mesh. The line at any index here corresponds to the same line in GetLengthConstrained2dLines.

Method: Rhino.Geometry.Squisher.GetMesh2dEdges()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 2d mesh. The line at any index here corresponds to the same line in GetLengthConstrained3dLines.

Method: Rhino.Geometry.Squisher.GetMesh3dEdges()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 3d mesh. The line at any index here corresponds to the same line in GetLengthConstrained2dLines.

Method: Rhino.Geometry.Squisher.SquishCurve(Curve curve)
Return: PolylineCurve
Modifiers: public
Summary: Maps a curve on or near a previously squished 3d surface to the resulting 2d surface
Parameter: curve (Curve)
Parameter Summary: The curve to squish

Method: Rhino.Geometry.Squisher.SquishMesh(SquishParameters sp, Mesh mesh3d, IEnumerable<GeometryBase> marks, List<GeometryBase> squished_marks_out)
Return: Mesh
Modifiers: public
Summary: Squish the given mesh into a flat mesh
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: mesh3d (Mesh)
Parameter Summary: The mesh to squish
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: Points, Curves, PoiuntClouds, and TextDots to squish. Can be null.
Parameter: squished_marks_out (List<GeometryBase>)
Parameter Summary: The squished marks. If a mark fails to squish, it will have a None entry in the list.

Method: Rhino.Geometry.Squisher.SquishMesh(SquishParameters sp, Mesh mesh3d)
Return: Mesh
Modifiers: public
Summary: Squish the given mesh into a flat mesh
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: mesh3d (Mesh)
Parameter Summary: The mesh to squish

Method: Rhino.Geometry.Squisher.SquishPoint(Point3d point, out Point3d squishedPoint)
Return: bool
Modifiers: public
Summary: Maps a point on or near the previously squished 3d surface to the flattened surface
Parameter: point (Point3d)
Parameter Summary: The point to squish
Parameter: squishedPoint (Point3d)
Parameter Summary: The squished point

Method: Rhino.Geometry.Squisher.SquishSurface(SquishParameters sp, Surface surface, IEnumerable<GeometryBase> marks, List<GeometryBase> squished_marks_out)
Return: Brep
Modifiers: public
Summary: Squish the surface into a flat brep
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: surface (Surface)
Parameter Summary: The surface to be squished
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: Point, PountCloud, TextDot, and Curve objects to squish. Can be null.
Parameter: squished_marks_out (List<GeometryBase>)
Parameter Summary: A list of the squished marks, with None entries for marks that fail to squish. Can be null.

Method: Rhino.Geometry.Squisher.SquishSurface(SquishParameters sp, Surface surface)
Return: Brep
Modifiers: public
Summary: Squish the surface into a flat brep
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: surface (Surface)
Parameter Summary: The surface to be squished

Method: Rhino.Geometry.Squisher.SquishTextDot(TextDot textDot)
Return: TextDot
Modifiers: public
Summary: Maps a TextDot on or near a previously squished 3d surface to the resulting 2d surface
Parameter: textDot (TextDot)
Parameter Summary: The text dot to squish

Class: Rhino.Geometry.SquishParameters
Summary: Parameters used by the 'Squish' command flattening algorithm

Constructor: Rhino.Geometry.SquishParameters.SquishParameters()
Summary: Initializes a new instance with default values. Initial values are same as Default.

Property: Rhino.Geometry.SquishParameters.Default
Return: SquishParameters
Modifiers: public, static
Summary: Gets the default Squishing parameters
Accessors: get

Property: Rhino.Geometry.SquishParameters.AbsoluteLimit
Return: double
Modifiers: public
Summary: If -1.0 <= AnsoluteLimit < 0.0, then then an absolute compression limit is applied so that (2d length)/(3d length) >= abs(AbsoluteLimit). In particular, Absolute = -1.0, then no compression is permitted(2d length) >= (3d length). If 0.0 < m_absolute_limit <= 1.0 then then an absolute stretching limit is applied so that (2d length)/(3d length) <= 1/abs(AbsoluteLimit). Examples: AbsoluteLimit 1.0: no stretching, (2d length) <= 1.0*(3d length) 0.5: cap on stretching, 0.5*(2d length) <= (3d length) -0.5: cap on compression, (2d length) >= 0.5*(3d length) -1.0: no compression, (2d length) >= 1.0*(3d length)
Accessors: get set

Property: Rhino.Geometry.SquishParameters.Algorithm
Return: SquishFlatteningAlgorithm
Modifiers: public
Summary: The flattening algorithm to use: Geometric: (scale independent)the "spring" constant is proportional to 1/L^2 and the result is independent of scale. PhysicalStress: (scale dependent) the "spring" constant is proportional to 1/L.
Accessors: get set

Property: Rhino.Geometry.SquishParameters.BoundaryCompressConstant
Return: double
Modifiers: public
Summary: Spring constant for compressed boundary edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.BoundaryStretchConstant
Return: double
Modifiers: public
Summary: Spring constant for stretched boundary edges
Accessors: get set

Property: Rhino.Geometry.SquishParameters.InteriorCompressConstant
Return: double
Modifiers: public
Summary: Spring constant for compressed interior edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.InteriorStretchConstant
Return: double
Modifiers: public
Summary: Spring constant for stretched boundary edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.PreserveTopology
Return: bool
Modifiers: public
Summary: the mesh has coincident vertices and PreserveTopology is true, then the flattening is based on the mesh's topology and coincident vertices will remain coincident. Otherwise coincident vertices are free to move apart.
Accessors: get set

Property: Rhino.Geometry.SquishParameters.SaveMapping
Return: bool
Modifiers: public
Summary: If SaveMapping is true, then ON_SquishMesh() will save extra information on the squished mesh so 3d points and curves near the input mesh can be mapped to the squished mesh and 2d points and curves on the squished mesh can be mapped back to the 3d mesh.
Accessors: get set

Method: Rhino.Geometry.SquishParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SquishParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SquishParameters.GetSpringConstants(out double boundaryBias, out double deformationBias)
Return: bool
Modifiers: public
Summary: See if the spring constants could have been set with SetSpringConstants().
Parameter: boundaryBias (double)
Parameter Summary: boundary_bias: 0.0 to 1.0 0.0: boundary and interior treated the same 1.0: strongest bias to preserving boundary lengths at the expense of interior distortion.
Parameter: deformationBias (double)
Parameter Summary: deformation_bias: -1.0 to 1.0 -1.0: strongest bias in favor of compression. 0.0: no preference between compression and stretching 1.0: strongest bias in favor of stretching

Method: Rhino.Geometry.SquishParameters.SetDeformation(SquishDeformation deformation, bool bPreserveBoundary, double boundaryStretchConstant, double boundaryCompressConstant, double interiorStretchConstant, double interiorCompressConstant)
Return: void
Modifiers: public
Summary: Sets the squish deformation characteristics

Method: Rhino.Geometry.SquishParameters.SetSpringConstants(double boundaryBias, double deformationBias)
Return: void
Modifiers: public
Summary: A simplified interface for setting the Stretch and Compression spring constants
Parameter: boundaryBias (double)
Parameter Summary: boundary_bias: 0.0 to 1.0 0.0: boundary and interior treated the same 1.0: strongest bias to preserving boundary lengths at the expense of interior distortion.
Parameter: deformationBias (double)
Parameter Summary: deformation_bias: -1.0 to 1.0 -1.0: strongest bias in favor of compression. 0.0: no preference between compression and stretching 1.0: strongest bias in favor of stretching

Class: Rhino.Geometry.SubD
Summary: Subdivision surface

Constructor: Rhino.Geometry.SubD.SubD()
Summary: Create a new instance of SubD geometry

Constructor: Rhino.Geometry.SubD.SubD(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.SubD.Empty
Return: SubD
Modifiers: public, static
Summary: Get a new, empty SubD object.
Accessors: get

Property: Rhino.Geometry.SubD.Edges
Return: SubDEdgeList
Modifiers: public
Summary: All edges in this SubD
Accessors: get

Property: Rhino.Geometry.SubD.Faces
Return: SubDFaceList
Modifiers: public
Summary: All faces in this SubD
Accessors: get

Property: Rhino.Geometry.SubD.IsSolid
Return: bool
Modifiers: public
Summary: Test SubD to see if the active level is a solid. A "solid" is a closed oriented manifold, or a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.SubD.Vertices
Return: SubDVertexList
Modifiers: public
Summary: All vertices in this SubD
Accessors: get

Method: Rhino.Geometry.SubD.CreateFromCylinder(Cylinder cylinder, uint circumferenceFaceCount, uint heightFaceCount, SubDEndCapStyle endCapStyle, SubDEdgeTag endCapEdgeTag, SubDComponentLocation radiusLocation)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD form of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: The defining cylinder.
Parameter: circumferenceFaceCount (uint)
Parameter Summary: Number of faces around the cylinder.
Parameter: heightFaceCount (uint)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: endCapStyle (SubDEndCapStyle)
Parameter Summary: The end cap style.
Parameter: endCapEdgeTag (SubDEdgeTag)
Parameter Summary: The end cap edge tag.
Parameter: radiusLocation (SubDComponentLocation)
Parameter Summary: The SubD component location.

Method: Rhino.Geometry.SubD.CreateFromLoft(IEnumerable<NurbsCurve> curves, bool closed, bool addCorners, bool addCreases, int divisions)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD lofted through shape curves.
Parameter: curves (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to loft through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the lofting direction. Must have three or more shape curves.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.
Parameter: addCreases (bool)
Parameter Summary: With kinked curves, adds creased edges to the SubD along the kinks.
Parameter: divisions (int)
Parameter Summary: The segment number between adjacent input curves.

Method: Rhino.Geometry.SubD.CreateFromMesh(Mesh mesh, SubDCreationOptions options)
Return: SubD
Modifiers: public, static
Summary: Create a new SubD from a mesh.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.
Parameter: options (SubDCreationOptions)
Parameter Summary: The SubD creation options.

Method: Rhino.Geometry.SubD.CreateFromMesh(Mesh mesh)
Return: SubD
Modifiers: public, static
Summary: Create a new SubD from a mesh.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.

Method: Rhino.Geometry.SubD.CreateFromSurface(Surface surface, SubDFromSurfaceMethods method, bool corners)
Return: SubD
Modifiers: public, static
Summary: Create a SubD that approximates the surface. If the surface is a SubD friendly NURBS surface and withCorners is true, then the SubD and input surface will have the same geometry.
Parameter: surface (Surface)
Parameter Summary:
Parameter: method (SubDFromSurfaceMethods)
Parameter Summary: Selects the method used to calculate the SubD.
Parameter: corners (bool)
Parameter Summary: If the surface is open, then the corner vertices with be tagged as VertexTagCorner. This makes the resulting SubD have sharp corners to match the appearance of the input surface.

Method: Rhino.Geometry.SubD.CreateFromSweep(NurbsCurve rail1, IEnumerable<NurbsCurve> shapes, bool closed, bool addCorners, bool roadlikeFrame, Vector3d roadlikeNormal)
Return: SubD
Modifiers: public, static
Summary: Fits a SubD through a series of profile curves that define the SubD cross-sections and one curve that defines a SubD edge.
Parameter: rail1 (NurbsCurve)
Parameter Summary: A SubD-friendly NURBS curve to sweep along.
Parameter: shapes (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to sweep through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the rail curve direction.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.
Parameter: roadlikeFrame (bool)
Parameter Summary: Determines how sweep frame rotations are calculated. If False (Freeform), frame are propagated based on a reference direction taken from the rail curve curvature direction. If True (Roadlike), frame rotations are calculated based on a vector supplied in "roadlikeNormal" and the world coordinate system.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: If roadlikeFrame = true, provide 3D vector used to calculate the frame rotations for sweep shapes. If roadlikeFrame = false, then pass <b> Vector3d.Unset</b> .

Method: Rhino.Geometry.SubD.CreateFromSweep(NurbsCurve rail1, NurbsCurve rail2, IEnumerable<NurbsCurve> shapes, bool closed, bool addCorners)
Return: SubD
Modifiers: public, static
Summary: Fits a SubD through a series of profile curves that define the SubD cross-sections and two curves that defines SubD edges.
Parameter: rail1 (NurbsCurve)
Parameter Summary: The first SubD-friendly NURBS curve to sweep along.
Parameter: rail2 (NurbsCurve)
Parameter Summary: The second SubD-friendly NURBS curve to sweep along.
Parameter: shapes (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to sweep through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the rail curve direction.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.

Method: Rhino.Geometry.SubD.CreateGlobeSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint axialFaceCount, uint equatorialFaceCount)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from polar triangle fans and bands of quads. The result resembles a globe with triangle fans at the poles and the edges forming latitude parallels and longitude meridians.
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: axialFaceCount (uint)
Parameter Summary: Number of faces along the sphere's meridians. (axialFaceCount >= 2) For example, if you wanted each face to span 30 degrees of latitude, you would pass 6 (=180 degrees/30 degrees) for axialFaceCount.
Parameter: equatorialFaceCount (uint)
Parameter Summary: Number of faces around the sphere's parallels. (equatorialFaceCount >= 3) For example, if you wanted each face to span 30 degrees of longitude, you would pass 12 (=360 degrees/30 degrees) for equatorialFaceCount.

Method: Rhino.Geometry.SubD.CreateIcosahedron(Sphere sphere, SubDComponentLocation vertexLocation)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere based on an icosohedron (20 triangular faces and 5 valent vertices). This is a goofy topology for a Catmull-Clark subdivision surface (all triangles, all vertices have 5 edges). You may want to consider using the much behaved result from CreateSubDQuadSphere(sphere, vertexLocation, 1) or even the result from CreateSubDGlobeSphere().
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.

Method: Rhino.Geometry.SubD.CreateQuadSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint quadSubdivisionLevel)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from quad faces.
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: quadSubdivisionLevel (uint)
Parameter Summary: The resulting sphere will have 6*4^subdivision level quads. (0 for 6 quads, 1 for 24 quads, 2 for 96 quads, ...).

Method: Rhino.Geometry.SubD.CreateTriSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint triSubdivisionLevel)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from triangular faces. This is a goofy topology for a Catmull-Clark subdivision surface (all triangles and all vertices have 5 or 6 edges). You may want to consider using the much behaved result from CreateSubDQuadSphere() or even the result from CreateSubDGlobeSphere().
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: triSubdivisionLevel (uint)
Parameter Summary: The resulting sphere will have 20*4^subdivision level triangles. (0 for 20 triangles, 1 for 80 triangles, 2 for 320 triangles, ...).

Method: Rhino.Geometry.SubD.JoinSubDs(IEnumerable<SubD> subdsToJoin, double tolerance, bool joinedEdgesAreCreases, bool preserveSymmetry)
Return: SubD[]
Modifiers: public, static
Summary: Joins an enumeration of SubDs to form as few as possible resulting SubDs. There may be more than one SubD in the result array.
Parameter: subdsToJoin (IEnumerable<SubD>)
Parameter Summary: An enumeration of SubDs to join.
Parameter: tolerance (double)
Parameter Summary: The join tolerance.
Parameter: joinedEdgesAreCreases (bool)
Parameter Summary: If true, merged boundary edges will be creases. If false, merged boundary edges will be smooth.
Parameter: preserveSymmetry (bool)
Parameter Summary: If true, and if all inputs share the same symmetry, the output will also be symmetrical wrt. that symmetry. If false, or True but no common symmetry exists, symmetry information is removed from all newly joined SubDs.

Method: Rhino.Geometry.SubD.JoinSubDs(IEnumerable<SubD> subdsToJoin, double tolerance, bool joinedEdgesAreCreases)
Return: SubD[]
Modifiers: public, static
Summary: Joins an enumeration of SubDs to form as few as possible resulting SubDs. There may be more than one SubD in the result array.
Parameter: subdsToJoin (IEnumerable<SubD>)
Parameter Summary: An enumeration of SubDs to join.
Parameter: tolerance (double)
Parameter Summary: The join tolerance.
Parameter: joinedEdgesAreCreases (bool)
Parameter Summary: If true, merged boundary edges will be creases. If false, merged boundary edges will be smooth.

Method: Rhino.Geometry.SubD.ClearEvaluationCache()
Return: void
Modifiers: public
Summary: Clear all cached evaluation information (meshes, surface points, bounding boxes, ...) that depends on edge tags, vertex tags, and the location of vertex control points.

Method: Rhino.Geometry.SubD.ComponentFromComponentIndex(ComponentIndex componentIndex)
Return: SubDComponent
Modifiers: public
Summary: Returns a SubDComponent, either a SubDEdge, SubDFace, or SubDVertex, from a component index.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: The component index.

Method: Rhino.Geometry.SubD.CopyEvaluationCache(in SubD src)
Return: bool
Modifiers: public
Summary: Expert function that copies cached evaluations of component subdivision points and limit surface information from src to this. Typically this is done for performance critical situations like control point editing: - Copy a SubD to be modified (this does not copy the evaluation cache) - Copy the evaluation cache from the unmodified SubD - Modify the SubD copy - Update the surface mesh cache so that only the modified parts are recalculated - Display, meshing, bounding boxes on the modified SubD are now available
Parameter: src (SubD)
Parameter Summary: The SubD from which to copy cached evaluations

Method: Rhino.Geometry.SubD.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: Deletes the underlying native pointer during a Dispose call or GC collection

Method: Rhino.Geometry.SubD.DuplicateEdgeCurves()
Return: Curve[]
Modifiers: public
Summary: Gets Nurbs form of all edges in this SubD, with clamped knots. NB: Does not update the SubD evaluation cache before getting the edges.

Method: Rhino.Geometry.SubD.DuplicateEdgeCurves(bool boundaryOnly, bool interiorOnly, bool smoothOnly, bool sharpOnly, bool creaseOnly, bool clampEnds)
Return: Curve[]
Modifiers: public
Summary: Gets Nurbs form of edges in this SubD. NB: Does not update the SubD evaluation cache before getting the edges.
Parameter: boundaryOnly (bool)
Parameter Summary: If true, then only the boundary edges are duplicated. If false, then all edges are duplicated. If both boundaryOnly and interiorOnly are true, an empty array is returned.
Parameter: interiorOnly (bool)
Parameter Summary: If true, then only the interior edges are duplicated. If false, then all edges are duplicated. Note: interior edges with faces of different orientations are also returned. If both boundaryOnly and interiorOnly are true, an empty array is returned.
Parameter: smoothOnly (bool)
Parameter Summary: If true, then only the smooth (and not sharp) edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: sharpOnly (bool)
Parameter Summary: If true, then only the sharp edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: creaseOnly (bool)
Parameter Summary: If true, then only the creased edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: clampEnds (bool)
Parameter Summary: If true, the end knots are clamped. Otherwise the end knots are(-2,-1,0,...., k1, k1+1, k1+2).

Method: Rhino.Geometry.SubD.Flip()
Return: bool
Modifiers: public
Summary: Reverses the orientation of all SubD normals.

Method: Rhino.Geometry.SubD.InterpolateSurfacePoints(Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Modifies the SubD so that the SubD vertex limit surface points are equal to surface_points[]
Parameter: surfacePoints (Point3d[])
Parameter Summary: Points for limit surface to interpolate. surface_points[i] is the location for the i-th vertex returned by SubVertexIterator vit(this)

Method: Rhino.Geometry.SubD.InterpolateSurfacePoints(uint vertexIndices, Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Modifies the SubD so that the SubD vertex limit surface points of the listed vertices are equal to surface_points[].
Parameter: vertexIndices (uint)
Parameter Summary: Ids of the vertices to interpolate. Other vertices remain fixed.
Parameter: surfacePoints (Point3d[])
Parameter Summary: Points for limit surface to interpolate. surface_points[i] is the location for the vertex returned by this.Vertices.Find(vertexIndices[i]).

Method: Rhino.Geometry.SubD.MergeAllCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.SubD.MergeAllCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.SubD.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Destroy cache handle

Method: Rhino.Geometry.SubD.Offset(double distance, bool solidify)
Return: SubD
Modifiers: public
Summary: Makes a new SubD with vertices offset at distance in the direction of the control net vertex normals. Optionally, based on the value of solidify, adds the input SubD and a ribbon of faces along any naked edges.
Parameter: distance (double)
Parameter Summary: The distance to offset.
Parameter: solidify (bool)
Parameter Summary: True if the output SubD should be turned into a closed SubD.

Method: Rhino.Geometry.SubD.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Called when this object switches from being considered "owned by the document" to being an independent instance.

Method: Rhino.Geometry.SubD.PackFaces()
Return: uint
Modifiers: public
Summary: Resets the SubD to the default face packing if adding creases or deleting faces breaks the quad grids. It does not change the topology or geometry of the SubD. SubD face packs always stop at creases.

Method: Rhino.Geometry.SubD.SetVertexSurfacePoint(uint vertexIndex, Point3d surfacePoint)
Return: bool
Modifiers: public
Summary: Set the location of a single vertex surface point. This function is not suitable for setting the locations of multiple vertex surface points that are topologically near to each other.
Parameter: vertexIndex (uint)
Parameter Summary: Index of the vertex to modify
Parameter: surfacePoint (Point3d)
Parameter Summary: New surface point location for that vertex

Method: Rhino.Geometry.SubD.Subdivide()
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.

Method: Rhino.Geometry.SubD.Subdivide(IEnumerable<int> faceIndices)
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: Indices of the faces to subdivide.

Method: Rhino.Geometry.SubD.Subdivide(int count)
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
Parameter: count (int)
Parameter Summary: Number of times to subdivide (must be greater than 0)

Method: Rhino.Geometry.SubD.SurfaceMeshCacheExists(bool bTextureCoordinatesExist, bool bCurvaturesExist, bool bColorsExist)
Return: bool
Modifiers: public
Summary: Checks that a surface mesh evaluation cache exists, and that it has the required options. This cache is used by - <b>SubDVertex.SurfacePoint()</b> , - <b>SubDEdge.ToNurbsCurve(bool)</b> , and - <b>Mesh.CreateFromSubD(SubD, int)</b> .
Parameter: bTextureCoordinatesExist (bool)
Parameter Summary: If True, the cache must contain texture coordinates information.
Parameter: bCurvaturesExist (bool)
Parameter Summary: If True, the cache must contain curvature information.
Parameter: bColorsExist (bool)
Parameter Summary: If True, the cache must contain color information.

Method: Rhino.Geometry.SubD.ToBrep()
Return: Brep
Modifiers: public
Summary: Create a Brep based on this SubD geometry, based on SubDToBrepOptions.Default options.

Method: Rhino.Geometry.SubD.ToBrep(SubDToBrepOptions options)
Return: Brep
Modifiers: public
Summary: Create a Brep based on this SubD geometry.
Parameter: options (SubDToBrepOptions)
Parameter Summary: The SubD to Brep conversion options. Use SubDToBrepOptions.Default for sensible defaults. Currently, these return unpacked faces and locally-G1 vertices in the output Brep.

Method: Rhino.Geometry.SubD.TransformComponents(IEnumerable<ComponentIndex> components, Transform xform, SubDComponentLocation componentLocation)
Return: uint
Modifiers: public
Summary: Transforms an enumerable of SubD components.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: The SubD components to transform.
Parameter: xform (Transform)
Parameter Summary: The transformation to apply.
Parameter: componentLocation (SubDComponentLocation)
Parameter Summary: Select between applying the transform to the control net (faster) or the surface points (slower).

Method: Rhino.Geometry.SubD.UpdateAllTagsAndSectorCoefficients()
Return: uint
Modifiers: public
Summary: Updates vertex tag, edge tag, and edge coefficient values on the active level. After completing custom editing operations that modify the topology of the SubD control net or changing values of vertex or edge tags, the tag and sector coefficients information on nearby components in the edited areas need to be updated.

Method: Rhino.Geometry.SubD.UpdateSurfaceMeshCache(bool lazyUpdate)
Return: uint
Modifiers: public
Summary: Updates limit surface information returned by - <b>SubDVertex.SurfacePoint()</b> , - <b>SubDEdge.ToNurbsCurve(bool)</b> , and - <b>Mesh.CreateFromSubD(SubD, int)</b> . The density of the mesh cache is <b>SubDDisplayParameters.Default</b> .
Parameter: lazyUpdate (bool)
Parameter Summary: If false, all information is updated. If true, only missing information is updated. If a relatively small subset of a SubD has been modified and care was taken to mark cached subdivision information as stale, then passing True can substantially improve performance.

Class: Rhino.Geometry.SubDComponent
Summary: A part of SubD geometry. Common base class for vertices, faces, and edges

Property: Rhino.Geometry.SubDComponent.Id
Return: uint
Modifiers: public
Summary: Unique id within the parent SubD for this item
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsDamaged
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is damaged.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsDeleted
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is deleted.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsHidden
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is hidden.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsHighlighted
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is highlighted.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsLocked
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is locked.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsSelected
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is selected.
Accessors: get

Property: Rhino.Geometry.SubDComponent.ParentSubD
Return: SubD
Modifiers: public
Summary: SubD that this component belongs to
Accessors: get

Class: Rhino.Geometry.SubDCreationOptions
Summary: Options used for creating a SubD

Constructor: Rhino.Geometry.SubDCreationOptions.SubDCreationOptions()
Summary: Create default options

Property: Rhino.Geometry.SubDCreationOptions.ConvexAndConcaveCornersAndInteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Look for convex corners at sub-D vertices with 2 edges or fewer that have an included angle ≤ 120 degrees. Look for concave corners at sub-D vertices with 3 edges or more that have an included angle ≥ 240 degrees.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.ConvexCornersAndInteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Look for convex corners at sub-D vertices with 2 edges or fewer that have an included angle ≤ 120 degrees.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.InteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Create an interior sub-D crease along all input mesh double edges
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.Smooth
Return: SubDCreationOptions
Modifiers: public, static
Summary: No interior creases and no corners.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.ConcaveCornerTest
Return: ConcaveCornerOption
Modifiers: public
Summary: Get or sets the concave corner test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.ConvexCornerTest
Return: ConvexCornerOption
Modifiers: public
Summary: Get or sets the convex corner test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.InteriorCreaseTest
Return: InteriorCreaseOption
Modifiers: public
Summary: Get or sets the interior crease test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.InterpolateMeshVertices
Return: bool
Modifiers: public
Summary: If false, input mesh vertex locations will be used to set SubD vertex control net locations. If true, input mesh vertex locations will be used to set SubD vertex limit surface locations.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerAngleRadians
Return: double
Modifiers: public
Summary: If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is <= MaximumConvexCornerEdgeCount edges and the corner angle is <= MaximumConvexCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerEdgeCount
Return: uint
Modifiers: public
Summary: If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is <= MaximumConvexCornerEdgeCount edges and the corner angle is <= MaximumConvexCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerAngleRadians
Return: double
Modifiers: public
Summary: If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is >= MinimumConcaveCornerEdgeCount edges and the corner angle is >= MinimumConcaveCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerEdgeCount
Return: uint
Modifiers: public
Summary: If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is >= MinimumConcaveCornerEdgeCount edges and the corner angle is >= MinimumConcaveCornerAngleRadians.
Accessors: get set

Method: Rhino.Geometry.SubDCreationOptions.Dispose()
Return: void
Modifiers: public
Summary: Delete unmanaged pointer for this

Class: Rhino.Geometry.SubDDisplayParameters
Summary: A collection of parameters that are passed to functions that calculate a various representations of SubD objects.

Constructor: Rhino.Geometry.SubDDisplayParameters.SubDDisplayParameters()
Summary: Initializes a new instance with default values.

Constructor: Rhino.Geometry.SubDDisplayParameters.SubDDisplayParameters(SerializationInfo info, StreamingContext context)
Summary: Called by BinaryFormatter.Deserialize to create a new MeshParamaters object.

Property: Rhino.Geometry.SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum
Return: uint
Modifiers: public, static
Summary: When the SubD display density is adaptive (default), AdaptiveMeshQuadMaximum specifies the approximate number of display mesh quads to permit before reducing the SubD display mesh density.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAbsolute
Return: bool
Modifiers: public
Summary: True if the SubD display density setting is absolute.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAdaptive
Return: bool
Modifiers: public
Summary: True if the SubD display density setting is adaptive and approximate display mesh quad count is capped at SubDDisplayParameters::AdaptiveDisplayMeshQuadMaximum.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.MeshLocation
Return: SubDComponentLocation
Modifiers: public
Summary: The MeshLocation property determines if the mesh is on the SubD's control net or the SubD's surface.
Accessors: get set

Method: Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubD(uint adaptiveSubDDisplayDensity, SubD subd)
Return: uint
Modifiers: public, static
Summary: Gets absolute SubD display density for subd.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
Parameter: subd (SubD)
Parameter Summary: In the cases when the SubD in question is not available, like user interface code that applies in general and to unknown SubDs, pass SubD.Empty.

Method: Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubDFaceCount(uint adaptiveSubDDisplayDensity, uint subDFaceCount)
Return: uint
Modifiers: public, static
Summary: Gets the absolute SubD display density for SubD with subdFaceCount faces.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
Parameter: subDFaceCount (uint)
Parameter Summary: Number of SubD faces.

Method: Rhino.Geometry.SubDDisplayParameters.ClampDisplayDensity(uint displayDensity)
Return: uint
Modifiers: public, static
Summary: Limits display density to a value useful in user interface code.

Method: Rhino.Geometry.SubDDisplayParameters.Coarse()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a course limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.CoarseDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromAbsoluteDisplayDensity(uint absoluteSubDDisplayDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Use of absolute display density is strongly discouraged. SubDs can have a single face or millions of faces. Adaptive display meshing produces more desirable results in almost all cases.
Parameter: absoluteSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromDisplayDensity(uint adaptiveSubDDisplayDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: In most applications, the caller sets the mesh density and leaves the other parameters set to the default values.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity. Values < SubDDisplayParameters.Density.MinimumAdaptiveDensity are treated as SubDDisplayParameters.Density.MinimumAdaptiveDensity. All other invalid input values are treated as SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromMeshDensity(double normalizedMeshDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: This function creates SubDDisplayParameters from a user interface "slider" like Rhino's simple mesh controls.
Parameter: normalizedMeshDensity (double)
Parameter Summary: A double between 0.0 and 1.0.

Method: Rhino.Geometry.SubDDisplayParameters.Default()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for the default limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.Empty()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Get an empty SubDDisplayParameters.

Method: Rhino.Geometry.SubDDisplayParameters.ExtraCoarse()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for an extra course limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.ExtraCoarseDensity.

Method: Rhino.Geometry.SubDDisplayParameters.ExtraFine()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for an extra fine limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.ExtraFineDensity.

Method: Rhino.Geometry.SubDDisplayParameters.Fine()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a fine limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.FineDensity.

Method: Rhino.Geometry.SubDDisplayParameters.FromEncodedString(string value)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Converts encoded serialized string into a MeshingParameters
Parameter: value (string)
Parameter Summary: Encoded string returned by MeshingParameters.ToString()

Method: Rhino.Geometry.SubDDisplayParameters.Medium()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a medium limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.MediumDensity.

Method: Rhino.Geometry.SubDDisplayParameters.DisplayDensity(SubD subd)
Return: uint
Modifiers: public
Summary: Gets the absolute display density to use when creating display meshes for SubD. When adaptive reduction is enabled, subd.Faces.Count is used to determine the appropriate display density.
Parameter: subd (SubD)
Parameter Summary: The SubD object.

Method: Rhino.Geometry.SubDDisplayParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDDisplayParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SubDDisplayParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public

Method: Rhino.Geometry.SubDDisplayParameters.SetAbsoluteDisplayDensity(uint absoluteDisplayDensity)
Return: void
Modifiers: public
Summary: In almast all cases, you are better off using SetAdaptiveDisplayDensity().
Parameter: absoluteDisplayDensity (uint)
Parameter Summary: absoluteDisplayDensity <= SubDDisplayParameters.Density.MaximumDensity.

Method: Rhino.Geometry.SubDDisplayParameters.SetAdaptiveDisplayDensity(uint adaptiveDisplayDensity)
Return: void
Modifiers: public
Summary: Set an adaptive SubD display density that caps display mesh quad count at SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum.
Parameter: adaptiveDisplayDensity (uint)
Parameter Summary: adaptiveDisplayDensity <= SubDDisplayParameters.Density.MaximumDensity. Values <= SubDDisplayParameters.Density.MinimumAdaptiveDensity will never be adaptively reduced during display mesh creation.

Method: Rhino.Geometry.SubDDisplayParameters.ToEncodedString()
Return: string
Modifiers: public
Summary: Returns a encoded string that represents the MeshingParameters.

Class: Rhino.Geometry.SubDEdge
Summary: Single edge of a SubD

Property: Rhino.Geometry.SubDEdge.ControlNetLine
Return: Line
Modifiers: public
Summary: Line representing the control net end points.
Accessors: get

Property: Rhino.Geometry.SubDEdge.FaceCount
Return: int
Modifiers: public
Summary: Number of faces for this edge.
Accessors: get

Property: Rhino.Geometry.SubDEdge.Tag
Return: SubDEdgeTag
Modifiers: public
Summary: identifies the type of subdivision edge.
Accessors: get set

Property: Rhino.Geometry.SubDEdge.VertexFrom
Return: SubDVertex
Modifiers: public
Summary: Start vertex for this edge.
Accessors: get

Property: Rhino.Geometry.SubDEdge.VertexTo
Return: SubDVertex
Modifiers: public
Summary: End vertex for this edge.
Accessors: get

Method: Rhino.Geometry.SubDEdge.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of this edge.

Method: Rhino.Geometry.SubDEdge.FaceAt(int index)
Return: SubDFace
Modifiers: public
Summary: Retrieve a SubDFace from this edge.

Method: Rhino.Geometry.SubDEdge.ToNurbsCurve(bool clampEnds)
Return: NurbsCurve
Modifiers: public
Summary: Get a cubic, uniform, non-rational, NURBS curve that is on the edge's limit curve.
Parameter: clampEnds (bool)
Parameter Summary: If true, the end knots are clamped. Otherwise the end knots are(-2,-1,0,...., k1, k1+1, k1+2).

Class: Rhino.Geometry.SubDFace
Summary: Single face of a SubD

Property: Rhino.Geometry.SubDFace.ControlNetCenterFrame
Return: Plane
Modifiers: public
Summary: The face's control net center frame is a plane with normal equal to ControlNetCenterNormal and origin equal to ControlNetCenterPoint. The x and y axes of the frame have no predictable relationship to the face or SubD control net topology.
Accessors: get

Property: Rhino.Geometry.SubDFace.ControlNetCenterNormal
Return: Vector3d
Modifiers: public
Summary: When the face's control net polygon is planar, the face's control net normal is a unit vector perpendicular to the plane that points outwards. If the control net polygon is not planar, the control net normal is control net normal is a unit vector that is the average of the control polygon's corner normals.
Accessors: get

Property: Rhino.Geometry.SubDFace.ControlNetCenterPoint
Return: Point3d
Modifiers: public
Summary: The face's control net center point is the average of the face's vertex control net points. This is the same point as the face's subdivision point.
Accessors: get

Property: Rhino.Geometry.SubDFace.EdgeCount
Return: int
Modifiers: public
Summary: Number of edges for this face. Note that EdgeCount is always the same as VertexCount. Two properties are provided simply for clarity.
Accessors: get

Property: Rhino.Geometry.SubDFace.LimitSurfaceCenterPoint
Return: Point3d
Modifiers: public
Summary: Get the limit surface point location at the center of the face
Accessors: get

Property: Rhino.Geometry.SubDFace.PerFaceColor
Return: Color
Modifiers: public
Summary: If per-face color is "Empty", then this face does not have a custom color
Accessors: get set

Property: Rhino.Geometry.SubDFace.SurfaceCenterFrame
Return: Plane
Modifiers: public
Summary: Get the limit surface tangent plane at the center of the face. The plane's origin is the point on the limit surface at the center of the face. The plane's z axis is the limit surface normal vector at the center of the face.
Accessors: get

Property: Rhino.Geometry.SubDFace.SurfaceCenterNormal
Return: Vector3d
Modifiers: public
Summary: Get the limit surface normal vector at the center of the face.
Accessors: get

Property: Rhino.Geometry.SubDFace.VertexCount
Return: int
Modifiers: public
Summary: Number of vertices for this face. Note that EdgeCount is always the same as VertexCount. Two properties are provided simply for clarity.
Accessors: get

Method: Rhino.Geometry.SubDFace.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of this face.

Method: Rhino.Geometry.SubDFace.EdgeAt(int index)
Return: SubDEdge
Modifiers: public
Summary: Get an edge at a given index

Method: Rhino.Geometry.SubDFace.EdgeDirectionMatchesFaceOrientation(int index)
Return: bool
Modifiers: public
Summary: Check if a given edge in this face has the same direction as the face orientation

Method: Rhino.Geometry.SubDFace.VertexAt(int index)
Return: SubDVertex
Modifiers: public
Summary: Get a vertex that this face uses by index

Class: Rhino.Geometry.SubDSurfaceInterpolator
Summary: Interpolate some or all of the vertices limit surface positions in a SubD to specified locations. NB: It is recommended not to use these methods to interpolate more than 1000 vertices. <b>SubD.SetVertexSurfacePoint(uint, Point3d)</b> <b>SubD.InterpolateSurfacePoints(Point3d[])</b> <b>SubD.InterpolateSurfacePoints(uint[], Point3d[])</b> <b>SubDVertex.SurfacePoint()</b>

Constructor: Rhino.Geometry.SubDSurfaceInterpolator.SubDSurfaceInterpolator()
Summary: Initialize an empty SubDSurfaceInterpolator.

Property: Rhino.Geometry.SubDSurfaceInterpolator.MaximumRecommendedInterpolatedVertexCount
Return: uint
Modifiers: public, static
Summary: Interpolation requires building a solver. We estimate that this solver will work in reasonnable time if the number of interplolated vertices is smaller than MaximumInterpolatedVertexCount. However, given sufficient time, memory, and CPU resources, the code will work with any value. In version 8.0, this value is 1000.
Accessors: get

Property: Rhino.Geometry.SubDSurfaceInterpolator.ContextId
Return: Guid
Modifiers: public
Summary: The context assigned id. This id is provided for applications using ON_SubDSurfaceInterpolator. It is not inspected or used in any part of the interpolation setup or calculations.
Accessors: get set

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromMarkedVertices(SubD subd, bool interpolatedVerticesMark, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the marked vertices (unmarked if interpolatedVerticesMark is false) in the SubD are free vertices in the linear system used for interpolation, and the unmarked (marked if interpolatedVerticesMark is false) are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: interpolatedVerticesMark (bool)
Parameter Summary: If True, marked vertices will be considered free, and unmarked vertices will be fixed.
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSelectedVertices(SubD subd, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the selected vertices in the SubD are free vertices in the linear system used for interpolation, and the unselected are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSubD(SubD subd, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the vertices in the SubD are free vertices in the linear system used for interpolation (i.e. can move as a result of the interpolation, and can receive an interpolation target location).
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromVertexIdList(SubD subd, IEnumerable<uint> vertexIndices, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the listed vertices in the SubD are free vertices in the linear system used for interpolation, and the unselected are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: vertexIndices (IEnumerable<uint>)
Parameter Summary: Indices of the vertices to be interpolated
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.Clear()
Return: void
Modifiers: public
Summary: Destroys the information needed to solve the interpolation.

Method: Rhino.Geometry.SubDSurfaceInterpolator.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDSurfaceInterpolator.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SubDSurfaceInterpolator.FixedVertexCount()
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexCount()
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexIndex(uint vertexId)
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(SubDVertex vertex)
Return: bool
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(uint vertexId)
Return: bool
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.Solve(Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Solve the interpolation system, given target interpolation locations for the free vertices in the system. Updates the subd referenced by this system so the corresponding surface points are at the locations given by surfacePoints.
Parameter: surfacePoints (Point3d[])
Parameter Summary: The limit surface locations for the interpolated vertices. The number of desired locations needs to match the <b>InterpolatedVertexCount()</b> .

Method: Rhino.Geometry.SubDSurfaceInterpolator.Transform(Transform transform)
Return: void
Modifiers: public
Summary: Apply an arbitrary transformation to the target interpolation points.
Parameter: transform (Transform)
Parameter Summary: The transformation to apply.

Method: Rhino.Geometry.SubDSurfaceInterpolator.VertexIdList()
Return: uint
Modifiers: public

Class: Rhino.Geometry.SubDToBrepOptions
Summary: Options used for converting a SubD to a Brep

Constructor: Rhino.Geometry.SubDToBrepOptions.SubDToBrepOptions()
Summary: Create default options

Constructor: Rhino.Geometry.SubDToBrepOptions.SubDToBrepOptions(bool packFaces, ExtraordinaryVertexProcessOption vertexProcess)
Summary: Create options from the given packFaces and vertexProcess values.

Property: Rhino.Geometry.SubDToBrepOptions.Default
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default SubDToBrepOptions settings. Currently selects the same options as DefaultUnpacked: Locally-G1 smoothing of extraordinary vertices, unpacked faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.DefaultPacked
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default ON_SubDToBrepParameters settings for creating a packed brep. Locally-G1 smoothing of extraordinary vertices, packed faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.DefaultUnpacked
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default ON_SubDToBrepParameters settings for creating an unpacked brep. Locally-G1 smoothing of extraordinary vertices, unpacked faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcess
Return: ExtraordinaryVertexProcessOption
Modifiers: public
Summary: Get or sets the extraordinary vertex process option.
Accessors: get set

Property: Rhino.Geometry.SubDToBrepOptions.PackFaces
Return: bool
Modifiers: public
Summary: Get or sets the pack faces option.
Accessors: get set

Method: Rhino.Geometry.SubDToBrepOptions.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDToBrepOptions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Class: Rhino.Geometry.SubDVertex
Summary: Single vertex of a SubD

Property: Rhino.Geometry.SubDVertex.ControlNetPoint
Return: Point3d
Modifiers: public
Summary: Location of the "control net" point that this SubDVertex represents
Accessors: get set

Property: Rhino.Geometry.SubDVertex.EdgeCount
Return: int
Modifiers: public
Summary: Number of edges for this vertex
Accessors: get

Property: Rhino.Geometry.SubDVertex.Edges
Return: IEnumerable<SubDEdge>
Modifiers: public
Summary: All edges that this vertex is part of
Accessors: get

Property: Rhino.Geometry.SubDVertex.FaceCount
Return: int
Modifiers: public
Summary: Number of faces for this vertex
Accessors: get

Property: Rhino.Geometry.SubDVertex.Next
Return: SubDVertex
Modifiers: public
Summary: Next vertex in linked list of vertices on this level
Accessors: get

Property: Rhino.Geometry.SubDVertex.Previous
Return: SubDVertex
Modifiers: public
Summary: Previous vertex in linked list of vertices on this level
Accessors: get

Property: Rhino.Geometry.SubDVertex.Tag
Return: SubDVertexTag
Modifiers: public
Summary: identifies the type of subdivision vertex
Accessors: get set

Method: Rhino.Geometry.SubDVertex.EdgeAt(int index)
Return: SubDEdge
Modifiers: public
Summary: Retrieve a SubDEdge from this vertex

Method: Rhino.Geometry.SubDVertex.FaceAt(int index)
Return: SubDFace
Modifiers: public
Summary: Retrieve a SubDFace from this vertex

Method: Rhino.Geometry.SubDVertex.SetControlNetPoint(Point3d position, bool bClearNeighborhoodCache)
Return: bool
Modifiers: public
Summary: Change the location of the "control net" point that this SubDVertex represents
Parameter: position (Point3d)
Parameter Summary: New position for the vertex' control net point.
Parameter: bClearNeighborhoodCache (bool)
Parameter Summary: If true, clear the evaluation cache in the faces around the modified vertex.

Method: Rhino.Geometry.SubDVertex.SurfacePoint()
Return: Point3d
Modifiers: public
Summary: The SubD surface point

Class: Rhino.Geometry.SumSurface
Summary: Represents a sum surface, or an extrusion of a curve along a curved path.

Constructor: Rhino.Geometry.SumSurface.SumSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Method: Rhino.Geometry.SumSurface.Create(Curve curveA, Curve curveB)
Return: SumSurface
Modifiers: public, static
Summary: Constructs a new sum surface by extruding a curve A along a path B.
Parameter: curveA (Curve)
Parameter Summary: The curve used as extrusion profile.
Parameter: curveB (Curve)
Parameter Summary: The curve used as path.

Method: Rhino.Geometry.SumSurface.Create(Curve curve, Vector3d extrusionDirection)
Return: SumSurface
Modifiers: public, static
Summary: Constructs a new sum surface by extruding a curve in a specified direction.
Parameter: curve (Curve)
Parameter Summary: The curve used as extrusion profile.
Parameter: extrusionDirection (Vector3d)
Parameter Summary: The extrusion vector (must be non-zero).

Class: Rhino.Geometry.Surface
Summary: Represents a base class that is common to most RhinoCommon surface types.
A surface represents an entity that can be all visited by providing two independent parameters, usually called (u, v), or sometimes (s, t).

Constructor: Rhino.Geometry.Surface.Surface()
Summary: Protected constructor for internal use.

Constructor: Rhino.Geometry.Surface.Surface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Surface.IsSolid
Return: bool
Modifiers: public, virtual
Summary: Gets a values indicating whether a surface is solid.
Accessors: get

Property: Rhino.Geometry.Surface.IsSubDFriendly
Return: bool
Modifiers: public
Summary: Returns True if the surface is a non-rational, uniform, natural or periodic, cubic NURBS surface. Otherwise, False is returned.
Accessors: get

Method: Rhino.Geometry.Surface.CreateExtrusion(Curve profile, Vector3d direction)
Return: Surface
Modifiers: public, static
Summary: Constructs a surface by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.

Method: Rhino.Geometry.Surface.CreateExtrusionToPoint(Curve profile, Point3d apexPoint)
Return: Surface
Modifiers: public, static
Summary: Constructs a surface by extruding a curve to a point.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: apexPoint (Point3d)
Parameter Summary: Apex point of extrusion.

Method: Rhino.Geometry.Surface.CreatePeriodicSurface(Surface surface, int direction, bool bSmooth)
Return: Surface
Modifiers: public, static
Summary: Constructs a periodic surface from a base surface and a direction.
Parameter: surface (Surface)
Parameter Summary: The surface to make periodic.
Parameter: direction (int)
Parameter Summary: The direction to make periodic, either 0 = U, or 1 = V.
Parameter: bSmooth (bool)
Parameter Summary: Controls kink removal. If true, smooths any kinks in the surface and moves control points to make a smooth surface. If false, control point locations are not changed or changed minimally (only one point may move) and only the knot vector is altered.

Method: Rhino.Geometry.Surface.CreatePeriodicSurface(Surface surface, int direction)
Return: Surface
Modifiers: public, static
Summary: Constructs a periodic surface from a base surface and a direction.
Parameter: surface (Surface)
Parameter Summary: The surface to make periodic.
Parameter: direction (int)
Parameter Summary: The direction to make periodic, either 0 = U, or 1 = V.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, bool flipA, Surface surfaceB, bool flipB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: flipA (bool)
Parameter Summary: A value that indicates whether A should be used in flipped mode.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: flipB (bool)
Parameter Summary: A value that indicates whether B should be used in flipped mode.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, Point2d uvA, Surface surfaceB, Point2d uvB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: uvA (Point2d)
Parameter Summary: A point in the parameter space of FaceA near where the fillet is expected to hit the surface.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: uvB (Point2d)
Parameter Summary: A point in the parameter space of FaceB near where the fillet is expected to hit the surface.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value used for approximating and intersecting offset surfaces.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, Surface surfaceB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.CreateSoftEditSurface(Surface surface, Point2d uv, Vector3d delta, double uLength, double vLength, double tolerance, bool fixEnds)
Return: Surface
Modifiers: public, static
Summary: Creates a soft edited surface from an existing surface using a smooth field of influence.
Parameter: surface (Surface)
Parameter Summary: The surface to soft edit.
Parameter: uv (Point2d)
Parameter Summary: A point in the parameter space to move from. This location on the surface is moved, and the move is smoothly tapered off with increasing distance along the surface from this parameter.
Parameter: delta (Vector3d)
Parameter Summary: The direction and magnitude, or maximum distance, of the move.
Parameter: uLength (double)
Parameter Summary: The distance along the surface's u-direction from the editing point over which the strength of the editing falls off smoothly.
Parameter: vLength (double)
Parameter Summary: The distance along the surface's v-direction from the editing point over which the strength of the editing falls off smoothly.
Parameter: tolerance (double)
Parameter Summary: The active document's model absolute tolerance.
Parameter: fixEnds (bool)
Parameter Summary: Keeps edge locations fixed.

Method: Rhino.Geometry.Surface.CreateTweenSurfacesWithSampling(Surface surface0, Surface surface1, int numSurfaces, int numSamples, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Create tween surfaces that gradually transition between two bounding surfaces using point sampling.
Parameter: surface0 (Surface)
Parameter Summary: The first, or starting, surface.
Parameter: surface1 (Surface)
Parameter Summary: The second, or ending, curve.
Parameter: numSurfaces (int)
Parameter Summary: Number of tween surfaces to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input surfaces.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Surface.ClosestPoint(Point3d testPoint, out double u, out double v)
Return: bool
Modifiers: public
Summary: Input the parameters of the point on the surface that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: u (double)
Parameter Summary: U parameter of the surface that is closest to testPoint.
Parameter: v (double)
Parameter Summary: V parameter of the surface that is closest to testPoint.

Method: Rhino.Geometry.Surface.ClosestSide(double u, double v)
Return: IsoStatus
Modifiers: public
Summary: Gets the side that is closest, in terms of 3D-distance, to a U and V parameter.
Parameter: u (double)
Parameter Summary: A u parameter.
Parameter: v (double)
Parameter Summary: A v parameter.

Method: Rhino.Geometry.Surface.CurvatureAt(double u, double v)
Return: SurfaceCurvature
Modifiers: public
Summary: Computes the curvature at the given UV coordinate.
Parameter: u (double)
Parameter Summary: U parameter for evaluation.
Parameter: v (double)
Parameter Summary: V parameter for evaluation.

Method: Rhino.Geometry.Surface.Degree(int direction)
Return: int
Modifiers: public
Summary: Returns the maximum algebraic degree of any span (or a good estimate if curve spans are not algebraic).
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.Domain(int direction)
Return: Interval
Modifiers: public
Summary: Gets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter, 1 gets second parameter.

Method: Rhino.Geometry.Surface.Evaluate(double u, double v, int numberDerivatives, out Point3d point, out Vector3d[] derivatives)
Return: bool
Modifiers: public
Summary: Evaluates a surface mathematically.
Parameter: u (double)
Parameter Summary: A U parameter.
Parameter: v (double)
Parameter Summary: A V parameter.
Parameter: numberDerivatives (int)
Parameter Summary: The number of derivatives.
Parameter: point (Point3d)
Parameter Summary: A point. This out parameter will be assigned during this call.
Parameter: derivatives (Vector3d[])
Parameter Summary: A vector array. This out parameter will be assigned during this call. This can be null.

Method: Rhino.Geometry.Surface.Extend(int direction, Interval interval)
Return: bool
Modifiers: public
Summary: Analytically extends the surface to include the interval.
Parameter: direction (int)
Parameter Summary: If 0, Surface.Domain(0) will include the interval. (the first surface parameter). If 1, Surface.Domain(1) will include the interval. (the second surface parameter).
Parameter: interval (Interval)
Parameter Summary: If the interval is not included in surface domain, the surface will be extended so that its domain includes the interval. Note, this method will fail if the surface is closed in the specified direction.

Method: Rhino.Geometry.Surface.Extend(IsoStatus edge, double extensionLength, bool smooth)
Return: Surface
Modifiers: public
Summary: Extends an untrimmed surface along one edge.
Parameter: edge (IsoStatus)
Parameter Summary: Edge to extend. Must be North, South, East, or West.
Parameter: extensionLength (double)
Parameter Summary: distance to extend.
Parameter: smooth (bool)
Parameter Summary: True for smooth (C-infinity) extension. False for a C1- ruled extension.

Method: Rhino.Geometry.Surface.Fit(int uDegree, int vDegree, double fitTolerance)
Return: Surface
Modifiers: public
Summary: Fits a new surface through an existing surface.
Parameter: uDegree (int)
Parameter Summary: the output surface U degree. Must be bigger than 1.
Parameter: vDegree (int)
Parameter Summary: the output surface V degree. Must be bigger than 1.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance.

Method: Rhino.Geometry.Surface.FitCurveToSurface(Curve trimCurve3d, Vector3d trimProjectionDir, double tolerance, IEnumerable<double> Knots, bool divideIntoSections, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: Curve[]
Modifiers: public
Parameter: trimCurve3d (Curve)
Parameter Summary: curve that will trim from one edge to the opposite
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: Knots (IEnumerable<double>)
Parameter Summary: For TrimParamKnots=3, the custom knots to add
Parameter: divideIntoSections (bool)
Parameter Summary: If true, the surface is divided at each knot
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.FrameAt(double u, double v, out Plane frame)
Return: bool
Modifiers: public
Summary: Computes the orient plane on a surface given a U and V parameter.
This is the simple evaluation call with no error handling. | Parameter: u (double) | Parameter Summary: A first parameter. | Parameter: v (double) | Parameter Summary: A second parameter. | Parameter: frame (Plane) | Parameter Summary: A frame plane that will be computed during this call.

Method: Rhino.Geometry.Surface.GetNextDiscontinuity(int direction, Continuity continuityType, double t0, double t1, double cosAngleTolerance, double curvatureTolerance, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: direction (int)
Parameter Summary: If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
Parameter: continuityType (Continuity)
Parameter Summary: The desired continuity.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: cosAngleTolerance (double)
Parameter Summary: default = cos(1 degree) Used only when continuityType is G1_continuous or G2_continuous. If the cosine of the angle between two tangent vectors is <= cos_angle_tolerance, then a G1 discontinuity is reported.
Parameter: curvatureTolerance (double)
Parameter Summary: (default = ON_SQRT_EPSILON) Used only when continuityType is G2_continuous. If K0 and K1 are curvatures evaluated from above and below and |K0 - K1| > curvature_tolerance, then a curvature discontinuity is reported.
Parameter: t (double)
Parameter Summary: if a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Surface.GetNextDiscontinuity(int direction, Continuity continuityType, double t0, double t1, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: direction (int)
Parameter Summary: If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
Parameter: continuityType (Continuity)
Parameter Summary: The desired continuity.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: t (double)
Parameter Summary: if a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Surface.GetNurbsFormParameterFromSurfaceParameter(double surfaceS, double surfaceT, out double nurbsS, out double nurbsT)
Return: bool
Modifiers: public
Summary: Translates a parameter from the current surface to the parameter space of the surface returned by <b>ToNurbsSurface()</b> .
Parameter: surfaceS (double)
Parameter Summary: The parameter in the S, or sometimes U, direction, of this surface.
Parameter: surfaceT (double)
Parameter Summary: The parameter in the T, or sometimes V, direction of this surface.
Parameter: nurbsS (double)
Parameter Summary: S on the NURBS form.
Parameter: nurbsT (double)
Parameter Summary: T on the NURBS form.

Method: Rhino.Geometry.Surface.GetSpanVector(int direction)
Return: double
Modifiers: public
Summary: Gets array of span "knots".
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.GetSurfaceParameterFromNurbsFormParameter(double nurbsS, double nurbsT, out double surfaceS, out double surfaceT)
Return: bool
Modifiers: public
Summary: Translates a parameter from a value on the surface returned by <b>ToNurbsSurface()</b> to the current surface.
Parameter: nurbsS (double)
Parameter Summary: The parameter in the S, or sometimes U, direction of the NURBS form surface.
Parameter: nurbsT (double)
Parameter Summary: The parameter in the T, or sometimes V, direction of the NURBS form surface.
Parameter: surfaceS (double)
Parameter Summary: S on this surface.
Parameter: surfaceT (double)
Parameter Summary: T o n this surface.

Method: Rhino.Geometry.Surface.GetSurfaceSize(out double width, out double height)
Return: bool
Modifiers: public
Summary: Gets an estimate of the size of the rectangle that would be created if the 3d surface where flattened into a rectangle.
Parameter: width (double)
Parameter Summary: corresponds to the first surface parameter.
Parameter: height (double)
Parameter Summary: corresponds to the second surface parameter.

Method: Rhino.Geometry.Surface.HasNurbsForm()
Return: int
Modifiers: public
Summary: Is there a NURBS surface representation of this surface.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurface(IEnumerable<Point3d> points, double tolerance)
Return: NurbsCurve
Modifiers: public
Summary: Constructs an interpolated curve on a surface, using 3D points.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of points.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(IEnumerable<Point2d> points, double tolerance, bool closed, int closedSurfaceHandling)
Return: NurbsCurve
Modifiers: public
Summary: Returns a curve that interpolates points on a surface. The interpolant lies on the surface.
Parameter: points (System.Collections.Generic.IEnumerable<Point2d>)
Parameter Summary: List of at least two UV parameter locations on the surface.
Parameter: tolerance (double)
Parameter Summary: Tolerance used for the fit of the push-up curve. Generally, the resulting interpolating curve will be within tolerance of the surface.
Parameter: closed (bool)
Parameter Summary: If false, the interpolating curve is not closed. If true, the interpolating curve is closed, and the last point and first point should generally not be equal.
Parameter: closedSurfaceHandling (int)
Parameter Summary: If 0, all points must be in the rectangular domain of the surface. If the surface is closed in some direction, then this routine will interpret each point and place it at an appropriate location in the covering space. This is the simplest option and should give good results. If 1, then more options for more control of handling curves going across seams are available. If the surface is closed in some direction, then the points are taken as points in the covering space. Example, if srf.IsClosed(0)=True and srf.IsClosed(1)=False and srf.Domain(0)=srf.Domain(1)=Interval(0,1) then if closedSurfaceHandling=1 a point(u, v) in points can have any value for the u coordinate, but must have 0<=v<=1. In particular, if points = { (0.0,0.5), (2.0,0.5) } then the interpolating curve will wrap around the surface two times in the closed direction before ending at start of the curve. If closed=True the last point should equal the first point plus an integer multiple of the period on a closed direction.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(IEnumerable<Point2d> points, double tolerance)
Return: NurbsCurve
Modifiers: public
Summary: Returns a curve that interpolates points on a surface. The interpolant lies on the surface.
Parameter: points (System.Collections.Generic.IEnumerable<Point2d>)
Parameter Summary: List of at least two UV parameter locations on the surface.
Parameter: tolerance (double)
Parameter Summary: Tolerance used for the fit of the push-up curve. Generally, the resulting interpolating curve will be within tolerance of the surface.

Method: Rhino.Geometry.Surface.IsAtSeam(double u, double v)
Return: int
Modifiers: public
Summary: Tests if a surface parameter value is at a seam.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.

Method: Rhino.Geometry.Surface.IsAtSingularity(double u, double v, bool exact)
Return: bool
Modifiers: public
Summary: Tests if a surface parameter value is at a singularity.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.
Parameter: exact (bool)
Parameter Summary: If true, test if (u,v) is exactly at a singularity. If false, test if close enough to cause numerical problems.

Method: Rhino.Geometry.Surface.IsClosed(int direction)
Return: bool
Modifiers: public
Summary: Gets a value indicating if the surface is closed in a direction.
Parameter: direction (int)
Parameter Summary: 0 = U, 1 = V.

Method: Rhino.Geometry.Surface.IsCone()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cone within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsCone(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cone within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsContinuous(Continuity continuityType, double u, double v)
Return: bool
Modifiers: public
Summary: Tests continuity at a surface parameter value.
Parameter: continuityType (Continuity)
Parameter Summary: The continuity type to sample.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.

Method: Rhino.Geometry.Surface.IsCylinder()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsCylinder(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cylinder within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsIsoparametric(BoundingBox bbox)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2d bounding box is isoparametric in the parameter space of this surface.
Parameter: bbox (BoundingBox)
Parameter Summary: Bounding box to test.

Method: Rhino.Geometry.Surface.IsIsoparametric(Curve curve, Interval curveDomain)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2D curve is isoparametric in the parameter space of this surface.
Parameter: curve (Curve)
Parameter Summary: Curve to test.
Parameter: curveDomain (Interval)
Parameter Summary: Sub domain of the curve.

Method: Rhino.Geometry.Surface.IsIsoparametric(Curve curve)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2d curve is isoparametric in the parameter space of this surface.
Parameter: curve (Curve)
Parameter Summary: Curve to test.

Method: Rhino.Geometry.Surface.IsoCurve(int direction, double constantParameter)
Return: Curve
Modifiers: public
Summary: Gets isoparametric curve.
Parameter: direction (int)
Parameter Summary: 0 first parameter varies and second parameter is constant e.g., point on IsoCurve(0,c) at t is srf(t,c) This is a horizontal line from left to right 1 first parameter is constant and second parameter varies e.g., point on IsoCurve(1,c) at t is srf(c,t This is a vertical line from bottom to top.
Parameter: constantParameter (double)
Parameter Summary: The parameter that was constant on the original surface.

Method: Rhino.Geometry.Surface.IsPeriodic(int direction)
Return: bool
Modifiers: public
Summary: Gets a value indicating if the surface is periodic in a direction (default is false).
Parameter: direction (int)
Parameter Summary: 0 = U, 1 = V.

Method: Rhino.Geometry.Surface.IsPlanar()
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is planar to zero tolerance.

Method: Rhino.Geometry.Surface.IsPlanar(double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is planar to a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsSingular(int side)
Return: bool
Modifiers: public
Summary: True if surface side is collapsed to a point.
Parameter: side (int)
Parameter Summary: side of parameter space to test 0 = south, 1 = east, 2 = north, 3 = west.

Method: Rhino.Geometry.Surface.IsSphere()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a sphere within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsSphere(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a sphere within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsTorus()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a torus within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsTorus(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a torus within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.LocalClosestPoint(Point3d testPoint, double seedU, double seedV, out double u, out double v)
Return: bool
Modifiers: public
Summary: Find parameters of the point on a surface that is locally closest to the testPoint. The search for a local close point starts at seed parameters.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seedU (double)
Parameter Summary: The seed parameter in the U direction.
Parameter: seedV (double)
Parameter Summary: The seed parameter in the V direction.
Parameter: u (double)
Parameter Summary: U parameter of the surface that is closest to testPoint.
Parameter: v (double)
Parameter Summary: V parameter of the surface that is closest to testPoint.

Method: Rhino.Geometry.Surface.NormalAt(double u, double v)
Return: Vector3d
Modifiers: public
Summary: Computes the surface normal at a point.
This is the simple evaluation call - it does not support error handling. | Parameter: u (double) | Parameter Summary: A U parameter. | Parameter: v (double) | Parameter Summary: A V parameter.

Method: Rhino.Geometry.Surface.Offset(double distance, double tolerance)
Return: Surface
Modifiers: public
Summary: Constructs a new surface which is offset from the current surface.
Parameter: distance (double)
Parameter Summary: Distance (along surface normal) to offset.
Parameter: tolerance (double)
Parameter Summary: Offset accuracy.

Method: Rhino.Geometry.Surface.PointAt(double u, double v)
Return: Point3d
Modifiers: public
Summary: Evaluates a point at a given parameter.
Parameter: u (double)
Parameter Summary: evaluation parameters.
Parameter: v (double)
Parameter Summary: evaluation parameters.

Method: Rhino.Geometry.Surface.Pullback(Curve curve3d, double tolerance, Interval curve3dSubdomain)
Return: Curve
Modifiers: public
Summary: Pulls a 3d curve back to the surface's parameter space.
Parameter: curve3d (Curve)
Parameter Summary: A curve.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable 3d distance between from surface(curve_2d(t)) to the locus of points on the surface that are closest to curve_3d.
Parameter: curve3dSubdomain (Interval)
Parameter Summary: A sub-domain of the curve to sample.

Method: Rhino.Geometry.Surface.Pullback(Curve curve3d, double tolerance)
Return: Curve
Modifiers: public
Summary: Pulls a 3d curve back to the surface's parameter space.
Parameter: curve3d (Curve)
Parameter Summary: The curve to pull.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable 3d distance between from surface(curve_2d(t)) to the locus of points on the surface that are closest to curve_3d.

Method: Rhino.Geometry.Surface.Pushup(Curve curve2d, double tolerance, Interval curve2dSubdomain)
Return: Curve
Modifiers: public
Summary: Computes a 3d curve that is the composite of a 2d curve and the surface map.
Parameter: curve2d (Curve)
Parameter Summary: a 2d curve whose image is in the surface's domain.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
Parameter: curve2dSubdomain (Interval)
Parameter Summary: The curve interval (a sub-domain of the original curve) to use.

Method: Rhino.Geometry.Surface.Pushup(Curve curve2d, double tolerance)
Return: Curve
Modifiers: public
Summary: Computes a 3d curve that is the composite of a 2d curve and the surface map.
Parameter: curve2d (Curve)
Parameter Summary: a 2d curve whose image is in the surface's domain.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.

Method: Rhino.Geometry.Surface.Rebuild(int uDegree, int vDegree, int uPointCount, int vPointCount)
Return: NurbsSurface
Modifiers: public
Summary: Rebuilds an existing surface to a given degree and point count.
Parameter: uDegree (int)
Parameter Summary: the output surface u degree.
Parameter: vDegree (int)
Parameter Summary: the output surface u degree.
Parameter: uPointCount (int)
Parameter Summary: The number of points in the output surface u direction. Must be bigger than uDegree (maximum value is 1000)
Parameter: vPointCount (int)
Parameter Summary: The number of points in the output surface v direction. Must be bigger than vDegree (maximum value is 1000)

Method: Rhino.Geometry.Surface.RebuildOneDirection(int direction, int pointCount, LoftType loftType, double refitTolerance)
Return: NurbsSurface
Modifiers: public
Summary: Rebuilds an existing surface with a new surface to a given point count in either the u or v directions independently.
Parameter: direction (int)
Parameter Summary: The direction (0 = U, 1 = V).
Parameter: pointCount (int)
Parameter Summary: The number of points in the output surface in the "direction" direction.
Parameter: loftType (LoftType)
Parameter Summary: The loft type
Parameter: refitTolerance (double)
Parameter Summary: The refit tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Surface.RefitSimplySplitSurface(Curve trimCurve3d, Vector3d trimProjectionDir, double tolerance, RefitTrimKnotMode knotAdditionMode, int numInsertKnots, IEnumerable<double> Knots, RefitTrimSectionMode sectionMode, int numNonTrimSpans, bool meetCurve, bool oneSided, Point3d PtActive, bool outputSurface, bool outputCurve, ref int numSections, List<Surface> lowerSurface, List<Surface> upperSurface, List<Curve> edgeCurve, ref double FitMeasurement, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: bool
Modifiers: public
Summary: This routine accepts a 3-d trim curve (trimCrv3d). The trim curve is assumed to run from one surface edge to the opposite edge; this is referred to as a "simple" trim curve, roughly parallel to one of the srf directions (either u or v). We refer to that parameter as the "trim parameter". The routine splits the surface via the trim curve, and then refits either side ("upper" = "above the trim", and "lower" = "below the trim") as a set of untrimmed Nurbs surfaces. The idea is to retain, as much as possible, the Nurbs structure of srf, especially in the trim parameter.
Parameter: trimCurve3d (Curve)
Parameter Summary: curve that will trim from one edge to the opposite
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: knotAdditionMode (RefitTrimKnotMode)
Parameter Summary: 0: no, don't add any 1: Yes, add nKnots knots, spaced regularly over the entire surface 2: Yes, add nKnots knots, spaced regularly PER EXISTING SPAN 3: Yes, add nKnots knots, as provided in the array Knots
Parameter: numInsertKnots (int)
Parameter Summary: FOr TrimParamKnots != 3, the number of knots to add
Parameter: Knots (IEnumerable<double>)
Parameter Summary: For TrimParamKnots=3, the custom knots to add
Parameter: sectionMode (RefitTrimSectionMode)
Parameter Summary: 0: no sections, just output one "upper" and one "lower" surface 1: Yes, divide into sections at each of the input surface's existing knots 2: Yes, divide into sections at each of the "nKnot" added knot values 3: Yes, divide into sections at ALL knot values (i.e. both 1 and 2)
Parameter: numNonTrimSpans (int)
Parameter Summary: number of spans in the non-trim parameter
Parameter: meetCurve (bool)
Parameter Summary: Drag the refit surfaces out to meet the original trim curve
Parameter: oneSided (bool)
Parameter Summary: Inputting an "active" point means you only want one side of the "split" to be refit - In other words, you want a "trim refit". Results will be returned in "srfLower"
Parameter: PtActive (Point3d)
Parameter Summary: Active point
Parameter: outputSurface (bool)
Parameter Summary: if true, output fit surfaces: srfLower and, if !bActivePt, srfUpper
Parameter: outputCurve (bool)
Parameter Summary: if true, output fit curve: crvEdge
Parameter: numSections (int)
Parameter Summary:
Parameter: lowerSurface (List<Surface>)
Parameter Summary: Surfaces (# = nSections) below trim curve in srf's (u,v) domain
Parameter: upperSurface (List<Surface>)
Parameter Summary: Surfaces (# = nSections) above trim curve in srf's (u,v) domain
Parameter: edgeCurve (List<Curve>)
Parameter Summary: Curves (# = nSections) fit to trim curve with srf's u/v parameter
Parameter: FitMeasurement (double)
Parameter Summary: Calculated based on trimParamSections
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.RefitSplit(Curve curve, Vector3d trimProjectionDir, double tolerance, IEnumerable<double> Knots, bool bMeetCurve, bool divideIntoSections, List<Surface> srfLower, List<Surface> srfUpper, List<Curve> edgeCurve, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: int
Modifiers: public
Summary: Splits the surface into two and refits the split edge
Parameter: curve (Curve)
Parameter Summary: The curve used to split the surface. It must be a simple division, from one edge of the parametric space to the opposite edge.
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: Knots (IEnumerable<double>)
Parameter Summary:
Parameter: bMeetCurve (bool)
Parameter Summary:
Parameter: divideIntoSections (bool)
Parameter Summary: If true, the surface is divided at each knot
Parameter: srfLower (List<Surface>)
Parameter Summary: Surfaces below trim curve in srf's (u,v) domain
Parameter: srfUpper (List<Surface>)
Parameter Summary: Surfaces below trim curve in srf's (u,v) domain
Parameter: edgeCurve (List<Curve>)
Parameter Summary: Curves (# = nSections) fit to trim curve with srf's u/v parameter
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.Reverse(int direction, bool inPlace)
Return: Surface
Modifiers: public
Summary: Same as Reverse, but if inPlace is set to True this Surface is modified instead of a new copy being created.
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.
Parameter: inPlace (bool)
Parameter Summary:

Method: Rhino.Geometry.Surface.Reverse(int direction)
Return: Surface
Modifiers: public
Summary: Reverses parameterization Domain changes from [a,b] to [-b,-a]
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.Surface.SetDomain(int direction, Interval domain)
Return: bool
Modifiers: public, virtual
Summary: Sets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 sets first parameter's domain, 1 sets second parameter's domain.
Parameter: domain (Interval)
Parameter Summary: A new domain to be assigned.

Method: Rhino.Geometry.Surface.ShortPath(Point2d start, Point2d end, double tolerance)
Return: Curve
Modifiers: public
Summary: Constructs a geodesic between 2 points, used by ShortPath command in Rhino.
Parameter: start (Point2d)
Parameter Summary: start point of curve in parameter space. Points must be distinct in the domain of the surface.
Parameter: end (Point2d)
Parameter Summary: end point of curve in parameter space. Points must be distinct in the domain of the surface.
Parameter: tolerance (double)
Parameter Summary: tolerance used in fitting discrete solution.

Method: Rhino.Geometry.Surface.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: Surface
Modifiers: public
Summary: Smooths a surface by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the surface edges don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Surface.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: Surface
Modifiers: public
Summary: Smooths a surface by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the surface edges don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Surface.SpanCount(int direction)
Return: int
Modifiers: public
Summary: Gets number of smooth nonempty spans in the parameter direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.Split(int direction, double parameter)
Return: Surface[]
Modifiers: public
Summary: Splits (divides) the surface into two parts at the specified parameter
Parameter: direction (int)
Parameter Summary: 0 = The surface is split vertically. The "west" side is returned as the first surface in the array and the "east" side is returned as the second surface in the array. 1 = The surface is split horizontally. The "south" side is returned as the first surface in the array and the "north" side is returned as the second surface in the array
Parameter: parameter (double)
Parameter Summary: value of constant parameter in interval returned by Domain(direction)

Method: Rhino.Geometry.Surface.ToBrep()
Return: Brep
Modifiers: public
Summary: Converts the surface into a Brep.

Method: Rhino.Geometry.Surface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Gets a NURBS surface representation of this surface. Default tolerance of 0.0 is used.

Method: Rhino.Geometry.Surface.ToNurbsSurface(double tolerance, out int accuracy)
Return: NurbsSurface
Modifiers: public
Summary: Gets a NURBS surface representation of this surface.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when creating NURBS representation.
Parameter: accuracy (int)
Parameter Summary: 0 = unable to create NURBS representation with desired accuracy.
1 = success - returned NURBS parameterization matches the surface's to the desired accuracy.
2 = success - returned NURBS point locus matches the surface's to the desired accuracy and the domain of the NURBS surface is correct. However, this surface's parameterization and the NURBS surface parameterization may not match to the desired accuracy. This situation happens when getting NURBS representations of surfaces that have a transcendental parameterization like spheres, cylinders, and cones.

Method: Rhino.Geometry.Surface.Transpose()
Return: Surface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Method: Rhino.Geometry.Surface.Transpose(bool inPlace)
Return: Surface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Method: Rhino.Geometry.Surface.Trim(Interval u, Interval v)
Return: Surface
Modifiers: public
Summary: Constructs a sub-surface that covers the specified UV trimming domain.
Parameter: u (Interval)
Parameter Summary: Domain of surface along U direction to include in the subsurface.
Parameter: v (Interval)
Parameter Summary: Domain of surface along V direction to include in the subsurface.

Method: Rhino.Geometry.Surface.TryGetCone(out Cone cone, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cone and returns the cone.
Parameter: cone (Cone)
Parameter Summary: On success, the cone parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetCone(out Cone cone)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cone within RhinoMath.ZeroTolerance and return the cone.
Parameter: cone (Cone)
Parameter Summary: On success, the cone parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetCylinder(out Cylinder cylinder, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cylinder and return the infinite cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetCylinder(out Cylinder cylinder)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cylinder within RhinoMath.ZeroTolerance and return the cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetFiniteCylinder(out Cylinder cylinder, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface with the assumption that it might be a right circular cylinder and returns this geometry.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetPlane(out Plane plane, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Tests a surface for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetSphere(out Sphere sphere, double tolerance)
Return: bool
Modifiers: public
Summary: Test a surface to see if it is a portion of a sphere and return the sphere.
Parameter: sphere (Sphere)
Parameter Summary: On success, the sphere parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetSphere(out Sphere sphere)
Return: bool
Modifiers: public
Summary: Test a surface to see if it is a portion of a sphere and return the sphere.
Parameter: sphere (Sphere)
Parameter Summary: On success, the sphere parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetTorus(out Torus torus, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a torus and returns the torus.
Parameter: torus (Torus)
Parameter Summary: On success, the torus parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetTorus(out Torus torus)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a torus within RhinoMath.ZeroTolerance and returns the torus.
Parameter: torus (Torus)
Parameter Summary: On success, the torus parameters are filled in.

Method: Rhino.Geometry.Surface.VariableOffset(double uMinvMin, double uMinvMax, double uMaxvMin, double uMaxvMax, double tolerance)
Return: Surface
Modifiers: public
Summary: Copies a surface so that all locations at the corners of the copied surface are specified distances from the original surface.
Parameter: uMinvMin (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Min.
Parameter: uMinvMax (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Max.
Parameter: uMaxvMin (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Min.
Parameter: uMaxvMax (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Max.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.

Method: Rhino.Geometry.Surface.VariableOffset(double uMinvMin, double uMinvMax, double uMaxvMin, double uMaxvMax, IEnumerable<Point2d> interiorParameters, IEnumerable<double> interiorDistances, double tolerance)
Return: Surface
Modifiers: public
Summary: Copies a surface so that all locations at the corners, and from specified interior locations, of the copied surface are specified distances from the original surface.
Parameter: uMinvMin (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Min.
Parameter: uMinvMax (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Max.
Parameter: uMaxvMin (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Min.
Parameter: uMaxvMax (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Max.
Parameter: interiorParameters (IEnumerable<Point2d>)
Parameter Summary: An array of interior UV parameters to offset from.
Parameter: interiorDistances (IEnumerable<double>)
Parameter Summary: >An array of offset distances at the interior UV parameters.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.

Class: Rhino.Geometry.SurfaceCurvature
Summary: Maintains computed information for surface curvature evaluation.

Constructor: Rhino.Geometry.SurfaceCurvature.SurfaceCurvature()
Summary: Initializes a new instance of the SurfaceCurvature class

Property: Rhino.Geometry.SurfaceCurvature.Gaussian
Return: double
Modifiers: public
Summary: Gets the Gaussian curvature value at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Mean
Return: double
Modifiers: public
Summary: Gets the Mean curvature value at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Normal
Return: Vector3d
Modifiers: public
Summary: Gets the surface normal at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Point
Return: Point3d
Modifiers: public
Summary: Gets the surface point at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.UVPoint
Return: Point2d
Modifiers: public
Summary: Gets the UV location where the curvature was computed.
Accessors: get

Method: Rhino.Geometry.SurfaceCurvature.Direction(int direction)
Return: Vector3d
Modifiers: public
Summary: Gets the principal curvature direction vector.
Parameter: direction (int)
Parameter Summary: Direction index, valid values are 0 and 1.

Method: Rhino.Geometry.SurfaceCurvature.Kappa(int direction)
Return: double
Modifiers: public
Summary: Gets the principal curvature values. Kappa(0) - Principal curvature with maximum absolute value Kappa(1) - Principal curvature with minimum absolute value
Parameter: direction (int)
Parameter Summary: Kappa index, valid values are 0 and 1.

Method: Rhino.Geometry.SurfaceCurvature.OsculatingCircle(int direction)
Return: Circle
Modifiers: public
Summary: Computes the osculating circle along the given direction.
Parameter: direction (int)
Parameter Summary: Direction index, valid values are 0 and 1.

Class: Rhino.Geometry.SurfaceFilletBase
Summary: New interactive FilletSrf

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace RailFace, Curve Rail3d, BrepFace Face, Point2d uv, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace FaceA, Point2d uvA, BrepFace FaceB, Point2d uvB, double radius, bool allowExtend, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace FaceA, Point2d uvA, BrepFace FaceB, Point2d uvB, double radius, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace face, Point2d uv, Curve rail3d, double u, double radius, double tolerance)

Method: Rhino.Geometry.SurfaceFilletBase.CreateG2ChordalQuinticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using G2 chordal Quintic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Cubic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Cubic sections with a tangent slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Quartic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, double InnerSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Quartic sections with a tangent and inner slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: InnerSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the inner control point toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Quintic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, double InnerSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Quintic sections with a tangent and inner slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: InnerSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the inner control points toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateRationalArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a standard surface fillet using rational arc sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.ChangeFilletRadius(double radius)
Return: bool
Modifiers: protected
Summary: This will clear out the existing rails and fillet surfaces, and redo the offset intersections, etc.
Parameter: radius (double)
Parameter Summary: The new radius

Method: Rhino.Geometry.SurfaceFilletBase.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SurfaceFilletBase.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SurfaceFilletBase.G2ChordalQuintic(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.IsInitialized()
Return: bool
Modifiers: public
Summary: Check to see if the fillet is properly initialized. If it is not, then the selected curves, surfaces, and/or radius must be adjusted in some way before creating the fillet

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalCubic(int railDegree, double TanSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalCubicArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuartic(int railDegree, double TanSlider, double InnerSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: InnerSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the inner control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuarticArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuintic(int railDegree, double TanSlider, double InnerSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: InnerSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the inner control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuinticArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.RationalArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.TrimBreps(bool bExtend, List<Brep> TrimmedBreps0, List<Brep> TrimmedBreps1)
Return: bool
Modifiers: public
Summary: If the two input breps are the same, TrimmedBreps[1] will be empty. The constructor idoes everything necessary for this to be called. Calles to the various fillet creation members will not change the result.

Class: Rhino.Geometry.SurfaceProxy
Summary: Provides a base class to brep faces and other surface proxies.

Constructor: Rhino.Geometry.SurfaceProxy.SurfaceProxy()
Summary: Protected constructor for internal use.

Class: Rhino.Geometry.SweepOneRail
Summary: Utility class for generating Breps by sweeping cross section curves over a single rail curve. Note, this class has been superseded by the Rhino.Geometry.Brep.CreateFromSweep static functions.

Constructor: Rhino.Geometry.SweepOneRail.SweepOneRail()

Property: Rhino.Geometry.SweepOneRail.AngleToleranceRadians
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.ClosedSweep
Return: bool
Modifiers: public
Summary: If the input rail is closed, ClosedSweep determines if the swept breps will also be closed.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.GlobalShapeBlending
Return: bool
Modifiers: public
Summary: If true, the sweep is linearly blended from one end to the other, creating sweeps that taper from one cross-section curve to the other. If false, the sweep stays constant at the ends and changes more rapidly in the middle.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.IsFreeform
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlike
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlikeFront
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlikeTop
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlineRight
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.MiterType
Return: int
Modifiers: public
Summary: 0: don't miter, 1: intersect surfaces and trim sweeps, 2: rotate shapes at kinks and don't trim.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.SweepTolerance
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, Curve crossSection, double crossSectionParameter)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, Curve crossSection)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, IEnumerable<Curve> crossSections)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, Curve crossSection, double crossSectionParameter, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, Curve crossSection, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, IEnumerable<Curve> crossSections, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, Curve crossSection, double crossSectionParameter, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, Curve crossSection, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, IEnumerable<Curve> crossSections, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetRoadlikeUpDirection(Vector3d up)
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeFront()
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeRight()
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeTop()
Return: void
Modifiers: public

Class: Rhino.Geometry.SweepTwoRail
Summary: Utility class for generating Breps by sweeping cross section curves over two rail curves. Note, this class has been superseded by the Rhino.Geometry.Brep.CreateFromSweep static functions.

Constructor: Rhino.Geometry.SweepTwoRail.SweepTwoRail()

Property: Rhino.Geometry.SweepTwoRail.AngleToleranceRadians
Return: double
Modifiers: public
Summary: Gets or sets the angle tolerance in radians.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.AutoAdjust
Return: bool
Modifiers: public
Summary: Set to True to have shape curves adjusted, sorted, and matched automatically. This will produce results comparable to Rhino's Sweep2 command. Set to False to not have shape curves adjusted, sorted, and matched automatically.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.ClosedSweep
Return: bool
Modifiers: public
Summary: If the input rails are closed, ClosedSweep determines if the swept Breps will also be closed.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.MaintainHeight
Return: bool
Modifiers: public
Summary: Removes the association between the height scaling from the width scaling.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.SweepTolerance
Return: double
Modifiers: public
Summary: Gets or sets the sweeping tolerance.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.UseLegacySweeper
Return: bool
Modifiers: public
Summary: Set to True if you want to use the legacy, low-level sweeper found in earlier versions of Rhino.
Accessors: get set

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, Curve crossSection)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters1, IEnumerable<double> crossSectionParameters2)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Cross section curves.
Parameter: crossSectionParameters1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameters2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, Curve crossSection, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParametersRail1, IEnumerable<double> crossSectionParametersRail2, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: crossSectionParametersRail1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParametersRail2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, Curve crossSection, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParametersRail1, IEnumerable<double> crossSectionParametersRail2, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: crossSectionParametersRail1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParametersRail2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Class: Rhino.Geometry.TextDot
Summary: Represents a text dot, or an annotation entity with text that always faces the camera and always has the same size.
This class refers to the geometric element that is independent from the document.

Constructor: Rhino.Geometry.TextDot.TextDot(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Constructor: Rhino.Geometry.TextDot.TextDot(string text, Point3d location)
Summary: Initializes a new text dot based on the text and the location.

Property: Rhino.Geometry.TextDot.FontFace
Return: string
Modifiers: public
Summary: Font face used for displaying the dot
Accessors: get set

Property: Rhino.Geometry.TextDot.FontHeight
Return: int
Modifiers: public
Summary: Height of font used for displaying the dot
Accessors: get set

Property: Rhino.Geometry.TextDot.Point
Return: Point3d
Modifiers: public
Summary: Gets or sets the position of the text dot.
Accessors: get set

Property: Rhino.Geometry.TextDot.SecondaryText
Return: string
Modifiers: public
Summary: Gets or sets the secondary text of the text dot.
Accessors: get set

Property: Rhino.Geometry.TextDot.Text
Return: string
Modifiers: public
Summary: Gets or sets the primary text of the text dot.
Accessors: get set

Class: Rhino.Geometry.TextEntity

Constructor: Rhino.Geometry.TextEntity.TextEntity()
Summary: Initializes a new instance of the <b>TextEntity</b> class.

Constructor: Rhino.Geometry.TextEntity.TextEntity(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization

Property: Rhino.Geometry.TextEntity.Justification
Return: TextJustification
Modifiers: public
Summary: Gets or sets the justification of text in relation to its base point.
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.TextEntity.Create(string text, Plane plane, DimensionStyle style, bool wrapped, double rectWidth, double rotationRadians)
Return: TextEntity
Modifiers: public, static
Summary: Create Text geometry or None if input is invalid

Method: Rhino.Geometry.TextEntity.CreateWithRichText(string richTextString, Plane plane, DimensionStyle style, bool wrapped, double rectWidth, double rotationRadians)
Return: TextEntity
Modifiers: public, static
Summary: Create RichText geometry or None if input is invalid

Method: Rhino.Geometry.TextEntity.CreateCurves(DimensionStyle dimstyle, bool allowOpen, double smallCapsScale, double spacing)
Return: Curve[]
Modifiers: public
Summary: Returns the outline curves.
Parameter: dimstyle (DimensionStyle)
Parameter Summary:
Parameter: allowOpen (bool)
Parameter Summary: Set to True to prevent forced closing of open curves retrieved from glyphs.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateCurvesGrouped(DimensionStyle dimstyle, bool allowOpen, double smallCapsScale, double spacing)
Return: System.Collections.Generic.List<Curve[]>
Modifiers: public
Summary: Creates planar curve from text outline curves. Curves are grouped such that each element in the list being returned represents a single character.
Parameter: dimstyle (DimensionStyle)
Parameter Summary:
Parameter: allowOpen (bool)
Parameter Summary: Set to True to prevent forced closing of open curves retrieved from glyphs.
Parameter: smallCapsScale (double)
Parameter Summary:
Parameter: spacing (double)
Parameter Summary:

Method: Rhino.Geometry.TextEntity.CreateExtrusions(DimensionStyle dimstyle, double height, double smallCapsScale, double spacing)
Return: Extrusion[]
Modifiers: public
Summary: Creates extrusions from the outline curves with specified height.
Parameter: dimstyle (DimensionStyle)
Parameter Summary:
Parameter: height (double)
Parameter Summary: Height in direction perpendicular to plane of text.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateExtrusionsGrouped(DimensionStyle dimstyle, double smallCapsScale, double height, double spacing)
Return: System.Collections.Generic.List<Extrusion[]>
Modifiers: public
Summary: Creates 3d Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.CreatePolySurfaces(DimensionStyle dimstyle, double height, double smallCapsScale, double spacing)
Return: Brep[]
Modifiers: public
Summary: Creates breps from the outline curves with specified height.
Parameter: dimstyle (DimensionStyle)
Parameter Summary:
Parameter: height (double)
Parameter Summary: Height in direction perpendicular to plane of text.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreatePolysurfacesGrouped(DimensionStyle dimstyle, double smallCapsScale, double height, double spacing)
Return: System.Collections.Generic.List<Brep[]>
Modifiers: public
Summary: Creates 3d Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.CreateSurfaces(DimensionStyle dimstyle, double smallCapsScale, double spacing)
Return: Brep[]
Modifiers: public
Summary: Creates planar breps from the outline curves.
Parameter: dimstyle (DimensionStyle)
Parameter Summary:
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateSurfacesGrouped(DimensionStyle dimstyle, double smallCapsScale, double spacing)
Return: System.Collections.Generic.List<Brep[]>
Modifiers: public
Summary: Creates planar Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.Explode()
Return: Curve[]
Modifiers: public
Summary: Explodes this text entity into an array of curves.

Method: Rhino.Geometry.TextEntity.GetTextTransform(double textscale, DimensionStyle dimstyle)
Return: Transform
Modifiers: public
Summary: Get the transform for this text object's text geometry

Method: Rhino.Geometry.TextEntity.Transform(Transform transform, DimensionStyle style)
Return: bool
Modifiers: public
Summary: Transform the object by a 4x4 transform matrix and change text height override to accommodate scaling in the transform if necessary
Parameter: transform (Transform)
Parameter Summary: An Transform with the transformation information
Parameter: style (DimensionStyle)
Parameter Summary:

Class: Rhino.Geometry.Unroller
Summary: Represents the operation of unrolling a single surface.

Constructor: Rhino.Geometry.Unroller.Unroller(Brep brep)
Summary: Initializes a new instance of the <b>Unroller</b> class with a brep.

Constructor: Rhino.Geometry.Unroller.Unroller(Surface surface)
Summary: Initializes a new instance of the <b>Unroller</b> class with surface.

Property: Rhino.Geometry.Unroller.AbsoluteTolerance
Return: double
Modifiers: public
Summary: Gets or sets the absolute tolerance for the unrolling operation.
Absolute tolerance is used in the evaluation of new entities, such as intersections, re-projections and splits.
In the current implementation, absolute tolerance is used in tessellating rails, fitting curves and pulling back trims. | Accessors: get set

Property: Rhino.Geometry.Unroller.ExplodeOutput
Return: bool
Modifiers: public
Summary: Gets or sets a value determining whether geometry should be exploded.
Accessors: get set

Property: Rhino.Geometry.Unroller.ExplodeSpacing
Return: double
Modifiers: public
Summary: Gets or sets a value determining whether spacing should be exploded.
Accessors: get set

Property: Rhino.Geometry.Unroller.RelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the relative tolerance for the unrolling operation.
Relative tolerance is used in the evaluation of intrinsic properties, such as computations "along" the surface or brep.
In the current implementation, relative tolerance is used to decide if a surface is flat enough to try to unroll. That helps ease the scale dependency. The surface has to be linear in one direction within (length * RelativeTolerance) to be considered linear for that purpose. Otherwise smash will ignore that tolerance and unroll anything. | Accessors: get set

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Curve curve)
Return: void
Modifiers: public
Summary: Adds a curve that should be unrolled along with the surface/brep.
Parameter: curve (Curve)
Parameter Summary: The curve.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Curve> curves)
Return: void
Modifiers: public
Summary: Adds curves that should be unrolled along with the surface/brep.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curves.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Point3d> dotLocations, IEnumerable<string> dotText)
Return: void
Modifiers: public
Summary: Adds text dots that should be unrolled along with the surface/brep.
Parameter: dotLocations (IEnumerable<Point3d>)
Parameter Summary: An array, a list, or any enumerable set of dot locations.
Parameter: dotText (IEnumerable<string>)
Parameter Summary: An array, a list, or any enumerable set of dot strings.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Adds points that should be unrolled along with the surface/brep.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An array, a list or any enumerable set of points.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<TextDot> dots)
Return: void
Modifiers: public
Summary: Adds text dots that should be unrolled along with the surface/brep.
Parameter: dots (IEnumerable<TextDot>)
Parameter Summary: An array, a list or any enumerable set of text dots.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point point)
Return: void
Modifiers: public
Summary: Adds a point that should be unrolled along with the surface/brep.
Parameter: point (Point)
Parameter Summary: A point.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point3d dotLocation, string dotText)
Return: void
Modifiers: public
Summary: Adds a text dot that should be unrolled along with the surface/brep.
Parameter: dotLocation (Point3d)
Parameter Summary: A dot point.
Parameter: dotText (string)
Parameter Summary: A dot text.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point3d point)
Return: void
Modifiers: public
Summary: Adds a point that should be unrolled along with the surface/brep.
Parameter: point (Point3d)
Parameter Summary: A point.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(TextDot dot)
Return: void
Modifiers: public
Summary: Adds a text dot that should be unrolled along with the surface/brep.
Parameter: dot (TextDot)
Parameter Summary: A text dot.

Method: Rhino.Geometry.Unroller.FollowingGeometryIndex(Curve curve)
Return: int
Modifiers: public
Summary: Given an unrolled curve, returns the index of the source, or following curve.
Parameter: curve (Curve)
Parameter Summary: An unrolled curve returned by Unroller.PerformUnroll.

Method: Rhino.Geometry.Unroller.FollowingGeometryIndex(TextDot dot)
Return: int
Modifiers: public
Summary: Given an unrolled text dot, returns the index of the source, or following text dot.
Parameter: dot (TextDot)
Parameter Summary: An unrolled text dot returned by Unroller.PerformUnroll.

Method: Rhino.Geometry.Unroller.PerformUnroll(List<Brep> flatbreps)
Return: int
Modifiers: public
Summary: Executes unrolling operations.
Parameter: flatbreps (List<Brep>)
Parameter Summary: List of breps containing flattened results.

Method: Rhino.Geometry.Unroller.PerformUnroll(out Curve[] unrolledCurves, out Point3d[] unrolledPoints, out TextDot[] unrolledDots)
Return: Brep[]
Modifiers: public
Summary: Executes unrolling operations.
Parameter: unrolledCurves (Curve[])
Parameter Summary: An array of unrolled curves is assigned during the call in this out parameter.
Parameter: unrolledPoints (Point3d[])
Parameter Summary: An array of unrolled points is assigned during the call in this out parameter.
Parameter: unrolledDots (TextDot[])
Parameter Summary: An array of unrolled text dots is assigned during the call in this out parameter.

Class: Rhino.Geometry.VolumeMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of volume, volume centroid and volume moments in in solid meshes, in solid surfaces and in solid (closed) boundary representations.

Constructor: Rhino.Geometry.VolumeMassProperties.VolumeMassProperties()
Summary: Initializes a new instance of the VolumeMassProperties class

Property: Rhino.Geometry.VolumeMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the volume centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the Centroid calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.Volume
Return: double
Modifiers: public
Summary: Gets the volume solution.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.VolumeError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the volume calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the volume Y is integral of "y dm" over the volume Z is integral of "z dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the volume Y is integral of "yz dm" over the volume Z is integral of "zx dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the volume Y is integral of "yy dm" over the volume Z is integral of "zz dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep, bool volume, bool firstMoments, bool secondMoments, bool productMoments, double relativeTolerance, double absoluteTolerance)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.
Parameter: relativeTolerance (double)
Parameter Summary: The relative tolerance used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.
Parameter: absoluteTolerance (double)
Parameter Summary: The absolute tolerancwe used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.

Method: Rhino.Geometry.VolumeMassProperties.Compute(IEnumerable<GeometryBase> geometry, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Computes the VolumeMassProperties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the volume computation.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(IEnumerable<GeometryBase> geometry)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Computes the VolumeMassProperties for a collection of geometric objects. At present only Breps, Surfaces, and Meshes are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the volume computation.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Mesh mesh, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Mesh mesh)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Surface surface, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Surface surface)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.

Method: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.VolumeMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.VolumeMassProperties.Sum(VolumeMassProperties summand)
Return: bool
Modifiers: public
Summary: Sum mass properties together to get an aggregate mass.
Parameter: summand (VolumeMassProperties)
Parameter Summary: mass properties to add.

Method: Rhino.Geometry.VolumeMassProperties.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: On input, this contains the mass properties for some geometry G. On exit, this contains the mass properties for the transformed geometry xform(G).
Parameter: xform (Transform)
Parameter Summary: The transformation. When computing volumne mass properties, transform must be an affine transformation, or <b>Geometry.Transform.IsAffine</b> . When computing area mass properties, transform must be a similarity transformation, or <b>Geometry.Transform.IsSimilarity</b> . Perspective transformations are not allowed.

Method: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

# Namespace: Rhino.Geometry.Collections

Class: Rhino.Geometry.Collections.BrepCurveList
Summary: Provides access to all the underlying curves in a Brep object.

Property: Rhino.Geometry.Collections.BrepCurveList.Count
Return: int
Modifiers: public
Summary: Gets the number of curves in this list.
Accessors: get

Property: Rhino.Geometry.Collections.BrepCurveList.this[int index]
Return: Curve
Modifiers: public
Summary: Gets the Curve at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepCurveList.Add(Curve curve)
Return: int
Modifiers: public
Summary: Adds a curve
Parameter: curve (Curve)
Parameter Summary: A copy of the curve is added to this brep

Method: Rhino.Geometry.Collections.BrepCurveList.GetEnumerator()
Return: IEnumerator<Curve>
Modifiers: public
Summary: Get an enumerator that visits all curves.

Class: Rhino.Geometry.Collections.BrepEdgeList
Summary: Provides access to all the Edges in a Brep object.

Property: Rhino.Geometry.Collections.BrepEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep edges.
Accessors: get

Property: Rhino.Geometry.Collections.BrepEdgeList.this[int index]
Return: BrepEdge
Modifiers: public
Summary: Gets the BrepEdge at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(BrepVertex startVertex, BrepVertex endVertex, int curve3dIndex, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(BrepVertex startVertex, BrepVertex endVertex, int curve3dIndex, Interval subDomain, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int startVertexIndex, int endVertexIndex, int curve3dIndex, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int startVertexIndex, int endVertexIndex, int curve3dIndex, Interval subDomain, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int curve3dIndex)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator()
Return: IEnumerator<BrepEdge>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Method: Rhino.Geometry.Collections.BrepEdgeList.MergeAllEdges(double angleTolerance)
Return: int
Modifiers: public
Summary: Merges all possible Brep edges. Edges across kinks cannot be merged. A pair of adjacent edges in a Brep are mergeable if the angle between them is less than tolerance and the valence of the shared vertex is 2.
Parameter: angleTolerance (double)
Parameter Summary: The maximum allowable difference of angle in radian between adjacent edges that can be merged.

Method: Rhino.Geometry.Collections.BrepEdgeList.MergeEdge(int edgeIndex, double angleTolerance)
Return: int
Modifiers: public
Summary: Merge adjacent edges to a specified edge recursively. A pair of adjacent edges in a Brep are mergeable if the angle between them is less than tolerance and the valence of the shared vertex is 2.
Parameter: edgeIndex (int)
Parameter Summary: >Index of edge to merge.
Parameter: angleTolerance (double)
Parameter Summary: The maximum allowable difference of angle in radian between adjacent edges that can be merged.

Method: Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(double tolerance, bool cleanUp)
Return: int
Modifiers: public
Summary: Finds any naked edges with the same start and end vertex and an arc-length less than tolerance and attempts to remove them by removing trims and extending the adjacent to meet.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: cleanUp (bool)
Parameter Summary: If true, then the method cleans up the Brep by setting tolerances, boxes, flags, and then compacts. If false, then the caller should do this at some point.

Method: Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(double tolerance)
Return: int
Modifiers: public
Summary: Finds any naked edges with the same start and end vertex and an arc-length less than tolerance and attempts to remove them by removing trims and extending the adjacent to meet.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Collections.BrepEdgeList.SplitEdgeAtParameters(int edgeIndex, IEnumerable<double> edgeParameters)
Return: int
Modifiers: public
Summary: Splits an edge at the specified parameters.
Parameter: edgeIndex (int)
Parameter Summary: The index of the edge to be addressed.
Parameter: edgeParameters (IEnumerable<double>)
Parameter Summary: The parameter along that edge.

Method: Rhino.Geometry.Collections.BrepEdgeList.SplitKinkyEdge(int edgeIndex, double kinkToleranceRadians)
Return: bool
Modifiers: public
Summary: Splits the edge into G1 pieces.
Parameter: edgeIndex (int)
Parameter Summary: Index of edge to test and split.
Parameter: kinkToleranceRadians (double)
Parameter Summary: The split tolerance in radians.

Class: Rhino.Geometry.Collections.BrepFaceList
Summary: Provides access to all the Faces in a Brep object.

Property: Rhino.Geometry.Collections.BrepFaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep faces.
Accessors: get

Property: Rhino.Geometry.Collections.BrepFaceList.this[int index]
Return: BrepFace
Modifiers: public
Summary: Gets the BrepFace at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepFaceList.Add(int surfaceIndex)
Return: BrepFace
Modifiers: public
Summary: Create and add a new face to this list. An incomplete face is added. The caller must create and fill in the loops used by the face.
Parameter: surfaceIndex (int)
Parameter Summary: index of surface in brep's Surfaces list

Method: Rhino.Geometry.Collections.BrepFaceList.Add(Surface surface)
Return: BrepFace
Modifiers: public
Summary: Add a new face to a brep. This creates a complete face with new vertices at the surface corners, new edges along the surface boundary, etc. The loop of the returned face has four trims that correspond to the south, east, north, and west side of the surface in that order. If you use this version of Add to add an exiting brep, then you are responsible for using a tool like JoinEdges() to hook the new face to its neighbors.
Parameter: surface (Surface)
Parameter Summary: surface is copied

Method: Rhino.Geometry.Collections.BrepFaceList.AddConeFace(BrepVertex vertex, BrepEdge edge, bool revEdge)
Return: BrepFace
Modifiers: public
Summary: Add a new face to the brep whose surface geometry is a ruled cone with the edge as the base and the vertex as the apex point.
Parameter: vertex (BrepVertex)
Parameter Summary: The apex of the cone will be at this vertex. The north side of the surface's parameter space will be a singular point at the vertex.
Parameter: edge (BrepEdge)
Parameter Summary: The south side of the face's surface will run along this edge.
Parameter: revEdge (bool)
Parameter Summary: True if the new face's outer boundary orientation along the edge is opposite the orientation of edge.

Method: Rhino.Geometry.Collections.BrepFaceList.AddRuledFace(BrepEdge edgeA, bool revEdgeA, BrepEdge edgeB, bool revEdgeB)
Return: BrepFace
Modifiers: public
Summary: Add a new face to the brep whose surface geometry is a ruled surface between two edges.
Parameter: edgeA (BrepEdge)
Parameter Summary: The south side of the face's surface will run along edgeA.
Parameter: revEdgeA (bool)
Parameter Summary: True if the new face's outer boundary orientation along edgeA is opposite the orientation of edgeA.
Parameter: edgeB (BrepEdge)
Parameter Summary: The north side of the face's surface will run along edgeA
Parameter: revEdgeB (bool)
Parameter Summary: True if the new face's outer boundary orientation along edgeB is opposite the orientation of edgeB

Method: Rhino.Geometry.Collections.BrepFaceList.ExtractFace(int faceIndex)
Return: Brep
Modifiers: public
Summary: Extracts a face from a Brep.
Parameter: faceIndex (int)
Parameter Summary: A face index

Method: Rhino.Geometry.Collections.BrepFaceList.Flip(bool onlyReversedFaces)
Return: void
Modifiers: public
Summary: Flips the orientation of faces.
Parameter: onlyReversedFaces (bool)
Parameter Summary: If true, clears all BrepFace.OrientationIsReversed flags by calling BrepFace.Transpose() on each face with a True OrientationIsReversed setting. If false, all of the faces are flipped regardless of their orientation.

Method: Rhino.Geometry.Collections.BrepFaceList.GetEnumerator()
Return: IEnumerator<BrepFace>
Modifiers: public
Summary: Gets an enumerators that yields <b>BrepFace</b> objects.

Method: Rhino.Geometry.Collections.BrepFaceList.RemoveAt(int faceIndex)
Return: void
Modifiers: public
Summary: Deletes a face at a specified index.
Parameter: faceIndex (int)
Parameter Summary: The index of the mesh face.

Method: Rhino.Geometry.Collections.BrepFaceList.RemoveSlits()
Return: bool
Modifiers: public
Summary: Remove slit trims and slit boundaries from each face.

Method: Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces()
Return: bool
Modifiers: public
Summary: Shrinks all the underlying surfaces in this Brep. Sometimes the surfaces extend far beyond the trimming boundaries of the Brep Face. This function will remove those portions of the surfaces that are not used.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitBipolarFaces()
Return: bool
Modifiers: public
Summary: Splits surfaces with two singularities, like spheres, so the results have at most one singularity.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitClosedFaces(int minimumDegree)
Return: bool
Modifiers: public
Summary: Splits closed surfaces so they are not closed.
Parameter: minimumDegree (int)
Parameter Summary: If the degree of the surface < min_degree, the surface is not split. In some cases, minimumDegree = 2 is useful to preserve piecewise linear surfaces.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitFaceAtTangents(int faceIndex)
Return: bool
Modifiers: public
Summary: Splits the face of a Brep at tangent locations.
Parameter: faceIndex (int)
Parameter Summary: The index of the face to split.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitFacesAtTangents()
Return: bool
Modifiers: public
Summary: Splits all of the faces of a Brep at tangent locations.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFace(int faceIndex, double kinkTolerance)
Return: bool
Modifiers: public
Summary: Splits a single face into G1 pieces.
Parameter: faceIndex (int)
Parameter Summary: The index of the face to split.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces()
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(double kinkTolerance, bool compact)
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.
Parameter: compact (bool)
Parameter Summary: If true, the Brep will be compacted if possible.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(double kinkTolerance)
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.

Method: Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurface(int faceIndex)
Return: bool
Modifiers: public
Summary: Standardizes the relationship between a BrepFace and the 3d surface it uses. When done, the face will be the only face that references its 3d surface, and the orientations of the face and 3d surface will be the same.
Parameter: faceIndex (int)
Parameter Summary: The index of the face.

Method: Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurfaces()
Return: void
Modifiers: public
Summary: Standardize all faces in the brep.

Class: Rhino.Geometry.Collections.BrepLoopList
Summary: Provides access to all the Loops in a Brep object.

Property: Rhino.Geometry.Collections.BrepLoopList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep loops.
Accessors: get

Property: Rhino.Geometry.Collections.BrepLoopList.this[int index]
Return: BrepLoop
Modifiers: public
Summary: Gets the BrepLoop at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepLoopList.Add(BrepLoopType loopType, BrepFace face)
Return: BrepLoop
Modifiers: public
Summary: Create a new boundary loop on a face. After you get this BrepLoop, you still need to create the vertices, edges, and trims that define the loop.

Method: Rhino.Geometry.Collections.BrepLoopList.Add(BrepLoopType loopType)
Return: BrepLoop
Modifiers: public
Summary: Create a new empty boundary loop. The new loop will not be part of a face and will not include any trim curves.

Method: Rhino.Geometry.Collections.BrepLoopList.AddOuterLoop(int faceIndex)
Return: BrepLoop
Modifiers: public
Summary: Create a new outer boundary loop that runs along the sides of the face's surface. All the necessary trims, edges, and vertices are created and added to the brep.
Parameter: faceIndex (int)
Parameter Summary: index of face that needs an outer boundary that runs along the sides of its surface.

Method: Rhino.Geometry.Collections.BrepLoopList.AddPlanarFaceLoop(int faceIndex, BrepLoopType loopType, IEnumerable<Curve> boundaryCurves)
Return: BrepLoop
Modifiers: public
Summary: Add a planar trimming loop to a planar face
Parameter: faceIndex (int)
Parameter Summary: index of planar face. The underlying surface must be a PlaneSurface
Parameter: loopType (BrepLoopType)
Parameter Summary: type of loop to add. If loopType is Unknown, then the loop direction is tested and the new loops type will be set to Outer or Inner. If the loopType is Outer, then the direction of the new loop is tested and flipped if it is clockwise. If the loopType is Inner, then the direction of the new loop is tested and flipped if it is counter-clockwise.
Parameter: boundaryCurves (IEnumerable<Curve>)
Parameter Summary: list of 3d curves that form a simple (no self intersections) closed curve. These curves define the 3d edge geometry and should be near the planar surface.

Method: Rhino.Geometry.Collections.BrepLoopList.GetEnumerator()
Return: IEnumerator<BrepLoop>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Class: Rhino.Geometry.Collections.BrepSurfaceList
Summary: Provides access to all the underlying surfaces in a Brep object.

Property: Rhino.Geometry.Collections.BrepSurfaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of surfaces in a brep.
Accessors: get

Property: Rhino.Geometry.Collections.BrepSurfaceList.this[int index]
Return: Surface
Modifiers: public
Summary: Gets the Surface at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator()
Return: IEnumerator<Surface>
Modifiers: public
Summary: Gets an enumerator that visits all surfaces.

Class: Rhino.Geometry.Collections.BrepTrimList
Summary: Provides access to all the Trims in a Brep object

Property: Rhino.Geometry.Collections.BrepTrimList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep trims.
Accessors: get

Property: Rhino.Geometry.Collections.BrepTrimList.this[int index]
Return: BrepTrim
Modifiers: public
Summary: Gets the BrepTrim at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepTrimList.Add(bool rev3d, BrepEdge edge, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this trim
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(bool rev3d, BrepLoop loop, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(BrepEdge edge, bool rev3d, BrepLoop loop, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep.
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this trim
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.AddCurveOnFace(BrepFace face, BrepEdge edge, bool rev3d, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new curve on face to the brep
Parameter: face (BrepFace)
Parameter Summary: face that curve lies on
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this curve on surface
Parameter: rev3d (bool)
Parameter Summary: True if the 3d edge and the 2d parameter space curve have opposite directions.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in face's parameter space

Method: Rhino.Geometry.Collections.BrepTrimList.AddSingularTrim(BrepVertex vertex, BrepLoop loop, IsoStatus iso, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new singular trim to the brep.
Parameter: vertex (BrepVertex)
Parameter Summary: vertex along collapsed surface edge
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: iso (IsoStatus)
Parameter Summary:
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.GetEnumerator()
Return: IEnumerator<BrepTrim>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds()
Return: bool
Modifiers: public
Summary: Matches the endpoints of all trims in the Brep.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(BrepLoop loop)
Return: bool
Modifiers: public
Summary: Match the endpoints of all trims in a loop.
Parameter: loop (BrepLoop)
Parameter Summary: The Brep loop.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(BrepTrim trim0, BrepTrim trim1)
Return: bool
Modifiers: public
Summary: Match the end of a trim to the start of the next trim.
Parameter: trim0 (BrepTrim)
Parameter Summary: The Brep trim.
Parameter: trim1 (BrepTrim)
Parameter Summary: Brep trim that comes immediately after trim0 in the same loop.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(int trimIndex)
Return: bool
Modifiers: public
Summary: Match the endpoints of a trim to the next and previous trim.

Class: Rhino.Geometry.Collections.BrepVertexList
Summary: Provides access to all the Vertices in a Brep object

Property: Rhino.Geometry.Collections.BrepVertexList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep vertices.
Accessors: get

Property: Rhino.Geometry.Collections.BrepVertexList.this[int index]
Return: BrepVertex
Modifiers: public
Summary: Gets the BrepVertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepVertexList.Add()
Return: BrepVertex
Modifiers: public
Summary: Create and add a new vertex to this list

Method: Rhino.Geometry.Collections.BrepVertexList.Add(Point3d point, double vertexTolerance)
Return: BrepVertex
Modifiers: public
Summary: Create and add a new vertex to this list
Parameter: point (Point3d)
Parameter Summary:
Parameter: vertexTolerance (double)
Parameter Summary: Use RhinoMath.UnsetTolerance if you are unsure

Method: Rhino.Geometry.Collections.BrepVertexList.AddPointOnFace(BrepFace face, double s, double t)
Return: BrepVertex
Modifiers: public
Summary: Adds a new point on face to the brep
Parameter: face (BrepFace)
Parameter Summary: face that vertex lies on
Parameter: s (double)
Parameter Summary: surface parameters
Parameter: t (double)
Parameter Summary: surface parameters

Method: Rhino.Geometry.Collections.BrepVertexList.GetEnumerator()
Return: IEnumerator<BrepVertex>
Modifiers: public
Summary: Gets an enumerator that visits all surfaces.

Class: Rhino.Geometry.Collections.MeshFaceList
Summary: Provides access to the faces and Face related functionality of a Mesh.

Property: Rhino.Geometry.Collections.MeshFaceList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of mesh triangles and quads the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh faces. When getting this can includes invalid faces.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceList.QuadCount
Return: int
Modifiers: public
Summary: Gets the number of faces that are valid quads (4 corners).
Accessors: get

Property: Rhino.Geometry.Collections.MeshFaceList.TriangleCount
Return: int
Modifiers: public
Summary: Gets the number of faces that are valid triangles (3 corners).
Accessors: get

Property: Rhino.Geometry.Collections.MeshFaceList.this[int index]
Return: MeshFace
Modifiers: public
Summary: Returns the mesh face at the given index.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(int vertex1, int vertex2, int vertex3, int vertex4)
Return: int
Modifiers: public
Summary: Appends a new quadrangular face to the end of the mesh face list.
Parameter: vertex1 (int)
Parameter Summary: Index of first face corner.
Parameter: vertex2 (int)
Parameter Summary: Index of second face corner.
Parameter: vertex3 (int)
Parameter Summary: Index of third face corner.
Parameter: vertex4 (int)
Parameter Summary: Index of fourth face corner.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(int vertex1, int vertex2, int vertex3)
Return: int
Modifiers: public
Summary: Appends a new triangular face to the end of the mesh face list.
Parameter: vertex1 (int)
Parameter Summary: Index of first face corner.
Parameter: vertex2 (int)
Parameter Summary: Index of second face corner.
Parameter: vertex3 (int)
Parameter Summary: Index of third face corner.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(MeshFace face)
Return: int
Modifiers: public
Summary: Appends a new mesh face to the end of the mesh face list.
Parameter: face (MeshFace)
Parameter Summary: Face to add.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFaces(IEnumerable<MeshFace> faces)
Return: int
Modifiers: public
Summary: Appends a list of faces to the end of the mesh face list.
Parameter: faces (IEnumerable<MeshFace>)
Parameter Summary: Faces to add.

Method: Rhino.Geometry.Collections.MeshFaceList.AdjacentFaces(int faceIndex)
Return: int
Modifiers: public
Summary: Gets all faces that share a topological edge with a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.Clear()
Return: void
Modifiers: public
Summary: Clears the Face list on the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertNonPlanarQuadsToTriangles(double planarTolerance, double angleToleranceRadians, int splitMethod)
Return: int
Modifiers: public
Summary: Splits non-planar quads into two triangles based on given parameters.
Parameter: planarTolerance (double)
Parameter Summary: If planarTolerance >= 0, then a quad is split if its vertices are not coplanar. If both planarTolerance = Rhino.RhinoMath.UnsetValue and angleToleranceRadians >= 0.0, then the planarity test is skipped.
Parameter: angleToleranceRadians (double)
Parameter Summary: If angleToleranceRadians >= 0.0, then a quad is split if the angle between opposite corner normals is > angleToleranceRadians. The corner normal is the normal to the triangle formed by two adjacent edges and the diagonal connecting their endpoints. A quad has four corner normals. If both angleToleranceRadians = Rhino.RhinoMath.UnsetValue and planarTolerance >= 0.0, then the corner normal angle test is skipped.
Parameter: splitMethod (int)
Parameter Summary: 0 default Currently divides along the short diagonal. This may be changed as better methods are found or preferences change. By passing zero, you let the developers of this code decide what's best for you over time. 1 divide along the short diagonal 2 divide along the long diagonal 3 minimize resulting area 4 maximize resulting area 5 minimize angle between triangle normals 6 maximize angle between triangle normals

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles()
Return: bool
Modifiers: public
Summary: Splits all quads along the short diagonal.

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(double angleToleranceRadians, double minimumDiagonalLengthRatio)
Return: bool
Modifiers: public
Summary: Joins adjacent triangles into quads if the resulting quad is 'nice'.
Parameter: angleToleranceRadians (double)
Parameter Summary: Used to compare adjacent triangles' face normals. For two triangles to be considered, the angle between their face normals has to be <= angleToleranceRadians. When in doubt use RhinoMath.PI/90.0 (2 degrees).
Parameter: minimumDiagonalLengthRatio (double)
Parameter Summary: ( <= 1.0) For two triangles to be considered the ratio of the resulting quad's diagonals (length of the shortest diagonal)/(length of longest diagonal). has to be >= minimumDiagonalLengthRatio. When in doubt us .875.

Method: Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces()
Return: int
Modifiers: public
Summary: Attempts to removes degenerate faces from the mesh.
Degenerate faces are faces that contains such a combination of indices, that their final shape collapsed in a line or point.
Before returning, this method also attempts to repair faces by juggling vertex indices.

Method: Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(IEnumerable<int> faceIndexes, bool compact)
Return: int
Modifiers: public
Summary: Removes a collection of faces from the mesh without affecting the remaining geometry.
Parameter: faceIndexes (IEnumerable<int>)
Parameter Summary: An array containing all the face indices to be removed.
Parameter: compact (bool)
Parameter Summary: If true, removes vertices that are no longer referenced.

Method: Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(IEnumerable<int> faceIndexes)
Return: int
Modifiers: public
Summary: Removes a collection of faces from the mesh without affecting the remaining geometry.
Parameter: faceIndexes (IEnumerable<int>)
Parameter Summary: An array containing all the face indices to be removed.

Method: Rhino.Geometry.Collections.MeshFaceList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store faces. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshFaceList.ExtractDuplicateFaces()
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, duplicate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.ExtractFaces(IEnumerable<int> faceIndices)
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, faces.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: The face indices to be extracted.

Method: Rhino.Geometry.Collections.MeshFaceList.GetClashingFacePairs(int maxPairCount)
Return: IndexPair[]
Modifiers: public
Summary: Gets an array of pairs of mesh faces that clash.
Parameter: maxPairCount (int)
Parameter Summary: If >0, then at most this many pairs will be added to the output array. If <=0, then all clashing pairs will be added to the output array.

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(int faceIndex, double angleRadians, bool greaterThanAngle)
Return: int
Modifiers: public
Summary: Find all connected face indices where adjacent face normals meet the criteria of angleRadians and greaterThanAngle
Parameter: faceIndex (int)
Parameter Summary: face index to start from
Parameter: angleRadians (double)
Parameter Summary: angle to use for comparison of what is connected
Parameter: greaterThanAngle (bool)
Parameter Summary: If True angles greater than or equal to are considered connected. If false, angles less than or equal to are considered connected.

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(int faceIndex)
Return: int
Modifiers: public
Summary: Find all connected face indices
Parameter: faceIndex (int)
Parameter Summary: face index to start from

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFacesToEdges(int startFaceIndex, bool treatNonmanifoldLikeUnwelded)
Return: int
Modifiers: public
Summary: Uses startFaceIndex and finds all connected face indexes up to unwelded or naked edges. If treatNonmanifoldLikeUnwelded is True then non-manifold edges will be considered as unwelded or naked
Parameter: startFaceIndex (int)
Parameter Summary: Initial face index
Parameter: treatNonmanifoldLikeUnwelded (bool)
Parameter Summary: True means non-manifold edges will be handled like unwelded edges, False means they aren't considered

Method: Rhino.Geometry.Collections.MeshFaceList.GetDuplicateFaces()
Return: int
Modifiers: public
Summary: Finds all of the duplicate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.GetEnumerator()
Return: IEnumerator<MeshFace>
Modifiers: public
Summary: Gets an enumerator that yields all faces in this collection.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFace(int index)
Return: MeshFace
Modifiers: public
Summary: Returns the mesh face at the given index.
Parameter: index (int)
Parameter Summary: Index of face to get. Must be larger than or equal to zero and smaller than the Face Count of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceAspectRatio(int index)
Return: double
Modifiers: public
Summary: Returns the mesh face at the given index.
Parameter: index (int)
Parameter Summary: Index of face to get. Must be larger than or equal to zero and smaller than the Face Count of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceBoundingBox(int faceIndex)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceCenter(int faceIndex)
Return: Point3d
Modifiers: public
Summary: Gets the center point of a face.
For a triangular face, this is the centroid or barycenter.
For a quad, this is the average of four comer points. | Parameter: faceIndex (int) | Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceVertices(int faceIndex, out Point3f a, out Point3f b, out Point3f c, out Point3f d)
Return: bool
Modifiers: public
Summary: Gets the 3D location of the vertices forming a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.
Parameter: a (Point3f)
Parameter Summary: A first point. This out argument is assigned during the call.
Parameter: b (Point3f)
Parameter Summary: A second point. This out argument is assigned during the call.
Parameter: c (Point3f)
Parameter Summary: A third point. This out argument is assigned during the call.
Parameter: d (Point3f)
Parameter Summary: A fourth point. This out argument is assigned during the call.

Method: Rhino.Geometry.Collections.MeshFaceList.GetTopologicalVertices(int faceIndex)
Return: int
Modifiers: public
Summary: Gets the topology vertex indices of a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetZeroAreaFaces(out int whollyDegenerateFaces, out int partiallyDegenerateFaces)
Return: bool
Modifiers: public
Summary: Examines and adds face indexes to whollyDegenerateFaces if the face is a triangle with zero area or a quad both triangles have zero area. Face indexes are added to partiallyDegenerateFaces when a quad has one triangle with zero area.
Parameter: whollyDegenerateFaces (int)
Parameter Summary: Array of indexes for faces, both triangles and quads, that have zero area.
Parameter: partiallyDegenerateFaces (int)
Parameter Summary: Array of indexes for quad faces, that have one triangle with zero area.

Method: Rhino.Geometry.Collections.MeshFaceList.HasNakedEdges(int faceIndex)
Return: bool
Modifiers: public
Summary: Returns True if at least one of the face edges are not topologically connected to any other faces.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.Insert(int index, MeshFace face)
Return: void
Modifiers: public
Summary: Inserts a mesh face at a defined index in this list.
Parameter: index (int)
Parameter Summary: An index.
Parameter: face (MeshFace)
Parameter Summary: A face.

Method: Rhino.Geometry.Collections.MeshFaceList.IsHidden(int faceIndex)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether a face is hidden.
A face is hidden if, and only if, at least one of its vertices is hidden. | Parameter: faceIndex (int) | Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.MergeAdjacentFaces(int edgeIndex)
Return: bool
Modifiers: public
Summary: Merges two triangular mesh faces that share an edge into one quadrangular face.
Parameter: edgeIndex (int)
Parameter Summary: The common topological edge index.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveAt(int index, bool compact)
Return: void
Modifiers: public
Summary: Removes a face from the mesh.
Parameter: index (int)
Parameter Summary: The index of the face that will be removed.
Parameter: compact (bool)
Parameter Summary: If true, removes vertices that are no longer referenced.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes a face from the mesh.
Parameter: index (int)
Parameter Summary: The index of the face that will be removed.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveZeroAreaFaces(ref int fixedFaceCount)
Return: int
Modifiers: public
Summary: Deletes or fixes mesh faces that have zero area.
Parameter: fixedFaceCount (int)
Parameter Summary: Number of fixed partially degenerate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, int vertex1, int vertex2, int vertex3, int vertex4)
Return: bool
Modifiers: public
Summary: Sets a quadrangular face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: vertex1 (int)
Parameter Summary: The first vertex index.
Parameter: vertex2 (int)
Parameter Summary: The second vertex index.
Parameter: vertex3 (int)
Parameter Summary: The third vertex index.
Parameter: vertex4 (int)
Parameter Summary: The fourth vertex index.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, int vertex1, int vertex2, int vertex3)
Return: bool
Modifiers: public
Summary: Sets a triangular face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: vertex1 (int)
Parameter Summary: The first vertex index.
Parameter: vertex2 (int)
Parameter Summary: The second vertex index.
Parameter: vertex3 (int)
Parameter Summary: The third vertex index.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, MeshFace face)
Return: bool
Modifiers: public
Summary: Sets a face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: face (MeshFace)
Parameter Summary: A face.

Method: Rhino.Geometry.Collections.MeshFaceList.ToIntArray(bool asTriangles, ref List<int> replacedIndices)
Return: int
Modifiers: public
Summary: Copies all of the faces to a linear array of indices. Clean-up of vertex indices if replacedIndices is a valid List<int>
Parameter: asTriangles (bool)
Parameter Summary: If set totrueas triangles.
Parameter: replacedIndices (List<int>)
Parameter Summary: List is populated with vertex indices that were replaced with 0. If replacedIndices is None there will be no cleanup

Method: Rhino.Geometry.Collections.MeshFaceList.ToIntArray(bool asTriangles)
Return: int
Modifiers: public
Summary: Copies all of the face indices to a linear array of indices per face. Note that this includes indices from invalid faces too.
Parameter: asTriangles (bool)
Parameter Summary: If set totrueas triangles.

Class: Rhino.Geometry.Collections.MeshFaceNormalList
Summary: Provides access to the Face normals of a Mesh.

Property: Rhino.Geometry.Collections.MeshFaceNormalList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of face normals the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceNormalList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh face normals.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceNormalList.this[int index]
Return: Vector3f
Modifiers: public
Summary: Gets or sets the face normal at the given face index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(double x, double y, double z)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: x (double)
Parameter Summary: X component of face normal.
Parameter: y (double)
Parameter Summary: Y component of face normal.
Parameter: z (double)
Parameter Summary: Z component of face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(float x, float y, float z)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: x (float)
Parameter Summary: X component of face normal.
Parameter: y (float)
Parameter Summary: Y component of face normal.
Parameter: z (float)
Parameter Summary: Z component of face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Vector3d normal)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: normal (Vector3d)
Parameter Summary: New face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Vector3f normal)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: normal (Vector3f)
Parameter Summary: New face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.Clear()
Return: void
Modifiers: public
Summary: Clears the Face Normal list on the mesh.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals()
Return: bool
Modifiers: public
Summary: Computes all the face normals for this mesh based on the physical shape of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store face normals. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.GetEnumerator()
Return: IEnumerator<Vector3f>
Modifiers: public
Summary: Gets an enumerator that yields all normals (vectors) in this collection.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using three double-precision numbers.
Parameter: index (int)
Parameter Summary: An index.
Parameter: x (double)
Parameter Summary: A x component.
Parameter: y (double)
Parameter Summary: A y component.
Parameter: z (double)
Parameter Summary: A z component.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using three single-precision numbers.
Parameter: index (int)
Parameter Summary: An index.
Parameter: x (float)
Parameter Summary: A x component.
Parameter: y (float)
Parameter Summary: A y component.
Parameter: z (float)
Parameter Summary: A z component.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, Vector3d normal)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using a single-precision vector.
Parameter: index (int)
Parameter Summary: An index.
Parameter: normal (Vector3d)
Parameter Summary: A normal vector.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, Vector3f normal)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using a single-precision vector.
Parameter: index (int)
Parameter Summary: An index.
Parameter: normal (Vector3f)
Parameter Summary: A normal vector.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals()
Return: bool
Modifiers: public
Summary: Unitizes all the existing face normals.

Class: Rhino.Geometry.Collections.MeshNgonList
Summary: Provides access to the ngons and ngon-related functionality of a Mesh. See also the <b>Rhino.Geometry.Mesh.Ngons</b> property for Ngon functionality details.

Property: Rhino.Geometry.Collections.MeshNgonList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh ngons.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshNgonList.UnsignedCount
Return: uint
Modifiers: public
Summary: Gets or sets the number of mesh ngons.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshNgonList.this[int index]
Return: MeshNgon
Modifiers: public
Summary: Returns the mesh ngon at the given index.

Method: Rhino.Geometry.Collections.MeshNgonList.AddNgon(MeshNgon ngon)
Return: int
Modifiers: public
Summary: Appends a new ngon to the end of the mesh ngon list.
Parameter: ngon (MeshNgon)
Parameter Summary: Ngon to add.

Method: Rhino.Geometry.Collections.MeshNgonList.AddNgons(IEnumerable<MeshNgon> ngons)
Return: int
Modifiers: public
Summary: Appends a list of ngons to the end of the mesh ngon list.
Parameter: ngons (IEnumerable<MeshNgon>)
Parameter Summary: Ngons to add.

Method: Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(double planarTolerance, int minimumNgonVertexCount, int minimumNgonFaceCount, bool allowHoles)
Return: int
Modifiers: public
Summary: Add an ngon for each group of connected coplanar faces.
Parameter: planarTolerance (double)
Parameter Summary: 3d distance tolerance for coplanar test.
Parameter: minimumNgonVertexCount (int)
Parameter Summary: Minimum number of vertices for an ngon.
Parameter: minimumNgonFaceCount (int)
Parameter Summary: Minimum number of faces for an ngon.
Parameter: allowHoles (bool)
Parameter Summary: Determines whether the ngon can have inner boundaries.

Method: Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(double planarTolerance)
Return: int
Modifiers: public
Summary: Add an ngon for each group of connected coplanar faces.
Parameter: planarTolerance (double)
Parameter Summary: 3d distance tolerance for coplanar test.

Method: Rhino.Geometry.Collections.MeshNgonList.Clear()
Return: void
Modifiers: public
Summary: Clears the Ngon list on the mesh.

Method: Rhino.Geometry.Collections.MeshNgonList.GetEnumerator()
Return: IEnumerator<MeshNgon>
Modifiers: public
Summary: Gets an enumerator that yields all ngons in this collection.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgon(int index)
Return: MeshNgon
Modifiers: public
Summary: Returns the mesh ngon at the given index.
Parameter: index (int)
Parameter Summary: Index of ngon to get. Must be larger than or equal to zero and smaller than the Ngon Count of the mesh.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundary(IEnumerable<int> ngonFaceIndexList)
Return: int
Modifiers: public
Summary: Get a list of vertices that form the boundary of a face set. This is often use to get ngon boundaries.
Parameter: ngonFaceIndexList (IEnumerable<int>)
Parameter Summary: List of mesh face indices.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(int index)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of an ngon.
Parameter: index (int)
Parameter Summary: A ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(MeshNgon ngon)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of an ngon.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(int index)
Return: Point3d
Modifiers: public
Summary: Gets the center point of an ngon.
This the average of the corner points. | Parameter: index (int) | Parameter Summary: A ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(MeshNgon ngon)
Return: Point3d
Modifiers: public
Summary: Gets the center point of an ngon.
This the average of the corner points. | Parameter: ngon (MeshNgon) | Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonEdgeCount(int index)
Return: int
Modifiers: public
Summary: Gets the complete edge count of an ngon.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonOuterEdgeCount(int index)
Return: int
Modifiers: public
Summary: Gets the outer edge count of an ngon.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.Insert(int index, MeshNgon ngon)
Return: void
Modifiers: public
Summary: Inserts a mesh ngon at a defined index in this list.
Parameter: index (int)
Parameter Summary: An ngon index.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.IsValid(int index, TextLog textLog)
Return: uint
Modifiers: public
Summary: Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
Parameter: index (int)
Parameter Summary: The index of the ngon to test.
Parameter: textLog (TextLog)
Parameter Summary: A text log for collecting information about problems.

Method: Rhino.Geometry.Collections.MeshNgonList.IsValid(int index)
Return: uint
Modifiers: public
Summary: Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
Parameter: index (int)
Parameter Summary: The index of the ngon to test.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonBoundaryVertexList(MeshNgon ngon, bool bAppendStartPoint)
Return: Point3d[]
Modifiers: public
Summary: Get an ngon's boundary points.
Parameter: ngon (MeshNgon)
Parameter Summary: ngon.
Parameter: bAppendStartPoint (bool)
Parameter Summary: If true, the first point in the list is also appended to the end of the list to create a closed polyline.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonHasHoles(int index)
Return: bool
Modifiers: public
Summary: Determines whether a ngon has holes.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonIndexFromFaceIndex(int meshFaceIndex)
Return: int
Modifiers: public
Summary: Returns the index of a mesh ngon the face belongs to.
Parameter: meshFaceIndex (int)
Parameter Summary: Index of a mesh face.

Method: Rhino.Geometry.Collections.MeshNgonList.Orientation(int index, bool permitHoles)
Return: int
Modifiers: public
Summary: Determine if the ngon's boundary orientation matches that of the set of faces it is made from.
Parameter: index (int)
Parameter Summary: Ngon index.
Parameter: permitHoles (bool)
Parameter Summary: True if the ngon is permitted to have interior holes, False otherwise.

Method: Rhino.Geometry.Collections.MeshNgonList.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes an ngon from the mesh.
Parameter: index (int)
Parameter Summary: The index of the ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.RemoveNgons(IEnumerable<int> indices)
Return: int
Modifiers: public
Summary: Remove one or more ngons from the mesh.
Parameter: indices (IEnumerable<int>)
Parameter Summary: An array of ngon indices.

Method: Rhino.Geometry.Collections.MeshNgonList.ReverseOuterBoundary(int index)
Return: void
Modifiers: public
Summary: Reverse the order of the m_vi[] array for an ngon

Method: Rhino.Geometry.Collections.MeshNgonList.SetNgon(int index, MeshNgon ngon)
Return: void
Modifiers: public
Summary: Set an ngon in this list.
Parameter: index (int)
Parameter Summary: An ngon index.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Class: Rhino.Geometry.Collections.MeshTextureCoordinateList
Summary: Provides access to the Vertex Texture coordinates of a Mesh.

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of texture coordinates the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of texture coordinates.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.this[int index]
Return: Point2f
Modifiers: public
Summary: Gets or sets the texture coordinate at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(double s, double t)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: s (double)
Parameter Summary: S component of new texture coordinate.
Parameter: t (double)
Parameter Summary: T component of new texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(float s, float t)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: s (float)
Parameter Summary: S component of new texture coordinate.
Parameter: t (float)
Parameter Summary: T component of new texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Point2f tc)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: tc (Point2f)
Parameter Summary: Texture coordinate to add.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Point3d tc)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: tc (Point3d)
Parameter Summary: Texture coordinate to add.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(Point2f[] textureCoordinates)
Return: bool
Modifiers: public
Summary: Appends an array of texture coordinates.
Parameter: textureCoordinates (Point2f[])
Parameter Summary: Texture coordinates to append.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear()
Return: void
Modifiers: public
Summary: Clears the Texture Coordinate list on the mesh.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store texture coordinates. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.GetEnumerator()
Return: IEnumerator<Point2f>
Modifiers: public
Summary: Gets an enumerator that yields all texture coordinates in this collection.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates()
Return: bool
Modifiers: public
Summary: Scales the texture coordinates so the texture domains are [0,1] and eliminate any texture rotations.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(int direction)
Return: bool
Modifiers: public
Summary: Reverses one coordinate direction of the texture coordinates.
The region of the bitmap the texture uses does not change. Either Us or Vs direction is flipped. | Parameter: direction (int) | Parameter Summary: 0 = first texture coordinate is reversed.
1 = second texture coordinate is reversed.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, double s, double t)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: s (double) | Parameter Summary: S component of texture coordinate. | Parameter: t (double) | Parameter Summary: T component of texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, float s, float t)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: s (float) | Parameter Summary: S component of texture coordinate. | Parameter: t (float) | Parameter Summary: T component of texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, Point2f tc)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: tc (Point2f) | Parameter Summary: Texture coordinate point.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, Point3f tc)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: tc (Point3f) | Parameter Summary: Texture coordinate point.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Point2f[] textureCoordinates)
Return: bool
Modifiers: public
Summary: Sets all texture coordinates in one go.
Parameter: textureCoordinates (Point2f[])
Parameter Summary: Texture coordinates to assign to the mesh.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(TextureMapping mapping)
Return: bool
Modifiers: public
Summary: Set all texture coordinates based on a texture mapping function
Parameter: mapping (TextureMapping)
Parameter Summary: The new mapping type.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertices to a linear array of float in u,v order

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates()
Return: bool
Modifiers: public
Summary: Transposes texture coordinates.
The region of the bitmap the texture uses does not change. All texture coordinates rows (Us) become columns (Vs), and vice versa.

Class: Rhino.Geometry.Collections.MeshTopologyEdgeList
Summary: Represents an entry point to the list of edges in a mesh topology.

Property: Rhino.Geometry.Collections.MeshTopologyEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the amount of edges in this list.
Accessors: get

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.CollapseEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Replaces a mesh edge with a vertex at its center and update adjacent faces as needed.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.EdgeLine(int topologyEdgeIndex)
Return: Line
Modifiers: public
Summary: Gets the 3d line along an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: The topology edge index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(int topologyEdgeIndex, out bool faceOrientationMatchesEdgeDirection)
Return: int
Modifiers: public
Summary: Gets indices of faces connected to an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge that is queried.
Parameter: faceOrientationMatchesEdgeDirection (bool)
Parameter Summary: An array of Boolean values that explains whether each face direction matches the direction of the specified edge.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(int topologyEdgeIndex)
Return: int
Modifiers: public
Summary: Gets indices of faces connected to an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge that is queried.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgeIndex(int topologyVertex1, int topologyVertex2)
Return: int
Modifiers: public
Summary: Returns index of edge that connects topological vertices. returns -1 if no edge is found.
Parameter: topologyVertex1 (int)
Parameter Summary: The first topology vertex index.
Parameter: topologyVertex2 (int)
Parameter Summary: The second topology vertex index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(int faceIndex, out bool sameOrientation)
Return: int
Modifiers: public
Summary: Gets indices of edges that surround a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.
Parameter: sameOrientation (bool)
Parameter Summary: Same length as returned edge index array. For each edge, the sameOrientation value tells you if the edge orientation matches the face orientation (true), or is reversed (false) compared to it.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(int faceIndex)
Return: int
Modifiers: public
Summary: Gets indices of edges that surround a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetTopologyVertices(int topologyEdgeIndex)
Return: IndexPair
Modifiers: public
Summary: Gets the two topology vertices for a given topology edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsEdgeUnwelded(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Determines if the mesh edge is unwelded, or if the mesh faces that share the edge have unique vertex indices.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsHidden(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological edge is hidden. The mesh topology edge is hidden only if either of its mesh topology vertices is hidden.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsNgonInterior(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological edge is an interior ngon edge
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsSwappableEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Determines if a mesh edge index is valid input for <b>SwapEdge</b> .
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(int topologyEdgeIndex, double t)
Return: bool
Modifiers: public
Summary: Divides a mesh edge to create two or more triangles
Parameter: topologyEdgeIndex (int)
Parameter Summary: Edge to divide
Parameter: t (double)
Parameter Summary: Parameter along edge. This is the same as getting an EdgeLine and calling PointAt(t) on that line

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(int topologyEdgeIndex, Point3d point)
Return: bool
Modifiers: public
Summary: Divides a mesh edge to create two or more triangles
Parameter: topologyEdgeIndex (int)
Parameter Summary: Edge to divide
Parameter: point (Point3d)
Parameter Summary: Location to perform the split

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: If the edge is shared by two triangular face, then the edge is swapped.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Class: Rhino.Geometry.Collections.MeshTopologyVertexList
Summary: Provides access to the mesh topology vertices of a mesh. Topology vertices are sets of vertices in the MeshVertexList that can topologically be considered the same vertex.

Property: Rhino.Geometry.Collections.MeshTopologyVertexList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh topology vertices.
Accessors: get

Property: Rhino.Geometry.Collections.MeshTopologyVertexList.this[int index]
Return: Point3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. Setting a location adjusts all vertices in the mesh's vertex list that are defined by this topological vertex The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdge(int topologyVertexIndex, int edgeAtVertexIndex)
Return: int
Modifiers: public
Summary: Gets a particular edge that is connected to a topological vertex.
Call TopologyVertices.SortVertices before this if you are interested in ordered edges. | Parameter: topologyVertexIndex (int) | Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices. | Parameter: edgeAtVertexIndex (int) | Parameter Summary: Index of the edge at the vertex.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdges(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all edges that are connected to a given vertex.
Call TopologyVertices.SortVertices before this if you are interested in ordered edges. | Parameter: topologyVertexIndex (int) | Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdgesCount(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets the count of edges that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all faces that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(int topologyVertexIndex, bool sorted)
Return: int
Modifiers: public
Summary: Gets all topological vertices that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.
Parameter: sorted (bool)
Parameter Summary: if true, the vertices are returned in a radially sorted order.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all topological vertices that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.GetEnumerator()
Return: IEnumerator<Point3f>
Modifiers: public
Summary: Gets an enumerator that yields all topology vertices in this collection.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.IndicesFromFace(int faceIndex)
Return: int
Modifiers: public
Summary: Returns TopologyVertexIndices for a given mesh face index.
Parameter: faceIndex (int)
Parameter Summary: The index of a face to query.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.IsHidden(int topologyVertexIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological vertex is hidden. The mesh topology vertex is hidden if and only if all the ON_Mesh vertices it represents is hidden.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all indices of the mesh vertices that a given topology vertex represents.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices to query.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges()
Return: bool
Modifiers: public
Summary: Sorts the edge list for the mesh topology vertex list so that the edges are in radial order when you call ConnectedTopologyVertices. A non-manifold edge is treated as a boundary edge with respect to sorting. If any boundary or non-manifold edges end at the vertex, then the first edge will be a boundary or non-manifold edge.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(int topologyVertexIndex)
Return: bool
Modifiers: public
Summary: Sorts the edge list for as single mesh topology vertex so that the edges are in radial order when you call ConnectedTopologyVertices. A non-manifold edge is treated as a boundary edge with respect to sorting. If any boundary or non-manifold edges end at the vertex, then the first edge will be a boundary or non-manifold edge.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices>

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets the topology vertex index for an existing mesh vertex in the mesh's VertexList.
Parameter: vertexIndex (int)
Parameter Summary: Index of a vertex in the Mesh.Vertices.

Class: Rhino.Geometry.Collections.MeshVertexColorList
Summary: Provides access to the vertex colors of a mesh object.

Property: Rhino.Geometry.Collections.MeshVertexColorList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of vertex colors the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh colors.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.Tag
Return: MappingTag
Modifiers: public
Summary: Gets or sets a mapping information for the mesh associated with these vertex colors.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.this[int index]
Return: Color
Modifiers: public
Summary: Gets or sets the vertex color at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Add(Color color)
Return: int
Modifiers: public
Summary: Adds a new vertex color to the end of the color list.
Parameter: color (Color)
Parameter Summary: Color to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Add(int red, int green, int blue)
Return: int
Modifiers: public
Summary: Adds a new vertex color to the end of the color list.
Parameter: red (int)
Parameter Summary: Red component of color, must be in the 0~255 range.
Parameter: green (int)
Parameter Summary: Green component of color, must be in the 0~255 range.
Parameter: blue (int)
Parameter Summary: Blue component of color, must be in the 0~255 range.

Method: Rhino.Geometry.Collections.MeshVertexColorList.AddRange(IEnumerable<Color> colors)
Return: bool
Modifiers: public
Summary: Adds an enumerable of colors to the to the vertex color list. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(Color[] colors)
Return: bool
Modifiers: public
Summary: Appends a collection of colors to the vertex color list. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (Color[])
Parameter Summary: Colors to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Clear()
Return: void
Modifiers: public
Summary: Clears the vertex color list on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(Color baseColor)
Return: bool
Modifiers: public
Summary: Constructs a valid vertex color list consisting of a single color.
Parameter: baseColor (Color)
Parameter Summary: Color to apply to every vertex.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store vertex colors. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshVertexColorList.GetEnumerator()
Return: IEnumerator<Color>
Modifiers: public
Summary: Gets an enumerator that yields all colors in this collection.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(int index, Color color)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex color to set. If index equals Count, then the color will be appended. | Parameter: color (Color) | Parameter Summary: Color to set, Alpha channels will be ignored.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(int index, int red, int green, int blue)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex color to the color List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex color to set. If index equals Count, then the color will be appended. | Parameter: red (int) | Parameter Summary: Red component of vertex color. Value must be in the 0~255 range. | Parameter: green (int) | Parameter Summary: Green component of vertex color. Value must be in the 0~255 range. | Parameter: blue (int) | Parameter Summary: Blue component of vertex color. Value must be in the 0~255 range.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(MeshFace face, Color color)
Return: bool
Modifiers: public
Summary: Sets a color at the three or four vertex indices of a specified face.
Parameter: face (MeshFace)
Parameter Summary: A face to use to retrieve indices.
Parameter: color (Color)
Parameter Summary: A color.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColors(Color[] colors)
Return: bool
Modifiers: public
Summary: Sets all the vertex colors in one go. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (Color[])
Parameter Summary: Colors to set.

Method: Rhino.Geometry.Collections.MeshVertexColorList.ToARGBArray()
Return: int
Modifiers: public
Summary: Return colors as an array of integers with packed ARGB values

Class: Rhino.Geometry.Collections.MeshVertexList
Summary: Provides access to the vertices and vertex-related functionality of a mesh.

Property: Rhino.Geometry.Collections.MeshVertexList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of vertices the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh vertices.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.UseDoublePrecisionVertices
Return: bool
Modifiers: public
Summary: Set to True if the vertices should be stored in double precision
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.this[int index]
Return: Point3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexList.Align(IEnumerable<Mesh> meshes, double distance, IEnumerable<IEnumerable<bool>> whichVertices)
Return: int
Modifiers: public, static
Summary: Moves mesh vertices that belong to naked edges to neighboring vertices, within the specified distance.
This forces unaligned mesh vertices to the same location and is helpful to clean meshes for 3D printing.
See the _AlignMeshVertices Rhino command for more information. | Parameter: meshes (IEnumerable<Mesh>) | Parameter Summary: The enumerable of meshes that need to have vertices adjusted. | Parameter: distance (double) | Parameter Summary: Distance that should not be exceed when modifying the mesh. | Parameter: whichVertices (IEnumerable<IEnumerable<bool>>) | Parameter Summary: If not null, defines which vertices should be considered for adjustment.
If this parameter is non-null, then all items within it have to be non-None as well, defining for each mesh, which vertices to adjust.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(double x, double y, double z)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: x (double)
Parameter Summary: X component of new vertex coordinate.
Parameter: y (double)
Parameter Summary: Y component of new vertex coordinate.
Parameter: z (double)
Parameter Summary: Z component of new vertex coordinate.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(float x, float y, float z)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: x (float)
Parameter Summary: X component of new vertex coordinate.
Parameter: y (float)
Parameter Summary: Y component of new vertex coordinate.
Parameter: z (float)
Parameter Summary: Z component of new vertex coordinate.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(Point3d vertex)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: vertex (Point3d)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(Point3f vertex)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: vertex (Point3f)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.MeshVertexList.AddVertices(IEnumerable<Point3d> vertices)
Return: void
Modifiers: public
Summary: Adds a series of new vertices to the end of the vertex list.
This overload accepts double-precision points. | Parameter: vertices (IEnumerable<Point3d>) | Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.AddVertices(IEnumerable<Point3f> vertices)
Return: void
Modifiers: public
Summary: Adds a series of new vertices to the end of the vertex list.
This overload accepts single-precision points. | Parameter: vertices (IEnumerable<Point3f>) | Parameter Summary: A list, an array or any enumerable set of <b>Point3f</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.Align(double distance, IEnumerable<bool> whichVertices)
Return: int
Modifiers: public
Summary: Moves mesh vertices that belong to naked edges to neighboring vertices, within the specified distance.
This forces unaligned mesh vertices to the same location and is helpful to clean meshes for 3D printing.
See the _AlignMeshVertices Rhino command for more information. | Parameter: distance (double) | Parameter Summary: Distance that should not be exceed when modifying the mesh. | Parameter: whichVertices (IEnumerable<bool>) | Parameter Summary: If not null, defines which vertices should be considered for adjustment.

Method: Rhino.Geometry.Collections.MeshVertexList.Clear()
Return: void
Modifiers: public
Summary: Clears the Vertex list on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(bool ignoreNormals, bool ignoreAdditional)
Return: bool
Modifiers: public
Summary: Merges identical vertices.
Parameter: ignoreNormals (bool)
Parameter Summary: If true, vertex normals will not be taken into consideration when comparing vertices.
Parameter: ignoreAdditional (bool)
Parameter Summary: If true, texture coordinates, colors, and principal curvatures will not be taken into consideration when comparing vertices.

Method: Rhino.Geometry.Collections.MeshVertexList.CullUnused()
Return: int
Modifiers: public
Summary: Removes all vertices that are currently not used by the Face list.

Method: Rhino.Geometry.Collections.MeshVertexList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store faces. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets indices of all vertices that form "edges" with a given vertex index.
Parameter: vertexIndex (int)
Parameter Summary: The index of a vertex to query.

Method: Rhino.Geometry.Collections.MeshVertexList.GetEnumerator()
Return: IEnumerator<Point3f>
Modifiers: public
Summary: Gets an enumerator that yields all mesh vertices (points) in this collection.

Method: Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets a list of other vertices which are "topologically" identical to this vertex.
Parameter: vertexIndex (int)
Parameter Summary: A vertex index in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets a list of all of the faces that share a given vertex.
Parameter: vertexIndex (int)
Parameter Summary: The index of a vertex in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.Hide(int vertexIndex)
Return: void
Modifiers: public
Summary: Hides the vertex at the given index.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to hide.

Method: Rhino.Geometry.Collections.MeshVertexList.HideAll()
Return: void
Modifiers: public
Summary: Hides all vertices in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.IsHidden(int vertexIndex)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not a vertex is hidden.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to query.

Method: Rhino.Geometry.Collections.MeshVertexList.Point3dAt(int index)
Return: Point3d
Modifiers: public
Summary: Get double precision location at a given index

Method: Rhino.Geometry.Collections.MeshVertexList.Remove(IEnumerable<int> indices, bool shrinkFaces)
Return: bool
Modifiers: public
Summary: Removes the vertices at the given indices and all faces that reference those vertices.
Parameter: indices (IEnumerable<int>)
Parameter Summary: Vertex indices to remove.
Parameter: shrinkFaces (bool)
Parameter Summary: If true, quads that reference the deleted vertex will be converted to triangles.

Method: Rhino.Geometry.Collections.MeshVertexList.Remove(int index, bool shrinkFaces)
Return: bool
Modifiers: public
Summary: Removes the vertex at the given index and all faces that reference that index.
Parameter: index (int)
Parameter Summary: Index of vertex to remove.
Parameter: shrinkFaces (bool)
Parameter Summary: If true, quads that reference the deleted vertex will be converted to triangles.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, double x, double y, double z, bool updateNormals)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (double) | Parameter Summary: X component of vertex location. | Parameter: y (double) | Parameter Summary: Y component of vertex location. | Parameter: z (double) | Parameter Summary: Z component of vertex location. | Parameter: updateNormals (bool) | Parameter Summary: Set to True if you'd like the vertex and face normals impacted by the change updated.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (double) | Parameter Summary: X component of vertex location. | Parameter: y (double) | Parameter Summary: Y component of vertex location. | Parameter: z (double) | Parameter Summary: Z component of vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (float) | Parameter Summary: X component of vertex location. | Parameter: y (float) | Parameter Summary: Y component of vertex location. | Parameter: z (float) | Parameter Summary: Z component of vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, Point3d vertex)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: vertex (Point3d) | Parameter Summary: Vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, Point3f vertex)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: vertex (Point3f) | Parameter Summary: Vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.Show(int vertexIndex)
Return: void
Modifiers: public
Summary: Shows the vertex at the given index.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to show.

Method: Rhino.Geometry.Collections.MeshVertexList.ShowAll()
Return: void
Modifiers: public
Summary: Shows all vertices in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertices to a linear array of float in x,y,z order

Method: Rhino.Geometry.Collections.MeshVertexList.ToPoint3dArray()
Return: Point3d[]
Modifiers: public
Summary: Copies all vertices to a new array of <b>Point3d</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray()
Return: Point3f[]
Modifiers: public
Summary: Copies all vertices to a new array of <b>Point3f</b> .

Class: Rhino.Geometry.Collections.MeshVertexNormalList
Summary: Provides access to the Vertex Normals of a Mesh.

Property: Rhino.Geometry.Collections.MeshVertexNormalList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the amount of vertex normals that the list can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexNormalList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh vertex normals.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexNormalList.this[int index]
Return: Vector3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(double x, double y, double z)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: x (double)
Parameter Summary: X component of new vertex normal.
Parameter: y (double)
Parameter Summary: Y component of new vertex normal.
Parameter: z (double)
Parameter Summary: Z component of new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(float x, float y, float z)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: x (float)
Parameter Summary: X component of new vertex normal.
Parameter: y (float)
Parameter Summary: Y component of new vertex normal.
Parameter: z (float)
Parameter Summary: Z component of new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(Vector3d normal)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: normal (Vector3d)
Parameter Summary: new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(Vector3f normal)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: normal (Vector3f)
Parameter Summary: new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(Vector3f[] normals)
Return: bool
Modifiers: public
Summary: Appends a collection of normal vectors.
Parameter: normals (Vector3f[])
Parameter Summary: Normals to append.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Clear()
Return: void
Modifiers: public
Summary: Clears the vertex normal collection on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals()
Return: bool
Modifiers: public
Summary: Computes the vertex normals based on the physical shape of the mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store vertex normals. The list capacity will be 0 after this call.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Flip()
Return: void
Modifiers: public
Summary: Reverses direction of all vertex normals
This is the same as Mesh.Flip(true, false, false)

Method: Rhino.Geometry.Collections.MeshVertexNormalList.GetEnumerator()
Return: IEnumerator<Vector3f>
Modifiers: public
Summary: Gets an enumerator that yields all normals (vectors) in this collection.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: x (double) | Parameter Summary: X component of vertex normal. | Parameter: y (double) | Parameter Summary: Y component of vertex normal. | Parameter: z (double) | Parameter Summary: Z component of vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets or adds a normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: x (float) | Parameter Summary: X component of vertex normal. | Parameter: y (float) | Parameter Summary: Y component of vertex normal. | Parameter: z (float) | Parameter Summary: Z component of vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, Vector3d normal)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: normal (Vector3d) | Parameter Summary: The new normal at the index.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, Vector3f normal)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: normal (Vector3f) | Parameter Summary: The new normal at the index.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(Vector3f[] normals)
Return: bool
Modifiers: public
Summary: Sets all normal vectors in one go. This method destroys the current normal array if it exists.
Parameter: normals (Vector3f[])
Parameter Summary: Normals for the entire mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertex normals to a linear array of float in x,y,z order

Method: Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals()
Return: bool
Modifiers: public
Summary: Unitizes all vertex normals.

Class: Rhino.Geometry.Collections.MeshVertexStatusList
Summary: Provides access to status information relative to components of a mesh.

Property: Rhino.Geometry.Collections.MeshVertexStatusList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of hidden vertex information the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexStatusList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of hidden vertices. For this to be a valid part of a mesh, this count should be the same as the one of mesh vertices.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexStatusList.HiddenCount
Return: int
Modifiers: public
Summary: Gets a value indicating how many vertices have been set to hidden.
Accessors: get

Property: Rhino.Geometry.Collections.MeshVertexStatusList.this[int index]
Return: bool
Modifiers: public
Summary: Gets or sets the hidden value at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Add(bool hidden)
Return: void
Modifiers: public
Summary: Adds a new flag at the end of the list.
Parameter: hidden (bool)
Parameter Summary: True if vertex is hidden.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.AddRange(IEnumerable<bool> values)
Return: void
Modifiers: public
Summary: Appends an array, a list or any enumerable of flags to the end of the list.
Parameter: values (IEnumerable<bool>)
Parameter Summary: Hidden values to append.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Clear()
Return: void
Modifiers: public
Summary: Clears the hidden vertex list on the mesh. This results in a fully visible mesh.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Contains(bool hidden)
Return: bool
Modifiers: public
Summary: Determines if some vertices are hidden or some are shown.
Parameter: hidden (bool)
Parameter Summary: The value to be checked. True means some vertex is hidden.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.CopyTo(bool array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies to an array, starting at an index.
Parameter: array (bool)
Parameter Summary: The array to be copied into.
Parameter: arrayIndex (int)
Parameter Summary: The starting index in the array.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store hidden vertices. The list capacity will be 0 after this call.
Vertices will be immediately considered visible.
Subsequent calls can add new items.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.GetEnumerator()
Return: IEnumerator<bool>
Modifiers: public
Summary: Gets an enumerator that yields all flags in this collection.

Class: Rhino.Geometry.Collections.NurbsCurveKnotList
Summary: Provides access to the knot vector of a NURBS curve.

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.Count
Return: int
Modifiers: public
Summary: Total number of knots in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedEnd
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the knot vector is clamped at the end of the curve. Clamped curves are coincident with the first and last control-point. This requires fully multiple knots.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedStart
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the knot vector is clamped at the start of the curve. Clamped curves start at the first control-point. This requires fully multiple knots.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.KnotStyle
Return: KnotStyle
Modifiers: public
Summary: Gets the style of the knot vector.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the knot vector value at the given index.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(CurveEnd end)
Return: bool
Modifiers: public
Summary: Clamp end knots. Does not modify control point locations.
Parameter: end (CurveEnd)
Parameter Summary: Curve end to clamp.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.Contains(double item)
Return: bool
Modifiers: public
Summary: Returns an indication of the presence of a value in the knot list.
Parameter: item (double)
Parameter Summary: The item.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CopyTo(double array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the list to an array.
Parameter: array (double)
Parameter Summary: The array to copy to.
Parameter: arrayIndex (int)
Parameter Summary: The index into copy will begin.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform, periodic knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.EpsilonEquals(NurbsCurveKnotList other, double epsilon)
Return: bool
Modifiers: public
Summary: Checks that all values in the other list are sequentially equal within epsilon to the values in this list.
Parameter: other (NurbsCurveKnotList)
Parameter Summary: The other list.
Parameter: epsilon (double)
Parameter Summary: The epsilon value.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.IndexOf(double item)
Return: int
Modifiers: public
Summary: Returns the first item in the list.
Parameter: item (double)
Parameter Summary: The value.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(double value, int multiplicity)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.
Parameter: multiplicity (int)
Parameter Summary: Multiplicity of knot to insert.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(double value)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(int index)
Return: int
Modifiers: public
Summary: Get knot multiplicity.
Parameter: index (int)
Parameter Summary: Index of knot to query.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnotAt(double t)
Return: bool
Modifiers: public
Summary: Remove a knot from a curve and adjusts the remaining control points to maintain curve position as closely as possible.
Parameter: t (double)
Parameter Summary: The parameter on the curve that is closest to the knot to be removed.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnots(int index0, int index1)
Return: bool
Modifiers: public
Summary: Remove knots from a curve and adjusts the remaining control points to maintain curve position as closely as possible. The knots from Knots[index0] through Knots[index1 - 1] will be removed.
Parameter: index0 (int)
Parameter Summary: The starting knot index, where Degree-1 < index0 < index1 <= Points.Count-1.
Parameter: index1 (int)
Parameter Summary: The ending knot index, where Degree-1 < index0 < index1 <= Points.Count-1.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveMultipleKnots(int minimumMultiplicity, int maximumMultiplicity, double tolerance)
Return: int
Modifiers: public
Summary: Remove multiple knots from this curve.
Parameter: minimumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity > minimumKnotMultiplicity.
Parameter: maximumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity < maximumKnotMultiplicity.
Parameter: tolerance (double)
Parameter Summary: When you remove knots, the shape of the curve is changed. If tolerance is RhinoMath.UnsetValue, any amount of change is permitted. If tolerance is >=0, the maximum distance between the input and output curve is restricted to be <= tolerance.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.SuperfluousKnot(bool start)
Return: double
Modifiers: public
Summary: Computes the knots that are superfluous because they are not used in NURBs evaluation. These make it appear so that the first and last curve spans are different from interior spans.
http://wiki.mcneel.com/developer/onsuperfluousknot | Parameter: start (bool) | Parameter Summary: True if the query targets the first knot. Otherwise, the last knot.

Class: Rhino.Geometry.Collections.NurbsCurvePointList
Summary: Provides access to the control points of a NURBS curve.

Property: Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygonLength
Return: double
Modifiers: public
Summary: Gets the length of the polyline connecting all control points.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.Count
Return: int
Modifiers: public
Summary: Gets the number of control points in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.PointSize
Return: int
Modifiers: public
Summary: Returns the control point size, or the number of doubles per control point. For rational curves, PointSize = Curve.Dimension + 1. For non-rational curves, PointSize = Curve.Dimension.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.this[int index]
Return: ControlPoint
Modifiers: public
Summary: Gets or sets the control point location at the given index.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(double w0, double w1)
Return: bool
Modifiers: public
Summary: Use a combination of scaling and reparameterization to change the end weights to the specified values.
Parameter: w0 (double)
Parameter Summary: Weight for first control point.
Parameter: w1 (double)
Parameter Summary: Weight for last control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.Contains(ControlPoint item)
Return: bool
Modifiers: public
Summary: Determines if this list contains an item.
Parameter: item (ControlPoint)
Parameter Summary: The exact item to search for.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon()
Return: Polyline
Modifiers: public
Summary: Constructs a polyline through all the control points. Note that periodic curves generate a closed polyline withfewer points than control-points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.CopyTo(ControlPoint[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copied the list to an array.
Parameter: array (ControlPoint[])
Parameter Summary: The array to copy to.
Parameter: arrayIndex (int)
Parameter Summary: The index in which the copy will begin.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.EpsilonEquals(NurbsCurvePointList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(int index, out Point3d point)
Return: bool
Modifiers: public
Summary: Gets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to get.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(int index, out Point4d point)
Return: bool
Modifiers: public
Summary: Gets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to get.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetWeight(int index)
Return: double
Modifiers: public
Summary: Gets the weight of a control point at the given index. Note, if the curve is non-rational, the weight will be 1.0.
Parameter: index (int)
Parameter Summary: Index of control point to get.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.IndexOf(ControlPoint item)
Return: int
Modifiers: public
Summary: Gets the index of a control point, or -1.
Parameter: item (ControlPoint)
Parameter Summary: The exact item to search for.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational()
Return: bool
Modifiers: public
Summary: Converts the curve to a Non-rational NURBS curve. Non-rational curves have unweighted control points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational()
Return: bool
Modifiers: public
Summary: Converts the curve to a Rational NURBS curve. Rational NURBS curves have weighted control points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, double x, double y, double z, double weight)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point3d point, double weight)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point and weight at a given index. The 4-D representation is (x*w, y*w, z*w, w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point3d)
Parameter Summary: Coordinates of the control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point3d point)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point4d point)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetWeight(int index, double weight)
Return: bool
Modifiers: public
Summary: Sets the weight of a control point at the given index Note, if the curve is non-rational, it will be converted to rational.
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: weight (double)
Parameter Summary: The control point weight.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.UVNDirectionsAt(int index, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS curve control point similar to the method used by Rhino's MoveUVN command.
Parameter: index (int)
Parameter Summary: Index of control point.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ValidateSpacing(double closeTolerance, double stackTolerance, out int closeIndices, out int stackedIndices)
Return: bool
Modifiers: public
Summary: Simple check of distance between adjacent control points
Parameter: closeTolerance (double)
Parameter Summary: tolerance to use for determining if control points are 'close'
Parameter: stackTolerance (double)
Parameter Summary: tolerance to use for determining if control points are 'stacked'
Parameter: closeIndices (int)
Parameter Summary: indices of 'close' points are returned in this array
Parameter: stackedIndices (int)
Parameter Summary: indices of 'stacked' points are returned in this array

Class: Rhino.Geometry.Collections.NurbsSurfaceKnotList
Summary: Provides access to the knot vector of a NURBS surface.

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtEnd
Return: bool
Modifiers: public
Summary: Determines if a knot vector is clamped.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtStart
Return: bool
Modifiers: public
Summary: Determines if a knot vector is clamped.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.Count
Return: int
Modifiers: public
Summary: Gets the total number of knots in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotStyle
Return: KnotStyle
Modifiers: public
Summary: Gets the style of the knot vector.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the knot vector value at the given index.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform, periodic knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.EpsilonEquals(NurbsSurfaceKnotList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(double value, int multiplicity)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.
Parameter: multiplicity (int)
Parameter Summary: Multiplicity of knot to insert.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(double value)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(int index)
Return: int
Modifiers: public
Summary: Get knot multiplicity.
Parameter: index (int)
Parameter Summary: Index of knot to query.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnots(int index0, int index1)
Return: bool
Modifiers: public
Summary: Remove knots from the knot vector and adjusts the remaining control points to maintain surface position as closely as possible. The knots from Knots[index0] through Knots[index1 - 1] will be removed.
Parameter: index0 (int)
Parameter Summary: The starting knot index, where Degree-1 < index0 < index1 <= Points.Count-1.
Parameter: index1 (int)
Parameter Summary: The ending knot index, where Degree-1 < index0 < index1 <= Points.Count-1.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnotsAt(double u, double v)
Return: bool
Modifiers: public
Summary: Remove knots from the surface and adjusts the remaining control points to maintain surface position as closely as possible.
Parameter: u (double)
Parameter Summary: The u parameter on the surface that is closest to the knot to be removed.
Parameter: v (double)
Parameter Summary: The v parameter on the surface that is closest to the knot to be removed.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveMultipleKnots(int minimumMultiplicity, int maximumMultiplicity, double tolerance)
Return: int
Modifiers: public
Summary: Remove multiple knots from this surface
Parameter: minimumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity > minimumKnotMultiplicity
Parameter: maximumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity < maximumKnotMultiplicity
Parameter: tolerance (double)
Parameter Summary: When you remove knots, the shape of the surface is changed. If tolerance is RhinoMath.UnsetValue, any amount of change is permitted. If tolerance is >=0, the maximum distance between the input and output surface is restricted to be <= tolerance.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.SuperfluousKnot(bool start)
Return: double
Modifiers: public
Summary: Computes the knots that are superfluous because they are not used in NURBs evaluation. These make it appear so that the first and last surface spans are different from interior spans.
http://wiki.mcneel.com/developer/onsuperfluousknot | Parameter: start (bool) | Parameter Summary: True if the query targets the first knot. Otherwise, the last knot.

Class: Rhino.Geometry.Collections.NurbsSurfacePointList
Summary: Provides access to the control points of a NURBS surface.

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.CountU
Return: int
Modifiers: public
Summary: Gets the number of control points in the U direction of this surface.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.CountV
Return: int
Modifiers: public
Summary: Gets the number of control points in the V direction of this surface.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.PointSize
Return: int
Modifiers: public
Summary: Returns the control point size, or the number of doubles per control point. For rational curves, PointSize = Surface.Dimension + 1. For non-rational curves, PointSize = Surface.Dimension.
Accessors: get

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.EpsilonEquals(NurbsSurfacePointList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(int u, int v)
Return: ControlPoint
Modifiers: public
Summary: Gets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(int u, int v)
Return: Point2d
Modifiers: public
Summary: Gets the 2-D Greville point associated with the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(int u, int v, out Point3d point)
Return: bool
Modifiers: public
Summary: Gets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(int u, int v, out Point4d point)
Return: bool
Modifiers: public
Summary: Gets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetWeight(int u, int v)
Return: double
Modifiers: public
Summary: Gets the weight of a control point at the given (u, v) index. Note, if the surface is non-rational, the weight will be 1.0.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(int u, int v, ControlPoint cp)
Return: bool
Modifiers: public
Summary: Sets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: cp (ControlPoint)
Parameter Summary: The control point to set.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(int u, int v, Point3d cp)
Return: bool
Modifiers: public
Summary: Sets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: cp (Point3d)
Parameter Summary: The control point location to set (weight is assumed to be 1.0).

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, double x, double y, double z, double weight)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point3d point, double weight)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point and weight at a given index. The 4-D representation is (x*w, y*w, z*w, w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinates of the control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point3d point)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point4d point)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetWeight(int u, int v, double weight)
Return: bool
Modifiers: public
Summary: Sets the weight of a control point at the given (u, v) index. Note, if the surface is non-rational, it will be converted to rational.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.
Parameter: weight (double)
Parameter Summary: The control point weight.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.UVNDirectionsAt(int u, int v, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS surface control point similar to the method used by Rhino's MoveUVN command.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.ValidateSpacing(double closeTolerance, double stackTolerance, out IndexPair[] closeIndices, out IndexPair[] stackedIndices)
Return: bool
Modifiers: public
Summary: Simple check of distance between adjacent control points

Class: Rhino.Geometry.Collections.SubDEdgeList
Summary: All edges in a SubD

Property: Rhino.Geometry.Collections.SubDEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD edges.
Accessors: get

Method: Rhino.Geometry.Collections.SubDEdgeList.Add(SubDEdgeTag tag, SubDVertex v0, SubDVertex v1)
Return: SubDEdge
Modifiers: public
Summary: Add a new edge to the list.
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag, such as smooth or corner.
Parameter: v0 (SubDVertex)
Parameter Summary: First vertex.
Parameter: v1 (SubDVertex)
Parameter Summary: Second vertex.

Method: Rhino.Geometry.Collections.SubDEdgeList.Find(int id)
Return: SubDEdge
Modifiers: public
Summary: Find an edge in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDEdgeList.Find(uint id)
Return: SubDEdge
Modifiers: public
Summary: Find an edge in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDEdgeList.GetEnumerator()
Return: IEnumerator<SubDEdge>
Modifiers: public
Summary: Implementation of IEnumerable

Method: Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(IEnumerable<int> edgeIndices, SubDEdgeTag tag)
Return: void
Modifiers: public
Summary: Set edge tags for a list of edges. Useful for adding creases to SubDs
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: list of indices for the edges to set tags on
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag

Method: Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(IEnumerable<SubDEdge> edges, SubDEdgeTag tag)
Return: void
Modifiers: public
Summary: Set edge tags for a list of edges. Useful for adding creases to SubDs
Parameter: edges (IEnumerable<SubDEdge>)
Parameter Summary: list of edges to set a specific tag on
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag

Class: Rhino.Geometry.Collections.SubDFaceList
Summary: All faces in a SubD

Property: Rhino.Geometry.Collections.SubDFaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD faces.
Accessors: get

Method: Rhino.Geometry.Collections.SubDFaceList.Find(int id)
Return: SubDFace
Modifiers: public
Summary: Find a face in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDFaceList.Find(uint id)
Return: SubDFace
Modifiers: public
Summary: Find a face in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDFaceList.GetEnumerator()
Return: IEnumerator<SubDFace>
Modifiers: public
Summary: Implementation of IEnumerable

Class: Rhino.Geometry.Collections.SubDVertexList
Summary: Provides access to all the vertices and vertex-related functionality of a SubD

Property: Rhino.Geometry.Collections.SubDVertexList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD vertices.
Accessors: get

Property: Rhino.Geometry.Collections.SubDVertexList.First
Return: SubDVertex
Modifiers: public
Summary: First vertex in this linked list of vertices
Accessors: get

Method: Rhino.Geometry.Collections.SubDVertexList.Add(SubDVertexTag tag, Point3d vertex)
Return: SubDVertex
Modifiers: public
Summary: Add a new vertex to the end of the Vertex list.
Parameter: tag (SubDVertexTag)
Parameter Summary: The type of vertex tag, such as smooth or corner.
Parameter: vertex (Point3d)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.SubDVertexList.Find(int id)
Return: SubDVertex
Modifiers: public
Summary: Find a vertex in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDVertexList.Find(uint id)
Return: SubDVertex
Modifiers: public
Summary: Find a vertex in this SubD with a given id

# Namespace: Rhino.Geometry.Intersect

Class: Rhino.Geometry.Intersect.CurveIntersections
Summary: Maintains an ordered list of Curve Intersection results.

Constructor: Rhino.Geometry.Intersect.CurveIntersections.CurveIntersections()
Summary: Initializes a new instance of the CurveIntersections class

Property: Rhino.Geometry.Intersect.CurveIntersections.Count
Return: int
Modifiers: public
Summary: Gets the number of recorded intersection events.
Accessors: get

Property: Rhino.Geometry.Intersect.CurveIntersections.this[int index]
Return: IntersectionEvent
Modifiers: public
Summary: Gets the intersection event data at the given index.

Method: Rhino.Geometry.Intersect.CurveIntersections.CopyTo(IntersectionEvent[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies all intersection results into another array, departing at an index in the target array.
Parameter: array (IntersectionEvent[])
Parameter Summary: The target array. This value cannot be null.
Parameter: arrayIndex (int)
Parameter Summary: Zero-based index in which to start the copy.

Method: Rhino.Geometry.Intersect.CurveIntersections.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Intersect.CurveIntersections.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Intersect.CurveIntersections.GetEnumerator()
Return: IEnumerator<IntersectionEvent>
Modifiers: public
Summary: Returns an enumerator that is capable of yielding all IntersectionEvents in the collection.

Class: Rhino.Geometry.Intersect.Intersection
Summary: Provides static methods for the computation of intersections, projections, sections and similar.

Constructor: Rhino.Geometry.Intersect.Intersection.Intersection()
Summary: Initializes a new instance of the Intersection class

Property: Rhino.Geometry.Intersect.Intersection.MeshIntersectionsTolerancesCoefficient
Return: double
Modifiers: public, static
Summary: Offers a requested adjustment coefficient for mesh-mesh intersections tolerances. The value can be used to multiply the document absolute tolerance.
This is only a UI value; it is up to developer to honor (or not) this request, depending on application needs. | Accessors: get set

Method: Rhino.Geometry.Intersect.Intersection.ArcArc(Arc arcA, Arc arcB, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: ArcArcIntersection
Modifiers: public, static
Summary: Intersects two arcs using exact calculations.
Parameter: arcA (Arc)
Parameter Summary: First arc to intersect.
Parameter: arcB (Arc)
Parameter Summary: Second arc to intersect.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.BrepBrep(Brep brepA, Brep brepB, double tolerance, bool joinCurves, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Breps.
Parameter: brepA (Brep)
Parameter Summary: First Brep for intersection.
Parameter: brepB (Brep)
Parameter Summary: Second Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: joinCurves (bool)
Parameter Summary: If true, join the resulting curves where possible.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepBrep(Brep brepA, Brep brepB, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Breps.
Parameter: brepA (Brep)
Parameter Summary: First Brep for intersection.
Parameter: brepB (Brep)
Parameter Summary: Second Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepPlane(Brep brep, Plane plane, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep with an (infinite) plane.
Parameter: brep (Brep)
Parameter Summary: Brep to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersections.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepSurface(Brep brep, Surface surface, double tolerance, bool joinCurves, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep and a Surface.
Parameter: brep (Brep)
Parameter Summary: A brep to be intersected.
Parameter: surface (Surface)
Parameter Summary: A surface to be intersected.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: joinCurves (bool)
Parameter Summary: If true, join the resulting curves where possible.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.BrepSurface(Brep brep, Surface surface, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep and a Surface.
Parameter: brep (Brep)
Parameter Summary: A brep to be intersected.
Parameter: surface (Surface)
Parameter Summary: A surface to be intersected.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.CircleCircle(Circle circleA, Circle circleB, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: CircleCircleIntersection
Modifiers: public, static
Summary: Intersects two circles using exact calculations.
Parameter: circleA (Circle)
Parameter Summary: First circle to intersect.
Parameter: circleB (Circle)
Parameter Summary: Second circle to intersect.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, double angleTolerance, out double t)
Return: bool
Modifiers: public, static
Summary: Intersect a curve with a Brep. This function returns the intersection parameters on the curve.
Parameter: curve (Curve)
Parameter Summary: Curve.
Parameter: brep (Brep)
Parameter Summary: Brep.
Parameter: tolerance (double)
Parameter Summary: Absolute tolerance for intersections.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance in radians.
Parameter: t (double)
Parameter Summary: Curve parameters at intersections.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints, out double curveParameters)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep. This function returns the 3D points of intersection, curve parameters at the intersection locations, and 3D overlap curves. If an error occurs while processing overlap curves, this function will return false, but it will still provide partial results.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: brep (Brep)
Parameter Summary: Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: The overlap curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.
Parameter: curveParameters (double)
Parameter Summary: The intersection curve parameters will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep. This function returns the 3D points of intersection and 3D overlap curves. If an error occurs while processing overlap curves, this function will return false, but it will still provide partial results.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: brep (Brep)
Parameter Summary: Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: The overlap curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrepFace(Curve curve, BrepFace face, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep face.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: face (BrepFace)
Parameter Summary: A brep face.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: A overlap curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: A points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.CurveCurve(Curve curveA, Curve curveB, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the intersections between two curves.
Parameter: curveA (Curve)
Parameter Summary: First curve for intersection.
Parameter: curveB (Curve)
Parameter Summary: Second curve for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveCurveValidate(Curve curveA, Curve curveB, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the intersections between two curves.
Parameter: curveA (Curve)
Parameter Summary: First curve for intersection.
Parameter: curveB (Curve)
Parameter Summary: Second curve for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.CurveLine(Curve curve, Line line, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and an infinite line.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: line (Line)
Parameter Summary: Infinite line to intersect.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurvePlane(Curve curve, Plane plane, double tolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve with an (infinite) plane.
Parameter: curve (Curve)
Parameter Summary: Curve to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during intersection.

Method: Rhino.Geometry.Intersect.Intersection.CurveSelf(Curve curve, double tolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the places where a curve intersects itself.
Parameter: curve (Curve)
Parameter Summary: Curve for self-intersections.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches itself to within tolerance, an intersection is assumed.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurface(Curve curve, Interval curveDomain, Surface surface, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a sub-curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: curveDomain (Interval)
Parameter Summary: Domain of sub-curve to take into consideration for Intersections.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurface(Curve curve, Surface surface, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(Curve curve, Interval curveDomain, Surface surface, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a sub-curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: curveDomain (Interval)
Parameter Summary: Domain of sub-curve to take into consideration for Intersections.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(Curve curve, Surface surface, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.LineBox(Line line, BoundingBox box, double tolerance, out Interval lineParameters)
Return: bool
Modifiers: public, static
Summary: Intersects an infinite line and an axis aligned bounding box.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: box (BoundingBox)
Parameter Summary: BoundingBox to intersect.
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then the intersection is performed against a box that has each side moved out by tolerance.
Parameter: lineParameters (Interval)
Parameter Summary: The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineBox(Line line, Box box, double tolerance, out Interval lineParameters)
Return: bool
Modifiers: public, static
Summary: Intersects an infinite line with a box volume.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: box (Box)
Parameter Summary: Box to intersect.
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then the intersection is performed against a box that has each side moved out by tolerance.
Parameter: lineParameters (Interval)
Parameter Summary: The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineCircle(Line line, Circle circle, out double t1, out Point3d point1, out double t2, out Point3d point2)
Return: LineCircleIntersection
Modifiers: public, static
Summary: Intersects a line with a circle using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: circle (Circle)
Parameter Summary: Circle for intersection.
Parameter: t1 (double)
Parameter Summary: Parameter on line for first intersection.
Parameter: point1 (Point3d)
Parameter Summary: Point on circle closest to first intersection.
Parameter: t2 (double)
Parameter Summary: Parameter on line for second intersection.
Parameter: point2 (Point3d)
Parameter Summary: Point on circle closest to second intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineCylinder(Line line, Cylinder cylinder, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: LineCylinderIntersection
Modifiers: public, static
Summary: Intersects a line with a cylinder using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder for intersection.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.LineLine(Line lineA, Line lineB, out double a, out double b, double tolerance, bool finiteSegments)
Return: bool
Modifiers: public, static
Summary: Intersects two lines.
Parameter: lineA (Line)
Parameter Summary: First line for intersection.
Parameter: lineB (Line)
Parameter Summary: Second line for intersection.
Parameter: a (double)
Parameter Summary: Parameter on lineA that is closest to LineB. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
Parameter: b (double)
Parameter Summary: Parameter on lineB that is closest to LineA. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then an intersection is reported only if the distance between the points is <= tolerance. If tolerance <= 0.0, then the closest point between the lines is reported.
Parameter: finiteSegments (bool)
Parameter Summary: If true, the input lines are treated as finite segments. If false, the input lines are treated as infinite lines.

Method: Rhino.Geometry.Intersect.Intersection.LineLine(Line lineA, Line lineB, out double a, out double b)
Return: bool
Modifiers: public, static
Summary: Find the unique closest-points pair between two infinite lines, if it exists.
Parameter: lineA (Line)
Parameter Summary: First line.
Parameter: lineB (Line)
Parameter Summary: Second line.
Parameter: a (double)
Parameter Summary: Parameter on lineA that is closest to lineB.
Parameter: b (double)
Parameter Summary: Parameter on lineB that is closest to lineA. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)

Method: Rhino.Geometry.Intersect.Intersection.LinePlane(Line line, Plane plane, out double lineParameter)
Return: bool
Modifiers: public, static
Summary: Intersects a line and a plane. This function only returns True if the intersection result is a single point (i.e. if the line is coincident with the plane then no intersection is assumed).
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: lineParameter (double)
Parameter Summary: Parameter on line where intersection occurs. If the parameter is not within the {0, 1} Interval then the finite segment does not intersect the plane.

Method: Rhino.Geometry.Intersect.Intersection.LineSphere(Line line, Sphere sphere, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: LineSphereIntersection
Modifiers: public, static
Summary: Intersects a line with a sphere using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: sphere (Sphere)
Parameter Summary: Sphere for intersection.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.MeshLine(Mesh mesh, Line line, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line. The points are not necessarily sorted.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call. Empty if nothing is found.

Method: Rhino.Geometry.Intersect.Intersection.MeshLine(Mesh mesh, Line line)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh

Method: Rhino.Geometry.Intersect.Intersection.MeshLineSorted(Mesh mesh, Line line, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line. Points are sorted along the line.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call. Empty if nothing is found.

Method: Rhino.Geometry.Intersect.Intersection.MeshMesh(IEnumerable<Mesh> meshes, double tolerance, out Polyline[] intersections, bool overlapsPolylines, out Polyline[] overlapsPolylinesResult, bool overlapsMesh, out Mesh overlapsMeshResult, FileIO.TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: bool
Modifiers: public, static
Summary: Intersects meshes. Overlaps and perforations are provided in the output list.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The mesh input list. This cannot be null. Null entries are tolerated.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: intersections (Polyline[])
Parameter Summary: Returns the intersections.
Parameter: overlapsPolylines (bool)
Parameter Summary: If true, overlaps are computed and returned.
Parameter: overlapsPolylinesResult (Polyline[])
Parameter Summary: If requested, overlaps are returned here.
Parameter: overlapsMesh (bool)
Parameter Summary: If true, an overlaps mesh is computed and returned.
Parameter: overlapsMeshResult (Mesh)
Parameter Summary: If requested, overlaps are returned here.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A text log, or null.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token to stop the computation at a given point.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter to inform the user about progress, or null. The reported value is indicative.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshAccurate(Mesh meshA, Mesh meshB, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects two meshes. Overlaps and near misses are handled. This is an old method kept for compatibility.
Parameter: meshA (Mesh)
Parameter Summary: First mesh for intersection.
Parameter: meshB (Mesh)
Parameter Summary: Second mesh for intersection.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshFast(Mesh meshA, Mesh meshB)
Return: Line[]
Modifiers: public, static
Summary: This is an old overload kept for compatibility. Overlaps and near misses are ignored.
Parameter: meshA (Mesh)
Parameter Summary: First mesh for intersection.
Parameter: meshB (Mesh)
Parameter Summary: Second mesh for intersection.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshPredicate(IEnumerable<Mesh> meshes, double tolerance, out int pairs, FileIO.TextLog textLog)
Return: bool
Modifiers: public, static
Summary: Determines if meshes intersect or overlap.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The mesh input list. This cannot be null. Null entries are tolerated.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: pairs (int)
Parameter Summary: An array containing pairs of meshes that intersect.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A text log, or null.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, IEnumerable<Plane> planes)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with a collection of infinite planes.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: planes (IEnumerable<Plane>)
Parameter Summary: Planes to intersect with.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, MeshIntersectionCache cache, IEnumerable<Plane> planes, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with a collection of infinite planes.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: cache (MeshIntersectionCache)
Parameter Summary: Intersection cache for the mesh.
Parameter: planes (IEnumerable<Plane>)
Parameter Summary: Planes to intersect with.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, MeshIntersectionCache cache, Plane plane, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with an infinite plane.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: cache (MeshIntersectionCache)
Parameter Summary: Intersection cache for mesh.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, Plane plane)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with an infinite plane.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.

Method: Rhino.Geometry.Intersect.Intersection.MeshPolyline(Mesh mesh, PolylineCurve curve, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersection of a mesh and a polyline. Starting from version 7, points are always sorted along the polyline.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: curve (PolylineCurve)
Parameter Summary: A polyline curves to intersect.
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.MeshPolylineSorted(Mesh mesh, PolylineCurve curve, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersection of a mesh and a polyline. Points are guaranteed to be sorted along the polyline.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: curve (PolylineCurve)
Parameter Summary: A polyline curves to intersect.
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.MeshRay(Mesh mesh, Ray3d ray, out int meshFaceIndices)
Return: double
Modifiers: public, static
Summary: Finds the first intersection of a ray with a mesh.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: ray (Ray3d)
Parameter Summary: A ray to be casted.
Parameter: meshFaceIndices (int)
Parameter Summary: faces on mesh that ray intersects.

Method: Rhino.Geometry.Intersect.Intersection.MeshRay(Mesh mesh, Ray3d ray)
Return: double
Modifiers: public, static
Summary: Finds the first intersection of a ray with a mesh.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: ray (Ray3d)
Parameter Summary: A ray to be casted.

Method: Rhino.Geometry.Intersect.Intersection.PlaneBoundingBox(Plane plane, BoundingBox boundingBox, out Polyline polyline)
Return: bool
Modifiers: public, static
Summary: Intersects a plane and a bounding box.
Parameter: plane (Plane)
Parameter Summary: The plane.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The bounding box.
Parameter: polyline (Polyline)
Parameter Summary: The output polyline if successful.

Method: Rhino.Geometry.Intersect.Intersection.PlaneCircle(Plane plane, Circle circle, out double firstCircleParameter, out double secondCircleParameter)
Return: PlaneCircleIntersection
Modifiers: public, static
Summary: Intersects a plane with a circle using exact calculations.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: circle (Circle)
Parameter Summary: Circe to intersect.
Parameter: firstCircleParameter (double)
Parameter Summary: First intersection parameter on circle if successful or RhinoMath.UnsetValue if not.
Parameter: secondCircleParameter (double)
Parameter Summary: Second intersection parameter on circle if successful or RhinoMath.UnsetValue if not.

Method: Rhino.Geometry.Intersect.Intersection.PlanePlane(Plane planeA, Plane planeB, out Line intersectionLine)
Return: bool
Modifiers: public, static
Summary: Intersects two planes and return the intersection line. If the planes are parallel or coincident, no intersection is assumed.
Parameter: planeA (Plane)
Parameter Summary: First plane for intersection.
Parameter: planeB (Plane)
Parameter Summary: Second plane for intersection.
Parameter: intersectionLine (Line)
Parameter Summary: If this function returns true, the intersectionLine parameter will return the line where the planes intersect.

Method: Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(Plane planeA, Plane planeB, Plane planeC, out Point3d intersectionPoint)
Return: bool
Modifiers: public, static
Summary: Intersects three planes to find the single point they all share.
Parameter: planeA (Plane)
Parameter Summary: First plane for intersection.
Parameter: planeB (Plane)
Parameter Summary: Second plane for intersection.
Parameter: planeC (Plane)
Parameter Summary: Third plane for intersection.
Parameter: intersectionPoint (Point3d)
Parameter Summary: Point where all three planes converge.

Method: Rhino.Geometry.Intersect.Intersection.PlaneSphere(Plane plane, Sphere sphere, out Circle intersectionCircle)
Return: PlaneSphereIntersection
Modifiers: public, static
Summary: Intersects a plane with a sphere using exact calculations.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to intersect.
Parameter: intersectionCircle (Circle)
Parameter Summary: Intersection result.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToBreps(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The breps projection targets.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The points to project.
Parameter: direction (Vector3d)
Parameter Summary: The direction to project.
Parameter: tolerance (double)
Parameter Summary: The tolerance used for intersections.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToBrepsEx(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int indices)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The breps projection targets.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The points to project.
Parameter: direction (Vector3d)
Parameter Summary: The direction to project.
Parameter: tolerance (double)
Parameter Summary: The tolerance used for intersections.
Parameter: indices (int)
Parameter Summary: Return points[i] is a projection of points[indices[i]]

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshes(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: the meshes to project on to.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: the points to project.
Parameter: direction (Vector3d)
Parameter Summary: the direction to project.
Parameter: tolerance (double)
Parameter Summary: Projection tolerances used for culling close points and for line-mesh intersection.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshesEx(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int indices)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: the meshes to project on to.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: the points to project.
Parameter: direction (Vector3d)
Parameter Summary: the direction to project.
Parameter: tolerance (double)
Parameter Summary: Projection tolerances used for culling close points and for line-mesh intersection.
Parameter: indices (int)
Parameter Summary: Return points[i] is a projection of points[indices[i]]

Method: Rhino.Geometry.Intersect.Intersection.RayShoot(IEnumerable<GeometryBase> geometry, Ray3d ray, int maxReflections)
Return: RayShootEvent[]
Modifiers: public, static
Summary: Computes point intersections that occur when shooting a ray to a collection of surfaces and Breps.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: The collection of surfaces and Breps to intersect. Trims are ignored on Breps.
Parameter: ray (Ray3d)
Parameter Summary: >A ray used in intersection.
Parameter: maxReflections (int)
Parameter Summary: The maximum number of reflections. This value should be any value between 1 and 1000, inclusive.

Method: Rhino.Geometry.Intersect.Intersection.RayShoot(Ray3d ray, IEnumerable<GeometryBase> geometry, int maxReflections)
Return: Point3d[]
Modifiers: public, static
Summary: Computes point intersections that occur when shooting a ray to a collection of surfaces and Breps.
Parameter: ray (Ray3d)
Parameter Summary: A ray used in intersection.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Only Surface and Brep objects are currently supported. Trims are ignored on Breps.
Parameter: maxReflections (int)
Parameter Summary: The maximum number of reflections. This value should be any value between 1 and 1000, inclusive.

Method: Rhino.Geometry.Intersect.Intersection.SphereSphere(Sphere sphereA, Sphere sphereB, out Circle intersectionCircle)
Return: SphereSphereIntersection
Modifiers: public, static
Summary: Intersects two spheres using exact calculations.
Parameter: sphereA (Sphere)
Parameter Summary: First sphere to intersect.
Parameter: sphereB (Sphere)
Parameter Summary: Second sphere to intersect.
Parameter: intersectionCircle (Circle)
Parameter Summary: If intersection is a point, then that point will be the center, radius 0.

Method: Rhino.Geometry.Intersect.Intersection.SurfaceSurface(Surface surfaceA, Surface surfaceB, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: First Surface for intersection.
Parameter: surfaceB (Surface)
Parameter Summary: Second Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Class: Rhino.Geometry.Intersect.IntersectionEvent
Summary: Provides all the information for a single Curve Intersection event.

Constructor: Rhino.Geometry.Intersect.IntersectionEvent.IntersectionEvent()
Summary: Initializes a new instance of the IntersectionEvent class

Property: Rhino.Geometry.Intersect.IntersectionEvent.IsOverlap
Return: bool
Modifiers: public
Summary: All curve intersection events are either a single point or an overlap.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.IsPoint
Return: bool
Modifiers: public
Summary: All curve intersection events are either a single point or an overlap.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.OverlapA
Return: Interval
Modifiers: public
Summary: Gets the interval on curve A where the overlap occurs. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.OverlapB
Return: Interval
Modifiers: public
Summary: Gets the interval on curve B where the overlap occurs. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.ParameterA
Return: double
Modifiers: public
Summary: Gets the parameter on Curve A where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.ParameterB
Return: double
Modifiers: public
Summary: Gets the parameter on Curve B where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointA
Return: Point3d
Modifiers: public
Summary: Gets the point on Curve A where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointA2
Return: Point3d
Modifiers: public
Summary: Gets the end point of the overlap on Curve A. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointB
Return: Point3d
Modifiers: public
Summary: Gets the point on Curve B (or Surface B) where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointB2
Return: Point3d
Modifiers: public
Summary: Gets the end point of the overlap on Curve B (or Surface B). If the intersection type is not overlap, this value is meaningless.
Accessors: get

Method: Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(IntersectionEvent eventA, IntersectionEvent eventB, double relativePointTolerance, Rhino.FileIO.TextLog log)
Return: bool
Modifiers: public, static
Summary: Compare intersection events.
Parameter: eventA (IntersectionEvent)
Parameter Summary: The first intersection event to compare.
Parameter: eventB (IntersectionEvent)
Parameter Summary: The second intersection event to compare.
Parameter: relativePointTolerance (double)
Parameter Summary: The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.
Parameter: log (Rhino.FileIO.TextLog)
Parameter Summary: If not None and False is returned, then a description of the error is appended to log.

Method: Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(IntersectionEvent eventA, IntersectionEvent eventB, double relativePointTolerance)
Return: bool
Modifiers: public, static
Summary: Compare intersection events.
Parameter: eventA (IntersectionEvent)
Parameter Summary: The first intersection event to compare.
Parameter: eventB (IntersectionEvent)
Parameter Summary: The second intersection event to compare.
Parameter: relativePointTolerance (double)
Parameter Summary: The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.

Method: Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(out Interval uDomain, out Interval vDomain)
Return: void
Modifiers: public
Summary: If this instance records a Curve|Surface intersection event, andthe intersection type ifoverlap, then use this function to get the U and V domains on the surface where the overlap occurs.
Parameter: uDomain (Interval)
Parameter Summary: Domain along surface U direction for overlap event.
Parameter: vDomain (Interval)
Parameter Summary: Domain along surface V direction for overlap event.

Method: Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(out double u, out double v)
Return: void
Modifiers: public
Summary: If this instance records a Curve|Surface intersection event, andthe intersection type ispoint, then use this function to get the U and V parameters on the surface where the intersection occurs.
Parameter: u (double)
Parameter Summary: Parameter on surface u direction where the intersection occurs.
Parameter: v (double)
Parameter Summary: Parameter on surface v direction where the intersection occurs.

Class: Rhino.Geometry.Intersect.MeshClash
Summary: Represents a particular instance of a clash or intersection between two meshes.

Constructor: Rhino.Geometry.Intersect.MeshClash.MeshClash()
Summary: Initializes a new instance of the MeshClash class

Property: Rhino.Geometry.Intersect.MeshClash.ClashPoint
Return: Point3d
Modifiers: public
Summary: If valid, then the sphere centered at ClashPoint of ClashRadius distance intersects the clashing meshes.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.ClashRadius
Return: double
Modifiers: public
Summary: Gets the clash, or intersection, radius.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.MeshA
Return: Mesh
Modifiers: public
Summary: Gets the first mesh.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.MeshB
Return: Mesh
Modifiers: public
Summary: Gets the second mesh.
Accessors: get

Method: Rhino.Geometry.Intersect.MeshClash.FindDetail(RhinoObject objA, RhinoObject objB, double distance, MeshType meshType, MeshingParameters meshingParameters)
Return: Mesh[]
Modifiers: public, static
Summary: Finds all of the mesh faces on each of two Rhino objects that interfere within a clash distance. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: objA (RhinoObject)
Parameter Summary: The first Rhino object.
Parameter: objB (RhinoObject)
Parameter Summary: The second Rhino object.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.
Parameter: meshType (MeshType)
Parameter Summary: The type of mesh to be used for the calculation.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: The meshing parameters used to generate meshes for the calculation.

Method: Rhino.Geometry.Intersect.MeshClash.FindDetail(RhinoObject objA, RhinoObject objB, double distance)
Return: Mesh[]
Modifiers: public, static
Summary: Finds all of the mesh faces on each of two Rhino objects that interfere within a clash distance. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: objA (RhinoObject)
Parameter Summary: The first Rhino object.
Parameter: objB (RhinoObject)
Parameter Summary: The second Rhino object.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<Mesh> setA, IEnumerable<Mesh> setB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches for locations where the distance froma mesh in one setof meshes is less than distance toanother mesh in a second setof meshes.
Parameter: setA (IEnumerable<Mesh>)
Parameter Summary: The first set of meshes.
Parameter: setB (IEnumerable<Mesh>)
Parameter Summary: The second set of meshes.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<RhinoObject> setA, IEnumerable<RhinoObject> setB, double distance, MeshType meshType, MeshingParameters meshingParameters)
Return: MeshInterference[]
Modifiers: public, static
Summary: Searches for locations where the distance from a RhinoObject, in one set of objects, is less than the specified distance to another RhinoObject in a second set of objects. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: setA (IEnumerable<RhinoObject>)
Parameter Summary: The first set of Rhino objects.
Parameter: setB (IEnumerable<RhinoObject>)
Parameter Summary: The second set of Rhino objects.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.
Parameter: meshType (MeshType)
Parameter Summary: The type of mesh to be used for the calculation.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: The meshing parameters used to generate meshes for the calculation.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<RhinoObject> setA, IEnumerable<RhinoObject> setB, double distance)
Return: MeshInterference[]
Modifiers: public, static
Summary: Searches for locations where the distance from a RhinoObject, in one set of objects, is less than the specified distance to another RhinoObject in a second set of objects. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: setA (IEnumerable<RhinoObject>)
Parameter Summary: The first set of Rhino objects.
Parameter: setB (IEnumerable<RhinoObject>)
Parameter Summary: The second set of Rhino objects.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.

Method: Rhino.Geometry.Intersect.MeshClash.Search(Mesh meshA, IEnumerable<Mesh> setB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches the locations where the distance fromthe first meshtoa mesh in the second setof meshes is less than the provided value.
Parameter: meshA (Mesh)
Parameter Summary: The first mesh.
Parameter: setB (IEnumerable<Mesh>)
Parameter Summary: The second set of meshes.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Method: Rhino.Geometry.Intersect.MeshClash.Search(Mesh meshA, Mesh meshB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches the locations where the distance fromthe first meshtothe second mesh is less than the provided value.
Parameter: meshA (Mesh)
Parameter Summary: The first mesh.
Parameter: meshB (Mesh)
Parameter Summary: The second mesh.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Class: Rhino.Geometry.Intersect.MeshIntersectionCache
Summary: Provides a mechanism for lazily evaluating mesh data.

Constructor: Rhino.Geometry.Intersect.MeshIntersectionCache.MeshIntersectionCache()
Summary: Provides a mechanism for lazily evaluating mesh data. The implementation is private and subject to change.

Method: Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Disposes the mesh intersection cache.
Parameter: disposing (bool)
Parameter Summary: If set totruedispose was called explicitly, otherwise specify False if calling from a finalizer.

# Namespace: Rhino.Geometry.MeshRefinements

Class: Rhino.Geometry.MeshRefinements.RefinementSettings
Summary: Defines the way a mesh refinement modifier works.

Constructor: Rhino.Geometry.MeshRefinements.RefinementSettings.RefinementSettings()
Summary: Creates a default operation settings object.

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.ContinueRequest
Return: CancellationToken
Modifiers: public
Summary: A token to request computation termination.
Accessors: get set

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.HasPull
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this subdivision should create a result on a specific surface.
Accessors: get

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.Level
Return: int
Modifiers: public
Summary: The level of subdivision to achieve.
Accessors: get set

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.NakedEdgeMode
Return: CreaseEdges
Modifiers: public
Summary: Set this property to define how naked edges should be treated.
Accessors: get set

# Namespace: Rhino.Geometry.Morphs

Class: Rhino.Geometry.Morphs.BendSpaceMorph
Summary: Deforms objects by bending along a spine arc.

Constructor: Rhino.Geometry.Morphs.BendSpaceMorph.BendSpaceMorph(Point3d start, Point3d end, Point3d point, bool straight, bool symmetric)
Summary: Constructs a bend space morph.

Constructor: Rhino.Geometry.Morphs.BendSpaceMorph.BendSpaceMorph(Point3d start, Point3d end, Point3d point, double angle, bool straight, bool symmetric)
Summary: Constructs a bend space morph.

Property: Rhino.Geometry.Morphs.BendSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.BendSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.BendSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.BendSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.FlowSpaceMorph
Summary: Re-aligns objects from a base curve to a target curve.

Constructor: Rhino.Geometry.Morphs.FlowSpaceMorph.FlowSpaceMorph(Curve curve0, Curve curve1, bool reverseCurve0, bool reverseCurve1, bool preventStretching)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.FlowSpaceMorph.FlowSpaceMorph(Curve curve0, Curve curve1, bool preventStretching)
Summary: Constructs a flow space morph.

Property: Rhino.Geometry.Morphs.FlowSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.MaelstromSpaceMorph
Summary: Deforms objects in a spiral as if they were caught in a whirlpool.

Constructor: Rhino.Geometry.Morphs.MaelstromSpaceMorph.MaelstromSpaceMorph(Plane plane, double radius0, double radius1, double angle)
Summary: Constructs a maelstrom space morph.

Property: Rhino.Geometry.Morphs.MaelstromSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.SplopSpaceMorph
Summary: Rotates, scales, and wraps objects on a surface.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam, double scale, double angle)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam, double scale)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam)
Summary: Constructs a flow space morph.

Property: Rhino.Geometry.Morphs.SplopSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.SporphSpaceMorph
Summary: Deforms an object from a source surface to a target surface.

Constructor: Rhino.Geometry.Morphs.SporphSpaceMorph.SporphSpaceMorph(Surface surface0, Surface surface1, Point2d surface0Param, Point2d surface1Param)
Summary: Constructs a Sporph space morph.

Constructor: Rhino.Geometry.Morphs.SporphSpaceMorph.SporphSpaceMorph(Surface surface0, Surface surface1)
Summary: Constructs a Sporph space morph.

Property: Rhino.Geometry.Morphs.SporphSpaceMorph.ConstrainNormal
Return: Vector3d
Modifiers: public
Summary: Specifies how the normal direction of the base surface is mapped onto the target surface. To use the target surface normal, set to <b>Vector3d.Unset</b> .
Accessors: get set

Property: Rhino.Geometry.Morphs.SporphSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.StretchSpaceMorph
Summary: Deforms objects toward or away from a specified axis.

Constructor: Rhino.Geometry.Morphs.StretchSpaceMorph.StretchSpaceMorph(Point3d start, Point3d end, double length)
Summary: Constructs a stretch space morph.

Constructor: Rhino.Geometry.Morphs.StretchSpaceMorph.StretchSpaceMorph(Point3d start, Point3d end, Point3d point)
Summary: Constructs a stretch space morph.

Property: Rhino.Geometry.Morphs.StretchSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.TaperSpaceMorph
Summary: Deforms objects toward or away from a specified axis.

Constructor: Rhino.Geometry.Morphs.TaperSpaceMorph.TaperSpaceMorph(Point3d start, Point3d end, double startRadius, double endRadius, bool bFlat, bool infiniteTaper)
Summary: Constructs a taper space morph.

Property: Rhino.Geometry.Morphs.TaperSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.TwistSpaceMorph
Summary: Deforms objects by rotating them around an axis.

Constructor: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistSpaceMorph()
Summary: Constructs a twist space morph.

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.InfiniteTwist
Return: bool
Modifiers: public
Summary: If true, the deformation is constant throughout the object, even if the axis is shorter than the object. If false, the deformation takes place only the length of the axis.
Accessors: get set

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAngleRadians
Return: double
Modifiers: public
Summary: Twist angle in radians.
Accessors: get set

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAxis
Return: Line
Modifiers: public
Summary: Axis to rotate about.
Accessors: get set

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
This method is abstract. | Parameter: point (Point3d) | Parameter Summary: A point that will be morphed by this function.
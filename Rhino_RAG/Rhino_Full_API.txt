# Namespace: dotnetstart

Class: dotnetstart.DotNetInitialization

Constructor: dotnetstart.DotNetInitialization.DotNetInitialization()
Summary: Initializes a new instance of the DotNetInitialization class

Method: dotnetstart.DotNetInitialization.Start(string args)
Return: int
Modifiers: public, static

# Namespace: Rhino
Summary: Contains commonly-used value types and classes used in Rhino.

Class: Rhino.BitmapExtensions
Summary: Rhino specific extension methods for System.Drawing.Bitmap

Constructor: Rhino.BitmapExtensions.BitmapExtensions()
Summary: Initializes a new instance of the BitmapExtensions class

Method: Rhino.BitmapExtensions.BitmapAsTextureFileReference(this System.Drawing.Bitmap bitmap, uint crc)
Return: FileReference
Modifiers: public, static
Summary: Inserts bitmap into Rhino's texture manager and returns a FileReference.
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: The bitmap which will be referenced by the FileReference.
Parameter: crc (uint)
Parameter Summary: The crc of the bitmap. This should be a unique number which changes if the contents of the bitmap changes. NOTE: if a different bitmap is provided using the same crc as a previous bitmap, then the previous bitmap will be overwritten in the texture manager and both previously returned FileReferences will reference the newly provided bitmap.

Method: Rhino.BitmapExtensions.ConvertToNormalMap(this System.Drawing.Bitmap bitmap, bool bLossyCompressionSource, out bool bPositiveZComponent)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Use this function to convert a System.Drawing.Bitmap from a bump to a normal texture
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: 
Parameter: bLossyCompressionSource (bool)
Parameter Summary: True if the source of the bitmap is an image with lossy compression (e.g. jpg). False otherwise.  The check will be less strict if the image can contain errors due to lossy compression.
Parameter: bPositiveZComponent (bool)
Parameter Summary: True if the image is a normal map with the z-component mapped to the range 0 .. +1.  False if the image is a normal map with the z-component mapped to the range -1 .. +1.

Method: Rhino.BitmapExtensions.IsNormalMap(this System.Drawing.Bitmap bitmap, bool bLossyCompressionSource, out bool bPositiveZComponent)
Return: bool
Modifiers: public, static
Summary: Call this method to see if the DIB appears to be a normal map.
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: 
Parameter: bLossyCompressionSource (bool)
Parameter Summary: True if the source of the bitmap is an image with lossy compression (e.g. jpg). False otherwise.  The check will be less strict if the image can contain errors due to lossy compression.
Parameter: bPositiveZComponent (bool)
Parameter Summary: True if the image is a normal map with the z-component mapped to the range 0 .. +1.  False if the image is a normal map with the z-component mapped to the range -1 .. +1.

Class: Rhino.DisplayDeviceInfo
Summary: Get information about display devices found on this machine (GPUs).

Constructor: Rhino.DisplayDeviceInfo.DisplayDeviceInfo()
Summary: Initializes a new instance of the DisplayDeviceInfo class

Method: Rhino.DisplayDeviceInfo.GpuDeviceInfos()
Return: List<GpuDeviceInfo>
Modifiers: static, public
Summary: Get a list of GpuDeviceInfo for GPUs found on this machine.

Method: Rhino.DisplayDeviceInfo.GpuNames()
Return: List<string>
Modifiers: static, public
Summary: Get a list with the names of all GPUs on this machine.

Class: Rhino.DocumentEventArgs
Summary: Provides document information for RhinoDoc events.

Property: Rhino.DocumentEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document for this event. This field might be null.
Accessors: get

Property: Rhino.DocumentEventArgs.DocumentId
Return: int
Modifiers: public
Summary: Gets the document Id of the document for this event.
Accessors: get

Property: Rhino.DocumentEventArgs.DocumentSerialNumber
Return: uint
Modifiers: public
Summary: Gets the uniques document serial number for this event
Accessors: get

Class: Rhino.DocumentOpenEventArgs
Summary: Provides document information for RhinoDoc events.

Property: Rhino.DocumentOpenEventArgs.FileName
Return: string
Modifiers: public
Summary: Name of file being opened.
Accessors: get

Property: Rhino.DocumentOpenEventArgs.Merge
Return: bool
Modifiers: public
Summary: True if file is being merged into the current document. This occurs during the "Import" command.
Accessors: get

Property: Rhino.DocumentOpenEventArgs.Reference
Return: bool
Modifiers: public
Summary: True if file is opened as a reference file.
Accessors: get

Class: Rhino.DocumentSaveEventArgs
Summary: Provides document information for RhinoDoc events.

Property: Rhino.DocumentSaveEventArgs.ExportSelected
Return: bool
Modifiers: public
Summary: True if only selected objects are being written to a file.
Accessors: get

Property: Rhino.DocumentSaveEventArgs.FileName
Return: string
Modifiers: public
Summary: Name of file being written.
Accessors: get

Class: Rhino.GpuDeviceInfo
Summary: Represents a GPU device providing name, vendor and memory all as strings.  Currently fully implemented only on Windows.

Property: Rhino.GpuDeviceInfo.DriverDateAsString
Return: string
Modifiers: public
Summary: The driver date as string formatted year-month-day
Accessors: get set

Property: Rhino.GpuDeviceInfo.Memory
Return: ulong
Modifiers: public
Summary: Memory of the device in bytes
Accessors: get set

Property: Rhino.GpuDeviceInfo.MemoryAsString
Return: string
Modifiers: public
Summary: Memory of the device as a human-readable string
Accessors: get set

Property: Rhino.GpuDeviceInfo.Name
Return: string
Modifiers: public
Summary: Name of the device
Accessors: get set

Property: Rhino.GpuDeviceInfo.Vendor
Return: string
Modifiers: public
Summary: Vendor of the device
Accessors: get set

Class: Rhino.LengthValue
Summary: Represents a length with an associated unit system and a string representation of that length. This allows for going back and forth from numerical representation of a length and a string representation without "guessing" at the initial string

Constructor: Rhino.LengthValue.LengthValue()
Summary: Initializes a new instance of the LengthValue class

Property: Rhino.LengthValue.ContextAngleUnitSystem
Return: AngleUnitSystem
Modifiers: public
Summary: Returns the context AngleUnitSystem from this LengthValue's ParseSettings
Accessors: get

Property: Rhino.LengthValue.ContextLocaleId
Return: uint
Modifiers: public
Summary: returns the context LocaleId from this LengthValue
Accessors: get

Property: Rhino.LengthValue.LengthString
Return: string
Modifiers: public
Summary: Return length as a string
Accessors: get

Property: Rhino.LengthValue.LengthStringFormat
Return: StringFormat
Modifiers: public
Summary: Returns the StringFormat from this LengthValue
Accessors: get

Property: Rhino.LengthValue.ParseSettings
Return: StringParserSettings
Modifiers: public
Summary: Parse settings
Accessors: get

Property: Rhino.LengthValue.UnitSystem
Return: UnitSystem
Modifiers: public
Summary: UnitSystem used by this LengthValue
Accessors: get

Method: Rhino.LengthValue.Create(double length, UnitSystem us, StringFormat format, uint localeId)
Return: LengthValue
Modifiers: public, static
Summary: Create from Length and UnitSystem
Parameter: length (double)
Parameter Summary: Numeric length value
Parameter: us (UnitSystem)
Parameter Summary: Unit system
Parameter: format (StringFormat)
Parameter Summary: 
Parameter: localeId (uint)
Parameter Summary:

Method: Rhino.LengthValue.Create(double length, UnitSystem us, StringFormat format)
Return: LengthValue
Modifiers: public, static
Summary: Create from Length and UnitSystem
Parameter: length (double)
Parameter Summary: Numeric length value
Parameter: us (UnitSystem)
Parameter Summary: Unit system
Parameter: format (StringFormat)
Parameter Summary:

Method: Rhino.LengthValue.Create(string s, StringParserSettings ps, out bool parsedAll)
Return: LengthValue
Modifiers: public, static
Summary: Create from string
Parameter: s (string)
Parameter Summary: string to parse
Parameter: ps (StringParserSettings)
Parameter Summary: 
Parameter: parsedAll (bool)
Parameter Summary: True if the whole string was parsed

Method: Rhino.LengthValue.ChangeLength(double newLength)
Return: LengthValue
Modifiers: public
Summary: Changes the numeric value in a LengthValue and leaves all of the other info unchanged UnitSystem, ParseSettings and StringFormat stay as they were

Method: Rhino.LengthValue.ChangeUnitSystem(UnitSystem newUnits)
Return: LengthValue
Modifiers: public
Summary: Change the UnitSystem of a LengthValue The numeric value of Length is scaled by new_us / current unit system so that the absolute length stays the same

Method: Rhino.LengthValue.Dispose()
Return: void
Modifiers: public
Summary: actively reclaim native allocated ON_LenghtValue*

Method: Rhino.LengthValue.IsUnset()
Return: bool
Modifiers: public
Summary: Test IsUnset

Method: Rhino.LengthValue.Length()
Return: double
Modifiers: public
Summary: Length value in this instance's current unit system

Method: Rhino.LengthValue.Length(UnitSystem units)
Return: double
Modifiers: public
Summary: Length value in a given unit system

Class: Rhino.PersistentSettings
Summary: A dictionary of SettingValue items.

Constructor: Rhino.PersistentSettings.PersistentSettings(SerializationInfo info, StreamingContext context)

Property: Rhino.PersistentSettings.RhinoAppSettings
Return: PersistentSettings
Modifiers: public, static
Accessors: get

Property: Rhino.PersistentSettings.StringListRootKey
Return: string
Modifiers: public, static
Summary: Adding this string to a string list when calling SetStringList will cause the ProgramData setting to get inserted at that location in the list.
Accessors: get

Property: Rhino.PersistentSettings.ChildKeys
Return: ICollection<string>
Modifiers: public
Summary: Gets a collection containing the keys in the settings dictionary.
Accessors: get

Property: Rhino.PersistentSettings.HiddenFromUserInterface
Return: bool
Modifiers: public
Summary: If False then values will appear in the EditOptions window
Accessors: get set

Property: Rhino.PersistentSettings.Keys
Return: ICollection<string>
Modifiers: public
Summary: Gets a collection containing the keys in the settings dictionary.
Accessors: get

Method: Rhino.PersistentSettings.FromPlugInId(System.Guid pluginId)
Return: PersistentSettings
Modifiers: public, static

Method: Rhino.PersistentSettings.AddChild(string key)
Return: PersistentSettings
Modifiers: public
Summary: Call this method to add a new child key, if the key is exists then the existing key is returned otherwise a new empty <b>PersistentSettings</b>  child key is added and the new settings are returned.
Parameter: key (string)
Parameter Summary: Key to add to the child dictionary.

Method: Rhino.PersistentSettings.ClearChangedFlag()
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.ContainsChangedValues()
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.ContainsModifiedValues(PersistentSettings allUserSettings)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.DeleteChild(string key)
Return: void
Modifiers: public
Summary: Call this method to delete a child settings key.

Method: Rhino.PersistentSettings.DeleteItem(string key)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.GetBool(string key, bool defaultValue, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.GetBool(string key, bool defaultValue)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.GetBool(string key)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.GetByte(string key, byte defaultValue, IEnumerable<string> legacyKeyList)
Return: byte
Modifiers: public

Method: Rhino.PersistentSettings.GetByte(string key, byte defaultValue)
Return: byte
Modifiers: public

Method: Rhino.PersistentSettings.GetByte(string key)
Return: byte
Modifiers: public

Method: Rhino.PersistentSettings.GetChar(string key, char defaultValue, IEnumerable<string> legacyKeyList)
Return: char
Modifiers: public

Method: Rhino.PersistentSettings.GetChar(string key, char defaultValue)
Return: char
Modifiers: public

Method: Rhino.PersistentSettings.GetChar(string key)
Return: char
Modifiers: public

Method: Rhino.PersistentSettings.GetChild(string key)
Return: PersistentSettings
Modifiers: public
Summary: Call this method to get a nested settings <b>PersistentSettings</b>  instance, will throw a <b>KeyNotFoundException</b> exception if the key does not exist.
Parameter: key (string)
Parameter Summary: Key name

Method: Rhino.PersistentSettings.GetColor(string key, Color defaultValue, IEnumerable<string> legacyKeyList)
Return: Color
Modifiers: public

Method: Rhino.PersistentSettings.GetColor(string key, Color? defaultValue, IEnumerable<string> legacyKeyList)
Return: Color?
Modifiers: public

Method: Rhino.PersistentSettings.GetColor(string key, Color? defaultValue)
Return: Color?
Modifiers: public

Method: Rhino.PersistentSettings.GetColor(string key, Color defaultValue)
Return: Color
Modifiers: public

Method: Rhino.PersistentSettings.GetColor(string key)
Return: Color
Modifiers: public

Method: Rhino.PersistentSettings.GetDate(string key, System.DateTime defaultValue, IEnumerable<string> legacyKeyList)
Return: System.DateTime
Modifiers: public

Method: Rhino.PersistentSettings.GetDate(string key, System.DateTime defaultValue)
Return: System.DateTime
Modifiers: public

Method: Rhino.PersistentSettings.GetDate(string key)
Return: System.DateTime
Modifiers: public

Method: Rhino.PersistentSettings.GetDouble(string key, double defaultValue, IEnumerable<string> legacyKeyList)
Return: double
Modifiers: public

Method: Rhino.PersistentSettings.GetDouble(string key, double defaultValue)
Return: double
Modifiers: public

Method: Rhino.PersistentSettings.GetDouble(string key)
Return: double
Modifiers: public

Method: Rhino.PersistentSettings.GetEnumValue(System.String key, T defaultValue)
Return: T
Modifiers: public
Summary: Gets a stored enumerated value using a custom key, or return default value if not found.

Method: Rhino.PersistentSettings.GetEnumValue(System.String key)
Return: T
Modifiers: public
Summary: Get a stored enumerated value using a custom key.

Method: Rhino.PersistentSettings.GetEnumValue(T defaultValue)
Return: T
Modifiers: public
Summary: Get a stored enumerated value, or return default value if not found

Method: Rhino.PersistentSettings.GetGuid(string key, System.Guid defaultValue, IEnumerable<string> legacyKeyList)
Return: System.Guid
Modifiers: public

Method: Rhino.PersistentSettings.GetGuid(string key, System.Guid defaultValue)
Return: System.Guid
Modifiers: public

Method: Rhino.PersistentSettings.GetGuid(string key)
Return: System.Guid
Modifiers: public

Method: Rhino.PersistentSettings.GetInteger(string key, int defaultValue, IEnumerable<string> legacyKeyList)
Return: int
Modifiers: public

Method: Rhino.PersistentSettings.GetInteger(string key, int defaultValue, int bound, bool boundIsLower)
Return: int
Modifiers: public

Method: Rhino.PersistentSettings.GetInteger(string key, int defaultValue, int lowerBound, int upperBound)
Return: int
Modifiers: public

Method: Rhino.PersistentSettings.GetInteger(string key, int defaultValue)
Return: int
Modifiers: public

Method: Rhino.PersistentSettings.GetInteger(string key)
Return: int
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint(string key, System.Drawing.Point defaultValue, IEnumerable<string> legacyKeyList)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint(string key, System.Drawing.Point defaultValue)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint(string key)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint3d(string key, Point3d defaultValue, IEnumerable<string> legacyKeyList)
Return: Point3d
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint3d(string key, Point3d defaultValue)
Return: Point3d
Modifiers: public

Method: Rhino.PersistentSettings.GetPoint3d(string key)
Return: Point3d
Modifiers: public

Method: Rhino.PersistentSettings.GetRectangle(string key, Rectangle defaultValue, IEnumerable<string> legacyKeyList)
Return: Rectangle
Modifiers: public

Method: Rhino.PersistentSettings.GetRectangle(string key, Rectangle defaultValue)
Return: Rectangle
Modifiers: public

Method: Rhino.PersistentSettings.GetRectangle(string key)
Return: Rectangle
Modifiers: public

Method: Rhino.PersistentSettings.GetSettingIsHiddenFromUserInterface(string key, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.
Parameter: legacyKeyList (IEnumerable<string>)
Parameter Summary:

Method: Rhino.PersistentSettings.GetSettingIsHiddenFromUserInterface(string key)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.

Method: Rhino.PersistentSettings.GetSettingIsReadOnly(string key)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.

Method: Rhino.PersistentSettings.GetSettingType(string key)
Return: System.Type
Modifiers: public
Summary: Gets the type of the last value passed to Set... or Get... for the specified setting.
Parameter: key (string)
Parameter Summary: Key name for which to search.

Method: Rhino.PersistentSettings.GetSize(string key, Size defaultValue, IEnumerable<string> legacyKeyList)
Return: Size
Modifiers: public

Method: Rhino.PersistentSettings.GetSize(string key, Size defaultValue)
Return: Size
Modifiers: public

Method: Rhino.PersistentSettings.GetSize(string key)
Return: Size
Modifiers: public

Method: Rhino.PersistentSettings.GetString(string key, string defaultValue, IEnumerable<string> legacyKeyList)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.GetString(string key, string defaultValue)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.GetString(string key)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.string>[] GetStringDictionary(string key, KeyValuePair<string, string>[] defaultValue, IEnumerable<string> legacyKeyList)
Return: KeyValuePair<string,
Modifiers: public

Method: Rhino.PersistentSettings.string>[] GetStringDictionary(string key, KeyValuePair<string, string>[] defaultValue)
Return: KeyValuePair<string,
Modifiers: public

Method: Rhino.PersistentSettings.string>[] GetStringDictionary(string key)
Return: KeyValuePair<string,
Modifiers: public

Method: Rhino.PersistentSettings.GetStringList(string key, string defaultValue, IEnumerable<string> legacyKeyList)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.GetStringList(string key, string defaultValue)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.GetStringList(string key)
Return: string
Modifiers: public

Method: Rhino.PersistentSettings.GetUnsignedInteger(string key, uint defaultValue, IEnumerable<string> legacyKeyList)
Return: uint
Modifiers: public

Method: Rhino.PersistentSettings.GetUnsignedInteger(string key, uint defaultValue)
Return: uint
Modifiers: public

Method: Rhino.PersistentSettings.GetUnsignedInteger(string key)
Return: uint
Modifiers: public

Method: Rhino.PersistentSettings.GetValidator(string key)
Return: EventHandler<PersistentSettingsEventArgs<T>>
Modifiers: public
Summary: Provides a way to find a ready-to-use validator for the PersistentSetting class for the given the key, or obtaining null.
Parameter: key (string)
Parameter Summary: The name of the setting key.

Method: Rhino.PersistentSettings.HideSettingFromUserInterface(string key)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.RegisterSettingsValidator(string key, EventHandler<PersistentSettingsEventArgs<T>> validator)
Return: void
Modifiers: public
Summary: Sets a validator for a given key.
Note to implementers: parameter T should be one of the     supported types for the PersistentSettings class and should match the type associated with the key.
This method allows to use anonymous methods and lambda expressions. | Parameter: key (string) | Parameter Summary: The key to which to bind the validator. | Parameter: validator (EventHandler<PersistentSettingsEventArgs<T>>) | Parameter Summary: A validator instance of your own class.

Method: Rhino.PersistentSettings.SetBool(string key, bool value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetByte(string key, byte value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetChar(string key, char value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetColor(string key, Color? value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetColor(string key, Color value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDate(string key, System.DateTime value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, bool value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, byte value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, char value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, Color? value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, Color value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, double value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, int value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, KeyValuePair<string, string>[] value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, Point3d value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, Rectangle value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, Size value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, string value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, string value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, System.DateTime value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, System.Drawing.Point value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDefault(string key, System.Guid value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetDouble(string key, double value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetEnumValue(System.String key, T value)
Return: void
Modifiers: public
Summary: Set an enumerated value in the settings using a custom key

Method: Rhino.PersistentSettings.SetEnumValue(T enumValue)
Return: void
Modifiers: public
Summary: Set an enumerated value in the settings.

Method: Rhino.PersistentSettings.SetGuid(string key, System.Guid value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetInteger(string key, int value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetPoint(string key, System.Drawing.Point value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetPoint3d(string key, Point3d value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetRectangle(string key, Rectangle value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetSize(string key, Size value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetString(string key, string value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetStringDictionary(string key, KeyValuePair<string, string>[] value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.SetStringList(string key, string value)
Return: void
Modifiers: public
Summary: Including a item with the value of StringListRootKey will cause the ProgramData value to get inserted at that location in the list when calling GetStringList.
Parameter: key (string)
Parameter Summary: The string key.
Parameter: value (string)
Parameter Summary: An array of values to set.

Method: Rhino.PersistentSettings.SetUnsignedInteger(string key, uint value)
Return: void
Modifiers: public

Method: Rhino.PersistentSettings.TryGetBool(string key, out bool value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetBool(string key, out bool value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetByte(string key, out byte value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetByte(string key, out byte value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetChar(string key, out char value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetChar(string key, out char value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetChild(string key, out PersistentSettings value)
Return: bool
Modifiers: public
Summary: Call this method to get a nested settings <b>PersistentSettings</b>  instance, will return True if the key exists and value was set otherwise; will return False and value will be set to null.
Parameter: key (string)
Parameter Summary: [in] Key name
Parameter: value (PersistentSettings)
Parameter Summary: [out] Will be set the child settings if the key is valid otherwise it will be null.

Method: Rhino.PersistentSettings.TryGetColor(string key, out Color value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetColor(string key, out Color? value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetColor(string key, out Color? value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetColor(string key, out Color value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDate(string key, out System.DateTime value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDate(string key, out System.DateTime value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out bool value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out byte value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out char value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out Color value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out double value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out int value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out Point3d value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out Rectangle value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out Size value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out string value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out string value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDefault(string key, out System.DateTime value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDouble(string key, out double value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetDouble(string key, out double value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetEnumValue(System.String key, out T enumValue)
Return: bool
Modifiers: public
Summary: Attempt to get the stored value for an enumerated setting using a custom key. Note: the enumerated value ALWAYS gets assigned! Be sure to check for success of this method to prevent erroneous use of the value.

Method: Rhino.PersistentSettings.TryGetGuid(string key, out System.Guid value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetGuid(string key, out System.Guid value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetInteger(string key, out int value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetInteger(string key, out int value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetPoint(string key, out System.Drawing.Point value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetPoint(string key, out System.Drawing.Point value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetPoint3d(string key, out Point3d value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetPoint3d(string key, out Point3d value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetRectangle(string key, out Rectangle value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetRectangle(string key, out Rectangle value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetSettingIsHiddenFromUserInterface(string key, out bool value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.
Parameter: value (bool)
Parameter Summary: Value will be True if the setting is read-only otherwise false. setting.
Parameter: legacyKeyList (IEnumerable<string>)
Parameter Summary:

Method: Rhino.PersistentSettings.TryGetSettingIsHiddenFromUserInterface(string key, out bool value)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.
Parameter: value (bool)
Parameter Summary: Value will be True if the setting is read-only otherwise false. setting.

Method: Rhino.PersistentSettings.TryGetSettingIsReadOnly(string key, out bool value)
Return: bool
Modifiers: public
Summary: Values read from all users settings files will be marked as read-only which will cause any future calls to Set... to fail.
Parameter: key (string)
Parameter Summary: Key name for which to search.
Parameter: value (bool)
Parameter Summary: Value will be True if the setting is read-only otherwise false. setting.

Method: Rhino.PersistentSettings.TryGetSettingType(string key, out System.Type type)
Return: bool
Modifiers: public
Summary: Get the type of the last value passed to Set... or Get... for the specified setting.
Parameter: key (string)
Parameter Summary: Key name for which to search.
Parameter: type (System.Type)
Parameter Summary: Type of the last value passed to Set... or Get... for the specified setting.

Method: Rhino.PersistentSettings.TryGetSize(string key, out Size value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetSize(string key, out Size value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetString(string key, out string value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetString(string key, out string value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetStringDictionary(string key, out KeyValuePair<string, string>[] value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetStringDictionary(string key, out KeyValuePair<string, string>[] value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetStringList(string key, out string value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetStringList(string key, out string value)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetUnsignedInteger(string key, out uint value, IEnumerable<string> legacyKeyList)
Return: bool
Modifiers: public

Method: Rhino.PersistentSettings.TryGetUnsignedInteger(string key, out uint value)
Return: bool
Modifiers: public

Class: Rhino.PersistentSettingsConverter
Summary: Used to convert string to string lists and string dictionaries and back to strings again.

Constructor: Rhino.PersistentSettingsConverter.PersistentSettingsConverter()
Summary: Initializes a new instance of the PersistentSettingsConverter class

Method: Rhino.PersistentSettingsConverter.IsStringDictionary(string s)
Return: bool
Modifiers: public, static
Summary: Determines if the string value is formatted as a key value pair string list.
Parameter: s (string)
Parameter Summary: String to check

Method: Rhino.PersistentSettingsConverter.IsStringList(string s)
Return: bool
Modifiers: public, static
Summary: Determines if the string value is formatted as a string list.
Parameter: s (string)
Parameter Summary: String to check

Method: Rhino.PersistentSettingsConverter.ToString(double value)
Return: string
Modifiers: public, static
Summary: Converts a double value to a string.
Parameter: value (double)
Parameter Summary: double value

Method: Rhino.PersistentSettingsConverter.ToString(KeyValuePair<string, string>[] value)
Return: string
Modifiers: public, static
Summary: Converts a key value string pair array to a properly formatted string dictionary XML string.
Parameter: value (KeyValuePair<string, string>[])
Parameter Summary: List of string pairs to turn into a dictionary XML string.

Method: Rhino.PersistentSettingsConverter.ToString(string values)
Return: string
Modifiers: public, static
Summary: Converts a string array to a properly formatted string list XML string.
Parameter: values (string)
Parameter Summary: List of strings to turn into a string list XML string.

Method: Rhino.PersistentSettingsConverter.TryParseDouble(string s, out double value)
Return: bool
Modifiers: public, static
Summary: Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed. system culture.
Parameter: s (string)
Parameter Summary: A string containing a number to convert.
Parameter: value (double)
Parameter Summary: When this method returns, contains the double-precision floating-point number equivalent of the s parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is None or Empty, is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.

Method: Rhino.PersistentSettingsConverter.TryParseEnum(System.Type type, string enumValueName, out int value)
Return: bool
Modifiers: public, static
Summary: Converts an enumerated value name to its integer equivalent.
Parameter: type (System.Type)
Parameter Summary: The enumerated type
Parameter: enumValueName (string)
Parameter Summary: Enumerated value name as string
Parameter: value (int)
Parameter Summary: Output value, will get set to -1 on error

Method: Rhino.PersistentSettingsConverter.TryParseEnum(System.Type type, string intValueAsString, out string value)
Return: bool
Modifiers: public, static
Summary: Converts an enumerated value string (integer as string) to a enumerated value name.
Parameter: type (System.Type)
Parameter Summary: The enumerated type
Parameter: intValueAsString (string)
Parameter Summary: enumerated integer value as string
Parameter: value (string)
Parameter Summary: Output value, will be None on error

Method: Rhino.PersistentSettingsConverter.TryParseStringDictionary(string s, out KeyValuePair<string, string>[] value)
Return: bool
Modifiers: public, static
Summary: Attempts to convert a string to a key value string pair array.
Parameter: s (string)
Parameter Summary: String to parse
Parameter: value (KeyValuePair<string, string>[])
Parameter Summary: Result will get copied here, if the string is None or empty then this will be an empty array, if there was an error parsing then this will be None otherwise it will be the string parsed as a key value string pair array.

Method: Rhino.PersistentSettingsConverter.TryParseStringList(string s, out string value)
Return: bool
Modifiers: public, static
Summary: Attempts to convert a string to a string value list.
Parameter: s (string)
Parameter Summary: String to parse
Parameter: value (string)
Parameter Summary: Result will get copied here, if the string is None or empty then this will be an empty list, if there was an error parsing then this will be None otherwise it will be the string parsed as a list.

Class: Rhino.PersistentSettingsEventArgs
Summary: Represents event data that is passed as state in persistent settings events.

Constructor: Rhino.PersistentSettingsEventArgs.PersistentSettingsEventArgs()

Property: Rhino.PersistentSettingsEventArgs.Cancel
Return: bool
Modifiers: public
Accessors: get set

Class: Rhino.PersistentSettingsEventArgs<T>
Summary: Represents the persistent settings modification event arguments.

Constructor: Rhino.PersistentSettingsEventArgs<T>.PersistentSettingsEventArgs<T>(T currentValue, T newValue)

Property: Rhino.PersistentSettingsEventArgs<T>.CurrentValue
Return: T
Modifiers: public
Accessors: get set

Property: Rhino.PersistentSettingsEventArgs<T>.NewValue
Return: T
Modifiers: public
Accessors: get set

Class: Rhino.PersistentSettingsSavedEventArgs
Summary: Event argument passed to the <b>Rhino.PlugIns.PlugIn.SettingsSaved</b> event.

Property: Rhino.PersistentSettingsSavedEventArgs.PlugInSettings
Return: PersistentSettings
Modifiers: public
Summary: The old PlugIn settings
Accessors: get

Property: Rhino.PersistentSettingsSavedEventArgs.SavedByThisRhino
Return: bool
Modifiers: public
Summary: Will be True if this instance of Rhino is writing the settings file or False if a different instance of Rhino has modified the settings file.
Accessors: get set

Method: Rhino.PersistentSettingsSavedEventArgs.CommandSettings(string englishCommandName)
Return: PersistentSettings
Modifiers: public
Summary: The new command settings
Parameter: englishCommandName (string)
Parameter Summary: English command to find settings for

Class: Rhino.RhinoApp
Summary: .NET RhinoApp is parallel to C++ CRhinoApp.

Constructor: Rhino.RhinoApp.RhinoApp()
Summary: Initializes a new instance of the RhinoApp class

Property: Rhino.RhinoApp.BuildDate
Return: DateTime
Modifiers: public, static
Summary: Gets the build date.
Accessors: get

Property: Rhino.RhinoApp.CanSave
Return: bool
Modifiers: public, static
Summary: Returns True when Rhino is allowed to save, False otherwise Conditions where Rhino is not allowed to save are: when evaluation licenses are expired; when a Cloud Zoo lease is expired; when a license is shared by a single user on multiple computers, and the current computer is not active.
Accessors: get

Property: Rhino.RhinoApp.CheckNewObject
Return: bool
Modifiers: public, static
Summary: Returns True if Rhino will validate each object added to the document. This can be time consuming but is valuable for debugging.
Accessors: get set

Property: Rhino.RhinoApp.CommandHistoryWindowText
Return: string
Modifiers: public, static
Summary: Text in Rhino's command history window.
Accessors: get

Property: Rhino.RhinoApp.CommandLineOut
Return: CommandLineTextWriter
Modifiers: public, static
Summary: Provides a TextWriter that can write to the command line.
Accessors: get

Property: Rhino.RhinoApp.CommandPrompt
Return: string
Modifiers: public, static
Summary: Rhino command prompt.
Accessors: get set

Property: Rhino.RhinoApp.CommandWindowCaptureEnabled
Return: bool
Modifiers: public, static
Summary: Enable or disable capturing of the strings sent to the CommandWindow through Write and WriteLine calls
Accessors: get set

Property: Rhino.RhinoApp.CurrentRhinoId
Return: Guid
Modifiers: public, static
Summary: Gets the current ID of Rhino.
Accessors: get

Property: Rhino.RhinoApp.DaysUntilExpiration
Return: int
Modifiers: public, static
Summary: Returns number of days until license expires. Zero when license is expired. Raises InvalidLicenseTypeException if LicenseExpires would return false.
Accessors: get

Property: Rhino.RhinoApp.DefaultUiFont
Return: Font
Modifiers: public, static
Summary: Default font used to render user interface
Accessors: get

Property: Rhino.RhinoApp.ExeServiceRelease
Return: int
Modifiers: public, static
Summary: Service release version of Rhino executable (0, 1, 2, ...) The integer is the service release number of Rhino.  For example, this function returns "0" if Rhino V4SR0 is running and returns "1" if Rhino V4SR1 is running.
Accessors: get

Property: Rhino.RhinoApp.ExeVersion
Return: int
Modifiers: public, static
Summary: Major version of Rhino executable 4, 5, ...
Accessors: get

Property: Rhino.RhinoApp.InCommand
Return: int
Modifiers: public, static
Summary: Gets the nested command count.
Accessors: get

Property: Rhino.RhinoApp.InstallationType
Return: Installation
Modifiers: public, static
Summary: Gets the product installation type, as seen in Rhino's ABOUT dialog box.
Accessors: get

Property: Rhino.RhinoApp.InstallationTypeString
Return: string
Modifiers: public, static
Summary: Gets the type of installation (product edition) of the license or lease.
Accessors: get

Property: Rhino.RhinoApp.InvokeRequired
Return: bool
Modifiers: public, static
Summary: Returns True if we are currently not running on the main user interface thread
Accessors: get

Property: Rhino.RhinoApp.IsClosing
Return: bool
Modifiers: public, static
Summary: Returns True if Rhino is in the process of closing, False otherwise. This can be True even before the Closing event fires, such as when RhinoDoc.CloseDocument event is called.
Accessors: get

Property: Rhino.RhinoApp.IsCloudZooNode
Return: bool
Modifiers: public, static
Summary: Returns True if rhino is currently using the Cloud Zoo False otherwise
Accessors: get

Property: Rhino.RhinoApp.IsExiting
Return: bool
Modifiers: public, static
Summary: Returns True if Rhino is in the process of exiting, False otherwise. This can be True even before the Closing event fires, such as when RhinoDoc.CloseDocument event is called.
Accessors: get

Property: Rhino.RhinoApp.IsInternetAccessAllowed
Return: bool
Modifiers: public, static
Summary: Returns True when Rhino is allowed to access the Internet, False otherwise. Note, this does not test if Internet access is available.
Accessors: get

Property: Rhino.RhinoApp.IsLicenseValidated
Return: bool
Modifiers: public, static
Summary: Returns True if the license is validated False otherwise
Accessors: get

Property: Rhino.RhinoApp.IsOnMainThread
Return: bool
Modifiers: public, static
Summary: Is the current thread the main thread
Accessors: get

Property: Rhino.RhinoApp.IsParentDesktop
Return: bool
Modifiers: public, static
Summary: Returns True if Rhino's parent window is the desktop, False otherwise.
Accessors: get

Property: Rhino.RhinoApp.IsPreRelease
Return: bool
Modifiers: public, static
Summary: Returns True if Rhino is compiled a s pre-release build (Beta, WIP) False otherwise
Accessors: get

Property: Rhino.RhinoApp.IsRunningAutomated
Return: bool
Modifiers: public, static
Summary: Is Rhino currently being executed through automation
Accessors: get

Property: Rhino.RhinoApp.IsRunningHeadless
Return: bool
Modifiers: public, static
Summary: Is Rhino currently being executed in headless mode
Accessors: get

Property: Rhino.RhinoApp.IsSafeModeEnabled
Return: bool
Modifiers: public, static
Summary: Is Rhino being executed in safe mode
Accessors: get

Property: Rhino.RhinoApp.IsSkinned
Return: bool
Modifiers: public, static
Summary: Is Rhino currently using custom, user-interface Skin.
Accessors: get

Property: Rhino.RhinoApp.LicenseExpires
Return: bool
Modifiers: public, static
Summary: Returns True if the license will expire False otherwise
Accessors: get

Property: Rhino.RhinoApp.LicenseUserName
Return: string
Modifiers: public, static
Summary: Gets the name of the user that owns the license or lease.
Accessors: get

Property: Rhino.RhinoApp.LicenseUserOrganization
Return: string
Modifiers: public, static
Summary: Gets the name of the organization of the user that owns the license or lease.
Accessors: get

Property: Rhino.RhinoApp.LoggedInUserAvatar
Return: Image
Modifiers: public, static
Summary: Returns the logged in user's avatar picture. Returns a default avatar if the user does not have an avatar or if the avatar could not be fetched.
Accessors: get

Property: Rhino.RhinoApp.LoggedInUserName
Return: string
Modifiers: public, static
Summary: Returns the name of the logged in user, or None if the user is not logged in.
Accessors: get

Property: Rhino.RhinoApp.MainApplicationWindow
Return: RhinoWindow
Modifiers: public, static
Summary: Same as MainWindow function, but provides the concrete class instead of an interface
Accessors: get

Property: Rhino.RhinoApp.Name
Return: string
Modifiers: public, static
Summary: Gets the application name.
Accessors: get

Property: Rhino.RhinoApp.NodeType
Return: LicenseNode
Modifiers: public, static
Summary: Gets license the node type.
Accessors: get

Property: Rhino.RhinoApp.Rhino2Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 2.
Accessors: get

Property: Rhino.RhinoApp.Rhino3Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 3.
Accessors: get

Property: Rhino.RhinoApp.Rhino4Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 4.
Accessors: get

Property: Rhino.RhinoApp.Rhino5Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 5
Accessors: get

Property: Rhino.RhinoApp.Rhino6Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 6
Accessors: get

Property: Rhino.RhinoApp.Rhino7Id
Return: Guid
Modifiers: public, static
Summary: Gets the ID of Rhino 7
Accessors: get

Property: Rhino.RhinoApp.SchemeName
Return: string
Modifiers: public, static
Summary: Gets the current Registry scheme name.
Accessors: get

Property: Rhino.RhinoApp.SdkServiceRelease
Return: int
Modifiers: public, static
Summary: Rhino SDK 9 digit SDK service release number in the form YYYYMMDDn  Service release of the Rhino SDK supported by this executable. Rhino will only load plug-ins that require a service release of <= this release number. For example, SR1 will load all plug-ins made with any SDK released up through and including the SR1 SDK. But, SR1 will not load a plug-in built using the SR2 SDK. If an "old" Rhino tries to load a "new" plug-in, the user is told that they have to get a free Rhino.exe update in order for the plug-in to load. Rhino.exe updates are available from http://www.rhino3d.com.
Accessors: get

Property: Rhino.RhinoApp.SdkVersion
Return: int
Modifiers: public, static
Summary: Rhino SDK 9 digit SDK version number in the form YYYYMMDDn  Rhino will only load plug-ins that were build with exactly the same version of the SDK.
Accessors: get

Property: Rhino.RhinoApp.SendWriteToConsole
Return: bool
Modifiers: public, static
Summary: Enable or disable sending command window strings to the console RhinoApp.Write(...) calls would be sent to the console when this is enabled
Accessors: get set

Property: Rhino.RhinoApp.SerialNumber
Return: string
Modifiers: public, static
Summary: Gets the product serial number, as seen in Rhino's ABOUT dialog box.
Accessors: get

Property: Rhino.RhinoApp.ToolbarFiles
Return: ToolbarFileCollection
Modifiers: public, static
Summary: Collection of currently open toolbar files in the application
Accessors: get

Property: Rhino.RhinoApp.UpdatesAndStatisticsStatus
Return: int
Modifiers: public, static
Summary: Returns True when Rhino is allowed to access the Internet, False otherwise. Note, this does not test if Internet access is available.
Accessors: get

Property: Rhino.RhinoApp.UserIsLoggedIn
Return: bool
Modifiers: public, static
Summary: Returns True if the user is logged in; else returns false. A logged in user does not guarantee that the auth tokens managed by the CloudZooManager instance are valid.
Accessors: get

Property: Rhino.RhinoApp.ValidationGracePeriodDaysLeft
Return: int
Modifiers: public, static
Summary: Returns number of days within which validation must occur. Zero when validation grace period has expired. Raises InvalidLicenseTypeException if LicenseType is one of: EvaluationSaveLimited EvaluationTimeLimited Viewer Unknown
Accessors: get

Property: Rhino.RhinoApp.Version
Return: Version
Modifiers: public, static
Summary: File version of the main Rhino process
Accessors: get

Property: Rhino.RhinoApp.VersionControlRevision
Return: string
Modifiers: public, static
Summary: McNeel version control revision identifier at the time this version of Rhino was built.
Accessors: get

Method: Rhino.RhinoApp.AskUserForRhinoLicense(bool standAlone, object parentWindow)
Return: bool
Modifiers: public, static
Summary: Display UI asking the user to enter a license for Rhino or use one from the Zoo.
Parameter: standAlone (bool)
Parameter Summary: True to ask for a stand-alone license, False to ask the user for a license from the Zoo
Parameter: parentWindow (object)
Parameter Summary: Parent window for the user interface dialog.

Method: Rhino.RhinoApp.CapturedCommandWindowStrings(bool clearBuffer)
Return: string
Modifiers: public, static
Summary: Get list of strings sent to the command window through calls to Write or WriteLine when capturing has been enabled
Parameter: clearBuffer (bool)
Parameter Summary: Clear the captured buffer after this call

Method: Rhino.RhinoApp.ChangeLicenseKey(System.Guid pluginId)
Return: bool
Modifiers: public, static
Summary: Display UI asking the user to enter a license for the product specified by licenseId.
Parameter: pluginId (System.Guid)
Parameter Summary: Guid identifying the plug-in that is requesting a change of license key

Method: Rhino.RhinoApp.ClearCommandHistoryWindow()
Return: void
Modifiers: public, static
Summary: Clear the text in Rhino's command history window.

Method: Rhino.RhinoApp.ExecuteCommand(RhinoDoc document, string commandName)
Return: Commands.Result
Modifiers: public, static
Summary: Execute a Rhino command.
Parameter: document (RhinoDoc)
Parameter Summary: Document to execute the command for
Parameter: commandName (string)
Parameter Summary: Name of command to run.  Use command's localized name or preface with an underscore.

Method: Rhino.RhinoApp.Exit()
Return: void
Modifiers: public, static
Summary: Exits, or closes, Rhino.

Method: Rhino.RhinoApp.Exit(bool allowCancel)
Return: void
Modifiers: public, static
Summary: Exits, or forcefully closes Rhino. A prompt to allow saving will appear if necessary when forcefully exiting Works on Windows and MacOS True to allow the user to cancel exiting False to force exit
Parameter: allowCancel (bool)
Parameter Summary: True to allow the user to cancel exiting False to force exit

Method: Rhino.RhinoApp.GetDataDirectory(bool localUser, bool forceDirectoryCreation, string subDirectory)
Return: string
Modifiers: public, static
Summary: Gets the data directory.
Parameter: localUser (bool)
Parameter Summary: If set totruelocal user.
Parameter: forceDirectoryCreation (bool)
Parameter Summary: If set totrueforce directory creation.
Parameter: subDirectory (string)
Parameter Summary: Sub directory, will get appended to the end of the data directory.  if forceDirectoryCreation is True then this directory will get created and writable.

Method: Rhino.RhinoApp.GetDataDirectory(bool localUser, bool forceDirectoryCreation)
Return: string
Modifiers: public, static
Summary: Gets the data directory.
Parameter: localUser (bool)
Parameter Summary: If set totruelocal user.
Parameter: forceDirectoryCreation (bool)
Parameter Summary: If set totrueforce directory creation.

Method: Rhino.RhinoApp.GetExecutableDirectory()
Return: System.IO.DirectoryInfo
Modifiers: public, static
Summary: directory

Method: Rhino.RhinoApp.GetPlugInObject(string plugin)
Return: object
Modifiers: public, static
Summary: Gets the object that is returned by PlugIn.GetPlugInObject for a given plug-in. This function attempts to find and load a plug-in with a given name. When a plug-in is found, it's GetPlugInObject function is called and the result is returned here. Note the plug-in must have already been installed in Rhino or the plug-in manager will not know where to look for a plug-in with a matching name.
Parameter: plugin (string)
Parameter Summary: Name of a plug-in.

Method: Rhino.RhinoApp.GetPlugInObject(System.Guid pluginId)
Return: object
Modifiers: public, static
Summary: Gets the object that is returned by PlugIn.GetPlugInObject for a given plug-in. This function attempts to find and load a plug-in with a given Id. When a plug-in is found, it's GetPlugInObject function is called and the result is returned here. Note the plug-in must have already been installed in Rhino or the plug-in manager will not know where to look for a plug-in with a matching id.
Parameter: pluginId (System.Guid)
Parameter Summary: Guid for a given plug-in.

Method: Rhino.RhinoApp.InFullScreen()
Return: bool
Modifiers: public, static
Summary: Verifies that Rhino is running in full screen mode.

Method: Rhino.RhinoApp.InvokeAndWait(System.Action action)
Return: void
Modifiers: public, static
Summary: Work-In-Progress. Testing this with our unit test framework

Method: Rhino.RhinoApp.InvokeOnUiThread(System.Delegate method, params object args)
Return: void
Modifiers: public, static
Summary: Execute a function on the main UI thread.
Parameter: method (System.Delegate)
Parameter Summary: function to execute
Parameter: args (object)
Parameter Summary: parameters to pass to the function

Method: Rhino.RhinoApp.IsInstallationBeta(Installation licenseType)
Return: bool
Modifiers: public, static
Summary: If licenseType is a beta license, returns true. A beta license grants full use of the product during the pre-release development period.

Method: Rhino.RhinoApp.IsInstallationCommercial(Installation licenseType)
Return: bool
Modifiers: public, static
Summary: If licenseType is a commercial license, returns true. A commercial license grants full use of the product.

Method: Rhino.RhinoApp.IsInstallationEvaluation(Installation licenseType)
Return: bool
Modifiers: public, static
Summary: If licenseType is an evaluation license, returns true. An evaluation license limits the ability of Rhino to save based on either the number of saves or a fixed period of time.

Method: Rhino.RhinoApp.LoginToCloudZoo()
Return: bool
Modifiers: public, static
Summary: Logs in to the cloud zoo.

Method: Rhino.RhinoApp.MainWindow()
Return: System.Windows.Forms.IWin32Window
Modifiers: public, static
Summary: Main Rhino Window

Method: Rhino.RhinoApp.MainWindowHandle()
Return: System.IntPtr
Modifiers: public, static
Summary: Gets the HWND of the Rhino main window.

Method: Rhino.RhinoApp.OutputDebugString(string str)
Return: void
Modifiers: public, static
Summary: Print a string to the Visual Studio Output window, if a debugger is attached.  Note that the developer needs to add a newline manually if the next output should come on a separate line.
Parameter: str (string)
Parameter Summary: The string to print to the Output window.

Method: Rhino.RhinoApp.ParseTextField(string formula, RhinoObject obj, RhinoObject topParentObject, InstanceObject immediateParent)
Return: string
Modifiers: public, static
Summary: Parses a text field string.
Parameter: formula (string)
Parameter Summary: The text formula.
Parameter: obj (RhinoObject)
Parameter Summary: The Rhino object. Value can be IntPtr.Zero.
Parameter: topParentObject (RhinoObject)
Parameter Summary: The parent Rhino object. Value can be IntPtr.Zero.
Parameter: immediateParent (InstanceObject)
Parameter Summary: The immediate parent instance object. Value can be IntPtr.Zero.

Method: Rhino.RhinoApp.ParseTextField(string formula, RhinoObject obj, RhinoObject topParentObject)
Return: string
Modifiers: public, static
Summary: Parses a text field string.
Parameter: formula (string)
Parameter Summary: The text formula.
Parameter: obj (RhinoObject)
Parameter Summary: The Rhino object. Value can be IntPtr.Zero.
Parameter: topParentObject (RhinoObject)
Parameter Summary: The parent Rhino object. Value can be IntPtr.Zero.

Method: Rhino.RhinoApp.PostCancelEvent(uint runtimeDocSerialNumber)
Return: void
Modifiers: public, static
Summary: Post a cancel event to the command line
Parameter: runtimeDocSerialNumber (uint)
Parameter Summary: Unique serialNumber for the document to post the event to.

Method: Rhino.RhinoApp.PostEnterEvent(uint runtimeDocSerialNumber, bool bRepeatedEnter)
Return: void
Modifiers: public, static
Summary: Post an enter event to the command line
Parameter: runtimeDocSerialNumber (uint)
Parameter Summary: Unique serialNumber for the document to post the event to.
Parameter: bRepeatedEnter (bool)
Parameter Summary: if true, allow multiple enter events to be posted simultaneouslyt.

Method: Rhino.RhinoApp.RefreshRhinoLicense()
Return: bool
Modifiers: public, static
Summary: Refresh the license used by Rhino. This allows any part of Rhino to ensure that the most current version of the license file on disk is in use.

Method: Rhino.RhinoApp.ReleaseMouseCapture()
Return: bool
Modifiers: public, static
Summary: Releases the mouse capture.

Method: Rhino.RhinoApp.RunMenuScript(string script)
Return: bool
Modifiers: public, static
Summary: Run a Rhino menu item script.  Will add the selected menu string to the MRU command menu.
Parameter: script (string)
Parameter Summary: [in] script to run.

Method: Rhino.RhinoApp.RunningInRdp()
Return: bool
Modifiers: public, static
Summary: Find out if Rhino is running in a remote session

Method: Rhino.RhinoApp.RunningOnVMWare()
Return: bool
Modifiers: public, static
Summary: Verifies that Rhino is running on VMWare

Method: Rhino.RhinoApp.RunScript(string script, bool echo)
Return: bool
Modifiers: public, static
Summary: Runs a Rhino command script.
Parameter: script (string)
Parameter Summary: [in] script to run.
Parameter: echo (bool)
Parameter Summary: Controls how the script is echoed in the command output window. False = silent - nothing is echoed. True = verbatim - the script is echoed literally.

Method: Rhino.RhinoApp.RunScript(string script, string mruDisplayString, bool echo)
Return: bool
Modifiers: public, static
Summary: Runs a Rhino command script.
Parameter: script (string)
Parameter Summary: [in] script to run.
Parameter: mruDisplayString (string)
Parameter Summary: [in] String to display in the most recent command list.
Parameter: echo (bool)
Parameter Summary: Controls how the script is echoed in the command output window. False = silent - nothing is echoed. True = verbatim - the script is echoed literally.

Method: Rhino.RhinoApp.RunScript(uint documentSerialNumber, string script, bool echo)
Return: bool
Modifiers: public, static
Summary: Runs a Rhino command script.
Parameter: documentSerialNumber (uint)
Parameter Summary: [in] Document serial number for the document to run the script for.
Parameter: script (string)
Parameter Summary: [in] script to run.
Parameter: echo (bool)
Parameter Summary: [in] Controls how the script is echoed in the command output window. False = silent - nothing is echoed. True = verbatim - the script is echoed literally.

Method: Rhino.RhinoApp.RunScript(uint documentSerialNumber, string script, string mruDisplayString, bool echo)
Return: bool
Modifiers: public, static
Summary: Runs a Rhino command script.
Parameter: documentSerialNumber (uint)
Parameter Summary: [in] Document serial number for the document to run the script for.
Parameter: script (string)
Parameter Summary: [in] script to run.
Parameter: mruDisplayString (string)
Parameter Summary: [in] String to display in the most recent command list.
Parameter: echo (bool)
Parameter Summary: [in] Controls how the script is echoed in the command output window. False = silent - nothing is echoed. True = verbatim - the script is echoed literally.

Method: Rhino.RhinoApp.SendKeystrokes(string characters, bool appendReturn)
Return: void
Modifiers: public, static
Summary: Sends a string of printable characters, including spaces, to Rhino's command line.
Parameter: characters (string)
Parameter Summary: [in] A string to characters to send to the command line. This can be null.
Parameter: appendReturn (bool)
Parameter Summary: [in] Append a return character to the end of the string.

Method: Rhino.RhinoApp.SetCommandPrompt(string prompt, string promptDefault)
Return: void
Modifiers: public, static
Summary: Sets the command prompt in Rhino.
Parameter: prompt (string)
Parameter Summary: The new prompt text.
Parameter: promptDefault (string)
Parameter Summary: Text that appears in angle brackets and indicates what will happen if the user pressed ENTER.

Method: Rhino.RhinoApp.SetCommandPrompt(string prompt)
Return: void
Modifiers: public, static
Summary: Set Rhino command prompt.
Parameter: prompt (string)
Parameter Summary: The new prompt text.

Method: Rhino.RhinoApp.SetCommandPromptMessage(string prompt)
Return: void
Modifiers: public, static
Summary: Set the text that appears in the Rhino command prompt. In general, you should use the SetCommandPrompt functions. In rare cases, like worker thread messages, the message that appears in the prompt has non-standard formatting. In these rare cases, SetCommandPromptMessage can be used to literally specify the text that appears in the command prompt window.
Parameter: prompt (string)
Parameter Summary: A literal text for the command prompt window.

Method: Rhino.RhinoApp.SetFocusToMainWindow()
Return: void
Modifiers: public, static
Summary: Sets the focus to the main window. This function attempts to use the ActiveDoc on Mac to figure out which window to set focus to.

Method: Rhino.RhinoApp.SetFocusToMainWindow(RhinoDoc doc)
Return: void
Modifiers: public, static
Summary: Sets the focus to the main windows for a given document
Parameter: doc (RhinoDoc)
Parameter Summary: the document to use for determining a "main window"

Method: Rhino.RhinoApp.Wait()
Return: void
Modifiers: public, static
Summary: Pauses to keep Windows message pump alive so views will update and windows will repaint.

Method: Rhino.RhinoApp.Write(string format, object arg0, object arg1, object arg2)
Return: void
Modifiers: public, static
Summary: Print formatted text in the command window.

Method: Rhino.RhinoApp.Write(string format, object arg0, object arg1)
Return: void
Modifiers: public, static
Summary: Print formatted text in the command window.

Method: Rhino.RhinoApp.Write(string format, object arg0)
Return: void
Modifiers: public, static
Summary: Print formatted text in the command window.

Method: Rhino.RhinoApp.Write(string message)
Return: void
Modifiers: public, static
Summary: Print formatted text in the command window.

Method: Rhino.RhinoApp.WriteLine()
Return: void
Modifiers: public, static
Summary: Print a newline in the command window.

Method: Rhino.RhinoApp.WriteLine(string format, object arg0, object arg1, object arg2)
Return: void
Modifiers: public, static
Summary: Print formatted text with a newline in the command window.

Method: Rhino.RhinoApp.WriteLine(string format, object arg0, object arg1)
Return: void
Modifiers: public, static
Summary: Print formatted text with a newline in the command window.

Method: Rhino.RhinoApp.WriteLine(string format, object arg0)
Return: void
Modifiers: public, static
Summary: Print formatted text with a newline in the command window.

Method: Rhino.RhinoApp.WriteLine(string message)
Return: void
Modifiers: public, static
Summary: Print text in the command window.

Class: Rhino.RhinoApp.CommandLineTextWriter
Summary: Provides a text writer that writes to the command line.

Constructor: Rhino.RhinoApp.CommandLineTextWriter.RhinoApp.CommandLineTextWriter()
Summary: Initializes a new instance of the RhinoApp.CommandLineTextWriter class

Property: Rhino.RhinoApp.CommandLineTextWriter.Encoding
Return: Encoding
Modifiers: public, override
Summary: Returns Encoding Unicode.
Accessors: get

Method: Rhino.RhinoApp.CommandLineTextWriter.Write(char buffer, int index, int count)
Return: void
Modifiers: public, override
Summary: Writes a char buffer to the command line.

Method: Rhino.RhinoApp.CommandLineTextWriter.Write(char value)
Return: void
Modifiers: public, override
Summary: Writes a char to the command line.

Method: Rhino.RhinoApp.CommandLineTextWriter.write(string str)
Return: void
Modifiers: public
Summary: Provided to give a simple way to IronPython to call this class.
Parameter: str (string)
Parameter Summary: The text.

Method: Rhino.RhinoApp.CommandLineTextWriter.Write(string value)
Return: void
Modifiers: public, override
Summary: Writes a string to the command line.

Class: Rhino.RhinoDoc
Summary: Represents an active model.

Constructor: Rhino.RhinoDoc.RhinoDoc()
Summary: Initializes a new instance of the RhinoDoc class

Property: Rhino.RhinoDoc.ActiveDoc
Return: RhinoDoc
Modifiers: public, static
Summary: WARNING!! Do not use the ActiveDoc if you don't have to. Under Mac Rhino the ActiveDoc can change while a command is running. Use the doc that is passed to you in your RunCommand function or continue to use the same doc after the first call to ActiveDoc.
Accessors: get set

Property: Rhino.RhinoDoc.ActiveCommandId
Return: Guid
Modifiers: public
Summary: Get the ID of the active command.
Accessors: get

Property: Rhino.RhinoDoc.ActiveSpace
Return: ActiveSpace
Modifiers: public
Summary: Get the space associated with the active view for this document
Accessors: get

Property: Rhino.RhinoDoc.AnimationProperties
Return: AnimationProperties
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.Bitmaps
Return: BitmapTable
Modifiers: public
Summary: bitmaps used in textures, backgrounds, wallpapers, ...
Accessors: get

Property: Rhino.RhinoDoc.CurrentEnvironment
Return: ICurrentEnvironment
Modifiers: public
Summary: Access to the current environment for various uses
Accessors: get

Property: Rhino.RhinoDoc.CurrentUndoRecordSerialNumber
Return: uint
Modifiers: public
Summary: >0: undo recording is active and being saved on the undo record with the specified serial number. 0: undo recording is not active. (Disabled or nothing is being recorded.)
Accessors: get

Property: Rhino.RhinoDoc.CustomRenderSizes
Return: Size>
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.DateCreated
Return: DateTime
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.DateLastEdited
Return: DateTime
Modifiers: public
Summary: Returns the date the document was created in Coordinated Universal Time (UTC). Use DateTime.ToLocalTime to convert to local time.
Accessors: get

Property: Rhino.RhinoDoc.DimStyles
Return: DimStyleTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.DistanceDisplayPrecision
Return: int
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.DocumentId
Return: int
Modifiers: public
Summary: Gets the Document Id.
Accessors: get

Property: Rhino.RhinoDoc.EarthAnchorPoint
Return: EarthAnchorPoint
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.Fonts
Return: FontTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.GroundPlane
Return: GroundPlane
Modifiers: public
Summary: Gets the ground plane of this document.
Accessors: get

Property: Rhino.RhinoDoc.Groups
Return: GroupTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.HatchPatterns
Return: HatchPatternTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.InGetPoint
Return: bool
Modifiers: public
Summary: Returns True if currently in a GetPoint.Get().
Accessors: get

Property: Rhino.RhinoDoc.InstanceDefinitions
Return: InstanceDefinitionTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsAvailable
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsClosing
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsCommandRunning
Return: bool
Modifiers: public
Summary: Returns True if Rhino is currently running a command.
Accessors: get

Property: Rhino.RhinoDoc.IsCreating
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsHeadless
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsInitializing
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsLocked
Return: bool
Modifiers: public
Summary: Check to see if the file associated with this document is locked.  If it is locked then this is the only document that will be able to write the file.  Other instances of Rhino will fail to write this document.
Accessors: get

Property: Rhino.RhinoDoc.IsOpening
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.IsReadOnly
Return: bool
Modifiers: public
Summary: Current read-only mode for this document. True if the document can be viewed but NOT saved. False if document can be viewed and saved.
Accessors: get

Property: Rhino.RhinoDoc.IsSendingMail
Return: bool
Modifiers: public
Summary: True if Rhino is in the process of sending this document as an email attachment.
Accessors: get

Property: Rhino.RhinoDoc.Layers
Return: LayerTable
Modifiers: public
Summary: Layers in the document.
Accessors: get

Property: Rhino.RhinoDoc.LayoutSpaceAnnotationScalingEnabled
Return: bool
Modifiers: public
Summary: If LayoutSpaceAnnotationScaling is on, sizes in dimstyles are multiplied by dimscale when the annotation is displayed in a detail viewport not in a detail
Accessors: get set

Property: Rhino.RhinoDoc.Lights
Return: LightTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.Linetypes
Return: LinetypeTable
Modifiers: public
Summary: Linetypes in the document.
Accessors: get

Property: Rhino.RhinoDoc.Manifest
Return: ManifestTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.Materials
Return: MaterialTable
Modifiers: public
Summary: Materials in the document.
Accessors: get

Property: Rhino.RhinoDoc.MeshingParameterStyle
Return: MeshingParameterStyle
Modifiers: public
Summary: Type of MeshingParameters currently used by the document to mesh objects
Accessors: get set

Property: Rhino.RhinoDoc.ModelAbsoluteTolerance
Return: double
Modifiers: public
Summary: Model space absolute tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.ModelAngleToleranceDegrees
Return: double
Modifiers: public
Summary: Model space angle tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.ModelAngleToleranceRadians
Return: double
Modifiers: public
Summary: Model space angle tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.ModelBasepoint
Return: Point3d
Modifiers: public
Summary: The base point in the model that is used when inserting the model into another as a block definition. By default the base point in any model is 0,0,0.
Accessors: get set

Property: Rhino.RhinoDoc.ModelDistanceDisplayPrecision
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.ModelRelativeTolerance
Return: double
Modifiers: public
Summary: Model space relative tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.ModelSpaceAnnotationScalingEnabled
Return: bool
Modifiers: public
Summary: If ModelSpaceAnnotationScaling is on, sizes in dimstyles are multiplied by dimscale when the annotation is displayed in a model space viewport not in a detail
Accessors: get set

Property: Rhino.RhinoDoc.ModelSpaceHatchScale
Return: double
Modifiers: public
Summary: The scale factor for hatches in model space when Hatch Scaling is enabled
Accessors: get set

Property: Rhino.RhinoDoc.ModelSpaceHatchScalingEnabled
Return: bool
Modifiers: public
Summary: True if hatch scaling is enabled, False if not.
Accessors: get set

Property: Rhino.RhinoDoc.ModelSpaceTextScale
Return: double
Modifiers: public
Summary: The scale factor for text in model space when Annotation Scaling is enabled
Accessors: get set

Property: Rhino.RhinoDoc.ModelUnitSystem
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.Modified
Return: bool
Modifiers: public
Summary: Returns or sets the document's modified flag.
Accessors: get set

Property: Rhino.RhinoDoc.Name
Return: string
Modifiers: public
Summary: Returns the name of the currently loaded Rhino document (3DM file).
Accessors: get

Property: Rhino.RhinoDoc.NamedConstructionPlanes
Return: NamedConstructionPlaneTable
Modifiers: public
Summary: Collection of named construction planes.
Accessors: get

Property: Rhino.RhinoDoc.NamedLayerStates
Return: NamedLayerStateTable
Modifiers: public
Summary: Collection of named layer states.
Accessors: get

Property: Rhino.RhinoDoc.NamedPositions
Return: NamedPositionTable
Modifiers: public
Summary: Collection of named positions.
Accessors: get

Property: Rhino.RhinoDoc.NamedViews
Return: NamedViewTable
Modifiers: public
Summary: Collection of named views.
Accessors: get

Property: Rhino.RhinoDoc.NextUndoRecordSerialNumber
Return: uint
Modifiers: public
Summary: The serial number that will be assigned to the next undo record that is constructed.
Accessors: get

Property: Rhino.RhinoDoc.Notes
Return: string
Modifiers: public
Summary: Returns or sets the document's notes.
Accessors: get set

Property: Rhino.RhinoDoc.NotesLocked
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.Objects
Return: ObjectTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.PageAbsoluteTolerance
Return: double
Modifiers: public
Summary: Page space absolute tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.PageAngleToleranceDegrees
Return: double
Modifiers: public
Summary: Page space angle tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.PageAngleToleranceRadians
Return: double
Modifiers: public
Summary: Page space angle tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.PageDistanceDisplayPrecision
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.PageRelativeTolerance
Return: double
Modifiers: public
Summary: Page space relative tolerance.
Accessors: get set

Property: Rhino.RhinoDoc.PageUnitSystem
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.Path
Return: string
Modifiers: public
Summary: Returns the path of the currently loaded Rhino document (3DM file).
Accessors: get

Property: Rhino.RhinoDoc.PostEffects
Return: IPostEffects
Modifiers: public
Summary: Access to the post effects
Accessors: get

Property: Rhino.RhinoDoc.RedoActive
Return: bool
Modifiers: public
Summary: Returns True if Redo is currently active.
Accessors: get

Property: Rhino.RhinoDoc.RenderEnvironments
Return: RenderEnvironmentTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterials
Return: RenderMaterialTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderSettings
Return: RenderSettings
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.RenderTextures
Return: RenderTextureTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RuntimeData
Return: RuntimeDocumentDataTable
Modifiers: public
Summary: Collection of document runtime data. This is a good place to put non-serializable, per document data, such as panel view models. Note well: This data will be dispose with the document and does not get serialized.
Accessors: get

Property: Rhino.RhinoDoc.RuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Unique serialNumber for the document while the application is running. This is not a persistent value.
Accessors: get set

Property: Rhino.RhinoDoc.Snapshots
Return: SnapshotTable
Modifiers: public
Summary: Collection of snapshots.
Accessors: get

Property: Rhino.RhinoDoc.Strings
Return: StringTable
Modifiers: public
Summary: Collection of document user data strings in this document
Accessors: get

Property: Rhino.RhinoDoc.SubDAppearance
Return: SubDComponentLocation
Modifiers: public
Summary: Returns or sets the appearance of all SubD objects in the document.
Accessors: get set

Property: Rhino.RhinoDoc.TemplateFileUsed
Return: string
Modifiers: public
Summary: name of the template file used to create this document. This is a runtime value only present if the document was newly created.
Accessors: get

Property: Rhino.RhinoDoc.UndoActive
Return: bool
Modifiers: public
Summary: Returns True if Undo is currently active.
Accessors: get

Property: Rhino.RhinoDoc.UndoRecordingEnabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.RhinoDoc.UndoRecordingIsActive
Return: bool
Modifiers: public
Summary: True if undo recording is actually happening now.
Accessors: get

Property: Rhino.RhinoDoc.Views
Return: ViewTable
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.Worksession
Return: Worksession
Modifiers: public
Summary: Provides access to the document's worksession.
Accessors: get

Method: Rhino.RhinoDoc.Create(string modelTemplateFileName)
Return: RhinoDoc
Modifiers: public, static
Summary: Creates a new RhinoDoc
Parameter: modelTemplateFileName (string)
Parameter Summary: Name of a Rhino model to use as a template to initialize the document. If the template contains views, those views are created. If null, an empty document with no views is created

Method: Rhino.RhinoDoc.CreateHeadless(string file3dmTemplatePath)
Return: RhinoDoc
Modifiers: public, static
Summary: Create a new headless RhinoDoc from a template file
Parameter: file3dmTemplatePath (string)
Parameter Summary: Name of a Rhino model to use as a template to initialize the document. If null, an empty document is created

Method: Rhino.RhinoDoc.ExtractPreviewImage(string path)
Return: System.Drawing.Bitmap
Modifiers: static, public
Summary: Extracts the bitmap preview image from the specified .3dm file.
Parameter: path (string)
Parameter Summary: The .3dm file from which to extract the preview image. If null, the path to the active document is used.

Method: Rhino.RhinoDoc.FromFilePath(string filePath)
Return: RhinoDoc
Modifiers: public, static
Summary: Search the open document list for a document with a Path equal to the specified file path.
Parameter: filePath (string)
Parameter Summary: The full path to the file to search for.

Method: Rhino.RhinoDoc.FromId(int docId)
Return: RhinoDoc
Modifiers: public, static

Method: Rhino.RhinoDoc.FromRuntimeSerialNumber(uint serialNumber)
Return: RhinoDoc
Modifiers: public, static

Method: Rhino.RhinoDoc.Open(string filePath, out bool wasAlreadyOpen)
Return: RhinoDoc
Modifiers: public, static
Summary: Opens a 3dm file and makes it the active document. If called on windows the active document will be saved and closed and the new document will be opened and become the active document.  If called on the Mac the file will be opened in a new document window.
Parameter: filePath (string)
Parameter Summary: Full path to the 3dm file to open
Parameter: wasAlreadyOpen (bool)
Parameter Summary: Will get set to True if there is a currently open document with the specified path; otherwise it will get set to false.

Method: Rhino.RhinoDoc.OpenDocuments()
Return: RhinoDoc[]
Modifiers: public, static
Summary: Returns a list of currently open Rhino documents

Method: Rhino.RhinoDoc.OpenDocuments(bool includeHeadless)
Return: RhinoDoc[]
Modifiers: public, static
Summary: Returns a list of currently open Rhino documents
Parameter: includeHeadless (bool)
Parameter Summary: pass True to include headless docs in the list

Method: Rhino.RhinoDoc.OpenFile(string path)
Return: bool
Modifiers: public, static

Method: Rhino.RhinoDoc.OpenHeadless(string file3dmPath)
Return: RhinoDoc
Modifiers: public, static
Summary: Opens a 3DM file into a new headless RhinoDoc.
Parameter: file3dmPath (string)
Parameter Summary: Path of a Rhino model to load.

Method: Rhino.RhinoDoc.ReadFile(string path, FileReadOptions options)
Return: bool
Modifiers: public, static

Method: Rhino.RhinoDoc.AddCustomUndoEvent(string description, EventHandler<CustomUndoEventArgs> handler, object tag)
Return: bool
Modifiers: public
Summary: Add a custom undo event so you can undo private plug-in data when the user performs an undo or redo

Method: Rhino.RhinoDoc.AddCustomUndoEvent(string description, EventHandler<CustomUndoEventArgs> handler)
Return: bool
Modifiers: public

Method: Rhino.RhinoDoc.AdjustModelUnitSystem(UnitSystem newUnitSystem, bool scale)
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.AdjustPageUnitSystem(UnitSystem newUnitSystem, bool scale)
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.BeginUndoRecord(string description)
Return: uint
Modifiers: public
Summary: Instructs Rhino to begin recording undo information when the document is changed outside of a command. We use this, e.g., to save changes caused by the modeless layer or object properties dialogs when commands are not running.
Parameter: description (string)
Parameter Summary: A text describing the record.

Method: Rhino.RhinoDoc.ClearRedoRecords()
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.ClearUndoRecords(bool purgeDeletedObjects)
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.ClearUndoRecords(uint undoSerialNumber, bool purgeDeletedObjects)
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.CreateDefaultAttributes()
Return: DocObjects.ObjectAttributes
Modifiers: public
Summary: Gets the default object attributes for this document. The attributes will be linked to the currently active layer and they will inherit the Document WireDensity setting.

Method: Rhino.RhinoDoc.CustomRenderMeshesBoundingBox(MeshType mt, ViewportInfo vp, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs, out BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Returns the bounding box of custom render primitives for this object .
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The requested bounding box

Method: Rhino.RhinoDoc.Dispose()
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.EndUndoRecord(uint undoRecordSerialNumber)
Return: bool
Modifiers: public
Summary: Ends the undo record.
Parameter: undoRecordSerialNumber (uint)
Parameter Summary: The serial number of the undo record.

Method: Rhino.RhinoDoc.Equals(object obj)
Return: bool
Modifiers: public, override

Method: Rhino.RhinoDoc.Export(string filePath, ArchivableDictionary options)
Return: bool
Modifiers: public
Summary: Export the entire document to a file. All file formats that Rhino can export to are supported by this function.
Parameter: filePath (string)
Parameter Summary: 
Parameter: options (ArchivableDictionary)
Parameter Summary: Options to help define how data should be exported.

Method: Rhino.RhinoDoc.Export(string filePath)
Return: bool
Modifiers: public
Summary: Export the entire document to a file. All file formats that Rhino can export to are supported by this function.

Method: Rhino.RhinoDoc.ExportSelected(string filePath, ArchivableDictionary options)
Return: bool
Modifiers: public
Summary: Export selected geometry to a file. All file formats that Rhino can export to are supported by this function.
Parameter: filePath (string)
Parameter Summary: 
Parameter: options (ArchivableDictionary)
Parameter Summary: Options to help define how data should be exported.

Method: Rhino.RhinoDoc.ExportSelected(string filePath)
Return: bool
Modifiers: public
Summary: Export selected geometry to a file. All file formats that Rhino can export to are supported by this function.

Method: Rhino.RhinoDoc.FindFile(string filename)
Return: string
Modifiers: public
Summary: Search for a file using Rhino's search path.  Rhino will look in the following places: 1. Current model folder 2. Path specified in options dialog/File tab 3. Rhino system folders 4. Rhino executable folder

Method: Rhino.RhinoDoc.FormatNumber(double value, bool appendUnitSystemName, bool abbreviate)
Return: string
Modifiers: public
Summary: Call this method to get string representing the specified value using the documents display coordinate system and display precision.

Method: Rhino.RhinoDoc.FormatNumber(double value)
Return: string
Modifiers: public
Summary: Call this method to get string representing the specified value using the documents display coordinate system and display precision.

Method: Rhino.RhinoDoc.GetAnalysisMeshingParameters()
Return: MeshingParameters
Modifiers: public
Summary: Get analysis meshing parameters currently used by the document

Method: Rhino.RhinoDoc.GetCurrentMeshingParameters()
Return: MeshingParameters
Modifiers: public
Summary: Get the custom meshing parameters that this document will use.

Method: Rhino.RhinoDoc.GetCustomUnitSystem(bool modelUnits, out string customUnitName, out double metersPerCustomUnit)
Return: bool
Modifiers: public
Summary: Get the custom unit system name and custom unit scale.
Parameter: modelUnits (bool)
Parameter Summary: Set True to get values from the document's model unit system. Set False to get values from the document's page unit system.
Parameter: customUnitName (string)
Parameter Summary: The custom unit system name.
Parameter: metersPerCustomUnit (double)
Parameter Summary: The meters per custom unit scale.

Method: Rhino.RhinoDoc.GetEmbeddedFilesList(bool missingOnly)
Return: string
Modifiers: public

Method: Rhino.RhinoDoc.GetGridDefaults()
Return: ConstructionPlaneGridDefaults
Modifiers: public

Method: Rhino.RhinoDoc.GetGumballPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Returns the active plane of Rhino's auto-gumball widget. Note, when calling from a Rhino command, make sure the command class has the Rhino.Commands.Style.Transparent command style attribute.
Parameter: plane (Plane)
Parameter Summary: The active plane.

Method: Rhino.RhinoDoc.GetHashCode()
Return: int
Modifiers: public, override

Method: Rhino.RhinoDoc.GetMeshingParameters(MeshingParameterStyle style)
Return: MeshingParameters
Modifiers: public
Summary: Get MeshingParameters currently used by the document

Method: Rhino.RhinoDoc.GetRenderPrimitiveList(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs)
Return: RenderPrimitiveList
Modifiers: public
Summary: Build custom render mesh(es) for this document (i.e. - GH meshes).
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Attributes for the view mode you are supplying meshes for.  Will be None if this is a modal rendering.

Method: Rhino.RhinoDoc.GetRenderPrimitives(bool forceTriangleMeshes, bool quietly)
Return: IEnumerable<RenderPrimitive>
Modifiers: public
Summary: Get a enumerable list of custom mesh primitives
Parameter: forceTriangleMeshes (bool)
Parameter Summary: If True all mesh faces will be triangulated
Parameter: quietly (bool)
Parameter Summary: Iterate quietly, if True then no user interface will be displayed

Method: Rhino.RhinoDoc.GetRenderPrimitives(DocObjects.ViewportInfo viewport, bool forceTriangleMeshes, bool quietly)
Return: IEnumerable<RenderPrimitive>
Modifiers: public
Summary: Get a enumerable list of custom mesh primitives
Parameter: viewport (DocObjects.ViewportInfo)
Parameter Summary: The rendering view camera.
Parameter: forceTriangleMeshes (bool)
Parameter Summary: If True all mesh faces will be triangulated
Parameter: quietly (bool)
Parameter Summary: Iterate quietly, if True then no user interface will be displayed

Method: Rhino.RhinoDoc.GetRenderPrimitives(System.Guid plugInId, DocObjects.ViewportInfo viewport, bool forceTriangleMeshes, bool quietly)
Return: IEnumerable<RenderPrimitive>
Modifiers: public
Summary: Get a enumerable list of custom mesh primitives
Parameter: plugInId (System.Guid)
Parameter Summary: The Id of the plug-in creating the iterator.
Parameter: viewport (DocObjects.ViewportInfo)
Parameter Summary: The rendering view camera.
Parameter: forceTriangleMeshes (bool)
Parameter Summary: If True all mesh faces will be triangulated
Parameter: quietly (bool)
Parameter Summary: Iterate quietly, if True then no user interface will be displayed

Method: Rhino.RhinoDoc.GetUnitSystemName(bool modelUnits, bool capitalize, bool singular, bool abbreviate)
Return: string
Modifiers: public

Method: Rhino.RhinoDoc.HasCustomRenderMeshes(MeshType mt, ViewportInfo vp, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public
Summary: Returns True if the document has a set of custom render primitives - ie, CustomRenderMeshes will return non-null.
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.

Method: Rhino.RhinoDoc.Import(string filePath, ArchivableDictionary options)
Return: bool
Modifiers: public
Summary: Import geometry into a RhinoDoc from a file. This can be any file format that Rhino can import

Method: Rhino.RhinoDoc.Import(string filePath)
Return: bool
Modifiers: public
Summary: Import geometry into a RhinoDoc from a file. This can be any file format that Rhino can import

Method: Rhino.RhinoDoc.InCommand(bool bIgnoreScriptRunnerCommands)
Return: int
Modifiers: public
Summary: This is a low level tool to determine if Rhino is currently running a command.
Parameter: bIgnoreScriptRunnerCommands (bool)
Parameter Summary: If true, script running commands, like "ReadCommandFile" and the RhinoScript plug-ins "RunScript" command, are not counted.

Method: Rhino.RhinoDoc.IsMetricUnitSystem(bool modelUnits)
Return: bool
Modifiers: public
Summary: Determines if a document unit system is a metric unit system.
Parameter: modelUnits (bool)
Parameter Summary: True to query model units, False to query page units.

Method: Rhino.RhinoDoc.ReadFileVersion()
Return: int
Modifiers: public
Summary: Returns the file version of the current document. Use this function to determine which version of Rhino last saved the document.

Method: Rhino.RhinoDoc.Redo()
Return: bool
Modifiers: public
Summary: Redo the last action that was "undone"

Method: Rhino.RhinoDoc.RenderMeshes(MeshType mt, ViewportInfo vp, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: RenderMeshes[]
Modifiers: public
Summary: Returns a set of non-object custom render primitives for this document.
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.

Method: Rhino.RhinoDoc.Save()
Return: bool
Modifiers: public
Summary: Save doc to disk using the document's Path

Method: Rhino.RhinoDoc.SaveAs(string file3dmPath, int version, bool saveSmall, bool saveTextures, bool saveGeometryOnly, bool savePluginData)
Return: bool
Modifiers: public
Summary: Save doc as a 3dm to a specified path
Parameter: file3dmPath (string)
Parameter Summary: 
Parameter: version (int)
Parameter Summary: Rhino file version
Parameter: saveSmall (bool)
Parameter Summary: whether to inlcude render meshes and preview image
Parameter: saveTextures (bool)
Parameter Summary: whether to include the bitmap table
Parameter: saveGeometryOnly (bool)
Parameter Summary: whether to write enything besides geometry
Parameter: savePluginData (bool)
Parameter Summary: whether to write plugin user data

Method: Rhino.RhinoDoc.SaveAs(string file3dmPath, int version)
Return: bool
Modifiers: public
Summary: Save doc as a 3dm to a specified path
Parameter: file3dmPath (string)
Parameter Summary: 
Parameter: version (int)
Parameter Summary: Rhino file version

Method: Rhino.RhinoDoc.SaveAs(string file3dmPath)
Return: bool
Modifiers: public
Summary: Save doc as a 3dm to a specified path using the current Rhino file version

Method: Rhino.RhinoDoc.SaveAsTemplate(string file3dmTemplatePath, int version)
Return: bool
Modifiers: public
Summary: Save this document as a template to a specific Rhino file version

Method: Rhino.RhinoDoc.SaveAsTemplate(string file3dmTemplatePath)
Return: bool
Modifiers: public
Summary: Save this document as a template

Method: Rhino.RhinoDoc.SelectRenderContentInEditor(Rhino.Render.RenderContentCollection collection, bool append)
Return: void
Modifiers: public
Summary: Selects a collection of contents in any editors they appear in.
Parameter: collection (Rhino.Render.RenderContentCollection)
Parameter Summary: A collection of RenderContents to select
Parameter: append (bool)
Parameter Summary: Append to current selection

Method: Rhino.RhinoDoc.SetCustomMeshingParameters(MeshingParameters mp)
Return: void
Modifiers: public
Summary: Set the custom meshing parameters that this document will use. You must also modify the MeshingParameterStyle property on the document to Custom if you want these meshing parameters to be used

Method: Rhino.RhinoDoc.SetCustomUnitSystem(bool modelUnits, string customUnitName, double metersPerCustomUnit, bool scale)
Return: bool
Modifiers: public
Summary: Changes the unit system to custom units and sets the custom unit scale.
Parameter: modelUnits (bool)
Parameter Summary: Set True to set values from the document's model unit system. Set False to set values from the document's page unit system.
Parameter: customUnitName (string)
Parameter Summary: The custom unit system name.
Parameter: metersPerCustomUnit (double)
Parameter Summary: The meters per custom unit scale.
Parameter: scale (bool)
Parameter Summary: Set True to scale existing objects.

Method: Rhino.RhinoDoc.SetGridDefaults(ConstructionPlaneGridDefaults defaults)
Return: void
Modifiers: public

Method: Rhino.RhinoDoc.SupportsRenderPrimitiveList(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public
Summary: Determines if custom render meshes will be built for this document (i.e. - GH meshes).
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Type of mesh to build. If attrs is non-None then a smaller mesh may be generated in less time, False is meant when actually rendering.

Method: Rhino.RhinoDoc.TryGetRenderPrimitiveBoundingBox(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs, out BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Get the bounding box for the custom render meshes associated with this document (i.e. - GH meshes).
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Attributes for the view mode you are supplying meshes for.  Will be None if this is a modal rendering.
Parameter: boundingBox (BoundingBox)
Parameter Summary: This will be set to BoundingBox.Unset on failure otherwise it will be the bounding box for the custom render meshes associated with this object.

Method: Rhino.RhinoDoc.Undo()
Return: bool
Modifiers: public
Summary: Undo the last action

Method: Rhino.RhinoDoc.Write3dmFile(string path, FileWriteOptions options)
Return: bool
Modifiers: public
Summary: Write information in this document to a .3dm file. Note, the active document's name will not be changed.
Parameter: path (string)
Parameter Summary: The name of the .3dm file to write.
Parameter: options (FileWriteOptions)
Parameter Summary: The file writing options.

Method: Rhino.RhinoDoc.WriteFile(string path, FileWriteOptions options)
Return: bool
Modifiers: public
Summary: Write information in this document to a file. Note, the active document's name will be changed to that of the path provided.
Parameter: path (string)
Parameter Summary: The name of the file to write.
Parameter: options (FileWriteOptions)
Parameter Summary: The file writing options.

Class: Rhino.RhinoDoc.RenderContentTableEventArgs
Summary: Passed to the <b>RenderMaterialsTableEvent</b> , <b>RenderEnvironmentTableEvent</b> and the  <b>RenderTextureTableEvent</b> events.

Property: Rhino.RhinoDoc.RenderContentTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Document the table belongs to
Accessors: get

Property: Rhino.RhinoDoc.RenderContentTableEventArgs.EventType
Return: RenderContentTableEventType
Modifiers: public
Summary: Event type
Accessors: get

Class: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.IsLayer
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.IsObject
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.LayerId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.NewRenderMaterial
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.ObjectId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.RenderMaterialAssignmentChangedEventArgs.OldRenderMaterial
Return: Guid
Modifiers: public
Accessors: get

Class: Rhino.RhinoDoc.TextureMappingEventArgs
Summary: Event arguments passed to the RhinoDoc.TextureMappingEvent.

Property: Rhino.RhinoDoc.TextureMappingEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.TextureMappingEventArgs.EventType
Return: TextureMappingEventType
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.TextureMappingEventArgs.NewMapping
Return: TextureMapping
Modifiers: public
Accessors: get

Property: Rhino.RhinoDoc.TextureMappingEventArgs.OldMapping
Return: TextureMapping
Modifiers: public
Accessors: get

Class: Rhino.RhinoDoc.UserStringChangedArgs
Summary: This event is raised when document user text strings are changed

Property: Rhino.RhinoDoc.UserStringChangedArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Document containing the user string
Accessors: get

Property: Rhino.RhinoDoc.UserStringChangedArgs.Key
Return: string
Modifiers: public
Summary: Key for the string being changed
Accessors: get

Class: Rhino.RhinoDocObserverArgs
Summary: Arguments passed to <b>IRhinoDocObserver</b> methods.

Constructor: Rhino.RhinoDocObserverArgs.RhinoDocObserverArgs(RhinoDoc doc)

Property: Rhino.RhinoDocObserverArgs.Doc
Return: RhinoDoc
Modifiers: public
Summary: Document
Accessors: get

Property: Rhino.RhinoDocObserverArgs.RuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Document runtime serial number, will be different across Rhino sessions.
Accessors: get

Class: Rhino.RhinoMath
Summary: Provides constants and static methods that are additional to  <b>System.Math</b> .

Constructor: Rhino.RhinoMath.RhinoMath()
Summary: Initializes a new instance of the RhinoMath class

Method: Rhino.RhinoMath.Clamp(double value, double bound1, double bound2)
Return: double
Modifiers: public, static
Summary: Limits a <b>double</b> to be specified within an interval of two numbers, by specifying a fixed minimum and maximum.
Parameter: value (double)
Parameter Summary: A number.
Parameter: bound1 (double)
Parameter Summary: A first bound.
Parameter: bound2 (double)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

Method: Rhino.RhinoMath.Clamp(int value, int bound1, int bound2)
Return: int
Modifiers: public, static
Summary: Restricts a <b>int</b> to be specified within an interval of two integers.
Parameter: value (int)
Parameter Summary: An integer.
Parameter: bound1 (int)
Parameter Summary: A first bound.
Parameter: bound2 (int)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, byte buffer)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a byte array. http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: buffer (byte)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, double value)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a <b>double</b> . http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: value (double)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.CRC32(uint currentRemainder, int value)
Return: uint
Modifiers: public, static
Summary: Advances the cyclic redundancy check value remainder given a <b>int</b> . http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
Parameter: currentRemainder (uint)
Parameter Summary: The remainder from which to start.
Parameter: value (int)
Parameter Summary: The value to add to the current remainder.

Method: Rhino.RhinoMath.EpsilonEquals(double x, double y, double epsilon)
Return: bool
Modifiers: public, static
Summary: Compare two doubles for equality within some "epsilon" range

Method: Rhino.RhinoMath.EpsilonEquals(float x, float y, float epsilon)
Return: bool
Modifiers: public, static
Summary: Compare to floats for equality within some "epsilon" range

Method: Rhino.RhinoMath.EvaluateNormal(int limitDirection, Rhino.Geometry.Vector3d ds, Rhino.Geometry.Vector3d dt, Rhino.Geometry.Vector3d dss, Rhino.Geometry.Vector3d dst, Rhino.Geometry.Vector3d dtt, out Rhino.Geometry.Vector3d n)
Return: bool
Modifiers: public, static
Summary: Expert tool to evaluate surface unit normal.
Parameter: limitDirection (int)
Parameter Summary: Determines which direction is used to compute the limit, where: 0 = default, 1 = from quadrant I, 2 = from quadrant II, etc.
Parameter: ds (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dss (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dst (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dtt (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: n (Rhino.Geometry.Vector3d)
Parameter Summary: Unit normal.

Method: Rhino.RhinoMath.EvaluateNormalPartials(Rhino.Geometry.Vector3d ds, Rhino.Geometry.Vector3d dt, Rhino.Geometry.Vector3d dss, Rhino.Geometry.Vector3d dst, Rhino.Geometry.Vector3d dtt, out Rhino.Geometry.Vector3d ns, out Rhino.Geometry.Vector3d nt)
Return: bool
Modifiers: public, static
Summary: Expert tool to evaluate partial derivatives of surface unit normal.
Parameter: ds (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative.
Parameter: dss (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dst (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: dtt (Rhino.Geometry.Vector3d)
Parameter Summary: Second partial derivative.
Parameter: ns (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative of unit normal. If the Jacobian is degenerate, ns is set to zero.
Parameter: nt (Rhino.Geometry.Vector3d)
Parameter Summary: First partial derivative of unit normal. If the Jacobian is degenerate, nt is set to zero.

Method: Rhino.RhinoMath.IntIndexToString(int index)
Return: string
Modifiers: public, static
Summary: Portrays an <b>int</b> index in text.
Parameter: index (int)
Parameter Summary: <b>int</b> number express as string.

Method: Rhino.RhinoMath.IsValidDouble(double x)
Return: bool
Modifiers: public, static
Summary: Determines whether a <b>double</b> value is valid within the RhinoCommon context.
Rhino does not use Double.NaN by convention, so this test evaluates to True if:
x is not equal to RhinoMath.UnsetValue
System.Double.IsNaN(x) evaluates to false
System.Double.IsInfinity(x) evaluates to false | Since: 5.0 | Parameter: x (double) | Parameter Summary: <b>double</b> number to test for validity.

Method: Rhino.RhinoMath.IsValidSingle(float x)
Return: bool
Modifiers: public, static
Summary: Determines whether a <b>float</b> value is valid within the RhinoCommon context.
Rhino does not use Single.NaN by convention, so this test evaluates to True if:
x is not equal to RhinoMath.UnsetValue,
System.Single.IsNaN(x) evaluates to false
System.Single.IsInfinity(x) evaluates to false | Since: 5.0 | Parameter: x (float) | Parameter Summary: <b>float</b> number to test for validity.

Method: Rhino.RhinoMath.MetersPerUnit(UnitSystem units)
Return: double
Modifiers: public, static
Summary: Return number of meters per one unit of a given unit system

Method: Rhino.RhinoMath.ParseNumber(string expression)
Return: double
Modifiers: public, static
Summary: Evaluates command line math expression.

Method: Rhino.RhinoMath.ToDegrees(double radians)
Return: double
Modifiers: public, static
Summary: Convert an angle from radians to degrees.
Parameter: radians (double)
Parameter Summary: Radians to convert (180 degrees equals pi radians).

Method: Rhino.RhinoMath.ToRadians(double degrees)
Return: double
Modifiers: public, static
Summary: Convert an angle from degrees to radians.
Parameter: degrees (double)
Parameter Summary: Degrees to convert (180 degrees equals pi radians).

Method: Rhino.RhinoMath.TryParseNumber(string expression, out double result)
Return: bool
Modifiers: public, static
Summary: Evaluates command line math expression.

Method: Rhino.RhinoMath.UnitScale(UnitSystem from, double fromMetersPerUnit, UnitSystem to, double toMetersPerUnit)
Return: double
Modifiers: public, static
Summary: Computes the scale factor for changing the measurements unit systems.
Parameter: from (UnitSystem)
Parameter Summary: The system to convert from.
Parameter: fromMetersPerUnit (double)
Parameter Summary: For custom units, specify the meters per unit.
Parameter: to (UnitSystem)
Parameter Summary: The system to convert measurements into.
Parameter: toMetersPerUnit (double)
Parameter Summary: For custom units, specify the meters per unit.

Method: Rhino.RhinoMath.UnitScale(UnitSystem from, UnitSystem to)
Return: double
Modifiers: public, static
Summary: Computes the scale factor for changing the measurements unit systems.
Parameter: from (UnitSystem)
Parameter Summary: The system to convert from.
Parameter: to (UnitSystem)
Parameter Summary: The system to convert measurements into.

Method: Rhino.RhinoMath.Wrap(double value, double bound1, double bound2)
Return: double
Modifiers: public, static
Summary: Limits a <b>double</b> to be specified within an interval of two numbers by repeating the available interval cyclically.
Parameter: value (double)
Parameter Summary: A number.
Parameter: bound1 (double)
Parameter Summary: A first bound.
Parameter: bound2 (double)
Parameter Summary: A second bound. This does not necessarily need to be larger or smaller than bound1.

Class: Rhino.RhinoWindow
Summary: Represents the top level window in Rhino

Property: Rhino.RhinoWindow.Handle
Return: IntPtr
Modifiers: public
Accessors: get

Property: Rhino.RhinoWindow.InvokeRequired
Return: bool
Modifiers: public
Summary: See Control.InvokeRequired
Accessors: get

Method: Rhino.RhinoWindow.Invoke(System.Delegate method)
Return: void
Modifiers: public

Class: Rhino.ScaleValue
Summary: Represents a scale with associated LengthValues and string representations of the scale. This allows for going back and forth from numerical representations of a scale and a string representation without "guessing" at the initial scale.

Constructor: Rhino.ScaleValue.ScaleValue()
Summary: Default constructor

Property: Rhino.ScaleValue.LeftToRightScale
Return: double
Modifiers: public
Summary: LeftLengthValue / RightLengthValue
Accessors: get

Property: Rhino.ScaleValue.RightToLeftScale
Return: double
Modifiers: public
Summary: RightLengthValue / LeftLengthValue
Accessors: get

Method: Rhino.ScaleValue.Create(LengthValue left, LengthValue right, ScaleStringFormat format)
Return: ScaleValue
Modifiers: public, static
Summary: Create from 2 length values

Method: Rhino.ScaleValue.Create(string s, StringParserSettings ps)
Return: ScaleValue
Modifiers: public, static
Summary: Create from string

Method: Rhino.ScaleValue.OneToOne()
Return: ScaleValue
Modifiers: public, static
Summary: Make a new ScaleValue set to OneToOne

Method: Rhino.ScaleValue.Dispose()
Return: void
Modifiers: public
Summary: actively reclaim native allocated ON_SacleValue*

Method: Rhino.ScaleValue.IsUnset()
Return: bool
Modifiers: public
Summary: Test IsUnset

Method: Rhino.ScaleValue.LeftLengthValue()
Return: LengthValue
Modifiers: public
Summary: Get the Left LengthValue from Scale

Method: Rhino.ScaleValue.RightLengthValue()
Return: LengthValue
Modifiers: public
Summary: Get the Right LengthValue from Scale

Class: Rhino.Symbols
Summary: Characters used for different 'drafting style' symbols

Constructor: Rhino.Symbols.Symbols()
Summary: Initializes a new instance of the Symbols class

Property: Rhino.Symbols.DegreeSymbol
Return: char
Modifiers: public, static
Summary: Degree symbol used for angles
Accessors: get

Property: Rhino.Symbols.DiameterSymbol
Return: char
Modifiers: public, static
Summary: Diameter symbol
Accessors: get

Property: Rhino.Symbols.PlusMinusSymbol
Return: char
Modifiers: public, static
Summary: Plus-Minus tolerance symbol
Accessors: get

Property: Rhino.Symbols.RadiusSymbol
Return: char
Modifiers: public, static
Summary: Radius symbol
Accessors: get

Class: Rhino.UnitsChangedWithScalingEventArgs
Summary: Provides information about UnitsChangedWithScaling events.

Property: Rhino.UnitsChangedWithScalingEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document for this event. This field might be null.
Accessors: get

Property: Rhino.UnitsChangedWithScalingEventArgs.DocumentSerialNumber
Return: uint
Modifiers: public
Summary: Gets the uniques document serial number for this event.
Accessors: get

Property: Rhino.UnitsChangedWithScalingEventArgs.Scale
Return: double
Modifiers: public
Summary: The scale factor.
Accessors: get

# Namespace: Rhino.ApplicationSettings
Summary: Static settings global to the entire Rhino application

Class: Rhino.ApplicationSettings.AppearanceSettings
Summary: Provides static methods and properties to deal with the appearance of the application.

Constructor: Rhino.ApplicationSettings.AppearanceSettings.AppearanceSettings()
Summary: Initializes a new instance of the AppearanceSettings class

Property: Rhino.ApplicationSettings.AppearanceSettings.CommandPromptBackgroundColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the command prompt background.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CommandPromptFontSize
Return: int
Modifiers: public, static
Summary: Size of font used in command prompt (in points)
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CommandPromptHypertextColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the command prompt hypertext.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CommandPromptPosition
Return: CommandPromptPosition
Modifiers: public, static
Summary: Gets or sets the command prompt position.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CommandPromptTextColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the command prompt text.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CrosshairColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the crosshair icon.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.CurrentLayerBackgroundColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color used by the layer manager dialog as the background color for the current layer.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.DefaultFontFaceName
Return: string
Modifiers: public, static
Summary: Gets or sets the default font face name used in Rhino.
Accessors: get

Property: Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the default layer color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.DefaultObjectColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the default color for new objects.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.DirectionArrowIconHeadSize
Return: int
Modifiers: public, static
Summary: length of direction arrowhead icon in pixels.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.DirectionArrowIconShaftSize
Return: int
Modifiers: public, static
Summary: length of direction arrow shaft icon in pixels.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.EchoCommandsToHistoryWindow
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that determines if command names are written to the history window.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.EchoPromptsToHistoryWindow
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that determines if prompt messages are written to the history window.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.EditCandidateColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of objects that are eligible to be edited.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.FeedbackColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the feedback color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.FrameBackgroundColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the background color of the frame.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.GridThickLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the thick line of the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.GridThinLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the thin line of the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.GridXAxisLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the X axis of the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.GridYAxisLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the Y axis of the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.GridZAxisLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the Z axis of the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.LanguageIdentifier
Return: int
Modifiers: public, static
Summary: Gets or sets the language identifier.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.LockedObjectColor
Return: Color
Modifiers: public, static
Summary: color used to draw locked objects.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.MenuVisible
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that determines if the File menu is visible.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.PageviewPaperColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the paper background. A rectangle is drawn into the background of page views to represent the printed area. The alpha portion of the color is used to draw the paper blended into the background
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.PreviousLanguageIdentifier
Return: int
Modifiers: public, static
Summary: Gets or sets the previous language identifier.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.SelectedObjectColor
Return: Color
Modifiers: public, static
Summary: The color used to draw selected objects. The default is yellow, but this can be customized by the user.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.SelectionWindowCrossingFillColor
Return: Color
Modifiers: public, static
Summary: Color used to fill selection crossing window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.SelectionWindowCrossingStrokeColor
Return: Color
Modifiers: public, static
Summary: Color used to draw stroke for selection crossing window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.SelectionWindowFillColor
Return: Color
Modifiers: public, static
Summary: Color used to fill selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.SelectionWindowStrokeColor
Return: Color
Modifiers: public, static
Summary: Color used to draw stroke for selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowCrosshairs
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that determines if cross hairs are visible.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowFullPathInTitleBar
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that determines if the full path of the document is shown in the Rhino title bar.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowLayoutDropShadow
Return: bool
Modifiers: public, static
Summary: Display the drop shadow of layouts
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowOsnapBar
Return: bool
Modifiers: public, static
Summary: Shows or hides the object snap user interface.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowSelectionFilterBar
Return: bool
Modifiers: public, static
Summary: Shows or hides the selection filter user interface.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowSideBar
Return: bool
Modifiers: public, static
Summary: Shows or hides the side bar user interface.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowStatusBar
Return: bool
Modifiers: public, static
Summary: Shows or hides the status bar user interface.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowTitleBar
Return: bool
Modifiers: public, static
Summary: Shows or hides title bar.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ShowViewportTitles
Return: bool
Modifiers: public, static
Summary: Shows or hides viewport titles.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.TrackingColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the tracking color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.UsePaintColors
Return: bool
Modifiers: public, static
Summary: Gets or sets a value indicating if logical paint colors should be used.
Accessors: get

Property: Rhino.ApplicationSettings.AppearanceSettings.ViewportBackgroundColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the viewport background color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.ViewportTabsVisibleAtStart
Return: bool
Modifiers: public, static
Summary: Display viewport tabs at start
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconXAxisColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the world coordinate X axis.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconYAxisColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the world coordinate Y axis.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconZAxisColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the color of the world coordinate Z axis.
Accessors: get set

Method: Rhino.ApplicationSettings.AppearanceSettings.DefaultPaintColor(PaintColor whichColor, bool darkMode)
Return: Color
Modifiers: public, static
Summary: Get a default paint color for Rhino. The current paint color may be different than the default
Parameter: whichColor (PaintColor)
Parameter Summary: The color to retrieve
Parameter: darkMode (bool)
Parameter Summary: If True gets the default dark mode color otherwise return the default light mode color

Method: Rhino.ApplicationSettings.AppearanceSettings.DefaultPaintColor(PaintColor whichColor)
Return: Color
Modifiers: public, static
Summary: Get a default paint color for Rhino. The current paint color may be different than the default
Parameter: whichColor (PaintColor)
Parameter Summary: The color to retrieve

Method: Rhino.ApplicationSettings.AppearanceSettings.DefaultWidgetColor(WidgetColor whichColor)
Return: Color
Modifiers: public, static
Summary: Get a default widget color for Rhino. The current widget color may be different than the default
Parameter: whichColor (WidgetColor)
Parameter Summary: The color to retrieve

Method: Rhino.ApplicationSettings.AppearanceSettings.GetCurrentState()
Return: AppearanceSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.AppearanceSettings.GetDefaultState()
Return: AppearanceSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.AppearanceSettings.GetDefaultState(bool darkMode)
Return: AppearanceSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.AppearanceSettings.GetPaintColor(PaintColor whichColor, bool compute)
Return: Color
Modifiers: public, static
Summary: Gat a paint color. This overload provides a compute option for cases where colors are computed when they are "unset" colors.
Parameter: whichColor (PaintColor)
Parameter Summary: 
Parameter: compute (bool)
Parameter Summary: if true, a color is computed in some cases

Method: Rhino.ApplicationSettings.AppearanceSettings.GetPaintColor(PaintColor whichColor)
Return: Color
Modifiers: public, static
Summary: Gets the color that is currently associated with a paint color.
Parameter: whichColor (PaintColor)
Parameter Summary: A color association.

Method: Rhino.ApplicationSettings.AppearanceSettings.GetWidgetColor(WidgetColor whichColor)
Return: Color
Modifiers: public, static
Summary: Gets the .Net library color that is currently associated with a widget color.
Parameter: whichColor (WidgetColor)
Parameter Summary: A color association.

Method: Rhino.ApplicationSettings.AppearanceSettings.InitialMainWindowPosition(out Rectangle bounds)
Return: bool
Modifiers: public, static
Summary: Location where the Main Rhino window attempts to show when the application is first started.
Parameter: bounds (Rectangle)
Parameter Summary: The rectangle in which the main window attempts to shows is assigned to this out parameter during the call.

Method: Rhino.ApplicationSettings.AppearanceSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(PaintColor whichColor, Color c, bool forceUiUpdate)
Return: void
Modifiers: public, static
Summary: Sets the logical paint color association to a specific .Net library color.
Parameter: whichColor (PaintColor)
Parameter Summary: A logical color association.
Parameter: c (Color)
Parameter Summary: A .Net library color.
Parameter: forceUiUpdate (bool)
Parameter Summary: True if the UI should be forced to update.

Method: Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(PaintColor whichColor, Color c)
Return: void
Modifiers: public, static
Summary: Sets the logical paint color association to a specific .Net library color, without forced UI update.
Parameter: whichColor (PaintColor)
Parameter Summary: A logical color association.
Parameter: c (Color)
Parameter Summary: A .Net library color.

Method: Rhino.ApplicationSettings.AppearanceSettings.SetToDarkMode()
Return: bool
Modifiers: public, static
Summary: Set UI to the default dark mode color scheme

Method: Rhino.ApplicationSettings.AppearanceSettings.SetToLightMode()
Return: bool
Modifiers: public, static
Summary: Set UI to the default light mode color scheme

Method: Rhino.ApplicationSettings.AppearanceSettings.SetWidgetColor(WidgetColor whichColor, Color c, bool forceUiUpdate)
Return: void
Modifiers: public, static
Summary: Sets the logical widget color association to a specific .Net library color.
Parameter: whichColor (WidgetColor)
Parameter Summary: A logical color association.
Parameter: c (Color)
Parameter Summary: A .Net library color.
Parameter: forceUiUpdate (bool)
Parameter Summary: True if the UI should be forced to update.

Method: Rhino.ApplicationSettings.AppearanceSettings.SetWidgetColor(WidgetColor whichColor, Color c)
Return: void
Modifiers: public, static
Summary: Sets the logical widget color association to a specific .Net library color, without forced UI update.
Parameter: whichColor (WidgetColor)
Parameter Summary: A logical color association.
Parameter: c (Color)
Parameter Summary: A .Net library color.

Method: Rhino.ApplicationSettings.AppearanceSettings.UpdateFromState(AppearanceSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (AppearanceSettingsState)
Parameter Summary: A joined settings object.

Method: Rhino.ApplicationSettings.AppearanceSettings.UsingDefaultDarkModeColors()
Return: bool
Modifiers: public, static
Summary: Determine if Rhino is running with default dark mode color settings

Method: Rhino.ApplicationSettings.AppearanceSettings.UsingDefaultLightModeColors()
Return: bool
Modifiers: public, static
Summary: Determine if Rhino is running with default light mode color settings

Class: Rhino.ApplicationSettings.AppearanceSettingsState
Summary: snapshot of the values in <b>AppearanceSettings</b>

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptBackgroundColor
Return: Color
Modifiers: public
Summary: Gets or sets the command prompt background color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptFontName
Return: string
Modifiers: public
Summary: Name of the font used in the command prompt
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptFontSize
Return: int
Modifiers: public
Summary: Size of the font used in the command prompt (in points)
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptHypertextColor
Return: Color
Modifiers: public
Summary: Gets or sets the command prompt hypertext color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptTextColor
Return: Color
Modifiers: public
Summary: Gets or sets the command prompt text color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CrosshairColor
Return: Color
Modifiers: public
Summary: Gets or sets the crosshair color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.CurrentLayerBackgroundColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used by the layer manager dialog as the background color for the current layer.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.DefaultFontFaceName
Return: string
Modifiers: public
Summary: Gets or sets the name of the default font face.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.DefaultLayerColor
Return: Color
Modifiers: public
Summary: Gets or sets the default layer color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.DefaultObjectColor
Return: Color
Modifiers: public
Summary: Gets or sets the default object color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.DirectionArrowIconHeadSize
Return: int
Modifiers: public
Summary: Set the arrow icon head size.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.DirectionArrowIconShaftSize
Return: int
Modifiers: public
Summary: Set the arrow icon shaft size.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.EchoCommandsToHistoryWindow
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if command names are written to the history window.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.EchoPromptsToHistoryWindow
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if prompt messages are written to the history window.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.EditCandidateColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of objects that are eligible to be edited.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.FeedbackColor
Return: Color
Modifiers: public
Summary: Gets or sets the feedback color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.FrameBackgroundColor
Return: Color
Modifiers: public
Summary: Gets or sets the frame background color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.GridThickLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the thick line in the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.GridThinLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the thin line in the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.GridXAxisLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of X axis line in the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.GridYAxisLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of Y axis line in the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.GridZAxisLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of Z axis line in the grid.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.LockedObjectColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used to draw locked objects.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.MenuVisible
Return: bool
Modifiers: public
Summary: Get/Set menu visibility
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.PageviewPaperColor
Return: Color
Modifiers: public
Summary: CRhinoPageView paper background. A rectangle is drawn into the background of page views to represent the printed area. The alpha portion of the color is used to draw the paper blended into the background
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.SelectedObjectColor
Return: Color
Modifiers: public
Summary: The color used to draw selected objects. The default is yellow, but this can be customized by the user.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.SelectionWindowCrossingFillColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used to fill a crossing selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.SelectionWindowCrossingStrokeColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used to draw the stroke of a crossing selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.SelectionWindowFillColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used to fill a selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.SelectionWindowStrokeColor
Return: Color
Modifiers: public
Summary: Gets or sets the color used to draw the stroke of a selection window
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowCrosshairs
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if cross hairs are visible.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowFullPathInTitleBar
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if the full path of the document is shown in the Rhino title bar.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowLayoutDropShadow
Return: bool
Modifiers: public
Summary: Display the drop shadow of layouts
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowStatusBar
Return: bool
Modifiers: public
Summary: Get/Set status bar visibility
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowTitleBar
Return: bool
Modifiers: public
Summary: Shows or hides title bar.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ShowViewportTitles
Return: bool
Modifiers: public
Summary: Get/Set viewport title visibility
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.TrackingColor
Return: Color
Modifiers: public
Summary: Gets or sets the tracking color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ViewportBackgroundColor
Return: Color
Modifiers: public
Summary: Gets or sets the viewport background color.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.ViewportTabsVisibleAtStart
Return: bool
Modifiers: public
Summary: Display viewport tabs at start
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconXAxisColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the world X axis of the world coordinates icon, appearing usually bottom left in viewports.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconYAxisColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the world Y axis of the world coordinate icon, appearing usually bottom left in viewports.
Accessors: get set

Property: Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconZAxisColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the world Z axis of the world coordinate icon, appearing usually bottom left in viewports.
Accessors: get set

Class: Rhino.ApplicationSettings.ChooseOneObjectSettings
Summary: Contains static methods and properties to modify "choose one object" settings.

Constructor: Rhino.ApplicationSettings.ChooseOneObjectSettings.ChooseOneObjectSettings()
Summary: Initializes a new instance of the ChooseOneObjectSettings class

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.AutomaticResize
Return: bool
Modifiers: public, static
Summary: AutomaticResize
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.DynamicHighlight
Return: bool
Modifiers: public, static
Summary: DynamicHighlight
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.FollowCursor
Return: bool
Modifiers: public, static
Summary: FollowCursor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.HighlightColor
Return: Color
Modifiers: public, static
Summary: HighlightColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.MaxAutoResizeItems
Return: int
Modifiers: public, static
Summary: MaxAutoResizeItems
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowAllOption
Return: bool
Modifiers: public, static
Summary: ShowAllOption
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowObjectColor
Return: bool
Modifiers: public, static
Summary: ShowObjectColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowObjectLayer
Return: bool
Modifiers: public, static
Summary: ShowObjectLayer
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowObjectName
Return: bool
Modifiers: public, static
Summary: ShowObjectName
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowObjectType
Return: bool
Modifiers: public, static
Summary: ShowObjectType
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowObjectTypeDetails
Return: bool
Modifiers: public, static
Summary: ShowObjectTypeDetails
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.ShowTitlebarAndBorder
Return: bool
Modifiers: public, static
Summary: ShowTitlebarAndBorder
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.UseCustomColor
Return: bool
Modifiers: public, static
Summary: UseCustomColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.XOffset
Return: int
Modifiers: public, static
Summary: XOffset
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettings.YOffset
Return: int
Modifiers: public, static
Summary: YOffset
Accessors: get set

Method: Rhino.ApplicationSettings.ChooseOneObjectSettings.GetCurrentState()
Return: ChooseOneObjectSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.ChooseOneObjectSettings.GetDefaultState()
Return: ChooseOneObjectSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.ChooseOneObjectSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.ChooseOneObjectSettings.UpdateFromState(ChooseOneObjectSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (ChooseOneObjectSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.ChooseOneObjectSettingsState
Summary: Represents a snapshot of <b>ChooseOneObjectSettings</b> .

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.AutomaticResize
Return: bool
Modifiers: public
Summary: AutomaticResize
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.DynamicHighlight
Return: bool
Modifiers: public
Summary: DynamicHighlight
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.FollowCursor
Return: bool
Modifiers: public
Summary: FollowCursor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.HighlightColor
Return: Color
Modifiers: public
Summary: HighlightColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.MaxAutoResizeItems
Return: int
Modifiers: public
Summary: MaxAutoResizeItems
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowAllOption
Return: bool
Modifiers: public
Summary: ShowAllOption
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowObjectColor
Return: bool
Modifiers: public
Summary: ShowObjectColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowObjectLayer
Return: bool
Modifiers: public
Summary: ShowObjectLayer
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowObjectName
Return: bool
Modifiers: public
Summary: ShowObjectName
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowObjectType
Return: bool
Modifiers: public
Summary: ShowObjectType
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowObjectTypeDetails
Return: bool
Modifiers: public
Summary: ShowObjectTypeDetails
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.ShowTitlebarAndBorder
Return: bool
Modifiers: public
Summary: ShowTitlebarAndBorder
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.UseCustomColor
Return: bool
Modifiers: public
Summary: UseCustomColor
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.XOffset
Return: int
Modifiers: public
Summary: XOffset
Accessors: get set

Property: Rhino.ApplicationSettings.ChooseOneObjectSettingsState.YOffset
Return: int
Modifiers: public
Summary: YOffset
Accessors: get set

Class: Rhino.ApplicationSettings.CommandAliasList
Summary: Contains static methods and properties to access command aliases.

Constructor: Rhino.ApplicationSettings.CommandAliasList.CommandAliasList()
Summary: Initializes a new instance of the CommandAliasList class

Property: Rhino.ApplicationSettings.CommandAliasList.Count
Return: int
Modifiers: public, static
Summary: Returns the number of command alias in Rhino.
Accessors: get

Method: Rhino.ApplicationSettings.CommandAliasList.Add(string alias, string macro)
Return: bool
Modifiers: public, static
Summary: Adds a new command alias to Rhino.
Parameter: alias (string)
Parameter Summary: [in] The name of the command alias.
Parameter: macro (string)
Parameter Summary: [in] The command macro to run when the alias is executed.

Method: Rhino.ApplicationSettings.CommandAliasList.Clear()
Return: void
Modifiers: public, static
Summary: Removes all aliases from the list.

Method: Rhino.ApplicationSettings.CommandAliasList.Delete(string alias)
Return: bool
Modifiers: public, static
Summary: Deletes an existing command alias from Rhino.
Parameter: alias (string)
Parameter Summary: [in] The name of the command alias.

Method: Rhino.ApplicationSettings.CommandAliasList.string> GetDefaults()
Return: System.Collections.Generic.Dictionary<string,
Modifiers: public, static
Summary: Constructs a dictionary containing as keys the default names and as value the default macro.
The returned dictionary contains a copy of the settings. | Since: 5.0

Method: Rhino.ApplicationSettings.CommandAliasList.GetMacro(string alias)
Return: string
Modifiers: public, static
Summary: Returns the macro of a command alias.
Parameter: alias (string)
Parameter Summary: [in] The name of the command alias.

Method: Rhino.ApplicationSettings.CommandAliasList.GetNames()
Return: string
Modifiers: public, static
Summary: Returns a list of command alias names.

Method: Rhino.ApplicationSettings.CommandAliasList.IsAlias(string alias)
Return: bool
Modifiers: public, static
Summary: Verifies that a command alias exists in Rhino.
Parameter: alias (string)
Parameter Summary: [in] The name of the command alias.

Method: Rhino.ApplicationSettings.CommandAliasList.IsDefault()
Return: bool
Modifiers: public, static
Summary: Computes a value indicating if the current alias list is the same as the default alias list.

Method: Rhino.ApplicationSettings.CommandAliasList.SetMacro(string alias, string macro)
Return: bool
Modifiers: public, static
Summary: Modifies the macro of a command alias.
Parameter: alias (string)
Parameter Summary: [in] The name of the command alias.
Parameter: macro (string)
Parameter Summary: [in] The new command macro to run when the alias is executed.

Method: Rhino.ApplicationSettings.CommandAliasList.string> ToDictionary()
Return: System.Collections.Generic.Dictionary<string,
Modifiers: public, static
Summary: Constructs a new dictionary that contains: as keys all names and as values all macros.
Modifications to this dictionary do not affect any Rhino command alias. | Since: 5.0

Class: Rhino.ApplicationSettings.CursorTooltipSettings
Summary: Cursor tooltips place information at the cursor location. Note: Turning on cursor tooltips turns off object snap cursors.

Constructor: Rhino.ApplicationSettings.CursorTooltipSettings.CursorTooltipSettings()
Summary: Initializes a new instance of the CursorTooltipSettings class

Property: Rhino.ApplicationSettings.CursorTooltipSettings.AutoSuppress
Return: bool
Modifiers: public, static
Summary: Attempts to display only the most useful tooltip.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.BackgroundColor
Return: Color
Modifiers: public, static
Summary: Tooltip background color.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.CommandPromptPane
Return: bool
Modifiers: public, static
Summary: Displays the current command prompt.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.DistancePane
Return: bool
Modifiers: public, static
Summary: Displays the distance from the last picked point.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.EnableGumballToolTips
Return: bool
Modifiers: public, static
Summary: Turns on/off gumball tooltips
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.Offset
Return: Point
Modifiers: public, static
Summary: The x and y distances in pixels from the cursor location to the tooltip.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.OsnapPane
Return: bool
Modifiers: public, static
Summary: Displays the current object snap selection.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.PointPane
Return: bool
Modifiers: public, static
Summary: Displays the current construction plane coordinates.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.RelativePointPane
Return: bool
Modifiers: public, static
Summary: Displays the relative construction plane coordinates and angle from the last picked point.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.TextColor
Return: Color
Modifiers: public, static
Summary: Tooltip text color.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettings.TooltipsEnabled
Return: bool
Modifiers: public, static
Summary: Turns on/off cursor tooltips.
Accessors: get set

Method: Rhino.ApplicationSettings.CursorTooltipSettings.GetCurrentState()
Return: CursorTooltipSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.CursorTooltipSettings.GetDefaultState()
Return: CursorTooltipSettingsState
Modifiers: public, static
Summary: Gets the cursor tooltip factory settings.

Class: Rhino.ApplicationSettings.CursorTooltipSettingsState
Summary: Represents a snapshot of <b>CursorTooltipSettings</b> .

Constructor: Rhino.ApplicationSettings.CursorTooltipSettingsState.CursorTooltipSettingsState()
Summary: Initializes a new instance of the CursorTooltipSettingsState class

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.AutoSuppress
Return: bool
Modifiers: public
Summary: Attempts to display only the most useful tooltip.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.BackgroundColor
Return: Color
Modifiers: public
Summary: Tooltip background color.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.CommandPromptPane
Return: bool
Modifiers: public
Summary: Displays the current command prompt.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.DistancePane
Return: bool
Modifiers: public
Summary: Displays the distance from the last picked point.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.EnableGumballToolTips
Return: bool
Modifiers: public
Summary: Turns on/off gumball tooltips
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.Offset
Return: Point
Modifiers: public
Summary: The x and y distances in pixels from the cursor location to the tooltip.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.OsnapPane
Return: bool
Modifiers: public
Summary: Displays the current object snap selection.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.PointPane
Return: bool
Modifiers: public
Summary: Displays the current construction plane coordinates.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.RelativePointPane
Return: bool
Modifiers: public
Summary: Displays the relative construction plane coordinates and angle from the last picked point.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.TextColor
Return: Color
Modifiers: public
Summary: Tooltip text color.
Accessors: get set

Property: Rhino.ApplicationSettings.CursorTooltipSettingsState.TooltipsEnabled
Return: bool
Modifiers: public
Summary: Turns on/off cursor tooltips.
Accessors: get set

Class: Rhino.ApplicationSettings.CurvatureAnalysisSettings
Summary: Contains static methods and properties to modify curvature analysis-related commands.

Constructor: Rhino.ApplicationSettings.CurvatureAnalysisSettings.CurvatureAnalysisSettings()
Summary: Initializes a new instance of the CurvatureAnalysisSettings class

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettings.GaussRange
Return: Interval
Modifiers: public, static
Summary: Gets or sets the Gaussian curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettings.MaxRadiusRange
Return: Interval
Modifiers: public, static
Summary: Gets or sets the Maximum Radius curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettings.MeanRange
Return: Interval
Modifiers: public, static
Summary: Gets or sets the Mean curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettings.MinRadiusRange
Return: Interval
Modifiers: public, static
Summary: Gets or sets the Minimum Radius curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettings.Style
Return: CurvatureStyle
Modifiers: public, static
Summary: Gets or sets the curvature analysis style.
Accessors: get set

Method: Rhino.ApplicationSettings.CurvatureAnalysisSettings.CalculateCurvatureAutoRange(IEnumerable<Mesh> meshes, ref CurvatureAnalysisSettingsState settings)
Return: bool
Modifiers: public, static

Method: Rhino.ApplicationSettings.CurvatureAnalysisSettings.GetCurrentState()
Return: CurvatureAnalysisSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.CurvatureAnalysisSettings.GetDefaultState()
Return: CurvatureAnalysisSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.CurvatureAnalysisSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.CurvatureAnalysisSettings.UpdateFromState(CurvatureAnalysisSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (CurvatureAnalysisSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState
Summary: Represents a snapshot of <b>CurvatureAnalysisSettings</b> .

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState.GaussRange
Return: Interval
Modifiers: public
Summary: Gets or sets the Gaussian curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState.MaxRadiusRange
Return: Interval
Modifiers: public
Summary: Gets or sets the Maximum Radius curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState.MeanRange
Return: Interval
Modifiers: public
Summary: Gets or sets the Mean curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState.MinRadiusRange
Return: Interval
Modifiers: public
Summary: Gets or sets the Minimum Radius curvature range.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureAnalysisSettingsState.Style
Return: CurvatureStyle
Modifiers: public
Summary: Gets or sets the curvature analysis style.
Accessors: get set

Class: Rhino.ApplicationSettings.CurvatureGraphSettings
Summary: Contains static methods and properties to modify curvature graph commands.

Constructor: Rhino.ApplicationSettings.CurvatureGraphSettings.CurvatureGraphSettings()
Summary: Initializes a new instance of the CurvatureGraphSettings class

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.CurveHairColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the curve hair color;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.HairDensity
Return: int
Modifiers: public, static
Summary: Gets or sets the hair density;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.HairScale
Return: int
Modifiers: public, static
Summary: Gets or sets the hair scale;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.SampleDensity
Return: int
Modifiers: public, static
Summary: Gets or sets the sampling density;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.SrfUHair
Return: bool
Modifiers: public, static
Summary: Gets or sets the surface U hairs are on;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.SrfVHair
Return: bool
Modifiers: public, static
Summary: Gets or sets the surface V hairs are on;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.SurfaceUHairColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the surface U hair color;
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettings.SurfaceVHairColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the surface V hair color;
Accessors: get set

Method: Rhino.ApplicationSettings.CurvatureGraphSettings.GetCurrentState()
Return: CurvatureGraphSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.CurvatureGraphSettings.GetDefaultState()
Return: CurvatureGraphSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.CurvatureGraphSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.CurvatureGraphSettings.UpdateFromState(CurvatureGraphSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (CurvatureGraphSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.CurvatureGraphSettingsState
Summary: Represents a snapshot of <b>CurvatureGraphSettings</b> .

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.CurveHairColor
Return: Color
Modifiers: public
Summary: Gets or sets the curve hair color.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.HairDensity
Return: int
Modifiers: public
Summary: Gets or sets the hair density.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.HairScale
Return: int
Modifiers: public
Summary: Gets or sets the hair scale.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.SampleDensity
Return: int
Modifiers: public
Summary: Gets or sets the sample density.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.SrfUHair
Return: bool
Modifiers: public
Summary: Gets or sets the whether to show surface U hairs
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.SrfVHair
Return: bool
Modifiers: public
Summary: Gets or sets the whether to show surface V hairs
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.SurfaceUHairColor
Return: Color
Modifiers: public
Summary: Gets or sets the surface U hair color.
Accessors: get set

Property: Rhino.ApplicationSettings.CurvatureGraphSettingsState.SurfaceVHairColor
Return: Color
Modifiers: public
Summary: Gets or sets the surface V hair color.
Accessors: get set

Class: Rhino.ApplicationSettings.DraftAngleAnalysisSettings

Constructor: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.DraftAngleAnalysisSettings()
Summary: Initializes a new instance of the DraftAngleAnalysisSettings class

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.AngleRange
Return: Interval
Modifiers: public, static
Summary: The angle range.
Accessors: get set

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.ShowIsoCurves
Return: bool
Modifiers: public, static
Summary: Show isoparametric curves.
Accessors: get set

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.UpDirection
Return: Vector3d
Modifiers: public, static
Summary: The up direction.
Accessors: get set

Method: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.GetCurrentState()
Return: DraftAngleAnalysisSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.GetDefaultState()
Return: DraftAngleAnalysisSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.DraftAngleAnalysisSettings.UpdateFromState(DraftAngleAnalysisSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (DraftAngleAnalysisSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.DraftAngleAnalysisSettingsState
Summary: Represents a snapshot of <b>DraftAngleAnalysisSettings</b>

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettingsState.AngleRange
Return: Interval
Modifiers: public
Summary: The angle range.
Accessors: get set

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettingsState.ShowIsoCurves
Return: bool
Modifiers: public
Summary: Show isoparametric curves.
Accessors: get set

Property: Rhino.ApplicationSettings.DraftAngleAnalysisSettingsState.UpDirection
Return: Vector3d
Modifiers: public
Summary: The up direction.
Accessors: get set

Class: Rhino.ApplicationSettings.EdgeAnalysisSettings
Summary: Contains static methods and properties to modify the visibility of edges in edge-related commands.

Constructor: Rhino.ApplicationSettings.EdgeAnalysisSettings.EdgeAnalysisSettings()
Summary: Initializes a new instance of the EdgeAnalysisSettings class

Property: Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdgeColor
Return: Color
Modifiers: public, static
Summary: Gets or sets a color used to enhance display edges in commands like _ShowEdges and _ShowNakedEdges.
Accessors: get set

Property: Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdges
Return: int
Modifiers: public, static
Summary: Gets or sets a value referring to the group of edges that are targeted.
0 = all.
1 = naked.
2 = non-manifold. | Since: 5.0 | Accessors: get set

Method: Rhino.ApplicationSettings.EdgeAnalysisSettings.GetCurrentState()
Return: EdgeAnalysisSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.EdgeAnalysisSettings.GetDefaultState()
Return: EdgeAnalysisSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.EdgeAnalysisSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.EdgeAnalysisSettings.UpdateFromState(EdgeAnalysisSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (EdgeAnalysisSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.EdgeAnalysisSettingsState
Summary: Represents a snapshot of <b>EdgeAnalysisSettings</b> .

Property: Rhino.ApplicationSettings.EdgeAnalysisSettingsState.ShowEdgeColor
Return: Color
Modifiers: public
Summary: Gets or sets a color used to enhance display edges in commands like _ShowEdges and _ShowNakedEdges.
Accessors: get set

Property: Rhino.ApplicationSettings.EdgeAnalysisSettingsState.ShowEdges
Return: int
Modifiers: public
Summary: Gets or sets a value referring to the group of edges that are targeted.
0 = all.
1 = naked.
2 = non-manifold. | Since: 5.0 | Accessors: get set

Class: Rhino.ApplicationSettings.FileSettings
Summary: Contains static methods and properties relating Rhino files.

Constructor: Rhino.ApplicationSettings.FileSettings.FileSettings()
Summary: Initializes a new instance of the FileSettings class

Property: Rhino.ApplicationSettings.FileSettings.AutoSaveEnabled
Return: bool
Modifiers: public, static
Summary: Enables or disables Rhino's automatic file saving mechanism.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.AutoSaveFile
Return: string
Modifiers: public, static
Summary: the file name used by Rhino's automatic file saving mechanism.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.AutoSaveInterval
Return: TimeSpan
Modifiers: public, static
Summary: how often the document will be saved when Rhino's automatic file saving mechanism is enabled.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.AutoSaveMeshes
Return: bool
Modifiers: public, static
Summary: save render and display meshes in autosave file.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.ClipboardCopyToPreviousRhinoVersion
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that decides if copies to the clipboard are performed in both the current and previous Rhino clipboard formats.  This means you will double the size of what is saved in the clipboard but will be able to copy from the current to the previous version using the clipboard.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.ClipboardOnExit
Return: ClipboardState
Modifiers: public, static
Summary: Gets or sets a value that determines what to do with clipboard data on exit.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.CreateBackupFiles
Return: bool
Modifiers: public, static
Summary: Gets or sets a value that controls the creation of backup files.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.DefaultRuiFile
Return: string
Modifiers: public, static
Summary: Gets the path to the default RUI file.
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.ExecutableFolder
Return: string
Modifiers: public, static
Summary: Returns the directory where the main Rhino executable is located.
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.FileLockingEnabled
Return: bool
Modifiers: public, static
Summary: Ensure that only one person at a time can have a file open for saving.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.FileLockingOpenWarning
Return: bool
Modifiers: public, static
Summary: Gets or sets whether to display the information dialog which identifies computer files.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.HelpFilePath
Return: string
Modifiers: public, static
Summary: Gets the Rhino help file path.
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.InstallFolder
Return: DirectoryInfo
Modifiers: public, static
Summary: Returns Rhino's installation folder.
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.LocalProfileDataFolder
Return: string
Modifiers: public, static
Summary: Get full path to a Rhino specific sub-folder under the per-user Local (non-roaming) Profile folder.  This is the folder where user-specific data is stored.  On Windows 7, 8, usually someplace like: "C:\Users\[USERNAME]\AppData\Local\McNeel\Rhinoceros\[VERSION_NUMBER]\"
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.SaveViewChanges
Return: bool
Modifiers: public, static
Summary: True for users who consider view changes a document change.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.SearchPathCount
Return: int
Modifiers: public, static
Summary: Gets the amount of search paths that are currently defined.
Accessors: get

Property: Rhino.ApplicationSettings.FileSettings.TemplateFile
Return: string
Modifiers: public, static
Summary: Returns or sets the location of Rhino's template file.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.TemplateFolder
Return: string
Modifiers: public, static
Summary: Returns or sets the location of Rhino's template files.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettings.WorkingFolder
Return: string
Modifiers: public, static
Summary: Returns or sets Rhino's working directory, or folder. The working folder is the default folder for all file operations.
Accessors: get set

Method: Rhino.ApplicationSettings.FileSettings.AddSearchPath(string folder, int index)
Return: int
Modifiers: public, static
Summary: Adds a new imagePath to Rhino's search imagePath list. See "Options Files settings" in the Rhino help file for more details.
Parameter: folder (string)
Parameter Summary: [in] The valid folder, or imagePath, to add.
Parameter: index (int)
Parameter Summary: [in] A zero-based position index in the search imagePath list to insert the string. If -1, the imagePath will be appended to the end of the list.

Method: Rhino.ApplicationSettings.FileSettings.AutoSaveBeforeCommands()
Return: string
Modifiers: public, static
Summary: Input list of commands that force AutoSave prior to running.

Method: Rhino.ApplicationSettings.FileSettings.DefaultTemplateFolderForLanguageID(int languageID)
Return: string
Modifiers: public, static
Summary: Returns the default template folder for a given language id.

Method: Rhino.ApplicationSettings.FileSettings.DeleteSearchPath(string folder)
Return: bool
Modifiers: public, static
Summary: Removes an existing imagePath from Rhino's search imagePath list. See "Options Files settings" in the Rhino help file for more details.
Parameter: folder (string)
Parameter Summary: [in] The valid folder, or imagePath, to remove.

Method: Rhino.ApplicationSettings.FileSettings.FindFile(string fileName)
Return: string
Modifiers: public, static
Summary: Searches for a file using Rhino's search imagePath. Rhino will look for a file in the following locations: 1. The current document's folder. 2. Folder's specified in Options dialog, File tab. 3. Rhino's System folders.
Parameter: fileName (string)
Parameter Summary: short file name to search for.

Method: Rhino.ApplicationSettings.FileSettings.GetCurrentState()
Return: FileSettingsState
Modifiers: public, static
Summary: Returns the current state.

Method: Rhino.ApplicationSettings.FileSettings.GetDataFolder(bool currentUser)
Return: string
Modifiers: public, static
Summary: Gets the data folder for machine or current user.
Parameter: currentUser (bool)
Parameter Summary: True if the query relates to the current user.

Method: Rhino.ApplicationSettings.FileSettings.GetDefaultState()
Return: FileSettingsState
Modifiers: public, static
Summary: Returns the default state.

Method: Rhino.ApplicationSettings.FileSettings.GetSearchPaths()
Return: string
Modifiers: public, static
Summary: Returns all of the imagePath items in Rhino's search imagePath list. See "Options Files settings" in the Rhino help file for more details.

Method: Rhino.ApplicationSettings.FileSettings.RecentlyOpenedFiles()
Return: string
Modifiers: public, static
Summary: Returns a list of recently opened files. Note that this function does not check to make sure that these files still exist.

Method: Rhino.ApplicationSettings.FileSettings.SetAutoSaveBeforeCommands(string commands)
Return: void
Modifiers: public, static
Summary: Set list of commands that force AutoSave prior to running.

Method: Rhino.ApplicationSettings.FileSettings.UpdateFromState(FileSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (FileSettingsState)
Parameter Summary: A joined settings object.

Class: Rhino.ApplicationSettings.FileSettingsState
Summary: Represents a snapshot of <b>FileSettings</b> .

Property: Rhino.ApplicationSettings.FileSettingsState.AutoSaveEnabled
Return: bool
Modifiers: public
Summary: Enables or disables Rhino's automatic file saving mechanism.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.AutoSaveInterval
Return: TimeSpan
Modifiers: public
Summary: How often the document will be saved when Rhino's automatic file saving mechanism is enabled.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.AutoSaveMeshes
Return: bool
Modifiers: public
Summary: Saves render and display meshes in autosave file.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.ClipboardCopyToPreviousRhinoVersion
Return: bool
Modifiers: public
Summary: Gets or sets a value that decides if copies to the clipboard are performed in both the current and previous Rhino clipboard formats.  This means you will double the size of what is saved in the clipboard but will be able to copy from the current to the previous version using the clipboard.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.ClipboardOnExit
Return: ClipboardState
Modifiers: public
Summary: Gets or sets a value that determines what to do with clipboard data on exit.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.CreateBackupFiles
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to create backup files.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.FileLockingEnabled
Return: bool
Modifiers: public
Summary: Ensures that only one person at a time can have a file open for saving.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.FileLockingOpenWarning
Return: bool
Modifiers: public
Summary: Displays an information dialog which identifies computer file is open on.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.SaveViewChanges
Return: bool
Modifiers: public
Summary: True for users who consider view changes a document change.
Accessors: get set

Property: Rhino.ApplicationSettings.FileSettingsState.TemplateFileDir
Return: string
Modifiers: public
Summary: Gets or sets the directory used for template files.
Accessors: get set

Class: Rhino.ApplicationSettings.GeneralSettings
Summary: Contains static methods and properties to give access to Rhinoceros settings.

Constructor: Rhino.ApplicationSettings.GeneralSettings.GeneralSettings()
Summary: Initializes a new instance of the GeneralSettings class

Property: Rhino.ApplicationSettings.GeneralSettings.AutoUpdateCommandHelp
Return: bool
Modifiers: public, static
Summary: Command help dialog auto-update feature.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.ContextMenuDelay
Return: TimeSpan
Modifiers: public, static
Summary: Time to wait before permitting context menu display.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.EnableContextMenu
Return: bool
Modifiers: public, static
Summary: True if right mouse down + delay will pop up context menu on a mouse up if no move happens.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MaximumPopupMenuLines
Return: int
Modifiers: public, static
Summary: Gets or sets the maximum number of popup menu lines.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MaximumUndoMemoryMb
Return: int
Modifiers: public, static
Summary: Gets or sets the minimum undo memory Mb.
Undo records will be purged if there are more than MinimumUndoSteps and     they use more than MaximumUndoMemoryMb. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MiddleMouseMacro
Return: string
Modifiers: public, static
Summary: Gets or sets the toolbar to popup when the middle mouse is clicked on a view, this value is only used when MiddleMouseMode is set to PopupToolbar.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MiddleMouseMode
Return: MiddleMouseMode
Modifiers: public, static
Summary: Gets or sets what happens when the user clicks the middle mouse.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MiddleMousePopupToolbar
Return: string
Modifiers: public, static
Summary: Gets or sets the toolbar to popup when the middle mouse is clicked on a view, this value is only used when MiddleMouseMode is set to PopupToolbar.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MinimumUndoSteps
Return: int
Modifiers: public, static
Summary: Gets or sets the minimum undo steps.
Undo records will be purged if there are more than MinimumUndoSteps and     they use more than MaximumUndoMemoryMb. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.MouseSelectMode
Return: MouseSelectMode
Modifiers: public, static
Summary: Gets or sets the current selection mode.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.NewObjectIsoparmCount
Return: int
Modifiers: public, static
Summary: Gets or sets the number of isoparm curves to show on new objects.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettings.UseExtrusions
Return: bool
Modifiers: public, static
Summary: Should extrusion objects be created for things like cylinders
Accessors: get

Method: Rhino.ApplicationSettings.GeneralSettings.GetCurrentState()
Return: GeneralSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.GeneralSettings.GetDefaultState()
Return: GeneralSettingsState
Modifiers: public, static
Summary: Gets the factory settings.

Class: Rhino.ApplicationSettings.GeneralSettingsState
Summary: Represents a snapshot of <b>GeneralSettings</b> .

Property: Rhino.ApplicationSettings.GeneralSettingsState.AutoUpdateCommandHelp
Return: bool
Modifiers: public
Summary: Gets or sets the command help dialog auto-update feature.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.ContextMenuDelay
Return: TimeSpan
Modifiers: public
Summary: Gets or sets the time to wait before permitting context menu display.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.EnableContextMenu
Return: bool
Modifiers: public
Summary: True if right mouse down + delay will pop up context menu on a mouse up if no move happens.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MaximumPopupMenuLines
Return: int
Modifiers: public
Summary: Gets or sets the maximum number of popup menu lines.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MaximumUndoMemoryMb
Return: int
Modifiers: public
Summary: Gets or sets the minimum undo memory Mb.
Undo records will be purged if there are more than MinimumUndoSteps and     they use more than MaximumUndoMemoryMb. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MiddleMouseMacro
Return: string
Modifiers: public
Summary: Gets or sets the toolbar to popup when the middle mouse is clicked on a view, this value is only used when MiddleMouseMode is set to PopupToolbar.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MiddleMouseMode
Return: MiddleMouseMode
Modifiers: public
Summary: Gets or sets what happens when the user clicks the middle mouse.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MiddleMousePopupToolbar
Return: string
Modifiers: public
Summary: Gets or sets the toolbar to popup when the middle mouse is clicked on a view, this value is only used when MiddleMouseMode is set to PopupToolbar.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MinimumUndoSteps
Return: int
Modifiers: public
Summary: Gets or sets the minimum undo steps.
Undo records will be purged if there are more than MinimumUndoSteps and     they use more than MaximumUndoMemoryMb. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.MouseSelectMode
Return: MouseSelectMode
Modifiers: public
Summary: Gets or sets the current selection mode.
Accessors: get set

Property: Rhino.ApplicationSettings.GeneralSettingsState.NewObjectIsoparmCount
Return: int
Modifiers: public
Summary: Gets or sets the number of isoparm curves to show on new objects.
Accessors: get set

Class: Rhino.ApplicationSettings.HistorySettings
Summary: Provides static (Shared in Vb.Net) properties to modify Rhino History settings.

Constructor: Rhino.ApplicationSettings.HistorySettings.HistorySettings()
Summary: Initializes a new instance of the HistorySettings class

Property: Rhino.ApplicationSettings.HistorySettings.BrokenRecordWarningEnabled
Return: bool
Modifiers: public, static
Summary: Displays a warning dialog when an action is taken that breaks the link between the output and input objects.
Accessors: get set

Property: Rhino.ApplicationSettings.HistorySettings.ObjectLockingEnabled
Return: bool
Modifiers: public, static
Summary: When history object locking is enabled, objects with history on them act as if they were locked and the only way to modify these objects is to edit their inputs.
Accessors: get set

Property: Rhino.ApplicationSettings.HistorySettings.RecordingEnabled
Return: bool
Modifiers: public, static
Summary: When history recording is enabled, new objects keep a record of how they were constructed so that they can be updated if an input object changes.
Accessors: get set

Property: Rhino.ApplicationSettings.HistorySettings.RecordNextCommand
Return: bool
Modifiers: public, static
Summary: Enable history recording until the end of the next command
Accessors: get set

Property: Rhino.ApplicationSettings.HistorySettings.UpdateEnabled
Return: bool
Modifiers: public, static
Summary: When history update is enabled, dependent objects are automatically updated when an antecedent is modified.
Accessors: get set

Class: Rhino.ApplicationSettings.KeyboardShortcut
Summary: A shortcut is a key plus modifier combination that executes a macro

Constructor: Rhino.ApplicationSettings.KeyboardShortcut.KeyboardShortcut()
Summary: Initializes a new instance of the KeyboardShortcut class

Property: Rhino.ApplicationSettings.KeyboardShortcut.Key
Return: KeyboardKey
Modifiers: public
Summary: Key used for shortcut
Accessors: get set

Property: Rhino.ApplicationSettings.KeyboardShortcut.Macro
Return: string
Modifiers: public
Summary: Macro to execute when key plus modifier are pressed
Accessors: get set

Property: Rhino.ApplicationSettings.KeyboardShortcut.Modifier
Return: ModifierKey
Modifiers: public
Summary: Modifier key used for shortcut
Accessors: get set

Class: Rhino.ApplicationSettings.ModelAidSettings
Summary: Contains static methods and properties to modify model aid settings.

Constructor: Rhino.ApplicationSettings.ModelAidSettings.ModelAidSettings()
Summary: Initializes a new instance of the ModelAidSettings class

Property: Rhino.ApplicationSettings.ModelAidSettings.AltPlusArrow
Return: bool
Modifiers: public, static
Summary: True means Alt+arrow is used for nudging.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.AutoAlignCPlane
Return: bool
Modifiers: public, static
Summary: Gets or sets whether the cplane will automatically align to the selection
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.AutoCPlaneAlignment
Return: int
Modifiers: public, static
Summary: //0 = object, 1 = world, 2 = view
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.AutoGumballEnabled
Return: bool
Modifiers: public, static
Summary: When AutoGumball is on, a gumball automatically appears when objects are pre-picked.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.ControlPolygonDisplayDensity
Return: int
Modifiers: public, static
Summary: Gets or sets the control polygon display density.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.CtrlNudgeKeyStep
Return: double
Modifiers: public, static
Summary: Gets or sets the Ctrl-key based nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.DisplayControlPolygon
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's display control polygon.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.ExtendToApparentIntersection
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's extend to apparent intersections.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.ExtendTrimLines
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's extend trim lines.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.GridSnap
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's grid snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.GumballAutoReset
Return: bool
Modifiers: public, static
Summary: When GumballAutoReset is on the gumball resets its orientation after a drag When GumballAutoReset is off the gumball orientation is kept to where it was dragged
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.GumballExtrudeMergeFaces
Return: bool
Modifiers: public, static
Summary: When ExtrudeMergeFaces is True the gumball will attempt to merge faces if possible after extruding a face
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.HighlightControlPolygon
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's highlight dialog modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.MousePickboxRadius
Return: int
Modifiers: public, static
Summary: radius of mouse pick box in pixels.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.NudgeKeyStep
Return: double
Modifiers: public, static
Summary: Gets or sets the nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.NudgeMode
Return: int
Modifiers: public, static
Summary: 0 = world, 1 = cplane, 2 = view, 3 = UVN, -1 = not set.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OnlySnapToSelected
Return: bool
Modifiers: public, static
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OrientAutoCPlaneToView
Return: bool
Modifiers: public, static
Summary: Gets or sets whether the auto cplane will rotate towards the view after aligning to the selection
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.Ortho
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's ortho modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OrthoAngle
Return: double
Modifiers: public, static
Summary: Gets or sets the base orthogonal angle.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OrthoUseZ
Return: bool
Modifiers: public, static
Summary: Gets or sets whether Ortho will snap to the CPlane Z axis
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.Osnap
Return: bool
Modifiers: public, static
Summary: Enables or disables Rhino's object snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OsnapCursorMode
Return: CursorMode
Modifiers: public, static
Summary: Gets or sets the OSnap cursor mode.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OsnapModes
Return: OsnapModes
Modifiers: public, static
Summary: Returns or sets Rhino's current object snap mode. The mode is a bitwise value based on the OsnapModes enumeration.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.OsnapPickboxRadius
Return: int
Modifiers: public, static
Summary: Enables or disables Rhino's planar modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.Planar
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's Planar modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.PointDisplay
Return: PointDisplayMode
Modifiers: public, static
Summary: Gets or sets the point display mode.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.ProjectSnapToCPlane
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's Project modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.ShiftNudgeKeyStep
Return: double
Modifiers: public, static
Summary: Gets or sets the Shift-key based nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.SnappyGumballEnabled
Return: bool
Modifiers: public, static
Summary: When SnappyGumball is on, a dragging a gumball moves the center point. When snappy gumball is off, dragging a gumball moves the mouse down point.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.SnapToFiltered
Return: bool
Modifiers: public, static
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.SnapToLocked
Return: bool
Modifiers: public, static
Summary: Gets or sets the locked state of the snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.SnapToOccluded
Return: bool
Modifiers: public, static
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.StickyAutoCPlane
Return: bool
Modifiers: public, static
Summary: Gets or set whether the auto cplane will stay even after deselection
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.UniversalConstructionPlaneMode
Return: bool
Modifiers: public, static
Summary: Gets or sets the locked state of the snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettings.UseHorizontalDialog
Return: bool
Modifiers: public, static
Summary: Gets or sets the enabled state of Rhino's use horizontal dialog modeling aid.
Accessors: get set

Method: Rhino.ApplicationSettings.ModelAidSettings.GetCurrentState()
Return: ModelAidSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.ModelAidSettings.GetDefaultState()
Return: ModelAidSettingsState
Modifiers: public, static
Summary: Gets the factory settings.

Method: Rhino.ApplicationSettings.ModelAidSettings.UpdateFromState(ModelAidSettingsState state)
Return: void
Modifiers: public, static
Summary: Updates from a particular setting state.
Parameter: state (ModelAidSettingsState)
Parameter Summary: The new states that will be set.

Class: Rhino.ApplicationSettings.ModelAidSettingsState
Summary: Represents a snapshot of <b>ModelAidSettings</b> .

Property: Rhino.ApplicationSettings.ModelAidSettingsState.AltPlusArrow
Return: bool
Modifiers: public
Summary: True mean Alt+arrow is used for nudging.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.AutoAlignCPlane
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.AutoCPlaneAlignment
Return: int
Modifiers: public
Summary: //0 = object, 1 = world, 2 = view
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.ControlPolygonDisplayDensity
Return: int
Modifiers: public
Summary: Gets or sets the control polygon display density.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.CtrlNudgeKeyStep
Return: double
Modifiers: public
Summary: Gets or sets the Ctrl-key based nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.DisplayControlPolygon
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's display control polygon.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.ExtendToApparentIntersection
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's extend to apparent intersections.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.ExtendTrimLines
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's extend trim lines.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.GridSnap
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's grid snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.HighlightControlPolygon
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's highlight dialog modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.MousePickboxRadius
Return: int
Modifiers: public
Summary: Gets or sets the radius of the mouse pick box in pixels.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.NudgeKeyStep
Return: double
Modifiers: public
Summary: Gets or sets the nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.NudgeMode
Return: int
Modifiers: public
Summary: 0 = world, 1 = cplane, 2 = view, 3 = UVN, -1 = not set.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OrientAutoCPlaneToView
Return: bool
Modifiers: public
Summary: Gets or sets whether the auto cplane will rotate towards the view after aligning to the selection
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.Ortho
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's ortho modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OrthoAngle
Return: double
Modifiers: public
Summary: Gets or sets the base orthogonal angle.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OrthoUseZ
Return: bool
Modifiers: public
Summary: Gets or sets whether Ortho will snap to the CPlane Z axis
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.Osnap
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's object snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OsnapCursorMode
Return: CursorMode
Modifiers: public
Summary: Gets or sets the OSnap cursor mode.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OsnapModes
Return: OsnapModes
Modifiers: public
Summary: Returns or sets Rhino's current object snap mode.
The mode is a bitwise value based on the OsnapModes enumeration. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.OsnapPickboxRadius
Return: int
Modifiers: public
Summary: Enables or disables Rhino's planar modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.Planar
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's Planar modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.PointDisplay
Return: PointDisplayMode
Modifiers: public
Summary: Gets or sets the point display mode.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.ProjectSnapToCPlane
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's Project modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.ShiftNudgeKeyStep
Return: double
Modifiers: public
Summary: Gets or sets the Shift-key based nudge step amount.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.SnapToLocked
Return: bool
Modifiers: public
Summary: Gets or sets the locked state of the snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.StickyAutoCPlane
Return: bool
Modifiers: public
Summary: Gets or set whether the auto cplane will stay even after deselection
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.UniversalConstructionPlaneMode
Return: bool
Modifiers: public
Summary: Gets or sets the locked state of the snap modeling aid.
Accessors: get set

Property: Rhino.ApplicationSettings.ModelAidSettingsState.UseHorizontalDialog
Return: bool
Modifiers: public
Summary: Gets or sets the enabled state of Rhino's use horizontal dialog modeling aid.
Accessors: get set

Class: Rhino.ApplicationSettings.NeverRepeatList
Summary: Contains static methods and properties relating to the list of commands that are never repeated.

Constructor: Rhino.ApplicationSettings.NeverRepeatList.NeverRepeatList()
Summary: Initializes a new instance of the NeverRepeatList class

Property: Rhino.ApplicationSettings.NeverRepeatList.UseNeverRepeatList
Return: bool
Modifiers: public, static
Summary: Only use the list if somebody modifies it via CRhinoAppSettings::SetDontRepeatCommands(). Return value of True means CRhinoCommand don't repeat flags will be ignored and the m_dont_repeat_list will be used instead.  False means the individual CRhinoCommands will determine if they are repeatable.
Accessors: get

Method: Rhino.ApplicationSettings.NeverRepeatList.CommandNames()
Return: string
Modifiers: public, static
Summary: The list of commands to not repeat.

Method: Rhino.ApplicationSettings.NeverRepeatList.SetList(string commandNames)
Return: int
Modifiers: public, static
Summary: Puts the command name tokens in m_dont_repeat_list.

Class: Rhino.ApplicationSettings.OpenGLSettings
Summary: Static methods and properties to control OpenGL settings

Constructor: Rhino.ApplicationSettings.OpenGLSettings.OpenGLSettings()
Summary: Initializes a new instance of the OpenGLSettings class

Property: Rhino.ApplicationSettings.OpenGLSettings.AntialiasLevel
Return: AntialiasLevel
Modifiers: public, static
Summary: Gets or sets the anti-alias level used by OpenGL viewports
Accessors: get set

Method: Rhino.ApplicationSettings.OpenGLSettings.GetCurrentState()
Return: OpenGLSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.OpenGLSettings.GetDefaultState()
Return: OpenGLSettingsState
Modifiers: public, static
Summary: Gets the OpenGL factory settings.

Method: Rhino.ApplicationSettings.OpenGLSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Updates from the default setting state.

Method: Rhino.ApplicationSettings.OpenGLSettings.UpdateFromState(OpenGLSettingsState state)
Return: void
Modifiers: public, static
Summary: Updates from a particular setting state.
Parameter: state (OpenGLSettingsState)
Parameter Summary: The new state that will be set.

Class: Rhino.ApplicationSettings.OpenGLSettingsState
Summary: Represents a snapshot of <b>OpenGLSettings</b>

Property: Rhino.ApplicationSettings.OpenGLSettingsState.AntialiasLevel
Return: AntialiasLevel
Modifiers: public
Summary: AA level used in OpenGL viewports
Accessors: get set

Class: Rhino.ApplicationSettings.PackageManagerSettings
Summary: Settings specific to Rhino's package manager

Constructor: Rhino.ApplicationSettings.PackageManagerSettings.PackageManagerSettings()
Summary: Initializes a new instance of the PackageManagerSettings class

Property: Rhino.ApplicationSettings.PackageManagerSettings.Sources
Return: string
Modifiers: public, static
Summary: semicolon separated list of paths/urls that the package manager uses for sources
Accessors: get set

Class: Rhino.ApplicationSettings.SelectionFilterSettings
Summary: Selection filter settings restrict any selection mode (SelWindow, SelCrossing, SelAll, etc.) to specified object types. Note, selection filter settings are not persistent.

Constructor: Rhino.ApplicationSettings.SelectionFilterSettings.SelectionFilterSettings()
Summary: Initializes a new instance of the SelectionFilterSettings class

Property: Rhino.ApplicationSettings.SelectionFilterSettings.Enabled
Return: bool
Modifiers: public, static
Summary: Enables or disables the global object selection filter.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettings.GlobalGeometryFilter
Return: ObjectType
Modifiers: public, static
Summary: The global geometry type filter controls which types of geometry will be filtered. Note, the filter can be a bitwise combination of multiple object types.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettings.OneShotGeometryFilter
Return: ObjectType
Modifiers: public, static
Summary: The one-shot geometry type filter controls which types of geometry will be filtered for one selection. Note, the filter can be a bitwise combination of multiple object types.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettings.SubObjectSelect
Return: bool
Modifiers: public, static
Summary: Enables or disabled sub-object selection.
Accessors: get set

Method: Rhino.ApplicationSettings.SelectionFilterSettings.GetCurrentState()
Return: SelectionFilterSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.SelectionFilterSettings.GetDefaultState()
Return: SelectionFilterSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.SelectionFilterSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.SelectionFilterSettings.UpdateFromState(SelectionFilterSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (SelectionFilterSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.SelectionFilterSettingsState
Summary: Represents a snapshot of <b>SelectionFilterSettings</b> .

Property: Rhino.ApplicationSettings.SelectionFilterSettingsState.Enabled
Return: bool
Modifiers: public
Summary: Enables or disables the global object selection filter.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettingsState.GlobalGeometryFilter
Return: ObjectType
Modifiers: public
Summary: The global geometry type filter controls which types of geometry will be filtered. Note, the filter can be a bitwise combination of multiple object types.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettingsState.OneShotGeometryFilter
Return: ObjectType
Modifiers: public
Summary: The one-shot geometry type filter controls which types of geometry will be filtered for one selection. Note, the filter can be a bitwise combination of multiple object types.
Accessors: get set

Property: Rhino.ApplicationSettings.SelectionFilterSettingsState.SubObjectSelect
Return: bool
Modifiers: public
Summary: Enables or disabled sub-object selection.
Accessors: get set

Class: Rhino.ApplicationSettings.ShortcutKeySettings
Summary: Contains static methods and properties to control keyboard shortcut keys

Constructor: Rhino.ApplicationSettings.ShortcutKeySettings.ShortcutKeySettings()
Summary: Initializes a new instance of the ShortcutKeySettings class

Method: Rhino.ApplicationSettings.ShortcutKeySettings.GetDefaults()
Return: KeyboardShortcut[]
Modifiers: public, static
Summary: Get all the default shortcuts registered with Rhino

Method: Rhino.ApplicationSettings.ShortcutKeySettings.GetLabel(ShortcutKey key)
Return: string
Modifiers: public, static
Summary: Get the macro label associated with a given keyboard shortcut

Method: Rhino.ApplicationSettings.ShortcutKeySettings.GetMacro(ShortcutKey key)
Return: string
Modifiers: public, static
Summary: Get macro associated with a given keyboard shortcut

Method: Rhino.ApplicationSettings.ShortcutKeySettings.GetShortcuts()
Return: KeyboardShortcut[]
Modifiers: public, static
Summary: Get all shortcuts registered with Rhino

Method: Rhino.ApplicationSettings.ShortcutKeySettings.IsAcceptableKeyCombo(Rhino.UI.KeyboardKey key, Rhino.UI.ModifierKey modifier)
Return: bool
Modifiers: public, static
Summary: Is a key plus modifier combination one that can be used with Rhino

Method: Rhino.ApplicationSettings.ShortcutKeySettings.SetMacro(Rhino.UI.KeyboardKey key, Rhino.UI.ModifierKey modifier, string macro)
Return: void
Modifiers: public, static
Summary: Set a macro for a given key and modifier combination

Method: Rhino.ApplicationSettings.ShortcutKeySettings.SetMacro(ShortcutKey key, string macro)
Return: void
Modifiers: public, static
Summary: Set macro associated with a keyboard shortcut

Method: Rhino.ApplicationSettings.ShortcutKeySettings.Update(IEnumerable<KeyboardShortcut> shortcuts, bool replaceAll)
Return: void
Modifiers: public, static
Summary: Add or modify shortcuts with a list or KeyboardShortcut elements

Class: Rhino.ApplicationSettings.SmartTrackSettings
Summary: Contains static methods and properties that target the Smart Track feature behavior.

Constructor: Rhino.ApplicationSettings.SmartTrackSettings.SmartTrackSettings()
Summary: Initializes a new instance of the SmartTrackSettings class

Property: Rhino.ApplicationSettings.SmartTrackSettings.ActivationDelayMilliseconds
Return: int
Modifiers: public, static
Summary: Gets or sets the activation delay in milliseconds.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.ActivePointColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the active point color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.LineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the smart track line color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.MaxSmartPoints
Return: int
Modifiers: public, static
Summary: Gets or sets the maximum number of smart points.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.PointColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the point color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.SmartOrtho
Return: bool
Modifiers: public, static
Summary: Gets or sets a value indicating if the 'Smart Ortho' feature is active.
Orthogonal lines are then drawn automatically. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.SmartTangents
Return: bool
Modifiers: public, static
Summary: Gets or sets a value indicating if the 'Smart Tangents' feature is active.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.TanPerpLineColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the tangent and perpendicular line color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.UseDottedLines
Return: bool
Modifiers: public, static
Summary: Gets or sets a value indicating if lines are drawn dotted.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettings.UseSmartTrack
Return: bool
Modifiers: public, static
Summary: Gets or sets if the Smart Track feature is active.
Accessors: get set

Method: Rhino.ApplicationSettings.SmartTrackSettings.GetCurrentState()
Return: SmartTrackSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.SmartTrackSettings.GetDefaultState()
Return: SmartTrackSettingsState
Modifiers: public, static
Summary: Gets the Smart Track factory settings.

Method: Rhino.ApplicationSettings.SmartTrackSettings.UpdateFromState(SmartTrackSettingsState state)
Return: void
Modifiers: public, static
Summary: Updates from a particular setting state.
Parameter: state (SmartTrackSettingsState)
Parameter Summary: The new state that will be set.

Class: Rhino.ApplicationSettings.SmartTrackSettingsState
Summary: Represents a snapshot of <b>SmartTrackSettings</b> .

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.MaxSmartPoints
Return: int
Modifiers: public, static
Summary: Gets or sets the maximum number of smart points.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.ActivationDelayMilliseconds
Return: int
Modifiers: public
Summary: Gets or sets the activation delay in milliseconds.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.ActivePointColor
Return: Color
Modifiers: public
Summary: Gets or sets the active point color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.LineColor
Return: Color
Modifiers: public
Summary: Gets or sets the smart track line color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.PointColor
Return: Color
Modifiers: public
Summary: Gets or sets the point color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.SmartOrtho
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating if the 'Smart Ortho' feature is active.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.SmartTangents
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating if the 'Smart Tangents' feature is active.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.TanPerpLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the tangent and perpendicular line color.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.UseDottedLines
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating if lines are drawn dotted.
Accessors: get set

Property: Rhino.ApplicationSettings.SmartTrackSettingsState.UseSmartTrack
Return: bool
Modifiers: public
Summary: Gets or sets if the 'smart track' feature is active.
Accessors: get set

Class: Rhino.ApplicationSettings.ViewSettings
Summary: Contains static methods and properties to control view settings.

Constructor: Rhino.ApplicationSettings.ViewSettings.ViewSettings()
Summary: Initializes a new instance of the ViewSettings class

Property: Rhino.ApplicationSettings.ViewSettings.AlwaysPanParallelViews
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'always pan parallel views' value.
If the view is not looking straight at the construction plane, then     sets parallel viewports so they will not rotate. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.DefinedViewSetCPlane
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'named views set CPlane' value.
When true, restoring a named view causes the construction plane saved with that view to also restore. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.DefinedViewSetProjection
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'named views set projection' value.
When true, restoring a named view causes the viewport projection saved with the view to also restore. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.LinkedViewports
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'linked views' activated setting.
True enables real-time view synchronization.     When a standard view is manipulated, the camera lens length of all parallel projection     viewports are set to match the current viewport. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.PanReverseKeyboardAction
Return: bool
Modifiers: public, static
Summary: Gets or sets if panning with the keyboard is reversed.
false, then Rhino pans the camera in the direction of the arrow key you press.     true, then Rhino pans the scene instead. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.PanScreenFraction
Return: double
Modifiers: public, static
Summary: Gets or sets the faction used as multiplier to pan the screen.
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.RotateCircleIncrement
Return: int
Modifiers: public, static
Summary: Gets or sets the rotation increment.
When the user rotates a view with the keyboard, Rhino rotates the view in steps.     The usual step is 1/60th of a circle, which equals six degrees. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.RotateReverseKeyboard
Return: bool
Modifiers: public, static
Summary: Gets or sets the rotation direction.
If true, then Rhino rotates the camera around the scene, otherwise, rotates the scene itself. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.RotateToView
Return: bool
Modifiers: public, static
Summary: Gets or sets the rotation reference.
If true, then the views rotates relative to the view axes; false, than relative to the world x, y, and z axes. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.SingleClickMaximize
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'single-click maximize' value.
When true, maximizing a viewport needs a single click on the viewport title rather than a double-click. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.ViewRotation
Return: ViewRotationStyle
Modifiers: public, static
Summary: Gets or sets the view rotation value.
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.ZoomExtentsParallelViewBorder
Return: double
Modifiers: public, static
Summary: Border amount to apply to parallel viewport during zoom extents
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.ZoomExtentsPerspectiveViewBorder
Return: double
Modifiers: public, static
Summary: Border amount to apply to perspective viewport during zoom extents
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettings.ZoomScale
Return: double
Modifiers: public, static
Summary: Gets or sets the step size for zooming with a wheeled mouse or the Page Up and Page Down keys.
Accessors: get set

Method: Rhino.ApplicationSettings.ViewSettings.GetCurrentState()
Return: ViewSettingsState
Modifiers: public, static
Summary: Gets the current settings.

Method: Rhino.ApplicationSettings.ViewSettings.GetDefaultState()
Return: ViewSettingsState
Modifiers: public, static
Summary: Gets the view factory settings.

Method: Rhino.ApplicationSettings.ViewSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Updates from the default setting state.

Method: Rhino.ApplicationSettings.ViewSettings.UpdateFromState(ViewSettingsState state)
Return: void
Modifiers: public, static
Summary: Updates from a particular setting state.
Parameter: state (ViewSettingsState)
Parameter Summary: The new state that will be set.

Class: Rhino.ApplicationSettings.ViewSettingsState
Summary: Represents a snapshot of <b>ViewSettings</b> .

Property: Rhino.ApplicationSettings.ViewSettingsState.AlwaysPanParallelViews
Return: bool
Modifiers: public
Summary: Gets or sets the 'always pan parallel views' value.
If the view is not looking straight at the construction plane, then     sets parallel viewports so they will not rotate. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.DefinedViewSetCPlane
Return: bool
Modifiers: public
Summary: Gets or sets the 'named views set CPlane' value.
When true, restoring a named view causes the construction plane saved with that view to also restore. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.DefinedViewSetProjection
Return: bool
Modifiers: public
Summary: Gets or sets the 'named views set projection' value.
When true, restoring a named view causes the viewport projection saved with the view to also restore. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.LinkedViewports
Return: bool
Modifiers: public
Summary: Gets or sets the 'linked views' activated setting.
True enables real-time view synchronization.     When a standard view is manipulated, the camera lens length of all parallel projection     viewports are set to match the current viewport. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.PanReverseKeyboardAction
Return: bool
Modifiers: public
Summary: Gets or sets if panning with the keyboard is reversed.
false, then Rhino pans the camera in the direction of the arrow key you press.     true, then Rhino pans the scene instead. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.PanScreenFraction
Return: double
Modifiers: public
Summary: Gets or sets the faction used as multiplier to pan the screen.
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.RotateCircleIncrement
Return: int
Modifiers: public
Summary: Gets or sets the rotation increment.
When the user rotates a view with the keyboard, Rhino rotates the view in steps.     The usual step is 1/60th of a circle, which equals six degrees. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.RotateReverseKeyboard
Return: bool
Modifiers: public
Summary: Gets or sets the rotation direction.
If true, then Rhino rotates the camera around the scene, otherwise, rotates the scene itself. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.RotateToView
Return: bool
Modifiers: public
Summary: Gets or sets the rotation reference.
If true, then the views rotates relative to the view axes; false, than relative to the world x, y, and z axes. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.SingleClickMaximize
Return: bool
Modifiers: public
Summary: Gets or sets the 'single-click maximize' value.
When true, maximizing a viewport needs a single click on the viewport title rather than a double-click. | Since: 5.0 | Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.ViewRotation
Return: ViewRotationStyle
Modifiers: public
Summary: Gets or sets the view rotation value.
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.ZoomExtentsParallelViewBorder
Return: double
Modifiers: public
Summary: Border amount to apply to parallel viewport during zoom extents
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.ZoomExtentsPerspectiveViewBorder
Return: double
Modifiers: public
Summary: Border amount to apply to perspective viewport during zoom extents
Accessors: get set

Property: Rhino.ApplicationSettings.ViewSettingsState.ZoomScale
Return: double
Modifiers: public
Summary: Gets or sets the step size for zooming with a wheeled mouse or the Page Up and Page Down keys.
Accessors: get set

Class: Rhino.ApplicationSettings.ZebraAnalysisSettings
Summary: Contains static methods and properties to modify Zebra analysis-related commands.

Constructor: Rhino.ApplicationSettings.ZebraAnalysisSettings.ZebraAnalysisSettings()
Summary: Initializes a new instance of the ZebraAnalysisSettings class

Property: Rhino.ApplicationSettings.ZebraAnalysisSettings.ShowIsoCurves
Return: bool
Modifiers: public, static
Summary: Get or sets the display of surface isocurves.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettings.StripeColor
Return: Color
Modifiers: public, static
Summary: Gets or sets the stripe color.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettings.StripeThickness
Return: int
Modifiers: public, static
Summary: Gets or sets the stripe thickness, where 0 = thinnest and 6 = thickest.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettings.VerticalStripes
Return: bool
Modifiers: public, static
Summary: Set to True for vertical stripes, or False for horizontal stripes.
Accessors: get set

Method: Rhino.ApplicationSettings.ZebraAnalysisSettings.GetCurrentState()
Return: ZebraAnalysisSettingsState
Modifiers: public, static
Summary: Gets the current settings of the application.

Method: Rhino.ApplicationSettings.ZebraAnalysisSettings.GetDefaultState()
Return: ZebraAnalysisSettingsState
Modifiers: public, static
Summary: Gets the factory settings of the application.

Method: Rhino.ApplicationSettings.ZebraAnalysisSettings.RestoreDefaults()
Return: void
Modifiers: public, static
Summary: Commits the default settings as the current settings.

Method: Rhino.ApplicationSettings.ZebraAnalysisSettings.UpdateFromState(ZebraAnalysisSettingsState state)
Return: void
Modifiers: public, static
Summary: Sets all settings to a particular defined joined state.
Parameter: state (ZebraAnalysisSettingsState)
Parameter Summary: The particular state.

Class: Rhino.ApplicationSettings.ZebraAnalysisSettingsState
Summary: Represents a snapshot of <b>ZebraAnalysisSettings</b> .

Property: Rhino.ApplicationSettings.ZebraAnalysisSettingsState.ShowIsoCurves
Return: bool
Modifiers: public
Summary: Get or sets the display of surface isocurves.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettingsState.StripeColor
Return: Color
Modifiers: public
Summary: Gets or sets the stripe color.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettingsState.StripeThickness
Return: int
Modifiers: public
Summary: Gets or sets the stripe thickness, where 0 = thinnest and 6 = thickest.
Accessors: get set

Property: Rhino.ApplicationSettings.ZebraAnalysisSettingsState.VerticalStripes
Return: bool
Modifiers: public
Summary: Set to True for vertical stripes, or False for horizontal stripes.
Accessors: get set

# Namespace: Rhino.Collections

Class: Rhino.Collections.ArchivableDictionary
Summary: Represents a dictionary class that can be attached to objects and   can be serialized (saved) at necessity.
See remarks for layout.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary()
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(int version, string name)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(int version)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Constructor: Rhino.Collections.ArchivableDictionary.ArchivableDictionary(UserData parentUserData)
Summary: Initializes an instance of a dictionary for writing to a 3dm archive

Property: Rhino.Collections.ArchivableDictionary.ChangeSerialNumber
Return: uint
Modifiers: public
Summary: Retrieve current change serial number. This is a number that gets increased each time a datum is set or changed.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Count
Return: int
Modifiers: public
Summary: Gets the number of key/value pairs contained in the dictionary.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Keys
Return: string[]
Modifiers: public
Summary: Gets all entry names or keys.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Name
Return: string
Modifiers: public
Summary: Gets or sets the name string of this <b>ArchivableDictionary</b> .
Accessors: get set

Property: Rhino.Collections.ArchivableDictionary.ParentUserData
Return: UserData
Modifiers: public
Summary: If this dictionary is part of user-data (or is a UserDictionary), then this is the parent user data. None if this dictionary is not part of user-data
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Values
Return: object[]
Modifiers: public
Summary: Gets all values in this dictionary.
Accessors: get

Property: Rhino.Collections.ArchivableDictionary.Version
Return: int
Modifiers: public
Summary: Gets or sets the version of this <b>ArchivableDictionary</b> .
Accessors: get set

Property: Rhino.Collections.ArchivableDictionary.this[string key]
Return: object
Modifiers: public
Summary: Gets the value associated with the specified key.

Method: Rhino.Collections.ArchivableDictionary.AddContentsFrom(ArchivableDictionary source)
Return: bool
Modifiers: public
Summary: Add the contents from the source dictionary.

Method: Rhino.Collections.ArchivableDictionary.Clear()
Return: void
Modifiers: public
Summary: Removes all keys and values from the dictionary.

Method: Rhino.Collections.ArchivableDictionary.Clone()
Return: ArchivableDictionary
Modifiers: public
Summary: Constructs a deep copy of this object.

Method: Rhino.Collections.ArchivableDictionary.ContainsKey(string key)
Return: bool
Modifiers: public
Summary: Determines whether the dictionary contains the specified key.
Parameter: key (string)
Parameter Summary: The key to locate.

Method: Rhino.Collections.ArchivableDictionary.GetBool(string key, bool defaultValue)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will return defaultValue unless value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.GetBool(string key)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.GetBytes(string key, byte defaultValue)
Return: byte
Modifiers: public
Summary: Get value as byte[], will return defaultValue unless value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.GetBytes(string key)
Return: byte
Modifiers: public
Summary: Get value as byte[], will only succeed if value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.GetDictionary(string key, ArchivableDictionary defaultValue)
Return: ArchivableDictionary
Modifiers: public
Summary: Get value as ArchivableDictionary, will return defaultValue unless value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.GetDictionary(string key)
Return: ArchivableDictionary
Modifiers: public
Summary: Get value as ArchivableDictionary, will only succeed if value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.GetDouble(string key, double defaultValue)
Return: double
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.GetDouble(string key)
Return: double
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.object>> GetEnumerator()
Return: IEnumerator<KeyValuePair<string,
Modifiers: public
Summary: Gets the enumerator of this dictionary.

Method: Rhino.Collections.ArchivableDictionary.GetEnumValue()
Return: T
Modifiers: public
Summary: Get an enum value

Method: Rhino.Collections.ArchivableDictionary.GetEnumValue(string key)
Return: T
Modifiers: public
Summary: Get an enum value from the dictionary using a custom key.

Method: Rhino.Collections.ArchivableDictionary.GetFloat(string key, float defaultValue)
Return: float
Modifiers: public
Summary: Get value as float, will return defaultValue unless value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.GetFloat(string key)
Return: float
Modifiers: public
Summary: Get value as float, will only succeed if value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.GetGuid(string key, System.Guid defaultValue)
Return: System.Guid
Modifiers: public
Summary: Get value as Guid, will return defaultValue unless value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.GetGuid(string key)
Return: System.Guid
Modifiers: public
Summary: Get value as Guid, will only succeed if value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.Getint(string key, int defaultValue)
Return: int
Modifiers: public
Summary: Get value as int, will return defaultValue unless value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetInteger(string key, int defaultValue)
Return: int
Modifiers: public
Summary: Get value as int, will return defaultValue unless value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetInteger(string key)
Return: int
Modifiers: public
Summary: Get value as int, will only succeed if value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.Collections.ArchivableDictionary.GetPlane(string key, Geometry.Plane defaultValue)
Return: Geometry.Plane
Modifiers: public
Summary: Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.
Parameter: defaultValue (Geometry.Plane)
Parameter Summary: The default value.

Method: Rhino.Collections.ArchivableDictionary.GetPlane(string key)
Return: Geometry.Plane
Modifiers: public
Summary: Get value as Plane, will return defaultValue unless value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.

Method: Rhino.Collections.ArchivableDictionary.GetPoint3d(string key, Geometry.Point3d defaultValue)
Return: Geometry.Point3d
Modifiers: public
Summary: Get value as Point3d, will return defaultValue unless value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3d(string key)
Return: Geometry.Point3d
Modifiers: public
Summary: Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3f(string key, Geometry.Point3f defaultValue)
Return: Geometry.Point3f
Modifiers: public
Summary: Get value as Point3f, will return defaultValue unless value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.GetPoint3f(string key)
Return: Geometry.Point3f
Modifiers: public
Summary: Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.GetString(string key, string defaultValue)
Return: string
Modifiers: public
Summary: Get value as string, will return defaultValue unless value was created using Set(string key, string value)
Parameter: key (string)
Parameter Summary: The key which points to the string
Parameter: defaultValue (string)
Parameter Summary: The string

Method: Rhino.Collections.ArchivableDictionary.GetString(string key)
Return: string
Modifiers: public
Summary: Get value as string, will only succeed if value was created using Set(string key, string value)
Parameter: key (string)
Parameter Summary: The key which points to the string

Method: Rhino.Collections.ArchivableDictionary.GetVector3d(string key, Geometry.Vector3d defaultValue)
Return: Geometry.Vector3d
Modifiers: public
Summary: Get value as Vector3d, will return defaultValue unless value was created using Set(string key, Vector3d value)

Method: Rhino.Collections.ArchivableDictionary.GetVector3d(string key)
Return: Geometry.Vector3d
Modifiers: public
Summary: Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)

Method: Rhino.Collections.ArchivableDictionary.Remove(string key)
Return: bool
Modifiers: public
Summary: Removes the value with the specified key from the dictionary.
Parameter: key (string)
Parameter Summary: The key of the element to remove.

Method: Rhino.Collections.ArchivableDictionary.RemoveEnumValue()
Return: bool
Modifiers: public
Summary: Remove an enum value from the dictionary.

Method: Rhino.Collections.ArchivableDictionary.ReplaceContentsWith(ArchivableDictionary source)
Return: bool
Modifiers: public
Summary: Replace the contents of the dictionary with that of the given source dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, ArchivableDictionary val)
Return: bool
Modifiers: public
Summary: Sets another <b>ArchivableDictionary</b> as entry in this dictionary.
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (ArchivableDictionary)
Parameter Summary: An object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, bool val)
Return: bool
Modifiers: public
Summary: Sets a <b>bool</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (bool)
Parameter Summary: A <b>bool</b> value.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, byte val)
Return: bool
Modifiers: public
Summary: Sets a <b>byte</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (byte)
Parameter Summary: A <b>byte</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, DocObjects.ObjRef val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.DocObjects.ObjRef</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (DocObjects.ObjRef)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, double val)
Return: bool
Modifiers: public
Summary: Sets a <b>double</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (double)
Parameter Summary: A <b>double</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, float val)
Return: bool
Modifiers: public
Summary: Sets a <b>float</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (float)
Parameter Summary: A <b>float</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.BoundingBox val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.BoundingBox</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.BoundingBox)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.GeometryBase val)
Return: bool
Modifiers: public
Summary: Sets any class deriving from the <b>Rhino.Geometry.GeometryBase</b> base class.
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.GeometryBase)
Parameter Summary: A geometry object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate. You can use  for this.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Interval val)
Return: bool
Modifiers: public
Summary: Sets an <b>Rhino.Geometry.Interval</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Interval)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Line val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Line</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Line)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.MeshingParameters val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.MeshingParameters</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.MeshingParameters)
Parameter Summary: An object for that key.
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Plane val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Plane</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Plane)
Parameter Summary: A plane for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point2d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point2d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point2d)
Parameter Summary: A point for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point3d)
Parameter Summary: A point for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point3f val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point3f</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point3f)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Point4d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Point4d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Point4d)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Ray3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Ray3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Ray3d)
Parameter Summary: A value for that key.
Because  has value semantics and is immutable, no changes to this object are possible.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Transform val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Transform</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Transform)
Parameter Summary: A transform for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector2d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector2d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector2d)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector3d val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector3d</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector3d)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, Geometry.Vector3f val)
Return: bool
Modifiers: public
Summary: Sets a <b>Rhino.Geometry.Vector3f</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (Geometry.Vector3f)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<bool> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>bool</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<bool>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<byte> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>byte</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<byte>)
Parameter Summary: A value for that key
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<double> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>double</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<double>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<float> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>float</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<float>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<GeometryBase> val)
Return: bool
Modifiers: public
Summary: Sets an array of <b>Rhino.Geometry.GeometryBase</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (IEnumerable<Geometry.GeometryBase>)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<Guid> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>Guid</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<Guid>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<int> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>int</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<int>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<ObjRef> val)
Return: bool
Modifiers: public
Summary: Sets an array of <b>Rhino.DocObjects.ObjRef</b>
Parameter: key (string)
Parameter Summary: A text key
Parameter: val (IEnumerable<DocObjects.ObjRef>)
Parameter Summary: An object for that key
Because this class is a reference type and is mutable, changes to this object will propagate to the object inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<sbyte> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>sbyte</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<sbyte>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<short> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>short</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<short>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, IEnumerable<string> val)
Return: bool
Modifiers: public
Summary: Sets a list, an array or any enumerable of <b>string</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (IEnumerable<string>)
Parameter Summary: A value for that key.
Because this interface is a reference type, changes to the assigned object will modify this entry inside the dictionary.
It is up to the user to clone this entry when appropriate.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, int val)
Return: bool
Modifiers: public
Summary: Sets a <b>int</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (int)
Parameter Summary: A <b>int</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, sbyte val)
Return: bool
Modifiers: public
Summary: Sets a <b>sbyte</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (sbyte)
Parameter Summary: A <b>sbyte</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, short val)
Return: bool
Modifiers: public
Summary: Sets a <b>short</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (short)
Parameter Summary: A <b>short</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, string val)
Return: bool
Modifiers: public
Summary: Sets a <b>string</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (string)
Parameter Summary: A <b>string</b> .
Because  is immutable, it is not possible to modify the object while it is in this dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Color val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Color</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Color)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the     assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Font val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Font</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Font)
Parameter Summary: A value for that key.
Because  is immutable, it is not possible to modify the object while it is in this dictionary.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Point val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Point</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Point)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.PointF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.PointF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.PointF)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Rectangle val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Rectangle</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Rectangle)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.RectangleF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.RectangleF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.RectangleF)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.Size val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.Size</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.Size)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Drawing.SizeF val)
Return: bool
Modifiers: public
Summary: Sets a <b>System.Drawing.SizeF</b> .
Parameter: key (string)
Parameter Summary: A text key.
Parameter: val (System.Drawing.SizeF)
Parameter Summary: A value for that key.
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Guid val)
Return: bool
Modifiers: public
Summary: Sets a <b>Guid</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (System.Guid)
Parameter Summary: A <b>Guid</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, System.Int64 val)
Return: bool
Modifiers: public
Summary: Sets a <b>long</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (System.Int64)
Parameter Summary: A <b>long</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, uint val)
Return: bool
Modifiers: public
Summary: Sets a <b>uint</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (uint)
Parameter Summary: A <b>uint</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.Set(string key, ushort val)
Return: bool
Modifiers: public
Summary: Sets a <b>ushort</b> .
Parameter: key (string)
Parameter Summary: The text key.
Parameter: val (ushort)
Parameter Summary: A <b>ushort</b> .
Because  has value semantics, changes to the assigning value will leave this entry unchanged.

Method: Rhino.Collections.ArchivableDictionary.SetEnumValue(string key, T enumValue)
Return: bool
Modifiers: public
Summary: Set an enum value in the dictionary with a custom key.

Method: Rhino.Collections.ArchivableDictionary.SetEnumValue(T enumValue)
Return: bool
Modifiers: public
Summary: Set an enum value

Method: Rhino.Collections.ArchivableDictionary.TryGetBool(string key, out bool value)
Return: bool
Modifiers: public
Summary: Get value as Boolean, will only succeed if value was created using Set(string key, Boolean value)

Method: Rhino.Collections.ArchivableDictionary.TryGetBytes(string key, out byte value)
Return: bool
Modifiers: public
Summary: Get value as byte[], will only succeed if value was created using Set(string key, byte[] value)

Method: Rhino.Collections.ArchivableDictionary.TryGetDictionary(string key, out ArchivableDictionary value)
Return: bool
Modifiers: public
Summary: Get value as ArchivableDictionary, will only succeed if value was created using Set(string key, ArchivableDictionary value)

Method: Rhino.Collections.ArchivableDictionary.TryGetDouble(string key, out double value)
Return: bool
Modifiers: public
Summary: Get value as double, will only succeed if value was created using Set(string key, double value)

Method: Rhino.Collections.ArchivableDictionary.TryGetEnumValue(string key, out T enumValue)
Return: bool
Modifiers: public
Summary: Attempt to get an enum value from the dictionary using a custom key.

Method: Rhino.Collections.ArchivableDictionary.TryGetFloat(string key, out float value)
Return: bool
Modifiers: public
Summary: Get value as float, will only succeed if value was created using Set(string key, float value)

Method: Rhino.Collections.ArchivableDictionary.TryGetGuid(string key, out System.Guid value)
Return: bool
Modifiers: public
Summary: Get value as Guid, will only succeed if value was created using Set(string key, Guid value)

Method: Rhino.Collections.ArchivableDictionary.TryGetInteger(string key, out int value)
Return: bool
Modifiers: public
Summary: Get value as int, will only succeed if value was created using Set(string key, int value)

Method: Rhino.Collections.ArchivableDictionary.TryGetPlane(string key, out Geometry.Plane value)
Return: bool
Modifiers: public
Summary: Get value as Plane, will only succeed if value was created using Set(string key, Plane value)
Parameter: key (string)
Parameter Summary: The key.
Parameter: value (Geometry.Plane)
Parameter Summary: The value.

Method: Rhino.Collections.ArchivableDictionary.TryGetPoint3d(string key, out Geometry.Point3d value)
Return: bool
Modifiers: public
Summary: Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)

Method: Rhino.Collections.ArchivableDictionary.TryGetPoint3f(string key, out Geometry.Point3f value)
Return: bool
Modifiers: public
Summary: Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)

Method: Rhino.Collections.ArchivableDictionary.TryGetString(string key, out string value)
Return: bool
Modifiers: public
Summary: Get value as string, will only succeed if value was created using Set(string key, string value)

Method: Rhino.Collections.ArchivableDictionary.TryGetValue(string key, out object value)
Return: bool
Modifiers: public
Summary: Gets the value associated with the specified key.
Parameter: key (string)
Parameter Summary: The key of the value to get.
Parameter: value (object)
Parameter Summary: When this method returns and if the key is found, contains the value associated with the specified key; otherwise, null. This parameter is passed uninitialized.

Method: Rhino.Collections.ArchivableDictionary.TryGetVector3d(string key, out Geometry.Vector3d value)
Return: bool
Modifiers: public
Summary: Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)

Class: Rhino.Collections.CurveList
Summary: Represents a list of curves.

Constructor: Rhino.Collections.CurveList.CurveList()
Summary: Initializes a new empty list of curves.

Constructor: Rhino.Collections.CurveList.CurveList(IEnumerable<Curve> collection)
Summary: Initializes a new list that is filled with all items of the input enumerable.
Input items are not explicitly duplicated (this is a shallow copy).

Constructor: Rhino.Collections.CurveList.CurveList(int initialCapacity)
Summary: Initializes a new empty list of curves with a predefined capacity.
This is the amount of items the list will accept before resizing.

Method: Rhino.Collections.CurveList.Add(Arc arc)
Return: void
Modifiers: public
Summary: Adds an arc to this list.
Parameter: arc (Arc)
Parameter Summary: An arc value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(Circle circle)
Return: void
Modifiers: public
Summary: Adds a circle to this list.
Parameter: circle (Circle)
Parameter Summary: A circle value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(Ellipse ellipse)
Return: void
Modifiers: public
Summary: Adds an ellipse to this list.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Add(IEnumerable<Point3d> polyline)
Return: void
Modifiers: public
Summary: Adds a polyline to this list.
Parameter: polyline (IEnumerable<Point3d>)
Parameter Summary: A polyline value that will be copied in a new polyline.
This argument can be null, an array, a list or any enumerable set of .

Method: Rhino.Collections.CurveList.Add(Line line)
Return: void
Modifiers: public
Summary: Adds a line to this list.
Parameter: line (Line)
Parameter Summary: A line value that will be the model of the new internal curve.

Method: Rhino.Collections.CurveList.Insert(int index, Arc arc)
Return: void
Modifiers: public
Summary: Inserts an arc at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: arc (Arc)
Parameter Summary: The arc value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, Circle circle)
Return: void
Modifiers: public
Summary: Inserts a line at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: circle (Circle)
Parameter Summary: The circle value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, Ellipse ellipse)
Return: void
Modifiers: public
Summary: Inserts an ellipse at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: ellipse (Ellipse)
Parameter Summary: The ellipse value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Insert(int index, IEnumerable<Point3d> polyline)
Return: void
Modifiers: public
Summary: Inserts a polyline at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: polyline (IEnumerable<Point3d>)
Parameter Summary: The polyline enumerable from which to construct a copy curve.
This argument can be null, an array, a list or any enumerable set of     .

Method: Rhino.Collections.CurveList.Insert(int index, Line line)
Return: void
Modifiers: public
Summary: Inserts a line at a given index of this list.
Parameter: index (int)
Parameter Summary: A 0-based position in the list.
Parameter: line (Line)
Parameter Summary: The line value from which to construct the new curve.

Method: Rhino.Collections.CurveList.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transform all the curves in this list. If at least a single transform failed this function returns false.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to all curves.

Class: Rhino.Collections.Point3dList
Summary: Represents a list of <b>Point3d</b> .

Constructor: Rhino.Collections.Point3dList.Point3dList()
Summary: Initializes a new empty list with default capacity.

Constructor: Rhino.Collections.Point3dList.Point3dList(IEnumerable<Point3d> collection)
Summary: Initializes a new point list by copying the values from another set.

Constructor: Rhino.Collections.Point3dList.Point3dList(int initialCapacity)
Summary: Initializes a new point list with a preallocated initial capacity.

Constructor: Rhino.Collections.Point3dList.Point3dList(Point3d[] initialPoints)
Summary: Constructs a new point list from values in a point array.

Property: Rhino.Collections.Point3dList.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Even though this is a property, it is not a "fast" calculation. Every point is evaluated in order to get the bounding box of the list.
Accessors: get

Property: Rhino.Collections.Point3dList.X
Return: XAccess
Modifiers: public
Summary: Returns an indexer with all X coordinates in this list.
Accessors: get

Property: Rhino.Collections.Point3dList.Y
Return: YAccess
Modifiers: public
Summary: Returns an indexer with all Y coordinates in this list.
Accessors: get

Property: Rhino.Collections.Point3dList.Z
Return: ZAccess
Modifiers: public
Summary: Returns an indexer with all Z coordinates in this list.
Accessors: get

Method: Rhino.Collections.Point3dList.ClosestIndexInList(IList<Point3d> list, Point3d testPoint)
Return: int
Modifiers: public, static
Summary: Finds the index of the point in a list of points that is closest to a test point.
Parameter: list (IList<Point3d>)
Parameter Summary: A list of points.
Parameter: testPoint (Point3d)
Parameter Summary: Point to compare against.

Method: Rhino.Collections.Point3dList.ClosestPointInList(IList<Point3d> list, Point3d testPoint)
Return: Point3d
Modifiers: public, static
Summary: Finds the point in a list of points that is closest to a test point.
Parameter: list (IList<Point3d>)
Parameter Summary: A list of points.
Parameter: testPoint (Point3d)
Parameter Summary: Point to compare against.

Method: Rhino.Collections.Point3dList.Add(double x, double y, double z)
Return: void
Modifiers: public
Summary: Adds a Point3d to the end of the list with given x,y,z coordinates.
Parameter: x (double)
Parameter Summary: The X coordinate.
Parameter: y (double)
Parameter Summary: The Y coordinate.
Parameter: z (double)
Parameter Summary: The Z coordinate.

Method: Rhino.Collections.Point3dList.ClosestIndex(Point3d testPoint)
Return: int
Modifiers: public
Summary: Finds the index of the point that is closest to a test point in this list.
Parameter: testPoint (Point3d)
Parameter Summary: point to compare against.

Method: Rhino.Collections.Point3dList.Duplicate()
Return: Point3dList
Modifiers: public, new
Summary: Returns a deep copy of this point list instance.

Method: Rhino.Collections.Point3dList.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Overrides the default object equality to compare lists by value.

Method: Rhino.Collections.Point3dList.Equals(Point3dList other)
Return: bool
Modifiers: public
Summary: Determines if the point lists are exactly equal.

Method: Rhino.Collections.Point3dList.GetHashCode()
Return: int
Modifiers: public, override
Summary: Creates a hash code for this object.

Method: Rhino.Collections.Point3dList.SetAllX(double xValue)
Return: void
Modifiers: public
Summary: Set all the X values for the points to a single value

Method: Rhino.Collections.Point3dList.SetAllY(double yValue)
Return: void
Modifiers: public
Summary: Set all the Y values for the points to a single value

Method: Rhino.Collections.Point3dList.SetAllZ(double zValue)
Return: void
Modifiers: public
Summary: Set all the Z values for the points to a single value

Method: Rhino.Collections.Point3dList.Transform(Transform xform)
Return: void
Modifiers: public
Summary: Applies a transform to all the points in the list.
Parameter: xform (Transform)
Parameter Summary: Transform to apply.

Class: Rhino.Collections.Point3dList.XAccess
Summary: Utility class for easy-access of x-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.XAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the x-coordinate of the specified point.

Class: Rhino.Collections.Point3dList.YAccess
Summary: Utility class for easy-access of x-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.YAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the y-coordinate of the specified point.

Class: Rhino.Collections.Point3dList.ZAccess
Summary: Utility class for easy-access of z-components of points inside an ON_3dPointList.

Property: Rhino.Collections.Point3dList.ZAccess.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the z-coordinate of the specified point.

Class: Rhino.Collections.RhinoList
Summary: Provides helper methods to work with <b>RhinoList<T></b> and other collections.

Constructor: Rhino.Collections.RhinoList.RhinoList()
Summary: Initializes a new instance of the RhinoList class

Method: Rhino.Collections.RhinoList.Point2dKNeighbors(IEnumerable<Point2d> hayPoints, IEnumerable<Point2d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point2d>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point2d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point2fKNeighbors(IEnumerable<Point2f> hayPoints, IEnumerable<Point2f> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 2D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point2f>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point2f>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point3dKNeighbors(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list". See RTree KNeighbors for alternatives.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.Point3fKNeighbors(IEnumerable<Point3f> hayPoints, IEnumerable<Point3f> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amour of points in a list of single-precision 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a "short list".
Parameter: hayPoints (IEnumerable<Point3f>)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3f>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Collections.RhinoList.PointCloudKNeighbors(PointCloud pointcloud, IEnumerable<Point3d> needlePoints, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point. This method searches needlePoints by computing all distances from each point cloud point and keeping a short list.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePoints (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Class: Rhino.Collections.RhinoList<T>
Summary: Represents a list of generic data. This class is similar to System.Collections.Generic.List(T) but exposes a few more methods.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>()
Summary: Initializes a new, empty list.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(IEnumerable<T> collection)
Summary: Initializes this list as a shallow duplicate of another list, array or any other enumerable set of T.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(int amount, T defaultValue)
Summary: Initializes a new list with a specified amount of values.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(int initialCapacity)
Summary: Initializes an empty list with a certain capacity.

Constructor: Rhino.Collections.RhinoList<T>.RhinoList<T>(RhinoList<T> list)
Summary: Initializes an new list by shallow duplicating another list.

Property: Rhino.Collections.RhinoList<T>.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of elements the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.Count
Return: int
Modifiers: public
Summary: Gets the number of elements actually contained in the List.
Accessors: get

Property: Rhino.Collections.RhinoList<T>.First
Return: T
Modifiers: public
Summary: Gets or sets the first item in the list. This is synonymous to calling List[0].
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.Last
Return: T
Modifiers: public
Summary: Gets or sets the last item in the list. This is synonymous to calling List[Count-1].
Accessors: get set

Property: Rhino.Collections.RhinoList<T>.NullCount
Return: int
Modifiers: public
Summary: Gets the number of None references (Nothing in Visual Basic) in this list. If T is a ValueType, this property always return zero.
Accessors: get

Property: Rhino.Collections.RhinoList<T>.this[int index]
Return: T
Modifiers: public
Summary: Gets or sets the element at the specified index.

Method: Rhino.Collections.RhinoList<T>.Add(T item)
Return: void
Modifiers: public
Summary: Adds an object to the end of the List.
Parameter: item (T)
Parameter Summary: Item to append.

Method: Rhino.Collections.RhinoList<T>.AddRange(IEnumerable<T> collection)
Return: void
Modifiers: public
Summary: Adds the elements of the specified collection to the end of the List.
Parameter: collection (IEnumerable<T>)
Parameter Summary: The collection whose elements should be added to the end of the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic), if type T is a reference type.

Method: Rhino.Collections.RhinoList<T>.AddRange(System.Collections.IEnumerable collection)
Return: void
Modifiers: public
Summary: Adds the elements of the specified collection to the end of the List.
Parameter: collection (System.Collections.IEnumerable)
Parameter Summary: The collection whose elements should be added to the end of the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic). Objects in collection which cannot be represented as T will throw exceptions.

Method: Rhino.Collections.RhinoList<T>.AsReadOnly()
Return: ReadOnlyCollection<T>
Modifiers: public
Summary: Constructs a read-only wrapper of this class.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(int index, int count, T item, IComparer<T> comparer)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the specified comparer and returns the zero-based index of the element.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to search.
Parameter: count (int)
Parameter Summary: The length of the range to search.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements. Or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T)::Default.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(T item, IComparer<T> comparer)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the specified comparer and returns the zero-based index of the element.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements. Or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T)::Default.

Method: Rhino.Collections.RhinoList<T>.BinarySearch(T item)
Return: int
Modifiers: public
Summary: Searches the entire sorted List for an element using the default comparer and returns the zero-based index of the element.
Parameter: item (T)
Parameter Summary: The object to locate. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.Clear()
Return: void
Modifiers: public
Summary: Removes all elements from the List.

Method: Rhino.Collections.RhinoList<T>.Contains(T item)
Return: bool
Modifiers: public
Summary: Determines whether an element is in the List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.ConvertAll(Converter<T, TOutput> converter)
Return: RhinoList<TOutput>
Modifiers: public
Summary: Aggregates all results of a conversion function over this table into a new list.
Parameter: converter (Converter<T, TOutput>)
Parameter Summary: A conversion function that can transform from T to TOutput.

Method: Rhino.Collections.RhinoList<T>.CopyTo(int index, T[] array, int arrayIndex, int count)
Return: void
Modifiers: public
Summary: Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the target array.
Parameter: index (int)
Parameter Summary: The zero-based index in the source List at which copying begins.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.
Parameter: count (int)
Parameter Summary: The number of elements to copy.

Method: Rhino.Collections.RhinoList<T>.CopyTo(T[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the entire List to a compatible one-dimensional array, starting at the specified index of the target array.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.

Method: Rhino.Collections.RhinoList<T>.CopyTo(T[] array)
Return: void
Modifiers: public
Summary: Copies the entire List to a compatible one-dimensional array, starting at the beginning of the target array.
Parameter: array (T[])
Parameter Summary: The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.

Method: Rhino.Collections.RhinoList<T>.Duplicate()
Return: RhinoList<T>
Modifiers: public
Summary: Returns a shallow copy of this instance. If the generic type is comprised of only value types (struct, enum, ptr), then the result will be a deep copy.

Method: Rhino.Collections.RhinoList<T>.Exists(Predicate<T> match)
Return: bool
Modifiers: public
Summary: Determines whether the List contains elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to search for.

Method: Rhino.Collections.RhinoList<T>.Find(Predicate<T> match)
Return: T
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindAll(Predicate<T> match)
Return: RhinoList<T>
Modifiers: public
Summary: Retrieves all the elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(int startIndex, int count, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the List that extends from the specified index to the last element.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(int startIndex, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindIndex(Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLast(Predicate<T> match)
Return: T
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(int startIndex, int count, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(int startIndex, Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: startIndex (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.FindLastIndex(Predicate<T> match)
Return: int
Modifiers: public
Summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire List.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the element to search for.

Method: Rhino.Collections.RhinoList<T>.ForEach(Action<T> action)
Return: void
Modifiers: public
Summary: Performs the specified action on each element of the List.
Parameter: action (Action<T>)
Parameter Summary: The Action(T) delegate to perform on each element of the List.

Method: Rhino.Collections.RhinoList<T>.GetEnumerator()
Return: IEnumerator<T>
Modifiers: public
Summary: Constructs an enumerator that is capable of iterating over all items in this list.

Method: Rhino.Collections.RhinoList<T>.GetRange(int index, int count)
Return: RhinoList<T>
Modifiers: public
Summary: Constructs a shallow copy of a range of elements in the source List.
Parameter: index (int)
Parameter Summary: The zero-based List index at which the range starts.
Parameter: count (int)
Parameter Summary: The number of elements in the range.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item, int index, int count)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List that starts at the specified index and contains the specified number of elements.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item, int index)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the List that extends from the specified index to the last element.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the search.

Method: Rhino.Collections.RhinoList<T>.IndexOf(T item)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.Insert(int index, T item)
Return: void
Modifiers: public
Summary: Inserts an element into the List at the specified index.
Parameter: index (int)
Parameter Summary: The zero-based index at which item should be inserted.
Parameter: item (T)
Parameter Summary: The object to insert. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.InsertRange(int index, IEnumerable<T> collection)
Return: void
Modifiers: public
Summary: Inserts the elements of a collection into the List at the specified index.
Parameter: index (int)
Parameter Summary: The zero-based index at which the new elements should be inserted.
Parameter: collection (IEnumerable<T>)
Parameter Summary: The collection whose elements should be inserted into the List. The collection itself cannot be a None reference (Nothing in Visual Basic), but it can contain elements that are a None reference (Nothing in Visual Basic), if type T is a reference type.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item, int index, int count)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List that contains the specified number of elements and ends at the specified index.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the backward search.
Parameter: count (int)
Parameter Summary: The number of elements in the section to search.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item, int index)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the List that extends from the first element to the specified index.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the backward search.

Method: Rhino.Collections.RhinoList<T>.LastIndexOf(T item)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire List.
Parameter: item (T)
Parameter Summary: The object to locate in the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.RemapIndex(int index)
Return: int
Modifiers: public
Summary: Remap an index in the infinite range onto the List index range.
Parameter: index (int)
Parameter Summary: Index to remap.

Method: Rhino.Collections.RhinoList<T>.Remove(T item)
Return: bool
Modifiers: public
Summary: Removes the first occurrence of a specific object from the List.
Parameter: item (T)
Parameter Summary: The object to remove from the List. The value can be a None reference (Nothing in Visual Basic) for reference types.

Method: Rhino.Collections.RhinoList<T>.RemoveAll(Predicate<T> match)
Return: int
Modifiers: public
Summary: Removes the all the elements that match the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions of the elements to remove.

Method: Rhino.Collections.RhinoList<T>.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes the element at the specified index of the List.
Parameter: index (int)
Parameter Summary: The zero-based index of the element to remove.

Method: Rhino.Collections.RhinoList<T>.RemoveNulls()
Return: int
Modifiers: public
Summary: Removes all elements from the List that are None references (Nothing in Visual Basic). This function will not do anything if T is not a Reference type.

Method: Rhino.Collections.RhinoList<T>.RemoveRange(int index, int count)
Return: void
Modifiers: public
Summary: Removes a range of elements from the List.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range of elements to remove.
Parameter: count (int)
Parameter Summary: The number of elements to remove.

Method: Rhino.Collections.RhinoList<T>.Reverse()
Return: void
Modifiers: public
Summary: Reverses the order of the elements in the entire List.

Method: Rhino.Collections.RhinoList<T>.Reverse(int index, int count)
Return: void
Modifiers: public
Summary: Reverses the order of the elements in the specified range.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to reverse.
Parameter: count (int)
Parameter Summary: The number of elements in the range to reverse.

Method: Rhino.Collections.RhinoList<T>.Sort()
Return: void
Modifiers: public
Summary: Sorts the elements in the entire List using the default comparer.

Method: Rhino.Collections.RhinoList<T>.Sort(Comparison<T> comparison)
Return: void
Modifiers: public
Summary: Sorts the elements in the entire list using the specified comparer.
Parameter: comparison (Comparison<T>)
Parameter Summary: The System.Comparison(T) to use when comparing elements.

Method: Rhino.Collections.RhinoList<T>.Sort(double keys)
Return: void
Modifiers: public
Summary: Sort this list based on a list of numeric keys of equal length. The keys array will not be altered.
Parameter: keys (double)
Parameter Summary: Numeric keys to sort with.

Method: Rhino.Collections.RhinoList<T>.Sort(IComparer<T> comparer)
Return: void
Modifiers: public
Summary: Sorts the elements in the entire list using the specified System.Comparison(T)
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements, or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.

Method: Rhino.Collections.RhinoList<T>.Sort(int index, int count, IComparer<T> comparer)
Return: void
Modifiers: public
Summary: Sorts the elements in a range of elements in list using the specified comparer.
Parameter: index (int)
Parameter Summary: The zero-based starting index of the range to sort.
Parameter: count (int)
Parameter Summary: The length of the range to sort.
Parameter: comparer (IComparer<T>)
Parameter Summary: The IComparer(T) implementation to use when comparing elements, or a None reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.

Method: Rhino.Collections.RhinoList<T>.Sort(int keys)
Return: void
Modifiers: public
Summary: Sort this list based on a list of numeric keys of equal length. The keys array will not be altered.
Parameter: keys (int)
Parameter Summary: Numeric keys to sort with.

Method: Rhino.Collections.RhinoList<T>.ToArray()
Return: T[]
Modifiers: public
Summary: Constructs an array that contains all items in this list.

Method: Rhino.Collections.RhinoList<T>.TrimExcess()
Return: void
Modifiers: public
Summary: Sets the capacity to the actual number of elements in the List, if that number is less than a threshold value.

Method: Rhino.Collections.RhinoList<T>.TrueForAll(Predicate<T> match)
Return: bool
Modifiers: public
Summary: Determines whether every element in the List matches the conditions defined by the specified predicate.
Parameter: match (Predicate<T>)
Parameter Summary: The Predicate(T) delegate that defines the conditions to check against the elements.

Class: Rhino.Collections.TransformObjectList
Summary: A collection of Rhino object, grip objects, and the Rhino objects that owns the grips. Used by the TransformCommand and GetTransform classes.

Constructor: Rhino.Collections.TransformObjectList.TransformObjectList()

Property: Rhino.Collections.TransformObjectList.Count
Return: int
Modifiers: public
Summary: Number of elements in this list
Accessors: get

Property: Rhino.Collections.TransformObjectList.DisplayFeedbackEnabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Collections.TransformObjectList.GripCount
Return: int
Modifiers: public
Summary: Number of elements in grip list
Accessors: get

Property: Rhino.Collections.TransformObjectList.GripOwnerCount
Return: int
Modifiers: public
Summary: Number of elements in grip owner list
Accessors: get

Method: Rhino.Collections.TransformObjectList.Add(DocObjects.ObjRef objref)
Return: void
Modifiers: public
Summary: Add an ObjRef to this list. Use this to add polyedges so the references are properly counted

Method: Rhino.Collections.TransformObjectList.Add(DocObjects.RhinoObject rhinoObject)
Return: void
Modifiers: public
Summary: Add a RhinoObject to this list

Method: Rhino.Collections.TransformObjectList.AddObjects(GetObject go, bool allowGrips)
Return: int
Modifiers: public
Summary: Add objects to list with a GetObject
Parameter: go (GetObject)
Parameter Summary: Setup the GetObject, i.e. prompt, geometry filter, allow pre/post select before passing it as an argument.
Parameter: allowGrips (bool)
Parameter Summary: Specifically allow grips to be selected.  if true, grips must also be included in geometry filter of the GetObject in order to be selected.

Method: Rhino.Collections.TransformObjectList.Clear()
Return: void
Modifiers: public
Summary: Remove all elements from this list

Method: Rhino.Collections.TransformObjectList.Dispose()
Return: void
Modifiers: public

Method: Rhino.Collections.TransformObjectList.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Collections.TransformObjectList.GetBoundingBox(bool regularObjects, bool grips)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of all of the objects that this list contains.
Parameter: regularObjects (bool)
Parameter Summary: True if any object except grips should be included; otherwise false.
Parameter: grips (bool)
Parameter Summary: True if grips should be included; otherwise false.

Method: Rhino.Collections.TransformObjectList.GripArray()
Return: GripObject[]
Modifiers: public
Summary: Gets access to the internal GripObject array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.GripOwnerArray()
Return: RhinoObject[]
Modifiers: public
Summary: Gets access to the internal GripOwner array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.ObjectArray()
Return: RhinoObject[]
Modifiers: public
Summary: Gets access to the internal RhinoObject array of the TransformObjectList object.

Method: Rhino.Collections.TransformObjectList.UpdateDisplayFeedbackTransform(Transform xform)
Return: bool
Modifiers: public

# Namespace: Rhino.Commands

Class: Rhino.Commands.Command
Summary: Defines a base class for all commands. This class is abstract.

Constructor: Rhino.Commands.Command.Command()
Summary: Default protected constructor. It only allows instantiation through sub-classing.

Property: Rhino.Commands.Command.LastCommandId
Return: Guid
Modifiers: public, static
Summary: Gets the ID of the last commands.
Accessors: get

Property: Rhino.Commands.Command.LastCommandResult
Return: Result
Modifiers: public, static
Summary: Gets the result code of the last command.
Accessors: get

Property: Rhino.Commands.Command.CommandContextHelpUrl
Return: string
Modifiers: protected, virtual
Summary: Gets the URL of the command contextual help. This is usually a location of a local CHM file.
The default implementation return an empty string. | Accessors: get

Property: Rhino.Commands.Command.EnglishName
Return: string
Modifiers: public, abstract
Summary: Gets the name of the command. This method is abstract.
Accessors: get

Property: Rhino.Commands.Command.Id
Return: Guid
Modifiers: public, virtual
Summary: Gets the  unique ID of this command. It is best to use a Guid attribute for each custom derived command class since this will keep the id consistent between sessions of Rhino  <b>System.Runtime.InteropServices.GuidAttribute</b>
Accessors: get

Property: Rhino.Commands.Command.LocalName
Return: string
Modifiers: public, virtual
Summary: Gets the local name of the command.
Accessors: get

Property: Rhino.Commands.Command.PlugIn
Return: PlugIn
Modifiers: public
Summary: Gets the plug-in where this commands is placed.
Accessors: get set

Property: Rhino.Commands.Command.Settings
Return: PersistentSettings
Modifiers: public
Summary: Gets the settings of the command.
Accessors: get

Method: Rhino.Commands.Command.DisplayHelp(System.Guid commandId)
Return: void
Modifiers: public, static
Summary: Displays help for a command.
Parameter: commandId (System.Guid)
Parameter Summary: A command ID.

Method: Rhino.Commands.Command.GetCommandNames(bool english, bool loaded)
Return: string
Modifiers: public, static
Summary: Gets list of command names in Rhino. This list does not include Test, Alpha, or System commands.
Parameter: english (bool)
Parameter Summary: if true, retrieve the English name for every command. if false, retrieve the local name for every command.
Parameter: loaded (bool)
Parameter Summary: if true, only get names of currently loaded commands. if false, get names of all registered (may not be currently loaded) commands.

Method: Rhino.Commands.Command.GetCommandStack()
Return: System.Guid[]
Modifiers: public, static
Summary: Determines if Rhino is currently running a command. Because Rhino allow for transparent commands (commands that can be run from inside of other commands), this method returns the total ids of active commands.

Method: Rhino.Commands.Command.GetMostRecentCommands()
Return: MostRecentCommandDescription[]
Modifiers: public, static
Summary: Gets an array of most recent command descriptions.

Method: Rhino.Commands.Command.InCommand()
Return: bool
Modifiers: public, static
Summary: Determines if Rhino is currently running a command.

Method: Rhino.Commands.Command.InScriptRunnerCommand()
Return: bool
Modifiers: public, static
Summary: This is a low level tool to determine if Rhino is currently running a script running command like "ReadCommandFile" or the RhinoScript plug-in's "RunScript".

Method: Rhino.Commands.Command.IsCommand(string name)
Return: bool
Modifiers: public, static
Summary: Determines is a string is a command.
Parameter: name (string)
Parameter Summary: A string.

Method: Rhino.Commands.Command.IsValidCommandName(string name)
Return: bool
Modifiers: public, static
Summary: Determines if a string is a valid command name.
Parameter: name (string)
Parameter Summary: A string.

Method: Rhino.Commands.Command.LookupCommandId(string name, bool searchForEnglishName)
Return: System.Guid
Modifiers: public, static
Summary: Returns the ID of a command.
Parameter: name (string)
Parameter Summary: The name of the command.
Parameter: searchForEnglishName (bool)
Parameter Summary: True if the name is to searched in English. This ensures that a '_' is prepended to the name.

Method: Rhino.Commands.Command.LookupCommandName(System.Guid commandId, bool englishName)
Return: string
Modifiers: public, static
Summary: Returns the command name given a command ID.
Parameter: commandId (System.Guid)
Parameter Summary: A command ID.
Parameter: englishName (bool)
Parameter Summary: True if the requested command is in English.

Method: Rhino.Commands.Command.RunProxyCommand(RunCommandDelegate commandCallback, RhinoDoc doc, object data)
Return: void
Modifiers: public, static
Summary: Execute some code as if it were running in a command
Parameter: commandCallback (RunCommandDelegate)
Parameter Summary: 
Parameter: doc (RhinoDoc)
Parameter Summary: 
Parameter: data (object)
Parameter Summary: optional extra data to pass to callback

Method: Rhino.Commands.Command.OnHelp()
Return: void
Modifiers: protected, virtual
Summary: Is called when the user needs assistance with this command.

Method: Rhino.Commands.Command.ReplayHistory(Rhino.DocObjects.ReplayHistoryData replayData)
Return: bool
Modifiers: protected, virtual
Summary: Repeats an operation of a command.
In order to make this function work, you will likely need to grab the Result property that gives the      list of input objects. Then, you will be able to replace these inputs by using one of the UpdateToX() methods      of the ReplayHistoryResult.
You should NOT use any document AddX() or ReplaceX() functions, as they will break history. | Parameter: replayData (Rhino.DocObjects.ReplayHistoryData) | Parameter Summary: The replay history information.

Method: Rhino.Commands.Command.RunCommand(RhinoDoc doc, RunMode mode)
Return: Result
Modifiers: protected, abstract
Summary: Executes the command.
Parameter: doc (RhinoDoc)
Parameter Summary: The current document.
Parameter: mode (RunMode)
Parameter Summary: The command running mode.

Class: Rhino.Commands.CommandEventArgs

Property: Rhino.Commands.CommandEventArgs.CommandEnglishName
Return: string
Modifiers: public
Summary: Gets the English name of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandHelpURL
Return: string
Modifiers: public
Summary: Gets the help url of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandId
Return: Guid
Modifiers: public
Summary: Gets the ID of the command that raised this event.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandLocalName
Return: string
Modifiers: public
Summary: Gets the name of the command that raised this event in the local language.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandPluginName
Return: string
Modifiers: public
Summary: Gets the name of the plug-in that this command belongs to.  If the command is internal to Rhino, then this property is an empty string.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.CommandResult
Return: Result
Modifiers: public
Summary: Gets the result of the command that raised this event. This value is only meaningful during EndCommand events.
Accessors: get

Property: Rhino.Commands.CommandEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Commands.CommandEventArgs.DocumentRuntimeSerialNumber
Return: uint
Modifiers: public
Accessors: get set

Class: Rhino.Commands.CommandStyleAttribute
Summary: Decorates <b>Command</b> to provide styles.

Constructor: Rhino.Commands.CommandStyleAttribute.CommandStyleAttribute(Style styles)
Summary: Initializes a new command style attribute class.

Property: Rhino.Commands.CommandStyleAttribute.Styles
Return: Style
Modifiers: public
Summary: Gets the associated style.
Accessors: get

Class: Rhino.Commands.CustomUndoEventArgs
Summary: Argument package that is passed to a custom undo delegate

Property: Rhino.Commands.CustomUndoEventArgs.ActionDescription
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.CommandId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.CreatedByRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.Tag
Return: object
Modifiers: public
Accessors: get

Property: Rhino.Commands.CustomUndoEventArgs.UndoSerialNumber
Return: uint
Modifiers: public
Accessors: get

Class: Rhino.Commands.MostRecentCommandDescription
Summary: Stores the macro and display string of the most recent command.

Constructor: Rhino.Commands.MostRecentCommandDescription.MostRecentCommandDescription()
Summary: Initializes a new instance of the MostRecentCommandDescription class

Property: Rhino.Commands.MostRecentCommandDescription.DisplayString
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Commands.MostRecentCommandDescription.Macro
Return: string
Modifiers: public
Accessors: get set

Class: Rhino.Commands.SelCommand
Summary: For adding nestable whole object and subobject selection commands, derive your command from SelCommand and override the abstract SelFilter and virtual SelSubObjectFilter functions.

Constructor: Rhino.Commands.SelCommand.SelCommand()
Summary: Initializes a new instance of the SelCommand class

Property: Rhino.Commands.SelCommand.BeQuiet
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Commands.SelCommand.TestGrips
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Commands.SelCommand.TestLights
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Commands.SelCommand.RunCommand(RhinoDoc doc, RunMode mode)
Return: Result
Modifiers: protected, override

Method: Rhino.Commands.SelCommand.SelFilter(Rhino.DocObjects.RhinoObject rhObj)
Return: bool
Modifiers: protected, abstract
Summary: Override this abstract function and return True if object should be selected.
Parameter: rhObj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to check regarding selection status.

Method: Rhino.Commands.SelCommand.SelSubObjectFilter(Rhino.DocObjects.RhinoObject rhObj, List<ComponentIndex> indicesToSelect)
Return: bool
Modifiers: protected, virtual
Summary: To select subobjects, override this virtual function, add component indices of the subobjects that should get selected to indicesToSelect list and return true. This is called only if the SelFilter returns False and the whole object does not get selected.
Parameter: rhObj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to check regarding selection status.
Parameter: indicesToSelect (List<Rhino.Geometry.ComponentIndex>)
Parameter Summary: The component indices of the subobjects to select.

Class: Rhino.Commands.TransformCommand

Constructor: Rhino.Commands.TransformCommand.TransformCommand()
Summary: Initializes a new instance of the TransformCommand class

Method: Rhino.Commands.TransformCommand.DuplicateObjects(Rhino.Collections.TransformObjectList list)
Return: void
Modifiers: protected

Method: Rhino.Commands.TransformCommand.ResetGrips(Rhino.Collections.TransformObjectList list)
Return: void
Modifiers: protected
Summary: Sets dynamic grip locations back to starting grip locations. This makes things like the Copy command work when grips are "copied".
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of object to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.SelectObjects(string prompt, DocObjects.ObjectType filter, Rhino.Collections.TransformObjectList list)
Return: Result
Modifiers: protected
Summary: Selects objects within the command.
Parameter: prompt (string)
Parameter Summary: The selection prompt.
Parameter: filter (DocObjects.ObjectType)
Parameter Summary: Geometry filter to limit selection. Use function above if you do not need specific types.
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of objects to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.SelectObjects(string prompt, Rhino.Collections.TransformObjectList list)
Return: Result
Modifiers: protected
Summary: Selects objects within the command.
Parameter: prompt (string)
Parameter Summary: The selection prompt.
Parameter: list (Rhino.Collections.TransformObjectList)
Parameter Summary: A list of objects to transform. This is a special list type.

Method: Rhino.Commands.TransformCommand.TransformObjects(Rhino.Collections.TransformObjectList list, Rhino.Geometry.Transform xform, bool copy, bool autoHistory)
Return: void
Modifiers: protected

Class: Rhino.Commands.UndoRedoEventArgs

Property: Rhino.Commands.UndoRedoEventArgs.CommandId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeforeBeginRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeforeEndRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsBeginUndo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndRecording
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndRedo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsEndUndo
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.IsPurgeRecord
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Commands.UndoRedoEventArgs.UndoSerialNumber
Return: uint
Modifiers: public
Accessors: get

# Namespace: Rhino.Display

Class: Rhino.Display.CalculateBoundingBoxEventArgs

Property: Rhino.Display.CalculateBoundingBoxEventArgs.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the current bounding box.
Accessors: get

Method: Rhino.Display.CalculateBoundingBoxEventArgs.IncludeBoundingBox(BoundingBox box)
Return: void
Modifiers: public
Summary: Unites a bounding box with the current display bounding box in order to ensure dynamic objects in "box" are drawn.
Parameter: box (BoundingBox)
Parameter Summary: The box to unite.

Class: Rhino.Display.ColorGradient

Constructor: Rhino.Display.ColorGradient.ColorGradient()
Summary: Initializes a new instance of the ColorGradient class

Property: Rhino.Display.ColorGradient.EndPoint
Return: Point3d
Modifiers: public
Summary: End point of gradient
Accessors: get set

Property: Rhino.Display.ColorGradient.GradientType
Return: GradientType
Modifiers: public
Summary: Gradient fill type associated with this hatch
Accessors: get set

Property: Rhino.Display.ColorGradient.Repeat
Return: double
Modifiers: public
Summary: Repeat factor for gradient. Factors greater than 1 define a reflected repeat factor while values less than -1 define a wrapped repeat factor.
Accessors: get set

Property: Rhino.Display.ColorGradient.StartPoint
Return: Point3d
Modifiers: public
Summary: Start point of gradient
Accessors: get set

Method: Rhino.Display.ColorGradient.Duplicate()
Return: ColorGradient
Modifiers: public
Summary: Create a duplicate of this color gradient.

Method: Rhino.Display.ColorGradient.GetColorStops()
Return: ColorStop[]
Modifiers: public
Summary: Get sorted list of colors / positions that a gradient is defined over

Method: Rhino.Display.ColorGradient.SetColorStops(IEnumerable<ColorStop> stops)
Return: void
Modifiers: public
Summary: Set color stops for the gradient

Class: Rhino.Display.CullObjectEventArgs

Property: Rhino.Display.CullObjectEventArgs.CullObject
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.CullObjectEventArgs.RhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.CullObjectEventArgs.RhinoObjectSerialNumber
Return: uint
Modifiers: public
Summary: Gets the rhino object runtime serial number.
Accessors: get

Class: Rhino.Display.CustomDisplay
Summary: Provides some basic (indeed, very basic) mechanisms for drawing custom geometry in viewports.

Constructor: Rhino.Display.CustomDisplay.CustomDisplay(bool enable)
Summary: Constructs a new CustomDisplay instance. Youmustcall Dispose() when you are done with this instance, otherwise the display methods will never be switched off.

Property: Rhino.Display.CustomDisplay.ClippingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the clipping box of this CustomDisplay.
Accessors: get

Property: Rhino.Display.CustomDisplay.Enabled
Return: bool
Modifiers: public
Summary: Gets or sets the Enabled state of this CustomDisplay instance. If you wish to terminate this CustomDisplay, place a call to Dispose() instead.
Accessors: get set

Property: Rhino.Display.CustomDisplay.IsDisposed
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this CustomDisplay instance has been disposed. Once a CustomDisplay has been disposed, you can no longer use it.
Accessors: get

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.
Parameter: color (Color)
Parameter Summary: Color of arc.
Parameter: thickness (int)
Parameter Summary: Thickness of arc.

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.
Parameter: color (Color)
Parameter Summary: Color of arc.

Method: Rhino.Display.CustomDisplay.AddArc(Arc arc)
Return: void
Modifiers: public
Summary: Adds a new, black arc to the display list.
Parameter: arc (Arc)
Parameter Summary: Arc to add.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored circle to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.
Parameter: color (Color)
Parameter Summary: Color of circle.
Parameter: thickness (int)
Parameter Summary: Thickness of circle.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored arc to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.
Parameter: color (Color)
Parameter Summary: Color of circle.

Method: Rhino.Display.CustomDisplay.AddCircle(Circle circle)
Return: void
Modifiers: public
Summary: Adds a new, black circle to the display list.
Parameter: circle (Circle)
Parameter Summary: Circle to add.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.
Parameter: color (Color)
Parameter Summary: Color of curve.
Parameter: thickness (int)
Parameter Summary: Thickness of curve.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.
Parameter: color (Color)
Parameter Summary: Color of curve.

Method: Rhino.Display.CustomDisplay.AddCurve(Curve curve)
Return: void
Modifiers: public
Summary: Adds a new, black curve to the display list. The curve will be duplicated so changes to the original will not affect the display.
Parameter: curve (Curve)
Parameter Summary: Curve to add.

Method: Rhino.Display.CustomDisplay.AddLine(Line line, Color color, int thickness)
Return: void
Modifiers: public
Summary: Adds a new, colored line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.
Parameter: color (Color)
Parameter Summary: Color of line.
Parameter: thickness (int)
Parameter Summary: Thickness of line.

Method: Rhino.Display.CustomDisplay.AddLine(Line line, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.
Parameter: color (Color)
Parameter Summary: Color of line.

Method: Rhino.Display.CustomDisplay.AddLine(Line line)
Return: void
Modifiers: public
Summary: Adds a new, black line to the display list.
Parameter: line (Line)
Parameter Summary: Line to add.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point, Color color, PointStyle style, int radius)
Return: void
Modifiers: public
Summary: Adds a new stylized point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.
Parameter: color (Color)
Parameter Summary: Color of point.
Parameter: style (PointStyle)
Parameter Summary: Display style of point.
Parameter: radius (int)
Parameter Summary: Radius of point widget.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point, Color color)
Return: void
Modifiers: public
Summary: Adds a new colored point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.
Parameter: color (Color)
Parameter Summary: Color of point.

Method: Rhino.Display.CustomDisplay.AddPoint(Point3d point)
Return: void
Modifiers: public
Summary: Adds a new, black point to the display list.
Parameter: point (Point3d)
Parameter Summary: Point to add.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points, Color color, PointStyle style, int radius)
Return: void
Modifiers: public
Summary: Adds a collection of stylized points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: color (Color)
Parameter Summary: Color of points.
Parameter: style (PointStyle)
Parameter Summary: Display style of points.
Parameter: radius (int)
Parameter Summary: Radius of point widgets.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points, Color color)
Return: void
Modifiers: public
Summary: Adds a collection of colored points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: color (Color)
Parameter Summary: Color of points.

Method: Rhino.Display.CustomDisplay.AddPoints(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Adds a collection of black points to the display list.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.

Method: Rhino.Display.CustomDisplay.AddPolygon(IEnumerable<Point3d> polygon, Color fillColor, Color edgeColor, bool drawFill, bool drawEdge)
Return: void
Modifiers: public
Summary: Adds a polygon to the drawing list. Polygons are not like Hatches, when you supply a concave polygon, the shading probably won't work.
Parameter: polygon (IEnumerable<Point3d>)
Parameter Summary: Points that define the corners of the polygon.
Parameter: fillColor (Color)
Parameter Summary: Fill color of polygon.
Parameter: edgeColor (Color)
Parameter Summary: Edge color of polygon.
Parameter: drawFill (bool)
Parameter Summary: If true, the polygon contents will be drawn.
Parameter: drawEdge (bool)
Parameter Summary: If true, the polygon edge will be drawn.

Method: Rhino.Display.CustomDisplay.AddText(string text, Plane plane, double size, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored 3D text object to the display list.
Parameter: text (string)
Parameter Summary: Text to add.
Parameter: plane (Plane)
Parameter Summary: Plane for text orientation.
Parameter: size (double)
Parameter Summary: Height (in units) of font.
Parameter: color (Color)
Parameter Summary: Color of text.

Method: Rhino.Display.CustomDisplay.AddText(string text, Plane plane, double size)
Return: void
Modifiers: public
Summary: Adds a new, black 3D text object to the display list.
Parameter: text (string)
Parameter Summary: Text to add.
Parameter: plane (Plane)
Parameter Summary: Plane for text orientation.
Parameter: size (double)
Parameter Summary: Height (in units) of font.

Method: Rhino.Display.CustomDisplay.AddText(Text3d text, Color color)
Return: void
Modifiers: public
Summary: Adds a new 3D text object to the display list.
Parameter: text (Text3d)
Parameter Summary: Text object to add.
Parameter: color (Color)
Parameter Summary: Color of text object.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span, Color color, bool drawAnchor)
Return: void
Modifiers: public
Summary: Adds a new, colored vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.
Parameter: color (Color)
Parameter Summary: Color of vector.
Parameter: drawAnchor (bool)
Parameter Summary: Include a point at the vector anchor.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span, Color color)
Return: void
Modifiers: public
Summary: Adds a new, colored vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.
Parameter: color (Color)
Parameter Summary: Color of vector.

Method: Rhino.Display.CustomDisplay.AddVector(Point3d anchor, Vector3d span)
Return: void
Modifiers: public
Summary: Adds a new, black vector to the display list.
Parameter: anchor (Point3d)
Parameter Summary: Anchor point of vector.
Parameter: span (Vector3d)
Parameter Summary: Direction and magnitude of vector.

Method: Rhino.Display.CustomDisplay.Clear()
Return: void
Modifiers: public
Summary: Clear the drawing lists.

Method: Rhino.Display.CustomDisplay.Dispose()
Return: void
Modifiers: public
Summary: Dispose this CustomDisplay instance. You must call this function in order to properly shut down the CustomDisplay.

Class: Rhino.Display.DisplayBitmap
Summary: A bitmap resource that can be used by the display pipeline (currently only in OpenGL display).  Reuse DisplayBitmaps for drawing if possible; it is much more expensive to construct new DisplayBitmaps than it is to reuse existing DisplayBitmaps.

Constructor: Rhino.Display.DisplayBitmap.DisplayBitmap(Bitmap bitmap)
Summary: Constructs a DisplayBitmap from an existing bitmap.

Constructor: Rhino.Display.DisplayBitmap.DisplayBitmap(string path, Bitmap bitmap)
Summary: Creates a DisplayBitmap either from a path, or a bitmap. If the path is null, a random tag name will be used. If the bitmap is null, the bitmap will be loaded from the path. If both are null, the object is invalid. if both are valid objects, the bitmap will be used and it will be added to Rhino's bitmap cache with the path supplied.  In other words, this is a way to add a bitmap from memory directly into Rhino's memory cache.

Property: Rhino.Display.DisplayBitmap.Size
Return: Size
Modifiers: public
Summary: Size of the underlying bitmap image
Accessors: get

Method: Rhino.Display.DisplayBitmap.Load(string path)
Return: DisplayBitmap
Modifiers: public, static
Summary: Load a DisplayBitmap from and image file on disk or from URL. If path starts with http:// or https:// then an attempt is made to load the bitmap from an online resource
Parameter: path (string)
Parameter Summary: A location from which to load the file.

Method: Rhino.Display.DisplayBitmap.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.DisplayBitmap.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Display.DisplayBitmap.GetBlendModes(out BlendMode source, out BlendMode destination)
Return: void
Modifiers: public
Summary: Gets the source and destination blend modes.
Parameter: source (BlendMode)
Parameter Summary: The source blend mode is assigned to this out parameter.
Parameter: destination (BlendMode)
Parameter Summary: The destination blend mode is assigned to this out parameter.

Method: Rhino.Display.DisplayBitmap.SetBlendFunction(BlendMode source, BlendMode destination)
Return: void
Modifiers: public
Summary: Sets blending function used to determine how this bitmap is blended with the current frame buffer color.  The default setting is SourceAlpha for source and OneMinusSourceAlpha for destination.  See OpenGL's glBlendFunc for details.
http://www.opengl.org/sdk/docs/man/xhtml/glBlendFunc.xml | Since: 5.0 | Parameter: source (BlendMode) | Parameter Summary: The source blend mode. | Parameter: destination (BlendMode) | Parameter Summary: The destination blend mode.

Method: Rhino.Display.DisplayBitmap.Update(System.Drawing.Bitmap bitmap)
Return: void
Modifiers: public
Summary: Update the image used for this DisplayBitmap

Class: Rhino.Display.DisplayBitmapDrawList

Constructor: Rhino.Display.DisplayBitmapDrawList.DisplayBitmapDrawList()

Property: Rhino.Display.DisplayBitmapDrawList.BoundingBox
Return: BoundingBox
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayBitmapDrawList.MaximumCachedSortLists
Return: int
Modifiers: public
Summary: Maximum number of cached sort order index lists stored on this class. Default is 10, but depending on the number of points in this list you may get better performance by setting this value to a certain percentage of the point count.
Accessors: get set

Property: Rhino.Display.DisplayBitmapDrawList.SortAngleTolerance
Return: double
Modifiers: public
Summary: Angle in radians used to determine if an index list is "parallel enough" to a viewports camera angle. Default is 0.0873 radians (5 degrees)
Accessors: get set

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points, IEnumerable<Color> colors)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points, System.Drawing.Color blendColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.SetPoints(IEnumerable<Point3d> points)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayBitmapDrawList.Sort(Geometry.Vector3d cameraDirection)
Return: int
Modifiers: public

Class: Rhino.Display.DisplayConduit

Constructor: Rhino.Display.DisplayConduit.DisplayConduit()

Property: Rhino.Display.DisplayConduit.Enabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayConduit.GeometryFilter
Return: ObjectType
Modifiers: public
Summary: The geometry filter will ensure that your conduit's per-object functions will only be called for objects that are of certain geometry type
Accessors: get set

Property: Rhino.Display.DisplayConduit.SpaceFilter
Return: ActiveSpace
Modifiers: public
Summary: If you want this conduit to only work in a specific space (model or page), then set this filter to that specific space. The default is None meaning no filter is applied
Accessors: get set

Method: Rhino.Display.DisplayConduit.CalculateBoundingBox(CalculateBoundingBoxEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Library developers should override this function to increase the bounding box of scene so it includes the geometry that you plan to draw in the "Draw" virtual functions.
The default implementation does nothing. | Parameter: e (CalculateBoundingBoxEventArgs) | Parameter Summary: The event argument contain the current bounding box state.

Method: Rhino.Display.DisplayConduit.CalculateBoundingBoxZoomExtents(CalculateBoundingBoxEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: If you want to participate in the Zoom Extents command with your display conduit, then you will need to override ZoomExtentsBoundingBox.  Typically you could just call your CalculateBoundingBox override, but you may also want to spend a little more time here and compute a tighter bounding box for your conduit geometry if that is needed.
The default implementation does nothing. | Parameter: e (CalculateBoundingBoxEventArgs) | Parameter Summary: The event argument contain the current bounding box state.

Method: Rhino.Display.DisplayConduit.DrawForeground(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called after all non-highlighted objects have been drawn and PostDrawObjects has been called. Depth writing and testing are turned OFF. If you want to draw with depth writing/testing, see PostDrawObjects.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.DrawOverlay(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: If Rhino is in a feedback mode, the draw overlay call allows for temporary geometry to be drawn on top of everything in the scene. This is similar to the dynamic draw routine that occurs with custom get point.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.GetSelectionFilter(out bool on, out bool checkSubObjects)
Return: void
Modifiers: public
Summary: The selection filter will make per-object conduit functions only be called for selected objects (when the filter is turned on)

Method: Rhino.Display.DisplayConduit.ObjectCulling(CullObjectEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: The default implementation does nothing.

Method: Rhino.Display.DisplayConduit.OnEnable(bool enable)
Return: void
Modifiers: protected, virtual
Summary: Called when the enabled state changes for this class instance

Method: Rhino.Display.DisplayConduit.PostDrawObjects(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called after all non-highlighted objects have been drawn. Depth writing and testing are still turned on. If you want to draw without depth writing/testing, see DrawForeground.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contains the current viewport and display state.

Method: Rhino.Display.DisplayConduit.PreDrawObject(DrawObjectEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called before every object in the scene is drawn.

Method: Rhino.Display.DisplayConduit.PreDrawObjects(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called before objects are been drawn. Depth writing and testing are on.
The default implementation does nothing. | Parameter: e (DrawEventArgs) | Parameter Summary: The event argument contain the current viewport and display state.

Method: Rhino.Display.DisplayConduit.SetObjectIdFilter(IEnumerable<Guid> ids)
Return: void
Modifiers: public
Summary: Set object Ids that this conduit's per-object functions will only be called for

Method: Rhino.Display.DisplayConduit.SetObjectIdFilter(System.Guid id)
Return: void
Modifiers: public
Summary: Set an object Id that this conduit's per-object functions will only be called for

Method: Rhino.Display.DisplayConduit.SetSelectionFilter(bool on, bool checkSubObjects)
Return: void
Modifiers: public
Summary: The selection filter will make per-object conduit functions only be called for selected objects (when the filter is turned on)

Class: Rhino.Display.DisplayEngine

Constructor: Rhino.Display.DisplayEngine.DisplayEngine()

Method: Rhino.Display.DisplayEngine.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Class: Rhino.Display.DisplayMaterial

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial()
Summary: Constructs a default material.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse, Color specular, Color ambient, Color emission, double shine, double transparency)
Summary: Constructs a material with custom properties.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse, double transparency)
Summary: Constructs a default material with a specific diffuse color and transparency.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Color diffuse)
Summary: Constructs a default material with a specific diffuse color.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(DisplayMaterial other)
Summary: Duplicate another material.

Constructor: Rhino.Display.DisplayMaterial.DisplayMaterial(Material material)

Property: Rhino.Display.DisplayMaterial.Ambient
Return: Color
Modifiers: public
Summary: Gets or sets the Ambient color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackAmbient
Return: Color
Modifiers: public
Summary: Gets or sets the Ambient color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackDiffuse
Return: Color
Modifiers: public
Summary: Gets or sets the Diffuse color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackEmission
Return: Color
Modifiers: public
Summary: Gets or sets the Emissive color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackShine
Return: double
Modifiers: public
Summary: Gets or sets the shine factor of the back side of the material (0.0 to 1.0)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackSpecular
Return: Color
Modifiers: public
Summary: Gets or sets the Specular color of the back side of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.BackTransparency
Return: double
Modifiers: public
Summary: Gets or sets the transparency of the back side material (0.0 = opaque to 1.0 = transparent)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Diffuse
Return: Color
Modifiers: public
Summary: Gets or sets the Diffuse color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Emission
Return: Color
Modifiers: public
Summary: Gets or sets the Emissive color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.IsTwoSided
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Shine
Return: double
Modifiers: public
Summary: Gets or sets the shine factor of the material (0.0 to 1.0)
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Specular
Return: Color
Modifiers: public
Summary: Gets or sets the Specular color of the Material. The alpha component of the color will be ignored.
Accessors: get set

Property: Rhino.Display.DisplayMaterial.Transparency
Return: double
Modifiers: public
Summary: Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
Accessors: get set

Method: Rhino.Display.DisplayMaterial.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayMaterial.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.DisplayMaterial.GetBitmapTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.GetBumpTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public
Summary: Gets the bump texture for this display material.

Method: Rhino.Display.DisplayMaterial.GetEnvironmentTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.GetTransparencyTexture(bool front)
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBitmapTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBitmapTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBumpTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetBumpTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetEnvironmentTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetEnvironmentTexture(string filename, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetTransparencyTexture(Rhino.DocObjects.Texture texture, bool front)
Return: bool
Modifiers: public

Method: Rhino.Display.DisplayMaterial.SetTransparencyTexture(string filename, bool front)
Return: bool
Modifiers: public

Class: Rhino.Display.DisplayModeChangedEventArgs

Property: Rhino.Display.DisplayModeChangedEventArgs.ChangedDisplayModeId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.OldDisplayModeId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.RhinoDoc
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeChangedEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Class: Rhino.Display.DisplayModeDescription
Summary: Description of a how Rhino will display in a viewport. These are the modes that are listed under "Advanced display" in the options dialog.

Property: Rhino.Display.DisplayModeDescription.AmbientOcclusionId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.ArtisticId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.GhostedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.MonochromeId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.PenId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RaytracedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RenderedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.RenderedShadowsId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.ShadedId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.TechId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.WireframeId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.XRayId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Display.DisplayModeDescription.AllowObjectAssignment
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.DisplayAttributes
Return: DisplayPipelineAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.EnglishName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.Id
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.InMenu
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.LocalName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayModeDescription.PipelineLocked
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.ShadedPipelineRequired
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.SupportsShadeCommand
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.SupportsShading
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayModeDescription.WireframePipelineRequired
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayModeDescription.AddDisplayMode(DisplayModeDescription displayMode)
Return: System.Guid
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.AddDisplayMode(string name)
Return: System.Guid
Modifiers: public, static
Summary: Adds a new display mode.
Parameter: name (string)
Parameter Summary: The name of the new display mode.

Method: Rhino.Display.DisplayModeDescription.CopyDisplayMode(System.Guid id, string name)
Return: System.Guid
Modifiers: public, static
Summary: Copies an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to copy.
Parameter: name (string)
Parameter Summary: The name of the new display mode.

Method: Rhino.Display.DisplayModeDescription.DeleteDiplayMode(System.Guid id)
Return: bool
Modifiers: public, static
Summary: Deletes an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to delete.

Method: Rhino.Display.DisplayModeDescription.DeleteDisplayMode(System.Guid id)
Return: bool
Modifiers: public, static
Summary: Deletes an existing display mode.
Parameter: id (System.Guid)
Parameter Summary: The id of the existing display mode to delete.

Method: Rhino.Display.DisplayModeDescription.ExportToFile(DisplayModeDescription displayMode, string filename)
Return: bool
Modifiers: public, static
Summary: Exports a DisplayModeDescription to a Windows-style .ini file.
Parameter: displayMode (DisplayModeDescription)
Parameter Summary: The DisplayModeDescription to export.
Parameter: filename (string)
Parameter Summary: The name of the file to create.

Method: Rhino.Display.DisplayModeDescription.FindByName(string englishName)
Return: DisplayModeDescription
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.GetDisplayMode(System.Guid id)
Return: DisplayModeDescription
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.GetDisplayModes()
Return: DisplayModeDescription[]
Modifiers: public, static
Summary: Gets all display mode descriptions that Rhino currently knows about.

Method: Rhino.Display.DisplayModeDescription.ImportFromFile(string filename)
Return: System.Guid
Modifiers: public, static
Summary: Imports a DisplayModeDescription from a Windows-style .ini file.
Parameter: filename (string)
Parameter Summary: The name of the file to import.

Method: Rhino.Display.DisplayModeDescription.UpdateDisplayMode(DisplayModeDescription displayMode)
Return: bool
Modifiers: public, static

Method: Rhino.Display.DisplayModeDescription.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayModeDescription.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.Display.DisplayPen
Summary: Pen used to define stroke applied to several DisplayPipeline draw functions

Constructor: Rhino.Display.DisplayPen.DisplayPen()
Summary: Initializes a new instance of the DisplayPen class

Property: Rhino.Display.DisplayPen.CapStyle
Return: LineCapStyle
Modifiers: public
Summary: How caps are drawn at the ends of open curves
Accessors: get set

Property: Rhino.Display.DisplayPen.Color
Return: Color
Modifiers: public
Summary: Color applied to stroke
Accessors: get set

Property: Rhino.Display.DisplayPen.HaloColor
Return: Color
Modifiers: public
Summary: Halos are blended colors drawn around a curve for purposes like selection
Accessors: get set

Property: Rhino.Display.DisplayPen.HaloThickness
Return: float
Modifiers: public
Summary: Halos are blended colors drawn around a curve for purposes like selection
Accessors: get set

Property: Rhino.Display.DisplayPen.JoinStyle
Return: LineJoinStyle
Modifiers: public
Summary: How corners of curves are joined
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternBySegment
Return: bool
Modifiers: public
Summary: Restart patterns at corners in a curve
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternLengthInWorldUnits
Return: bool
Modifiers: public
Summary: If true, lengths in pattern definition are interpreted to be in world units. If false, screen pixel distances are used.
Accessors: get set

Property: Rhino.Display.DisplayPen.PatternOffset
Return: float
Modifiers: public
Summary: Offset to apply to pattern. If RhinoMath.UnsetSingle, then pattern is centered to keep even dash lengths at ends
Accessors: get set

Property: Rhino.Display.DisplayPen.Thickness
Return: float
Modifiers: public
Summary: Thickness for stroke
Accessors: get set

Property: Rhino.Display.DisplayPen.ThicknessSpace
Return: CoordinateSystem
Modifiers: public
Summary: Coordinate system for the pen's thickness
Accessors: get set

Method: Rhino.Display.DisplayPen.FromLinetype(Linetype linetype, System.Drawing.Color color, double patternScale)
Return: DisplayPen
Modifiers: public, static
Summary: Create a display pen that matches a linetype definition
Parameter: linetype (Linetype)
Parameter Summary: 
Parameter: color (System.Drawing.Color)
Parameter Summary: 
Parameter: patternScale (double)
Parameter Summary: scale to be applied to linetype dash pattern. Typically this is 1

Method: Rhino.Display.DisplayPen.Duplicate()
Return: DisplayPen
Modifiers: public
Summary: Create a duplicate of this display pen.

Method: Rhino.Display.DisplayPen.PatternAsArray()
Return: float
Modifiers: public
Summary: Get the pattern for this pen as an array of dash,gap,dash,gap... values

Method: Rhino.Display.DisplayPen.SetPattern(IEnumerable<float> dashesAndGaps)
Return: void
Modifiers: public
Summary: Set pattern to apply for a stroke.
Parameter: dashesAndGaps (System.Collections.Generic.IEnumerable<float>)
Parameter Summary: Lengths of dashes and gaps for a pattern. Dash is always assumed the first item. There is a limit to 8 dashes and gaps total

Method: Rhino.Display.DisplayPen.SetTaper(float startThickness, float endThickness, Point2f taperPoint)
Return: void
Modifiers: public
Summary: Positions and thickness at those positions along a curve that define a taper.

Method: Rhino.Display.DisplayPen.TaperAsArray()
Return: Point2f[]
Modifiers: public
Summary: Collection of positions and thicknesses at those positions to define a taper Rhino currently only supports either no taper or a single taper. An array is used here in case Rhino supports multiple taper values in the future.

Class: Rhino.Display.DisplayPipeline
Summary: The display pipeline calls events during specific phases of drawing   During the drawing of a single frame the events are called in the following order.    [Begin Drawing of a Frame] <ul><li>CalculateBoundingBox</li><li>CalculateClippingPanes</li><li>SetupFrustum</li><li>SetupLighting</li><li>InitializeFrameBuffer</li><li>DrawBackground</li><li>If this is a layout and detail objects exist the channels are called in the same order for each detail object (drawn as a nested viewport)</li><li>PreDrawObjects</li><li>For Each Visible Non Highlighted Object<ul><li>SetupObjectDisplayAttributes</li><li>PreDrawObject</li><li>DrawObject</li><li>PostDrawObject</li></ul></li><li>PostDrawObjects - depth writing/testing on</li><li>DrawForeGround - depth writing/testing off</li><li>For Each Visible Highlighted Object<ul><li>SetupObjectDisplayAttributes</li><li>PreDrawObject</li><li>DrawObject</li><li>PostDrawObject</li></ul></li><li>PostProcessFrameBuffer (If a delegate exists that requires this)</li><li>DrawOverlay (if Rhino is in a feedback mode)</li></ul> [End of Drawing of a Frame]
NOTE: There may be multiple DrawObject calls for a single object. An example of when this could         happen would be with a shaded sphere. The shaded mesh is first drawn and these channels would         be processed; then at a later time the isocurves for the sphere would be drawn.

Property: Rhino.Display.DisplayPipeline.ActiveObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveObjectNestingLevel
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveObjectNestingStack
Return: RhinoObject[]
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ActiveTopLevelObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.DefaultCurveThickness
Return: int
Modifiers: public
Summary: Gets the curve thickness as defined by the current display mode. Note: this only applies to curve objects, Brep and Mesh wires may have different settings.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DepthMode
Return: DepthMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipeline.DisplayPipelineAttributes
Return: DisplayPipelineAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.DpiScale
Return: float
Modifiers: public
Summary: Scale factor used for high resolution displays. When a monitor that this pipeline is drawing to is at a DPI of 96, this value is one. On high DPI monitors, this value will commonly be greater than one.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingGrips
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a grip drawing operation.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingSurfaces
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a surface drawing operation.  Surface drawing means draw the shaded triangles of a mesh representing the surface (mesh, extrusion, or brep).  This is useful when inside of a draw event or display conduit to check and see if the geometry is about to be drawn as a shaded set of triangles representing the geometry. See DrawingWires to check and see if the wireframe representation of the geometry is going to be drawn.
Accessors: get

Property: Rhino.Display.DisplayPipeline.DrawingWires
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the pipeline is currently in a curve drawing operation. This is useful when inside of a draw event or display conduit to check and see if the geometry is about to be drawn is going to be drawing the wire representation of the geometry (mesh, extrusion, or brep).  See DrawingSurfaces to check and see if the shaded mesh representation of the geometry is going to be drawn.
Accessors: get

Property: Rhino.Display.DisplayPipeline.FrameBuffer
Return: Bitmap
Modifiers: public
Summary: Gets the contents of the frame buffer that this pipeline is drawing to.
Accessors: get

Property: Rhino.Display.DisplayPipeline.FrameSize
Return: Size
Modifiers: public
Summary: Gets the size of the frame buffer that this pipeline is drawing to.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsDynamicDisplay
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the viewport is in Dynamic Display state. Dynamic display is the state a viewport is in when it is rapidly redrawing because of an operation like panning or rotating. The pipeline will drop some level of detail while inside a dynamic display state to keep the frame rate as high as possible.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsInViewCapture
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently drawing for ViewCaptureToFile or ViewCaptureToClipboard
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsOpen
Return: bool
Modifiers: public
Summary: Is True of the pipeline is open, False otherwise.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsOpenGL
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this pipeline is drawing into an OpenGL context.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsPrinting
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently drawing for printing purposes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.IsStereoMode
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this pipeline is currently using an engine that is performing stereo style drawing. Stereo drawing is for providing an "enhanced 3-D" effect through stereo viewing devices.
Accessors: get

Property: Rhino.Display.DisplayPipeline.ModelTransform
Return: Transform
Modifiers: public
Summary: Gets or sets the current model transformation that is applied to vertices when drawing.
Accessors: get set

Property: Rhino.Display.DisplayPipeline.ModelTransformIsIdentity
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the Model Transform is an Identity transformation.
Accessors: get

Property: Rhino.Display.DisplayPipeline.NestLevel
Return: int
Modifiers: public
Summary: Gets the current nested viewport drawing level. This is used to know if you are currently inside the drawing of a nested viewport (detail object in Rhino).
Nest level = 0 Drawing is occurring in a standard Rhino viewport or on the page viewport.
Nest level = 1 Drawing is occurring inside a detail view object. | Since: 5.0 | Accessors: get

Property: Rhino.Display.DisplayPipeline.RenderPass
Return: int
Modifiers: public
Summary: Gets the current pass that the pipeline is in for drawing a frame. Typically drawing a frame requires a single pass through the DrawFrameBuffer function, but some special display effects can be achieved through drawing with multiple passes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.ShadingRequired
Return: bool
Modifiers: public
Summary: Gets or sets the "ShadingRequired" flag. This flag gets set inside the pipeline when a request is made to draw a shaded mesh but the current render engine doesn't support shaded mesh drawing...at this point the redraw mechanism will make sure everything will work the next time around.
Accessors: get set

Property: Rhino.Display.DisplayPipeline.StereoProjection
Return: int
Modifiers: public
Summary: Gets the current stereo projection if stereo mode is on.
0 = left
1 = right If stereo mode is not enables, this property always returns 0. | Since: 5.0 | Accessors: get

Property: Rhino.Display.DisplayPipeline.SupportsShading
Return: bool
Modifiers: public
Summary: Gets whether or not this pipeline supports shaded meshes.
Accessors: get

Property: Rhino.Display.DisplayPipeline.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipeline.ZBiasMode
Return: ZBiasMode
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayPipeline.AvailableOpenGLVersion(out bool coreProfile)
Return: uint
Modifiers: public, static
Summary: If Rhino is using OpenGL for display, this function will return major.minor version of OpenGL available for this instance of Rhino
Parameter: coreProfile (bool)
Parameter Summary: If true, OpenGL is being used in "core profile" mode

Method: Rhino.Display.DisplayPipeline.CullControlPolygon()
Return: bool
Modifiers: public, static
Summary: Returns a value indicating if only points on the side of the surface that face the camera are displayed.

Method: Rhino.Display.DisplayPipeline.DrawToBitmap(RhinoViewport viewport, int width, int height)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Draw a given viewport to an off-screen bitmap.
Parameter: viewport (RhinoViewport)
Parameter Summary: Viewport to draw.
Parameter: width (int)
Parameter Summary: Width of target image.
Parameter: height (int)
Parameter Summary: Height of target image.

Method: Rhino.Display.DisplayPipeline.GetDrawListSerialNumbers(out uint modelSerialNumber, out uint pageSerialNumber)
Return: void
Modifiers: public, static
Summary: Gets the current model and page view draw list serial numbers, which can be used to determine if a model or page view needs to be redrawn.
Parameter: modelSerialNumber (uint)
Parameter Summary: The current model draw list serial number.
Parameter: pageSerialNumber (uint)
Parameter Summary: The current page view draw list serial number.

Method: Rhino.Display.DisplayPipeline.MakeDefaultOpenGLContextCurrent()
Return: bool
Modifiers: public, static
Summary: Make a "default" OpenGL context current

Method: Rhino.Display.DisplayPipeline.AddClippingPlane(Point3d point, Vector3d normal)
Return: int
Modifiers: public
Summary: Add a clipping plane to be used during the drawing of this frame
Parameter: point (Point3d)
Parameter Summary: point on the plane
Parameter: normal (Vector3d)
Parameter Summary: vector perpendicular to the plane

Method: Rhino.Display.DisplayPipeline.ClearFrameBuffer(System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Fill the frame buffer with a single color. This function also clears the depth buffer for engines that support depth buffered drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: the color to fill the frame buffer with

Method: Rhino.Display.DisplayPipeline.Clone(RhinoViewport viewport)
Return: DisplayPipeline
Modifiers: public
Summary: Clones the pipeline. Creates an identical copy of "this" pipeline. Copies all conduits from "this" pipeline to the new pipeline.

Method: Rhino.Display.DisplayPipeline.Close()
Return: bool
Modifiers: public
Summary: Closes the pipeline.

Method: Rhino.Display.DisplayPipeline.Draw2dLine(System.Drawing.Point from, System.Drawing.Point to, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dLine(System.Drawing.PointF from, System.Drawing.PointF to, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dRectangle(System.Drawing.Rectangle rectangle, System.Drawing.Color strokeColor, int thickness, System.Drawing.Color fillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified, int height, string fontface)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)
Parameter: fontface (string)
Parameter Summary: font name (good default is "Arial")

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified, int height)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point2d screenCoordinate, bool middleJustified)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: screenCoordinate (Point2d)
Parameter Summary: definition point in screen coordinates (0,0 is top-left corner)
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified, int height, string fontface)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: Definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: If True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: Height in pixels (good default is 12).
Parameter: fontface (string)
Parameter Summary: Font name (good default is "Arial").

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified, int height)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)

Method: Rhino.Display.DisplayPipeline.Draw2dText(string text, System.Drawing.Color color, Point3d worldCoordinate, bool middleJustified)
Return: void
Modifiers: public
Summary: Draws 2D text on the viewport.
Parameter: text (string)
Parameter Summary: the string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: text color.
Parameter: worldCoordinate (Point3d)
Parameter Summary: definition point in world coordinates.
Parameter: middleJustified (bool)
Parameter Summary: if True text is centered around the definition point, otherwise it is lower-left justified.

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface, bool bold, bool italic, DocObjects.TextHorizontalAlignment horizontalAlignment, DocObjects.TextVerticalAlignment verticalAlignment)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface, bool bold, bool italic)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(string text, System.Drawing.Color color, Plane textPlane, double height, string fontface)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color, Plane textPlane)
Return: void
Modifiers: public
Summary: Draws 3d text with a different plane than what is defined in the Text3d class.
Parameter: text (Text3d)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: textPlane (Plane)
Parameter Summary: The plane for the text object.

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color, Point3d textPlaneOrigin)
Return: void
Modifiers: public
Summary: Draws 3d text using the Text3d plane with an adjusted origin.
Parameter: text (Text3d)
Parameter Summary: The string to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Text color.
Parameter: textPlaneOrigin (Point3d)
Parameter Summary: The origin of the plane to draw.

Method: Rhino.Display.DisplayPipeline.Draw3dText(Text3d text, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawActivePoint(Point3d point)
Return: void
Modifiers: public
Summary: Draws a point in style used during "GetPoint" operations
Parameter: point (Point3d)
Parameter Summary: Location of the point in world coordinates

Method: Rhino.Display.DisplayPipeline.DrawAnnotation(AnnotationBase annotation, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawAnnotationArrowhead(Arrowhead arrowhead, Transform xform, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawArc(Arc arc, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single arc object.
Parameter: arc (Arc)
Parameter Summary: Arc to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of arc.

Method: Rhino.Display.DisplayPipeline.DrawArc(Arc arc, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single arc object.
Parameter: arc (Arc)
Parameter Summary: Arc to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawArrow(Line line, System.Drawing.Color color, double screenSize, double relativeSize)
Return: void
Modifiers: public
Summary: Draws a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: line (Line)
Parameter Summary: Arrow shaft.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.
Parameter: screenSize (double)
Parameter Summary: If screenSize != 0.0 then the size (in screen pixels) of the arrow head will be equal to screenSize.
Parameter: relativeSize (double)
Parameter Summary: If relativeSize != 0.0 and screen size == 0.0 the size of the arrow head will be proportional to the arrow shaft length.

Method: Rhino.Display.DisplayPipeline.DrawArrow(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: line (Line)
Parameter Summary: Arrow shaft.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.

Method: Rhino.Display.DisplayPipeline.DrawArrowHead(Point3d tip, Vector3d direction, System.Drawing.Color color, double screenSize, double worldSize)
Return: void
Modifiers: public
Summary: Draws a single arrow head.
Parameter: tip (Point3d)
Parameter Summary: Point of arrow head tip.
Parameter: direction (Vector3d)
Parameter Summary: Direction in which arrow head is pointing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow head.
Parameter: screenSize (double)
Parameter Summary: If screenSize != 0.0, then the size (in screen pixels) of the arrow head will be equal to the screenSize.
Parameter: worldSize (double)
Parameter Summary: If worldSize != 0.0 and screen size == 0.0 the size of the arrow head will be equal to the number of units in worldSize.

Method: Rhino.Display.DisplayPipeline.DrawArrows(IEnumerable<Line> lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Arrow shafts.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrows.

Method: Rhino.Display.DisplayPipeline.DrawArrows(Line[] lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
Parameter: lines (Line[])
Parameter Summary: Arrow shafts.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrows.

Method: Rhino.Display.DisplayPipeline.DrawBitmap(DisplayBitmap bitmap, int left, int top)
Return: void
Modifiers: public
Summary: Draws a bitmap in screen coordinates
Parameter: bitmap (DisplayBitmap)
Parameter Summary: bitmap to draw
Parameter: left (int)
Parameter Summary: where top/left corner of bitmap should appear in screen coordinates
Parameter: top (int)
Parameter Summary: where top/left corner of bitmap should appear in screen coordinates

Method: Rhino.Display.DisplayPipeline.DrawBox(BoundingBox box, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws the edges of a BoundingBox.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of box edges.

Method: Rhino.Display.DisplayPipeline.DrawBox(BoundingBox box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws the edges of a BoundingBox.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawBox(Box box, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws the edges of a Box object.
Parameter: box (Box)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of box edges.

Method: Rhino.Display.DisplayPipeline.DrawBox(Box box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws the edges of a Box object.
Parameter: box (Box)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color, double size, int thickness)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: size (double)
Parameter Summary: Size (in model units) of the corner widgets.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the corner widgets.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color, double size)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: size (double)
Parameter Summary: Size (in model units) of the corner widgets.

Method: Rhino.Display.DisplayPipeline.DrawBoxCorners(BoundingBox box, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws corner widgets of a world aligned bounding box. Widget size will be 5% of the Box diagonal.
Parameter: box (BoundingBox)
Parameter Summary: Box to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawBrepShaded(Brep brep, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draws a shaded mesh representation of a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.

Method: Rhino.Display.DisplayPipeline.DrawBrepWires(Brep brep, System.Drawing.Color color, int wireDensity)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a brep object.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.
Parameter: wireDensity (int)
Parameter Summary: "Density" of wireframe curves.
-1 = no internal wires.
0 = default internal wires.
>0 = custom high density.

Method: Rhino.Display.DisplayPipeline.DrawBrepWires(Brep brep, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a brep object.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.

Method: Rhino.Display.DisplayPipeline.DrawCircle(Circle circle, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single circle object.
Parameter: circle (Circle)
Parameter Summary: Circle to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of circle.

Method: Rhino.Display.DisplayPipeline.DrawCircle(Circle circle, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single circle object.
Parameter: circle (Circle)
Parameter Summary: Circle to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawCone(Cone cone, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe cone.
Parameter: cone (Cone)
Parameter Summary: Cone to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of Cone wires.

Method: Rhino.Display.DisplayPipeline.DrawCone(Cone cone, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe cone.
Parameter: cone (Cone)
Parameter Summary: Cone to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawConstructionPlane(DocObjects.ConstructionPlane constructionPlane)
Return: void
Modifiers: public
Summary: Draws a construction plane.
Parameter: constructionPlane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to draw.

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color, int hairScale, int hairDensity, int sampleDensity)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.
Parameter: hairScale (int)
Parameter Summary: 100 = True length, > 100 magnified, < 100 shortened.
Parameter: hairDensity (int)
Parameter Summary: >= 0 larger numbers = more hairs (good default is 1).
Parameter: sampleDensity (int)
Parameter Summary: Between 1 and 10. Higher numbers draw smoother outer curves. (good default is 2).

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color, int hairScale)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.
Parameter: hairScale (int)
Parameter Summary: 100 = True length, > 100 magnified, < 100 shortened.

Method: Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Curve curve, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a typical Rhino Curvature Graph.
Parameter: curve (Curve)
Parameter Summary: Base curve for curvature graph.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of curvature graph.

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a single Curve object.
Parameter: curve (Curve)
Parameter Summary: Curve to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of curve.

Method: Rhino.Display.DisplayPipeline.DrawCurve(Curve curve, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a single Curve object.
Parameter: curve (Curve)
Parameter Summary: Curve to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawCylinder(Cylinder cylinder, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of cylinder wires.

Method: Rhino.Display.DisplayPipeline.DrawCylinder(Cylinder cylinder, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawDirectionArrow(Point3d location, Vector3d direction, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawDot(float screenX, float screenY, string text, System.Drawing.Color dotColor, System.Drawing.Color textColor)
Return: void
Modifiers: public
Summary: Draws a text dot in screen coordinates.
Parameter: screenX (float)
Parameter Summary: X coordinate (in pixels) of dot center.
Parameter: screenY (float)
Parameter Summary: Y coordinate (in pixels) of dot center.
Parameter: text (string)
Parameter Summary: Text content of dot.
Parameter: dotColor (System.Drawing.Color)
Parameter Summary: Dot background color.
Parameter: textColor (System.Drawing.Color)
Parameter Summary: Dot foreground color.

Method: Rhino.Display.DisplayPipeline.DrawDot(float screenX, float screenY, string text)
Return: void
Modifiers: public
Summary: Draws a text dot in screen coordinates.
Parameter: screenX (float)
Parameter Summary: X coordinate (in pixels) of dot center.
Parameter: screenY (float)
Parameter Summary: Y coordinate (in pixels) of dot center.
Parameter: text (string)
Parameter Summary: Text content of dot.

Method: Rhino.Display.DisplayPipeline.DrawDot(Point3d worldPosition, string text, System.Drawing.Color dotColor, System.Drawing.Color textColor)
Return: void
Modifiers: public
Summary: Draw a text dot in world coordinates.
Parameter: worldPosition (Point3d)
Parameter Summary: Location of dot in world coordinates.
Parameter: text (string)
Parameter Summary: Text content of dot.
Parameter: dotColor (System.Drawing.Color)
Parameter Summary: Dot background color.
Parameter: textColor (System.Drawing.Color)
Parameter Summary: Dot foreground color.

Method: Rhino.Display.DisplayPipeline.DrawDot(Point3d worldPosition, string text)
Return: void
Modifiers: public
Summary: Draws a text dot in world coordinates.
Parameter: worldPosition (Point3d)
Parameter Summary: Location of dot in world coordinates.
Parameter: text (string)
Parameter Summary: Text content of dot.

Method: Rhino.Display.DisplayPipeline.DrawDot(TextDot dot, System.Drawing.Color fillColor, System.Drawing.Color textColor, System.Drawing.Color borderColor)
Return: void
Modifiers: public
Summary: Draw a text dot as defined by the text dot class

Method: Rhino.Display.DisplayPipeline.DrawDottedLine(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single dotted line.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.

Method: Rhino.Display.DisplayPipeline.DrawDottedLine(Point3d from, Point3d to, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single dotted line.
Parameter: from (Point3d)
Parameter Summary: Line start point.
Parameter: to (Point3d)
Parameter Summary: Line end point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.

Method: Rhino.Display.DisplayPipeline.DrawDottedPolyline(IEnumerable<Point3d> points, System.Drawing.Color color, bool close)
Return: void
Modifiers: public
Summary: Draws a set of connected lines (polyline) in a dotted pattern (0x00001111).
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: End points of each line segment.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of polyline.
Parameter: close (bool)
Parameter Summary: Draw a line between the first and last points.

Method: Rhino.Display.DisplayPipeline.DrawExtrusionWires(Extrusion extrusion, System.Drawing.Color color, int wireDensity)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of an extrusion object.
Parameter: extrusion (Extrusion)
Parameter Summary: Extrusion to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.
Parameter: wireDensity (int)
Parameter Summary: "Density" of wireframe curves.
-1 = no internal wires.
0 = default internal wires.
>0 = custom high density.

Method: Rhino.Display.DisplayPipeline.DrawExtrusionWires(Extrusion extrusion, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of an extrusion object.
Parameter: extrusion (Extrusion)
Parameter Summary: Extrusion to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of Wireframe curves.

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat, DisplayPen boundary, System.Drawing.Color backgroundFillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat, float boundaryThickness, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientHatch(Hatch hatch, System.Drawing.Color color1, System.Drawing.Color color2, Point3d point1, Point3d point2, bool linearGradient, float boundaryThickness, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public
Summary: Draw a two point gradient filled hatch

Method: Rhino.Display.DisplayPipeline.DrawGradientLines(IEnumerable<Line> lines, float strokeWidth, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawGradientMesh(Mesh mesh, IEnumerable<ColorStop> stops, Point3d point1, Point3d point2, bool linearGradient, float repeat)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawHatch(Hatch hatch, System.Drawing.Color hatchColor, DisplayPen boundary, System.Drawing.Color backgroundFillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawHatch(Hatch hatch, System.Drawing.Color hatchColor, System.Drawing.Color boundaryColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawInstanceDefinition(DocObjects.InstanceDefinition instanceDefinition, Transform xform)
Return: void
Modifiers: public
Summary: Draws an <b>DocObjects.InstanceDefinition</b> .
Parameter: instanceDefinition (DocObjects.InstanceDefinition)
Parameter Summary: The instance definition.
Parameter: xform (Transform)
Parameter Summary: The transformation.

Method: Rhino.Display.DisplayPipeline.DrawInstanceDefinition(DocObjects.InstanceDefinition instanceDefinition)
Return: void
Modifiers: public
Summary: Draws an <b>DocObjects.InstanceDefinition</b> .
Parameter: instanceDefinition (DocObjects.InstanceDefinition)
Parameter Summary: The instance definition.

Method: Rhino.Display.DisplayPipeline.DrawLight(Light light, System.Drawing.Color wireframeColor)
Return: void
Modifiers: public
Summary: Draws a light.
Parameter: light (Light)
Parameter Summary: The light to draw.
Parameter: wireframeColor (System.Drawing.Color)
Parameter Summary: The wireframe color.

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLine(Line line, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.

Method: Rhino.Display.DisplayPipeline.DrawLine(Point3d from, Point3d to, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLine(Point3d from, Point3d to, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single line object.
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.

Method: Rhino.Display.DisplayPipeline.DrawLineArrow(Line line, System.Drawing.Color color, int thickness, double size)
Return: void
Modifiers: public
Summary: Draws an arrow made up of three line segments.
Parameter: line (Line)
Parameter Summary: Base line for arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the arrow line segments.
Parameter: size (double)
Parameter Summary: Size (in world units) of the arrow tip lines.

Method: Rhino.Display.DisplayPipeline.DrawLineNoClip(Point3d from, Point3d to, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line object .This version of line drawing will draw the segments of the line that extend beyond the near and far planes of the view frustum with depths on those planes
Parameter: from (Point3d)
Parameter Summary: Line from point.
Parameter: to (Point3d)
Parameter Summary: Line to point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw line in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of line.

Method: Rhino.Display.DisplayPipeline.DrawLines(IEnumerable<Line> lines, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines to be drawn, pass a Line[] for lines.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Lines to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawLines(IEnumerable<Line> lines, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines to be drawn, pass a Line[] for lines.
Parameter: lines (System.Collections.Generic.IEnumerable<Line>)
Parameter Summary: Lines to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawLines(Line[] lines, DisplayPen pen)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness, double size, double rotation)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.
Parameter: size (double)
Parameter Summary: Size (in pixels) of the arrow shaft.
Parameter: rotation (double)
Parameter Summary: Rotational angle adjustment (in radians, counter-clockwise of direction.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness, double size)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.
Parameter: size (double)
Parameter Summary: Size (in pixels) of the arrow shaft.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.
Parameter: thickness (int)
Parameter Summary: Thickness of arrow widget lines.

Method: Rhino.Display.DisplayPipeline.DrawMarker(Point3d tip, Vector3d direction, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws an arrow marker as a view-aligned widget.
Parameter: tip (Point3d)
Parameter Summary: Location of arrow tip point.
Parameter: direction (Vector3d)
Parameter Summary: Direction of arrow.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of arrow widget.

Method: Rhino.Display.DisplayPipeline.DrawMeshFalseColors(Mesh mesh)
Return: void
Modifiers: public
Summary: Draws the mesh faces as False color patches. The mesh must have Vertex Colors defined for this to work.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.

Method: Rhino.Display.DisplayPipeline.DrawMeshShaded(Mesh mesh, DisplayMaterial material, int faceIndices)
Return: void
Modifiers: public
Summary: Draws the shaded faces of a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.
Parameter: faceIndices (int)
Parameter Summary: Indices of specific faces to draw

Method: Rhino.Display.DisplayPipeline.DrawMeshShaded(Mesh mesh, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draws the shaded faces of a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with.

Method: Rhino.Display.DisplayPipeline.DrawMeshVertices(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the vertices in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for vertex drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh vertices.

Method: Rhino.Display.DisplayPipeline.DrawMeshWires(Mesh mesh, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws all the wires in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for wire drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh wires.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of mesh wires.

Method: Rhino.Display.DisplayPipeline.DrawMeshWires(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws all the wires in a given mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh for wire drawing.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of mesh wires.

Method: Rhino.Display.DisplayPipeline.DrawObject(DocObjects.RhinoObject rhinoObject, Transform xform)
Return: void
Modifiers: public
Summary: Draws a <b>DocObjects.RhinoObject</b> with an applied transformation.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: The Rhino object.
Parameter: xform (Transform)
Parameter Summary: The transformation.

Method: Rhino.Display.DisplayPipeline.DrawObject(DocObjects.RhinoObject rhinoObject)
Return: void
Modifiers: public
Summary: Draws a <b>DocObjects.RhinoObject</b> .
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: The Rhino object.

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles, DisplayBitmap bitmap)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles, DisplayBitmap[] bitmaps)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawParticles(ParticleSystem particles)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPatternedLine(Line line, System.Drawing.Color color, int pattern, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line with specified pattern.
Parameter: line (Line)
Parameter Summary: Line to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.
Parameter: pattern (int)
Parameter Summary: Pattern of the line (like 0x00001111 for dotted line).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawPatternedLine(Point3d from, Point3d to, System.Drawing.Color color, int pattern, int thickness)
Return: void
Modifiers: public
Summary: Draws a single line with specified pattern.
Parameter: from (Point3d)
Parameter Summary: Line start point.
Parameter: to (Point3d)
Parameter Summary: Line end point.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of line.
Parameter: pattern (int)
Parameter Summary: Pattern of the line (like 0x00001111 for dotted line).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.

Method: Rhino.Display.DisplayPipeline.DrawPatternedPolyline(IEnumerable<Point3d> points, System.Drawing.Color color, int pattern, int thickness, bool close)
Return: void
Modifiers: public
Summary: Draws a set of connected lines (polyline) with specified pattern.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: End points of each line segment.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of polyline.
Parameter: pattern (int)
Parameter Summary: Pattern to use for the line (like 0x00001111 for dotted).
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of lines.
Parameter: close (bool)
Parameter Summary: Draw a line between the first and last points.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, float radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (float)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, int radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (int)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, PointStyle style, System.Drawing.Color strokeColor, System.Drawing.Color fillColor, float radius, float strokeWidth, float secondarySize, float rotationRadians, bool diameterIsInPixels, bool autoScaleForDpi)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point with a given radius, style and color.
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of point.

Method: Rhino.Display.DisplayPipeline.DrawPoint(Point3d point)
Return: void
Modifiers: public
Summary: Draws a point using the current display attribute size, style and color
Parameter: point (Point3d)
Parameter Summary: Location of point in world coordinates.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, float size, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw.
Parameter: size (float)
Parameter Summary: Size of points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points in the cloud, if the cloud has a color array this setting is ignored.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, float size)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw, if the cloud has a color array, it will be used, otherwise the points will be black.
Parameter: size (float)
Parameter Summary: Size of points.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, int size, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw.
Parameter: size (int)
Parameter Summary: Size of points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points in the cloud, if the cloud has a color array this setting is ignored.

Method: Rhino.Display.DisplayPipeline.DrawPointCloud(PointCloud cloud, int size)
Return: void
Modifiers: public
Summary: Draws a point cloud.
Parameter: cloud (PointCloud)
Parameter Summary: Point cloud to draw, if the cloud has a color array, it will be used, otherwise the points will be black.
Parameter: size (int)
Parameter Summary: Size of points.

Method: Rhino.Display.DisplayPipeline.DrawPoints(DisplayPointSet points, DisplayPointAttributes fallbackAttributes, DisplayPointAttributes overrideAttributes)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoints(DisplayPointSet points)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, float radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a set of points with a given radius, style and color.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Location of points in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (float)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, int radius, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a set of points with a given radius, style and color.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Location of points in world coordinates.
Parameter: style (PointStyle)
Parameter Summary: Point display style.
Parameter: radius (int)
Parameter Summary: Point size in pixels.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color of points. If style is ControlPoint, this will be the border color.

Method: Rhino.Display.DisplayPipeline.DrawPoints(IEnumerable<Point3d> points, PointStyle style, System.Drawing.Color strokeColor, System.Drawing.Color fillColor, float radius, float strokeWidth, float secondarySize, float rotationRadians, bool diameterIsInPixels, bool autoScaleForDpi)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawPolygon(IEnumerable<Point3d> points, System.Drawing.Color color, bool filled)
Return: void
Modifiers: public
Summary: Draws a filled, convex polygon from a collection of points.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Collection of world coordinate points that are connected by lines to form a closed shape. Collection must contain at least 3 points.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: filled (bool)
Parameter Summary: True if the closed area should be filled with color. False if you want to draw just the border of the closed shape.

Method: Rhino.Display.DisplayPipeline.DrawPolyline(IEnumerable<Point3d> polyline, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draws a single Polyline object.
Parameter: polyline (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Polyline to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of the Polyline.

Method: Rhino.Display.DisplayPipeline.DrawPolyline(IEnumerable<Point3d> polyline, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a single Polyline object.
Parameter: polyline (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: Polyline to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw in.

Method: Rhino.Display.DisplayPipeline.DrawRoundedRectangle(System.Drawing.PointF center, float pixelWidth, float pixelHeight, float cornerRadius, System.Drawing.Color strokeColor, float strokeWidth, System.Drawing.Color fillColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSphere(Sphere sphere, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe sphere.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of Sphere wires.

Method: Rhino.Display.DisplayPipeline.DrawSphere(Sphere sphere, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe sphere.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float width, float height)
Return: void
Modifiers: public
Summary: Draw screen oriented image centered at 2d screen location

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float size, System.Drawing.Color blendColor)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point2d screenLocation, float size)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point3d worldLocation, float size, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprite(DisplayBitmap bitmap, Point3d worldLocation, float size, System.Drawing.Color blendColor, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprites(DisplayBitmap bitmap, DisplayBitmapDrawList items, float size, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawSprites(DisplayBitmap bitmap, DisplayBitmapDrawList items, float size, Vector3d translation, bool sizeInWorldSpace)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawStereoFrameBuffer(DocObjects.ViewportInfo viewportLeft, DocObjects.ViewportInfo viewportRight, out uint handleLeft, out uint handleRight)
Return: bool
Modifiers: public
Summary: Draws the viewport as seen from the left and the right eye viewports and returns the result as OpenGL texture handles.
Parameter: viewportLeft (DocObjects.ViewportInfo)
Parameter Summary: The viewport representing the left eye location and look direction.
Parameter: viewportRight (DocObjects.ViewportInfo)
Parameter Summary: The viewport representing the right eye location and look direction.
Parameter: handleLeft (uint)
Parameter Summary: Will contain the OpenGL texture handle which references the left output color buffer.
Parameter: handleRight (uint)
Parameter Summary: Will contain the OpenGL texture handle which references the right output color buffer.

Method: Rhino.Display.DisplayPipeline.DrawSubDShaded(SubD subd, DisplayMaterial material)
Return: void
Modifiers: public
Summary: Draw a shaded mesh representation of a SubD
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: material (DisplayMaterial)
Parameter Summary: Material to draw faces with

Method: Rhino.Display.DisplayPipeline.DrawSubDWires(SubD subd, DisplayPen boundaryPen, DisplayPen smoothInteriorPen, DisplayPen creasePen, DisplayPen nonmanifoldPen)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves os a SubD object using different pens
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: boundaryPen (DisplayPen)
Parameter Summary: Pen to use for boundary wires. If null, no boundary wires will be drawn
Parameter: smoothInteriorPen (DisplayPen)
Parameter Summary: Pen to use for smooth interior wires. If null, no smooth interior wires will be drawn
Parameter: creasePen (DisplayPen)
Parameter Summary: Pen to use for crease wires. If null, no crease wires will be drawn
Parameter: nonmanifoldPen (DisplayPen)
Parameter Summary: Pen to use for non-manifold wires. If null, no non-manifold wires will be drawn

Method: Rhino.Display.DisplayPipeline.DrawSubDWires(SubD subd, System.Drawing.Color color, float thickness)
Return: void
Modifiers: public
Summary: Draws all the wireframe curves of a SubD object
Parameter: subd (SubD)
Parameter Summary: SubD to draw
Parameter: color (System.Drawing.Color)
Parameter Summary: wire color
Parameter: thickness (float)
Parameter Summary: wire thickness

Method: Rhino.Display.DisplayPipeline.DrawSurface(Surface surface, System.Drawing.Color wireColor, int wireDensity)
Return: void
Modifiers: public
Summary: Draw wireframe display for a single surface.
Parameter: surface (Surface)
Parameter Summary: Surface to draw.
Parameter: wireColor (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: wireDensity (int)
Parameter Summary: Thickness (in pixels) or wires to draw.

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color, double scale)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color, Transform xform)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawText(TextEntity text, System.Drawing.Color color)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipeline.DrawTorus(Torus torus, System.Drawing.Color color, int thickness)
Return: void
Modifiers: public
Summary: Draw a wireframe torus.
Parameter: torus (Torus)
Parameter Summary: Torus to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.
Parameter: thickness (int)
Parameter Summary: Thickness (in pixels) of torus wires.

Method: Rhino.Display.DisplayPipeline.DrawTorus(Torus torus, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draw a wireframe torus.
Parameter: torus (Torus)
Parameter Summary: Torus to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Color to draw with.

Method: Rhino.Display.DisplayPipeline.DrawZebraPreview(Brep brep, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a shaded Brep with Zebra stripe preview.
Parameter: brep (Brep)
Parameter Summary: Brep to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Object color.

Method: Rhino.Display.DisplayPipeline.DrawZebraPreview(Mesh mesh, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Draws a shaded Mesh with Zebra stripe preview.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to draw.
Parameter: color (System.Drawing.Color)
Parameter Summary: Object color.

Method: Rhino.Display.DisplayPipeline.EnableClippingPlanes(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the Clipping Plane logic of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable Clipping Planes, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableColorWriting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the ColorWriting behavior of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable ColorWriting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableDepthTesting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the DepthTesting behavior of the engine. When DepthTesting is disabled, objects in front will no longer occlude objects behind them.
Parameter: enable (bool)
Parameter Summary: True to enable DepthTesting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableDepthWriting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the DepthWriting behavior of the engine. When DepthWriting is disabled, drawn geometry does not affect the Z-Buffer.
Parameter: enable (bool)
Parameter Summary: True to enable DepthWriting, False to disable.

Method: Rhino.Display.DisplayPipeline.EnableLighting(bool enable)
Return: void
Modifiers: public
Summary: Enable or disable the Lighting logic of the engine.
Parameter: enable (bool)
Parameter Summary: True to enable Lighting, False to disable.

Method: Rhino.Display.DisplayPipeline.Flush()
Return: void
Modifiers: public
Summary: Force the pipeline to immediately flush any cached geometry to the display

Method: Rhino.Display.DisplayPipeline.GetLights()
Return: Light[]
Modifiers: public
Summary: Get lights that this pipeline is current using

Method: Rhino.Display.DisplayPipeline.GetOpenGLCameraToClip()
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "camera" to "clip" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.GetOpenGLWorldToCamera(bool includeModelTransform)
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "world" to "camera" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.GetOpenGLWorldToClip(bool includeModelTransform)
Return: float
Modifiers: public
Summary: Get an array of 16 floats that represents the "world" to "clip" coordinate transformation in OpenGL's right handed coordinate system

Method: Rhino.Display.DisplayPipeline.InterruptDrawing()
Return: bool
Modifiers: public
Summary: Tests to see if the pipeline should stop drawing more geometry and just show what it has so far. If a drawing operation is taking a long time, this function will return True and tell Rhino it should just finish up and show the frame buffer. This is used in dynamic drawing operations.

Method: Rhino.Display.DisplayPipeline.IsActive(DocObjects.RhinoObject rhinoObject)
Return: bool
Modifiers: public
Summary: Determines if an object can be visible in this viewport based on it's object type and display attributes. This test does not check for visibility based on location of the object. NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" tests based on location (is some part of the object in the view frustum). Use CRhinoDisplayPipeline::IsActive() to perform "visibility" tests based on object type.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: Object to test.

Method: Rhino.Display.DisplayPipeline.IsInTiledDraw(out System.Drawing.Size fullSize, out System.Drawing.Rectangle currentTile)
Return: bool
Modifiers: public
Summary: Returns True if the currently drawn frame is part of a tiled capture. Tiled captures are performed when creating large raster outputs.
Parameter: fullSize (System.Drawing.Size)
Parameter Summary: Final full size area that is being created
Parameter: currentTile (System.Drawing.Rectangle)
Parameter Summary: What portion of the fullSize area that is currently being drawn

Method: Rhino.Display.DisplayPipeline.IsVisible(BoundingBox bbox)
Return: bool
Modifiers: public
Summary: Test a given box for visibility inside the view frustum under the current viewport and model transformation settings.
Parameter: bbox (BoundingBox)
Parameter Summary: Box to test for visibility.

Method: Rhino.Display.DisplayPipeline.IsVisible(DocObjects.RhinoObject rhinoObject)
Return: bool
Modifiers: public
Summary: Test a given object for visibility inside the view frustum under the current viewport and model transformation settings. This function calls a virtual IsVisibleFinal function that sub-classed pipelines can add extra tests to. In the base class, this test only tests visibility based on the objects world coordinates location and does not pay attention to the object's attributes.  NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" tests based on location (is some part of the object in the view frustum). Use CRhinoDisplayPipeline::IsActive() to perform "visibility" tests based on object type.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: Object to test.

Method: Rhino.Display.DisplayPipeline.IsVisible(Point3d worldCoordinate)
Return: bool
Modifiers: public
Summary: Test a given 3d world coordinate point for visibility inside the view frustum under the current viewport and model transformation settings.
Parameter: worldCoordinate (Point3d)
Parameter Summary: Point to test for visibility.

Method: Rhino.Display.DisplayPipeline.Measure2dText(string text, Point2d definitionPoint, bool middleJustified, double rotationRadians, int height, string fontFace)
Return: System.Drawing.Rectangle
Modifiers: public
Summary: Determines screen rectangle that would be drawn to using the Draw2dText(..) function with the same parameters.
Parameter: text (string)
Parameter Summary: text to measure.
Parameter: definitionPoint (Point2d)
Parameter Summary: either lower-left or middle of text.
Parameter: middleJustified (bool)
Parameter Summary: true=middle justified. false=lower-left justified.
Parameter: rotationRadians (double)
Parameter Summary: text rotation in radians
Parameter: height (int)
Parameter Summary: height in pixels (good default is 12)
Parameter: fontFace (string)
Parameter Summary: font name (good default is "Arial")

Method: Rhino.Display.DisplayPipeline.Open()
Return: bool
Modifiers: public
Summary: Opens the pipeline.

Method: Rhino.Display.DisplayPipeline.PopClipTesting()
Return: void
Modifiers: public
Summary: Pop a ClipTesting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopCullFaceMode()
Return: void
Modifiers: public
Summary: Pop a FaceCull flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopDepthTesting()
Return: void
Modifiers: public
Summary: Pop a DepthTesting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopDepthWriting()
Return: void
Modifiers: public
Summary: Pop a DepthWriting flag off the engine's stack.

Method: Rhino.Display.DisplayPipeline.PopModelTransform()
Return: void
Modifiers: public
Summary: Pop a model transformation off the engine's model transform stack.

Method: Rhino.Display.DisplayPipeline.PopProjection()
Return: void
Modifiers: public
Summary: Pop a view projection off this pipelines projection stack

Method: Rhino.Display.DisplayPipeline.Push2dProjection()
Return: void
Modifiers: public
Summary: Push the current view projection and set the viewport up to be a simple 2D top projection where the camera frustum matches the same size as the screen port. This allows geometry draw functions to act like they are working with typical 2d graphics APIs on a window

Method: Rhino.Display.DisplayPipeline.PushClipTesting(bool enable)
Return: void
Modifiers: public
Summary: Push a ClipTesting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: ClipTesting flag.

Method: Rhino.Display.DisplayPipeline.PushCullFaceMode(CullFaceMode mode)
Return: void
Modifiers: public
Summary: Push a FaceCull flag on the engine's stack.
Parameter: mode (CullFaceMode)
Parameter Summary: FaceCull flag.

Method: Rhino.Display.DisplayPipeline.PushDepthTesting(bool enable)
Return: void
Modifiers: public
Summary: Push a DepthTesting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: DepthTesting flag.

Method: Rhino.Display.DisplayPipeline.PushDepthWriting(bool enable)
Return: void
Modifiers: public
Summary: Push a DepthWriting flag on the engine's stack.
Parameter: enable (bool)
Parameter Summary: DepthWriting flag.

Method: Rhino.Display.DisplayPipeline.PushModelTransform(Transform xform)
Return: void
Modifiers: public
Summary: Push a model transformation on the engine's model transform stack.
Parameter: xform (Transform)
Parameter Summary: Transformation to push.

Method: Rhino.Display.DisplayPipeline.RemoveClippingPlane(int index)
Return: void
Modifiers: public
Summary: Remove a clipping plane from the pipeline for this frame

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject, ObjectAttributes attributes, Transform instanceTransform)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The object attributes.
Parameter: instanceTransform (Transform)
Parameter Summary: The instance object transformation.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject, ObjectAttributes attributes)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The object attributes.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(RhinoDoc doc, RhinoObject rhinoObject)
Return: DisplayMaterial
Modifiers: public
Summary: Sets up a display material.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: The Rhino object.

Method: Rhino.Display.DisplayPipeline.SetupDisplayMaterial(System.Drawing.Color color)
Return: DisplayMaterial
Modifiers: public

Class: Rhino.Display.DisplayPipelineAttributes
Summary: Represents display pipeline settings, such as "show transparency" and "show grips".

Constructor: Rhino.Display.DisplayPipelineAttributes.DisplayPipelineAttributes(SerializationInfo info, StreamingContext context)

Property: Rhino.Display.DisplayPipelineAttributes.AmbientLightingColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.AxesSizePercentage
Return: int
Modifiers: public
Summary: Size of axes as a percentage of the grid extents.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialDiffuseColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialShine
Return: double
Modifiers: public
Summary: Get or set the back material shine (0 to Rhino.DocObjects.MaxShine). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BackMaterialTransparency
Return: double
Modifiers: public
Summary: Get or set the back material transparency (0 to 100). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BakeTextures
Return: bool
Modifiers: public
Summary: Adds the ability to display procedural textures in viewports. When it is turned off, procedural textures in viewports look different from the rendering.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.BoundingBoxMode
Return: BoundingBoxDisplayMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CastShadows
Return: bool
Modifiers: public
Summary: Cast shadows.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeColor
Return: Color
Modifiers: public
Summary: Clipping edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeColorUsage
Return: ClippingEdgeColorUse
Modifiers: public
Summary: Specifies how the color for the Edges is determined
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingEdgeThickness
Return: int
Modifiers: public
Summary: Edge thickness in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingFillColor
Return: Color
Modifiers: public
Summary: Clipping plane fill color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingPlaneFillColorUsage
Return: ClippingPlaneFillColorUse
Modifiers: public
Summary: Specifies how the color for the clipping plane object fill is determined.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeColor
Return: Color
Modifiers: public
Summary: Clipping plane solid color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeColorUsage
Return: ClippingShadeColorUse
Modifiers: public
Summary: Specifies how to shade the clipping plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeSelectedPlane
Return: bool
Modifiers: public
Summary: Shades the selected clipping plane.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClippingShadeTransparency
Return: int
Modifiers: public
Summary: Specifies the clipping plane transparency percentage.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ClipSelectionHighlight
Return: bool
Modifiers: public
Summary: Clips the highlight wires. Shaded selections always clip.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ColorReductionPct
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ContextForDraw
Return: ContextsForDraw
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonColor
Return: Color
Modifiers: public
Summary: Control polygon color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonGripSize
Return: int
Modifiers: public
Summary: The control point size in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonHighlight
Return: bool
Modifiers: public
Summary: Highlights the segments of the control polygon on either side of the control points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShow
Return: bool
Modifiers: public
Summary: Shows the control polygon and only shows the control points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShowPoints
Return: bool
Modifiers: public
Summary: Shows the control points while the control polygon is displayed.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonShowSurface
Return: bool
Modifiers: public
Summary: Shows the object while the control polygon is displayed.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonStyle
Return: PointStyle
Modifiers: public
Summary: PointStyle for the control polygon. Supported values are ControlPoint, RoundControlPoint, VariableDot, and RoundDot
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonUseFixedSingleColor
Return: bool
Modifiers: public
Summary: Specifies a color for the control polygon.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonUseSolidLines
Return: bool
Modifiers: public
Summary: Use dotted / solid lines
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ControlPolygonWireThickness
Return: int
Modifiers: public
Summary: The width of the control polygon lines in pixels.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CullBackfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveColor
Return: Color
Modifiers: public
Summary: Color used for drawing curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThickness
Return: int
Modifiers: public
Summary: Pixel thickness for curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThicknessScale
Return: float
Modifiers: public
Summary: Scale thickness for curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CurveThicknessUsage
Return: CurveThicknessUse
Modifiers: public
Summary: Use a pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneAltitude
Return: double
Modifiers: public
Summary: Height above the world XY plane in model units
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneAutomaticAltitude
Return: bool
Modifiers: public
Summary: Turns on auto-elevation that moves Ground Plane to the lowest point of the objects in the model.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneOn
Return: bool
Modifiers: public
Summary: Turn the custom ground plane on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.CustomGroundPlaneShadowOnly
Return: bool
Modifiers: public
Summary: Makes the ground plane transparent, but allows shadows to still be cast on it.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DisableConduits
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DisableTransparency
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.DynamicDisplayUsage
Return: DynamicDisplayUse
Modifiers: public
Summary: Sets the appearance of objects in the display
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.EnglishName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FillMode
Return: FrameBufferFillMode
Modifiers: public
Summary: Get or set the frame buffer fill mode.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontDiffuse
Return: Color
Modifiers: public
Summary: Shades the current viewport with no smoothing so the individual render mesh faces are visible.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontFlatShaded
Return: bool
Modifiers: public
Summary: Shades the current viewport with no smoothing so the individual render mesh faces are visible.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontMaterialShine
Return: double
Modifiers: public
Summary: Get or set the front material shine (0 to Rhino.DocObjects.MaxShine). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontMaterialTransparency
Return: double
Modifiers: public
Summary: Get or set the front material transparency (0 to 100). You must call DisplayModeDescription.UpdateDisplayMode() to commit this change.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.FrontOverrideObjectColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GhostLockedObjects
Return: bool
Modifiers: public
Summary: Set locked appearance
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneColor
Return: Color
Modifiers: public
Summary: The color of the grid plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneTransparency
Return: int
Modifiers: public
Summary: Transparency of the grid plane, percentage (0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridPlaneVisibility
Return: GridPlaneVisibilityMode
Modifiers: public
Summary: Set when to show the grid plane
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GridTransparency
Return: int
Modifiers: public
Summary: Transparency of the grid, percentage (0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.GroundPlaneUsage
Return: GroundPlaneUsages
Modifiers: public
Summary: Turn on or off custom Ground plane settungs
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.HighlightSurfaces
Return: bool
Modifiers: public
Summary: Shades entire object with highlight color.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.Id
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.IgnoreHighlights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LayersFollowLockUsage
Return: bool
Modifiers: public
Summary: Applies the settings for locked objects to locked layers.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LightingScheme
Return: LightingSchema
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LinearWorkflowUsage
Return: LinearWorkflowUsages
Modifiers: public
Summary: Turn on or off custom linear workflow settings
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LocalName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.LockedColor
Return: Color
Modifiers: public
Summary: Locked Object Color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectsDrawBehindOthers
Return: bool
Modifiers: public
Summary: Locked object are drawn behind other objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectTransparency
Return: int
Modifiers: public
Summary: LockedObjectTransparency.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.LockedObjectUsage
Return: LockedObjectUse
Modifiers: public
Summary: Set asource of display attributes for locked objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeColor
Return: Color
Modifiers: public
Summary: Sets the mesh edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshEdgeThickness
Return: int
Modifiers: public
Summary: Mesh edge width in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeColor
Return: Color
Modifiers: public
Summary: Sets the naked edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNakedEdgeThickness
Return: int
Modifiers: public
Summary: Naked mesh edge width in pixels.}
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeColor
Return: Color
Modifiers: public
Summary: Sets the nonmanifold edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeColorReduction
Return: int
Modifiers: public
Summary: The darken percentage of the color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshNonmanifoldEdgeThickness
Return: int
Modifiers: public
Summary: Non-manifold mesh edge width in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshSpecificAttributes
Return: MeshDisplayAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.MeshVertexSize
Return: int
Modifiers: public
Summary: Mesh vertex size in pixels
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ObjectColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PlaneUsesGridColor
Return: bool
Modifiers: public
Summary: If true, use the grid thin line color in App settings
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointCloudRadius
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointCloudStyle
Return: PointStyle
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointRadius
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PointStyle
Return: PointStyle
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PostProcessFrameBuffer
Return: bool
Modifiers: public
Summary: Linear workflow Adjust output image
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PostProcessGamma
Return: bool
Modifiers: public
Summary: Linear workflow Output image gamma
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessColors
Return: bool
Modifiers: public
Summary: Linear workflow input colors
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessGamma
Return: bool
Modifiers: public
Summary: Linear workflow input gamma
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.PreProcessTextures
Return: bool
Modifiers: public
Summary: Linear workflow input textures
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.RealtimeDisplayId
Return: Guid
Modifiers: public
Summary: Get the ID of the real-time display engine attached to the view. This will be Guid.Empty if no real-time display engine is in use. This can be the case for instance when starting a _Render session for a real-time viewport integration. That still would cause this ID to be Guid.Empty.
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.RealtimeRenderPasses
Return: int
Modifiers: public
Summary: Get or set the real-time passes amount
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadeVertexColors
Return: bool
Modifiers: public
Summary: Shade using vertex colors.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadingEnabled
Return: bool
Modifiers: public
Summary: Draw shaded meshes and surfaces
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowBiasX
Return: double
Modifiers: public
Summary: ShadowBiasX (Self shadowing artifacts) from 0 (dirty) to 50 (cleaner).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowClippingRadius
Return: float
Modifiers: public
Summary: Camera-based shadow clipping radius
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowEdgeBlur
Return: double
Modifiers: public
Summary: Set blurring from 0 (no blurring) to 16 (maximum blurring)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowIntensity
Return: int
Modifiers: public
Summary: Shadow intensity (percentage 0-100)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowMemoryUsage
Return: int
Modifiers: public
Summary: Value from 1 to 16384 indicating how much memory is to be allocated. Actual memory use is ShadowMemoryUsage*ShadowMemoryUsage*4.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowsIgnoreUserDefinedClippingPlanes
Return: bool
Modifiers: public
Summary: If true, shadows ignore user-defined clipping planes
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowSoftEdgeQuality
Return: int
Modifiers: public
Summary: Soft edge quality, from 0 (none/faster) to 12 (softer/slower)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowsOn
Return: bool
Modifiers: public
Summary: Enable shadows
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShadowTransparencyTolerance
Return: int
Modifiers: public
Summary: Transparency tolerance from 0 (never cast shadows) to 100 (always case shadows)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowAnnotations
Return: bool
Modifiers: public
Summary: Show annotations.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClipIntersectionEdges
Return: bool
Modifiers: public
Summary: Show edges and hatches where clipping planes clip objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClipIntersectionSurfaces
Return: bool
Modifiers: public
Summary: Show fills where clipping planes clip solid objects
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingEdges
Return: bool
Modifiers: public
Summary: Shows the edges between the clipping plane and clipped objects.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingFills
Return: bool
Modifiers: public
Summary: When a clipping plane intersects a 3-D object and the section is closed, the section is filled.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowClippingPlanes
Return: bool
Modifiers: public
Summary: Show clipping planes.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowCurves
Return: bool
Modifiers: public
Summary: Draw curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowGrips
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowIsoCurves
Return: bool
Modifiers: public
Summary: Draw surface ISO curves.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowLights
Return: bool
Modifiers: public
Summary: Show light widgets.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshEdges
Return: bool
Modifiers: public
Summary: Display mesh edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshNakedEdges
Return: bool
Modifiers: public
Summary: Display mesh naked edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowMeshNonmanifoldEdges
Return: bool
Modifiers: public
Summary: Display mesh manifold edges on/off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowPointClouds
Return: bool
Modifiers: public
Summary: Show point clouds.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowPoints
Return: bool
Modifiers: public
Summary: Show points.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowRealtimeRenderProgressBar
Return: bool
Modifiers: public
Summary: Get or set whether the display is used for preview rendering or not.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDBoundary
Return: bool
Modifiers: public
Summary: Set visibility of SubD naked edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDCreases
Return: bool
Modifiers: public
Summary: Set visibility of SubD creased edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDEdges
Return: bool
Modifiers: public
Summary: Set visibility of SubD smooth edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDNonmanifoldEdges
Return: bool
Modifiers: public
Summary: Turn on/off color differentiation of SubD symmetry children.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSubDReflectionPlanePreview
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceEdge
Return: bool
Modifiers: public
Summary: Turn Surface Edge visibility on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceEdges
Return: bool
Modifiers: public
Summary: Show surface edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowSurfaceNakedEdge
Return: bool
Modifiers: public
Summary: Turn Surface Naked Edge visibility on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowTangentEdges
Return: bool
Modifiers: public
Summary: Show tangent edges.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowTangentSeams
Return: bool
Modifiers: public
Summary: Show tangent seams.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ShowText
Return: bool
Modifiers: public
Summary: Show text.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SkylightShadowQuality
Return: int
Modifiers: public
Summary: Skylight shadow quality, from 0 (lowest) to 8 (highest)
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.StereoContext
Return: StereoContext
Modifiers: public
Summary: Get or set the stereo render context.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDBoundaryThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDCreaseInteriorThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDNonManifoldThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionAxisLineColor
Return: Color
Modifiers: public
Summary: Reflection axis line color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneAxisLineOn
Return: bool
Modifiers: public
Summary: Apply Turnh on or off the reflection plane axis line
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColor
Return: Color
Modifiers: public
Summary: Reflection plane color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColorReduction
Return: int
Modifiers: public
Summary: SubD replection plane color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDReflectionPlaneColorUsage
Return: SubDReflectionPlaneColorUse
Modifiers: public
Summary: SubD replection plane color use
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorApplyPattern
Return: bool
Modifiers: public
Summary: Apply pattern to the edge
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorColorReduction
Return: int
Modifiers: public
Summary: Color reduction percentage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeColor
Return: Color
Modifiers: public
Summary: Edge color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeColorUsage
Return: SubDEdgeColorUse
Modifiers: public
Summary: Edge color usage
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorEdgeThickness
Return: float
Modifiers: public
Summary: Edge thickness (pixels).
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorThicknessScale
Return: float
Modifiers: public
Summary: Edge thickness scale
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDSmoothInteriorThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SubDThicknessUsage
Return: SubDThicknessUse
Modifiers: public
Summary: Thickness usage, pixel thickness or a scale thickness
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeApplyPattern
Return: bool
Modifiers: public
Summary: Turn pattern application on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorReduction
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorReductionPercent
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeColorUsage
Return: SurfaceEdgeColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeThickness
Return: int
Modifiers: public
Summary: Thickness for surface edges
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceEdgeThicknessScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoColorsUsed
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoShowForFlatFaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoSingleColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessUScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessUsed
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessVScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoThicknessWScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoUVColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoVColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceIsoVThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedAdgeColorReduction
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeApplyPattern
Return: bool
Modifiers: public
Summary: Turn pattern application on or off
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColorReductionPercent
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeColorUsage
Return: SurfaceNakedEdgeColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.SurfaceNakedEdgeThicknessScale
Return: float
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseAssignedObjectMaterial
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using their assigned rendering material.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectColor
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom color.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectColorBackfaces
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom color for back faces.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectMaterial
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom material.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseCustomObjectMaterialBackfaces
Return: bool
Modifiers: public
Summary: Gets or sets whether objects ought to be drawn using a custom material on backfaces.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseLightColor
Return: bool
Modifiers: public
Summary: Draw lights using light color
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseSectionStyles
Return: bool
Modifiers: public
Summary: When enabled, the appearances of clipping fills and edges are based on objects' section style properties.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.UseSingleCurveColor
Return: bool
Modifiers: public
Summary: Use a single color for drawing curves
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewSpecificAttributes
Return: ViewDisplayAttributes
Modifiers: public
Accessors: get

Property: Rhino.Display.DisplayPipelineAttributes.WorldAxesIconColorUsage
Return: WorldAxesIconColorUse
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.XrayAllObjects
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.DisplayPipelineAttributes.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipelineAttributes.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.DisplayPipelineAttributes.GetColorFadeEffect(out Color fadeColor, out float fadeAmount)
Return: void
Modifiers: public
Summary: Get the current color fade effect data.
Parameter: fadeColor (Color)
Parameter Summary: The current fade amount
Parameter: fadeAmount (float)
Parameter Summary: The current fade color

Method: Rhino.Display.DisplayPipelineAttributes.GetCurveThicknessUsage()
Return: CurveThicknessUse
Modifiers: public
Summary: Gets current usage, pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)

Method: Rhino.Display.DisplayPipelineAttributes.GetDiagonalHatchEffect(out float hatchStrength, out float hatchWidth)
Return: void
Modifiers: public
Summary: Get the current diagonal hatch strength and width in pixels.
Parameter: hatchStrength (float)
Parameter Summary: The strength of the hatch effect.
Parameter: hatchWidth (float)
Parameter Summary: The width of the diagonal hatch in pixels.

Method: Rhino.Display.DisplayPipelineAttributes.GetDitherTransparencyEffect()
Return: float
Modifiers: public
Summary: Get the current dither transparency amount.

Method: Rhino.Display.DisplayPipelineAttributes.GetFill(out Color topLeft, out Color bottomLeft, out Color topRight, out Color bottomRight)
Return: void
Modifiers: public
Summary: Get fill colors used for clearing the frame buffer

Method: Rhino.Display.DisplayPipelineAttributes.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceEdgeThicknessUsage()
Return: SurfaceThicknessUse
Modifiers: public
Summary: Helper function for setting the SurfaceEdgeThicknessFlags

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoApplyPattern(out bool u, out bool v, out bool w)
Return: void
Modifiers: public
Parameter: u (bool)
Parameter Summary: Gets mode in the u direction
Parameter: v (bool)
Parameter Summary: Gets mode in the v direction
Parameter: w (bool)
Parameter Summary: Gets mode in the w direction

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoColorUsage()
Return: SurfaceIsoColorUse
Modifiers: public
Summary: Helper function for getting SurfaceIsoColorsUsed and SurfaceSingleIsoColor

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceIsoThicknessUsage()
Return: SurfaceIsoThicknessUse
Modifiers: public
Summary: This is a helper function that combines getting IsoThicknessUsed and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.GetSurfaceNakedEdgeThicknessUsage()
Return: SurfaceNakedEdgeThicknessUse
Modifiers: public
Summary: This is a helper function that combines getting SurfaceNakeEdgeUseNormalThickness and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.HasColorFadeEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a color fade effect enabled with a color fade effect amount larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.HasDiagonalHatchEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a diagonal hatch effect enabled with a hatch strength larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.HasDitherTransparencyEffect()
Return: bool
Modifiers: public
Summary: Returns TRUE if there is a dither transparency effect enabled with a transparency amount larger than 0.0, FALSE otherwise.

Method: Rhino.Display.DisplayPipelineAttributes.SetColorFadeEffect(in Color fadeColor, in float fadeAmount)
Return: void
Modifiers: public
Summary: Set a color fade effect to make objects fade a given amount towards a given color.
Parameter: fadeColor (Color)
Parameter Summary: The amount of fade towards the given color (0..1).
Parameter: fadeAmount (float)
Parameter Summary: The color to fade towards.

Method: Rhino.Display.DisplayPipelineAttributes.SetCurveThicknessUsage(CurveThicknessUse usage)
Return: void
Modifiers: public
Summary: Sets usage, pixel thickness (CurveThickness) or a scale thickness (CurveThicknessScale)

Method: Rhino.Display.DisplayPipelineAttributes.SetDiagonalHatchEffect(in float hatchStrength, in float hatchWidth)
Return: void
Modifiers: public
Summary: Set a diagonal hatch effect to make objects render with diagonal hatch with a given strength and width in pixels. The effect works by brightening and darkening pixels in a diagonal pattern.
Parameter: hatchStrength (float)
Parameter Summary: The strength of the hatch effect (0..1).
Parameter: hatchWidth (float)
Parameter Summary: The width of the diagonal hatch in pixels (>= 0).

Method: Rhino.Display.DisplayPipelineAttributes.SetDitherTransparencyEffect(in float transparencyAmount)
Return: void
Modifiers: public
Summary: Set a dither transparency effect to make objects render with a given amount of transparency using a dither effect.
Parameter: transparencyAmount (float)
Parameter Summary: The amount of transparency (0..1).

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color gradientTopLeft, Color gradientBottomLeft, Color gradientTopRight, Color gradientBottomRight)
Return: void
Modifiers: public
Summary: Set the fill mode to four color gradient and set the colors

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color gradientTop, Color gradientBottom)
Return: void
Modifiers: public
Summary: Set fill mode to two color and set the colors

Method: Rhino.Display.DisplayPipelineAttributes.SetFill(Color singleColor)
Return: void
Modifiers: public
Summary: Set fill mode to solid color and set the fill color

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceEdgeThicknessUsage(SurfaceThicknessUse use)
Return: void
Modifiers: public
Summary: Helper function for getting the SurfaceEdgeThicknessFlags

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoApplyPattern(bool u, bool v, bool w)
Return: void
Modifiers: public

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoColorUsage(SurfaceIsoColorUse use)
Return: void
Modifiers: public
Summary: Helper function for setting SurfaceIsoColorsUsed and SurfaceIsoSingleColor

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceIsoThicknessUsage(SurfaceIsoThicknessUse value)
Return: void
Modifiers: public
Summary: This is a helper function that combines setting IsoThicknessUsed and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Method: Rhino.Display.DisplayPipelineAttributes.SetSurfaceNakedEdgeThicknessUsage(SurfaceNakedEdgeThicknessUse use)
Return: void
Modifiers: public
Summary: This is a helper function that combines setting SurfaceNakeEdgeUseNormalThickness and SurfaceNakedEdgeThicknessUsageFlags settings to correspond to the behavor of the Settings page.

Class: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.AllMeshWiresColor
Return: Color
Modifiers: public
Summary: Color.Empty means that we are NOT using a single color for all mesh wires.
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.HighlightMeshes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.MeshWireThickness
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.ShowMeshVertices
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.ShowMeshWires
Return: bool
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.BlendGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawGridAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawTransparentGridPlane
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawWorldAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.DrawZAxis
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.HorizontalViewportScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.ShowGridOnTop
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.UseDocumentGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.VerticalViewportScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorX
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorY
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPipelineAttributes.ViewDisplayAttributes.WorldAxisColorZ
Return: Color
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPoint
Summary: A 3d point with attributes used by the display pipeline

Constructor: Rhino.Display.DisplayPoint.DisplayPoint(Point3d location)

Property: Rhino.Display.DisplayPoint.Location
Return: Point3d
Modifiers: public
Accessors: get

Method: Rhino.Display.DisplayPoint.WithAttributes(DisplayPointAttributes attributes)
Return: DisplayPoint
Modifiers: public

Class: Rhino.Display.DisplayPointAttributes

Constructor: Rhino.Display.DisplayPointAttributes.DisplayPointAttributes()

Constructor: Rhino.Display.DisplayPointAttributes.DisplayPointAttributes(DisplayPointAttributes attributes)

Property: Rhino.Display.DisplayPointAttributes.Diameter
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.FillColor
Return: Color?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.PointStyle
Return: PointStyle?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.RotationRadians
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.SecondarySize
Return: float?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.StrokeColor
Return: Color?
Modifiers: public
Accessors: get set

Property: Rhino.Display.DisplayPointAttributes.StrokeWidth
Return: float?
Modifiers: public
Accessors: get set

Class: Rhino.Display.DisplayPointSet

Constructor: Rhino.Display.DisplayPointSet.DisplayPointSet()
Summary: Initializes a new instance of the DisplayPointSet class

Method: Rhino.Display.DisplayPointSet.Create(IEnumerable<DisplayPoint> points)
Return: DisplayPointSet
Modifiers: public, static

Method: Rhino.Display.DisplayPointSet.Dispose()
Return: void
Modifiers: public

Class: Rhino.Display.DrawEventArgs

Property: Rhino.Display.DrawEventArgs.Display
Return: DisplayPipeline
Modifiers: public
Accessors: get

Property: Rhino.Display.DrawEventArgs.RhinoDoc
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.DrawEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Class: Rhino.Display.DrawForegroundEventArgs

Property: Rhino.Display.DrawForegroundEventArgs.DrawWorldAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DrawForegroundEventArgs.WorldAxesDrawn
Return: bool
Modifiers: public
Accessors: get set

Class: Rhino.Display.DrawObjectEventArgs

Property: Rhino.Display.DrawObjectEventArgs.DrawObject
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.DrawObjectEventArgs.RhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Class: Rhino.Display.InitFrameBufferEventArgs

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color topLeft, System.Drawing.Color bottomLeft, System.Drawing.Color topRight, System.Drawing.Color bottomRight)
Return: void
Modifiers: public

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color top, System.Drawing.Color bottom)
Return: void
Modifiers: public

Method: Rhino.Display.InitFrameBufferEventArgs.SetFill(System.Drawing.Color color)
Return: void
Modifiers: public

Class: Rhino.Display.PageViewPropertiesChangeEventArgs
Summary: PageView properties change event arguments.

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the Rhino document.
Accessors: get

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.DocumentSerialNumber
Return: uint
Modifiers: public
Summary: The serial number of the Rhino document.
Accessors: get set

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.PageView
Return: RhinoPageView
Modifiers: public
Summary: Gets the Rhino page view.
Accessors: get

Property: Rhino.Display.PageViewPropertiesChangeEventArgs.PageViewSerialNumber
Return: uint
Modifiers: public
Summary: The serial number of the page view.
Accessors: get set

Class: Rhino.Display.PageViewSpaceChangeEventArgs

Property: Rhino.Display.PageViewSpaceChangeEventArgs.NewActiveDetailId
Return: Guid
Modifiers: public
Summary: The id of the detail object was set active.  Note, if this id is equal to Guid.Empty, then the active detail object is the page view itself.
Accessors: get set

Property: Rhino.Display.PageViewSpaceChangeEventArgs.OldActiveDetailId
Return: Guid
Modifiers: public
Summary: The id of the previously active detail object. Note, if this id is equal to Guid.Empty, then the active detail object was the page view itself.
Accessors: get set

Property: Rhino.Display.PageViewSpaceChangeEventArgs.PageView
Return: RhinoPageView
Modifiers: public
Summary: The page view on which a different detail object was set active.
Accessors: get

Class: Rhino.Display.RhinoPageView
Summary: A window that contains a single layout 'page'

Property: Rhino.Display.RhinoPageView.ActiveDetail
Return: DetailViewObject
Modifiers: public
Summary: Returns the active detail object. If no detail is active, or if the page is active, then None is returned.
Accessors: get

Property: Rhino.Display.RhinoPageView.ActiveDetailId
Return: Guid
Modifiers: public
Summary: Returns the id of the active detail. If no detail is active, or if the page is active, then Guid.Empty is returned.
Accessors: get

Property: Rhino.Display.RhinoPageView.ActiveViewport
Return: RhinoViewport
Modifiers: public, override
Summary: Gets the active viewport. The ActiveViewport is the same as the MainViewport for standard RhinoViews. In a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object. Most of the time, you will use ActiveViewport unless you explicitly need to work with the main viewport.
Accessors: get

Property: Rhino.Display.RhinoPageView.PageHeight
Return: double
Modifiers: public
Summary: Height of the page in the document's PageUnitSystem
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageIsActive
Return: bool
Modifiers: public
Summary: Returns True if the page is active, rather than any detail view. This occurs when the MainViewport.Id == ActiveViewportID.
Accessors: get

Property: Rhino.Display.RhinoPageView.PageName
Return: string
Modifiers: public
Summary: Same as the MainViewport.Name.
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageNumber
Return: int
Modifiers: public
Summary: Gets or sets the runtime page number and updates the page number for all of the other pages. The first page has a value of 0.
Accessors: get set

Property: Rhino.Display.RhinoPageView.PageWidth
Return: double
Modifiers: public
Summary: Width of the page in the document's PageUnitSystem
Accessors: get set

Property: Rhino.Display.RhinoPageView.PaperName
Return: string
Modifiers: public
Summary: Returns the name of the layout's media, or paper (e.g. Letter, Legal, A1, etc.), used to determine the page width and page height.
Accessors: get

Property: Rhino.Display.RhinoPageView.PrinterName
Return: string
Modifiers: public
Summary: Returns the name of the layout's destination printer.
Accessors: get

Method: Rhino.Display.RhinoPageView.AddDetailView(string title, Geometry.Point2d corner0, Geometry.Point2d corner1, DefinedViewportProjection initialProjection)
Return: DetailViewObject
Modifiers: public
Summary: Creates a detail view object that is displayed on this page and adds it to the document.
Parameter: title (string)
Parameter Summary: The detail view title.
Parameter: corner0 (Geometry.Point2d)
Parameter Summary: Corners of the detail view in world coordinates.
Parameter: corner1 (Geometry.Point2d)
Parameter Summary: Corners of the detail view in world coordinates.
Parameter: initialProjection (DefinedViewportProjection)
Parameter Summary: The defined initial projection type.

Method: Rhino.Display.RhinoPageView.Duplicate(bool duplicatePageGeometry)
Return: RhinoPageView
Modifiers: public
Summary: Copies a page view.
Parameter: duplicatePageGeometry (bool)
Parameter Summary: Set True if you want the page view geometry copied, along with the view.

Method: Rhino.Display.RhinoPageView.GetDetailViews()
Return: DetailViewObject[]
Modifiers: public
Summary: Gets a list of the detail view objects associated with this layout.

Method: Rhino.Display.RhinoPageView.GetPreviewImage(System.Drawing.Size size, bool grayScale)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview image of the page.
Parameter: size (System.Drawing.Size)
Parameter Summary: The size of the preview image.
Parameter: grayScale (bool)
Parameter Summary: Set True to produce a grayscale image, False to produce a color image.

Method: Rhino.Display.RhinoPageView.SetActiveDetail(string detailName, bool compareCase)
Return: bool
Modifiers: public
Summary: Sets the active detail.
Parameter: detailName (string)
Parameter Summary: The name, or title, of the detail to set active.
Parameter: compareCase (bool)
Parameter Summary: Unused.

Method: Rhino.Display.RhinoPageView.SetActiveDetail(System.Guid detailId)
Return: bool
Modifiers: public
Summary: Sets the active detail.
Parameter: detailId (System.Guid)
Parameter Summary: The id of the detail view object to set active.

Method: Rhino.Display.RhinoPageView.SetPageAsActive()
Return: void
Modifiers: public
Summary: Deactivates the active details and sets the page view as active.

Class: Rhino.Display.RhinoView
Summary: A RhinoView represents a single "window" display of a document. A view could contain one or many RhinoViewports (many in the case of Layout views with detail viewports). Standard Rhino modeling views have one viewport.

Property: Rhino.Display.RhinoView.EnableDrawing
Return: bool
Modifiers: public, static
Summary: Gets or sets the 'drawing enabled' flag. By default, drawing is enabled.
There are some rare situations where scripts want to disable drawing for a while. | Since: 5.0 | Accessors: get set

Property: Rhino.Display.RhinoView.ActiveViewport
Return: RhinoViewport
Modifiers: public, virtual
Summary: The ActiveViewport is the same as the MainViewport for standard RhinoViews. In a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object. Most of the time, you will use ActiveViewport unless you explicitly need to work with the main viewport.
Accessors: get

Property: Rhino.Display.RhinoView.ActiveViewportID
Return: Guid
Modifiers: public
Summary: Returns viewport ID for the active viewport. Faster than ActiveViewport function when working with page views.
Accessors: get

Property: Rhino.Display.RhinoView.Bounds
Return: Rectangle
Modifiers: public
Summary: Gets the size and location of the view including its non-client elements, in pixels, relative to the parent control.
Accessors: get

Property: Rhino.Display.RhinoView.ClientRectangle
Return: Rectangle
Modifiers: public
Summary: Gets the rectangle that represents the client area of the view.
Accessors: get

Property: Rhino.Display.RhinoView.DisplayPipeline
Return: DisplayPipeline
Modifiers: public
Summary: Gets the display pipeline used for this view.
Accessors: get

Property: Rhino.Display.RhinoView.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoView.Floating
Return: bool
Modifiers: public
Summary: Floating state of RhinoView. if true, then the view will be in a floating frame window. Otherwise the view will be embedded in the main frame.
Accessors: get set

Property: Rhino.Display.RhinoView.Handle
Return: IntPtr
Modifiers: public
Summary: Gets the window handle that this view is bound to.
Accessors: get

Property: Rhino.Display.RhinoView.InDynamicViewChange
Return: bool
Modifiers: public
Summary: True if the view is being dynamically changed by mouse moves, arrow keys, trackballs, etc.
Accessors: get

Property: Rhino.Display.RhinoView.MainViewport
Return: RhinoViewport
Modifiers: public
Summary: A RhinoView contains a "main viewport" that fills the entire view client window. RhinoPageViews may also contain nested child RhinoViewports for implementing detail viewports. The MainViewport will always return this RhinoView's m_vp.
Accessors: get

Property: Rhino.Display.RhinoView.Maximized
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoView.RealtimeDisplayMode
Return: RealtimeDisplayMode
Modifiers: public
Summary: Gets the RealtimeDisplayMode active for this view. None if the view doesn't have a RealtimeDisplayMode set.
Accessors: get

Property: Rhino.Display.RhinoView.RuntimeSerialNumber
Return: uint
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoView.ScreenRectangle
Return: Rectangle
Modifiers: public
Summary: Gets the rectangle that represents the client area of the view in screen coordinates.
Accessors: get

Property: Rhino.Display.RhinoView.Size
Return: Size
Modifiers: public
Summary: Gets or sets the size of the view
Accessors: get set

Property: Rhino.Display.RhinoView.TitleVisible
Return: bool
Modifiers: public
Summary: Visibility of the viewport title window.
Accessors: get set

Method: Rhino.Display.RhinoView.FromRuntimeSerialNumber(uint serialNumber)
Return: RhinoView
Modifiers: public, static
Summary: Get a RhinoView from it's unique runtime serial number

Method: Rhino.Display.RhinoView.CaptureToBitmap()
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap.

Method: Rhino.Display.RhinoView.CaptureToBitmap(bool grid, bool worldAxes, bool cplaneAxes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures the view contents to a bitmap allowing for visibility of grid and axes.
Parameter: grid (bool)
Parameter Summary: True if the construction plane grid should be visible.
Parameter: worldAxes (bool)
Parameter Summary: True if the world axis should be visible.
Parameter: cplaneAxes (bool)
Parameter Summary: True if the construction plane close the grid should be visible.

Method: Rhino.Display.RhinoView.CaptureToBitmap(DisplayModeDescription mode)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using a display mode description to define how drawing is performed.
Parameter: mode (DisplayModeDescription)
Parameter Summary: The display mode.

Method: Rhino.Display.RhinoView.CaptureToBitmap(DisplayPipelineAttributes attributes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures view contents to a bitmap using display attributes to define how drawing is performed.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The specific display mode attributes.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, bool grid, bool worldAxes, bool cplaneAxes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Captures a part of the view contents to a bitmap allowing for visibility of grid and axes.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: grid (bool)
Parameter Summary: True if the construction plane grid should be visible.
Parameter: worldAxes (bool)
Parameter Summary: True if the world axis should be visible.
Parameter: cplaneAxes (bool)
Parameter Summary: True if the construction plane close the grid should be visible.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, DisplayModeDescription mode)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using a display mode description to define how drawing is performed.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: mode (DisplayModeDescription)
Parameter Summary: The display mode.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size, DisplayPipelineAttributes attributes)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap using display attributes to define how drawing is performed.
Parameter: size (System.Drawing.Size)
Parameter Summary: The width and height of the returned bitmap.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The specific display mode attributes.

Method: Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size size)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Capture View contents to a bitmap.
Parameter: size (System.Drawing.Size)
Parameter Summary: Size of Bitmap to capture to.

Method: Rhino.Display.RhinoView.ClientToScreen(Geometry.Point2d clientPoint)
Return: Geometry.Point2d
Modifiers: public

Method: Rhino.Display.RhinoView.ClientToScreen(System.Drawing.Point clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoView.Close()
Return: bool
Modifiers: public
Summary: Remove this View from Rhino. DO NOT attempt to use this instance of this class after calling Close.

Method: Rhino.Display.RhinoView.CreateShadedPreviewImage(string imagePath, System.Drawing.Size size, bool ignoreHighlights, bool drawConstructionPlane, bool useGhostedShading)
Return: bool
Modifiers: public
Summary: Creates a bitmap preview image of model.
Parameter: imagePath (string)
Parameter Summary: [in] The name of the bitmap file to create.  The extension of the imagePath controls the format of the bitmap file created (BMP, TGA, JPG, PCX, PNG, TIF).
Parameter: size (System.Drawing.Size)
Parameter Summary: [in] The width and height of the bitmap in pixels.
Parameter: ignoreHighlights (bool)
Parameter Summary: True if highlighted elements should be drawn normally.
Parameter: drawConstructionPlane (bool)
Parameter Summary: True if the CPlane should be drawn.
Parameter: useGhostedShading (bool)
Parameter Summary: True if ghosted shading (partially transparent shading) should be used.

Method: Rhino.Display.RhinoView.CreateWireframePreviewImage(string imagePath, System.Drawing.Size size, bool ignoreHighlights, bool drawConstructionPlane)
Return: bool
Modifiers: public
Summary: Creates a bitmap preview image of model.
Parameter: imagePath (string)
Parameter Summary: [in] The name of the bitmap file to create.  The extension of the imagePath controls the format of the bitmap file created (BMP, TGA, JPG, PCX, PNG, TIF).
Parameter: size (System.Drawing.Size)
Parameter Summary: [in] The width and height of the bitmap in pixels.
Parameter: ignoreHighlights (bool)
Parameter Summary: True if highlighted elements should be drawn normally.
Parameter: drawConstructionPlane (bool)
Parameter Summary: True if the CPlane should be drawn.

Method: Rhino.Display.RhinoView.Equals(object obj)
Return: bool
Modifiers: public, override

Method: Rhino.Display.RhinoView.GetHashCode()
Return: int
Modifiers: public, override

Method: Rhino.Display.RhinoView.MouseCaptured(bool bIncludeMovement)
Return: bool
Modifiers: public
Summary: Returns whether or not the mouse is captured in this view.
Parameter: bIncludeMovement (bool)
Parameter Summary: If captured, test if the mouse has moved between mouse button down and mouse button up.

Method: Rhino.Display.RhinoView.Redraw()
Return: void
Modifiers: public
Summary: Redraws this view.

Method: Rhino.Display.RhinoView.ScreenToClient(Geometry.Point2d screenPoint)
Return: Geometry.Point2d
Modifiers: public

Method: Rhino.Display.RhinoView.ScreenToClient(System.Drawing.Point screenPoint)
Return: System.Drawing.Point
Modifiers: public
Summary: Converts a point in screen coordinates to client coordinates for this view.
Parameter: screenPoint (System.Drawing.Point)
Parameter Summary: The 2D screen point.

Method: Rhino.Display.RhinoView.ShowToast(string message, int textHeight, System.Drawing.PointF location)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown
Parameter: textHeight (int)
Parameter Summary: The height of the message
Parameter: location (System.Drawing.PointF)
Parameter Summary: The location of the message

Method: Rhino.Display.RhinoView.ShowToast(string message, int textHeight)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown
Parameter: textHeight (int)
Parameter Summary: The height of the message

Method: Rhino.Display.RhinoView.ShowToast(string message)
Return: uint
Modifiers: public
Summary: Shows a temporary popup message in the lower right corner of the view
Parameter: message (string)
Parameter Summary: The message to be shown

Method: Rhino.Display.RhinoView.SpeedTest(int frameCount, bool freezeDrawList, int direction, double angleDeltaRadians)
Return: double
Modifiers: public

Class: Rhino.Display.RhinoViewport
Summary: Displays geometry with a given projection. In standard modeling views there is a one to one relationship between RhinoView and RhinoViewports. In a page layout, there may be multiple RhinoViewports for a single layout.

Constructor: Rhino.Display.RhinoViewport.RhinoViewport()

Constructor: Rhino.Display.RhinoViewport.RhinoViewport(RhinoViewport other)

Property: Rhino.Display.RhinoViewport.Bounds
Return: Rectangle
Modifiers: public
Summary: Gets the size and location of the viewport, in pixels, relative to the parent view.
Accessors: get

Property: Rhino.Display.RhinoViewport.Camera35mmLensLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.CameraDirection
Return: Vector3d
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraLocation
Return: Point3d
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraTarget
Return: Point3d
Modifiers: public
Summary: Viewport target point.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraUp
Return: Vector3d
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.CameraX
Return: Vector3d
Modifiers: public
Summary: Gets the "unit to the right" vector.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraY
Return: Vector3d
Modifiers: public
Summary: Gets the "unit up" vector.
Accessors: get

Property: Rhino.Display.RhinoViewport.CameraZ
Return: Vector3d
Modifiers: public
Summary: Gets the unit vector in CameraDirection.
Accessors: get

Property: Rhino.Display.RhinoViewport.ChangeCounter
Return: uint
Modifiers: public
Summary: The value of change counter is incremented every time the view projection or construction plane changes. The user can the mouse and nestable view manipulation commands to change a view at any time. The value of change counter can be used to detect these changes in code that is sensitive to the view projection.
Accessors: get

Property: Rhino.Display.RhinoViewport.ConstructionAxesVisible
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.ConstructionGridVisible
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.DisplayMode
Return: DisplayModeDescription
Modifiers: public
Accessors: get set

Property: Rhino.Display.RhinoViewport.FrustumAspect
Return: double
Modifiers: public
Summary: Gets the width/height ratio of the frustum.
Accessors: get

Property: Rhino.Display.RhinoViewport.Id
Return: Guid
Modifiers: public
Summary: Unique id for this viewport.
Accessors: get

Property: Rhino.Display.RhinoViewport.IsParallelProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsPerspectiveProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsPlanView
Return: bool
Modifiers: public
Summary: True if construction plane z axis is parallel to camera direction.
Accessors: get

Property: Rhino.Display.RhinoViewport.IsTwoPointPerspectiveProjection
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsValidCamera
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.IsValidFrustum
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.LockedProjection
Return: bool
Modifiers: public
Summary: If true, the the camera location, camera direction, and lens angle should not be changed.
Accessors: get set

Property: Rhino.Display.RhinoViewport.Name
Return: string
Modifiers: public
Summary: Name associated with this viewport.
Accessors: get set

Property: Rhino.Display.RhinoViewport.ParentView
Return: RhinoView
Modifiers: public
Summary: Gets the parent view, if there is one  Every RhinoView has an associated RhinoViewport that does all the 3d display work. Those associated viewports return the RhinoView as their parent view. However, RhinoViewports are used in other image creating contexts that do not have a parent RhinoView.  If you call ParentView, you MUST check for NULL return values.
Accessors: get

Property: Rhino.Display.RhinoViewport.ScreenPortAspect
Return: double
Modifiers: public
Summary: screen port's width/height.
Accessors: get

Property: Rhino.Display.RhinoViewport.Size
Return: Size
Modifiers: public
Summary: Get or set the height and width of the viewport (in pixels)
Accessors: get set

Property: Rhino.Display.RhinoViewport.UserStringCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.ViewportType
Return: ViewportType
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperFilename
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperGrayscale
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WallpaperVisible
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.RhinoViewport.WorldAxesVisible
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Display.RhinoViewport.FromId(System.Guid id)
Return: RhinoViewport
Modifiers: public, static
Summary: Call this method to get the viewport with the specified Id.
Parameter: id (System.Guid)
Parameter Summary: Id to search for.

Method: Rhino.Display.RhinoViewport.ChangeToParallelProjection(bool symmetricFrustum)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from perspective to parallel. It will make common additional adjustments to the frustum so the resulting views are similar. The camera location and direction will not be changed.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.

Method: Rhino.Display.RhinoViewport.ChangeToParallelReflectedProjection()
Return: bool
Modifiers: public
Summary: When a viewport is set to Parallel Reflected projection, the geometry on the ceiling is shown as if it is mirrored to the floor below.

Method: Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(bool symmetricFrustum, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective. It will make common additional adjustments to the frustum and camera location so the resulting views are similar. The camera direction and target point are not be changed.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(double targetDistance, bool symmetricFrustum, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective. It will make common additional adjustments to the frustum and camera location so the resulting views are similar. The camera direction and target point are not be changed.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(double targetDistance, Rhino.Geometry.Vector3d up, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports to a two point perspective.  It will make common additional adjustments to the frustum and camera location and direction so the resulting views are similar.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: up (Rhino.Geometry.Vector3d)
Parameter Summary: This direction will be the locked up direction.  Pass ON_3dVector::ZeroVector if you want to use the world axis direction that is closest to the current up direction. Pass CameraY() if you want to preserve the current up direction.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ChangeToTwoPointPerspectiveProjection(double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports to a two point perspective.  It will make common additional adjustments to the frustum and camera location and direction so the resulting views are similar.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.Display.RhinoViewport.ClearTraceImage()
Return: void
Modifiers: public
Summary: Remove trace image (background bitmap) for this viewport if one exists.

Method: Rhino.Display.RhinoViewport.ClientToScreen(Point2d clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToScreen(System.Drawing.Point clientPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToWorld(Point2d clientPoint)
Return: Line
Modifiers: public

Method: Rhino.Display.RhinoViewport.ClientToWorld(System.Drawing.Point clientPoint)
Return: Line
Modifiers: public

Method: Rhino.Display.RhinoViewport.ConstructionPlane()
Return: Plane
Modifiers: public
Summary: Simple plane information for this viewport's construction plane. If you want detailed construction plane information, use GetConstructionPlane.

Method: Rhino.Display.RhinoViewport.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.Dispose()
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Display.RhinoViewport.GetCameraAngle(out double halfDiagonalAngle, out double halfVerticalAngle, out double halfHorizontalAngle)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetCameraExtents(IEnumerable<Point3d> points)
Return: BoundingBox
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetCameraFrame(out Plane frame)
Return: bool
Modifiers: public
Summary: Gets the camera plane.
Parameter: frame (Plane)
Parameter Summary: A plane is assigned to this out parameter during the call, if the operation succeeded.

Method: Rhino.Display.RhinoViewport.GetConstructionPlane()
Return: DocObjects.ConstructionPlane
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetDepth(BoundingBox bbox, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a bounding box.
Parameter: bbox (BoundingBox)
Parameter Summary: The bounding box.
Parameter: nearDistance (double)
Parameter Summary: The near distance is assigned to this out parameter during this call.
Parameter: farDistance (double)
Parameter Summary: The far distance is assigned to this out parameter during this call.

Method: Rhino.Display.RhinoViewport.GetDepth(Point3d point, out double distance)
Return: bool
Modifiers: public
Summary: Gets clipping distance of a point.
Parameter: point (Point3d)
Parameter Summary: A 3D point.
Parameter: distance (double)
Parameter Summary: A computed distance is assigned to this out parameter if this call succeeds.

Method: Rhino.Display.RhinoViewport.GetDepth(Sphere sphere, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: The sphere.
Parameter: nearDistance (double)
Parameter Summary: The near distance is assigned to this out parameter during this call.
Parameter: farDistance (double)
Parameter Summary: The far distance is assigned to this out parameter during this call.

Method: Rhino.Display.RhinoViewport.GetFarRect()
Return: Point3d[]
Modifiers: public
Summary: Get corners of far clipping plane rectangle.

Method: Rhino.Display.RhinoViewport.GetFrustum(out double left, out double right, out double bottom, out double top, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets the view frustum.
Parameter: left (double)
Parameter Summary: left < right.
Parameter: right (double)
Parameter Summary: left < right.
Parameter: bottom (double)
Parameter Summary: bottom < top.
Parameter: top (double)
Parameter Summary: bottom < top.
Parameter: nearDistance (double)
Parameter Summary: 0 < nearDistance < farDistance.
Parameter: farDistance (double)
Parameter Summary: 0 < nearDistance < farDistance.

Method: Rhino.Display.RhinoViewport.GetFrustumBottomPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get bottom world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum bottom side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumBoundingBox()
Return: BoundingBox
Modifiers: public

Method: Rhino.Display.RhinoViewport.GetFrustumCenter(out Point3d center)
Return: bool
Modifiers: public
Summary: Returns world coordinates of frustum's center.
Parameter: center (Point3d)
Parameter Summary: The center coordinate is assigned to this out parameter if this call succeeds.

Method: Rhino.Display.RhinoViewport.GetFrustumFarPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get far clipping plane.
Parameter: plane (Plane)
Parameter Summary: far clipping plane if camera and frustum are valid. The plane's frame is the same as the camera's frame. The origin is located at the intersection of the camera direction ray and the far clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumLeftPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get left world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum left side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumLine(double screenX, double screenY, out Line worldLine)
Return: bool
Modifiers: public
Summary: Gets the world coordinate line in the view frustum that projects to a point on the screen.
Parameter: screenX (double)
Parameter Summary: (screenx,screeny) = screen location.
Parameter: screenY (double)
Parameter Summary: (screenx,screeny) = screen location.
Parameter: worldLine (Line)
Parameter Summary: 3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumNearPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get near clipping plane.
Parameter: plane (Plane)
Parameter Summary: near clipping plane if camera and frustum are valid. The plane's frame is the same as the camera's frame. The origin is located at the intersection of the camera direction ray and the near clipping plane.

Method: Rhino.Display.RhinoViewport.GetFrustumRightPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get right world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum right side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetFrustumTopPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Get top world frustum clipping plane.
Parameter: plane (Plane)
Parameter Summary: frustum top side clipping plane. The normal points into the visible region of the frustum. If the projection is perspective, the origin is at the camera location, otherwise the origin is the point on the plane that is closest to the camera location.

Method: Rhino.Display.RhinoViewport.GetNearRect()
Return: Point3d[]
Modifiers: public
Summary: Get corners of near clipping plane rectangle.

Method: Rhino.Display.RhinoViewport.GetPickTransform(int clientX, int clientY)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box. This takes a single point and inflates it by Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define the screen rectangle.
Parameter: clientX (int)
Parameter Summary: The client point X coordinate.
Parameter: clientY (int)
Parameter Summary: The client point Y coordinate.

Method: Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Point clientPoint)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box. This takes a single point and inflates it by Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define the screen rectangle.
Parameter: clientPoint (System.Drawing.Point)
Parameter Summary: The client point.

Method: Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Rectangle clientRectangle)
Return: Transform
Modifiers: public
Summary: Takes a rectangle in screen coordinates and returns a transformation that maps the 3d frustum defined by the rectangle to a -1/+1 clipping coordinate box.
Parameter: clientRectangle (System.Drawing.Rectangle)
Parameter Summary: The client rectangle.

Method: Rhino.Display.RhinoViewport.GetScreenPort(out int portLeft, out int portRight, out int portBottom, out int portTop, out int portNear, out int portFar)
Return: bool
Modifiers: public
Summary: Location of viewport in pixels.  These are provided so you can set the port you are using and get the appropriate transformations to and from screen space.
Parameter: portLeft (int)
Parameter Summary: portLeft != portRight.
Parameter: portRight (int)
Parameter Summary: portLeft != portRight.
Parameter: portBottom (int)
Parameter Summary: portTop != portBottom.
Parameter: portTop (int)
Parameter Summary: portTop != portBottom.
Parameter: portNear (int)
Parameter Summary: The viewport near value.
Parameter: portFar (int)
Parameter Summary: The viewport far value.

Method: Rhino.Display.RhinoViewport.GetTransform(DocObjects.CoordinateSystem sourceSystem, DocObjects.CoordinateSystem destinationSystem)
Return: Transform
Modifiers: public
Summary: Gets a transform from origin coordinate system to a target coordinate system.
Parameter: sourceSystem (DocObjects.CoordinateSystem)
Parameter Summary: The origin coordinate system.
Parameter: destinationSystem (DocObjects.CoordinateSystem)
Parameter Summary: The target coordinate system.

Method: Rhino.Display.RhinoViewport.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets a user string.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Display.RhinoViewport.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.

Method: Rhino.Display.RhinoViewport.GetViewScale()
Return: double
Modifiers: public
Summary: Get Scale transform applied to the viewport

Method: Rhino.Display.RhinoViewport.GetWorldToScreenScale(Point3d pointInFrustum, out double pixelsPerUnit)
Return: bool
Modifiers: public
Summary: Gets the world to screen size scaling factor at a point in frustum.
Parameter: pointInFrustum (Point3d)
Parameter Summary: A point in frustum.
Parameter: pixelsPerUnit (double)
Parameter Summary: scale = number of pixels per world unit at the 3d point.
This out parameter is assigned during this call.

Method: Rhino.Display.RhinoViewport.IsVisible(BoundingBox bbox)
Return: bool
Modifiers: public
Summary: Returns True if some portion of a world coordinate bounding box is potentially visible in the viewing frustum.
Parameter: bbox (BoundingBox)
Parameter Summary: A bounding box that is tested for visibility.

Method: Rhino.Display.RhinoViewport.IsVisible(Point3d point)
Return: bool
Modifiers: public
Summary: Determines if a world coordinate point is visible in the viewing frustum.
Parameter: point (Point3d)
Parameter Summary: A point that is tested for visibility.

Method: Rhino.Display.RhinoViewport.KeyboardDolly(bool leftRight, double amount)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: leftRight (bool)
Parameter Summary: left/right dolly if true, up/down dolly if false.
Parameter: amount (double)
Parameter Summary: The dolly amount.

Method: Rhino.Display.RhinoViewport.KeyboardDollyInOut(double amount)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: amount (double)
Parameter Summary: The dolly amount.

Method: Rhino.Display.RhinoViewport.KeyboardRotate(bool leftRight, double angleRadians)
Return: bool
Modifiers: public
Summary: Emulates the keyboard arrow key in terms of interaction.
Parameter: leftRight (bool)
Parameter Summary: left/right rotate if true, up/down rotate if false.
Parameter: angleRadians (double)
Parameter Summary: If less than 0, rotation is to left or down. If greater than 0, rotation is to right or up.

Method: Rhino.Display.RhinoViewport.Magnify(double magnificationFactor, bool mode, System.Drawing.Point fixedScreenPoint)
Return: bool
Modifiers: public
Summary: Zooms or dollies in order to scale the viewport projection of observed objects.
Parameter: magnificationFactor (double)
Parameter Summary: The scale factor.
Parameter: mode (bool)
Parameter Summary: False = perform a "dolly" magnification by moving the camera towards/away from the target so that the amount of the screen subtended by an object changes. True = perform a "zoom" magnification by adjusting the "lens" angle
Parameter: fixedScreenPoint (System.Drawing.Point)
Parameter Summary: A point in the screen that should remain fixed.

Method: Rhino.Display.RhinoViewport.Magnify(double magnificationFactor, bool mode)
Return: bool
Modifiers: public
Summary: Zooms or dollies in order to scale the viewport projection of observed objects.
Parameter: magnificationFactor (double)
Parameter Summary: The scale factor.
Parameter: mode (bool)
Parameter Summary: False = perform a "dolly" magnification by moving the camera towards/away from the target so that the amount of the screen subtended by an object changes. True = perform a "zoom" magnification by adjusting the "lens" angle

Method: Rhino.Display.RhinoViewport.MouseAdjustLensLength(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint, bool moveTarget)
Return: bool
Modifiers: public
Summary: Adjusts the camera lens length.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.
Parameter: moveTarget (bool)
Parameter Summary: Should this operation move the target?

Method: Rhino.Display.RhinoViewport.MouseDollyZoom(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Zooms lens (thus adjusting the field of view) while moving the camera.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseInOutDolly(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Moves the camera towards or away from the view maintaining focus on the view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseLateralDolly(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Pans the camera
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseMagnify(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Moves the camera towards or away from the view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseRotateAroundTarget(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Rotates the viewport around target.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseRotateCamera(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Rotates the view around the camera location.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.MouseTilt(System.Drawing.Point mousePreviousPoint, System.Drawing.Point mouseCurrentPoint)
Return: bool
Modifiers: public
Summary: Tilts the camera view.
Parameter: mousePreviousPoint (System.Drawing.Point)
Parameter Summary: The mouse previous point.
Parameter: mouseCurrentPoint (System.Drawing.Point)
Parameter Summary: The mouse current point.

Method: Rhino.Display.RhinoViewport.NextConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to PreviousConstructionPlane.

Method: Rhino.Display.RhinoViewport.NextViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings that were active before the last call to PrevView.

Method: Rhino.Display.RhinoViewport.PopConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to PushConstructionPlane.

Method: Rhino.Display.RhinoViewport.PopViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings at the top of the view stack and removes those settings from the view stack.

Method: Rhino.Display.RhinoViewport.PreviousConstructionPlane()
Return: bool
Modifiers: public
Summary: Sets the construction plane to the plane that was active before the last call to NextConstructionPlane or SetConstructionPlane.

Method: Rhino.Display.RhinoViewport.PreviousViewProjection()
Return: bool
Modifiers: public
Summary: Sets the view projection and target to the settings that were active before the last call to NextViewProjection.

Method: Rhino.Display.RhinoViewport.PushConstructionPlane(DocObjects.ConstructionPlane cplane)
Return: void
Modifiers: public
Summary: Pushes the current construction plane on the viewport's construction plane stack and sets the construction plane to cplane.
Parameter: cplane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to push.

Method: Rhino.Display.RhinoViewport.PushViewInfo(DocObjects.ViewInfo viewinfo, bool includeTraceImage)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.PushViewProjection()
Return: void
Modifiers: public
Summary: Appends the current view projection and target to the viewport's view stack.

Method: Rhino.Display.RhinoViewport.Rotate(double angleRadians, Vector3d rotationAxis, Point3d rotationCenter)
Return: bool
Modifiers: public
Summary: Rotates about the specified axis. A positive rotation angle results in a counter-clockwise rotation about the axis (right hand rule).
Parameter: angleRadians (double)
Parameter Summary: angle of rotation in radians.
Parameter: rotationAxis (Vector3d)
Parameter Summary: direction of the axis of rotation.
Parameter: rotationCenter (Point3d)
Parameter Summary: point on the axis of rotation.

Method: Rhino.Display.RhinoViewport.ScreenToClient(System.Drawing.Point screenPoint)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetCameraDirection(Vector3d cameraDirection, bool updateTargetLocation)
Return: void
Modifiers: public
Summary: Set viewport camera direction. By default the target location is changed so that the vector from the camera location to the target is parallel to the camera direction.
Parameter: cameraDirection (Vector3d)
Parameter Summary: new camera direction.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction. If false, the target location is not changed. See the remarks section of RhinoViewport.SetTarget for important details.

Method: Rhino.Display.RhinoViewport.SetCameraLocation(Point3d cameraLocation, bool updateTargetLocation)
Return: void
Modifiers: public
Summary: Set viewport camera location. By default the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector.
Parameter: cameraLocation (Point3d)
Parameter Summary: new camera location.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector. If false, the target location is not changed. See the remarks section of RhinoViewport.SetTarget for important details.

Method: Rhino.Display.RhinoViewport.SetCameraLocations(Point3d targetLocation, Point3d cameraLocation)
Return: void
Modifiers: public
Summary: Set viewport camera location and target location. The camera direction vector is changed so that it is parallel to the vector from the camera location to the target location.
Parameter: targetLocation (Point3d)
Parameter Summary: new target location.
Parameter: cameraLocation (Point3d)
Parameter Summary: new camera location.

Method: Rhino.Display.RhinoViewport.SetCameraTarget(Point3d targetLocation, bool updateCameraLocation)
Return: void
Modifiers: public
Summary: Set viewport target point. By default the camera location is translated so that the camera direction vector is parallel to the vector from the camera location to the target location.
Parameter: targetLocation (Point3d)
Parameter Summary: new target location.
Parameter: updateCameraLocation (bool)
Parameter Summary: if true, the camera location is translated so that the camera direction vector is parallel to the vector from the camera location to the target location. If false, the camera location is not changed.

Method: Rhino.Display.RhinoViewport.SetClippingPlanes(BoundingBox box)
Return: void
Modifiers: public
Summary: Sets optimal clipping planes to view objects in a world coordinate 3d bounding box.
Parameter: box (BoundingBox)
Parameter Summary: The bounding box

Method: Rhino.Display.RhinoViewport.SetConstructionPlane(DocObjects.ConstructionPlane cplane)
Return: void
Modifiers: public
Summary: Sets the construction plane to cplane.
Parameter: cplane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to set.

Method: Rhino.Display.RhinoViewport.SetConstructionPlane(Plane plane)
Return: void
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetProjection(DefinedViewportProjection projection, string viewName, bool updateConstructionPlane)
Return: bool
Modifiers: public
Summary: Set viewport to a defined projection.
Parameter: projection (DefinedViewportProjection)
Parameter Summary: The "standard" projection type.
Parameter: viewName (string)
Parameter Summary: If not None or empty, the name is set.
Parameter: updateConstructionPlane (bool)
Parameter Summary: If true, the construction plane is set to the viewport plane.

Method: Rhino.Display.RhinoViewport.SetToPlanView(Point3d planeOrigin, Vector3d planeXaxis, Vector3d planeYaxis, bool setConstructionPlane)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetTraceImage(string bitmapFileName, Plane plane, double width, double height, bool grayscale, bool filtered)
Return: bool
Modifiers: public
Summary: Set trace image (background bitmap) for this viewport.
Parameter: bitmapFileName (string)
Parameter Summary: The bitmap file name.
Parameter: plane (Plane)
Parameter Summary: A picture plane.
Parameter: width (double)
Parameter Summary: The picture width.
Parameter: height (double)
Parameter Summary: The picture height.
Parameter: grayscale (bool)
Parameter Summary: True if the picture should be in grayscale.
Parameter: filtered (bool)
Parameter Summary: True if image should be filtered (bilinear) before displayed.

Method: Rhino.Display.RhinoViewport.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key. If null, the key will be removed

Method: Rhino.Display.RhinoViewport.SetViewProjection(DocObjects.ViewportInfo projection, bool updateTargetLocation)
Return: bool
Modifiers: public
Summary: Sets the viewport camera projection.
Parameter: projection (DocObjects.ViewportInfo)
Parameter Summary: The "standard" projection type.
Parameter: updateTargetLocation (bool)
Parameter Summary: if true, the target location is changed so that the vector from the camera location to the target is parallel to the camera direction vector.  If false, the target location is not changed.

Method: Rhino.Display.RhinoViewport.SetWallpaper(string imageFilename, bool grayscale, bool visible)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.SetWallpaper(string imageFilename, bool grayscale)
Return: bool
Modifiers: public

Method: Rhino.Display.RhinoViewport.WorldToClient(Point3d worldPoint)
Return: Point2d
Modifiers: public
Summary: Convert a point from world coordinates in the viewport to a 2d screen point in the local coordinates of the viewport (X/Y of point is relative to top left corner of viewport on screen)
Parameter: worldPoint (Point3d)
Parameter Summary: The 3D point in world coordinates.

Method: Rhino.Display.RhinoViewport.ZoomBoundingBox(BoundingBox box)
Return: bool
Modifiers: public
Summary: Zooms the viewport to the given bounding box.
Parameter: box (BoundingBox)
Parameter Summary: The bounding box to zoom.

Method: Rhino.Display.RhinoViewport.ZoomExtents()
Return: bool
Modifiers: public
Summary: Dollies the camera location and so that the view frustum contains all of the selected document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.

Method: Rhino.Display.RhinoViewport.ZoomExtentsSelected()
Return: bool
Modifiers: public
Summary: Dollies the camera location and so that the view frustum contains all of the selected document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.

Method: Rhino.Display.RhinoViewport.ZoomWindow(Rectangle rect)
Return: bool
Modifiers: public
Summary: Zooms the viewport to the given rectangle.
Parameter: rect (Rectangle)
Parameter Summary: A 2d screen rectangle in client coordinates of the parent Rhino view, where 0,0 is the upper left corner of the view window.

Class: Rhino.Display.Text3d
Summary: 3D aligned text with font settings.

Constructor: Rhino.Display.Text3d.Text3d(string text, Plane plane, double height)
Summary: Constructs a new instance of Text3d.

Constructor: Rhino.Display.Text3d.Text3d(string text)
Summary: Constructs a new instance of Text3d.

Property: Rhino.Display.Text3d.Bold
Return: bool
Modifiers: public
Summary: Gets or sets whether this Text3d object will be drawn in Bold.
Accessors: get set

Property: Rhino.Display.Text3d.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box for this Text3d object.
Accessors: get

Property: Rhino.Display.Text3d.FontFace
Return: string
Modifiers: public
Summary: Gets or sets the FontFace name.
Accessors: get set

Property: Rhino.Display.Text3d.Height
Return: double
Modifiers: public
Summary: Gets or sets the height (in units) of this Text3d object. The height should be a positive number larger than zero.
Accessors: get set

Property: Rhino.Display.Text3d.HorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Horizontal alignment that this Text3d is drawn with
Accessors: get set

Property: Rhino.Display.Text3d.Italic
Return: bool
Modifiers: public
Summary: Gets or sets whether this Text3d object will be drawn in Italics.
Accessors: get set

Property: Rhino.Display.Text3d.Text
Return: string
Modifiers: public
Summary: Gets or sets the text string for this Text3d object.
Accessors: get set

Property: Rhino.Display.Text3d.TextPlane
Return: Plane
Modifiers: public
Summary: Gets or sets the 3D aligned plane for this Text3d object.
Accessors: get set

Property: Rhino.Display.Text3d.VerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Summary: Vertical alignment that this Text3d is drawn with
Accessors: get set

Method: Rhino.Display.Text3d.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Class: Rhino.Display.ViewCapture

Constructor: Rhino.Display.ViewCapture.ViewCapture()

Property: Rhino.Display.ViewCapture.DrawAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.DrawGridAxes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.Height
Return: int
Modifiers: public
Summary: Height of capture in Pixels
Accessors: get set

Property: Rhino.Display.ViewCapture.Preview
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.RealtimeRenderPasses
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.ScaleScreenItems
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.TransparentBackground
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCapture.Width
Return: int
Modifiers: public
Summary: Width of capture in Pixels
Accessors: get set

Method: Rhino.Display.ViewCapture.CaptureToBitmap(ViewCaptureSettings settings)
Return: Bitmap
Modifiers: public, static

Method: Rhino.Display.ViewCapture.CaptureToSvg(ViewCaptureSettings settings)
Return: System.Xml.XmlDocument
Modifiers: public, static

Method: Rhino.Display.ViewCapture.SendToPrinter(string printerName, ViewCaptureSettings[] settings, int copies)
Return: bool
Modifiers: public, static
Summary: Send a list of view capture settings to a printer. Each setting represents a single page.
Parameter: printerName (string)
Parameter Summary: 
Parameter: settings (ViewCaptureSettings[])
Parameter Summary: 
Parameter: copies (int)
Parameter Summary: number of copies to print

Method: Rhino.Display.ViewCapture.SendToPrinter(string printerName, ViewCaptureSettings[] settings)
Return: bool
Modifiers: public, static
Summary: Send a list of view capture settings to a printer. Each setting represents a single page.

Method: Rhino.Display.ViewCapture.CaptureToBitmap(RhinoView sourceView)
Return: Bitmap
Modifiers: public

Class: Rhino.Display.ViewCaptureSettings
Summary: Holds information required to generate high resolution output of a RhinoViewport. This is used for generating paper prints or image files

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings()
Summary: Construct default view capture settings

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(RhinoPageView sourcePageView, double dpi)
Summary: Constructor

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(RhinoView sourceView, Size mediaSize, double dpi)
Summary: Constructor

Constructor: Rhino.Display.ViewCaptureSettings.ViewCaptureSettings(ViewCaptureSettings other)
Summary: Copy constructor

Property: Rhino.Display.ViewCaptureSettings.ApplyDisplayModeThicknessScales
Return: bool
Modifiers: public
Summary: Should curves and edges have their thicknesses scaled based the on the display mode settings for a view being captured (default is false)
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.ArrowheadSizeMillimeters
Return: double
Modifiers: public
Summary: Arrowhead size in millimeters.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.CropRectangle
Return: Rectangle
Modifiers: public
Summary: Actual area of output rectangle that view capture is sent to.
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.DefaultPrintWidthMillimeters
Return: double
Modifiers: public
Summary: Line thickness, in millimeters, used to print objects with no defined thickness.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.Document
Return: RhinoDoc
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawAxis
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawBackground
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawBackgroundBitmap
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawClippingPlanes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawGrid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawLockedObjects
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawMargins
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawRectangle
Return: Rectangle
Modifiers: public
Summary: Rectangle where drawing is confined to on MediaSize
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.DrawSelectedObjectsOnly
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.DrawWallpaper
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.FooterText
Return: string
Modifiers: public
Summary: Text drawn at the bottom of the output
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.HeaderText
Return: string
Modifiers: public
Summary: Text drawn at the top of the output
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.HorizontalScale
Return: double
Modifiers: public
Summary: Horizontal stretch to be applied to output. Useful for calibrating printers
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.IsScaleToFit
Return: bool
Modifiers: public
Summary: Returns True if the model has been scaled to fit.
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.IsValid
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.LinetypeWidthUnitsArePageLengths
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.MatchLinetypePatternDefinition
Return: bool
Modifiers: public
Summary: Default is true. Linetype scales are normally generated right before printing/view capture in order to get linetypes to print to the same lengths as defined. If false, the linetypes are not scaled and the current pattern lengths as seen on the screen as used.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.MediaSize
Return: Size
Modifiers: public
Summary: Total size of the image or page in dots
Accessors: get

Property: Rhino.Display.ViewCaptureSettings.ModelScaleType
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.OffsetAnchor
Return: AnchorLocation
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.OutputColor
Return: ColorMode
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.PointSizeMillimeters
Return: double
Modifiers: public
Summary: Size of point objects in millimeters. if scale <= 0 the size is minimized so points are always drawn as small as possible
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.RasterMode
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.Resolution
Return: double
Modifiers: public
Summary: Capture "density" in dots per inch.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.TextDotPointSize
Return: double
Modifiers: public
Summary: Font point size use for printing text dots. The default value is 10.0. This has morphed into a scale setting as individual text dots have their own sizes. A value of 20 will print dots at double of their size setting while a value of 10 will print with no scaling applied.
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.UsePrintWidths
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.VerticalScale
Return: double
Modifiers: public
Summary: Vertical stretch to be applied to output. Useful for calibrating printers
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.ViewArea
Return: ViewAreaMapping
Modifiers: public
Summary: How the RhinoViewport is mapped to the output rectangle
Accessors: get set

Property: Rhino.Display.ViewCaptureSettings.WireThicknessScale
Return: double
Modifiers: public
Summary: Scaling factor to apply to object print widths (typically 1.0). This is helpful when printing something at 1/2 scale and having all of the curves print 1/2 as thick.
Accessors: get set

Method: Rhino.Display.ViewCaptureSettings.CreatePreviewSettings(System.Drawing.Size size)
Return: ViewCaptureSettings
Modifiers: public
Summary: Create a ViewCaptureSettings based on this instance, but scaled to fit in a different sized area. Scaling is also performed on dpi. This is primarily used to for capturing images that are shown as print previews

Method: Rhino.Display.ViewCaptureSettings.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.ViewCaptureSettings.Equals(ViewCaptureSettings other)
Return: bool
Modifiers: public
Summary: Check if the contents of this object is the same as another object
Parameter: other (ViewCaptureSettings)
Parameter Summary: other settings to compare against

Method: Rhino.Display.ViewCaptureSettings.GetMargins(UnitSystem lengthUnits, out double left, out double top, out double right, out double bottom)
Return: bool
Modifiers: public
Summary: Get distances from the edge of the paper (MediaSize) to the CropRectangle in a defined unit system
Parameter: lengthUnits (UnitSystem)
Parameter Summary: Units to get distances in
Parameter: left (double)
Parameter Summary: Distance from left edge of paper to left edge of CropRectangle
Parameter: top (double)
Parameter Summary: Distance from top edge of paper to top edge of CropRectangle
Parameter: right (double)
Parameter Summary: Distance from right edge of paper to right edge of CropRectangle
Parameter: bottom (double)
Parameter Summary: Distance from bottom edge of paper to bottom edge of CropRectangle

Method: Rhino.Display.ViewCaptureSettings.GetModelScale(UnitSystem pageUnits, UnitSystem modelUnits)
Return: double
Modifiers: public
Summary: Returns the model scale factor.
Parameter: pageUnits (UnitSystem)
Parameter Summary: The current page units.
Parameter: modelUnits (UnitSystem)
Parameter Summary: The current model units.

Method: Rhino.Display.ViewCaptureSettings.GetOffset(UnitSystem lengthUnits, out bool fromMargin, out double x, out double y)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.GetViewport()
Return: RhinoViewport
Modifiers: public
Summary: Get RhinoViewport that this view capture settings is targeting

Method: Rhino.Display.ViewCaptureSettings.Load(string name, PersistentSettings settings)
Return: bool
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.MatchViewportAspectRatio()
Return: bool
Modifiers: public
Summary: Adjust crop rectangle to match the aspect ratio of the original viewport that these settings reference

Method: Rhino.Display.ViewCaptureSettings.MaximizePrintableArea()
Return: void
Modifiers: public
Summary: Minimize cropping so the full drawable area is used

Method: Rhino.Display.ViewCaptureSettings.Save(string name, PersistentSettings settings)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetLayout(Size mediaSize, Rectangle cropRectangle)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetMarginBottom(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the bottom edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMarginLeft(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the left edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMarginRight(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the right edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetMargins(UnitSystem lengthUnits, double left, double top, double right, double bottom)
Return: bool
Modifiers: public
Summary: Set distances from the edge of the paper (MediaSize) to the CropRectange in a defined unit system
Parameter: lengthUnits (UnitSystem)
Parameter Summary: Units that left, top, right, and bottom are defined in
Parameter: left (double)
Parameter Summary: Distance from left edge of paper to left edge of CropRectangle
Parameter: top (double)
Parameter Summary: Distance from top edge of paper to top edge of CropRectangle
Parameter: right (double)
Parameter Summary: Distance from right edge of paper to right edge of CropRectangle
Parameter: bottom (double)
Parameter Summary: Distance from bottom edge of paper to bottom edge of CropRectangle

Method: Rhino.Display.ViewCaptureSettings.SetMarginTop(UnitSystem lengthUnits, double distance)
Return: bool
Modifiers: public
Summary: Set the distance from the top edge of the paper to the CropRectangle
Parameter: lengthUnits (UnitSystem)
Parameter Summary: units that distance is defined in
Parameter: distance (double)
Parameter Summary: distance to set

Method: Rhino.Display.ViewCaptureSettings.SetModelScaleToFit(bool promptOnChange)
Return: void
Modifiers: public
Summary: Scales the model to fit.
Parameter: promptOnChange (bool)
Parameter Summary: Prompt the user if the model scale will change.

Method: Rhino.Display.ViewCaptureSettings.SetModelScaleToValue(double scale)
Return: void
Modifiers: public
Summary: Sets the model scale to a value.
Parameter: scale (double)
Parameter Summary: The scale value.

Method: Rhino.Display.ViewCaptureSettings.SetOffset(UnitSystem lengthUnits, bool fromMargin, double x, double y)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetViewport(RhinoViewport viewport)
Return: void
Modifiers: public

Method: Rhino.Display.ViewCaptureSettings.SetWindowRect(Point2d screenPoint1, Point2d screenPoint2)
Return: void
Modifiers: public
Summary: Set the print area to a window selection based on two points in screen coordinates
Parameter: screenPoint1 (Point2d)
Parameter Summary: first point; it doesn't matter what corner of the rectangle this point represents
Parameter: screenPoint2 (Point2d)
Parameter Summary: point representing opposite corner of rectangle from screenPoint1

Method: Rhino.Display.ViewCaptureSettings.SetWindowRect(Point3d worldPoint1, Point3d worldPoint2)
Return: void
Modifiers: public
Summary: Set the print area to a window selection based on two points in world coordinates
Parameter: worldPoint1 (Point3d)
Parameter Summary: First point in world coordinates. This point is projected to screen coordinates
Parameter: worldPoint2 (Point3d)
Parameter Summary: Second point in world coordinates. This point is projected to screen coordinates

Class: Rhino.Display.ViewEventArgs

Property: Rhino.Display.ViewEventArgs.View
Return: RhinoView
Modifiers: public
Accessors: get

Class: Rhino.Display.VisualAnalysisMode
Summary: Represents a base class for visual analysis modes.
This class is abstract.

Constructor: Rhino.Display.VisualAnalysisMode.VisualAnalysisMode()
Summary: Initializes a new instance of the VisualAnalysisMode class

Property: Rhino.Display.VisualAnalysisMode.RhinoCurvatureColorAnalyisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in curvature color analysis mode.  Surface curvature is shown using False color mapping.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoCurvatureGraphAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in curvature graphs analysis mode. Curvature hair is shown on curves and surfaces.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoDraftAngleAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in draft angle analysis mode.  Draft angle is displayed using False colors.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEdgeAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in edge analysis mode. Brep and mesh edges are shown in a selected color.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEdgeContinuityAlalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in edge continuity analysis mode.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoEmapAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in emap analysis mode.  An environment map is shown on surfaces and meshes.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoThicknessAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in thickness analysis mode.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.RhinoZebraStripeAnalysisModeId
Return: Guid
Modifiers: public, static
Summary: Id for Rhino's built-in zebra stripe analysis mode. Zebra stripes are shown on surfaces and meshes.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Id
Return: Guid
Modifiers: public
Summary: Gets the visual analysis mode GUID. The Guid is specified with the <b>System.Runtime.InteropServices.GuidAttribute</b>  applied to the class.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Name
Return: string
Modifiers: public, abstract
Summary: Gets the name of the analysis mode. It is used by the _What command and the object properties details window to describe the object.
Accessors: get

Property: Rhino.Display.VisualAnalysisMode.ShowIsoCurves
Return: bool
Modifiers: public, virtual
Summary: Gets True if this visual analysis mode will show isocuves on shaded surface objects.  Often a mode's user interface will provide a way to change this setting.
The default is false. | Since: 5.0 | Accessors: get

Property: Rhino.Display.VisualAnalysisMode.Style
Return: AnalysisStyle
Modifiers: public, abstract
Summary: Gets the visual analysis mode style.
Accessors: get

Method: Rhino.Display.VisualAnalysisMode.AdjustAnalysisMeshes(RhinoDoc doc, System.Guid analysisModeId)
Return: bool
Modifiers: public, static
Summary: Interactively adjusts surface analysis meshes of objects using a Rhino built-in analysis mode.
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document.
Parameter: analysisModeId (System.Guid)
Parameter Summary: The id of the analysis mode.

Method: Rhino.Display.VisualAnalysisMode.Find(System.Guid id)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Finds a visual analysis mode by guid.
Parameter: id (System.Guid)
Parameter Summary: The globally unique identifier to search for.

Method: Rhino.Display.VisualAnalysisMode.Find(System.Type t)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Finds a visual analysis mode by type.
Parameter: t (System.Type)
Parameter Summary: A visual analysis mode type.

Method: Rhino.Display.VisualAnalysisMode.Register(System.Type customAnalysisModeType)
Return: VisualAnalysisMode
Modifiers: public, static
Summary: Registers a custom visual analysis mode for use in Rhino.  It is OK to call register multiple times for a single custom analysis mode type, since subsequent register calls will notice that the type has already been registered.
Parameter: customAnalysisModeType (System.Type)
Parameter Summary: Must be a type that is a subclass of VisualAnalysisMode.

Method: Rhino.Display.VisualAnalysisMode.DrawBrepObject(Rhino.DocObjects.BrepObject brep, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one brep. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: brep (Rhino.DocObjects.BrepObject) | Parameter Summary: A brep object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawCurveObject(Rhino.DocObjects.CurveObject curve, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: If Style==Wireframe, then the default decomposes the curve object into nurbs curve segments and calls the virtual DrawNurbsCurve for each segment.
Parameter: curve (Rhino.DocObjects.CurveObject)
Parameter Summary: A document curve object.
Parameter: pipeline (DisplayPipeline)
Parameter Summary: The drawing pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawMesh(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.Mesh mesh, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a mesh.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the surface. | Parameter: mesh (Rhino.Geometry.Mesh) | Parameter Summary: The mesh geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawMeshObject(Rhino.DocObjects.MeshObject mesh, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one mesh. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: mesh (Rhino.DocObjects.MeshObject) | Parameter Summary: A mesh object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawNurbsCurve(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.NurbsCurve curve, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a NURBS curve. This is a good function to override for analysis modes like curvature hair display.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the curve. | Parameter: curve (Rhino.Geometry.NurbsCurve) | Parameter Summary: The curve geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawNurbsSurface(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.NurbsSurface surface, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws a NURBS surface. This is a good function to override to display object-related meshes.
The default implementation does nothing. | Parameter: obj (Rhino.DocObjects.RhinoObject) | Parameter Summary: A Rhino object corresponding to the surface. | Parameter: surface (Rhino.Geometry.NurbsSurface) | Parameter Summary: The surface geometry. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawPointCloudObject(Rhino.DocObjects.PointCloudObject pointCloud, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one point cloud. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: pointCloud (Rhino.DocObjects.PointCloudObject) | Parameter Summary: A point cloud object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.DrawPointObject(Rhino.DocObjects.PointObject point, DisplayPipeline pipeline)
Return: void
Modifiers: protected, virtual
Summary: Draws one point. Override this method to add your custom behavior.
The default implementation does nothing. | Parameter: point (Rhino.DocObjects.PointObject) | Parameter Summary: A point object. | Parameter: pipeline (DisplayPipeline) | Parameter Summary: The current display pipeline.

Method: Rhino.Display.VisualAnalysisMode.EnableUserInterface(bool on)
Return: void
Modifiers: public, virtual
Summary: Turns the analysis mode's user interface on and off. For Rhino's built in modes this opens or closes the modeless dialog that controls the analysis mode's display settings.
Parameter: on (bool)
Parameter Summary: True if the interface should be shown; False if it should be concealed.

Method: Rhino.Display.VisualAnalysisMode.ObjectSupportsAnalysisMode(Rhino.DocObjects.RhinoObject obj)
Return: bool
Modifiers: public, virtual
Summary: Gets a value indicating if this visual analysis mode can be used on a given Rhino object.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object to be tested.

Method: Rhino.Display.VisualAnalysisMode.SetUpDisplayAttributes(Rhino.DocObjects.RhinoObject obj, DisplayPipelineAttributes attributes)
Return: void
Modifiers: protected, virtual
Summary: If an analysis mode needs to modify display attributes, this is the place to do it.  In particular, Style==Texture, then this function must be overridden.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object for which to set up attributes.
Parameter: attributes (DisplayPipelineAttributes)
Parameter Summary: The linked attributes.

Method: Rhino.Display.VisualAnalysisMode.UpdateVertexColors(Rhino.DocObjects.RhinoObject obj, Rhino.Geometry.Mesh[] meshes)
Return: void
Modifiers: protected, virtual
Summary: If Style==falseColor, then this virtual function must be overridden. Rhino calls this function when it is time for to set the False colors on the analysis mesh vertices.  For breps, there is one mesh per face. For mesh objects there is a single mesh.
Parameter: obj (Rhino.DocObjects.RhinoObject)
Parameter Summary: The object for which to update vertex colors.
Parameter: meshes (Rhino.Geometry.Mesh[])
Parameter Summary: An array of meshes that should be updated.

Class: Rhino.Display.ZBufferCapture
Summary: Provides functionality for getting the z-buffer values from a viewport and a given display mode

Constructor: Rhino.Display.ZBufferCapture.ZBufferCapture(RhinoViewport viewport)

Method: Rhino.Display.ZBufferCapture.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Display.ZBufferCapture.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Display.ZBufferCapture.GrayscaleDib()
Return: System.Drawing.Bitmap
Modifiers: public

Method: Rhino.Display.ZBufferCapture.HitCount()
Return: int
Modifiers: public

Method: Rhino.Display.ZBufferCapture.MaxZ()
Return: float
Modifiers: public

Method: Rhino.Display.ZBufferCapture.MinZ()
Return: float
Modifiers: public

Method: Rhino.Display.ZBufferCapture.SetDisplayMode(System.Guid modeId)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowAnnotations(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowCurves(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowIsocurves(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowLights(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowMeshWires(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowPoints(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ShowText(bool on)
Return: void
Modifiers: public

Method: Rhino.Display.ZBufferCapture.WorldPointAt(int x, int y)
Return: Point3d
Modifiers: public

Method: Rhino.Display.ZBufferCapture.ZValueAt(int x, int y)
Return: float
Modifiers: public

# Namespace: Rhino.DocObjects
Summary: The DocObjects namespace contains types that correspond to geometry that is found in a document.
Generally, these types reference an attribute and have a   distinctive ID.

Class: Rhino.DocObjects.AngularDimensionObject
Summary: Rhino Object that represents an angular dimension geometry and attributes

Property: Rhino.DocObjects.AngularDimensionObject.AngularDimensionGeometry
Return: AngularDimension
Modifiers: public
Summary: Get the dimension geometry for this object.
Accessors: get

Class: Rhino.DocObjects.AnimationProperties
Summary: Contains information used by the Animation Tools to create sun, season, turntable and fly through animations.

Constructor: Rhino.DocObjects.AnimationProperties.AnimationProperties()
Summary: Initializes a new instance of the <b>AnimationProperties</b> class.

Constructor: Rhino.DocObjects.AnimationProperties.AnimationProperties(AnimationProperties source)
Summary: Initialize new instance of the AnimationProperties class.

Property: Rhino.DocObjects.AnimationProperties.AnimationName
Return: string
Modifiers: public
Summary: Gets or sets the name of the animation sequence.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.CameraPathId
Return: Guid
Modifiers: public
Summary: Gets or sets the object ID of the camera path.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.CameraPoints
Return: Point3d[]
Modifiers: public
Summary: Gets or sets points of the camera path.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.CaptureMethod
Return: string
Modifiers: public
Summary: Gets or sets the capture method of the animation which is either preview or full.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.CaptureType
Return: CaptureTypes
Modifiers: public
Summary: Gets or sets the capture type of the animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.CurrentFrame
Return: int
Modifiers: public
Summary: Gets or sets the current frame during animation record.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.Dates
Return: string[]
Modifiers: public
Summary: Gets or sets the dates that are calculated for seasonal/one day sun animations.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.DaysBetweenFrames
Return: int
Modifiers: public
Summary: Gets or sets the days between captured frames for seasonal sun animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.DisplayMode
Return: Guid
Modifiers: public
Summary: Gets or sets the ID of the view display mode (wireframe, shaded...).
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndDay
Return: int
Modifiers: public
Summary: Gets or sets the end day for seasonal day sun animation in the range 1 to 31.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndHour
Return: int
Modifiers: public
Summary: Gets or sets the end hour for one day sun animation in the range 0 to 23.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndMinutes
Return: int
Modifiers: public
Summary: Gets or sets the end minutes for one day sun animation in the range 0 to 59.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndMonth
Return: int
Modifiers: public
Summary: Gets or sets the end month for seasonal day sun animation in the range 1 to 12.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndSeconds
Return: int
Modifiers: public
Summary: Gets or sets the end seconds for one day sun animation in the range 0 to 59.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.EndYear
Return: int
Modifiers: public
Summary: Gets or sets the end year for seasonal day sun animation in the range 1800 to 2199.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.FileExtension
Return: string
Modifiers: public
Summary: Gets or sets the file extension of the saved frames created by the animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.FolderName
Return: string
Modifiers: public
Summary: Gets or sets the location for the saved frames.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.FrameCount
Return: int
Modifiers: public
Summary: Gets or sets the number of frames to be captured.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.HtmlFileName
Return: string
Modifiers: public
Summary: Gets or sets the HTML file name.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.HtmlFullPath
Return: string
Modifiers: public
Summary: Return HTML file path consisting of FolderName and HtmlFileName.  To change this set FolderName and HtmlFileName.
Accessors: get

Property: Rhino.DocObjects.AnimationProperties.Images
Return: string[]
Modifiers: public
Summary: Gets or sets the full path to the saved frames of an animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.Latitude
Return: double
Modifiers: public
Summary: Gets or sets the latitude for sun animations in the range of -90 to +90.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.LightIndex
Return: int
Modifiers: public
Summary: Internal value used while previewing animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.Longitude
Return: double
Modifiers: public
Summary: Gets or sets the longitude for sun animations in the range of -180 to +180.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.MinutesBetweenFrames
Return: int
Modifiers: public
Summary: Gets or sets the minutes between captured frames for one day sun animation.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.NorthAngle
Return: double
Modifiers: public
Summary: Gets or sets the world angle corresponding to North in degrees. This angle is zero along the x-axis and increases anticlockwise.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.RenderFull
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to capture a frame in rendered mode.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.RenderPreview
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to capture a frame in preview rendered mode.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartDay
Return: int
Modifiers: public
Summary: Gets or sets the start day for seasonal/one day sun animation in the range 1 to 31.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartHour
Return: int
Modifiers: public
Summary: Gets or sets the start hour for seasonal/one day sun animation in the range 0 to 23.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartMinutes
Return: int
Modifiers: public
Summary: Gets or sets the start minutes for seasonal/one day sun animation in the range 0 to 59.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartMonth
Return: int
Modifiers: public
Summary: Gets or sets the start month for seasonal/one day sun animation in the range 1 to 12.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartSeconds
Return: int
Modifiers: public
Summary: Gets or sets the start seconds for seasonal/one day sun animation in the range 0 to 59.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.StartYear
Return: int
Modifiers: public
Summary: Gets or sets the start year for seasonal/one day sun animation in the range 1800 to 2199.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.TargetPathId
Return: Guid
Modifiers: public
Summary: Gets or sets the object ID of the target path.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.TargetPoints
Return: Point3d[]
Modifiers: public
Summary: Gets or sets points of the target path.
Accessors: get set

Property: Rhino.DocObjects.AnimationProperties.ViewportName
Return: string
Modifiers: public
Summary: Gets or sets the viewport that will be captured.
Accessors: get set

Method: Rhino.DocObjects.AnimationProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.AnimationProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Class: Rhino.DocObjects.AnnotationObjectBase
Summary: Base class for all annotation objects (text and dimensions)

Property: Rhino.DocObjects.AnnotationObjectBase.AnnotationGeometry
Return: AnnotationBase
Modifiers: public
Summary: Get the annotation base geometry for this object
Accessors: get

Property: Rhino.DocObjects.AnnotationObjectBase.DisplayText
Return: string
Modifiers: public
Summary: Gets the text that is displayed to users.
Accessors: get

Property: Rhino.DocObjects.AnnotationObjectBase.HasMeasurableTextFields
Return: bool
Modifiers: public
Summary: Test if the text in the annotation object contains fields that involve length, area, or volume measurements
Accessors: get

Class: Rhino.DocObjects.BitmapEntry
Summary: Rhino.DocObjects.Tables.BitmapTable entry

Property: Rhino.DocObjects.BitmapEntry.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Image</b> .
Accessors: get

Property: Rhino.DocObjects.BitmapEntry.FileName
Return: string
Modifiers: public
Summary: The name of this bitmap.
Accessors: get

Property: Rhino.DocObjects.BitmapEntry.IsReference
Return: bool
Modifiers: public, override
Summary: Gets a value indicting whether this bitmap is a referenced bitmap. Referenced bitmaps are part of referenced documents.
Accessors: get

Method: Rhino.DocObjects.BitmapEntry.Save(string fileName)
Return: bool
Modifiers: public

Class: Rhino.DocObjects.BrepObject
Summary: Represents a <b>Rhino.Geometry.Brep</b> in a document.

Property: Rhino.DocObjects.BrepObject.BrepGeometry
Return: Brep
Modifiers: public
Summary: Gets the Brep geometry linked with this object.
Accessors: get

Method: Rhino.DocObjects.BrepObject.DuplicateBrepGeometry()
Return: Brep
Modifiers: public
Summary: Constructs a new deep copy of the Brep geometry.

Class: Rhino.DocObjects.CentermarkObject
Summary: Rhino Object that represents a centermark geometry and attributes

Property: Rhino.DocObjects.CentermarkObject.CentermarkGeometry
Return: Centermark
Modifiers: public
Summary: Get the dimension geometry for this object.
Accessors: get

Class: Rhino.DocObjects.ClippingPlaneObject
Summary: Represents the object of a <b>Rhino.Geometry.ClippingPlaneSurface</b> , stored in the Rhino document and with attributes.

Property: Rhino.DocObjects.ClippingPlaneObject.ClippingPlaneGeometry
Return: ClippingPlaneSurface
Modifiers: public
Summary: Gets the clipping plane surface.
Accessors: get

Method: Rhino.DocObjects.ClippingPlaneObject.AddClipViewport(Rhino.Display.RhinoViewport viewport, bool commit)
Return: bool
Modifiers: public
Summary: Adds a viewport to the list of viewports that this clipping plane clips.
Parameter: viewport (Rhino.Display.RhinoViewport)
Parameter Summary: The viewport to add.
Parameter: commit (bool)
Parameter Summary: Commit the change. When in doubt, set this parameter to true.

Method: Rhino.DocObjects.ClippingPlaneObject.RemoveClipViewport(Rhino.Display.RhinoViewport viewport, bool commit)
Return: bool
Modifiers: public
Summary: Removes a viewport from the list of viewports that this clipping plane clips.
Parameter: viewport (Rhino.Display.RhinoViewport)
Parameter Summary: The viewport to remove.
Parameter: commit (bool)
Parameter Summary: Commit the change. When in doubt, set this parameter to true.

Class: Rhino.DocObjects.ConstructionPlane
Summary: Represents a construction plane inside the document.
Use Rhino.DocObjects.Tables.NamedConstructionPlaneTable   methods and indexers to add and access a .

Constructor: Rhino.DocObjects.ConstructionPlane.ConstructionPlane()
Summary: Initializes a new instance of <b>ConstructionPlane</b> .

Property: Rhino.DocObjects.ConstructionPlane.DepthBuffered
Return: bool
Modifiers: public
Summary: Gets or sets whether the grid is drawn on top of geometry.
false=grid is always drawn behind 3d geometry
true=grid is drawn at its depth as a 3d plane and grid lines obscure things behind the grid. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.GridLineCount
Return: int
Modifiers: public
Summary: Gets or sets the total amount of grid lines in each direction.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.GridSpacing
Return: double
Modifiers: public
Summary: Gets or sets the distance between grid lines.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.GridXColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the grid X-axis mark.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.GridYColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the grid Y-axis mark.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.GridZColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the grid Z-axis mark.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.Name
Return: string
Modifiers: public
Summary: Gets or sets the name of the construction plane.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.Plane
Return: Plane
Modifiers: public
Summary: Gets or sets the geometric plane to use for construction.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ShowAxes
Return: bool
Modifiers: public
Summary: Gets or sets whether the axes of the grid should be visible.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ShowGrid
Return: bool
Modifiers: public
Summary: Gets or sets whether the grid itself should be visible.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ShowZAxis
Return: bool
Modifiers: public
Summary: Gets or sets whether the Z axis of the grid should be visible.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.SnapSpacing
Return: double
Modifiers: public
Summary: when "grid snap" is enabled, the distance between snap points. Typically this is the same distance as grid spacing.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ThickLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the thicker, wider line.
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ThickLineFrequency
Return: int
Modifiers: public
Summary: Gets or sets the recurrence of a wider line on the grid.
0: No lines are thick, all are drawn thin.
1: All lines are thick.
2: Every other line is thick.
3: One line in three lines is thick (and two are thin).
4: ... | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ConstructionPlane.ThinLineColor
Return: Color
Modifiers: public
Summary: Gets or sets the color of the thinner, less prominent line.
Accessors: get set

Class: Rhino.DocObjects.ConstructionPlaneGridDefaults
Summary: Default grid settings for a document

Constructor: Rhino.DocObjects.ConstructionPlaneGridDefaults.ConstructionPlaneGridDefaults()
Summary: Initializes a new instance of the ConstructionPlaneGridDefaults class

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.GridLineCount
Return: int
Modifiers: public
Summary: Number of grid lines in each direction
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.GridSpacing
Return: double
Modifiers: public
Summary: Distance between grid lines
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.GridThickFrequency
Return: int
Modifiers: public
Summary: This line frequency. 0: none, 1: all lines are thick, 2: every other is thick, ...
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.ShowGrid
Return: bool
Modifiers: public
Summary: Show the grid
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.ShowGridAxes
Return: bool
Modifiers: public
Summary: Show the grid axes
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.ShowWorldAxes
Return: bool
Modifiers: public
Summary: Show the world axes icon in the corner
Accessors: get set

Property: Rhino.DocObjects.ConstructionPlaneGridDefaults.SnapSpacing
Return: double
Modifiers: public
Summary: When grid snap is enabled, the distance between snap points. Typically this is the same distance as grid spacing
Accessors: get set

Class: Rhino.DocObjects.CurveObject
Summary: A Rhino Object that represents curve geometry and attributes

Property: Rhino.DocObjects.CurveObject.CurveGeometry
Return: Curve
Modifiers: public
Summary: Returns the underlying curve geometry.
Accessors: get

Method: Rhino.DocObjects.CurveObject.DuplicateCurveGeometry()
Return: Curve
Modifiers: public
Summary: Returns a copy of the underlying curve geometry.

Method: Rhino.DocObjects.CurveObject.GetLinetypeSegments()
Return: GeometryBase[]
Modifiers: public
Summary: Converts the linetype pattern of the curve into curve segments and points based on the active Rhino viewport.

Method: Rhino.DocObjects.CurveObject.GetLinetypeSegments(RhinoViewport viewport)
Return: GeometryBase[]
Modifiers: public
Summary: Converts the linetype pattern of the curve into curve segments and points based on the specified Rhino viewport.
Parameter: viewport (RhinoViewport)
Parameter Summary: The Rhino viewport used to generate the curve segments and points.

Class: Rhino.DocObjects.DetailViewObject
Summary: A detail view object is a nested Rhino viewport placed on a page view with a 2D closed curve boundary. It can be any type of modeling view.

Property: Rhino.DocObjects.DetailViewObject.DescriptiveTitle
Return: string
Modifiers: public
Summary: Detail objects have two strings that can be used to describe the detail: 1. The name string that is part of the object's attributes 2. The viewport projection title that is part of the viewport This function combines these two strings to create a single "description" string in the form of attribute_name - projection_title.
Accessors: get

Property: Rhino.DocObjects.DetailViewObject.DetailGeometry
Return: DetailView
Modifiers: public
Summary: Returns the detail view geometry.
Accessors: get

Property: Rhino.DocObjects.DetailViewObject.IsActive
Return: bool
Modifiers: public
Summary: Gets or sets the active state of the detail view. Note, setting this property will trigger a <b>RhinoPageView.PageViewSpaceChange</b> event.
Accessors: get set

Property: Rhino.DocObjects.DetailViewObject.PageToWorldTransform
Return: Transform
Modifiers: public
Summary: Returns the page coordinate to world coordinate transformation.
Accessors: get

Property: Rhino.DocObjects.DetailViewObject.Viewport
Return: RhinoViewport
Modifiers: public
Summary: Gets the detail view's viewport.
Accessors: get

Property: Rhino.DocObjects.DetailViewObject.WorldToPageTransform
Return: Transform
Modifiers: public
Summary: Gets the world coordinate to page coordinate transformation.
Accessors: get

Method: Rhino.DocObjects.DetailViewObject.CommitViewportChanges()
Return: bool
Modifiers: public

Method: Rhino.DocObjects.DetailViewObject.GetFormattedScale(ScaleFormat format, out string value)
Return: bool
Modifiers: public
Summary: Returns the detail view object's scale as a formatted string. The detail view object's viewport must be to parallel projection.
Parameter: format (ScaleFormat)
Parameter Summary: The scale format.
Parameter: value (string)
Parameter Summary: The formatted string

Class: Rhino.DocObjects.DimensionObject
Summary: Rhino Object that represents dimension geometry and attributes

Property: Rhino.DocObjects.DimensionObject.DimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: Gets the <b>DimensionStyle</b>  associated with this OrdinateDimensionObject.
Accessors: get

Class: Rhino.DocObjects.DimensionStyle
Summary: Can also be considered an annotation style since it is used for more than just dimensions

Constructor: Rhino.DocObjects.DimensionStyle.DimensionStyle()
Summary: Create a new non-document controlled annotation style

Constructor: Rhino.DocObjects.DimensionStyle.DimensionStyle(SerializationInfo info, StreamingContext context)

Property: Rhino.DocObjects.DimensionStyle.AlternateBelowLine
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateDimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateLengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateLengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternatePrefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateSuffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateUnitsDisplay
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AlternateZeroSuppress
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AngleFormat
Return: AngleDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AngleResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AngleZeroSuppress
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.AngularRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArcLengthSymbol
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArrowBlockId1
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArrowBlockId2
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArrowLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArrowType1
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ArrowType2
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.BaselineSpacing
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.CentermarkSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.CenterMarkType
Return: CenterMarkStyle
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.DimStyle</b> .
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.DecimalSeparator
Return: char
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimensionScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimensionScaleValue
Return: ScaleValue
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimRadialTextAngleType
Return: LeaderContentAngleStyle
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimRadialTextLocation
Return: TextLocation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimRadialTextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimTextAngleType
Return: LeaderContentAngleStyle
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimTextLocation
Return: TextLocation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DimTextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DrawForward
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.DrawTextMask
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ExtensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ExtensionLineOffset
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.FitArrow
Return: ArrowFit
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.FitText
Return: TextFit
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.FixedExtensionLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.FixedExtensionOn
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.Font
Return: Font
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ForceDimensionLineBetweenExtensionLines
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.HasFieldOverrides
Return: bool
Modifiers: public
Summary: Checks if any fields in this DimensionStyle are overrides
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.IsChild
Return: bool
Modifiers: public
Summary: Tests if this DimensionStyle is a child of any other DimensionStyle
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.IsDeleted
Return: bool
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.IsReference
Return: bool
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.LeaderArrowBlockId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderArrowLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderArrowType
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderContentAngleType
Return: LeaderContentAngleStyle
Modifiers: public
Summary: Style of leader content angle Horizontal Aligned Rotated
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderCurveType
Return: LeaderCurveStyle
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderHasLanding
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderLandingLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderTextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderTextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderTextRotationDegrees
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderTextRotationRadians
Return: double
Modifiers: public
Summary: Angle of leader text for Rotated style
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LeaderTextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.LengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.MaskColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.MaskColorSource
Return: MaskType
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.MaskFrameType
Return: MaskFrame
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.MaskOffset
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ParentId
Return: Guid
Modifiers: public
Summary: Get or Set the Id of this DimensionStyle's parent. If ParentId is Guid.Empty, this DimensionStyle has no parent
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.Prefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.Roundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ScaleLeftLengthMillimeters
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ScaleRightLengthMillimeters
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.StackFractionFormat
Return: StackDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.StackHeightScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.Suffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.SuppressArrow1
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.SuppressArrow2
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.SuppressExtension1
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.SuppressExtension2
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextGap
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextHeight
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextMoveLeader
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextRotation
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextUnderlined
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.TextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceFormat
Return: ToleranceDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceHeightScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceLowerValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceUpperValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.ToleranceZeroSuppress
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.DimensionStyle.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Property: Rhino.DocObjects.DimensionStyle.ZeroSuppress
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Method: Rhino.DocObjects.DimensionStyle.AlternateDimensionLengthDisplayUnit(uint model_serial_number)
Return: UnitSystem
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.ClearAllFieldOverrides()
Return: void
Modifiers: public
Summary: Sets all the fields in this DimensionStyle to be not overridden Does not change any dimstyle_id's or parent_id's

Method: Rhino.DocObjects.DimensionStyle.ClearFieldOverride(Field field)
Return: void
Modifiers: public
Summary: Set the field as not overridden

Method: Rhino.DocObjects.DimensionStyle.CopyFrom(DimensionStyle source)
Return: void
Modifiers: public
Summary: Copy settings from source dimension style without changing the name, Id or index of this DimensionStyle.
Parameter: source (DimensionStyle)
Parameter Summary: DimensionStyle to copy settings from.

Method: Rhino.DocObjects.DimensionStyle.CreatePreviewBitmap(int width, int height)
Return: Bitmap
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.DimensionLengthDisplayUnit(uint model_serial_number)
Return: UnitSystem
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.Duplicate()
Return: DimensionStyle
Modifiers: public
Summary: Construct a deep (full) copy of this object.

Method: Rhino.DocObjects.DimensionStyle.Duplicate(string newName, System.Guid newId, System.Guid newParentId)
Return: DimensionStyle
Modifiers: public
Summary: Construct a deep (full) copy of this object.

Method: Rhino.DocObjects.DimensionStyle.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.DimensionStyle.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.DocObjects.DimensionStyle.IsChildOf(System.Guid parentId)
Return: bool
Modifiers: public
Summary: Tests if this DimensionStyle is a child of a specific DimensionStyle

Method: Rhino.DocObjects.DimensionStyle.IsFieldOverriden(Field field)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.DimensionStyle.ScaleLengthValues(double scale)
Return: void
Modifiers: public
Summary: Scales all length values by 'scale'

Method: Rhino.DocObjects.DimensionStyle.SetFieldOverride(Field field)
Return: void
Modifiers: public
Summary: Set a field as overridden

Method: Rhino.DocObjects.DimensionStyle.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.DocObjects.EarthAnchorPoint
Summary: Contains information about the model's position in latitude, longitude, and elevation for GIS mapping applications.

Constructor: Rhino.DocObjects.EarthAnchorPoint.EarthAnchorPoint()
Summary: Initializes a new instance of the <b>EarthAnchorPoint</b> class.

Property: Rhino.DocObjects.EarthAnchorPoint.Description
Return: string
Modifiers: public
Summary: Gets or sets the long form of the identifying information about this location.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevation
Return: double
Modifiers: public
Summary: Gets or sets the point elevation on earth, in meters.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevationCoordinateSystem
Return: EarthCoordinateSystem
Modifiers: public
Summary: Gets or sets a value indicating the zero level convention relating to a location on Earth.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevationZero
Return: BasepointZero
Modifiers: public
Summary: Gets or sets a value indicating the zero level convention relating to a location on Earth.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLatitude
Return: double
Modifiers: public
Summary: Gets or sets a point latitude on earth, in degrees. +90 = north pole, 0 = equator, -90 = south pole.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLongitude
Return: double
Modifiers: public
Summary: Gets or sets the point longitude on earth, in degrees.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationHeadingAngleDegrees
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation heading angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationHeadingAngleRadians
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation heading angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationRollAngleDegrees
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation roll angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationRollAngleRadians
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation roll angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationTiltAngleDegrees
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation tilt angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.KMLOrientationTiltAngleRadians
Return: double
Modifiers: public
Summary: Gets Keyhole Markup Language (KML) orientation tilt angle in degrees.
Accessors: get

Property: Rhino.DocObjects.EarthAnchorPoint.ModelBasePoint
Return: Point3d
Modifiers: public
Summary: Corresponding model point in model coordinates.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.ModelEast
Return: Vector3d
Modifiers: public
Summary: Earth directions in model coordinates.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.ModelNorth
Return: Vector3d
Modifiers: public
Summary: Earth directions in model coordinates.
Accessors: get set

Property: Rhino.DocObjects.EarthAnchorPoint.Name
Return: string
Modifiers: public
Summary: Gets or sets the short form of the identifying information about this location.
Accessors: get set

Method: Rhino.DocObjects.EarthAnchorPoint.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.EarthAnchorPoint.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.DocObjects.EarthAnchorPoint.EarthLocationIsSet()
Return: bool
Modifiers: public
Summary: Checks if the earth location is set or not.

Method: Rhino.DocObjects.EarthAnchorPoint.GetEarthAnchorPlane(out Vector3d anchorNorth)
Return: Plane
Modifiers: public
Summary: Returns the earth anchor plane

Method: Rhino.DocObjects.EarthAnchorPoint.GetModelCompass()
Return: Plane
Modifiers: public
Summary: Returns a plane in model coordinates whose X axis points East, Y axis points North and Z axis points Up. The origin is set to ModelBasepoint.

Method: Rhino.DocObjects.EarthAnchorPoint.GetModelToEarthTransform(UnitSystem modelUnitSystem)
Return: Transform
Modifiers: public
Summary: Gets a transformation from model coordinates to earth coordinates. This transformation assumes the model is small enough that the curvature of the earth can be ignored.
Parameter: modelUnitSystem (UnitSystem)
Parameter Summary: The model unit system.

Method: Rhino.DocObjects.EarthAnchorPoint.ModelLocationIsSet()
Return: bool
Modifiers: public
Summary: Checks if the model location is set or not.

Class: Rhino.DocObjects.Environment
Summary: Represents an environment.

Constructor: Rhino.DocObjects.Environment.Environment()
Summary: Initializes a new environment.

Property: Rhino.DocObjects.Environment.BackgroundColor
Return: Color
Modifiers: public
Summary: The background color.
Accessors: get

Property: Rhino.DocObjects.Environment.BackgroundImage
Return: Texture
Modifiers: public
Summary: The background image texture.
Accessors: get

Property: Rhino.DocObjects.Environment.BackgroundProjection
Return: BackgroundProjections
Modifiers: public
Summary: The background projection.
Accessors: get

Class: Rhino.DocObjects.ExtrusionObject

Property: Rhino.DocObjects.ExtrusionObject.ExtrusionGeometry
Return: Extrusion
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.ExtrusionObject.DuplicateExtrusionGeometry()
Return: Extrusion
Modifiers: public

Class: Rhino.DocObjects.Font
Summary: Defines a format for text.

Constructor: Rhino.DocObjects.Font.Font(string familyName, FontWeight weight, FontStyle style, bool underlined, bool strikethrough)

Constructor: Rhino.DocObjects.Font.Font(string familyName, FontWeight weight, FontStyle style, FontStretch stretch, bool underlined, bool strikethrough)

Constructor: Rhino.DocObjects.Font.Font(string familyName)

Property: Rhino.DocObjects.Font.Bold
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Description
Return: string
Modifiers: public
Summary: Returns a long description that includes family, face, weight, stretch and style information. Generally not useful for finding matching fonts.
Accessors: get

Property: Rhino.DocObjects.Font.EnglishFaceName
Return: string
Modifiers: public
Summary: Returns English Face name
Accessors: get

Property: Rhino.DocObjects.Font.EnglishFamilyName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.EnglishQuartetName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.FaceName
Return: string
Modifiers: public
Summary: Returns Face name
Accessors: get

Property: Rhino.DocObjects.Font.FamilyName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.FamilyPlusFaceName
Return: string
Modifiers: public
Summary: Returns concatenated Family and Face names
Accessors: get

Property: Rhino.DocObjects.Font.IsEngravingFont
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.IsInstalled
Return: bool
Modifiers: public
Summary: Is this font installed on the system
Accessors: get

Property: Rhino.DocObjects.Font.IsSimulated
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.IsSingleStrokeFont
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.IsSymbolFont
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Italic
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.LogfontName
Return: string
Modifiers: public
Summary: Returns Windows LOGFONT Face name
Accessors: get

Property: Rhino.DocObjects.Font.PointSize
Return: double
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.PostScriptName
Return: string
Modifiers: public
Summary: Returns the Font PostScriptName - "Apple font name"
Accessors: get

Property: Rhino.DocObjects.Font.QuartetName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.RichTextFontName
Return: string
Modifiers: public
Summary: Returns the Font RichTextFontName used in RTF strings: {\\fonttbl...{\\fN RichTextFontName;}...}
Accessors: get

Property: Rhino.DocObjects.Font.Stretch
Return: FontStretch
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Strikeout
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Style
Return: FontStyle
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Underlined
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Font.Weight
Return: FontWeight
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.Font.AvailableFontFaceNames()
Return: string
Modifiers: public, static

Method: Rhino.DocObjects.Font.FromQuartetProperties(string quartetName, bool bold, bool italic)
Return: Font
Modifiers: public, static

Method: Rhino.DocObjects.Font.InstalledFonts()
Return: Font[]
Modifiers: public, static

Method: Rhino.DocObjects.Font.InstalledFonts(string familyName)
Return: Font[]
Modifiers: public, static

Method: Rhino.DocObjects.Font.InstalledFontsAsQuartets()
Return: FontQuartet[]
Modifiers: public, static

Method: Rhino.DocObjects.Font.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.DocObjects.Font.GetSubstituteFont()
Return: Font
Modifiers: public
Summary: If this font is not installed on the system, try to find a substitute

Class: Rhino.DocObjects.FontQuartet

Constructor: Rhino.DocObjects.FontQuartet.FontQuartet(string name, bool supportsRegular, bool supportsBold, bool supportsItalic, bool supportsBoldItalic)

Property: Rhino.DocObjects.FontQuartet.HasBoldFont
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.FontQuartet.HasBoldItalicFont
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.FontQuartet.HasItalicFont
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.FontQuartet.HasRegularFont
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.FontQuartet.QuartetName
Return: string
Modifiers: public
Accessors: get set

Method: Rhino.DocObjects.FontQuartet.ToString()
Return: string
Modifiers: public, override

Class: Rhino.DocObjects.GripObject

Property: Rhino.DocObjects.GripObject.CurrentLocation
Return: Point3d
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.GripObject.Index
Return: int
Modifiers: public, override
Accessors: get set

Property: Rhino.DocObjects.GripObject.Moved
Return: bool
Modifiers: public
Summary: True if the grip has moved from OriginalLocation.
Accessors: get

Property: Rhino.DocObjects.GripObject.OriginalLocation
Return: Point3d
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.GripObject.OwnerId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.GripObject.Weight
Return: double
Modifiers: public, virtual
Summary: The weight of a NURBS control point grip or RhinoMath.UnsetValue if the grip is not a NURBS control point grip.
Accessors: get set

Method: Rhino.DocObjects.GripObject.GetCageParameters(out double u, out double v, out double w)
Return: bool
Modifiers: public
Summary: Retrieves the 2d parameter space values of this GripObject from the cage it's associated with.

Method: Rhino.DocObjects.GripObject.GetCurveCVIndices(out int cvIndices)
Return: int
Modifiers: public
Summary: Retrieves the NURBS curve control point indices of this GripObject from the curve it is associated with.
Parameter: cvIndices (int)
Parameter Summary: The NURBS curve control point indices.

Method: Rhino.DocObjects.GripObject.GetCurveParameters(out double t)
Return: bool
Modifiers: public
Summary: Retrieves the 2d parameter space values of this GripObject from the curve it's associated with.

Method: Rhino.DocObjects.GripObject.GetGripDirections(out Vector3d u, out Vector3d v, out Vector3d normal)
Return: bool
Modifiers: public
Summary: Sometimes grips have directions.  These directions can have any length and do not have to be orthogonal.
Parameter: u (Vector3d)
Parameter Summary: u direction
Parameter: v (Vector3d)
Parameter Summary: v direction
Parameter: normal (Vector3d)
Parameter Summary: normal direction

Method: Rhino.DocObjects.GripObject.GetSurfaceCVIndices(out Tuple<int, int>[] cvIndices)
Return: int
Modifiers: public
Summary: Retrieves the NURBS surface control point indices of this GripObject from the surface it is associated with.
Parameter: cvIndices (Tuple<int, int>[])
Parameter Summary: The NURBS surface control point indices as tuples.

Method: Rhino.DocObjects.GripObject.GetSurfaceParameters(out double u, out double v)
Return: bool
Modifiers: public
Summary: Retrieves the NURBS surface 2d parameter space values of this GripObject from the surface it's associated with.

Method: Rhino.DocObjects.GripObject.Move(Point3d newLocation)
Return: void
Modifiers: public
Summary: Moves the grip to a new location.
Parameter: newLocation (Point3d)
Parameter Summary: New location for grip.

Method: Rhino.DocObjects.GripObject.Move(Transform xform)
Return: void
Modifiers: public
Summary: Moves the grip to a new location.
Parameter: xform (Transform)
Parameter Summary: Transformation applied to the OriginalLocation point.

Method: Rhino.DocObjects.GripObject.Move(Vector3d delta)
Return: void
Modifiers: public
Summary: Moves the grip to a new location.
Parameter: delta (Vector3d)
Parameter Summary: Translation applied to the OriginalLocation point.

Method: Rhino.DocObjects.GripObject.NeighborGrip(int directionR, int directionS, int directionT, bool wrap)
Return: GripObject
Modifiers: public
Summary: Used to get a grip's logical neighbors, like NURBS curve, surface, and cage control point grips.
Parameter: directionR (int)
Parameter Summary: -1 to go back one grip, +1 to move forward one grip.  For curves, surfaces and cages, this is the first parameter direction.
Parameter: directionS (int)
Parameter Summary: -1 to go back one grip, +1 to move forward one grip.  For surfaces and cages this is the second parameter direction.
Parameter: directionT (int)
Parameter Summary: For cages this is the third parameter direction
Parameter: wrap (bool)
Parameter Summary:

Method: Rhino.DocObjects.GripObject.UndoMove()
Return: void
Modifiers: public
Summary: Undoes any grip moves made by calling Move.

Class: Rhino.DocObjects.Group

Property: Rhino.DocObjects.Group.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Group</b> .
Accessors: get

Property: Rhino.DocObjects.Group.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.DocObjects.Group.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Group.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Group.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.Group.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.DocObjects.Group.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.DocObjects.HatchLine
Summary: Hatch lines are used by hatch pattern to specify the dashes and offset patterns of the lines.

Constructor: Rhino.DocObjects.HatchLine.HatchLine()
Summary: Construts a new hatch line.

Constructor: Rhino.DocObjects.HatchLine.HatchLine(HatchLine hatchLine)
Summary: Construts a new hatch line.

Property: Rhino.DocObjects.HatchLine.Angle
Return: double
Modifiers: public
Summary: Gets and sets the angle, in radians, of the hatch line. The angle is measured counter-clockwise from the x-axis.
Accessors: get set

Property: Rhino.DocObjects.HatchLine.BasePoint
Return: Point2d
Modifiers: public
Summary: Get and sets this line's 2d base point.
Accessors: get set

Property: Rhino.DocObjects.HatchLine.DashCount
Return: int
Modifiers: public
Summary: Gets the number of dashes + gaps in this line.
Accessors: get

Property: Rhino.DocObjects.HatchLine.GetDashes
Return: IEnumerable<double>
Modifiers: public
Summary: Gets all of the dashes.
Accessors: get

Property: Rhino.DocObjects.HatchLine.IsValid
Return: bool
Modifiers: public
Summary: Verifies a hatch line is valid.
Accessors: get

Property: Rhino.DocObjects.HatchLine.Offset
Return: Vector2d
Modifiers: public
Summary: Get and sets this line's 2d offset for line repetitions. Offset.X is shift parallel to line. Offset.Y is spacing perpendicular to line.
Accessors: get set

Property: Rhino.DocObjects.HatchLine.PatternLength
Return: double
Modifiers: public
Summary: Get the total length of a pattern repeat.
Accessors: get

Method: Rhino.DocObjects.HatchLine.AppendDash(double dash)
Return: void
Modifiers: public
Summary: Add a dash to the pattern.
Parameter: dash (double)
Parameter Summary: Length to append, < 0 for a gap.

Method: Rhino.DocObjects.HatchLine.DashAt(int dashIndex)
Return: double
Modifiers: public
Summary: Get the dash length at the specified index.
Parameter: dashIndex (int)
Parameter Summary: Index of the dash to get.

Method: Rhino.DocObjects.HatchLine.Dispose()
Return: void
Modifiers: public
Summary: Actively releases the unmanaged object.

Method: Rhino.DocObjects.HatchLine.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Releases the unmanaged object.

Method: Rhino.DocObjects.HatchLine.SetDashes(IEnumerable<double> dashes)
Return: void
Modifiers: public
Summary: Sets a new dash array.
Parameter: dashes (IEnumerable<double>)
Parameter Summary: The dash enumeration.

Class: Rhino.DocObjects.HatchObject

Property: Rhino.DocObjects.HatchObject.HatchGeometry
Return: Hatch
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.HatchPattern

Constructor: Rhino.DocObjects.HatchPattern.HatchPattern()

Property: Rhino.DocObjects.HatchPattern.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.HatchPattern</b> .
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Description
Return: string
Modifiers: public
Summary: Gets and sets a short description of the pattern.
Accessors: get set

Property: Rhino.DocObjects.HatchPattern.FillType
Return: HatchPatternFillType
Modifiers: public
Summary: Gets the pattern's fill type.
Accessors: get set

Property: Rhino.DocObjects.HatchPattern.HatchLineCount
Return: int
Modifiers: public
Summary: Get the number of HatchLines in the pattern.
Accessors: get

Property: Rhino.DocObjects.HatchPattern.HatchLines
Return: IEnumerable<HatchLine>
Modifiers: public
Summary: Gets all the hatch lines.
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Index
Return: int
Modifiers: public, override
Summary: Index in the hatch pattern table for this pattern. -1 if not in the table.
Accessors: get set

Property: Rhino.DocObjects.HatchPattern.IsDeleted
Return: bool
Modifiers: public, override
Summary: Deleted hatch patterns are kept in the runtime hatch pattern table so that undo will work with hatch patterns.  Call IsDeleted to determine to determine if a hatch pattern is deleted.
Accessors: get

Property: Rhino.DocObjects.HatchPattern.IsReference
Return: bool
Modifiers: public, override
Summary: Rhino allows multiple files to be viewed simultaneously. Hatch patterns in the document are "normal" or "reference". Reference hatch patterns are not saved.
Accessors: get

Property: Rhino.DocObjects.HatchPattern.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.DocObjects.HatchPattern.ReadFromFile(string filename, bool quiet)
Return: HatchPattern[]
Modifiers: public, static
Summary: Reads hatch pattern definitions from a file.
Parameter: filename (string)
Parameter Summary: Name of an existing file. If filename is None or empty, default hatch pattern filename is used.
Parameter: quiet (bool)
Parameter Summary: Ignored.

Method: Rhino.DocObjects.HatchPattern.AddHatchLine(HatchLine hatchLine)
Return: int
Modifiers: public
Summary: Add a HatchLine to the pattern.
Parameter: hatchLine (HatchLine)
Parameter Summary: The hatch line to add.

Method: Rhino.DocObjects.HatchPattern.CreatePreviewGeometry(int width, int height, double angle)
Return: Rhino.Geometry.Line[]
Modifiers: public
Summary: Creates preview line segments of the hatch pattern.
Parameter: width (int)
Parameter Summary: The width of the preview.
Parameter: height (int)
Parameter Summary: The height of the preview.
Parameter: angle (double)
Parameter Summary: The rotation angle of the pattern display in radians.

Method: Rhino.DocObjects.HatchPattern.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.HatchPattern.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HatchPattern.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.HatchPattern.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.DocObjects.HatchPattern.HatchLineAt(int hatchLineIndex)
Return: HatchLine
Modifiers: public
Summary: Gets a HatchLine at an index.
Parameter: hatchLineIndex (int)
Parameter Summary: The index of the hatch line.

Method: Rhino.DocObjects.HatchPattern.OnSwitchToNonConst()
Return: void
Modifiers: protected, override

Method: Rhino.DocObjects.HatchPattern.RemoveAllHatchLines()
Return: void
Modifiers: public
Summary: Remove all of the hatch line from the pattern.

Method: Rhino.DocObjects.HatchPattern.RemoveHatchLine(int hatchLineIndex)
Return: bool
Modifiers: public
Summary: Remove a hatch line from the pattern.
Parameter: hatchLineIndex (int)
Parameter Summary: The index of the hatch line to remove.

Method: Rhino.DocObjects.HatchPattern.SetHatchLines(IEnumerable<HatchLine> hatchLines)
Return: int
Modifiers: public
Summary: Set all of the hatch lines at once. Existing hatch lines are deleted.
Parameter: hatchLines (IEnumerable<HatchLine>)
Parameter Summary: An enumeration of hatch lines.

Method: Rhino.DocObjects.HatchPattern.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.DocObjects.HatchPattern.Defaults

Constructor: Rhino.DocObjects.HatchPattern.Defaults.HatchPattern.Defaults()
Summary: Initializes a new instance of the HatchPattern.Defaults class

Property: Rhino.DocObjects.HatchPattern.Defaults.Dash
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Grid
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Grid60
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Hatch1
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Hatch2
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Hatch3
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Plus
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Solid
Return: HatchPattern
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.HatchPattern.Defaults.Squares
Return: HatchPattern
Modifiers: public, static
Accessors: get

Class: Rhino.DocObjects.HistoryRecord
Summary: Provides a single bundling of information to be passed to Rhino when setting up history for an object.

Constructor: Rhino.DocObjects.HistoryRecord.HistoryRecord(Command command, int version)

Property: Rhino.DocObjects.HistoryRecord.CopyOnReplaceObject
Return: bool
Modifiers: public
Summary: When an object is replaced and the old object has a history record with this field set, the history record is copied and attached to the new object. That allows a descendant object to continue the history linkage after it is edited.
Accessors: get set

Property: Rhino.DocObjects.HistoryRecord.Handle
Return: IntPtr
Modifiers: public
Summary: Wrapped native C++ pointer to CRhinoHistory instance
Accessors: get

Method: Rhino.DocObjects.HistoryRecord.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.HistoryRecord.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.DocObjects.HistoryRecord.SetBool(int id, bool value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetBools(int id, IEnumerable<bool> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetBrep(int id, Geometry.Brep value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetColor(int id, System.Drawing.Color value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetColors(int id, IEnumerable<Color> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetCurve(int id, Geometry.Curve value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetDouble(int id, double value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetDoubles(int id, IEnumerable<double> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetGuid(int id, System.Guid value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetGuids(int id, IEnumerable<Guid> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetHistoryVersion(int historyVersion)
Return: bool
Modifiers: public
Summary: Specifies a non-zero integer that identifies the version of this history record. The virtual ReplayHistory() functions can check this version to avoid replaying history using information created by earlier versions of the command.
Parameter: historyVersion (int)
Parameter Summary: Any non-zero integer. It is strongly suggested that something like YYYYMMDD be used.

Method: Rhino.DocObjects.HistoryRecord.SetInt(int id, int value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetInts(int id, IEnumerable<int> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetMesh(int id, Geometry.Mesh value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetObjRef(int id, ObjRef value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetPoint3d(int id, Rhino.Geometry.Point3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetPoint3dOnObject(int id, ObjRef objref, Rhino.Geometry.Point3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetPoint3ds(int id, IEnumerable<Point3d> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetString(int id, string value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetStrings(int id, IEnumerable<string> values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetSurface(int id, Geometry.Surface value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetTransorm(int id, Rhino.Geometry.Transform value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetVector3d(int id, Rhino.Geometry.Vector3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.HistoryRecord.SetVector3ds(int id, IEnumerable<Vector3d> values)
Return: bool
Modifiers: public

Class: Rhino.DocObjects.InstanceDefinition
Summary: This is the same as <b>InstanceDefinitionGeometry</b> , but in a Rhino document.

Property: Rhino.DocObjects.InstanceDefinition.ArchiveFileStatus
Return: InstanceDefinitionArchiveFileStatus
Modifiers: public
Summary: Returns the archive file status of a linked instance definition.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.InstanceDefinition</b> .
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.Index
Return: int
Modifiers: public, override
Summary: Index of this instance definition in the index definition table.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.IsDeleted
Return: bool
Modifiers: public, override
Summary: Returns True if this instance definition is deleted. Deleted object are not saved to a file archive.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.IsReference
Return: bool
Modifiers: public, override
Summary: An object from a work session reference model is reference a reference object and cannot be modified.  An object is a reference object if, and only if, it is on a reference layer.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.IsTenuous
Return: bool
Modifiers: public
Summary: True if this instance definition is from a linked file. It will be saved only if it is referenced by an instance reference object that is in the active geometry list and is being saved. Note that there can be multiple linked instance definitions with references to tenuous instance definitions.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.LayerStyle
Return: InstanceDefinitionLayerStyle
Modifiers: public
Summary: Specifies how model components (layers, materials, dimension styles, etc.) from linked instance definition files appear in the active model.
Accessors: get set

Property: Rhino.DocObjects.InstanceDefinition.ObjectCount
Return: int
Modifiers: public
Summary: Number of objects this definition uses. This counts the objects that are used to define the geometry. This does NOT count the number of references to this instance definition.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.SkipNestedLinkedDefinitions
Return: bool
Modifiers: public
Summary: This property applies when an instance definition is linked. If true, when reading the file that defines the content of the linked instance definition, skip any linked instance definitions found in that file. If false, when reading the file that defines the content of the linked instance definition, recursively load linked instance definitions found in that file.
Accessors: get set

Property: Rhino.DocObjects.InstanceDefinition.SourceArchive
Return: string
Modifiers: public, new
Summary: Gets the full file path for linked instance definitions.
Accessors: get

Property: Rhino.DocObjects.InstanceDefinition.UnitSystem
Return: UnitSystem
Modifiers: public
Summary: Gets the unit system of the instance definition. If the instance definition was imported from another 3dm file, the unit system may differ from that of the document.
Accessors: get set

Property: Rhino.DocObjects.InstanceDefinition.UpdateType
Return: InstanceDefinitionUpdateType
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(Display.DefinedViewportProjection definedViewportProjection, DisplayMode displayMode, System.Drawing.Size bitmapSize, bool applyDpiScaling)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview bitmap of the instance definition.
Parameter: definedViewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: displayMode (DisplayMode)
Parameter Summary: The display mode.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.
Parameter: applyDpiScaling (bool)
Parameter Summary: Specify True to apply DPI scaling (Windows-only).

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(Display.DefinedViewportProjection definedViewportProjection, DisplayMode displayMode, System.Drawing.Size bitmapSize)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview bitmap of the instance definition.
Parameter: definedViewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: displayMode (DisplayMode)
Parameter Summary: The display mode.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(Display.DefinedViewportProjection definedViewportProjection, System.Drawing.Size bitmapSize, bool applyDpiScaling)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a wireframe preview bitmap of the instance definition.
Parameter: definedViewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.
Parameter: applyDpiScaling (bool)
Parameter Summary: Specify True to apply DPI scaling (Windows-only).

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(Display.DefinedViewportProjection definedViewportProjection, System.Drawing.Size bitmapSize)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a wireframe preview bitmap of the instance definition.
Parameter: definedViewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(System.Guid displayModeId, Display.DefinedViewportProjection viewportProjection, Display.IsometricCamera isometricCamera, bool drawDecorations, System.Drawing.Size bitmapSize, bool applyDpiScaling)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview bitmap of the instance definition.
Parameter: displayModeId (System.Guid)
Parameter Summary: The id of the display mode to draw with.
Parameter: viewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: isometricCamera (Display.IsometricCamera)
Parameter Summary: The isometric camera angle.
Parameter: drawDecorations (bool)
Parameter Summary: Specify True to draw viewport decorations, such as grid and axes.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.
Parameter: applyDpiScaling (bool)
Parameter Summary: Specify True to apply DPI scaling (Windows-only).

Method: Rhino.DocObjects.InstanceDefinition.CreatePreviewBitmap(System.Guid definitionObjectId, Display.DefinedViewportProjection viewportProjection, DisplayMode displayMode, System.Drawing.Size bitmapSize, bool applyDpiScaling)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Creates a preview bitmap of the instance definition.
Parameter: definitionObjectId (System.Guid)
Parameter Summary: Id of one of this definition's objects to draw selected.
Parameter: viewportProjection (Display.DefinedViewportProjection)
Parameter Summary: The view projection.
Parameter: displayMode (DisplayMode)
Parameter Summary: The display mode.
Parameter: bitmapSize (System.Drawing.Size)
Parameter Summary: The bitmap size in pixels.
Parameter: applyDpiScaling (bool)
Parameter Summary: Specify True to apply DPI scaling (Windows-only).

Method: Rhino.DocObjects.InstanceDefinition.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Equality is checked against InstanceDefinition.Id

Method: Rhino.DocObjects.InstanceDefinition.GetContainers()
Return: InstanceDefinition[]
Modifiers: public
Summary: Gets a list of all the InstanceDefinitions that contain a reference this InstanceDefinition.

Method: Rhino.DocObjects.InstanceDefinition.GetHashCode()
Return: int
Modifiers: public, override
Summary: Use Id.GetHashCode()

Method: Rhino.DocObjects.InstanceDefinition.GetObjects()
Return: RhinoObject[]
Modifiers: public
Summary: Gets an array with the objects that belong to this instance definition.

Method: Rhino.DocObjects.InstanceDefinition.GetReferences(int wheretoLook)
Return: InstanceObject[]
Modifiers: public
Summary: Gets a list of the CRhinoInstanceObjects (inserts) that contains a reference this instance definition.
Parameter: wheretoLook (int)
Parameter Summary: 0 = get top level references in active document.
1 = get top level and nested references in active document.
2 = check for references from other instance definitions.

Method: Rhino.DocObjects.InstanceDefinition.InUse(int wheretoLook)
Return: bool
Modifiers: public
Summary: Determines whether the instance definition is referenced.
Parameter: wheretoLook (int)
Parameter Summary: 0 = check for top level references in active document.
1 = check for top level and nested references in active document.
2 = check for references in other instance definitions.

Method: Rhino.DocObjects.InstanceDefinition.Object(int index)
Return: RhinoObject
Modifiers: public
Summary: returns an object used as part of this definition.
Parameter: index (int)
Parameter Summary: 0 <= index < ObjectCount.

Method: Rhino.DocObjects.InstanceDefinition.UseCount()
Return: int
Modifiers: public
Summary: Returns the number of references of this instance definition in the model. Both top-level references and nested instances are included in the count.

Method: Rhino.DocObjects.InstanceDefinition.UseCount(out int topLevelReferenceCount, out int nestedReferenceCount)
Return: int
Modifiers: public
Summary: Returns the number of references of this instance definition in the model. Both top-level references and nested instances are included in the count.
Parameter: topLevelReferenceCount (int)
Parameter Summary: The number of top-level references.
Parameter: nestedReferenceCount (int)
Parameter Summary: The number of nested instances.

Method: Rhino.DocObjects.InstanceDefinition.UsesDefinition(int otherIdefIndex)
Return: int
Modifiers: public
Summary: Determines if this instance definition contains a reference to another instance definition.
Parameter: otherIdefIndex (int)
Parameter Summary: index of another instance definition.

Method: Rhino.DocObjects.InstanceDefinition.UsesLayer(int layerIndex)
Return: bool
Modifiers: public
Summary: Returns True if some object in the instance definition is on the layer with the specified layer index.
Parameter: layerIndex (int)
Parameter Summary: The index of layer to search for.

Method: Rhino.DocObjects.InstanceDefinition.UsesLinetype(int linetypeIndex)
Return: bool
Modifiers: public
Summary: Returns True if some object in the instance definition references the linetype with the specified linetype index.
Parameter: linetypeIndex (int)
Parameter Summary: The index of linetype to search for.

Class: Rhino.DocObjects.InstanceObject

Property: Rhino.DocObjects.InstanceObject.InsertionPoint
Return: Point3d
Modifiers: public
Summary: Base point coordinates of a block.
Accessors: get

Property: Rhino.DocObjects.InstanceObject.InstanceDefinition
Return: InstanceDefinition
Modifiers: public
Summary: instance definition that this object uses.
Accessors: get

Property: Rhino.DocObjects.InstanceObject.InstanceXform
Return: Transform
Modifiers: public
Summary: transformation applied to an instance definition for this object.
Accessors: get

Method: Rhino.DocObjects.InstanceObject.Explode(bool explodeNestedInstances, out RhinoObject[] pieces, out ObjectAttributes[] pieceAttributes, out Transform[] pieceTransforms)
Return: void
Modifiers: public
Summary: Explodes the instance reference into pieces.
Parameter: explodeNestedInstances (bool)
Parameter Summary: If true, then nested instance references are recursively exploded into pieces until actual geometry is found. If false, an InstanceObject is added to the pieces out parameter when this InstanceObject has nested references.
Parameter: pieces (RhinoObject[])
Parameter Summary: An array of Rhino objects will be assigned to this out parameter during this call.
Parameter: pieceAttributes (ObjectAttributes[])
Parameter Summary: An array of object attributes will be assigned to this out parameter during this call.
Parameter: pieceTransforms (Transform[])
Parameter Summary: An array of the previously applied transform matrices will be assigned to this out parameter during this call.

Method: Rhino.DocObjects.InstanceObject.Explode(bool skipHiddenPieces, System.Guid viewportId, bool explodeNestedInstances, out RhinoObject[] pieces, out ObjectAttributes[] pieceAttributes, out Transform[] pieceTransforms)
Return: void
Modifiers: public
Summary: Explodes the instance reference into pieces.
Parameter: skipHiddenPieces (bool)
Parameter Summary: If true, pieces that are not visible will not be appended to the pieces out parameter.
Parameter: viewportId (System.Guid)
Parameter Summary: If skipHiddenPieces is false, then viewportId is ignored. If bSkipHiddenPieces is True and and viewportId is not Guid.Empty, then layer and object per viewport visibility settings are used. If bSkipHiddenPieces is True and and viewport_id is Guid.Empty, then layer and object global visibility settings are used.
Parameter: explodeNestedInstances (bool)
Parameter Summary: If true, then nested instance references are recursively exploded into pieces until actual geometry is found. If false, an InstanceObject is added to the pieces out parameter when this InstanceObject has nested references.
Parameter: pieces (RhinoObject[])
Parameter Summary: An array of Rhino objects will be assigned to this out parameter during this call.
Parameter: pieceAttributes (ObjectAttributes[])
Parameter Summary: An array of object attributes will be assigned to this out parameter during this call.
Parameter: pieceTransforms (Transform[])
Parameter Summary: An array of the previously applied transform matrices will be assigned to this out parameter during this call.

Method: Rhino.DocObjects.InstanceObject.SubObjectFromComponentIndex(ComponentIndex ci)
Return: RhinoObject
Modifiers: public
Summary: Get a RhinoObject in this block

Method: Rhino.DocObjects.InstanceObject.UsesDefinition(int definitionIndex, out int nestingLevel)
Return: bool
Modifiers: public
Summary: Determine if this reference uses an instance definition
Parameter: definitionIndex (int)
Parameter Summary: 
Parameter: nestingLevel (int)
Parameter Summary: If the instance definition is used, this is the definition's nesting depth

Class: Rhino.DocObjects.Layer

Constructor: Rhino.DocObjects.Layer.Layer()

Property: Rhino.DocObjects.Layer.PathSeparator
Return: string
Modifiers: public, static
Summary: The string "::" (colon,colon) is used to separate parent and child layer names.
Accessors: get

Property: Rhino.DocObjects.Layer.Color
Return: Color
Modifiers: public
Summary: Gets or sets the display color for this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.ComponentStatus
Return: ComponentStatus
Modifiers: public, override
Summary: Gets or sets the status of the layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Layer</b> .
Accessors: get

Property: Rhino.DocObjects.Layer.FullPath
Return: string
Modifiers: public
Summary: Gets the full path to this layer. The full path includes nesting information.
Accessors: get

Property: Rhino.DocObjects.Layer.Id
Return: Guid
Modifiers: public, override
Summary: Gets or sets the ID of this layer object. You typically do not need to assign a custom ID.
Accessors: get set

Property: Rhino.DocObjects.Layer.IgesLevel
Return: int
Modifiers: public
Summary: Gets or sets the IGES level for this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.IsCurrent
Return: bool
Modifiers: public
Summary: Returns True if the layer is the current layer.
Accessors: get

Property: Rhino.DocObjects.Layer.IsDeleted
Return: bool
Modifiers: public, override
Summary: Gets a value indicating whether this layer has been deleted and is currently in the Undo buffer.
Accessors: get

Property: Rhino.DocObjects.Layer.IsExpanded
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether this layer is expanded in the Rhino Layer dialog.
Accessors: get set

Property: Rhino.DocObjects.Layer.IsLocked
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating the locked state of this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.IsReference
Return: bool
Modifiers: public, override
Summary: Gets a value indicting whether this layer is a referenced layer. Referenced layers are part of referenced documents.
Accessors: get

Property: Rhino.DocObjects.Layer.IsReferenceParentLayer
Return: bool
Modifiers: public
Summary: Returns True if the layer is a parent layer of the layer tree from a linked instance definition or the layer tree from a worksession reference model.
Accessors: get

Property: Rhino.DocObjects.Layer.IsVisible
Return: bool
Modifiers: public
Summary: Gets or sets the global visibility of this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.IsVisibleInUserInterface
Return: bool
Modifiers: public
Summary: Return True if the layer is visible in user interfaces that display layers. Returns False if the layer not visible in user interfaces. This is a runtime property that does not persist in .3dm files. This property is also used by the Layers panel to filter layers.
Accessors: get set

Property: Rhino.DocObjects.Layer.LayerIndex
Return: int
Modifiers: public
Summary: Gets or sets the index of this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.LinetypeIndex
Return: int
Modifiers: public
Summary: Gets or sets the line-type index for this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.ModelIsVisible
Return: bool
Modifiers: public
Summary: Gets or sets the model visiblity of this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.ModelPersistentVisibility
Return: bool
Modifiers: public
Summary: Gets or sets the model persistent visibility of this layer. The persistent viability setting is used for layers whose visibility can be changed by a parent layer. In this case, when a parent layer is turned off, then child layers are also turned off. The persistent visibility setting determines what happens when the parent is turned on again.
Accessors: get set

Property: Rhino.DocObjects.Layer.Name
Return: string
Modifiers: public, override
Summary: Gets or sets the name of this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.ParentLayerId
Return: Guid
Modifiers: public
Summary: Gets the ID of the parent layer. Layers can be organized in a hierarchical structure, in which case this returns the parent layer ID. If the layer has no parent, Guid.Empty will be returned.
Accessors: get set

Property: Rhino.DocObjects.Layer.PersistentVisibility
Return: bool
Modifiers: public
Summary: Gets or sets the global persistent visibility setting for this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.PerViewportIsVisibleInNewDetails
Return: bool
Modifiers: public
Summary: Gets and sets the initial per viewport visibility of this layer in newly created detail views.
Accessors: get set

Property: Rhino.DocObjects.Layer.PlotColor
Return: Color
Modifiers: public
Summary: Gets or sets the plot color for this layer.
Accessors: get set

Property: Rhino.DocObjects.Layer.PlotWeight
Return: double
Modifiers: public
Summary: Gets or sets the weight of the plotting pen in millimeters. A weight of 0.0 indicates the "default" pen weight should be used. A weight of -1.0 indicates the layer should not be printed.
Accessors: get set

Property: Rhino.DocObjects.Layer.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: Gets or sets the <b>Render.RenderMaterial</b> for objects on this layer that have MaterialSource() == MaterialFromLayer. A None result indicates that no <b>Render.RenderMaterial</b> has been assigned  and the material created by the default Material constructor or the <b>RenderMaterialIndex</b> should be used.
Accessors: get set

Property: Rhino.DocObjects.Layer.RenderMaterialIndex
Return: int
Modifiers: public
Summary: Gets or sets the index of render material for objects on this layer that have MaterialSource() == MaterialFromLayer. A material index of -1 indicates no material has been assigned and the material created by the default Material constructor should be used.
Accessors: get set

Property: Rhino.DocObjects.Layer.SortIndex
Return: int
Modifiers: public
Summary: Runtime index used to sort layers in layer dialog.
Accessors: get

Property: Rhino.DocObjects.Layer.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.DocObjects.Layer.GetDefaultLayerProperties()
Return: Layer
Modifiers: public, static
Summary: Constructs a layer with the current default properties. The default layer properties are:
color = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerColor
line style = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerLineStyle
material index = -1
IGES level = -1
mode = NormalLayer
name = empty
layer index = 0 (ignored by AddLayer) | Since: 5.0

Method: Rhino.DocObjects.Layer.GetLeafName(Layer layer)
Return: string
Modifiers: public, static
Summary: Get a layer name's "leaf" level name

Method: Rhino.DocObjects.Layer.GetLeafName(string fullPath)
Return: string
Modifiers: public, static
Summary: Get a layer name's "leaf" level name

Method: Rhino.DocObjects.Layer.GetParentName(Layer layer)
Return: string
Modifiers: public, static
Summary: Get a layer's "parent" path name

Method: Rhino.DocObjects.Layer.GetParentName(string fullPath)
Return: string
Modifiers: public, static
Summary: Get a layer's "parent" path name

Method: Rhino.DocObjects.Layer.IsValidName(string name)
Return: bool
Modifiers: public, static
Summary: Determines if a given string is valid for a layer name.
Parameter: name (string)
Parameter Summary: A name to be validated.

Method: Rhino.DocObjects.Layer.CommitChanges()
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.CopyAttributesFrom(Layer otherLayer)
Return: void
Modifiers: public
Summary: Copy typical attributes from another layer

Method: Rhino.DocObjects.Layer.Default()
Return: void
Modifiers: public
Summary: Sets layer to default settings.

Method: Rhino.DocObjects.Layer.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Layer.DeleteModelVisible()
Return: void
Modifiers: public
Summary: Remove any model visibility setting so the layer's global setting will be used for all viewports.

Method: Rhino.DocObjects.Layer.DeletePerViewportColor(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Remove any per viewport layer color setting so the layer's overall setting will be used for all viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting for this viewport will be deleted. If Guid.Empty, the all per viewport layer color settings will be removed.

Method: Rhino.DocObjects.Layer.DeletePerViewportPlotColor(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Remove any per viewport layer plot color setting so the layer's overall setting will be used for all viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting for this viewport will be deleted. If Guid.Empty, the all per viewport layer color settings will be removed.

Method: Rhino.DocObjects.Layer.DeletePerViewportPlotWeight(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Remove any per viewport layer plot weight setting so the layer's overall setting will be used for all viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting for this viewport will be deleted. If Guid.Empty, the all per viewport layer color settings will be removed.

Method: Rhino.DocObjects.Layer.DeletePerViewportSettings(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Deletes per viewport layer settings.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the settings for that viewport are deleted. If Guid.Empty, then all per viewport settings are deleted.

Method: Rhino.DocObjects.Layer.DeletePerViewportVisible(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Remove any per viewport visibility setting so the layer's overall setting will be used for all viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting for this viewport will be deleted. If Guid.Empty, the all per viewport visibility settings will be removed.

Method: Rhino.DocObjects.Layer.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.Equals(Layer other)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.Equals(object obj)
Return: bool
Modifiers: public, override

Method: Rhino.DocObjects.Layer.GetChildren()
Return: Layer[]
Modifiers: public
Summary: Gets immediate children of this layer. Note that child layers may have their own children.

Method: Rhino.DocObjects.Layer.GetChildren(bool allChildren)
Return: Layer[]
Modifiers: public
Summary: Gets the children of this layer.
Parameter: allChildren (bool)
Parameter Summary: If false, the immediate children are returned. If true, immediate children, their children, and so on, are returned.

Method: Rhino.DocObjects.Layer.GetCustomSectionStyle()
Return: SectionStyle
Modifiers: public
Summary: Get an optional custom section style associated with these attributes.

Method: Rhino.DocObjects.Layer.GetHashCode()
Return: int
Modifiers: public, override

Method: Rhino.DocObjects.Layer.GetPersistentLocking()
Return: bool
Modifiers: public
Summary: The persistent locking setting is used for layers that can be locked by a "parent" object. A common case is when a layer is a child layer (Layer.ParentI is not nil). In this case, when a parent layer is locked, then child layers are also locked. The persistent locking setting determines what happens when the parent is unlocked again.

Method: Rhino.DocObjects.Layer.GetPersistentVisibility()
Return: bool
Modifiers: public
Summary: The global persistent visibility setting is used for layers whose visibility can be changed by a "parent" object. A common case is when a layer is a child layer (ParentId is not nil). In this case, when a parent layer is turned off, then child layers are also turned off. The persistent visibility setting determines what happens when the parent is turned on again.

Method: Rhino.DocObjects.Layer.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.Layer.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.DocObjects.Layer.HasPerViewportSettings(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Verifies that a layer has per viewport settings.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then checks for settings for that specific viewport. If Guid.Empty, then checks for any viewport settings.

Method: Rhino.DocObjects.Layer.HasSelectedObjects(bool checkSubObjects)
Return: bool
Modifiers: public
Summary: Returns True if the layer has one or more selected Rhino objects.
Parameter: checkSubObjects (bool)
Parameter Summary: If true, the search will include objects that have some subset of the object selected, like some edges of a Brep. If false, objects where the entire object is not selected are ignored.

Method: Rhino.DocObjects.Layer.IsChildOf(int layerIndex)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.IsChildOf(Layer otherLayer)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.IsChildOf(System.Guid otherlayerId)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.IsParentOf(int layerIndex)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.IsParentOf(Layer otherLayer)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.IsParentOf(System.Guid otherLayer)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Layer.ParentLayer(bool rootLevelParent)
Return: Layer
Modifiers: public
Summary: Returns parent of a layer.
Parameter: rootLevelParent (bool)
Parameter Summary: If true, the root level parent is returned. The root level parent never has a parent. If false, the immediate parent is returned. The immediate parent may have a parent.

Method: Rhino.DocObjects.Layer.PerViewportColor(System.Guid viewportId)
Return: System.Drawing.Color
Modifiers: public
Summary: Gets the display color for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.

Method: Rhino.DocObjects.Layer.PerViewportIsVisible(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Gets the per viewport visibility of this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the visibility setting for that viewport is returned. If Guid.Empty, the IsVisible property is returned.

Method: Rhino.DocObjects.Layer.PerViewportPersistentVisibility(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Gets the per layer persistent visibility. The persistent viability setting is used for layers whose visibility can be changed by a parent layer. In this case, when a parent layer is turned off, then child layers are also turned off. The persistent visibility setting determines what happens when the parent is turned on again.

Method: Rhino.DocObjects.Layer.PerViewportPlotColor(System.Guid viewportId)
Return: System.Drawing.Color
Modifiers: public
Summary: Gets the plot color for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.

Method: Rhino.DocObjects.Layer.PerViewportPlotWeight(System.Guid viewportId)
Return: double
Modifiers: public
Summary: Gets the plot weight, in millimeters, for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.

Method: Rhino.DocObjects.Layer.RemoveCustomSectionStyle()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Layer.SetCustomSectionStyle(SectionStyle sectionStyle)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Layer.SetPersistentLocking(bool persistentLocking)
Return: void
Modifiers: public
Summary: Set the persistent locking setting for this layer

Method: Rhino.DocObjects.Layer.SetPersistentVisibility(bool persistentVisibility)
Return: void
Modifiers: public
Summary: Set the global persistent visibility setting for this layer.

Method: Rhino.DocObjects.Layer.SetPerViewportColor(System.Guid viewportId, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Sets the display color for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.
Parameter: color (System.Drawing.Color)
Parameter Summary: The display color.

Method: Rhino.DocObjects.Layer.SetPerViewportPersistentVisibility(System.Guid viewportId, bool persistentVisibility)
Return: void
Modifiers: public
Summary: Sets the per layer persistent visibility. The persistent viability setting is used for layers whose visibility can be changed by a parent layer. In this case, when a parent layer is turned off, then child layers are also turned off. The persistent visibility setting determines what happens when the parent is turned on again.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id. If Guid.Empty, then the setting applies to all viewports with per viewport layer settings.
Parameter: persistentVisibility (bool)
Parameter Summary: If true, this layer's visibility in the specified viewport is controlled by a parent object and the parent is turned on (after being off), then this layer will also be turned on in the specified viewport. If false, this layer's visibility in the specified viewport is controlled by a parent object and the parent layer is turned on (after being off), then this layer will continue to be off in the specified viewport.

Method: Rhino.DocObjects.Layer.SetPerViewportPlotColor(System.Guid viewportId, System.Drawing.Color color)
Return: void
Modifiers: public
Summary: Sets the plot color for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.
Parameter: color (System.Drawing.Color)
Parameter Summary: The plot color.

Method: Rhino.DocObjects.Layer.SetPerViewportPlotWeight(System.Guid viewportId, double plotWeight)
Return: void
Modifiers: public
Summary: Sets the plot weight, in millimeters, for this layer.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id.
Parameter: plotWeight (double)
Parameter Summary: The plot weight in millimeters. A weight of  0.0 indicates the "default" pen weight should be used. A weight of -1.0 indicates the layer should not be printed.

Method: Rhino.DocObjects.Layer.SetPerViewportVisible(System.Guid viewportId, bool visible)
Return: void
Modifiers: public
Summary: Controls layer visibility in specific viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting applies only to the viewport with the specified id. If Guid.Empty, then the setting applies to all viewports with per viewport layer settings.
Parameter: visible (bool)
Parameter Summary: True to make layer visible, False to make layer invisible.

Method: Rhino.DocObjects.Layer.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Method: Rhino.DocObjects.Layer.ToString()
Return: string
Modifiers: public, override

Method: Rhino.DocObjects.Layer.UnsetModelPersistentVisibility()
Return: void
Modifiers: public
Summary: Remove any model persistent visibility setting from this layer.

Method: Rhino.DocObjects.Layer.UnsetPersistentLocking()
Return: void
Modifiers: public
Summary: Remove any explicitly persistent locking settings from this layer

Method: Rhino.DocObjects.Layer.UnsetPersistentVisibility()
Return: void
Modifiers: public
Summary: Remove any explicit persistent visibility setting from this layer

Method: Rhino.DocObjects.Layer.UnsetPerViewportPersistentVisibility(System.Guid viewportId)
Return: void
Modifiers: public
Summary: Remove any per viewport persistent visibility setting so the layer's overall setting will be used for all viewports.
Parameter: viewportId (System.Guid)
Parameter Summary: If not Guid.Empty, then the setting for this viewport will be deleted. If Guid.Empty, the all per viewport visibility settings will be removed.

Class: Rhino.DocObjects.LeaderObject
Summary: Rhino Object that represents leader geometry and attributes

Property: Rhino.DocObjects.LeaderObject.LeaderGeometry
Return: Leader
Modifiers: public
Summary: Get the leader geometry for this object.
Accessors: get

Class: Rhino.DocObjects.LightObject

Property: Rhino.DocObjects.LightObject.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.LightObject.Index
Return: int
Modifiers: public, override
Accessors: get set

Property: Rhino.DocObjects.LightObject.LightGeometry
Return: Light
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.LightObject.DuplicateLightGeometry()
Return: Light
Modifiers: public

Class: Rhino.DocObjects.LinearDimensionObject
Summary: Rhino Object that represents a linear dimension geometry and attributes

Property: Rhino.DocObjects.LinearDimensionObject.LinearDimensionGeometry
Return: LinearDimension
Modifiers: public
Summary: Get the dimension geometry for this object.
Accessors: get

Class: Rhino.DocObjects.Linetype

Constructor: Rhino.DocObjects.Linetype.Linetype()

Constructor: Rhino.DocObjects.Linetype.Linetype(Linetype other)

Property: Rhino.DocObjects.Linetype.AlwaysModelDistances
Return: bool
Modifiers: public
Summary: Linetype patterns and widths are typically interpreted as distances on the printed output when printing. In this case AlwaysModelDistances is False (default). When set to true, the linetype pattern and width will be interpreted as being in world distances. This is useful for cases like modeling a road as a single curve.
Accessors: get set

Property: Rhino.DocObjects.Linetype.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.LinePattern</b> .
Accessors: get

Property: Rhino.DocObjects.Linetype.InUse
Return: bool
Modifiers: public
Summary: Returns True if the linetype is in use by a Rhino object, a layer, an instance definition, or a section style.
Accessors: get

Property: Rhino.DocObjects.Linetype.IsDeleted
Return: bool
Modifiers: public, override
Summary: Gets a value indicating whether this linetype has been deleted and is currently in the Undo buffer.
Accessors: get

Property: Rhino.DocObjects.Linetype.IsModified
Return: bool
Modifiers: public
Summary: True if this linetype has been modified by LinetypeTable.ModifyLinetype() and the modifications can be undone.
Accessors: get

Property: Rhino.DocObjects.Linetype.IsPatternLocked
Return: bool
Modifiers: public
Summary: Returns True if the pattern is locked and cannot be modified.
Accessors: get

Property: Rhino.DocObjects.Linetype.IsReference
Return: bool
Modifiers: public, override
Summary: Gets a value indicting whether this linetype is a referenced linetype. Referenced linetypes are part of referenced documents.
Accessors: get

Property: Rhino.DocObjects.Linetype.LineCapStyle
Return: LineCapStyle
Modifiers: public
Summary: Defines how the ends of open curves should be drawn
Accessors: get set

Property: Rhino.DocObjects.Linetype.LineJoinStyle
Return: LineJoinStyle
Modifiers: public
Summary: Defines how the corners of curves should be drawn
Accessors: get set

Property: Rhino.DocObjects.Linetype.LinetypeIndex
Return: int
Modifiers: public
Summary: The index of this linetype.
Accessors: get set

Property: Rhino.DocObjects.Linetype.Name
Return: string
Modifiers: public, override
Summary: The name of this linetype.
Accessors: get set

Property: Rhino.DocObjects.Linetype.PatternLength
Return: double
Modifiers: public
Summary: Total length of one repeat of the pattern.
Accessors: get

Property: Rhino.DocObjects.Linetype.SegmentCount
Return: int
Modifiers: public
Summary: Number of segments in the pattern.
Accessors: get

Property: Rhino.DocObjects.Linetype.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Property: Rhino.DocObjects.Linetype.Width
Return: double
Modifiers: public
Summary: Base width for this linetype
Accessors: get set

Property: Rhino.DocObjects.Linetype.WidthUnits
Return: UnitSystem
Modifiers: public
Summary: Unit system that widths are defined in. UnitSystem.None is default and means that the width is defined in pixels.
Accessors: get set

Method: Rhino.DocObjects.Linetype.CreateFromPatternString(string patternString, bool millimeters)
Return: Linetype
Modifiers: public, static
Summary: Creates a linetype from a pattern string. Values greater than zero represent line segments, and values less than or equal to zero represents space segments.
Parameter: patternString (string)
Parameter Summary: The pattern string.
Parameter: millimeters (bool)
Parameter Summary: Specify True if the pattern is represented in millimeters. Specify False if the pattern is represented in inches.

Method: Rhino.DocObjects.Linetype.ReadFromFile(string path)
Return: Linetype[]
Modifiers: public, static
Summary: Reads linetypes from either a Rhino .3dm file or an AutoCAD .lin file.
Parameter: path (string)
Parameter Summary: The path to the file to read.

Method: Rhino.DocObjects.Linetype.AppendSegment(double length, bool isSolid)
Return: int
Modifiers: public
Summary: Adds a segment to the pattern.
Parameter: length (double)
Parameter Summary: The length of the segment to be added.
Parameter: isSolid (bool)
Parameter Summary: If true, the length is interpreted as a line. If false, then the length is interpreted as a space.

Method: Rhino.DocObjects.Linetype.CommitChanges()
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Linetype.Default()
Return: void
Modifiers: public
Summary: Set linetype to default settings.

Method: Rhino.DocObjects.Linetype.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Linetype.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Linetype.DuplicateLinetype()
Return: Linetype
Modifiers: public
Summary: Duplicates a linetype, clears the name, id, and locked bits.

Method: Rhino.DocObjects.Linetype.GetSegment(int index, out double length, out bool isSolid)
Return: void
Modifiers: public
Summary: Gets the segment information at a index.
Parameter: index (int)
Parameter Summary: Zero based index of the segment.
Parameter: length (double)
Parameter Summary: The length of the segment in millimeters.
Parameter: isSolid (bool)
Parameter Summary: If the length is interpreted as a line, True is assigned during the call to this out parameter.
If the length is interpreted as a space, then False is assigned during the call to this out parameter.

Method: Rhino.DocObjects.Linetype.GetTaperPoints()
Return: Point2d[]
Modifiers: public
Summary: Taper points are positions/width combinations along the length of a curve

Method: Rhino.DocObjects.Linetype.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.Linetype.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.DocObjects.Linetype.PatternString(bool millimeters)
Return: string
Modifiers: public
Summary: Returns a string that represents the pattern of the linetype, which can be used in user interface. Values greater than zero represent line segments, and values less than or equal to zero represent space segments.
Parameter: millimeters (bool)
Parameter Summary: If true, the string is formatted in millimeters. If false, the string is formatted in inches.

Method: Rhino.DocObjects.Linetype.RemoveSegment(int index)
Return: bool
Modifiers: public
Summary: Removes a segment in the linetype.
Parameter: index (int)
Parameter Summary: Zero based index of the segment to remove.

Method: Rhino.DocObjects.Linetype.RemoveTaper()
Return: void
Modifiers: public
Summary: Remove taper information for stroke

Method: Rhino.DocObjects.Linetype.SetSegment(int index, double length, bool isSolid)
Return: bool
Modifiers: public
Summary: Sets the length and type of the segment at index.
Parameter: index (int)
Parameter Summary: Zero based index of the segment.
Parameter: length (double)
Parameter Summary: The length of the segment to be added in millimeters.
Parameter: isSolid (bool)
Parameter Summary: If true, the length is interpreted as a line. If false, then the length is interpreted as a space.

Method: Rhino.DocObjects.Linetype.SetSegments(IEnumerable<double> segments)
Return: bool
Modifiers: public
Summary: Set all segments.
Parameter: segments (IEnumerable<double>)
Parameter Summary: An array of segments lengths. Lengths >= 0 are interpreted as a line. Lengths < 0 are interpreted as a space.

Method: Rhino.DocObjects.Linetype.SetTaper(double startWidth, double endWidth)
Return: void
Modifiers: public
Summary: Set taper to a simple start width / end width

Method: Rhino.DocObjects.Linetype.SetTaper(double startWidth, Point2d taperPoint, double endWidth)
Return: void
Modifiers: public
Summary: Set taper for this linetype width a single internal taper point

Method: Rhino.DocObjects.Linetype.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.DocObjects.Material

Constructor: Rhino.DocObjects.Material.Material()

Constructor: Rhino.DocObjects.Material.Material(Material other)

Property: Rhino.DocObjects.Material.DefaultMaterial
Return: Material
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.Material.MaxShine
Return: double
Modifiers: public, static
Accessors: get

Property: Rhino.DocObjects.Material.AlphaTransparency
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.AmbientColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.RenderMaterial</b> .
Accessors: get

Property: Rhino.DocObjects.Material.DiffuseColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.DisableLighting
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.EmissionColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.FresnelIndexOfRefraction
Return: double
Modifiers: public
Summary: Gets or sets the Fresnel index of refraction of the material, default is 1.56
Accessors: get set

Property: Rhino.DocObjects.Material.FresnelReflections
Return: bool
Modifiers: public
Summary: Gets or sets if Fresnel reflections are used.
Accessors: get set

Property: Rhino.DocObjects.Material.IndexOfRefraction
Return: double
Modifiers: public
Summary: Gets or sets the index of refraction of the material, generally >= 1.0 (speed of light in vacuum)/(speed of light in material)
Accessors: get set

Property: Rhino.DocObjects.Material.IsDefaultMaterial
Return: bool
Modifiers: public
Summary: By default Rhino layers and objects are assigned the default rendering material.
Accessors: get

Property: Rhino.DocObjects.Material.IsDeleted
Return: bool
Modifiers: public, override
Summary: Deleted materials are kept in the runtime material table so that undo will work with materials.  Call IsDeleted to determine to determine if a material is deleted.
Accessors: get

Property: Rhino.DocObjects.Material.IsDocumentControlled
Return: bool
Modifiers: public, override
Summary: If True this object may not be modified. Any properties or functions that attempt to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
Accessors: get

Property: Rhino.DocObjects.Material.IsPhysicallyBased
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Material.IsReference
Return: bool
Modifiers: public, override
Summary: Rhino allows multiple files to be viewed simultaneously. Materials in the document are "normal" or "reference". Reference materials are not saved.
Accessors: get

Property: Rhino.DocObjects.Material.MaterialIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Material.Name
Return: string
Modifiers: public, override
Accessors: get set

Property: Rhino.DocObjects.Material.PhysicallyBased
Return: PhysicallyBasedMaterial
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Material.PreviewColor
Return: Color
Modifiers: public
Summary: Very simple preview color function for GUIs.
Accessors: get

Property: Rhino.DocObjects.Material.RDKMaterialID
Return: Guid
Modifiers: public
Summary: Gets the RDK material ID.
Accessors: get

Property: Rhino.DocObjects.Material.ReflectionColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.ReflectionGlossiness
Return: double
Modifiers: public
Summary: Gets or sets the reflection glossiness.
Accessors: get set

Property: Rhino.DocObjects.Material.Reflectivity
Return: double
Modifiers: public
Summary: Gets or sets how reflective a material is, 0f is no reflection 1f is 100% reflective.
Accessors: get set

Property: Rhino.DocObjects.Material.RefractionGlossiness
Return: double
Modifiers: public
Summary: Gets or sets the refraction glossiness.
Accessors: get set

Property: Rhino.DocObjects.Material.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: Get the RenderMaterial related to this Material.  Will create a new RenderMaterial if none exists. This can happen for older documents.
Accessors: get

Property: Rhino.DocObjects.Material.RenderMaterialInstanceId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.RenderPlugInId
Return: Guid
Modifiers: public
Summary: The Id of the RenderPlugIn that is associated with this material.
Accessors: get set

Property: Rhino.DocObjects.Material.Shine
Return: double
Modifiers: public
Summary: Gets or sets the shine factor of the material.
Accessors: get set

Property: Rhino.DocObjects.Material.SpecularColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.Transparency
Return: double
Modifiers: public
Summary: Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
Accessors: get set

Property: Rhino.DocObjects.Material.TransparentColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Material.UseCount
Return: int
Modifiers: public
Summary: Number of objects and layers that use this material.
Accessors: get

Property: Rhino.DocObjects.Material.UserStringCount
Return: int
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.Material.ClearMaterialChannels()
Return: void
Modifiers: public
Summary: Removes all material channels

Method: Rhino.DocObjects.Material.CommitChanges()
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.CopyFrom(Material other)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Material.Default()
Return: void
Modifiers: public
Summary: Set material to default settings.

Method: Rhino.DocObjects.Material.GetBitmapTexture()
Return: Texture
Modifiers: public

Method: Rhino.DocObjects.Material.GetBumpTexture()
Return: Texture
Modifiers: public
Summary: Gets the bump texture of this material.

Method: Rhino.DocObjects.Material.GetEnvironmentTexture()
Return: Texture
Modifiers: public

Method: Rhino.DocObjects.Material.GetTexture(TextureType which)
Return: Texture
Modifiers: public
Summary: Get the texture that corresponds with the specified texture type for this material.

Method: Rhino.DocObjects.Material.GetTextures()
Return: Texture[]
Modifiers: public
Summary: Get array of textures that this material uses

Method: Rhino.DocObjects.Material.GetTransparencyTexture()
Return: Texture
Modifiers: public

Method: Rhino.DocObjects.Material.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets a user string.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.Material.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.

Method: Rhino.DocObjects.Material.MaterialChannelIdFromIndex(int material_channel_index)
Return: System.Guid
Modifiers: public
Summary: Finds id of the material channel at given index.
Parameter: material_channel_index (int)
Parameter Summary: Index

Method: Rhino.DocObjects.Material.MaterialChannelIndexFromId(System.Guid material_channel_id, bool bAddIdIfNotPresent)
Return: int
Modifiers: public
Summary: Finds index of the material channel that refers to a material channel with the given id. Optionally adds channel if one is not found.
Parameter: material_channel_id (System.Guid)
Parameter Summary: Id
Parameter: bAddIdIfNotPresent (bool)
Parameter Summary: Controls whether to add channel if none exist

Method: Rhino.DocObjects.Material.OnSwitchToNonConst()
Return: void
Modifiers: protected, override

Method: Rhino.DocObjects.Material.SetBitmapTexture(string filename)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetBitmapTexture(Texture texture)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetBumpTexture(string filename)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetBumpTexture(Texture texture)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetEnvironmentTexture(string filename)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetEnvironmentTexture(Texture texture)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetTexture(Texture texture, TextureType which)
Return: bool
Modifiers: public
Summary: Set the texture that corresponds with the specified texture type for this material.
Parameter: texture (Texture)
Parameter Summary: An instance of Rhino.DocObjects.Texture
Parameter: which (TextureType)
Parameter Summary: Use Rhino.DocObjects.TextureType

Method: Rhino.DocObjects.Material.SetTransparencyTexture(string filename)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetTransparencyTexture(Texture texture)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Material.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Method: Rhino.DocObjects.Material.ToPhysicallyBased()
Return: void
Modifiers: public

Class: Rhino.DocObjects.MaterialRef

Property: Rhino.DocObjects.MaterialRef.BackFaceMaterialId
Return: Guid
Modifiers: public
Summary: The Id of the Material used to render the back of an object.
Accessors: get

Property: Rhino.DocObjects.MaterialRef.BackFaceMaterialIndex
Return: int
Modifiers: public
Summary: The index of the material used to render the back of an object
Accessors: get

Property: Rhino.DocObjects.MaterialRef.FrontFaceMaterialId
Return: Guid
Modifiers: public
Summary: The Id of the Material used to render the front of an object.
Accessors: get

Property: Rhino.DocObjects.MaterialRef.FrontFaceMaterialIndex
Return: int
Modifiers: public
Summary: The index of the material used to render the front of an object
Accessors: get

Property: Rhino.DocObjects.MaterialRef.MaterialSource
Return: ObjectMaterialSource
Modifiers: public
Summary: Determines if the simple material should come from the object or from it's layer.
Accessors: get

Property: Rhino.DocObjects.MaterialRef.PlugInId
Return: Guid
Modifiers: public
Summary: Identifies a rendering plug-in
Accessors: get set

Method: Rhino.DocObjects.MaterialRef.Dispose()
Return: void
Modifiers: public

Class: Rhino.DocObjects.MaterialRefCreateParams
Summary: Options passed to MaterialRefs.Create

Constructor: Rhino.DocObjects.MaterialRefCreateParams.MaterialRefCreateParams()
Summary: Initializes a new instance of the MaterialRefCreateParams class

Property: Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialId
Return: Guid
Modifiers: public
Summary: The Id of the Material used to render the back of an object.
Accessors: get set

Property: Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialIndex
Return: int
Modifiers: public
Summary: The index of the material used to render the back of an object
Accessors: get set

Property: Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialId
Return: Guid
Modifiers: public
Summary: The Id of the Material used to render the front of an object.
Accessors: get set

Property: Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialIndex
Return: int
Modifiers: public
Summary: The index of the material used to render the front of an object
Accessors: get set

Property: Rhino.DocObjects.MaterialRefCreateParams.MaterialSource
Return: ObjectMaterialSource
Modifiers: public
Summary: Determines if the simple material should come from the object or from it's layer.
Accessors: get set

Property: Rhino.DocObjects.MaterialRefCreateParams.PlugInId
Return: Guid
Modifiers: public
Summary: Identifies a rendering plug-in
Accessors: get set

Class: Rhino.DocObjects.MaterialRefs
Summary: If you are developing a high quality plug-in renderer, and a user is assigning a custom render material to this object, then add rendering material information to the MaterialRefs dictionary.  Note to developers: As soon as the MaterialRefs dictionary contains items rendering material queries slow down.  Do not populate the MaterialRefs dictionary when setting the MaterialIndex will take care of your needs.

Property: Rhino.DocObjects.MaterialRefs.Count
Return: int
Modifiers: public
Summary: Gets the number of elements contained in this dictionary
Accessors: get

Property: Rhino.DocObjects.MaterialRefs.IsReadOnly
Return: bool
Modifiers: public
Summary: IDictionary required property, always returns False for this dictionary.
Accessors: get

Property: Rhino.DocObjects.MaterialRefs.Keys
Return: ICollection<Guid>
Modifiers: public
Summary: Gets an ICollection containing the plug-in Id's in this dictionary.
Accessors: get

Property: Rhino.DocObjects.MaterialRefs.Values
Return: ICollection<MaterialRef>
Modifiers: public
Summary: Gets an ICollection containing the MaterialRef objects in this dictionary.
Accessors: get

Property: Rhino.DocObjects.MaterialRefs.this[Guid key]
Return: MaterialRef
Modifiers: public
Summary: Gets or sets the element with the specified plug-in Id.

Method: Rhino.DocObjects.MaterialRefs.Add(KeyValuePair<Guid, MaterialRef> item)
Return: void
Modifiers: public
Summary: Adds an item to this dictionary.
Parameter: item (KeyValuePair<Guid, MaterialRef>)
Parameter Summary: The object to add to this dictionary

Method: Rhino.DocObjects.MaterialRefs.Add(System.Guid key, MaterialRef value)
Return: void
Modifiers: public
Summary: Add or replace an element with the provided key and value to this dictionary.
Parameter: key (System.Guid)
Parameter Summary: The plug-in associated with this MaterialRef
Parameter: value (MaterialRef)
Parameter Summary: MaterialRef to add to this dictionary

Method: Rhino.DocObjects.MaterialRefs.Clear()
Return: void
Modifiers: public
Summary: Removes all items from this dictionary.

Method: Rhino.DocObjects.MaterialRefs.Contains(KeyValuePair<Guid, MaterialRef> item)
Return: bool
Modifiers: public
Summary: Determines whether this dictionary contains a specific value.
Parameter: item (KeyValuePair<Guid, MaterialRef>)
Parameter Summary: The object to locate in this dictionary.

Method: Rhino.DocObjects.MaterialRefs.ContainsKey(System.Guid key)
Return: bool
Modifiers: public
Summary: Determines whether this dictionary contains an MaterialRef with the specified plug-in id.
Parameter: key (System.Guid)
Parameter Summary: The plug-in Id used to locate a MaterialRef in this dictionary.

Method: Rhino.DocObjects.MaterialRefs.CopyTo(KeyValuePair<Guid, MaterialRef>[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the elements of this dictionary to an System.Array, starting at a particular System.Array index.
Parameter: array (KeyValuePair<Guid, MaterialRef>[])
Parameter Summary: The one-dimensional System.Array that is the destination of the elements copied from this dictionary. The System.Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.

Method: Rhino.DocObjects.MaterialRefs.Create(MaterialRefCreateParams createParams)
Return: MaterialRef
Modifiers: public
Summary: Call this method to create a MaterialRef which can be used when calling one of the Add methods.
Parameter: createParams (MaterialRefCreateParams)
Parameter Summary: Values used to initialize the MaterialRef

Method: Rhino.DocObjects.MaterialRefs.MaterialRef>> GetEnumerator()
Return: IEnumerator<KeyValuePair<Guid,
Modifiers: public
Summary: Returns an enumerator that iterates through this dictionary.

Method: Rhino.DocObjects.MaterialRefs.Remove(KeyValuePair<Guid, MaterialRef> item)
Return: bool
Modifiers: public
Summary: Removes the element with the specified plug-in id from the this dictionary.
Parameter: item (KeyValuePair<Guid, MaterialRef>)
Parameter Summary: The object to remove from this dictionary

Method: Rhino.DocObjects.MaterialRefs.Remove(System.Guid key)
Return: bool
Modifiers: public
Summary: Removes the MaterialRef with the specified plug-in Id from this dictionary.
Parameter: key (System.Guid)
Parameter Summary: The plug-in Id for the MaterialRef to remove.

Method: Rhino.DocObjects.MaterialRefs.TryGetValue(System.Guid key, out MaterialRef value)
Return: bool
Modifiers: public
Summary: Gets the value associated with the specified key.
Parameter: key (System.Guid)
Parameter Summary: The plug-in Id whose MaterialRef to get.
Parameter: value (MaterialRef)
Parameter Summary: When this method returns, the MaterialRef associated with the specified key, if the key is found; otherwise, null. This parameter is passed uninitialized.

Class: Rhino.DocObjects.MeshObject

Property: Rhino.DocObjects.MeshObject.IsCustomObject
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.MeshObject.MeshGeometry
Return: Mesh
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.MeshObject.CheckMeshes(IEnumerable<MeshObject> meshObjects, Rhino.FileIO.TextLog textLog, ref MeshCheckParameters parameters)
Return: bool
Modifiers: public, static
Summary: Examines mesh objects and logs a description of what it finds right or wrong. The various properties the function checks for are described in MeshCheckParameters.
Parameter: meshObjects (IEnumerable<MeshObject>)
Parameter Summary: A collection of mesh objects.
Parameter: textLog (Rhino.FileIO.TextLog)
Parameter Summary: The text log.
Parameter: parameters (MeshCheckParameters)
Parameter Summary: The mesh checking parameter and results.

Method: Rhino.DocObjects.MeshObject.DuplicateMeshGeometry()
Return: Mesh
Modifiers: public

Method: Rhino.DocObjects.MeshObject.SetMesh(Mesh mesh)
Return: Mesh
Modifiers: protected
Summary: Only for developers who are defining custom subclasses of MeshObject. Directly sets the internal mesh geometry for this object.  Note that this function does not work with Rhino's "undo".

Class: Rhino.DocObjects.ModelComponent
Summary: Base class for all components in a model (document) and manages the index, id and other information common to this type of objects.
This class parallels the C++ ON_ModelComponent.

Property: Rhino.DocObjects.ModelComponent.NamePathSeparator
Return: string
Modifiers: public, static
Summary: Returns the string "::". This is the string Rhino uses in layer full path names to separate the names of individual layers.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.ComponentStatus
Return: ComponentStatus
Modifiers: public, virtual
Summary: Gets or sets the component status of the model component.
Accessors: get set

Property: Rhino.DocObjects.ModelComponent.ComponentType
Return: ModelComponentType
Modifiers: public, abstract
Summary: Gets the <b>ModelComponentType</b> for this object. Useful in switch statements.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.DeletedName
Return: string
Modifiers: public
Summary: Gets the name of a component that is deleted.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.HasId
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component has an ID.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.HasIndex
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component has an Index.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.HasName
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component has a Name.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.Id
Return: Guid
Modifiers: public, virtual
Summary: Gets or sets the ID of the current instance.
Accessors: get set

Property: Rhino.DocObjects.ModelComponent.IdIsLocked
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component ID is already locked.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.Index
Return: int
Modifiers: public, virtual
Summary: Gets or sets the model component index attribute.
Accessors: get set

Property: Rhino.DocObjects.ModelComponent.IndexIsLocked
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component Index is already locked.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.InstanceDefinitionModelSerialNumber
Return: uint
Modifiers: public, virtual
Summary: When a component is in a model as part of the information required for a linked instance definition, this value identifies the linked instance definition reference model.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.IsComponentStatusLocked
Return: bool
Modifiers: public
Summary: The component status itself can be locked. This returns an indication.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.IsDeleted
Return: bool
Modifiers: public, virtual
Summary: True if the component is deleted. Deleted components are kept by the document for undo purposes.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.IsReference
Return: bool
Modifiers: public, virtual
Summary: Gets a value indicting whether this component is a referenced component. Referenced components are part of referenced documents.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.IsSystemComponent
Return: bool
Modifiers: public
Summary: True if this model component is a system constant.
An incomplete list of system constant model components is below:
<ul><li>ON_ModelComponent::Unset</li><li>ON_InstanceDefinition::Empty</li><li>ON_Linetype::Unset</li><li>ON_Linetype::Continuous</li><li>ON_Linetype::ByLayer</li><li>ON_Linetype::ByParent</li><li>ON_Layer::Unset</li><li>ON_Layer::Default</li><li>ON_TextStyle::Unset</li><li>ON_TextStyle::Default</li><li>ON_TextStyle::ByLayer</li><li>ON_TextStyle::ByParent</li><li>ON_DimStyle::Unset</li><li>ON_DimStyle::Default</li><li>ON_DimStyle::DefaultInchDecimal</li><li>ON_DimStyle::DefaultInchFractional</li><li>ON_DimStyle::DefaultFootInchArchitecture</li><li>ON_DimStyle::DefaultMillimeterSmall</li><li>ON_DimStyle::DefaultMillimeterLarge</li><li>ON_DimStyle::DefaultMillimeterArchitecture</li></ul> | Since: 6.0 | Accessors: get

Property: Rhino.DocObjects.ModelComponent.ModelSerialNumber
Return: uint
Modifiers: public, virtual
Summary: A value identifying the model that manages this component.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.Name
Return: string
Modifiers: public, virtual
Summary: Gets or sets the name
Accessors: get set

Property: Rhino.DocObjects.ModelComponent.NameIsLocked
Return: bool
Modifiers: public
Summary: Returns a value indicating whether the component Name is already locked.
Accessors: get

Property: Rhino.DocObjects.ModelComponent.ReferenceModelSerialNumber
Return: uint
Modifiers: public, virtual
Summary: When a component is in a model for reference, this value identifies the reference model.
Accessors: get

Method: Rhino.DocObjects.ModelComponent.IsValidComponentName(string name)
Return: bool
Modifiers: public, static
Summary: Tests for a valid model component name.
Parameter: name (string)
Parameter Summary: The string to validate.

Method: Rhino.DocObjects.ModelComponent.ModelComponentTypeIgnoresCase(ModelComponentType type)
Return: bool
Modifiers: public, static
Summary: Informs the developer if a particular model component type will require case-ignoring searching within a document. This is currently True with groups; False otherwise.
Parameter: type (ModelComponentType)
Parameter Summary: True if the component ignores case.

Method: Rhino.DocObjects.ModelComponent.ModelComponentTypeIncludesParent(ModelComponentType type)
Return: bool
Modifiers: public, static
Summary: Informs the developer if a particular model component type will include the hash of the parent.
Parameter: type (ModelComponentType)
Parameter Summary: True if the component includes parent hash.

Method: Rhino.DocObjects.ModelComponent.ModelComponentTypeRequiresUniqueName(ModelComponentType type)
Return: bool
Modifiers: public, static
Summary: Informs the developer if a particular model component type will require uniqueness within a document. This is currently True with render materials and model geometry; False otherwise.
Parameter: type (ModelComponentType)
Parameter Summary: The type to check.

Method: Rhino.DocObjects.ModelComponent.ClearId()
Return: void
Modifiers: public
Summary: Resets the HasId property of the model component to false, if possible.

Method: Rhino.DocObjects.ModelComponent.ClearIndex()
Return: void
Modifiers: public
Summary: Resets the HasIndex property of the model component to false, if possible.

Method: Rhino.DocObjects.ModelComponent.ClearName()
Return: void
Modifiers: public
Summary: Resets the HasName property of the model component to false, if possible.

Method: Rhino.DocObjects.ModelComponent.DataCRC(uint currentRemainder)
Return: uint
Modifiers: public
Summary: Increments the Cyclic Redundancy Check value by this instance.
Parameter: currentRemainder (uint)
Parameter Summary: The current remainder value.

Method: Rhino.DocObjects.ModelComponent.LockId()
Return: void
Modifiers: public
Summary: Locks the component Id property.

Method: Rhino.DocObjects.ModelComponent.LockIndex()
Return: void
Modifiers: public
Summary: Locks the component Index property.

Method: Rhino.DocObjects.ModelComponent.LockName()
Return: void
Modifiers: public
Summary: Locks the component Name property.

Method: Rhino.DocObjects.ModelComponent.ToString()
Return: string
Modifiers: public, override
Summary: Returns the name of the model component type, and then its name and index.

Class: Rhino.DocObjects.MorphControlObject
Summary: Represents a <b>Rhino.Geometry.MorphControl</b> in a document.

Class: Rhino.DocObjects.NamedViewWidgetObject

Property: Rhino.DocObjects.NamedViewWidgetObject.AssociatedNamedView
Return: string
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.ObjectAttributes
Summary: Attributes (color, material, layer,...) associated with a rhino object

Constructor: Rhino.DocObjects.ObjectAttributes.ObjectAttributes()

Constructor: Rhino.DocObjects.ObjectAttributes.ObjectAttributes(SerializationInfo info, StreamingContext context)

Property: Rhino.DocObjects.ObjectAttributes.OCSMappingChannelId
Return: int
Modifiers: public, static
Summary: The mapping channel id to use when calling MappingChannel to retrieve the OCS mapping if there is one.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.CastsShadows
Return: bool
Modifiers: public
Summary: Gets or sets an object's casts shadows property, or whether or not an object casts shadows on other objects and a ground plane.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ClippingPlaneLabelStyle
Return: SectionLabelStyle
Modifiers: public
Summary: Defines how a label for a clipping plane object should be shown
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ColorSource
Return: ObjectColorSource
Modifiers: public
Summary: The color used to display an object is specified in one of three ways. If ColorSource is ON::color_from_layer, then the object's layer ON_Layer::Color() is used. If ColorSource is ON::color_from_object, then value of m_color is used. If ColorSource is ON::color_from_material, then the diffuse color of the object's render material is used.  See ON_3dmObjectAttributes::MaterialSource() to determine where to get the definition of the object's render material.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.CustomMeshingParameters
Return: MeshingParameters
Modifiers: public
Summary: Returns or sets the per-object render meshing parameters, which controls the object's render mesh density. If this property is null, then the object uses the document's render meshing parameters. To remove the per-object render meshing parameters, set this property to null.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Decals
Return: Decals
Modifiers: public
Summary: Gets all object decals associated with this object.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.DisplayOrder
Return: int
Modifiers: public
Summary: Display order used to force objects to be drawn on top or behind each other. Larger numbers draw on top of smaller numbers.
0  = draw object in standard depth buffered order
<0 = draw object behind "normal" draw order objects
>0 = draw object on top of "normal" draw order objects | Since: 5.10 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.File3dmMeshModifiers
Return: File3dmMeshModifiers
Modifiers: public
Summary: Get an object that provides access to mesh modifiers when the attributes is for a File3dmObject.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.GroupCount
Return: int
Modifiers: public
Summary: number of groups object belongs to.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.HasMapping
Return: bool
Modifiers: public
Summary: A mapping from any plug-in source is associated with these attributes Need to do this here to respond correctly to ModifyObjectAttributes event
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.HatchBackgroundFillColor
Return: Color
Modifiers: public
Summary: Fill color for hatches (default is Color.Empty)
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.HatchBoundaryVisible
Return: bool
Modifiers: public
Summary: Draw the bounrdaries for a hatch (default is false)
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.IsDocumentControlled
Return: bool
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.IsInstanceDefinitionObject
Return: bool
Modifiers: public
Summary: Use this query to determine if an object is part of an instance definition.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.LayerIndex
Return: int
Modifiers: public
Summary: Gets or sets an associated layer index.
Layer definitions in an OpenNURBS model are stored in a layer table.     The layer table is conceptually an array of ON_Layer classes.  Every     OpenNURBS object in a model is on some layer.  The object's layer     is specified by zero based indices into the ON_Layer array. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.LinetypeIndex
Return: int
Modifiers: public
Summary: Gets or sets the linetype index.
Linetype definitions in an OpenNURBS model are stored in a linetype table.     The linetype table is conceptually an array of ON_Linetype classes. Every     OpenNURBS object in a model references some linetype.  The object's linetype     is specified by zero based indices into the ON_Linetype array.
Index 0 is reserved for continuous linetype (no pattern). | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.LinetypePatternScale
Return: double
Modifiers: public
Summary: Per object linetype scale
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.LinetypeSource
Return: ObjectLinetypeSource
Modifiers: public
Summary: The Linetype used to display an object is specified in one of two ways. If LinetypeSource is ON::linetype_from_layer, then the object's layer ON_Layer::Linetype() is used. If LinetypeSource is ON::linetype_from_object, then value of m_linetype is used.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.MaterialIndex
Return: int
Modifiers: public
Summary: Gets or sets the material index.
If you want something simple and fast, set the index of     the rendering material. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.MaterialRefs
Return: MaterialRefs
Modifiers: public
Summary: If you are developing a high quality plug-in renderer, and a user is assigning a custom render material to this object, then add rendering material information to the MaterialRefs dictionary.  Note to developers: As soon as the MaterialRefs dictionary contains items rendering material queries slow down.  Do not populate the MaterialRefs dictionary when setting the MaterialIndex will take care of your needs.
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.MaterialSource
Return: ObjectMaterialSource
Modifiers: public
Summary: Determines if the simple material should come from the object or from it's layer. High quality rendering plug-ins should use m_rendering_attributes.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Mode
Return: ObjectMode
Modifiers: public
Summary: An object must be in one of three modes: normal, locked or hidden. If an object is in normal mode, then the object's layer controls visibility and selectability. If an object is locked, then the object's layer controls visibility by the object cannot be selected. If the object is hidden, it is not visible and it cannot be selected.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Name
Return: string
Modifiers: public
Summary: Gets or sets an object optional text name.
More than one object in a model can have the same name and     some objects may have no name. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ObjectColor
Return: Color
Modifiers: public
Summary: If ON::color_from_object == ColorSource, then color is the object's display color.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ObjectDecoration
Return: ObjectDecoration
Modifiers: public
Summary: Used to indicate an object has a decoration (like an arrowhead on a curve)
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ObjectId
Return: Guid
Modifiers: public
Summary: Every object has a Guid (globally unique identifier, also known as UUID, or universally unique identifier). The default value is Guid.Empty.
When an object is added to a model, the value is checked.  If the value is Guid.Empty, a     new Guid is created. If the value is not None but it is already used by another object     in the model, a new Guid is created. If the value is not Guid.Empty and it is not used by     another object in the model, then that value persists. When an object is updated, by     a move for example, the value of ObjectId persists.
This value is the same as the one returned by object.Id. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.PlotColor
Return: Color
Modifiers: public
Summary: If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.PlotColorSource
Return: ObjectPlotColorSource
Modifiers: public
Summary: The color used to plot an object on paper is specified in one of three ways. If PlotColorSource is ON::plot_color_from_layer, then the object's layer ON_Layer::PlotColor() is used. If PlotColorSource is ON::plot_color_from_object, then value of PlotColor() is used.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.PlotWeight
Return: double
Modifiers: public
Summary: Plot weight in millimeters. =0.0 means use the default width <0.0 means don't plot (visible for screen display, but does not show on plot)
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.PlotWeightSource
Return: ObjectPlotWeightSource
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.ReceivesShadows
Return: bool
Modifiers: public
Summary: Gets or sets an object's receives shadows property, or whether or not an object receives shadows from other objects.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: Sets the render material for the object - higher level function for setting MaterialSource and MaterialIndex
Accessors: set

Property: Rhino.DocObjects.ObjectAttributes.SectionAttributesSource
Return: ObjectSectionAttributesSource
Modifiers: public
Summary: Where section attributes are read from
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Space
Return: ActiveSpace
Modifiers: public
Summary: Starting with V4, objects can be in either model space or page space. If an object is in page space, then ViewportId is not nil and identifies the page it is on.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Url
Return: string
Modifiers: public
Summary: Objects may have an URL. There are no restrictions on what value this URL may have. As an example, if the object came from a commercial part library, the URL might point to the definition of that part.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.UserStringCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.ObjectAttributes.ViewportId
Return: Guid
Modifiers: public
Summary: If ViewportId is nil, the object is active in all viewports. If ViewportId is not nil, then this object is only active in a specific view. This field is primarily used to assign page space objects to a specific page, but it can also be used to restrict model space to a specific view.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.Visible
Return: bool
Modifiers: public
Summary: Gets or sets an object's visibility.
Accessors: get set

Property: Rhino.DocObjects.ObjectAttributes.WireDensity
Return: int
Modifiers: public
Summary: When a surface object is displayed in wireframe, this controls how many isoparametric wires are used. value    number of isoparametric wires -1       boundary wires (off) 0        boundary and knot wires 1        boundary and knot wires and, if there are no interior knots, a single interior wire. N>=2     boundary and knot wires and (N+1) interior wires.
Accessors: get set

Method: Rhino.DocObjects.ObjectAttributes.AddHideInDetailOverride(System.Guid detailId)
Return: bool
Modifiers: public
Summary: Make this object hidden in a given detail

Method: Rhino.DocObjects.ObjectAttributes.AddToGroup(int groupIndex)
Return: void
Modifiers: public
Summary: Adds object to the group with specified index by appending index to group list.
If the object is already in group, nothing is changed. | Since: 5.0 | Parameter: groupIndex (int) | Parameter Summary: The index that will be added.

Method: Rhino.DocObjects.ObjectAttributes.ComputedPlotColor(RhinoDoc document, System.Guid viewportId)
Return: System.Drawing.Color
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.ComputedPlotColor(RhinoDoc document)
Return: System.Drawing.Color
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.ComputedPlotWeight(RhinoDoc document, System.Guid viewportId)
Return: double
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.ComputedPlotWeight(RhinoDoc document)
Return: double
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.DrawColor(RhinoDoc document, System.Guid viewportId)
Return: System.Drawing.Color
Modifiers: public
Summary: Gets an object's draw color, which is based on the object's color source
Parameter: document (RhinoDoc)
Parameter Summary: The object's documnt.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the viewport.

Method: Rhino.DocObjects.ObjectAttributes.DrawColor(RhinoDoc document)
Return: System.Drawing.Color
Modifiers: public
Summary: Gets an object's draw color, which is based on the object's color source
Parameter: document (RhinoDoc)
Parameter Summary: The object's documnt.

Method: Rhino.DocObjects.ObjectAttributes.Duplicate()
Return: ObjectAttributes
Modifiers: public
Summary: Constructs a copy of this <b>ObjectAttributes</b> instance.

Method: Rhino.DocObjects.ObjectAttributes.GetCustomLinetype()
Return: Linetype
Modifiers: public
Summary: Get an optional custom linetype associated with these attributes. If null, then the attributes use the linetype index to determine it's linetype

Method: Rhino.DocObjects.ObjectAttributes.GetCustomSectionStyle()
Return: SectionStyle
Modifiers: public
Summary: Get an optional custom section style associated with these attributes.

Method: Rhino.DocObjects.ObjectAttributes.GetDisplayModeOverride(System.Guid viewportId)
Return: System.Guid
Modifiers: public
Summary: Returns the id of the display mode of an objects. Object display modes are view based. Thus, it is possible to have an object display different in different views.
Parameter: viewportId (System.Guid)
Parameter Summary: Id of a Rhino Viewport.

Method: Rhino.DocObjects.ObjectAttributes.GetGroupList()
Return: int
Modifiers: public
Summary: Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.

Method: Rhino.DocObjects.ObjectAttributes.GetHideInDetailOverrides()
Return: System.Guid[]
Modifiers: public
Summary: Get list of details that this object is supposed to be hidden in

Method: Rhino.DocObjects.ObjectAttributes.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets a user string.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.DocObjects.ObjectAttributes.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.

Method: Rhino.DocObjects.ObjectAttributes.HasDisplayModeOverride(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Determines if an object has a display mode override for a given viewport.
Parameter: viewportId (System.Guid)
Parameter Summary: Id of a Rhino Viewport.

Method: Rhino.DocObjects.ObjectAttributes.HasHideInDetailOverrideSet(System.Guid detailId)
Return: bool
Modifiers: public
Summary: Is this object supposed to be hidden in a given detail

Method: Rhino.DocObjects.ObjectAttributes.IsInGroup(int groupIndex)
Return: bool
Modifiers: public
Summary: Determines if an object belong to a group or not.
Parameter: groupIndex (int)
Parameter Summary: The index that will be tested.

Method: Rhino.DocObjects.ObjectAttributes.ObjectFrame()
Return: Plane
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.RemoveCustomLinetype()
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.RemoveCustomSectionStyle()
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride()
Return: void
Modifiers: public
Summary: By default, objects are drawn using the display mode of the viewport that the object is being drawn in. Setting a specific display mode, instructs Rhino to always use that display mode, regardless of the viewport's mode. This function resets an object to use the viewport's display mode for all viewports.

Method: Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(System.Guid rhinoViewportId)
Return: void
Modifiers: public
Summary: By default, objects are drawn using the display mode of the viewport that the object is being drawn in. Setting a specific display mode, instructs Rhino to always use that display mode, regardless of the viewport's mode. This function resets an object to use the viewport's display mode.
Parameter: rhinoViewportId (System.Guid)
Parameter Summary: viewport that display mode overrides should be cleared from.

Method: Rhino.DocObjects.ObjectAttributes.RemoveFromAllGroups()
Return: void
Modifiers: public
Summary: Removes object from all groups.

Method: Rhino.DocObjects.ObjectAttributes.RemoveFromGroup(int groupIndex)
Return: void
Modifiers: public
Summary: removes object from the group with specified index.
If the object is not in the group, nothing is changed. | Since: 5.0 | Parameter: groupIndex (int) | Parameter Summary: The index that will be removed.

Method: Rhino.DocObjects.ObjectAttributes.RemoveHideInDetailOverride(System.Guid detailId)
Return: bool
Modifiers: public
Summary: Remove hidden in detail flag for a specific detail

Method: Rhino.DocObjects.ObjectAttributes.SetCustomLinetype(Linetype linetype)
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.SetCustomSectionStyle(SectionStyle sectionStyle)
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(Display.DisplayModeDescription mode, System.Guid rhinoViewportId)
Return: bool
Modifiers: public
Summary: By default, objects are drawn using the display mode of the viewport that the object is being drawn in. Setting a specific display mode, instructs Rhino to always use that display mode, regardless of the viewport's mode. This version sets a display mode for a specific viewport.
Parameter: mode (Display.DisplayModeDescription)
Parameter Summary: The display mode.
Parameter: rhinoViewportId (System.Guid)
Parameter Summary: The Rhino viewport ID.

Method: Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(Display.DisplayModeDescription mode)
Return: bool
Modifiers: public
Summary: By default, objects are drawn using the display mode of the viewport that the object is being drawn in. Setting a specific display mode, instructs Rhino to always use that display mode, regardless of the viewport's mode. This version affects the object's display mode for all viewports.
Parameter: mode (Display.DisplayModeDescription)
Parameter Summary: The display mode.

Method: Rhino.DocObjects.ObjectAttributes.SetObjectFrame(Plane plane)
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.SetObjectFrame(Transform xform)
Return: void
Modifiers: public

Method: Rhino.DocObjects.ObjectAttributes.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key. If null, the key will be removed

Method: Rhino.DocObjects.ObjectAttributes.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Apply a transformation.
Parameter: xform (Transform)
Parameter Summary: The transformation.

Class: Rhino.DocObjects.ObjectEnumeratorSettings
Summary: Settings used for getting an enumerator of objects in a document. See <b>ObjectTable.FindByFilter(ObjectEnumeratorSettings)</b> ,  <b>ObjectTable.GetObjectsByType{T}(ObjectEnumeratorSettings)</b> , and <b>ObjectTable.GetEnumerator(ObjectEnumeratorSettings)</b> .

Constructor: Rhino.DocObjects.ObjectEnumeratorSettings.ObjectEnumeratorSettings()
Summary: Constructs object enumerator settings that will iterate the document looking for normal object and locked object that are active, or part of current model and saved in file.

Property: Rhino.DocObjects.ObjectEnumeratorSettings.ActiveObjects
Return: bool
Modifiers: public
Summary: When true, objects that are part of current model and saved in file are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.ClassTypeFilter
Return: Type
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.DeletedObjects
Return: bool
Modifiers: public
Summary: When true, deleted objects are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.HiddenObjects
Return: bool
Modifiers: public
Summary: When true, hidden objects or objects on hidden layers are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.IdefObjects
Return: bool
Modifiers: public
Summary: When true, objects in instance definitions (not the instance references) are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.IncludeGrips
Return: bool
Modifiers: public
Summary: The default object enumerator settings will not iterate through grip objects. If you want the iterator to include grips, then set this property to true.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.IncludeLights
Return: bool
Modifiers: public
Summary: The default object enumerator settings will not iterate through render light objects. If you want the iterator to include lights, then set this property to true.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.IncludePhantoms
Return: bool
Modifiers: public
Summary: The default object enumerator settings will not iterate through phantom objects. If you want the iterator to include phantom objects, then set this property to true.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.LayerIndexFilter
Return: int
Modifiers: public
Summary: The layer filter property can be used to limit the iteration to objects on a specific layer. The default is to iterate through all layers.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.LockedObjects
Return: bool
Modifiers: public
Summary: When true, locked objects or objects on locked layers are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.NameFilter
Return: string
Modifiers: public
Summary: The name filter property can be used to limit the iteration to objects with a specific name.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.NormalObjects
Return: bool
Modifiers: public
Summary: When true, normal objects (e.g. not locked and not hidden) are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.ObjectTypeFilter
Return: ObjectType
Modifiers: public
Summary: The object type filter property can be used to limit the iteration to specific types of geometry. The default is to iterate all objects types.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.ReferenceObjects
Return: bool
Modifiers: public
Summary: When true, objects that are for reference and not saved in file are returned.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.SelectedObjectsFilter
Return: bool
Modifiers: public
Summary: The default object enumerator settings ignore the selected state of objects. If you want the iterator to limit itself to selected objects, then set this property to true.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.SubObjectSelected
Return: bool
Modifiers: public
Summary: If True then objects which only have a sub object selected will be included. This is False by default.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.ViewportFilter
Return: RhinoViewport
Modifiers: public
Summary: The viewport filter property can be used to limit the iteration to objects that are active in a specific viewport.
Accessors: get set

Property: Rhino.DocObjects.ObjectEnumeratorSettings.VisibleFilter
Return: bool
Modifiers: public
Summary: The default object enumerator settings ignore the visibility state of objects. If you want the iterator to limit itself to visible objects, then set this property to true.
Accessors: get set

Class: Rhino.DocObjects.ObjRef
Summary: Represents a reference to a Rhino object.

Constructor: Rhino.DocObjects.ObjRef.ObjRef(Guid id, ComponentIndex ci)
Summary: Initializes a new object reference from a guid and component index. The component index is used to specify a "piece" of the geometry

Constructor: Rhino.DocObjects.ObjRef.ObjRef(Guid id)
Summary: Initializes a new object reference from a globally unique identifier ( <b>Guid</b> ).

Constructor: Rhino.DocObjects.ObjRef.ObjRef(ObjRef other)
Summary: Copy constructor

Constructor: Rhino.DocObjects.ObjRef.ObjRef(RhinoDoc doc, Guid id, ComponentIndex ci)
Summary: Initializes a new object reference from a guid and component index. The component index is used to specify a "piece" of the geometry

Constructor: Rhino.DocObjects.ObjRef.ObjRef(RhinoDoc doc, Guid id)
Summary: Initializes a new object reference from a globally unique identifier ( <b>Guid</b> ).

Constructor: Rhino.DocObjects.ObjRef.ObjRef(RhinoObject rhinoObject, PickContext pickContext)
Summary: Initialized a new object reference from a Rhino object and pick context

Constructor: Rhino.DocObjects.ObjRef.ObjRef(RhinoObject rhinoObject)
Summary: Initializes a new object reference from a Rhino object.

Property: Rhino.DocObjects.ObjRef.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document that owns this object reference.
Accessors: get

Property: Rhino.DocObjects.ObjRef.GeometryComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of the referenced (sub) geometry. Some objects have sub-objects that are valid pieces of geometry. For example, breps have edges and faces that are valid curves and surfaces. Each sub-object has a component index that is > 0. The parent geometry has a component index = -1.
Accessors: get

Property: Rhino.DocObjects.ObjRef.ObjectId
Return: Guid
Modifiers: public
Summary: Returns the id of the referenced Rhino object.
Accessors: get

Property: Rhino.DocObjects.ObjRef.RuntimeSerialNumber
Return: uint
Modifiers: public
Summary: If > 0, then this is the value of a Rhino object's serial number field. The serial number is used instead of the pointer to prevent crashes in cases when the RhinoObject is deleted but an ObjRef continues to reference the Rhino object. The value of RuntimeSerialNumber is not saved in archives because it generally changes if you save and reload an archive.
Accessors: get

Method: Rhino.DocObjects.ObjRef.Brep()
Return: Brep
Modifiers: public
Summary: Gets the brep if this reference geometry is one.

Method: Rhino.DocObjects.ObjRef.ClippingPlaneSurface()
Return: ClippingPlaneSurface
Modifiers: public
Summary: Gets the clipping plane surface if this reference targeted one.

Method: Rhino.DocObjects.ObjRef.Curve()
Return: Curve
Modifiers: public
Summary: Gets the curve if this reference targeted one.

Method: Rhino.DocObjects.ObjRef.CurveParameter(out double parameter)
Return: Curve
Modifiers: public
Summary: If the reference geometry is a curve or edge with a selection point, then this gets the parameter of the selection point.
Parameter: parameter (double)
Parameter Summary: The parameter of the selection point.

Method: Rhino.DocObjects.ObjRef.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.ObjRef.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.DocObjects.ObjRef.Edge()
Return: BrepEdge
Modifiers: public
Summary: Gets the edge if this reference geometry is one.

Method: Rhino.DocObjects.ObjRef.Face()
Return: BrepFace
Modifiers: public
Summary: If the referenced geometry is a brep face, a brep with one face, or a surface, this returns the brep face.

Method: Rhino.DocObjects.ObjRef.Geometry()
Return: GeometryBase
Modifiers: public
Summary: Gets the geometry linked to the object targeted by this reference.

Method: Rhino.DocObjects.ObjRef.Hatch()
Return: Hatch
Modifiers: public
Summary: Gets the hatch if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.InstanceDefinitionPart()
Return: RhinoObject
Modifiers: public
Summary: If sub-object selection is enabled and a piece of an instance reference is selected, this will return the selected piece.

Method: Rhino.DocObjects.ObjRef.Light()
Return: Light
Modifiers: public
Summary: Gets the light if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.Mesh()
Return: Mesh
Modifiers: public
Summary: Gets the mesh if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.Object()
Return: RhinoObject
Modifiers: public
Summary: Returns the referenced Rhino object.

Method: Rhino.DocObjects.ObjRef.Point()
Return: Point
Modifiers: public
Summary: Gets the point if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.PointCloud()
Return: PointCloud
Modifiers: public
Summary: Gets the point cloud if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.SelectionMethod()
Return: SelectionMethod
Modifiers: public
Summary: Gets the method used to select this object.

Method: Rhino.DocObjects.ObjRef.SelectionPoint()
Return: Point3d
Modifiers: public
Summary: If the object was selected by picking a point on it, then SelectionPoint() returns the point where the selection occurred, otherwise it returns Point3d.Unset.

Method: Rhino.DocObjects.ObjRef.SelectionView()
Return: RhinoView
Modifiers: public
Summary: If the object was interactively selected in a particular viewport, then SelectionView() returns the view where the object was selected.

Method: Rhino.DocObjects.ObjRef.SelectionViewDetailSerialNumber()
Return: uint
Modifiers: public
Summary: If the object was interactively selected in a page space detail view, then SelectionViewDetailSerialNumber() returns the CRhinoObject serial number of the detail view object.  Use SelectionView() to get the page view that contains the detail view object. If SelectionViewDetailSerialNumber() returns 0, then the selection did not happen in a detail view.

Method: Rhino.DocObjects.ObjRef.SetSelectionComponent(ComponentIndex componentIndex)
Return: void
Modifiers: public
Summary: When an object is selected by picking a sub-object, SetSelectionComponent may be used to identify the sub-object.

Method: Rhino.DocObjects.ObjRef.SubD()
Return: SubD
Modifiers: public
Summary: Gets the SubD if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.SubDFace()
Return: SubDFace
Modifiers: public
Summary: Gets the SubDFace if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.Surface()
Return: Surface
Modifiers: public
Summary: Gets the surface if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.SurfaceParameter(out double u, out double v)
Return: Surface
Modifiers: public
Summary: If the reference geometry is a surface, brep with one face, or surface edge with a selection point, then this gets the surface parameters of the selection point.
Parameter: u (double)
Parameter Summary: The U value is assigned to this out parameter during the call.
Parameter: v (double)
Parameter Summary: The V value is assigned to this out parameter during the call.

Method: Rhino.DocObjects.ObjRef.TextDot()
Return: TextDot
Modifiers: public
Summary: Gets the text dot if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.TextEntity()
Return: TextEntity
Modifiers: public
Summary: Gets the text entity if the referenced geometry is one.

Method: Rhino.DocObjects.ObjRef.Trim()
Return: BrepTrim
Modifiers: public
Summary: If the referenced geometry is an edge of a surface, this returns the associated brep trim.

Class: Rhino.DocObjects.OrdinateDimensionObject
Summary: Rhino Object that represents an ordinate dimension geometry and attributes

Property: Rhino.DocObjects.OrdinateDimensionObject.OrdinateDimensionGeometry
Return: OrdinateDimension
Modifiers: public
Summary: Get the dimension geometry for this object.
Accessors: get

Class: Rhino.DocObjects.PhysicallyBasedMaterial

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Alpha
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Anisotropic
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.AnisotropicRotation
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.BaseColor
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.BRDF
Return: BRDFs
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Clearcoat
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.ClearcoatRoughness
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Emission
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Material
Return: Material
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Metallic
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Opacity
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.OpacityIOR
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.OpacityRoughness
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.ReflectiveIOR
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Roughness
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Sheen
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.SheenTint
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Specular
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.SpecularTint
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.Subsurface
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.SubsurfaceScatteringColor
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.SubsurfaceScatteringRadius
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.PhysicallyBasedMaterial.UseBaseColorTextureAlphaForObjectAlphaTransparencyTexture
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.DocObjects.PhysicallyBasedMaterial.GetTexture(DocObjects.TextureType which)
Return: DocObjects.Texture
Modifiers: public
Summary: Get the texture that corresponds with the specified texture type for this material.

Method: Rhino.DocObjects.PhysicallyBasedMaterial.GetTextures()
Return: DocObjects.Texture[]
Modifiers: public
Summary: Get array of textures that this material uses

Method: Rhino.DocObjects.PhysicallyBasedMaterial.SetTexture(DocObjects.Texture texture, DocObjects.TextureType which)
Return: bool
Modifiers: public
Summary: Set the texture that corresponds with the specified texture type for this material.
Parameter: texture (DocObjects.Texture)
Parameter Summary: An instance of Rhino.DocObjects.Texture
Parameter: which (DocObjects.TextureType)
Parameter Summary: Use Rhino.DocObjects.TextureType

Method: Rhino.DocObjects.PhysicallyBasedMaterial.SynchronizeLegacyMaterial()
Return: void
Modifiers: public

Class: Rhino.DocObjects.PointCloudObject

Property: Rhino.DocObjects.PointCloudObject.PointCloudGeometry
Return: PointCloud
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.PointCloudObject.DuplicatePointCloudGeometry()
Return: PointCloud
Modifiers: public

Class: Rhino.DocObjects.PointObject

Property: Rhino.DocObjects.PointObject.PointGeometry
Return: Point
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.PointObject.DuplicatePointGeometry()
Return: Point
Modifiers: public

Class: Rhino.DocObjects.ProxyObject
Summary: A proxy object (not saved in files)

Method: Rhino.DocObjects.ProxyObject.CreateMeshes(MeshType meshType, MeshingParameters parameters, bool ignoreCustomParameters)
Return: int
Modifiers: public, override

Method: Rhino.DocObjects.ProxyObject.GetMeshes(MeshType meshType)
Return: Mesh[]
Modifiers: public, override

Class: Rhino.DocObjects.RadialDimensionObject
Summary: Rhino Object that represents a radial dimension geometry and attributes

Property: Rhino.DocObjects.RadialDimensionObject.RadialDimensionGeometry
Return: RadialDimension
Modifiers: public
Summary: Get the dimension geometry for this object.
Accessors: get

Class: Rhino.DocObjects.ReplayHistoryData
Summary: Provides history information to commands that will repeat history construction. Generally, a developer using this class will not construct a new instance, but receive one.

Property: Rhino.DocObjects.ReplayHistoryData.Document
Return: RhinoDoc
Modifiers: public
Summary: The document this record belongs to
Accessors: get

Property: Rhino.DocObjects.ReplayHistoryData.HistoryVersion
Return: int
Modifiers: public
Summary: ReplayHistory overrides check the version number to ensure the information saved in the history record is compatible with the current implementation of ReplayHistory
Accessors: get

Property: Rhino.DocObjects.ReplayHistoryData.RecordId
Return: Guid
Modifiers: public
Summary: Each history record has a unique id that Rhino assigns when it adds the history record to the history record table
Accessors: get

Property: Rhino.DocObjects.ReplayHistoryData.Results
Return: ReplayHistoryResult[]
Modifiers: public
Summary: Provides access to BOTH inputs and outputs of the replay history operation.
Use this property to then call an appropriate UpdateToX() method and make your     custom history support work. | Since: 5.0 | Accessors: get

Method: Rhino.DocObjects.ReplayHistoryData.AppendHistoryResult()
Return: ReplayHistoryResult
Modifiers: public
Summary: Create an empty history result and add it to the end of the Results array. Note that you should call Results again if you need them as the old Results array will be out of sync with this class.

Method: Rhino.DocObjects.ReplayHistoryData.Dispose()
Return: void
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.GetRhinoObjRef(int id)
Return: Rhino.DocObjects.ObjRef
Modifiers: public
Summary: In ReplayHistory, use GetRhinoObjRef to convert the information in a history record into the ObjRef that has up to date RhinoObject pointers
Parameter: id (int)
Parameter Summary: HistoryRecord value id

Method: Rhino.DocObjects.ReplayHistoryData.TryGetBool(int id, out bool value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetColor(int id, out System.Drawing.Color value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetDouble(int id, out double value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetDoubles(int id, out double values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetGuid(int id, out System.Guid value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetGuids(int id, out System.Guid[] values)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetInt(int id, out int value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetPoint3d(int id, out Geometry.Point3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetPoint3dOnObject(int id, out Geometry.Point3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetString(int id, out string value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetTransform(int id, out Geometry.Transform value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.TryGetVector3d(int id, out Geometry.Vector3d value)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryData.UpdateResultArray(IEnumerable<ReplayHistoryResult> newResults)
Return: void
Modifiers: public
Summary: Update the Results array with a different set of values. Null entries in the newResults will result in empty ReplayHistoryResult elements

Class: Rhino.DocObjects.ReplayHistoryResult

Property: Rhino.DocObjects.ReplayHistoryResult.ExistingObject
Return: RhinoObject
Modifiers: public
Summary: The previously existing object.
Do not attempt to edit this object. It might have been already deleted by, for example, dragging. | Since: 5.0 | Accessors: get

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToAngularDimension(Geometry.AngularDimension dimension, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToArc(Geometry.Arc arc, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToBrep(Geometry.Brep brep, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToCircle(Geometry.Circle circle, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToClippingPlane(Geometry.Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToClippingPlane(Geometry.Plane plane, double uMagnitude, double vMagnitude, System.Guid clippedViewportId, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToCurve(Geometry.Curve curve, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToEllipse(Geometry.Ellipse ellipse, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToExtrusion(Geometry.Extrusion extrusion, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToHatch(Geometry.Hatch hatch, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToInstanceReferenceGeometry(Geometry.InstanceReferenceGeometry instanceReference, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToLeader(Geometry.Leader leader, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToLine(Geometry.Point3d from, Geometry.Point3d to, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToLinearDimension(Geometry.LinearDimension dimension, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToMesh(Geometry.Mesh mesh, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToPoint(Rhino.Geometry.Point3d point, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToPointCloud(IEnumerable<Point3d> points, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToPointCloud(Rhino.Geometry.PointCloud cloud, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToPolyline(IEnumerable<Point3d> points, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToRadialDimension(Geometry.RadialDimension dimension, ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToSphere(Geometry.Sphere sphere, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToSubD(Geometry.SubD subD, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToSurface(Geometry.Surface surface, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToText(Geometry.TextEntity text, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToText(string text, Geometry.Plane plane, double height, string fontName, bool bold, bool italic, Geometry.TextJustification justification, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.ReplayHistoryResult.UpdateToTextDot(Geometry.TextDot dot, DocObjects.ObjectAttributes attributes)
Return: bool
Modifiers: public

Class: Rhino.DocObjects.RhinoDeselectAllObjectsEventArgs

Property: Rhino.DocObjects.RhinoDeselectAllObjectsEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoDeselectAllObjectsEventArgs.ObjectCount
Return: int
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.RhinoModifyObjectAttributesEventArgs

Property: Rhino.DocObjects.RhinoModifyObjectAttributesEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoModifyObjectAttributesEventArgs.NewAttributes
Return: ObjectAttributes
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoModifyObjectAttributesEventArgs.OldAttributes
Return: ObjectAttributes
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoModifyObjectAttributesEventArgs.RhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.RhinoObject
Summary: Represents an object in the document.
RhinoObjects should only ever be creatable by the RhinoDoc.

Property: Rhino.DocObjects.RhinoObject.NextRuntimeSerialNumber
Return: uint
Modifiers: public, static
Summary: Gets the runtime serial number that will be assigned to the next Rhino Object that is created.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Attributes
Return: ObjectAttributes
Modifiers: public, virtual
Summary: Gets or sets the object attributes.
Accessors: get set

Property: Rhino.DocObjects.RhinoObject.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.ModelGeometry</b> .
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document that owns this object.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Geometry
Return: GeometryBase
Modifiers: public, virtual
Summary: Gets the underlying geometry for this object.
All rhino objects are composed of geometry and attributes. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.RhinoObject.GripsOn
Return: bool
Modifiers: public
Summary: Gets or sets the activation state of object default editing grips.
Accessors: get set

Property: Rhino.DocObjects.RhinoObject.GripsSelected
Return: bool
Modifiers: public
Summary: True if grips are turned on and at least one is selected.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.GroupCount
Return: int
Modifiers: public
Summary: Number of groups object belongs to.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.HasDynamicTransform
Return: bool
Modifiers: public
Summary: True if the object has a dynamic transformation
Accessors: get

Property: Rhino.DocObjects.RhinoObject.HasSubobjectMaterials
Return: bool
Modifiers: public
Summary: Will be True if the object contains sub object meshes with materials that are different than the top level object.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Id
Return: Guid
Modifiers: public, override
Summary: Every object has a Guid (globally unique identifier, also known as UUID, or universally unique identifier). The default value is Guid.Empty.
When an object is added to a model, the value is checked.  If the value is Guid.Empty, a     new Guid is created. If the value is not None but it is already used by another object     in the model, a new Guid is created. If the value is not Guid.Empty and it is not used by     another object in the model, then that value persists. When an object is updated, by     a move for example, the value of ObjectId persists.
This value is the same as the one returned by this.Attributes.ObjectId. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.RhinoObject.InstanceDefinitionModelSerialNumber
Return: uint
Modifiers: public, override
Summary: When a component is in a model as part of the information required for a linked instance definition, this value identifies the linked instance definition reference model.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsDeletable
Return: bool
Modifiers: public
Summary: Some objects cannot be deleted, like grips on lights and annotation objects.
Accessors: get set

Property: Rhino.DocObjects.RhinoObject.IsDeleted
Return: bool
Modifiers: public, override
Summary: True if the object is deleted. Deleted objects are kept by the document for undo purposes. Call RhinoDoc.UndeleteObject to undelete an object.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsHidden
Return: bool
Modifiers: public
Summary: An object must be in one of three modes: normal, locked or hidden. If an object is in normal mode, then the object's layer controls visibility and selectability. If an object is locked, then the object's layer controls visibility by the object cannot be selected. If the object is hidden, it is not visible and it cannot be selected.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsInstanceDefinitionGeometry
Return: bool
Modifiers: public
Summary: True if the object is used as part of an instance definition.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsLocked
Return: bool
Modifiers: public
Summary: An object must be in one of three modes: normal, locked or hidden. If an object is in normal mode, then the object's layer controls visibility and selectability. If an object is locked, then the object's layer controls visibility by the object cannot be selected. If the object is hidden, it is not visible and it cannot be selected.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsNormal
Return: bool
Modifiers: public
Summary: An object must be in one of three modes: normal, locked or hidden. If an object is in normal mode, then the object's layer controls visibility and selectability. If an object is locked, then the object's layer controls visibility by the object cannot be selected. If the object is hidden, it is not visible and it cannot be selected.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsPictureFrame
Return: bool
Modifiers: public
Summary: Returns True if the object is a picture frame. A picture frame object is an object that displays a texture map in all views.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsReference
Return: bool
Modifiers: public, override
Summary: Gets a value indicating if an object is a reference object. An object from a work session reference model is a reference object and cannot be modified. An object is a reference object if, and only if, it is on a reference layer.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.IsSolid
Return: bool
Modifiers: public
Summary: Returns True if object is a closed solid, otherwise false.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Name
Return: string
Modifiers: public, override
Summary: Rhino objects have optional text names.  More than one object in a model can have the same name and some objects may have no name.
Accessors: get set

Property: Rhino.DocObjects.RhinoObject.ObjectType
Return: ObjectType
Modifiers: public
Summary: Gets the Rhino-based object type.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.ReferenceModelSerialNumber
Return: uint
Modifiers: public, override
Summary: When a component is in a model for reference, this value identifies the reference model.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: Gets the render material associated with this object or None if there is none.  This does not pay attention to the material source and will not check parent objects or layers for a RenderMaterial.
Accessors: get set

Property: Rhino.DocObjects.RhinoObject.RuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Gets the objects runtime serial number.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.SubobjectMaterialComponents
Return: ComponentIndex[]
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoObject.Visible
Return: bool
Modifiers: public
Summary: Gets the object visibility.
Accessors: get

Property: Rhino.DocObjects.RhinoObject.WorksessionReferenceSerialNumber
Return: uint
Modifiers: public
Summary: Obsolete - use ReferenceModelSerialNumber
Accessors: get

Method: Rhino.DocObjects.RhinoObject.FromRuntimeSerialNumber(uint serialNumber)
Return: RhinoObject
Modifiers: public, static
Summary: Get a Rhino object for a unique runtime serial number

Method: Rhino.DocObjects.RhinoObject.GetFillSurfaces(RhinoObject rhinoObject, ClippingPlaneObject clippingPlaneObject)
Return: Brep[]
Modifiers: public, static
Summary: Return list of fill surfaces if any for object and clipping plane.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: Object to clip
Parameter: clippingPlaneObject (ClippingPlaneObject)
Parameter Summary: Clipping plane to use

Method: Rhino.DocObjects.RhinoObject.GetFillSurfaces(RhinoObject rhinoObject, IEnumerable<ClippingPlaneObject> clippingPlaneObjects, bool unclippedFills)
Return: Brep[]
Modifiers: public, static
Summary: Return list of fill surfaces if any for object and clipping plane.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: Object to clip
Parameter: clippingPlaneObjects (IEnumerable<ClippingPlaneObject>)
Parameter Summary: Enumeration of clipping plane objects
Parameter: unclippedFills (bool)
Parameter Summary: Use True to get fills that are not trimmed by all clipping planes

Method: Rhino.DocObjects.RhinoObject.GetFillSurfaces(RhinoObject rhinoObject, IEnumerable<ClippingPlaneObject> clippingPlaneObjects)
Return: Brep[]
Modifiers: public, static
Summary: Return list of fill surfaces if any for object and clipping plane. Fills are trimmed by clipping planes that did not generate them.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: Object to clip
Parameter: clippingPlaneObjects (IEnumerable<ClippingPlaneObject>)
Parameter Summary: Enumeration of clipping plane objects

Method: Rhino.DocObjects.RhinoObject.GetRenderMeshes(IEnumerable<RhinoObject> rhinoObjects, bool okToCreate, bool returnAllObjects)
Return: ObjRef[]
Modifiers: public, static
Summary: Gets the render meshes of some objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: An array, a list, or any enumerable set of Rhino objects.
Parameter: okToCreate (bool)
Parameter Summary: True if the method is allowed to instantiate new meshes if they do not exist.
Parameter: returnAllObjects (bool)
Parameter Summary: True if all objects should be returned.

Method: Rhino.DocObjects.RhinoObject.GetRenderMeshesWithUpdatedTCs(IEnumerable<RhinoObject> rhinoObjects, bool okToCreate, bool returnAllObjects, bool skipHiddenObjects, bool updateMeshTCs)
Return: ObjRef[]
Modifiers: public, static
Summary: Gets the render meshes of some objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: An array, a list, or any enumerable set of Rhino objects.
Parameter: okToCreate (bool)
Parameter Summary: True if the method is allowed to instantiate new meshes if they do not exist.
Parameter: returnAllObjects (bool)
Parameter Summary: True if all objects should be returned.
Parameter: skipHiddenObjects (bool)
Parameter Summary: True if if hidden objects should be ignored.
Parameter: updateMeshTCs (bool)
Parameter Summary: True if the TCs should be updated with a texture mapping.

Method: Rhino.DocObjects.RhinoObject.GetTightBoundingBox(IEnumerable<RhinoObject> rhinoObjects, out BoundingBox boundingBox)
Return: bool
Modifiers: public, static
Summary: Gets a world XY-plane aligned tight bounding box from a collection of Rhino objects.
Parameter: rhinoObjects (IEnumerable<RhinoObject>)
Parameter Summary: A collection of Rhino objects.
Parameter: boundingBox (BoundingBox)
Parameter Summary: A tight bounding box.

Method: Rhino.DocObjects.RhinoObject.GetTightBoundingBox(IEnumerable<RhinoObject> rhinoObjects, Plane plane, out BoundingBox boundingBox)
Return: bool
Modifiers: public, static
Summary: Gets a plane aligned tight bounding box from a collection of Rhino objects.
Parameter: rhinoObjects (IEnumerable<RhinoObject>)
Parameter Summary: A collection of Rhino objects.
Parameter: plane (Plane)
Parameter Summary: A valid alignment plane.
Parameter: boundingBox (BoundingBox)
Parameter Summary: A tight bounding box.

Method: Rhino.DocObjects.RhinoObject.MeshObjects(IEnumerable<RhinoObject> rhinoObjects, MeshingParameters parameters, out Mesh[] meshes, out ObjectAttributes[] attributes, bool useWorkerThread)
Return: Commands.Result
Modifiers: public, static
Summary: Meshes Rhino objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: The Rhino objects to mesh.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters used to create the meshes.
Parameter: meshes (Mesh[])
Parameter Summary: The created meshes are appended to this array.
Parameter: attributes (ObjectAttributes[])
Parameter Summary: The object attributes that coincide with each created mesh are appended to this array.
Parameter: useWorkerThread (bool)
Parameter Summary: Set True to compute meshes in a worker thread.

Method: Rhino.DocObjects.RhinoObject.MeshObjects(IEnumerable<RhinoObject> rhinoObjects, MeshingParameters parameters, out Mesh[] meshes, out ObjectAttributes[] attributes)
Return: Commands.Result
Modifiers: public, static
Summary: Meshes Rhino objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: The Rhino objects to mesh.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters used to create the meshes.
Parameter: meshes (Mesh[])
Parameter Summary: The created meshes are appended to this array.
Parameter: attributes (ObjectAttributes[])
Parameter Summary: The object attributes that coincide with each created mesh are appended to this array.

Method: Rhino.DocObjects.RhinoObject.MeshObjects(IEnumerable<RhinoObject> rhinoObjects, ref MeshingParameters parameters, ref bool simpleDialog, out Mesh[] meshes, out ObjectAttributes[] attributes)
Return: Commands.Result
Modifiers: public, static
Summary: Meshes Rhino objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: The Rhino objects to mesh.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters used to create the meshes. The meshing parameters may change.
Parameter: simpleDialog (bool)
Parameter Summary: True to display the simple mesh parameters dialog, False to display the detailed mesh parameters dialog.
Parameter: meshes (Mesh[])
Parameter Summary: The created meshes are appended to this array.
Parameter: attributes (ObjectAttributes[])
Parameter Summary: The object attributes that coincide with each created mesh are appended to this array.

Method: Rhino.DocObjects.RhinoObject.MeshObjects(IEnumerable<RhinoObject> rhinoObjects, ref MeshingParameters parameters, ref int uiStyle, Transform xform, out Mesh[] meshes, out ObjectAttributes[] attributes)
Return: Commands.Result
Modifiers: public, static
Summary: Meshes Rhino objects.
Parameter: rhinoObjects (System.Collections.Generic.IEnumerable<RhinoObject>)
Parameter Summary: The Rhino objects to mesh.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters used to create the meshes. The meshing parameters may change.
Parameter: uiStyle (int)
Parameter Summary: The user interface style, where: -1 = no interface, 0 = simple dialog, 1 = details dialog, 2 = script or batch mode
Parameter: xform (Transform)
Parameter Summary: Transform to be used for export with origin, or Z to Y up, etc.
Parameter: meshes (Mesh[])
Parameter Summary: The created meshes are appended to this array.
Parameter: attributes (ObjectAttributes[])
Parameter Summary: The object attributes that coincide with each created mesh are appended to this array.

Method: Rhino.DocObjects.RhinoObject.CommitChanges()
Return: bool
Modifiers: public
Summary: Moves changes made to this RhinoObject into the RhinoDoc.

Method: Rhino.DocObjects.RhinoObject.CopyHistoryOnReplace()
Return: bool
Modifiers: public
Summary: Gets the setting of the CopyOnReplace field in this object's history

Method: Rhino.DocObjects.RhinoObject.CreateMeshes(MeshType meshType, MeshingParameters parameters, bool ignoreCustomParameters)
Return: int
Modifiers: public, virtual
Summary: Create meshes used to render and analyze surface and polysurface objects.
Parameter: meshType (MeshType)
Parameter Summary: type of meshes to create
Parameter: parameters (MeshingParameters)
Parameter Summary: in parameters that control the quality of the meshes that are created
Parameter: ignoreCustomParameters (bool)
Parameter Summary: Default should be false. Should the object ignore any custom meshing parameters on the object's attributes

Method: Rhino.DocObjects.RhinoObject.CustomRenderMeshesBoundingBox(MeshType mt, ViewportInfo vp, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs, out BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Returns the bounding box of custom render primitives for this object .
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The requested bounding box

Method: Rhino.DocObjects.RhinoObject.Description(TextLog textLog)
Return: void
Modifiers: public
Summary: Get a brief description of a object, including it's attributes and geometry.
Parameter: textLog (TextLog)
Parameter Summary: A text log for collecting the description.

Method: Rhino.DocObjects.RhinoObject.DuplicateGeometry()
Return: GeometryBase
Modifiers: public
Summary: Constructs a deep (full) copy of the geometry.

Method: Rhino.DocObjects.RhinoObject.EnableCustomGrips(Custom.CustomObjectGrips customGrips)
Return: bool
Modifiers: public
Summary: Turns on/off the object's editing grips.
Parameter: customGrips (Custom.CustomObjectGrips)
Parameter Summary: The custom object grips.

Method: Rhino.DocObjects.RhinoObject.EnableVisualAnalysisMode(Display.VisualAnalysisMode mode, bool enable)
Return: bool
Modifiers: public
Summary: Used to turn analysis modes on and off.
Parameter: mode (Display.VisualAnalysisMode)
Parameter Summary: A visual analysis mode.
Parameter: enable (bool)
Parameter Summary: True if the mode should be activated; False otherwise.

Method: Rhino.DocObjects.RhinoObject.GetActiveVisualAnalysisModes()
Return: Display.VisualAnalysisMode[]
Modifiers: public
Summary: Gets a list of currently enabled analysis modes for this object.

Method: Rhino.DocObjects.RhinoObject.GetBoundingBox(RhinoViewport viewport)
Return: BoundingBox
Modifiers: protected, virtual
Summary: Called when Rhino wants the bounding box of this object. Viewpoert can be null. This is the default base class version that will go through to the C++ base class if it is called from the custom object
Parameter: viewport (RhinoViewport)
Parameter Summary: For objects like labels or lights, the viewport in which the bounding box should be calculated. Otherwise null.

Method: Rhino.DocObjects.RhinoObject.GetCustomRenderMeshParameter(System.Guid providerId, System.String parameterName)
Return: System.IConvertible
Modifiers: public, virtual
Summary: Query the object for the value of a given named custom render mesh parameter.
Parameter: providerId (System.Guid)
Parameter Summary: Id of the custom render mesh provider
Parameter: parameterName (System.String)
Parameter Summary: Name of the parameter

Method: Rhino.DocObjects.RhinoObject.GetDynamicTransform(out Transform transform)
Return: bool
Modifiers: public
Summary: While an object is being dynamically transformed (dragged, rotated, ...), the current transformation can be retrieved and used for creating dynamic display.

Method: Rhino.DocObjects.RhinoObject.GetGrips()
Return: GripObject[]
Modifiers: public
Summary: Returns grips for this object If grips are enabled. If grips are not enabled, returns null.

Method: Rhino.DocObjects.RhinoObject.GetGroupList()
Return: int
Modifiers: public
Summary: Allocates an array of group indices of length GroupCount. If <b>GroupCount</b> is 0, then this method returns null.

Method: Rhino.DocObjects.RhinoObject.GetHighlightedSubObjects()
Return: ComponentIndex[]
Modifiers: public
Summary: Gets a list of all highlighted sub-objects.

Method: Rhino.DocObjects.RhinoObject.GetMaterial(bool frontMaterial)
Return: Material
Modifiers: public
Summary: Gets material that this object uses based on it's attributes and the document that the object is associated with.  In the rare case that a document is not associated with this object, None will be returned.
Parameter: frontMaterial (bool)
Parameter Summary: If true, gets the material used to render the object's front side

Method: Rhino.DocObjects.RhinoObject.GetMaterial(ComponentIndex componentIndex, System.Guid plugInId, ObjectAttributes attributes)
Return: Material
Modifiers: public
Summary: Get the Material associated with the sub object identified by componentIndex if the component index is set to ComponentIndex.Unset then the top level material is returned.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the material associated with the specified sub object or the objects top level material if it is set to ComponentIndex.Unset
Parameter: plugInId (System.Guid)
Parameter Summary: The plug-in specific material to look for.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Optional object attributes used to determine the material source, if None the objects attributes are used.

Method: Rhino.DocObjects.RhinoObject.GetMaterial(ComponentIndex componentIndex, System.Guid plugInId)
Return: Material
Modifiers: public
Summary: Get the Material associated with the sub object identified by componentIndex if the component index is set to ComponentIndex.Unset then the top level material is returned.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the material associated with the specified sub object or the objects top level material if it is set to ComponentIndex.Unset
Parameter: plugInId (System.Guid)
Parameter Summary: The plug-in specific material to look for.

Method: Rhino.DocObjects.RhinoObject.GetMaterial(ComponentIndex componentIndex)
Return: Material
Modifiers: public
Summary: Get the Material associated with the sub object identified by componentIndex if the component index is set to ComponentIndex.Unset then the top level material is returned.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the material associated with the specified sub object or the objects top level material if it is set to ComponentIndex.Unset

Method: Rhino.DocObjects.RhinoObject.GetMeshes(MeshType meshType)
Return: Mesh[]
Modifiers: public, virtual
Summary: Get existing meshes used to render and analyze surface and polysurface objects.

Method: Rhino.DocObjects.RhinoObject.GetRenderMaterial(bool frontMaterial)
Return: RenderMaterial
Modifiers: public
Summary: Gets the RenderMaterial that this object uses based on it's attributes and the document that the object is associated with. If there is no RenderMaterial associated with this object then None is returned.  If None is returned you should call GetMaterial to get the material used to render this object.
Parameter: frontMaterial (bool)
Parameter Summary: If true, gets the material used to render the object's front side otherwise; gets the material used to render the back side of the object.

Method: Rhino.DocObjects.RhinoObject.GetRenderMaterial(ComponentIndex componentIndex, System.Guid plugInId, ObjectAttributes attributes)
Return: RenderMaterial
Modifiers: public
Summary: Gets the RenderMaterial associated with this object if there is one. If there is no RenderMaterial associated with this object then None is returned.  If None is returned you should call GetMaterial to get the material used to render this object.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the RenderMaterial associated with the specified sub object or the objects top level material if it is set to  <b>Rhino.Geometry.ComponentIndex.Unset</b>
Parameter: plugInId (System.Guid)
Parameter Summary: The plug-in specific material to look for.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Optional object attributes used to determine the material source, if None the objects attributes are used.

Method: Rhino.DocObjects.RhinoObject.GetRenderMaterial(ComponentIndex componentIndex, System.Guid plugInId)
Return: RenderMaterial
Modifiers: public
Summary: Gets the RenderMaterial associated with this object if there is one. If there is no RenderMaterial associated with this object then None is returned.  If None is returned you should call GetMaterial to get the material used to render this object.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the RenderMaterial associated with the specified sub object or the objects top level material if it is set to  <b>Rhino.Geometry.ComponentIndex.Unset</b>
Parameter: plugInId (System.Guid)
Parameter Summary: The plug-in specific material to look for.

Method: Rhino.DocObjects.RhinoObject.GetRenderMaterial(ComponentIndex componentIndex)
Return: RenderMaterial
Modifiers: public
Summary: Gets the RenderMaterial associated with this object if there is one. If there is no RenderMaterial associated with this object then None is returned.  If None is returned you should call GetMaterial to get the material used to render this object.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Returns the RenderMaterial associated with the specified sub object or the objects top level material if it is set to ComponentIndex.Unset

Method: Rhino.DocObjects.RhinoObject.GetRenderMeshParameters()
Return: MeshingParameters
Modifiers: public
Summary: Returns the meshing parameters that this object uses for generating render meshes. If this object does not have per-object meshing parameters, then the document's meshing parameters are returned.

Method: Rhino.DocObjects.RhinoObject.GetRenderMeshParameters(bool returnDocumentParametersIfUnset)
Return: MeshingParameters
Modifiers: public
Summary: Returns the meshing parameters that this object uses for generating render meshes.
Parameter: returnDocumentParametersIfUnset (bool)
Parameter Summary: If true, then return the per-object meshing parameters for this object. If this object does not have per-object meshing parameters, then the document's meshing parameters are returned. If false, then return the per-object meshing parameters for this object. If this object does not have per-object meshing parameters, then None is returned.

Method: Rhino.DocObjects.RhinoObject.GetRenderPrimitiveList(ViewportInfo viewport, bool preview)
Return: RenderPrimitiveList
Modifiers: public
Summary: Build custom render mesh(es) for this object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: preview (bool)
Parameter Summary: Type of mesh to build, if preview is True then a smaller mesh may be generated in less time, False is meant when actually rendering.

Method: Rhino.DocObjects.RhinoObject.GetRenderPrimitiveList(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs)
Return: RenderPrimitiveList
Modifiers: public
Summary: Build custom render mesh(es) for this object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Attributes for the view mode you are supplying meshes for.  Will be None if this is a modal rendering.

Method: Rhino.DocObjects.RhinoObject.GetSelectedSubObjects()
Return: ComponentIndex[]
Modifiers: public
Summary: Get a list of all selected sub-objects.

Method: Rhino.DocObjects.RhinoObject.GetSubObjects()
Return: RhinoObject[]
Modifiers: public
Summary: Explodes the object into sub-objects. It is up to the caller to add the returned objects to the document.

Method: Rhino.DocObjects.RhinoObject.GetTextureChannels()
Return: int
Modifiers: public
Summary: Get a list of the texture mapping channel Id's associated with object.

Method: Rhino.DocObjects.RhinoObject.GetTextureMapping(int channel, out Transform objectTransform)
Return: TextureMapping
Modifiers: public
Summary: Get objects texture mapping

Method: Rhino.DocObjects.RhinoObject.GetTextureMapping(int channel)
Return: TextureMapping
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.GetTightBoundingBox(ref BoundingBox tightBox, bool growBox, Transform xform)
Return: bool
Modifiers: protected, virtual
Summary: Get tight bounding box of this Rhino object. The Rhino object is not modified.
Parameter: tightBox (BoundingBox)
Parameter Summary: Beginning and resulting tight box
Parameter: growBox (bool)
Parameter Summary: If True and the input tight_bbox is valid, then returned tight_bbox is the union of the input tight_bbox and the tight bounding box of this Rhino object.
Parameter: xform (Transform)
Parameter Summary: If useXform==true, the tight bounding box of the transformed Rhino object is calculated.

Method: Rhino.DocObjects.RhinoObject.HasCustomRenderMeshes(MeshType mt, ViewportInfo vp, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public
Summary: Returns True if the object will has a set of custom render primitives - ie, CustomRenderMeshes will return non-null.
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.

Method: Rhino.DocObjects.RhinoObject.HasHistoryRecord()
Return: bool
Modifiers: public
Summary: Returns whether this object has a history record

Method: Rhino.DocObjects.RhinoObject.HasTextureMapping()
Return: bool
Modifiers: public
Summary: Returns True if this object has a texture mapping form any source (pluginId)

Method: Rhino.DocObjects.RhinoObject.Highlight(bool enable)
Return: bool
Modifiers: public
Summary: Modifies the highlighting of the object.
Parameter: enable (bool)
Parameter Summary: True if highlighting should be enabled.

Method: Rhino.DocObjects.RhinoObject.HighlightSubObject(ComponentIndex componentIndex, bool highlight)
Return: bool
Modifiers: public
Summary: Highlights a sub-object.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: A sub-object component index.
Parameter: highlight (bool)
Parameter Summary: True if the sub-object should be highlighted.

Method: Rhino.DocObjects.RhinoObject.HistoryChildren()
Return: System.Guid[]
Modifiers: public
Summary: Gets the ids of the child Rhino objects of this object.

Method: Rhino.DocObjects.RhinoObject.HistoryParents()
Return: System.Guid[]
Modifiers: public
Summary: Gets the ids of the parent Rhino objects of this object.

Method: Rhino.DocObjects.RhinoObject.InVisualAnalysisMode()
Return: bool
Modifiers: public
Summary: Reports if any visual analysis mode is currently active for an object.

Method: Rhino.DocObjects.RhinoObject.InVisualAnalysisMode(Display.VisualAnalysisMode mode)
Return: bool
Modifiers: public
Summary: Reports if a visual analysis mode is currently active for an object.
Parameter: mode (Display.VisualAnalysisMode)
Parameter Summary: The mode to check for.
Use None if you want to see if any mode is active.

Method: Rhino.DocObjects.RhinoObject.IsActiveInViewport(Display.RhinoViewport viewport)
Return: bool
Modifiers: public, virtual
Summary: Determine if this object is active in a particular viewport.

Method: Rhino.DocObjects.RhinoObject.IsHighlighted(bool checkSubObjects)
Return: int
Modifiers: public
Summary: Check highlight state.
Parameter: checkSubObjects (bool)
Parameter Summary: If True and the entire object is not highlighted, and some subset of the object is highlighted, like some edges of a surface, then 3 is returned. If False and the entire object is not highlighted, then zero is returned.

Method: Rhino.DocObjects.RhinoObject.IsMeshable(MeshType meshType)
Return: bool
Modifiers: public, virtual
Summary: Returns True if the object is capable of having a mesh of the specified type

Method: Rhino.DocObjects.RhinoObject.IsSelectable()
Return: bool
Modifiers: public
Summary: Reports if an object can be selected.

Method: Rhino.DocObjects.RhinoObject.IsSelectable(bool ignoreSelectionState, bool ignoreGripsState, bool ignoreLayerLocking, bool ignoreLayerVisibility)
Return: bool
Modifiers: public
Summary: Reports if an object can be selected.
Parameter: ignoreSelectionState (bool)
Parameter Summary: If true, then selected objects are selectable. If false, then selected objects are not selectable.
Parameter: ignoreGripsState (bool)
Parameter Summary: If true, then objects with grips on can be selected. If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected.
Parameter: ignoreLayerLocking (bool)
Parameter Summary: If true, then objects on locked layers are selectable. If false, then objects on locked layers are not selectable.
Parameter: ignoreLayerVisibility (bool)
Parameter Summary: If true, then objects on hidden layers are selectable. If false, then objects on hidden layers are not selectable.

Method: Rhino.DocObjects.RhinoObject.IsSelected(bool checkSubObjects)
Return: int
Modifiers: public
Summary: Check selection state.
Parameter: checkSubObjects (bool)
Parameter Summary: (False is good default) If True and the entire object is not selected, and some subset of the object is selected, like some edges of a surface, then 3 is returned. If False and the entire object is not selected, then zero is returned.

Method: Rhino.DocObjects.RhinoObject.IsSubObjectHighlighted(ComponentIndex componentIndex)
Return: bool
Modifiers: public
Summary: Determines if a sub-object is highlighted.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: A sub-object component index.

Method: Rhino.DocObjects.RhinoObject.IsSubObjectSelectable(ComponentIndex componentIndex, bool ignoreSelectionState)
Return: bool
Modifiers: public
Summary: Reports if a sub-object can be selected.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: index of sub-object to check.
Parameter: ignoreSelectionState (bool)
Parameter Summary: If true, then selected objects are selectable. If false, then selected objects are not selectable.

Method: Rhino.DocObjects.RhinoObject.IsSubObjectSelected(ComponentIndex componentIndex)
Return: bool
Modifiers: public
Summary: Check sub-object selection state.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Index of sub-object to check.

Method: Rhino.DocObjects.RhinoObject.MemoryEstimate()
Return: uint
Modifiers: public
Summary: Computes an estimate of the number of bytes that this object is using in memory. Note that this is a runtime memory estimate and does not directly compare to the amount of space take up by the object when saved to a file.

Method: Rhino.DocObjects.RhinoObject.MeshCount(MeshType meshType, MeshingParameters parameters)
Return: int
Modifiers: public, virtual
Summary: RhinoObjects can have several different types of meshes and different numbers of meshes.  A b-rep can have a render and an analysis mesh on each face.  A mesh object has a single render mesh and no analysis mesh. Curve, point, and annotation objects have no meshes.
Parameter: meshType (MeshType)
Parameter Summary: type of mesh to count
Parameter: parameters (MeshingParameters)
Parameter Summary: if not None and if the object can change its mesh (like a brep), then only meshes that were created with these mesh parameters are counted.

Method: Rhino.DocObjects.RhinoObject.ObjectFrame()
Return: Plane
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.ObjectFrame(ObjectFrameFlags flags)
Return: Plane
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.OnAddToDocument(RhinoDoc doc)
Return: void
Modifiers: protected, virtual
Summary: This call informs an object it is about to be added to the list of active objects in the document.

Method: Rhino.DocObjects.RhinoObject.OnDeleteFromDocument(RhinoDoc doc)
Return: void
Modifiers: protected, virtual
Summary: This call informs an object it is about to be deleted. Some objects, like clipping planes, need to do a little extra cleanup before they are deleted.

Method: Rhino.DocObjects.RhinoObject.OnDraw(Display.DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called when Rhino wants to draw this object

Method: Rhino.DocObjects.RhinoObject.OnDuplicate(RhinoObject source)
Return: void
Modifiers: protected, virtual
Summary: Called when this a new instance of this object is created and copied from an existing object

Method: Rhino.DocObjects.RhinoObject.OnPick(Input.Custom.PickContext context)
Return: System.Collections.Generic.IEnumerable<ObjRef>
Modifiers: protected, virtual
Summary: Called to determine if this object or some sub-portion of this object should be picked given a pick context.

Method: Rhino.DocObjects.RhinoObject.OnPicked(Input.Custom.PickContext context, IEnumerable<ObjRef> pickedItems)
Return: void
Modifiers: protected, virtual
Summary: Called when this object has been picked
Parameter: context (Input.Custom.PickContext)
Parameter Summary: 
Parameter: pickedItems (System.Collections.Generic.IEnumerable<ObjRef>)
Parameter Summary: Items that were picked. This parameter is enumerable because there may have been multiple sub-objects picked

Method: Rhino.DocObjects.RhinoObject.OnSelectionChanged()
Return: void
Modifiers: protected, virtual
Summary: Called when the selection state of this object has changed

Method: Rhino.DocObjects.RhinoObject.OnSpaceMorph(SpaceMorph morph)
Return: void
Modifiers: protected, virtual
Summary: Called when a space morph has been applied to the geometry. Currently this only works for CustomMeshObject instances

Method: Rhino.DocObjects.RhinoObject.OnTransform(Transform transform)
Return: void
Modifiers: protected, virtual
Summary: Called when a transformation has been applied to the geometry

Method: Rhino.DocObjects.RhinoObject.RenderMeshes(MeshType mt, ViewportInfo vp, List<InstanceObject> ancestry, ref RenderMeshProvider.Flags flags, PlugIns.PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: RenderMeshes
Modifiers: public
Summary: Returns a set of custom render primitives for this object.
Parameter: mt (MeshType)
Parameter Summary: The mesh type requested (render or analysis).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: ancestry (List<DocObjects.InstanceObject>)
Parameter Summary: The ancestry tree - only used for by-parent object properties assignments.
Parameter: flags (RenderMeshProvider.Flags)
Parameter Summary: See MeshProvider.Flags
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: The requesting plug-in (typically the calling plugin)
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: Display attributes for the caller - None if this is a full rendering.

Method: Rhino.DocObjects.RhinoObject.Select(bool on, bool syncHighlight, bool persistentSelect, bool ignoreGripsState, bool ignoreLayerLocking, bool ignoreLayerVisibility)
Return: int
Modifiers: public
Summary: Selects an object.
Parameter: on (bool)
Parameter Summary: The new selection state; True activates selection.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Highlighting can be and stay out of sync, as its specification is independent. | Parameter: persistentSelect (bool) | Parameter Summary: Objects that are persistently selected stay selected when a command terminates. | Parameter: ignoreGripsState (bool) | Parameter Summary: If true, then objects with grips on can be selected. If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected when it has grips turned on. | Parameter: ignoreLayerLocking (bool) | Parameter Summary: If true, then objects on locked layers can be selected. If false, then objects on locked layers cannot be selected. | Parameter: ignoreLayerVisibility (bool) | Parameter Summary: If true, then objects on hidden layers can be selectable. If false, then objects on hidden layers cannot be selected.

Method: Rhino.DocObjects.RhinoObject.Select(bool on, bool syncHighlight)
Return: int
Modifiers: public
Summary: Selects an object.
Parameter: on (bool)
Parameter Summary: The new selection state; True activates selection.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and not highlighted if is not selected.
Highlighting can be and stay out of sync, as its specification is independent.

Method: Rhino.DocObjects.RhinoObject.Select(bool on)
Return: int
Modifiers: public
Summary: Selects an object.
Parameter: on (bool)
Parameter Summary: The new selection state; True activates selection.

Method: Rhino.DocObjects.RhinoObject.SelectSubObject(ComponentIndex componentIndex, bool select, bool syncHighlight, bool persistentSelect)
Return: int
Modifiers: public
Summary: Reports if an object can be selected.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Index of sub-object to check.
Parameter: select (bool)
Parameter Summary: The new selection state; True activates selection.
Parameter: syncHighlight (bool)
Parameter Summary: (default=true) If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Parameter: persistentSelect (bool)
Parameter Summary: When true, selection persists even after the current command terminates.

Method: Rhino.DocObjects.RhinoObject.SelectSubObject(ComponentIndex componentIndex, bool select, bool syncHighlight)
Return: int
Modifiers: public
Summary: Reports if an object can be selected.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: Index of sub-object to check.
Parameter: select (bool)
Parameter Summary: The new selection state; True activates selection.
Parameter: syncHighlight (bool)
Parameter Summary: (default=true) If true, then the object is highlighted if it is selected and unhighlighted if is not selected.

Method: Rhino.DocObjects.RhinoObject.SetCopyHistoryOnReplace(bool bCopy)
Return: void
Modifiers: public
Summary: If this object has a history record, the CopyOnReplace field is set When an object is replaced in a document and the old object has a history record with this field set, the history record is copied and attached to the new object. That allows a descendant object to continue the history linkage after it is edited.

Method: Rhino.DocObjects.RhinoObject.SetCustomRenderMeshParameter(System.Guid providerId, System.String parameterName, object value)
Return: void
Modifiers: public, virtual
Summary: Set the named custom render mesh parameter value for this object.
Parameter: providerId (System.Guid)
Parameter Summary: Id of the custom render mesh provider
Parameter: parameterName (System.String)
Parameter Summary: 
Parameter: value (object)
Parameter Summary:

Method: Rhino.DocObjects.RhinoObject.SetHistory(HistoryRecord history)
Return: bool
Modifiers: public
Summary: For expert use only. Sets the history record that describes how this object was created. This information is used to update this object when Rhino history is enabled and an input object changes.
Parameter: history (HistoryRecord)
Parameter Summary: The history record.

Method: Rhino.DocObjects.RhinoObject.SetObjectFrame(Plane plane)
Return: void
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.SetObjectFrame(Transform xform)
Return: void
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.SetRenderMeshParameters(MeshingParameters mp)
Return: bool
Modifiers: public
Summary: Sets the per-object meshing parameters for this object. When set, this object will use these meshing parameters when generating a render mesh, instead of those provided by the document.
Parameter: mp (MeshingParameters)
Parameter Summary: The per-object meshing parameters. Note: if null, then the per-object meshing parameters will be removed, and this object will revert to using the meshing parameters provided by the document.

Method: Rhino.DocObjects.RhinoObject.SetTextureMapping(int channel, TextureMapping tm, Transform objectTransform)
Return: int
Modifiers: public
Summary: Sets texture mapping and mapping object transform for a channel
Parameter: channel (int)
Parameter Summary: 
Parameter: tm (TextureMapping)
Parameter Summary: 
Parameter: objectTransform (Transform)
Parameter Summary: Mapping channel object transform

Method: Rhino.DocObjects.RhinoObject.SetTextureMapping(int channel, TextureMapping tm)
Return: int
Modifiers: public

Method: Rhino.DocObjects.RhinoObject.ShortDescription(bool plural)
Return: string
Modifiers: public, virtual
Summary: Gets a localized short descriptive name of the object.
Parameter: plural (bool)
Parameter Summary: True if the descriptive name should in plural.

Method: Rhino.DocObjects.RhinoObject.ShortDescriptionWithClosedStatus(bool prepend, bool plural, out int status)
Return: string
Modifiers: public
Summary: Gets a localized short descriptive name of the object, along with it's open/closed status.
Parameter: prepend (bool)
Parameter Summary: True if "open" or "closed" should be prepended to the descriptive name.
Parameter: plural (bool)
Parameter Summary: True if the descriptive name should in plural.
Parameter: status (int)
Parameter Summary: The open/closed status, where: 0 = undefined, 1 = open, 2 = closed.

Method: Rhino.DocObjects.RhinoObject.SupportsRenderPrimitiveList(ViewportInfo viewport, bool preview)
Return: bool
Modifiers: public
Summary: Determines if custom render meshes will be built for a particular object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: preview (bool)
Parameter Summary: Type of mesh to build. If attributes is non-None then a smaller mesh may be generated in less time, False is meant when actually rendering.

Method: Rhino.DocObjects.RhinoObject.SupportsRenderPrimitiveList(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public
Summary: Determines if custom render meshes will be built for a particular object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Type of mesh to build. If attributes is non-None then a smaller mesh may be generated in less time, False is meant when actually rendering.

Method: Rhino.DocObjects.RhinoObject.TryGetGumballFrame(out GumballFrame frame)
Return: bool
Modifiers: public
Summary: If a Rhino object has been manipulated by Rhino's gumball, and the gumball is not in its default position, then the object's repositioned gumball frame is returned.
Parameter: frame (GumballFrame)
Parameter Summary: The gumball frame.

Method: Rhino.DocObjects.RhinoObject.TryGetRenderPrimitiveBoundingBox(ViewportInfo viewport, bool preview, out BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Get the bounding box for the custom render meshes associated with this object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: preview (bool)
Parameter Summary: Type of mesh to build, if preview is True then a smaller mesh may be generated in less time, False is meant when actually rendering.
Parameter: boundingBox (BoundingBox)
Parameter Summary: This will be set to BoundingBox.Unset on failure otherwise it will be the bounding box for the custom render meshes associated with this object.

Method: Rhino.DocObjects.RhinoObject.TryGetRenderPrimitiveBoundingBox(ViewportInfo viewport, Rhino.Display.DisplayPipelineAttributes attrs, out BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Get the bounding box for the custom render meshes associated with this object.
Parameter: viewport (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: attrs (Rhino.Display.DisplayPipelineAttributes)
Parameter Summary: Attributes for the view mode you are supplying meshes for.  Will be None if this is a modal rendering.
Parameter: boundingBox (BoundingBox)
Parameter Summary: This will be set to BoundingBox.Unset on failure otherwise it will be the bounding box for the custom render meshes associated with this object.

Method: Rhino.DocObjects.RhinoObject.UnhighlightAllSubObjects()
Return: int
Modifiers: public
Summary: Removes highlighting from all sub-objects.

Method: Rhino.DocObjects.RhinoObject.UnselectAllSubObjects()
Return: int
Modifiers: public
Summary: Removes selection from all sub-objects.

Class: Rhino.DocObjects.RhinoObjectEventArgs

Property: Rhino.DocObjects.RhinoObjectEventArgs.ObjectId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoObjectEventArgs.TheObject
Return: RhinoObject
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.RhinoObjectSelectionEventArgs

Property: Rhino.DocObjects.RhinoObjectSelectionEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoObjectSelectionEventArgs.RhinoObjectCount
Return: int
Modifiers: public
Summary: Can be faster to call than RhinoObjects.Length
Accessors: get

Property: Rhino.DocObjects.RhinoObjectSelectionEventArgs.RhinoObjects
Return: RhinoObject[]
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoObjectSelectionEventArgs.Selected
Return: bool
Modifiers: public
Summary: Returns True if objects are being selected. Returns False if objects are being deselected.
Accessors: get

Class: Rhino.DocObjects.RhinoReplaceObjectEventArgs

Property: Rhino.DocObjects.RhinoReplaceObjectEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoReplaceObjectEventArgs.NewRhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoReplaceObjectEventArgs.ObjectId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.RhinoReplaceObjectEventArgs.OldRhinoObject
Return: RhinoObject
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.RhinoTransformObjectsEventArgs
Summary: EventArgs passed to RhinoDoc.BeforeTransform.

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.GripCount
Return: int
Modifiers: public
Summary: The number of Rhino object grips that will be transformed.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.GripOwnerCount
Return: int
Modifiers: public
Summary: The number of Rhino object grip owners that will be changed when the grips are transformed.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.GripOwners
Return: RhinoObject[]
Modifiers: public
Summary: An array of Rhino object grip owners that will be changed when the grips are transformed. WARNING: these objects may be deleted at anytime after the event handler has been notified. Do not save references to these objects. Use the object's runtime serial number to safely reference these objects at a later time.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.Grips
Return: GripObject[]
Modifiers: public
Summary: An array of Rhino object grips that will be transformed. WARNING: these objects may be deleted at anytime after the event handler has been notified. Do not save references to these objects. Use the object's runtime serial number to safely reference these objects at a later time.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.ObjectCount
Return: int
Modifiers: public
Summary: The number of Rhino objects that will be transformed.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.Objects
Return: RhinoObject[]
Modifiers: public
Summary: An array of Rhino objects to be transformed. WARNING: these objects may be deleted at anytime after the event handler has been notified. Do not save references to these objects. Use the object's runtime serial number to safely reference these objects at a later time.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.ObjectsWillBeCopied
Return: bool
Modifiers: public
Summary: True if the objects will be copied.
Accessors: get

Property: Rhino.DocObjects.RhinoTransformObjectsEventArgs.Transform
Return: Transform
Modifiers: public
Summary: The transformation to be applied.
Accessors: get

Class: Rhino.DocObjects.SectionStyle
Summary: SectionStyle helps define the attributes to use when drawing a section

Constructor: Rhino.DocObjects.SectionStyle.SectionStyle()
Summary: Create a new instance of a SectionStyle

Constructor: Rhino.DocObjects.SectionStyle.SectionStyle(SectionStyle other)
Summary: Create a new SetionStyle that is a copy of another SectionStyle

Property: Rhino.DocObjects.SectionStyle.BackgroundFillColor
Return: Color
Modifiers: public
Summary: Fill color to apply to the background. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BackgroundFillMode
Return: SectionBackgroundFillMode
Modifiers: public
Summary: How the background should be filled
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BackgroundFillPrintColor
Return: Color
Modifiers: public
Summary: Fill print color to apply to the background. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BoundaryColor
Return: Color
Modifiers: public
Summary: Color to apply for the boundary curves. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BoundaryPrintColor
Return: Color
Modifiers: public
Summary: Print color to apply for the boundary curves. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BoundaryVisible
Return: bool
Modifiers: public
Summary: Should the boundary for this section be displayed
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.BoundaryWidthScale
Return: double
Modifiers: public
Summary: Scale applied to the boundary wire thickness
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.SectionStyle</b> .
Accessors: get

Property: Rhino.DocObjects.SectionStyle.HatchIndex
Return: int
Modifiers: public
Summary: Hatch pattern to use when drawing a fill pattern
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.HatchPatternColor
Return: Color
Modifiers: public
Summary: Color to apply for the hatch pattern. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.HatchPatternPrintColor
Return: Color
Modifiers: public
Summary: Print color to apply for the hatch pattern. Default is Color.Empty which means get the color from the source where this section style came from (object attributes or layer)
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.HatchRotationRadians
Return: double
Modifiers: public
Summary: Rotation to apply to the hatch patterh
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.HatchScale
Return: double
Modifiers: public
Summary: Scale to apply to the hatch pattern
Accessors: get set

Property: Rhino.DocObjects.SectionStyle.SectionFillRule
Return: ObjectSectionFillRule
Modifiers: public
Summary: Rule to determine when to generate a hatch pattern and fill
Accessors: get set

Method: Rhino.DocObjects.SectionStyle.GetBoundaryLinetype()
Return: Linetype
Modifiers: public
Summary: Get an optional custom linetype associated with this section style. If null, then the linetype will come from the parent attributes or layer

Method: Rhino.DocObjects.SectionStyle.RemoveBoundaryLinetype()
Return: void
Modifiers: public

Method: Rhino.DocObjects.SectionStyle.SetBoundaryLinetype(Linetype linetype)
Return: void
Modifiers: public

Class: Rhino.DocObjects.SubDObject
Summary: Rhino object for SubD

Class: Rhino.DocObjects.SurfaceObject
Summary: Represents a <b>Rhino.Geometry.Surface</b> in a document.

Property: Rhino.DocObjects.SurfaceObject.SurfaceGeometry
Return: Surface
Modifiers: public
Summary: Gets the surface geometry linked with this object.
Accessors: get

Method: Rhino.DocObjects.SurfaceObject.DuplicateSurfaceGeometry()
Return: Surface
Modifiers: public
Summary: Constructs a new deep copy of the surface geometry.

Class: Rhino.DocObjects.TextDotObject
Summary: Represents a text dot that is a document.

Class: Rhino.DocObjects.TextObject
Summary: Rhino Object that represents text geometry and attributes

Property: Rhino.DocObjects.TextObject.TextGeometry
Return: TextEntity
Modifiers: public
Summary: Get the text geometry for this object.
Accessors: get

Method: Rhino.DocObjects.TextObject.GetTextCorners(RhinoViewport viewport)
Return: Point3d[]
Modifiers: public
Summary: Gets the world 3D corner points of the whole text object.
Parameter: viewport (RhinoViewport)
Parameter Summary: The viewport in which to make the calculation.

Class: Rhino.DocObjects.Texture
Summary: Represents a texture that is mapped on objects.

Constructor: Rhino.DocObjects.Texture.Texture()
Summary: Initializes a new texture.

Constructor: Rhino.DocObjects.Texture.Texture(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.DocObjects.Texture.ApplyUvwTransform
Return: bool
Modifiers: public
Summary: If True then the UVW transform is applied to the texture otherwise the UVW transform is ignored.
Accessors: get set

Property: Rhino.DocObjects.Texture.Enabled
Return: bool
Modifiers: public
Summary: If the texture is enabled then it will be visible in the rendered display otherwise it will not.
Accessors: get set

Property: Rhino.DocObjects.Texture.FileName
Return: string
Modifiers: public
Summary: Gets or sets a file name that is used by this texture.
NOTE: We are moving away from string-based FileName, and suggest     the usage of the new FileReference class.
Also, this filename may well not be a path that makes sense     on a user's computer because it was a path initially set on     a different user's computer. If you want to get a workable path     for this user, use the BitmapTable.Find function using this     property. | Since: 5.0 | Accessors: get set

Property: Rhino.DocObjects.Texture.FileReference
Return: FileReference
Modifiers: public
Summary: Gets or sets a copy of the file reference that is used by this texture. After the get or the set method complete, you own the copy you received or passed in, and can Dispose() of it.
Accessors: get set

Property: Rhino.DocObjects.Texture.Id
Return: Guid
Modifiers: public
Summary: Gets the globally unique identifier of this texture.
Accessors: get

Property: Rhino.DocObjects.Texture.MagFilter
Return: TextureFilter
Modifiers: public
Summary: The MagFilter setting controls how the color of the image pixel is calculated when the image pixel corresponds to a fraction of a texture bitmap pixel.
Accessors: get set

Property: Rhino.DocObjects.Texture.MappingChannelId
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Texture.MinFilter
Return: TextureFilter
Modifiers: public
Summary: The MinFilter setting controls how the color of the image pixel is calculated when the image pixel corresponds to multiple texture bitmap pixels.
Accessors: get set

Property: Rhino.DocObjects.Texture.Offset
Return: Vector2d
Modifiers: public
Summary: Helper for access to the offset value encoded in UvwTransform
Accessors: get set

Property: Rhino.DocObjects.Texture.ProjectionMode
Return: TextureProjectionModes
Modifiers: public
Summary: How texture is projected onto geometry
Accessors: get set

Property: Rhino.DocObjects.Texture.Repeat
Return: Vector2d
Modifiers: public
Summary: Helper for access to the repeat value encoded in UvwTransform
Accessors: get set

Property: Rhino.DocObjects.Texture.Rotation
Return: double
Modifiers: public
Summary: Helper for access to the rotation value encoded in UvwTransform
Accessors: get set

Property: Rhino.DocObjects.Texture.TextureCombineMode
Return: TextureCombineMode
Modifiers: public
Summary: Determines how this texture is combined with others in a material's texture list.
Accessors: get set

Property: Rhino.DocObjects.Texture.TextureType
Return: TextureType
Modifiers: public
Summary: Controls how the pixels in the bitmap are interpreted
Accessors: get set

Property: Rhino.DocObjects.Texture.TreatAsLinear
Return: bool
Modifiers: public
Summary: If false, the texture color values should be correctly by the linear workflow pre-process gamma value (in the document) if linear workflow is on.  Otherwise, if the values is true, the values should be used raw from the texture.
Accessors: get set

Property: Rhino.DocObjects.Texture.UvwTransform
Return: Transform
Modifiers: public
Summary: Transform to be applied to each instance of this texture if ApplyUvw is true
Accessors: get set

Property: Rhino.DocObjects.Texture.WcsBoxProjected
Return: bool
Modifiers: public
Summary: Is True if this texture uses world coordinate system (WCS) box projection for texture mapping. Notice: If this texture is used by an object that has an object coordinate system (OCS) frame defined on a mapping channel then that OCS frame is used instead of the WCS.
Accessors: get

Property: Rhino.DocObjects.Texture.WcsProjected
Return: bool
Modifiers: public
Summary: Is True if this texture uses world coordinate system (WCS) projection for texture mapping. Notice: If this texture is used by an object that has an object coordinate system (OCS) frame defined on a mapping channel then that OCS frame is used instead of the WCS.
Accessors: get

Property: Rhino.DocObjects.Texture.WrapU
Return: TextureUvwWrapping
Modifiers: public
Summary: Texture wrapping mode in the U direction
Accessors: get set

Property: Rhino.DocObjects.Texture.WrapV
Return: TextureUvwWrapping
Modifiers: public
Summary: Texture wrapping mode in the V direction
Accessors: get set

Property: Rhino.DocObjects.Texture.WrapW
Return: TextureUvwWrapping
Modifiers: public
Summary: Texture wrapping mode in the W direction
Accessors: get set

Method: Rhino.DocObjects.Texture.GetAlphaBlendValues(out double constant, out double a0, out double a1, out double a2, out double a3)
Return: void
Modifiers: public
Summary: If the TextureCombineMode is Blend, then the blending function for alpha is determined by
new alpha = constant                 + a0*(current alpha)                 + a1*(texture alpha)                 + a2*min(current alpha,texture alpha)                 + a3*max(current alpha,texture alpha) | Since: 5.6

Method: Rhino.DocObjects.Texture.SetAlphaBlendValues(double constant, double a0, double a1, double a2, double a3)
Return: void
Modifiers: public
Summary: If the TextureCombineMode is Blend, then the blending function for alpha is determined by
new alpha = constant                 + a0*(current alpha)                 + a1*(texture alpha)                 + a2*min(current alpha,texture alpha)                 + a3*max(current alpha,texture alpha) | Since: 5.6

Method: Rhino.DocObjects.Texture.SetRGBBlendValues(Color color, double a0, double a1, double a2, double a3)
Return: void
Modifiers: public
Summary: If the TextureCombineMode is Blend, then the blending function for RGB is determined by
new rgb = colorcolor             + a0[0]*(current RGB)             + a1[1]*(texture RGB)             + a2[2]*min(current RGB,texture RGB)             + a3[3]*max(current RGB,texture RGB) | Since: 6.0

Class: Rhino.DocObjects.ViewInfo
Summary: Represents the name and orientation of a View (and named view).
views can be thought of as cameras.

Constructor: Rhino.DocObjects.ViewInfo.ViewInfo()
Summary: Create a default ViewInfo instance

Constructor: Rhino.DocObjects.ViewInfo.ViewInfo(RhinoViewport rhinoViewPort)
Summary: Access to the ViewInfo for given RhinoViewport

Constructor: Rhino.DocObjects.ViewInfo.ViewInfo(uint docRuntimeSerialNumber)
Summary: Construct the ViewInfo for active viewport of given doc.

Property: Rhino.DocObjects.ViewInfo.FocalBlurAperture
Return: double
Modifiers: public
Summary: Gets or sets the Focal blur aperture of the active viewport
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.FocalBlurDistance
Return: double
Modifiers: public
Summary: Gets or sets the Focal blur distance of the active viewport
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.FocalBlurJitter
Return: double
Modifiers: public
Summary: Gets or sets the Focal blur jitter of the active viewport
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.FocalBlurMode
Return: ViewInfoFocalBlurModes
Modifiers: public
Summary: Gets or sets the Focal blur mode of the active viewport
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.FocalBlurSampleCount
Return: uint
Modifiers: public
Summary: Gets or sets the Focal blur sample count of the active viewport
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.Name
Return: string
Modifiers: public
Summary: Gets or sets the name of the view.
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.NamedViewId
Return: Guid
Modifiers: public
Summary: Returns a unique id if this is a named view otherwise an empty Guid.
Accessors: get

Property: Rhino.DocObjects.ViewInfo.SectionBehavior
Return: ViewSectionBehavior
Modifiers: public
Summary: How a view will interact with clipping planes
Accessors: get set

Property: Rhino.DocObjects.ViewInfo.ShowWallpaperInGrayScale
Return: bool
Modifiers: public
Summary: True if wallpaper (if any) is to be shown in gray scale in this view.
Accessors: get

Property: Rhino.DocObjects.ViewInfo.Viewport
Return: ViewportInfo
Modifiers: public
Summary: Gets the viewport, or viewing frustum, associated with this view.
Accessors: get

Property: Rhino.DocObjects.ViewInfo.WallpaperFilename
Return: string
Modifiers: public
Summary: Get filename for wallpaper set to this view, if any.
Accessors: get

Property: Rhino.DocObjects.ViewInfo.WallpaperHidden
Return: bool
Modifiers: public
Summary: True if wallpaper (if any) is to be hidden from this view.
Accessors: get

Method: Rhino.DocObjects.ViewInfo.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.ViewInfo.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Class: Rhino.DocObjects.ViewportInfo
Summary: Represents a viewing frustum.

Constructor: Rhino.DocObjects.ViewportInfo.ViewportInfo()
Summary: Initializes a new instance.

Constructor: Rhino.DocObjects.ViewportInfo.ViewportInfo(RhinoViewport rhinoViewport)
Summary: Copies all of the ViewportInfo data from an existing RhinoViewport.

Constructor: Rhino.DocObjects.ViewportInfo.ViewportInfo(ViewportInfo other)
Summary: Initializes a new instance by copying values from another instance.

Property: Rhino.DocObjects.ViewportInfo.DefaultCameraDirection
Return: Vector3d
Modifiers: static, public
Summary: Default z=up perspective camera direction
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.Camera35mmLensLength
Return: double
Modifiers: public
Summary: This property assumes the camera is horizontal and crop the film rather than the image when the aspect of the frustum is not 36/24.  (35mm film is 36mm wide and 24mm high.) Setting preserves camera location, changes the frustum, but maintains the frustum's aspect.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.CameraAngle
Return: double
Modifiers: public
Summary: Gets or sets the 1/2 smallest angle. See <b>GetCameraAngles</b> for more information.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.CameraDirection
Return: Vector3d
Modifiers: public
Summary: Gets the direction that the camera faces.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.CameraLocation
Return: Point3d
Modifiers: public
Summary: Gets the camera location (position) point.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.CameraUp
Return: Vector3d
Modifiers: public
Summary: Gets the camera up vector.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.CameraX
Return: Vector3d
Modifiers: public
Summary: Gets the unit "to the right" vector.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.CameraY
Return: Vector3d
Modifiers: public
Summary: Gets the unit "up" vector.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.CameraZ
Return: Vector3d
Modifiers: public
Summary: Gets the unit vector in -CameraDirection.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumAspect
Return: double
Modifiers: public
Summary: Setting FrustumAspect changes the larger of the frustum's width/height so that the resulting value of width/height matches the requested aspect.  The camera angle is not changed.  If you change the shape of the view port with a call SetScreenPort(), then you generally want to call SetFrustumAspect() with the value returned by GetScreenPortAspect().
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.FrustumBottom
Return: double
Modifiers: public
Summary: Gets the frustum bottom value. This is -top if the frustum has a horizontal symmetry axis.
This number is usually negative. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumBottomPlane
Return: Plane
Modifiers: public
Summary: Gets the frustum bottom plane that separates visible from off-screen.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumCenter
Return: Point3d
Modifiers: public
Summary: Gets the frustum center point.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumFar
Return: double
Modifiers: public
Summary: Gets the frustum far-cutting value.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumFarPlane
Return: Plane
Modifiers: public
Summary: Gets far clipping plane if camera and frustum are valid.  The plane's frame is the same as the camera's frame.  The origin is located at the intersection of the camera direction ray and the far clipping plane. The plane's normal points into the frustum towards the camera location.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumHeight
Return: double
Modifiers: public
Summary: Gets the frustum height. This is <b>FrustumTop</b> - <b>FrustumBottom</b> .
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumLeft
Return: double
Modifiers: public
Summary: Gets the frustum left value. This is -right if the frustum has a vertical symmetry axis.
This number is usually negative. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumLeftPlane
Return: Plane
Modifiers: public
Summary: Gets the frustum left plane that separates visible from off-screen.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumMaximumDiameter
Return: double
Modifiers: public
Summary: Gets the frustum maximum diameter, or the maximum between <b>FrustumWidth</b> and <b>FrustumHeight</b> .
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumMinimumDiameter
Return: double
Modifiers: public
Summary: Gets the frustum minimum diameter, or the minimum between <b>FrustumWidth</b> and <b>FrustumHeight</b> .
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumNear
Return: double
Modifiers: public
Summary: Gets the frustum near-cutting value.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumNearPlane
Return: Plane
Modifiers: public
Summary: Gets near clipping plane if camera and frustum are valid.  The plane's frame is the same as the camera's frame.  The origin is located at the intersection of the camera direction ray and the near clipping plane. The plane's normal points out of the frustum towards the camera location.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumRight
Return: double
Modifiers: public
Summary: Gets the frustum right value. This is -left if the frustum has a vertical symmetry axis.
This number is usually positive. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumRightPlane
Return: Plane
Modifiers: public
Summary: Gets the frustum right plane that separates visible from off-screen.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumTop
Return: double
Modifiers: public
Summary: Gets the frustum top value. This is -bottom if the frustum has a horizontal symmetry axis.
This number is usually positive. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumTopPlane
Return: Plane
Modifiers: public
Summary: Gets the frustum top plane that separates visible from off-screen.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.FrustumWidth
Return: double
Modifiers: public
Summary: Gets the frustum width. This is <b>FrustumRight</b> - <b>FrustumLeft</b> .
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.Id
Return: Guid
Modifiers: public
Summary: Sets the viewport's id to the value used to uniquely identify this viewport. There is no approved way to change the viewport id once it is set in order to maintain consistency across multiple viewports and those routines that manage them.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.IsCameraDirectionLocked
Return: bool
Modifiers: public
Summary: Gets or sets a value that indicates whether the direction that the camera faces is unmodifiable.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsCameraLocationLocked
Return: bool
Modifiers: public
Summary: Gets or sets a value that indicates whether the camera location is unmodifiable.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsCameraUpLocked
Return: bool
Modifiers: public
Summary: Gets or sets a value that indicates whether the camera up vector is unmodifiable.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsFrustumLeftRightSymmetric
Return: bool
Modifiers: public
Summary: Gets or sets a value that indicates whether the camera frustum has a vertical symmetry axis.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsFrustumTopBottomSymmetric
Return: bool
Modifiers: public
Summary: Gets or sets a value that indicates whether the camera frustum has a horizontal symmetry axis.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsParallelProjection
Return: bool
Modifiers: public
Summary: Get or set whether this projection is parallel.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsPerspectiveProjection
Return: bool
Modifiers: public
Summary: Get or set whether this projection is perspective.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.IsTwoPointPerspectiveProjection
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this projection is a two-point perspective.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.IsValidCamera
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the camera is valid.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.IsValidFrustum
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether the frustum is valid.
Accessors: get

Property: Rhino.DocObjects.ViewportInfo.PerspectiveMinNearDist
Return: double
Modifiers: public
Summary: Expert user function to control the minimum value of near when perspective projections are being used.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.PerspectiveMinNearOverFar
Return: double
Modifiers: public
Summary: Expert user function to control the minimum ratio of near/far when perspective projections are begin used.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.ScreenPort
Return: Rectangle
Modifiers: public
Summary: Get or set the screen port. <b>SetScreenPort(System.Drawing.Rectangle)</b> and <b>GetScreenPort()</b>
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.ScreenPortAspect
Return: double
Modifiers: public
Summary: Gets the screen aspect ratio.
This is width / height. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.ViewportInfo.TargetPoint
Return: Point3d
Modifiers: public
Summary: The current value of the target point.  This point does not play a role in the view projection calculations.  It can be used as a fixed point when changing the camera so the visible regions of the before and after frustums both contain the region of interest. The default constructor sets this point on ON_3dPoint::UnsetPoint. You must explicitly call one SetTargetPoint() functions to set the target point.
Accessors: get set

Property: Rhino.DocObjects.ViewportInfo.ViewScale
Return: SizeF
Modifiers: public
Summary: Applies scaling factors to parallel projection clipping coordinates by setting the m_clip_mod transformation. If you want to compress the view projection across the viewing plane, then set x = 0.5, y = 1.0, and z = 1.0.
Accessors: get set

Method: Rhino.DocObjects.ViewportInfo.CalculateCameraRotationAngle(Vector3d direction, Vector3d up)
Return: double
Modifiers: public, static
Summary: Calculates the camera rotation angle.
Parameter: direction (Vector3d)
Parameter Summary: The camera direction.
Parameter: up (Vector3d)
Parameter Summary: The camera up direction.

Method: Rhino.DocObjects.ViewportInfo.CalculateCameraUpDirection(Point3d location, Vector3d direction, double angle)
Return: Vector3d
Modifiers: public, static
Summary: Calculates the camera up direction.
Parameter: location (Point3d)
Parameter Summary: The camera location.
Parameter: direction (Vector3d)
Parameter Summary: The camera direction.
Parameter: angle (double)
Parameter Summary: The camera rotation angle in radians.

Method: Rhino.DocObjects.ViewportInfo.ChangeToParallelProjection(bool symmetricFrustum)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective.  It will make common additional adjustments to the frustum and camera location so the resulting views are similar.  The camera direction and target point are not be changed. If the current projection is parallel and symmetricFrustum, FrustumIsLeftRightSymmetric() and FrustumIsTopBottomSymmetric() are all equal, then no changes are made and True is returned.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.

Method: Rhino.DocObjects.ViewportInfo.ChangeToParallelReflectedProjection()
Return: bool
Modifiers: public
Summary: When a viewport is set to Parallel Reflected projection, the geometry on the ceiling is shown as if it is mirrored to the floor below.

Method: Rhino.DocObjects.ViewportInfo.ChangeToPerspectiveProjection(double targetDistance, bool symmetricFrustum, double lensLength)
Return: bool
Modifiers: public
Summary: Use this function to change projections of valid viewports from parallel to perspective.  It will make common additional adjustments to the frustum and camera location so the resulting views are similar.  The camera direction and target point are not changed. If the current projection is perspective and symmetricFrustum, IsFrustumIsLeftRightSymmetric, and IsFrustumIsTopBottomSymmetric are all equal, then no changes are made and True is returned.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: symmetricFrustum (bool)
Parameter Summary: True if you want the resulting frustum to be symmetric.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.DocObjects.ViewportInfo.ChangeToSymmetricFrustum(bool isLeftRightSymmetric, bool isTopBottomSymmetric, double targetDistance)
Return: bool
Modifiers: public
Summary: If needed, adjusts the current frustum so it has the specified symmetries and adjust the camera location so the target plane remains visible.
Parameter: isLeftRightSymmetric (bool)
Parameter Summary: If true, the frustum will be adjusted so left = -right.
Parameter: isTopBottomSymmetric (bool)
Parameter Summary: If true, the frustum will be adjusted so top = -bottom.
Parameter: targetDistance (double)
Parameter Summary: If projection is not perspective or target_distance is RhinoMath.UnsetValue, then this parameter is ignored. If the projection is perspective and targetDistance is not RhinoMath.UnsetValue, then it must be > 0.0 and it is used to determine which plane in the old frustum will appear unchanged in the new frustum.

Method: Rhino.DocObjects.ViewportInfo.ChangeToTwoPointPerspectiveProjection(double targetDistance, Vector3d up, double lensLength)
Return: bool
Modifiers: public
Summary: Changes projections of valid viewports to a two point perspective.  It will make common additional adjustments to the frustum and camera location and direction so the resulting views are similar. If the current projection is perspective and IsFrustumIsLeftRightSymmetric is True and IsFrustumIsTopBottomSymmetric is false, then no changes are made and True is returned.
Parameter: targetDistance (double)
Parameter Summary: If RhinoMath.UnsetValue this parameter is ignored.  Otherwise it must be > 0 and indicates which plane in the current view frustum should be preserved.
Parameter: up (Vector3d)
Parameter Summary: The locked up direction. Pass Vector3d.Zero if you want to use the world axis direction that is closest to the current up direction. Pass CameraY() if you want to preserve the current up direction.
Parameter: lensLength (double)
Parameter Summary: (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective projections. If the current projection is perspective or lens_length is <= 0.0, then this parameter is ignored.

Method: Rhino.DocObjects.ViewportInfo.DollyCamera(Vector3d dollyVector)
Return: bool
Modifiers: public
Summary: DollyCamera() does not update the frustum's clipping planes. To update the frustum's clipping planes call DollyFrustum(d) with d = dollyVector o cameraFrameZ.  To convert screen locations into a dolly vector, use GetDollyCameraVector(). Does not update frustum.  To update frustum use DollyFrustum(d) with d = dollyVector o cameraFrameZ.
Parameter: dollyVector (Vector3d)
Parameter Summary: dolly vector in world coordinates.

Method: Rhino.DocObjects.ViewportInfo.DollyExtents(BoundingBox cameraCoordinateBoundingBox, double border)
Return: bool
Modifiers: public
Summary: Dolly the camera location and so that the view frustum contains all of the document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.
Parameter: cameraCoordinateBoundingBox (BoundingBox)
Parameter Summary: 
Parameter: border (double)
Parameter Summary: If border > 1.0, then the frustum in enlarged by this factor to provide a border around the view.  1.1 works well for parallel projections; 0.0 is suggested for perspective projections.

Method: Rhino.DocObjects.ViewportInfo.DollyExtents(IEnumerable<GeometryBase> geometry, double border)
Return: bool
Modifiers: public
Summary: Dolly the camera location and so that the view frustum contains all of the document objects that can be seen in view. If the projection is perspective, the camera angle is not changed.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: 
Parameter: border (double)
Parameter Summary: If border > 1.0, then the frustum in enlarged by this factor to provide a border around the view.  1.1 works well for parallel projections; 0.0 is suggested for perspective projections.

Method: Rhino.DocObjects.ViewportInfo.DollyFrustum(double dollyDistance)
Return: bool
Modifiers: public
Summary: Moves the frustum clipping planes.
Parameter: dollyDistance (double)
Parameter Summary: Distance to move in camera direction.

Method: Rhino.DocObjects.ViewportInfo.Extents(double halfViewAngleRadians, BoundingBox bbox)
Return: bool
Modifiers: public
Summary: Extends this viewport view to include a bounding box.
Use Extents() as a quick way to set a viewport to so that bounding     volume is inside of a viewports frustum.     The view angle is used to determine the position of the camera. | Since: 5.0 | Parameter: halfViewAngleRadians (double) | Parameter Summary: 1/2 smallest subtended view angle in radians. | Parameter: bbox (BoundingBox) | Parameter Summary: A bounding box in 3d world coordinates.

Method: Rhino.DocObjects.ViewportInfo.Extents(double halfViewAngleRadians, Sphere sphere)
Return: bool
Modifiers: public
Summary: Extends this viewport view to include a sphere.
Use Extents() as a quick way to set a viewport to so that bounding     volume is inside of a viewports frustum.     The view angle is used to determine the position of the camera. | Since: 5.0 | Parameter: halfViewAngleRadians (double) | Parameter Summary: 1/2 smallest subtended view angle in radians. | Parameter: sphere (Sphere) | Parameter Summary: A sphere in 3d world coordinates.

Method: Rhino.DocObjects.ViewportInfo.FrustumCenterPoint(double targetDistance)
Return: Point3d
Modifiers: public
Summary: Return a point on the central axis of the view frustum. This point is a good choice for a general purpose target point.
Parameter: targetDistance (double)
Parameter Summary: If targetDistance > 0.0, then the distance from the returned point to the camera plane will be targetDistance. Note that if the frustum is not symmetric, the distance from the returned point to the camera location will be larger than targetDistance. If targetDistance == ON_UNSET_VALUE and the frustum is valid with near > 0.0, then 0.5*(near + far) will be used as the targetDistance.

Method: Rhino.DocObjects.ViewportInfo.GetBoundingBoxDepth(BoundingBox bbox, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a bounding box. This function ignores the current value of the viewport's near and far settings. If the viewport is a perspective projection, the it intersects the semi infinite frustum volume with the bounding box and returns the near and far distances of the intersection.  If the viewport is a parallel projection, it intersects the infinite view region with the bounding box and returns the near and far distances of the projection.
Parameter: bbox (BoundingBox)
Parameter Summary: The bounding box to sample.
Parameter: nearDistance (double)
Parameter Summary: Near distance of the box. This value can be zero or negative when the camera location is inside box.
Parameter: farDistance (double)
Parameter Summary: Far distance of the box. This value can be equal to near_dist, zero or negative when the camera location is in front of the bounding box.

Method: Rhino.DocObjects.ViewportInfo.GetCameraAngles(out double halfDiagonalAngleRadians, out double halfVerticalAngleRadians, out double halfHorizontalAngleRadians)
Return: bool
Modifiers: public
Summary: Gets the field of view angles.
Parameter: halfDiagonalAngleRadians (double)
Parameter Summary: 1/2 of diagonal subtended angle. This out parameter is assigned during this call.
Parameter: halfVerticalAngleRadians (double)
Parameter Summary: 1/2 of vertical subtended angle. This out parameter is assigned during this call.
Parameter: halfHorizontalAngleRadians (double)
Parameter Summary: 1/2 of horizontal subtended angle. This out parameter is assigned during this call.

Method: Rhino.DocObjects.ViewportInfo.GetCameraFrame(out Point3d location, out Vector3d cameraX, out Vector3d cameraY, out Vector3d cameraZ)
Return: bool
Modifiers: public
Summary: Gets location and vectors of this camera.
Parameter: location (Point3d)
Parameter Summary: An out parameter that will be filled with a point during the call.
Parameter: cameraX (Vector3d)
Parameter Summary: An out parameter that will be filled with the X vector during the call.
Parameter: cameraY (Vector3d)
Parameter Summary: An out parameter that will be filled with the Y vector during the call.
Parameter: cameraZ (Vector3d)
Parameter Summary: An out parameter that will be filled with the Z vector during the call.

Method: Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(int screenX0, int screenY0, int screenX1, int screenY1, double projectionPlaneDistance)
Return: Vector3d
Modifiers: public
Summary: Gets a world coordinate dolly vector that can be passed to DollyCamera().
Parameter: screenX0 (int)
Parameter Summary: Screen coordinates of start point.
Parameter: screenY0 (int)
Parameter Summary: Screen coordinates of start point.
Parameter: screenX1 (int)
Parameter Summary: Screen coordinates of end point.
Parameter: screenY1 (int)
Parameter Summary: Screen coordinates of end point.
Parameter: projectionPlaneDistance (double)
Parameter Summary: Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).

Method: Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(System.Drawing.Point screen0, System.Drawing.Point screen1, double projectionPlaneDistance)
Return: Vector3d
Modifiers: public
Summary: Gets a world coordinate dolly vector that can be passed to DollyCamera().
Parameter: screen0 (System.Drawing.Point)
Parameter Summary: Start point.
Parameter: screen1 (System.Drawing.Point)
Parameter Summary: End point.
Parameter: projectionPlaneDistance (double)
Parameter Summary: Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).

Method: Rhino.DocObjects.ViewportInfo.GetFarPlaneCorners()
Return: Point3d[]
Modifiers: public
Summary: Gets the corners of far clipping plane rectangle. 4 points are returned in the order of bottom left, bottom right, top left, top right.

Method: Rhino.DocObjects.ViewportInfo.GetFramePlaneCorners(double depth)
Return: Point3d[]
Modifiers: public
Summary: Gets the corners of the frame plane rectangle at specified depth. 4 points are returned in the order of bottom left, bottom right, top left, top right.
Parameter: depth (double)
Parameter Summary: Distance from camera location.

Method: Rhino.DocObjects.ViewportInfo.GetFrustum(out double left, out double right, out double bottom, out double top, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets the view frustum.
Parameter: left (double)
Parameter Summary: A left value that will be filled during the call.
Parameter: right (double)
Parameter Summary: A right value that will be filled during the call.
Parameter: bottom (double)
Parameter Summary: A bottom value that will be filled during the call.
Parameter: top (double)
Parameter Summary: A top value that will be filled during the call.
Parameter: nearDistance (double)
Parameter Summary: A near distance value that will be filled during the call.
Parameter: farDistance (double)
Parameter Summary: A far distance value that will be filled during the call.

Method: Rhino.DocObjects.ViewportInfo.GetFrustumLine(double screenX, double screenY)
Return: Line
Modifiers: public
Summary: Gets the world coordinate line in the view frustum that projects to a point on the screen.
Parameter: screenX (double)
Parameter Summary: (screenx,screeny) = screen location.
Parameter: screenY (double)
Parameter Summary: (screenx,screeny) = screen location.

Method: Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.Point screenPoint)
Return: Line
Modifiers: public
Summary: Gets the world coordinate line in the view frustum that projects to a point on the screen.
Parameter: screenPoint (System.Drawing.Point)
Parameter Summary: screen location

Method: Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.PointF screenPoint)
Return: Line
Modifiers: public
Summary: Gets the world coordinate line in the view frustum that projects to a point on the screen.
Parameter: screenPoint (System.Drawing.PointF)
Parameter Summary: screen location

Method: Rhino.DocObjects.ViewportInfo.GetNearPlaneCorners()
Return: Point3d[]
Modifiers: public
Summary: Gets the corners of near clipping plane rectangle. 4 points are returned in the order of bottom left, bottom right, top left, top right.

Method: Rhino.DocObjects.ViewportInfo.GetPointDepth(Point3d point, out double distance)
Return: bool
Modifiers: public
Summary: Gets the clipping distance of a point. This function ignores the current value of the viewport's near and far settings. If the viewport is a perspective projection, then it intersects the semi infinite frustum volume with the bounding box and returns the near and far distances of the intersection. If the viewport is a parallel projection, it intersects the infinite view region with the bounding box and returns the near and far distances of the projection.
Parameter: point (Point3d)
Parameter Summary: A point to measure.
Parameter: distance (double)
Parameter Summary: distance of the point (can be < 0)

Method: Rhino.DocObjects.ViewportInfo.GetScreenPort()
Return: System.Drawing.Rectangle
Modifiers: public
Summary: Gets the location of viewport in pixels. See documentation for <b>SetScreenPort(int, int, int, int, int, int)</b> .

Method: Rhino.DocObjects.ViewportInfo.GetScreenPort(out int near, out int far)
Return: System.Drawing.Rectangle
Modifiers: public
Summary: Gets the location of viewport in pixels.
See value meanings in SetScreenPort. | Since: 5.0 | Parameter: near (int) | Parameter Summary: The near value. This out parameter is assigned during the call. | Parameter: far (int) | Parameter Summary: The far value. This out parameter is assigned during the call.

Method: Rhino.DocObjects.ViewportInfo.GetScreenPortLocation(out int left, out int top, out int right, out int bottom)
Return: void
Modifiers: public
Summary: Get the location of viewport in pixels (non System.Drawing version of GetScreenPort)

Method: Rhino.DocObjects.ViewportInfo.GetSphereDepth(Sphere sphere, out double nearDistance, out double farDistance)
Return: bool
Modifiers: public
Summary: Gets near and far clipping distances of a bounding sphere.
Parameter: sphere (Sphere)
Parameter Summary: The sphere to sample.
Parameter: nearDistance (double)
Parameter Summary: Near distance of the sphere (can be < 0)
Parameter: farDistance (double)
Parameter Summary: Far distance of the sphere (can be equal to near_dist)

Method: Rhino.DocObjects.ViewportInfo.GetViewScale()
Return: double
Modifiers: public
Summary: Get scaling applied to this viewport projection. Reflected ceiling projections will return the values 1,1,-1

Method: Rhino.DocObjects.ViewportInfo.GetWorldToScreenScale(Point3d pointInFrustum)
Return: double
Modifiers: public
Summary: Gets the scale factor from point in frustum to screen scale.
Parameter: pointInFrustum (Point3d)
Parameter Summary: point in viewing frustum.

Method: Rhino.DocObjects.ViewportInfo.GetXform(CoordinateSystem sourceSystem, CoordinateSystem destinationSystem)
Return: Transform
Modifiers: public
Summary: Computes a transform from a coordinate system to another.
Parameter: sourceSystem (CoordinateSystem)
Parameter Summary: The coordinate system to map from.
Parameter: destinationSystem (CoordinateSystem)
Parameter Summary: The coordinate system to map into.

Method: Rhino.DocObjects.ViewportInfo.RotateCamera(double rotationAngleRadians, Vector3d rotationAxis, Point3d rotationCenter)
Return: bool
Modifiers: public
Summary: Rotates the view camera.
Parameter: rotationAngleRadians (double)
Parameter Summary: The amount to rotate expressed in radians.
Parameter: rotationAxis (Vector3d)
Parameter Summary: The axis to rotate around.
Parameter: rotationCenter (Point3d)
Parameter Summary: The point to rotate around.

Method: Rhino.DocObjects.ViewportInfo.SetCameraDirection(Vector3d direction)
Return: bool
Modifiers: public
Summary: Sets the direction that the camera faces.
Parameter: direction (Vector3d)
Parameter Summary: A new direction.

Method: Rhino.DocObjects.ViewportInfo.SetCameraLocation(Point3d location)
Return: bool
Modifiers: public
Summary: Sets the camera location (position) point.

Method: Rhino.DocObjects.ViewportInfo.SetCameraUp(Vector3d up)
Return: bool
Modifiers: public
Summary: Sets the camera up vector.
Parameter: up (Vector3d)
Parameter Summary: A new direction.

Method: Rhino.DocObjects.ViewportInfo.SetFrustum(double left, double right, double bottom, double top, double nearDistance, double farDistance)
Return: bool
Modifiers: public
Summary: Sets the view frustum. If FrustumSymmetryIsLocked() is true and left != -right or bottom != -top, then they will be adjusted so the resulting frustum is symmetric.
Parameter: left (double)
Parameter Summary: A new left value.
Parameter: right (double)
Parameter Summary: A new right value.
Parameter: bottom (double)
Parameter Summary: A new bottom value.
Parameter: top (double)
Parameter Summary: A new top value.
Parameter: nearDistance (double)
Parameter Summary: A new near distance value.
Parameter: farDistance (double)
Parameter Summary: A new far distance value.

Method: Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(BoundingBox boundingBox)
Return: bool
Modifiers: public
Summary: Sets the frustum near and far using a bounding box.
Parameter: boundingBox (BoundingBox)
Parameter Summary: A bounding box to use.

Method: Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(double nearDistance, double farDistance, double minNearDistance, double minNearOverFar, double targetDistance)
Return: bool
Modifiers: public
Summary: Sets near and far clipping distance subject to constraints.
Parameter: nearDistance (double)
Parameter Summary: (>0) desired near clipping distance.
Parameter: farDistance (double)
Parameter Summary: (>near_dist) desired near clipping distance.
Parameter: minNearDistance (double)
Parameter Summary: If min_near_dist <= 0.0, it is ignored. If min_near_dist > 0 and near_dist < min_near_dist, then the frustum's near_dist will be increased to min_near_dist.
Parameter: minNearOverFar (double)
Parameter Summary: If min_near_over_far <= 0.0, it is ignored. If near_dist < far_dist*min_near_over_far, then near_dist is increased and/or far_dist is decreased so that near_dist = far_dist*min_near_over_far. If near_dist < target_dist < far_dist, then near_dist near_dist is increased and far_dist is decreased so that projection precision will be good at target_dist. Otherwise, near_dist is simply set to far_dist*min_near_over_far.
Parameter: targetDistance (double)
Parameter Summary: If target_dist <= 0.0, it is ignored. If target_dist > 0, it is used as described in the description of the min_near_over_far parameter.

Method: Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(double nearDistance, double farDistance)
Return: bool
Modifiers: public
Summary: Sets the frustum near and far distances using two values.
Parameter: nearDistance (double)
Parameter Summary: The new near distance.
Parameter: farDistance (double)
Parameter Summary: The new far distance.

Method: Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(Point3d center, double radius)
Return: bool
Modifiers: public
Summary: Sets the frustum near and far using a center point and radius.
Parameter: center (Point3d)
Parameter Summary: A center point.
Parameter: radius (double)
Parameter Summary: A radius value.

Method: Rhino.DocObjects.ViewportInfo.SetScreenPort(int left, int right, int bottom, int top, int near, int far)
Return: bool
Modifiers: public
Summary: Location of viewport in pixels. These are provided so you can set the port you are using and get the appropriate transformations to and from screen space. // For a Windows window /      int width = width of window client area in pixels; /      int height = height of window client area in pixels; /      port_left = 0; /      port_right = width; /      port_top = 0; /      port_bottom = height; /      port_near = 0; /      port_far = 1; /      SetScreenPort( port_left, port_right, /                     port_bottom, port_top, /                     port_near, port_far );
Parameter: left (int)
Parameter Summary: A left value.
Parameter: right (int)
Parameter Summary: A left value. (port_left != port_right)
Parameter: bottom (int)
Parameter Summary: A bottom value.
Parameter: top (int)
Parameter Summary: A top value. (port_top != port_bottom)
Parameter: near (int)
Parameter Summary: A near value.
Parameter: far (int)
Parameter Summary: A far value.

Method: Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle windowRectangle, int near, int far)
Return: bool
Modifiers: public
Summary: Gets the location of viewport in pixels.
See value meanings in SetScreenPort. | Since: 5.0 | Parameter: windowRectangle (System.Drawing.Rectangle) | Parameter Summary: A new rectangle. | Parameter: near (int) | Parameter Summary: The near value. | Parameter: far (int) | Parameter Summary: The far value.

Method: Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle windowRectangle)
Return: bool
Modifiers: public
Summary: Gets the location of viewport in pixels.
See value meanings in SetScreenPort. | Since: 5.0 | Parameter: windowRectangle (System.Drawing.Rectangle) | Parameter Summary: A new rectangle.

Method: Rhino.DocObjects.ViewportInfo.SetViewScale(double scaleX, double scaleY, double scaleZ)
Return: void
Modifiers: public
Summary: Set scaling applied for this viewport projection. For reflected projections, call with values 1,1,-1

Method: Rhino.DocObjects.ViewportInfo.TargetDistance(bool useFrustumCenterFallback)
Return: double
Modifiers: public
Summary: Gets the distance from the target point to the camera plane. Note that if the frustum is not symmetric, then this distance is shorter than the distance from the target to the camera location.
Parameter: useFrustumCenterFallback (bool)
Parameter Summary: If bUseFrustumCenterFallback is False and the target point is not valid, then ON_UNSET_VALUE is returned. If bUseFrustumCenterFallback is True and the frustum is valid and current target point is not valid or is behind the camera, then 0.5*(near + far) is returned.

Method: Rhino.DocObjects.ViewportInfo.TransformCamera(Transform xform)
Return: bool
Modifiers: public
Summary: Transforms the view camera location, direction, and up.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to camera.

Method: Rhino.DocObjects.ViewportInfo.UnlockCamera()
Return: void
Modifiers: public
Summary: Unlocks the camera vectors and location.

Method: Rhino.DocObjects.ViewportInfo.UnlockFrustumSymmetry()
Return: void
Modifiers: public
Summary: Unlocks frustum horizontal and vertical symmetries.

Method: Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(int left, int top, int right, int bottom)
Return: bool
Modifiers: public
Summary: Zooms to a screen zone.
View changing from screen input points. Handy for     using a mouse to manipulate a view.     ZoomToScreenRect() may change camera and frustum settings. | Since: 5.0 | Parameter: left (int) | Parameter Summary: Screen coordinate. | Parameter: top (int) | Parameter Summary: Screen coordinate. | Parameter: right (int) | Parameter Summary: Screen coordinate. | Parameter: bottom (int) | Parameter Summary: Screen coordinate.

Method: Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(System.Drawing.Rectangle windowRectangle)
Return: bool
Modifiers: public
Summary: Zooms to a screen zone.
View changing from screen input points. Handy for     using a mouse to manipulate a view.     ZoomToScreenRect() may change camera and frustum settings. | Since: 5.0 | Parameter: windowRectangle (System.Drawing.Rectangle) | Parameter Summary: The new window rectangle in screen space.

Class: Rhino.DocObjects.Worksession
Summary: Manages a list of models that are being used as reference geometry.

Property: Rhino.DocObjects.Worksession.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document that owns this worksession.
Accessors: get

Property: Rhino.DocObjects.Worksession.FileName
Return: string
Modifiers: public
Summary: Returns the path to the open worksession, or .rws, file. If there is no worksession file open, or the active worksession has not yet been saved, then None is returned.
Accessors: get

Property: Rhino.DocObjects.Worksession.ModelCount
Return: int
Modifiers: public
Summary: Returns the number of models in the worksession. The active model will included in this count whether or not it has been saved.
Accessors: get

Property: Rhino.DocObjects.Worksession.ModelPaths
Return: string[]
Modifiers: public
Summary: Returns the paths to the models used by the worksession. If the active model has not been saved, then it will not be included in the output array.
Accessors: get

Property: Rhino.DocObjects.Worksession.RuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Unique serial number for the worksession while the application is running. This is not a persistent value.
Accessors: get

Method: Rhino.DocObjects.Worksession.FileNameFromRuntimeSerialNumber(uint runtimeSerialNumber)
Return: string
Modifiers: public, static
Summary: Returns the path to the open worksession, or .rws, file. If there is no worksession file open, or the active worksession has not yet been saved, then None is returned.

Method: Rhino.DocObjects.Worksession.ModelPathFromSerialNumber(uint modelSerialNumber)
Return: string
Modifiers: public
Summary: Returns the path to a model, used by the worksession, given a reference model serial number
Parameter: modelSerialNumber (uint)
Parameter Summary: The reference model serial number.

# Namespace: Rhino.DocObjects.Custom

Class: Rhino.DocObjects.Custom.ClassIdAttribute
Summary: Useful for legacy UserData

Constructor: Rhino.DocObjects.Custom.ClassIdAttribute.ClassIdAttribute(string id)
Summary: Initializes a class id attribute.

Property: Rhino.DocObjects.Custom.ClassIdAttribute.Id
Return: Guid
Modifiers: public
Summary: Gets the associated style.
Accessors: get set

Class: Rhino.DocObjects.Custom.CustomBrepObject

Constructor: Rhino.DocObjects.Custom.CustomBrepObject.CustomBrepObject()

Constructor: Rhino.DocObjects.Custom.CustomBrepObject.CustomBrepObject(Brep brep)

Method: Rhino.DocObjects.Custom.CustomBrepObject.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Class: Rhino.DocObjects.Custom.CustomCurveObject

Constructor: Rhino.DocObjects.Custom.CustomCurveObject.CustomCurveObject()

Constructor: Rhino.DocObjects.Custom.CustomCurveObject.CustomCurveObject(Curve curve)

Method: Rhino.DocObjects.Custom.CustomCurveObject.Dispose()
Return: void
Modifiers: public, new

Method: Rhino.DocObjects.Custom.CustomCurveObject.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Method: Rhino.DocObjects.Custom.CustomCurveObject.SetCurve(Curve curve)
Return: Curve
Modifiers: protected
Summary: Only for developers who are defining custom subclasses of CurveObject. Directly sets the internal curve geometry for this object.  Note that this function does not work with Rhino's "undo".

Class: Rhino.DocObjects.Custom.CustomGripObject

Constructor: Rhino.DocObjects.Custom.CustomGripObject.CustomGripObject()

Property: Rhino.DocObjects.Custom.CustomGripObject.Index
Return: int
Modifiers: public, new
Accessors: get set

Property: Rhino.DocObjects.Custom.CustomGripObject.OriginalLocation
Return: Point3d
Modifiers: public, new
Accessors: get set

Property: Rhino.DocObjects.Custom.CustomGripObject.Weight
Return: double
Modifiers: public, override
Accessors: get set

Method: Rhino.DocObjects.Custom.CustomGripObject.Dispose()
Return: void
Modifiers: public, new

Method: Rhino.DocObjects.Custom.CustomGripObject.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Method: Rhino.DocObjects.Custom.CustomGripObject.NewLocation()
Return: void
Modifiers: public, virtual

Class: Rhino.DocObjects.Custom.CustomMeshObject

Constructor: Rhino.DocObjects.Custom.CustomMeshObject.CustomMeshObject()

Constructor: Rhino.DocObjects.Custom.CustomMeshObject.CustomMeshObject(Mesh mesh)

Method: Rhino.DocObjects.Custom.CustomMeshObject.Dispose()
Return: void
Modifiers: public, new

Method: Rhino.DocObjects.Custom.CustomMeshObject.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Class: Rhino.DocObjects.Custom.CustomObjectGrips

Constructor: Rhino.DocObjects.Custom.CustomObjectGrips.CustomObjectGrips()

Property: Rhino.DocObjects.Custom.CustomObjectGrips.GripCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Custom.CustomObjectGrips.GripsMoved
Return: bool
Modifiers: public
Summary: If GripsMoved is True if some of the grips have ever been moved GripObject.NewLocation() sets GripsMoved=true.
Accessors: get

Property: Rhino.DocObjects.Custom.CustomObjectGrips.NewLocation
Return: bool
Modifiers: public
Summary: True if some of the grips have been moved. GripObject.NewLocation() sets NewLocation=true.  Derived classes can set NewLocation to False after updating temporary display information.
Accessors: get set

Property: Rhino.DocObjects.Custom.CustomObjectGrips.OwnerObject
Return: RhinoObject
Modifiers: public
Summary: Owner of the grips.
Accessors: get

Method: Rhino.DocObjects.Custom.CustomObjectGrips.Dragging()
Return: bool
Modifiers: public, static
Summary: Determines if grips are currently being dragged.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.RegisterGripsEnabler(TurnOnGripsEventHandler enabler, System.Type customGripsType)
Return: void
Modifiers: public, static

Method: Rhino.DocObjects.Custom.CustomObjectGrips.AddGrip(Rhino.DocObjects.Custom.CustomGripObject grip)
Return: void
Modifiers: protected

Method: Rhino.DocObjects.Custom.CustomObjectGrips.Dispose()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Custom.CustomObjectGrips.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.DocObjects.Custom.CustomObjectGrips.Grip(int index)
Return: CustomGripObject
Modifiers: public

Method: Rhino.DocObjects.Custom.CustomObjectGrips.NeighborGrip(int gripIndex, int dr, int ds, int dt, bool wrap)
Return: GripObject
Modifiers: protected, virtual
Summary: Get neighbors.
Parameter: gripIndex (int)
Parameter Summary: index of grip where the search begins.
Parameter: dr (int)
Parameter Summary: 1 = next grip in the first parameter direction.
-1 = previous grip in the first parameter direction. | Parameter: ds (int) | Parameter Summary: 1 = next grip in the second parameter direction.
-1 = previous grip in the second parameter direction. | Parameter: dt (int) | Parameter Summary: 1 = next grip in the third parameter direction.
-1 = rev grip in the third parameter direction. | Parameter: wrap (bool) | Parameter Summary: If True and object is "closed", the search will wrap.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.NewGeometry()
Return: Rhino.Geometry.GeometryBase
Modifiers: protected, virtual
Summary: If the grips control just one object, then override NewGeometry(). When NewGeometry() is called, return new geometry calculated from the current grip locations. This happens once at the end of a grip drag.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurface()
Return: Rhino.Geometry.NurbsSurface
Modifiers: protected, virtual
Summary: If the grips control a NURBS surface, this returns a pointer to that surface.  You can look at but you must NEVER change this surface.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurfaceGrip(int i, int j)
Return: GripObject
Modifiers: protected, virtual
Summary: If the grips are control points of a NURBS surface, then this gets the index of the grip that controls the (i,j)-th CV.
Parameter: i (int)
Parameter Summary: The index in the first dimension.
Parameter: j (int)
Parameter Summary: The index in the second dimension.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.OnDraw(GripsDrawEventArgs args)
Return: void
Modifiers: protected, virtual
Summary: Draws the grips. In your implementation, override this if you need to draw dynamic elements and then call this base implementation to draw the grips themselves.
Parameter: args (GripsDrawEventArgs)
Parameter Summary: The grips draw event arguments.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.OnReset()
Return: void
Modifiers: protected, virtual
Summary: Resets location of all grips to original spots and cleans up stuff that was created by dynamic dragging.  This is required when dragging is canceled or in the Copy command when grips are "copied". The override should clean up dynamic workspace stuff.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.OnResetMeshes()
Return: void
Modifiers: protected, virtual
Summary: Just before Rhino turns off object grips, it calls this function. If grips have modified any display meshes, they must override this function and restore the meshes to their original states.

Method: Rhino.DocObjects.Custom.CustomObjectGrips.OnUpdateMesh(Rhino.Geometry.MeshType meshType)
Return: void
Modifiers: protected, virtual
Summary: Just before Rhino shades an object with grips on, it calls this method to update the display meshes.  Grips that modify surface or mesh objects must override this function and modify the display meshes here.
Parameter: meshType (Rhino.Geometry.MeshType)
Parameter Summary: The mesh type being updated.

Class: Rhino.DocObjects.Custom.CustomPointObject

Constructor: Rhino.DocObjects.Custom.CustomPointObject.CustomPointObject()

Constructor: Rhino.DocObjects.Custom.CustomPointObject.CustomPointObject(Point point)

Method: Rhino.DocObjects.Custom.CustomPointObject.Dispose()
Return: void
Modifiers: public, new

Method: Rhino.DocObjects.Custom.CustomPointObject.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Class: Rhino.DocObjects.Custom.GripsDrawEventArgs

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.ControlPolygonStyle
Return: int
Modifiers: public
Summary: What kind of line is used to display things like control polygons. 0 = no control polygon,  1 = solid control polygon,  2 = dotted control polygon.
Accessors: get set

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawDynamicStuff
Return: bool
Modifiers: public
Summary: If true, then draw stuff that does not move when grips are dragged, like the control polygon of the "original" curve.
Accessors: get

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawStaticStuff
Return: bool
Modifiers: public
Summary: If true, then draw stuff that moves when grips are dragged, like the curve being bent by a dragged control point.
Accessors: get

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.GripColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.GripStatusCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.LockedGripColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Custom.GripsDrawEventArgs.SelectedGripColor
Return: Color
Modifiers: public
Accessors: get set

Method: Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Line line, GripStatus startStatus, GripStatus endStatus)
Return: void
Modifiers: public
Summary: Draws the lines in a control polygons.
This is an helper function. | Since: 5.0 | Parameter: line (Rhino.Geometry.Line) | Parameter Summary: Line between two grips. | Parameter: startStatus (GripStatus) | Parameter Summary: Grip status at start of line. | Parameter: endStatus (GripStatus) | Parameter Summary: Grip status at end of line.

Method: Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Line line, int startStatus, int endStatus)
Return: void
Modifiers: public
Summary: Draws the lines in a control polygons.
This is an helper function. | Since: 5.0 | Parameter: line (Rhino.Geometry.Line) | Parameter Summary: Line between two grips. | Parameter: startStatus (int) | Parameter Summary: Index of Grip status at start of line. | Parameter: endStatus (int) | Parameter Summary: Index if Grip status at end of line.

Method: Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Point3d start, Rhino.Geometry.Point3d end, int startStatus, int endStatus)
Return: void
Modifiers: public
Summary: Draws the lines in a control polygons.
This is an helper function. | Since: 5.0 | Parameter: start (Rhino.Geometry.Point3d) | Parameter Summary: The point start. | Parameter: end (Rhino.Geometry.Point3d) | Parameter Summary: The point end. | Parameter: startStatus (int) | Parameter Summary: Index of Grip status at start of line defined by start and end. | Parameter: endStatus (int) | Parameter Summary: Index if Grip status at end of line defined by start and end.

Method: Rhino.DocObjects.Custom.GripsDrawEventArgs.GripStatus(int index)
Return: GripStatus
Modifiers: public

Method: Rhino.DocObjects.Custom.GripsDrawEventArgs.RestoreViewportSettings()
Return: void
Modifiers: public

Class: Rhino.DocObjects.Custom.GripStatus

Property: Rhino.DocObjects.Custom.GripStatus.Culled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.DocObjects.Custom.GripStatus.Visible
Return: bool
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Custom.UnknownUserData
Summary: Represents user data with unknown origin.

Constructor: Rhino.DocObjects.Custom.UnknownUserData.UnknownUserData(IntPtr pointerNativeUserData)
Summary: Constructs a new unknown data entity.

Class: Rhino.DocObjects.Custom.UserData
Summary: Provides a base class for custom classes of information which may be attached to geometry or attribute classes.

Constructor: Rhino.DocObjects.Custom.UserData.UserData()
Summary: Initializes a new instance of the UserData class

Property: Rhino.DocObjects.Custom.UserData.Description
Return: string
Modifiers: public, virtual
Summary: Descriptive name of the user data.
Accessors: get

Property: Rhino.DocObjects.Custom.UserData.ShouldWrite
Return: bool
Modifiers: public, virtual
Summary: If you want to save this user data in a 3dm file, override ShouldWrite and return true.  If you do support serialization, you must also override the Read and Write functions.
Accessors: get

Property: Rhino.DocObjects.Custom.UserData.Transform
Return: Transform
Modifiers: public
Summary: Updated if user data is attached to a piece of geometry that is transformed and the virtual OnTransform() is not overridden.  If you override OnTransform() and want Transform to be updated, then call the base class OnTransform() in your override. The default constructor sets Transform to the identity.
Accessors: get set

Method: Rhino.DocObjects.Custom.UserData.Copy(Runtime.CommonObject source, Runtime.CommonObject destination)
Return: void
Modifiers: public, static
Summary: Expert user tool that copies user data that has a positive CopyCount from the source object to a destination object. Generally speaking you don't need to use Copy(). Simply rely on things like the copy constructors to do the right thing.
Parameter: source (Runtime.CommonObject)
Parameter Summary: A source object for the data.
Parameter: destination (Runtime.CommonObject)
Parameter Summary: A destination object for the data.

Method: Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(Runtime.CommonObject objectWithUserData)
Return: System.Guid
Modifiers: public, static
Summary: Moves the user data from objectWithUserData to a temporary data storage identified by the return Guid.  When MoveUserDataFrom returns, the objectWithUserData will not have any user data.
Parameter: objectWithUserData (Runtime.CommonObject)
Parameter Summary: Object with user data attached.

Method: Rhino.DocObjects.Custom.UserData.MoveUserDataTo(Runtime.CommonObject objectToGetUserData, System.Guid id, bool append)
Return: void
Modifiers: public, static
Summary: Moves the user data.
See  for more information. | Since: 5.0 | Parameter: objectToGetUserData (Runtime.CommonObject) | Parameter Summary: Object data source. | Parameter: id (System.Guid) | Parameter Summary: Target. | Parameter: append (bool) | Parameter Summary: If the data should be appended or replaced.

Method: Rhino.DocObjects.Custom.UserData.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.DocObjects.Custom.UserData.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.DocObjects.Custom.UserData.OnDuplicate(UserData source)
Return: void
Modifiers: protected, virtual
Summary: Is called when the object is being duplicated.
Parameter: source (UserData)
Parameter Summary: The source data.

Method: Rhino.DocObjects.Custom.UserData.OnTransform(Geometry.Transform transform)
Return: void
Modifiers: protected, virtual
Summary: Is called when the object associated with this data is transformed. If you override this function, make sure to call the base class if you want the stored Transform to be updated.
Parameter: transform (Geometry.Transform)
Parameter Summary: The transform being applied.

Method: Rhino.DocObjects.Custom.UserData.Read(FileIO.BinaryArchiveReader archive)
Return: bool
Modifiers: protected, virtual
Summary: Reads the content of this data from a stream archive.
Parameter: archive (FileIO.BinaryArchiveReader)
Parameter Summary: An archive.

Method: Rhino.DocObjects.Custom.UserData.Write(FileIO.BinaryArchiveWriter archive)
Return: bool
Modifiers: protected, virtual
Summary: Writes the content of this data to a stream archive.
Parameter: archive (FileIO.BinaryArchiveWriter)
Parameter Summary: An archive.

Class: Rhino.DocObjects.Custom.UserDataList
Summary: Represents a collection of user data.

Property: Rhino.DocObjects.Custom.UserDataList.Count
Return: int
Modifiers: public
Summary: Number of UserData objects in this list.
Accessors: get

Property: Rhino.DocObjects.Custom.UserDataList.this[int index]
Return: UserData
Modifiers: public
Summary: Retrieve through indexer. Read-only access.

Method: Rhino.DocObjects.Custom.UserDataList.Add(UserData userdata)
Return: bool
Modifiers: public
Summary: If the user-data is already in a different UserDataList, it will be removed from that list and added to this list.
Parameter: userdata (UserData)
Parameter Summary: Data element.

Method: Rhino.DocObjects.Custom.UserDataList.Contains(System.Guid userdataId)
Return: bool
Modifiers: public
Summary: Checks for the existence of a specific type of user-data in this list Both .NET and native user-data is checked

Method: Rhino.DocObjects.Custom.UserDataList.Find(System.Type userdataType)
Return: UserData
Modifiers: public
Summary: Finds a specific data type in this regulated collection.
Parameter: userdataType (System.Type)
Parameter Summary: A data type.

Method: Rhino.DocObjects.Custom.UserDataList.GetEnumerator()
Return: IEnumerator<UserData>
Modifiers: public
Summary: Get enumerator for UserDataList

Method: Rhino.DocObjects.Custom.UserDataList.Purge()
Return: void
Modifiers: public
Summary: Removes all user data from this geometry.

Method: Rhino.DocObjects.Custom.UserDataList.Remove(UserData userdata)
Return: bool
Modifiers: public
Summary: Remove the user-data from this list

Class: Rhino.DocObjects.Custom.UserDataListEnumerator
Summary: Enumerator for UserDataList

Constructor: Rhino.DocObjects.Custom.UserDataListEnumerator.UserDataListEnumerator(UserDataList udl)
Summary: Create new UserDataListEnumerator

Property: Rhino.DocObjects.Custom.UserDataListEnumerator.Current
Return: UserData
Modifiers: public
Summary: Get current UserData on the enumerator.
Accessors: get

Method: Rhino.DocObjects.Custom.UserDataListEnumerator.Dispose()
Return: void
Modifiers: public
Summary: Implement Dispose(). NOP.

Method: Rhino.DocObjects.Custom.UserDataListEnumerator.MoveNext()
Return: bool
Modifiers: public
Summary: Advance enumerator to next UserData item.

Method: Rhino.DocObjects.Custom.UserDataListEnumerator.Reset()
Return: void
Modifiers: public
Summary: Reset the enumerator

Class: Rhino.DocObjects.Custom.UserDictionary
Summary: Defines the storage data class for a <b>Rhino.Collections.ArchivableDictionary</b> .

Constructor: Rhino.DocObjects.Custom.UserDictionary.UserDictionary()
Summary: Initializes a new instance of the UserDictionary class

Property: Rhino.DocObjects.Custom.UserDictionary.Description
Return: string
Modifiers: public, override
Summary: Gets the text "RhinoCommon UserDictionary".
Accessors: get

Property: Rhino.DocObjects.Custom.UserDictionary.Dictionary
Return: ArchivableDictionary
Modifiers: public
Summary: Gets the dictionary that is associated with this class.
This dictionary is unique. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.Custom.UserDictionary.ShouldWrite
Return: bool
Modifiers: public, override
Summary: Writes this entity if the count is larger than 0.
Accessors: get

Method: Rhino.DocObjects.Custom.UserDictionary.OnDuplicate(UserData source)
Return: void
Modifiers: protected, override
Summary: Clones the user data.
Parameter: source (UserData)
Parameter Summary: The source data.

Method: Rhino.DocObjects.Custom.UserDictionary.Read(FileIO.BinaryArchiveReader archive)
Return: bool
Modifiers: protected, override
Summary: Is called to read this entity.
Parameter: archive (FileIO.BinaryArchiveReader)
Parameter Summary: An archive.

Method: Rhino.DocObjects.Custom.UserDictionary.Write(FileIO.BinaryArchiveWriter archive)
Return: bool
Modifiers: protected, override
Summary: Is called to write this entity.
Parameter: archive (FileIO.BinaryArchiveWriter)
Parameter Summary: An archive.

# Namespace: Rhino.DocObjects.SnapShots

Class: Rhino.DocObjects.SnapShots.SnapShotsClient
Summary: This is the abstract interface class for all Snapshot clients.

Constructor: Rhino.DocObjects.SnapShots.SnapShotsClient.SnapShotsClient()
Summary: SnapShotsClient constructor

Property: Rhino.DocObjects.SnapShots.SnapShotsClient.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.SnapShots.SnapShotsClient.SerialNumber
Return: int
Modifiers: public
Accessors: get set

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ApplicationCategory()
Return: string
Modifiers: public, static
Summary: Predefined application category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.DocumentCategory()
Return: string
Modifiers: public, static
Summary: Predefined document category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.LayersCategory()
Return: string
Modifiers: public, static
Summary: Predefined layers category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.LightsCategory()
Return: string
Modifiers: public, static
Summary: Predefined lights category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ObjectsCategory()
Return: string
Modifiers: public, static
Summary: Predefined objects category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.RegisterSnapShotClient(SnapShotsClient client)
Return: bool
Modifiers: public, static
Summary: Function used to register snapshots client

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.RenderingCategory()
Return: string
Modifiers: public, static
Summary: Predefined rendering category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ViewsCategory()
Return: string
Modifiers: public, static
Summary: Predefined views category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.AnimateDocument(RhinoDoc doc, double dPos, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop)
Return: bool
Modifiers: public, abstract
Summary: Called for each frame. Starting at 0.0.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: dPos (double)
Parameter Summary: dPos is the current frame. Starting at 0.0.
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.AnimateObject(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, double dPos, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop)
Return: bool
Modifiers: public, abstract
Summary: Called for each frame. Starting at 0.0.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: dPos (double)
Parameter Summary: dPos is the current frame. Starting at 0.0.
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.AnimationStart(RhinoDoc doc, int iFrames)
Return: void
Modifiers: public, abstract
Summary: Called once at the start of an animation.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: iFrames (int)
Parameter Summary: iFrames is the number of frames to be animated.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.AnimationStop(RhinoDoc doc)
Return: bool
Modifiers: public, abstract
Summary: Called once at the end of an animation.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.Category()
Return: string
Modifiers: public, abstract
Summary: The category of this client. Usually one of the above predefined categories like e.g object, rendering or application category

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ClientId()
Return: System.Guid
Modifiers: public, abstract
Summary: The unique id of this client.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.Dispose()
Return: void
Modifiers: public
Summary: SnapShotsClient Dispose

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ExtendBoundingBoxForDocumentAnimation(RhinoDoc doc, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop, ref Rhino.Geometry.BoundingBox bbox)
Return: void
Modifiers: public, abstract
Summary: Called once at the start of an animation. This can be used to extend the scene bounding box to avoid clipping.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.
Parameter: bbox (Rhino.Geometry.BoundingBox)
Parameter Summary: bbox is the current scene bounding box.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ExtendBoundingBoxForObjectAnimation(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop, ref Rhino.Geometry.BoundingBox bbox)
Return: void
Modifiers: public, abstract
Summary: Called once at the start of an animation. This can be used to extend the scene bounding box to avoid clipping.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.
Parameter: bbox (Rhino.Geometry.BoundingBox)
Parameter Summary: bbox is the current scene bounding box.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.IsCurrentModelStateInAnySnapshot(RhinoDoc doc, BinaryArchiveReader archive, SimpleArrayBinaryArchiveReader archive_array, TextLog text_log)
Return: bool
Modifiers: public, abstract
Summary: Called before restoring a snapshot. Warns the user if the current model state is not already saved.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: archive (BinaryArchiveReader)
Parameter Summary: archive is the current state of the model.
Parameter: archive_array (SimpleArrayBinaryArchiveReader)
Parameter Summary: archive_array is a list of client data.
Parameter: text_log (TextLog)
Parameter Summary: text_log is used to list the missing items that cannot be found in the current model.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.IsCurrentModelStateInAnySnapshot(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, BinaryArchiveReader archive, SimpleArrayBinaryArchiveReader archive_array, TextLog text_log)
Return: bool
Modifiers: public, abstract
Summary: Called before restoring a snapshot. Warns the user if the current model state is not already saved.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_object is the current object.
Parameter: archive (BinaryArchiveReader)
Parameter Summary: archive is the current state of the model.
Parameter: archive_array (SimpleArrayBinaryArchiveReader)
Parameter Summary: archive_array is a list of client data.
Parameter: text_log (TextLog)
Parameter Summary: text_log is used to list the missing items that cannot be found in the current model.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.Name()
Return: string
Modifiers: public, abstract
Summary: The client's name.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.ObjectTransformNotification(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, BinaryArchiveReader archive)
Return: bool
Modifiers: public, abstract
Summary: Called for every object that is associated with a snapshot and gets transformed in Rhino. This is getting called for each stored snapshot and gives the client the possibility to update the stored data.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: archive (BinaryArchiveReader)
Parameter Summary: archive is a archive which can be used to update the stored data.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.PlugInId()
Return: System.Guid
Modifiers: public, abstract
Summary: The plug-in id that registers this client.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.PrepareForDocumentAnimation(RhinoDoc doc, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop)
Return: bool
Modifiers: public, abstract
Summary: Called once at the start of an animation.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.PrepareForObjectAnimation(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, BinaryArchiveReader archive_start, BinaryArchiveReader archive_stop)
Return: bool
Modifiers: public, abstract
Summary: Called once at the start of an animation.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: archive_start (BinaryArchiveReader)
Parameter Summary: archive_start is a archive to the data of the starting position.
Parameter: archive_stop (BinaryArchiveReader)
Parameter Summary: archive_stop is a archive to the data of the ending position.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.RestoreDocument(RhinoDoc doc, BinaryArchiveReader archive)
Return: bool
Modifiers: public, abstract
Summary: Called when the user restores a snapshot and SupportDocument() returns true.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document
Parameter: archive (BinaryArchiveReader)
Parameter Summary: archive is the archive to read the data from

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.RestoreObject(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, BinaryArchiveReader archive)
Return: bool
Modifiers: public, abstract
Summary: Called when the user restores a snapshot and SupportsObjects() and SupportsObject(Rhino.DocObjects.RhinoObject doc_object) returns true.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: archive (BinaryArchiveReader)
Parameter Summary: archive is the archive to read the data from.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SaveDocument(RhinoDoc doc, BinaryArchiveWriter archive)
Return: bool
Modifiers: public, abstract
Summary: Called when the user saves a snapshot and SupportDocument() returns true.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document
Parameter: archive (BinaryArchiveWriter)
Parameter Summary: archive is the archive to write the data to

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SaveObject(RhinoDoc doc, Rhino.DocObjects.RhinoObject doc_object, ref Rhino.Geometry.Transform transform, BinaryArchiveWriter archive)
Return: bool
Modifiers: public, abstract
Summary: Called when the user saves a snapshot and SupportsObjects() and SupportsObject(Rhino.DocObjects.RhinoObject doc_object) returns true.
Parameter: doc (RhinoDoc)
Parameter Summary: doc is the current document.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_obj is the current object.
Parameter: transform (Rhino.Geometry.Transform)
Parameter Summary: transform is a transformation matrix. The matrix is set to identity the first time an object is associated with a snapshot. After that the matrix is updated when the object is transformed(scale, rotate etc.).
Parameter: archive (BinaryArchiveWriter)
Parameter Summary: archive is the archive to write the data to.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SnapshotRestored(RhinoDoc doc)
Return: void
Modifiers: public, abstract
Summary: Called after all clients restored their data.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsAnimation()
Return: bool
Modifiers: public, abstract
Summary: Returns True if the client allows animation.

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsDocument()
Return: bool
Modifiers: public, abstract
Summary: Defines if the client supports document user data or not

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsObject(Rhino.DocObjects.RhinoObject doc_object)
Return: bool
Modifiers: public, abstract
Summary: Returns True if the client saves/restores object user data for the given object.
Parameter: doc_object (Rhino.DocObjects.RhinoObject)
Parameter Summary: doc_object is the given object

Method: Rhino.DocObjects.SnapShots.SnapShotsClient.SupportsObjects()
Return: bool
Modifiers: public, abstract
Summary: Returns True if the client saves/restores object user data.

# Namespace: Rhino.DocObjects.Tables

Class: Rhino.DocObjects.Tables.BitmapTable
Summary: Stores the list of bitmaps in a Rhino document.

Property: Rhino.DocObjects.Tables.BitmapTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Image</b> .
Accessors: get

Property: Rhino.DocObjects.Tables.BitmapTable.this[int index]
Return: BitmapEntry
Modifiers: public
Summary: Conceptually, the bitmap table is an array of bitmaps.  The operator[] can be used to get individual bitmaps.

Method: Rhino.DocObjects.Tables.BitmapTable.AddBitmap(string bitmapFilename, bool replaceExisting)
Return: int
Modifiers: public
Summary: Adds a new bitmap with specified name to the bitmap table.
Parameter: bitmapFilename (string)
Parameter Summary: If NULL or empty, then a unique name of the form "Bitmap 01" will be automatically created.
Parameter: replaceExisting (bool)
Parameter Summary: If True and the there is already a bitmap using the specified name, then that bitmap is replaced. If False and there is already a bitmap using the specified name, then -1 is returned.

Method: Rhino.DocObjects.Tables.BitmapTable.Delete(BitmapEntry item)
Return: bool
Modifiers: public, override
Summary: Removes the bitmap from the table.
Parameter: item (BitmapEntry)
Parameter Summary: The item to remove. Null will always return false.

Method: Rhino.DocObjects.Tables.BitmapTable.DeleteBitmap(string bitmapFilename)
Return: bool
Modifiers: public
Summary: Deletes a bitmap.
Parameter: bitmapFilename (string)
Parameter Summary: The bitmap file name.

Method: Rhino.DocObjects.Tables.BitmapTable.ExportToFile(int index, string path)
Return: bool
Modifiers: public
Summary: Writes a bitmap to a file.
Parameter: index (int)
Parameter Summary: The index of the bitmap to be written.
Parameter: path (string)
Parameter Summary: The full path, including file name and extension, name of the file to write.

Method: Rhino.DocObjects.Tables.BitmapTable.ExportToFiles(string directoryPath, int overwrite)
Return: int
Modifiers: public
Summary: Exports all the bitmaps in the table to files.
Parameter: directoryPath (string)
Parameter Summary: full path to the directory where the bitmaps should be saved. If NULL, a dialog is used to interactively get the directory name.
Parameter: overwrite (int)
Parameter Summary: 0 = no, 1 = yes, 2 = ask.

Method: Rhino.DocObjects.Tables.BitmapTable.Find(string name, bool createFile, out string fileName)
Return: BitmapEntry
Modifiers: public
Summary: This function first attempts to find the file with "name" on the disk. If it does find it, "fileName" is set to the full path of the file and the BitmapEntry returned will be null, even if there was a BitmapEntry with "name" in the bitmap table. If the function cannot find the file on the disk, it searches the bitmap table.  If it finds it, the returned BitmapEntry entry will be the entry in the table with that name. Additionally, if "createFile" is true, and an entry is found, the file will be written to the disk and it's full path will be contained in "fileName".
Parameter: name (string)
Parameter Summary: Name of the file to search for including file extension.
Parameter: createFile (bool)
Parameter Summary: If this is true, and the file is not found on the disk but is found in the BitmapTable, then the BitmapEntry will get saved to the Rhino bitmap file cache and fileName will contain the full path to the cached file.
Parameter: fileName (string)
Parameter Summary: The full path to the current location of this file or an empty string if the file was not found and/or not extracted successfully.

Method: Rhino.DocObjects.Tables.BitmapTable.FindIndex(int index)
Return: BitmapEntry
Modifiers: public
Summary: Retrieves a BitmapEntry object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Class: Rhino.DocObjects.Tables.DimStyleTable

Property: Rhino.DocObjects.Tables.DimStyleTable.BuiltInStyles
Return: DimensionStyle[]
Modifiers: public
Summary: Creates an array of default AnnotationStyle objects
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.DimStyle</b> .
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.Current
Return: DimensionStyle
Modifiers: public
Summary: Returns an instance of the current <b>DimensionStyle</b> .
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.CurrentDimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: Do not use. Use the <b>Current</b> property.
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.CurrentId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.CurrentIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTable.this[int index]
Return: DimensionStyle
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.Add(DimensionStyle dimstyle, bool reference)
Return: int
Modifiers: public
Summary: Adds a new DimensionStyle to the document.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: The dimension style to add
Parameter: reference (bool)
Parameter Summary: if True the dimstyle will not be saved in files.

Method: Rhino.DocObjects.Tables.DimStyleTable.Add(string name, bool reference)
Return: int
Modifiers: public
Summary: Adds a new AnnotationStyle to the document. The new AnnotationStyle will be initialized with the current default AnnotationStyle properties.
Parameter: name (string)
Parameter Summary: Name of the new AnnotationStyle. If None or empty, Rhino automatically generates the name.
Parameter: reference (bool)
Parameter Summary: if True the dimstyle will not be saved in files.

Method: Rhino.DocObjects.Tables.DimStyleTable.Add(string name)
Return: int
Modifiers: public
Summary: Adds a new AnnotationStyle to the document. The new AnnotationStyle will be initialized with the current default AnnotationStyle properties.
Parameter: name (string)
Parameter Summary: Name of the new AnnotationStyle. If None or empty, Rhino automatically generates the name.

Method: Rhino.DocObjects.Tables.DimStyleTable.Delete(DimensionStyle item)
Return: bool
Modifiers: public, override
Summary: Removes an annotation style.
Parameter: item (DimensionStyle)
Parameter Summary: The item to remove.

Method: Rhino.DocObjects.Tables.DimStyleTable.Delete(int index, bool quiet)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.Find(string name, bool ignoreDeleted)
Return: DimensionStyle
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.Find(System.Guid styleId, bool ignoreDeleted)
Return: DimensionStyle
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.FindIndex(int index)
Return: DimensionStyle
Modifiers: public
Summary: Retrieves a DimensionStyle object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.DimStyleTable.FindName(string name)
Return: DimensionStyle
Modifiers: public
Summary: Finds the DimensionStyle with a given name and returns it. None is returned if no DimensionStyle is found.
Parameter: name (string)
Parameter Summary: The string to search. Deleted styles are ignored.

Method: Rhino.DocObjects.Tables.DimStyleTable.FindRoot(System.Guid styleId, bool ignoreDeleted)
Return: DimensionStyle
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.GetEnumerator()
Return: IEnumerator<DimensionStyle>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.DimStyleTable.GetUnusedStyleName()
Return: string
Modifiers: public
Summary: Get a unique name for a style that does not already exist in the DimStyle table

Method: Rhino.DocObjects.Tables.DimStyleTable.GetUnusedStyleName(string rootName)
Return: string
Modifiers: public
Summary: Get a unique name for a dimension style that does not already exist in the DimStyle table
Parameter: rootName (string)
Parameter Summary: prefix in name; typically the parent style name

Method: Rhino.DocObjects.Tables.DimStyleTable.Modify(DimensionStyle dimstyle, Geometry.AnnotationBase annotation)
Return: ModifyType
Modifiers: public

Method: Rhino.DocObjects.Tables.DimStyleTable.Modify(DimensionStyle newSettings, int dimstyleIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies dimension style settings.
Parameter: newSettings (DimensionStyle)
Parameter Summary: This information is copied.
Parameter: dimstyleIndex (int)
Parameter Summary: zero based index of dimension to set. Must be in the range 0 <= dimstyleIndex < DimStyleTable.Count.
Parameter: quiet (bool)
Parameter Summary: if true, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.DimStyleTable.Modify(DimensionStyle newSettings, System.Guid dimstyleId, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies dimension style settings.
Parameter: newSettings (DimensionStyle)
Parameter Summary: This information is copied.
Parameter: dimstyleId (System.Guid)
Parameter Summary: Id of dimension style
Parameter: quiet (bool)
Parameter Summary: if true, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.DimStyleTable.SetCurrent(int index, bool quiet)
Return: bool
Modifiers: public
Summary: Sets the <b>Current</b> property.
Parameter: index (int)
Parameter Summary: The index of the current DimStyle.
Parameter: quiet (bool)
Parameter Summary: True if error dialog boxes are disabled. False if they are enabled.

Method: Rhino.DocObjects.Tables.DimStyleTable.SetCurrentDimensionStyleIndex(int index, bool quiet)
Return: bool
Modifiers: public
Summary: Do not use. Use the <b>SetCurrent</b> method.
Parameter: index (int)
Parameter Summary: Do not use.
Parameter: quiet (bool)
Parameter Summary: Do not use.

Class: Rhino.DocObjects.Tables.DimStyleTableEventArgs

Property: Rhino.DocObjects.Tables.DimStyleTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTableEventArgs.EventType
Return: DimStyleTableEventType
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTableEventArgs.Index
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTableEventArgs.NewState
Return: DimensionStyle
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.DimStyleTableEventArgs.OldState
Return: DimensionStyle
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Tables.FontTable
Summary: Font tables store the list of fonts in a Rhino document. The FontTable is now just a wrapper around the DimStyles table.

Property: Rhino.DocObjects.Tables.FontTable.Count
Return: int
Modifiers: public
Summary: Number of fonts in the table.
Accessors: get

Property: Rhino.DocObjects.Tables.FontTable.CurrentIndex
Return: int
Modifiers: public
Summary: At all times, there is a "current" font.  Unless otherwise specified, new dimension objects are assigned to the current font. The current font is never deleted. Returns: Zero based font index of the current font.
Accessors: get

Property: Rhino.DocObjects.Tables.FontTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.FontTable.this[int index]
Return: Font
Modifiers: public
Summary: Gets the font at a position.

Method: Rhino.DocObjects.Tables.FontTable.FindOrCreate(string face, bool bold, bool italic, DimensionStyle template_style)
Return: int
Modifiers: public
Summary: Get a DimensionStyle with the specified characteristics
Parameter: face (string)
Parameter Summary: 
Parameter: bold (bool)
Parameter Summary: 
Parameter: italic (bool)
Parameter Summary: 
Parameter: template_style (DimensionStyle)
Parameter Summary: the settings other than face, bold and italic are copied from the template_style

Method: Rhino.DocObjects.Tables.FontTable.FindOrCreate(string face, bool bold, bool italic)
Return: int
Modifiers: public
Summary: Get a DimensionStyle with the specified characteristics the settings other than face, bold and italic are copied from the current style

Method: Rhino.DocObjects.Tables.FontTable.GetEnumerator()
Return: IEnumerator<Font>
Modifiers: public

Class: Rhino.DocObjects.Tables.GroupTable
Summary: Group tables store the list of groups in a Rhino document.

Property: Rhino.DocObjects.Tables.GroupTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.GroupTable.this[int index]
Return: Group
Modifiers: public
Summary: Conceptually, the group table is an array of groups. The operator[] can be used to get individual groups. A group is either active or deleted and this state is reported by Group.IsDeleted.

Method: Rhino.DocObjects.Tables.GroupTable.Add()
Return: int
Modifiers: public
Summary: Adds a new empty group to the group table.

Method: Rhino.DocObjects.Tables.GroupTable.Add(IEnumerable<Guid> objectIds)
Return: int
Modifiers: public
Summary: Adds a new group to the group table with a set of objects.
Parameter: objectIds (System.Collections.Generic.IEnumerable<Guid>)
Parameter Summary: An array, a list or any enumerable set of object IDs.

Method: Rhino.DocObjects.Tables.GroupTable.Add(string groupName, IEnumerable<Guid> objectIds)
Return: int
Modifiers: public
Summary: Adds a new group to the group table with a set of objects.
Parameter: groupName (string)
Parameter Summary: Name of new group.
Parameter: objectIds (System.Collections.Generic.IEnumerable<Guid>)
Parameter Summary: An array, a list or any enumerable set of object IDs.

Method: Rhino.DocObjects.Tables.GroupTable.Add(string groupName)
Return: int
Modifiers: public
Summary: Adds a new empty group to the group table.
Parameter: groupName (string)
Parameter Summary: name of new group.

Method: Rhino.DocObjects.Tables.GroupTable.AddToGroup(int groupIndex, IEnumerable<Guid> objectIds)
Return: bool
Modifiers: public
Summary: Adds a list of objects to an existing group.
Parameter: groupIndex (int)
Parameter Summary: The group index value.
Parameter: objectIds (System.Collections.Generic.IEnumerable<Guid>)
Parameter Summary: An array, a list or any enumerable set of IDs to objects.

Method: Rhino.DocObjects.Tables.GroupTable.AddToGroup(int groupIndex, System.Guid objectId)
Return: bool
Modifiers: public
Summary: Adds an object to an existing group.
Parameter: groupIndex (int)
Parameter Summary: The group index value.
Parameter: objectId (System.Guid)
Parameter Summary: An ID of an object.

Method: Rhino.DocObjects.Tables.GroupTable.ChangeGroupName(int groupIndex, string newName)
Return: bool
Modifiers: public
Summary: Changes the name of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.
Parameter: newName (string)
Parameter Summary: The new group name.

Method: Rhino.DocObjects.Tables.GroupTable.Delete(Group item)
Return: bool
Modifiers: public, override

Method: Rhino.DocObjects.Tables.GroupTable.Delete(int groupIndex)
Return: bool
Modifiers: public
Summary: Deletes a group from this table.
Deleted groups are kept in the runtime group table so that undo       will work with groups. Call IsDeleted() to determine if a group is deleted. | Since: 5.0 | Parameter: groupIndex (int) | Parameter Summary: An group index to be deleted.

Method: Rhino.DocObjects.Tables.GroupTable.Find(string groupName, bool ignoreDeletedGroups)
Return: int
Modifiers: public
Summary: Finds a group with a given name.
Parameter: groupName (string)
Parameter Summary: Name of group to search for. Ignores case.
Parameter: ignoreDeletedGroups (bool)
Parameter Summary: This parameter is ignored. Deleted groups are never searched.

Method: Rhino.DocObjects.Tables.GroupTable.Find(string groupName)
Return: int
Modifiers: public
Summary: Finds a group with a given name.
Parameter: groupName (string)
Parameter Summary: Name of group to search for. Ignores case.

Method: Rhino.DocObjects.Tables.GroupTable.FindIndex(int index)
Return: Group
Modifiers: public
Summary: Retrieves a Group object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.GroupTable.FindName(string name)
Return: Group
Modifiers: public
Summary: Finds a group given its name. Returns the instance, rather than the index.
Parameter: name (string)
Parameter Summary: The name of the group to be searched.

Method: Rhino.DocObjects.Tables.GroupTable.FindNameHash(NameHash nameHash)
Return: Group
Modifiers: public
Summary: Finds a group given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the group to be searched.

Method: Rhino.DocObjects.Tables.GroupTable.GroupMembers(int groupIndex)
Return: RhinoObject[]
Modifiers: public
Summary: Gets an array of all of the objects in a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group in this table.

Method: Rhino.DocObjects.Tables.GroupTable.GroupName(int groupIndex)
Return: string
Modifiers: public
Summary: Returns the name of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.GroupNames(bool ignoreDeletedGroups)
Return: string
Modifiers: public
Summary: Returns an array of all group names.
Parameter: ignoreDeletedGroups (bool)
Parameter Summary: Ignore any groups that were deleted.

Method: Rhino.DocObjects.Tables.GroupTable.GroupObjectCount(int groupIndex)
Return: int
Modifiers: public
Summary: Returns the number of objects that are members of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.Hide(int groupIndex)
Return: int
Modifiers: public
Summary: Hides all objects that are members of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.IsDeleted(int groupIndex)
Return: bool
Modifiers: public
Summary: Verifies a group is deleted.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.Lock(int groupIndex)
Return: int
Modifiers: public
Summary: Locks all objects that are members of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.Show(int groupIndex)
Return: int
Modifiers: public
Summary: Shows, or unhides, all objects that are members of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.Undelete(int groupIndex)
Return: bool
Modifiers: public
Summary: Undeletes a previously deleted group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Method: Rhino.DocObjects.Tables.GroupTable.Unlock(int groupIndex)
Return: int
Modifiers: public
Summary: Unlocks all objects that are members of a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group.

Class: Rhino.DocObjects.Tables.GroupTableEventArgs
Summary: Contains group table event data.

Property: Rhino.DocObjects.Tables.GroupTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: The document in which the event occurred.
Accessors: get

Property: Rhino.DocObjects.Tables.GroupTableEventArgs.EventType
Return: GroupTableEventType
Modifiers: public
Summary: The event type.
Accessors: get

Property: Rhino.DocObjects.Tables.GroupTableEventArgs.GroupIndex
Return: int
Modifiers: public
Summary: The index of the Group that has changed.
Accessors: get

Property: Rhino.DocObjects.Tables.GroupTableEventArgs.NewState
Return: Group
Modifiers: public
Summary: The Group that has changed.
Accessors: get

Property: Rhino.DocObjects.Tables.GroupTableEventArgs.OldState
Return: Group
Modifiers: public
Summary: If the event is GroupTableEventType.Modified, then the old Group.
Accessors: get

Class: Rhino.DocObjects.Tables.HatchPatternTable
Summary: All of the hatch pattern definitions contained in a rhino document.

Property: Rhino.DocObjects.Tables.HatchPatternTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.HatchPatternTable.CurrentHatchPatternIndex
Return: int
Modifiers: public
Summary: At all times, there is a "current" hatch pattern.  Unless otherwise specified, new objects are assigned to the current hatch pattern. The current hatch pattern is never locked, hidden, or deleted.
Accessors: get set

Property: Rhino.DocObjects.Tables.HatchPatternTable.this[int index]
Return: HatchPattern
Modifiers: public
Summary: Conceptually, the hatch pattern table is an array of hatch patterns. The operator[] can be used to get individual hatch patterns. A hatch pattern is either active or deleted and this state is reported by HatchPattern.IsDeleted.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Add(Rhino.DocObjects.HatchPattern pattern)
Return: int
Modifiers: public
Summary: Adds a new hatch pattern with specified definition to the table.
Parameter: pattern (Rhino.DocObjects.HatchPattern)
Parameter Summary: definition of new hatch pattern. The information in pattern is copied. If pattern.Name is empty the a unique name of the form "HatchPattern 01" will be automatically created.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Delete(HatchPattern item, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes a hatch pattern from the table.
Parameter: item (HatchPattern)
Parameter Summary: The hatch pattern to delete.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if hatch pattern cannot be deleted.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Delete(HatchPattern item)
Return: bool
Modifiers: public, override
Summary: Deletes a hatch pattern from the table.
Parameter: item (HatchPattern)
Parameter Summary: The hatch pattern to delete.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Delete(int hatchPatternIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes a hatch pattern from the table.
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern to delete.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if hatch pattern cannot be deleted.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Delete(int hatchPatternIndex)
Return: bool
Modifiers: public
Summary: Deletes a hatch pattern from the table.
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern to delete.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Find(string name, bool ignoreDeleted)
Return: int
Modifiers: public
Summary: Finds the hatch pattern with a given name. Search ignores case.
Parameter: name (string)
Parameter Summary: The name of the hatch pattern to be found.
Parameter: ignoreDeleted (bool)
Parameter Summary: True means don't search deleted hatch patterns.

Method: Rhino.DocObjects.Tables.HatchPatternTable.FindIndex(int index)
Return: HatchPattern
Modifiers: public
Summary: Retrieves a HatchPattern object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.HatchPatternTable.FindName(string name)
Return: HatchPattern
Modifiers: public
Summary: Finds the hatch pattern with a given name. Search ignores case.
Parameter: name (string)
Parameter Summary: The name of the hatch pattern to be found.

Method: Rhino.DocObjects.Tables.HatchPatternTable.FindNameHash(NameHash nameHash)
Return: HatchPattern
Modifiers: public
Summary: Finds a HatchPattern given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the HatchPattern to be searched.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Modify(HatchPattern hatchPattern, int hatchPatternIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Modify hatch pattern settings.
Parameter: hatchPattern (HatchPattern)
Parameter Summary: Definition of new hatch pattern. The information in the hatch pattern is copied.
Parameter: hatchPatternIndex (int)
Parameter Summary: Zero based index of the hatch pattern to modify.
Parameter: quiet (bool)
Parameter Summary: If true, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Rename(HatchPattern item, string hatchPatternName)
Return: bool
Modifiers: public
Summary: Renames a hatch pattern in the table.
Parameter: item (HatchPattern)
Parameter Summary: The hatch pattern to rename
Parameter: hatchPatternName (string)
Parameter Summary: The new hatch pattern name.

Method: Rhino.DocObjects.Tables.HatchPatternTable.Rename(int hatchPatternIndex, string hatchPatternName)
Return: bool
Modifiers: public
Summary: Renames a hatch pattern in the table.
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern to rename.
Parameter: hatchPatternName (string)
Parameter Summary: The new hatch pattern name.

Class: Rhino.DocObjects.Tables.InstanceDefinitionTable

Property: Rhino.DocObjects.Tables.InstanceDefinitionTable.ActiveCount
Return: int
Modifiers: public
Summary: Number of items in the instance definitions table, excluding deleted definitions.
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTable.Count
Return: int
Modifiers: public, override
Summary: Number of items in the instance definitions table.
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTable.Document
Return: RhinoDoc
Modifiers: public, new
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTable.this[int index]
Return: InstanceDefinition
Modifiers: public
Summary: Conceptually, the InstanceDefinition table is an array of Instance definitions. The operator[] can be used to get individual instance definition. An instance definition is either active or deleted and this state is reported by IsDeleted or will be None if it has been purged from the document.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(string name, string description, Point3d basePoint, GeometryBase geometry, ObjectAttributes attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (GeometryBase)
Parameter Summary: An element.
Parameter: attributes (ObjectAttributes)
Parameter Summary: An attribute.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.
Parameter: attributes (IEnumerable<ObjectAttributes>)
Parameter Summary: An array, a list or any enumerable set of attributes.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(string name, string description, string url, string urlTag, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: url (string)
Parameter Summary: A URL or hyperlink.
Parameter: urlTag (string)
Parameter Summary: A description of the URL or hyperlink.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.
Parameter: attributes (IEnumerable<ObjectAttributes>)
Parameter Summary: An array, a list or any enumerable set of attributes.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Compact(bool ignoreUndoReferences)
Return: void
Modifiers: public
Summary: Purge deleted instance definition information that is not in use. This function is time consuming and should be used in a thoughtful manner.
Parameter: ignoreUndoReferences (bool)
Parameter Summary: If false, then deleted instance definition information that could possibly be undeleted by the Undo command will not be deleted. If true, then all deleted instance definition information is deleted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(InstanceDefinition item)
Return: bool
Modifiers: public, override
Summary: Deletes the instance definition. This deletes all references too.
Parameter: item (InstanceDefinition)
Parameter Summary: The item to delete.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(int idefIndex, bool deleteReferences, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes the instance definition.
Parameter: idefIndex (int)
Parameter Summary: zero based index of instance definition to delete. This must be in the range 0 <= idefIndex < InstanceDefinitionTable.Count.
Parameter: deleteReferences (bool)
Parameter Summary: True to delete all references to this definition. False to delete definition only if there are no references.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if an instance definition cannot be deleted because it is the current layer or it contains active geometry.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.DestroySourceArchive(InstanceDefinition definition, bool quiet)
Return: bool
Modifiers: public
Summary: Destroys all source archive information. Specifically: * <b>InstanceDefinitionGeometry.SourceArchive</b> is set to the empty string. * SourceRelativePath is set to false * The alternative source archive path is set to the empty string. * Checksum.Zero() is used to private destroy all checksum information. * <b>InstanceDefinition.UpdateType</b> is set to <b>InstanceDefinitionUpdateType.Static</b> .
Parameter: definition (InstanceDefinition)
Parameter Summary: The instance definition to be modified.
Parameter: quiet (bool)
Parameter Summary: If true, then message boxes about erroneous parameters will not be shown.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(string instanceDefinitionName, bool ignoreDeletedInstanceDefinitions)
Return: InstanceDefinition
Modifiers: public
Summary: Finds the instance definition with a given name.
Parameter: instanceDefinitionName (string)
Parameter Summary: name of instance definition to search for (ignores case)
Parameter: ignoreDeletedInstanceDefinitions (bool)
Parameter Summary: True means don't search deleted instance definitions.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(string instanceDefinitionName)
Return: InstanceDefinition
Modifiers: public
Summary: Finds the instance definition with a given name.
Parameter: instanceDefinitionName (string)
Parameter Summary: name of instance definition to search for (ignores case)

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(System.Guid instanceId, bool ignoreDeletedInstanceDefinitions)
Return: InstanceDefinition
Modifiers: public
Summary: Finds the instance definition with a given id.
Parameter: instanceId (System.Guid)
Parameter Summary: Unique id of the instance definition to search for.
Parameter: ignoreDeletedInstanceDefinitions (bool)
Parameter Summary: True means don't search deleted instance definitions.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.GetEnumerator()
Return: IEnumerator<InstanceDefinition>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.GetList(bool ignoreDeleted)
Return: InstanceDefinition[]
Modifiers: public
Summary: Gets an array of instance definitions.
Parameter: ignoreDeleted (bool)
Parameter Summary: If True then deleted instance definitions are filtered out.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName()
Return: string
Modifiers: public
Summary: Gets unused instance definition name used as default when creating new instance definitions.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(string root, uint defaultSuffix)
Return: string
Modifiers: public
Summary: Gets unused instance definition name used as default when creating new instance definitions.
Parameter: root (string)
Parameter Summary: The returned name is 'root nn'  If root is empty, then 'Block' (localized) is used.
Parameter: defaultSuffix (uint)
Parameter Summary: Unique names are created by appending a decimal number to the localized term for "Block" as in "Block 01", "Block 02", and so on.  When defaultSuffix is supplied, the search for an unused name begins at "Block suffix".

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(string root)
Return: string
Modifiers: public
Summary: Gets unused instance definition name used as default when creating new instance definitions.
Parameter: root (string)
Parameter Summary: The returned name is 'root nn'  If root is empty, then 'Block' (localized) is used.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.InstanceDefinitionIndex(System.Guid instanceId, bool ignoreDeletedInstanceDefinitions)
Return: int
Modifiers: public
Summary: Get the index of the instance definition with a given id.
Parameter: instanceId (System.Guid)
Parameter Summary: Unique id of the instance definition to search for
Parameter: ignoreDeletedInstanceDefinitions (bool)
Parameter Summary: True means don't search deleted instance definitions.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.MakeSourcePathRelative(InstanceDefinition idef, bool relative, bool quiet)
Return: bool
Modifiers: public
Summary: Obsolete method that always returns false. Marks the source path for a linked instance definition as relative or absolute.
Parameter: idef (InstanceDefinition)
Parameter Summary: The instance definition to be marked.
Parameter: relative (bool)
Parameter Summary: If true, the path should be considered as relative.
If false, the path should be considered as absolute. | Parameter: quiet (bool) | Parameter Summary: If true, then message boxes about erroneous parameters will not be shown.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(InstanceDefinition idef, string newName, string newDescription, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies the instance definition name and description. Does not change instance definition ID or geometry.
Parameter: idef (InstanceDefinition)
Parameter Summary: The instance definition to be modified.
Parameter: newName (string)
Parameter Summary: The new name.
Parameter: newDescription (string)
Parameter Summary: The new description string.
Parameter: quiet (bool)
Parameter Summary: If false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(InstanceDefinition idef, string newName, string newDescription, string newUrl, string newUrlTag, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies the instance definition name, description, and url. Does not change instance definition ID or geometry.
Parameter: idef (InstanceDefinition)
Parameter Summary: The instance definition to be modified.
Parameter: newName (string)
Parameter Summary: The new name.
Parameter: newDescription (string)
Parameter Summary: The new description string.
Parameter: newUrl (string)
Parameter Summary: The new URL or hyperlink.
Parameter: newUrlTag (string)
Parameter Summary: The new description of the URL or hyperlink.
Parameter: quiet (bool)
Parameter Summary: If false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(int idefIndex, string newName, string newDescription, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies the instance definition name and description. Does not change instance definition ID or geometry.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: newName (string)
Parameter Summary: The new name.
Parameter: newDescription (string)
Parameter Summary: The new description string.
Parameter: quiet (bool)
Parameter Summary: If false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(int idefIndex, string newName, string newDescription, string newUrl, string newUrlTag, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies the instance definition name, description, and url. Does not change instance definition ID or geometry.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: newName (string)
Parameter Summary: The new name.
Parameter: newDescription (string)
Parameter Summary: The new description string.
Parameter: newUrl (string)
Parameter Summary: The new URL or hyperlink.
Parameter: newUrlTag (string)
Parameter Summary: The new description of the URL or hyperlink.
Parameter: quiet (bool)
Parameter Summary: If false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(int idefIndex, UserData userData, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies the instance definition user data. Does not change instance definition ID or geometry.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: userData (UserData)
Parameter Summary: The user data to replace.
Parameter: quiet (bool)
Parameter Summary: If false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(int idefIndex, GeometryBase newGeometry, ObjectAttributes newAttributes)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(int idefIndex, IEnumerable<GeometryBase> newGeometry, IEnumerable<ObjectAttributes> newAttributes)
Return: bool
Modifiers: public
Summary: Modifies the instance definition geometry and replaces all references to the current definition with references to the new definition.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: newGeometry (IEnumerable<GeometryBase>)
Parameter Summary: The new geometry.
Parameter: newAttributes (IEnumerable<ObjectAttributes>)
Parameter Summary: The new attributes.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(int idefIndex, IEnumerable<GeometryBase> newGeometry)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifySourceArchive(int idefIndex, FileReference sourceArchive, InstanceDefinitionUpdateType updateType, bool quiet)
Return: bool
Modifiers: public
Summary: If the instance definition is linked or embedded, use SetSource to specify the source archive.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: sourceArchive (FileReference)
Parameter Summary: The new source archive file name.
Parameter: updateType (InstanceDefinitionUpdateType)
Parameter Summary: 
Parameter: quiet (bool)
Parameter Summary: If true, then message boxes about erroneous parameters will not be shown.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifySourceArchive(int idefIndex, string sourceArchive, InstanceDefinitionUpdateType updateType, bool quiet)
Return: bool
Modifiers: public
Summary: If the instance definition is linked or embedded, use SetSource to specify the source archive.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be modified.
Parameter: sourceArchive (string)
Parameter Summary: The new source archive file name.
Parameter: updateType (InstanceDefinitionUpdateType)
Parameter Summary: 
Parameter: quiet (bool)
Parameter Summary: If true, then message boxes about erroneous parameters will not be shown.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Purge(int idefIndex)
Return: bool
Modifiers: public
Summary: Purges an instance definition and its definition geometry.
Parameter: idefIndex (int)
Parameter Summary: zero based index of instance definition to delete. This must be in the range 0 <= idefIndex < InstanceDefinitionTable.Count.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.RefreshLinkedBlock(InstanceDefinition definition)
Return: bool
Modifiers: public
Summary: Reload linked block definitions and update the Rhino display.
Parameter: definition (InstanceDefinition)
Parameter Summary: Instance definition to reload.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.Undelete(int idefIndex)
Return: bool
Modifiers: public
Summary: Undeletes an instance definition that has been deleted by Delete()
Parameter: idefIndex (int)
Parameter Summary: zero based index of instance definition to delete. This must be in the range 0 <= idefIndex < InstanceDefinitionTable.Count.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.UndoModify(int idefIndex)
Return: bool
Modifiers: public
Summary: Restores the instance definition to its previous state, if the instance definition has been modified and the modification can be undone.
Parameter: idefIndex (int)
Parameter Summary: The index of the instance definition to be restored.

Method: Rhino.DocObjects.Tables.InstanceDefinitionTable.UpdateLinkedInstanceDefinition(int idefIndex, string filename, bool updateNestedLinks, bool quiet)
Return: bool
Modifiers: public
Summary: Read the objects from a file and use them as the instance's definition geometry.
Parameter: idefIndex (int)
Parameter Summary: zero based index of instance definition to delete. This must be in the range 0 <= idefIndex < InstanceDefinitionTable.Count.
Parameter: filename (string)
Parameter Summary: name of file (can be any type of file that Rhino or a plug-in can read)
Parameter: updateNestedLinks (bool)
Parameter Summary: If True and the instance definition references to a linked instance definition, that needs to be updated, then the nested definition is also updated. If false, nested updates are skipped.
Parameter: quiet (bool)
Parameter Summary:

Class: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs

Property: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs.EventType
Return: InstanceDefinitionTableEventType
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs.InstanceDefinitionIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs.NewState
Return: InstanceDefinition
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.InstanceDefinitionTableEventArgs.OldState
Return: InstanceDefinitionGeometry
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Tables.LayerTable

Property: Rhino.DocObjects.Tables.LayerTable.ActiveCount
Return: int
Modifiers: public
Summary: Returns number of layers in the layer table, excluding deleted layers.
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.Count
Return: int
Modifiers: public, override
Summary: Returns number of layers in the layer table, including deleted layers.
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.CurrentLayer
Return: Layer
Modifiers: public
Summary: At all times, there is a "current" layer. Unless otherwise specified, new objects are assigned to the current layer. The current layer is never locked, hidden, or deleted.  Returns reference to the current layer. Note that this reference may become invalid after a call to AddLayer().
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.CurrentLayerIndex
Return: int
Modifiers: public
Summary: At all times, there is a "current" layer.  Unless otherwise specified, new objects are assigned to the current layer. The current layer is never locked, hidden, or deleted. Returns: Zero based layer table index of the current layer.
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.Document
Return: RhinoDoc
Modifiers: public, new
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTable.this[int index]
Return: Layer
Modifiers: public
Summary: Conceptually, the layer table is an array of layers. The operator[] can be used to get individual layers. A layer is either active or deleted and this state is reported by Layer.IsDeleted.

Method: Rhino.DocObjects.Tables.LayerTable.Add()
Return: int
Modifiers: public
Summary: Adds a new layer with default definition to the layer table.

Method: Rhino.DocObjects.Tables.LayerTable.Add(Layer layer)
Return: int
Modifiers: public
Summary: Adds a new layer with specified definition to the layer table.
Parameter: layer (Layer)
Parameter Summary: definition of new layer. The information in layer is copied. If layer.Name is empty the a unique name of the form "Layer 01" will be automatically created.

Method: Rhino.DocObjects.Tables.LayerTable.Add(string layerName, System.Drawing.Color layerColor)
Return: int
Modifiers: public
Summary: Adds a new layer with specified definition to the layer table.
Parameter: layerName (string)
Parameter Summary: Name for new layer. Cannot be a None or zero-length string.
Parameter: layerColor (System.Drawing.Color)
Parameter Summary: Color of new layer. Alpha components will be ignored.

Method: Rhino.DocObjects.Tables.LayerTable.AddPath(string layerPath, System.Drawing.Color layerColor)
Return: int
Modifiers: public
Summary: Adds all of the layer in the specified layer path, beginning with the root. Layer paths contain one or more valid layers names, with each name separated by <b>ModelComponent.NamePathSeparator</b> . For example, "Grandfather::Father::Son".
Parameter: layerPath (string)
Parameter Summary: The layer path.
Parameter: layerColor (System.Drawing.Color)
Parameter Summary: The color of newly created layers. The colors of layers that already exist will not be changed.

Method: Rhino.DocObjects.Tables.LayerTable.AddPath(string layerPath)
Return: int
Modifiers: public
Summary: Adds all of the layer in the specified layer path, beginning with the root. Layer paths contain one or more valid layers names, with each name separated by <b>ModelComponent.NamePathSeparator</b> . For example, "Grandfather::Father::Son".
Parameter: layerPath (string)
Parameter Summary: The layer path.

Method: Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer()
Return: int
Modifiers: public
Summary: Adds a new reference layer with default definition to the layer table. Reference layers are not saved in files.

Method: Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer(Layer layer)
Return: int
Modifiers: public
Summary: Adds a new reference layer with specified definition to the layer table Reference layers are not saved in files.
Parameter: layer (Layer)
Parameter Summary: definition of new layer. The information in layer is copied. If layer.Name is empty the a unique name of the form "Layer 01" will be automatically created.

Method: Rhino.DocObjects.Tables.LayerTable.CreateLayer(Layer newLayer, LayerType layerType, uint worksessionReferenceModelSerialNumber, uint linkedInstanceDefinitionSerialNumber)
Return: int
Modifiers: public
Summary: Basic tool used by the add layer methods.
Parameter: newLayer (Layer)
Parameter Summary: Settings for new layer. These are copied to the layer table entry and any user data on layer is moved to the layer table entry.
Parameter: layerType (LayerType)
Parameter Summary: Type type of layer to create.
Parameter: worksessionReferenceModelSerialNumber (uint)
Parameter Summary: Worksession reference model serial number, where: 0: Layer is not a reference layer. 1: Layer is a reference layer but not part of a worksession reference file. 2-1000: Reserved for future use. >1000: Worksession reference model serial number.
Parameter: linkedInstanceDefinitionSerialNumber (uint)
Parameter Summary: Linked instance definition serial number, where: 0: Layer is not from a liked instance definition. 1-1000: Reserved for future use. >1000: Linked instance definition serial number.

Method: Rhino.DocObjects.Tables.LayerTable.Delete(IEnumerable<int> layerIndices, bool quiet)
Return: int
Modifiers: public
Summary: Deletes layers.
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: An enumeration containing the indices of the layers to delete.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message boxes will appear.

Method: Rhino.DocObjects.Tables.LayerTable.Delete(int layerIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes layer.
Parameter: layerIndex (int)
Parameter Summary: zero based index of layer to delete. This must be in the range 0 <= layerIndex < LayerTable.Count.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a layer the layer cannot be deleted because it is the current layer or it contains active geometry.

Method: Rhino.DocObjects.Tables.LayerTable.Delete(Layer layer, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes layer.
Parameter: layer (Layer)
Parameter Summary: Layer to be deleted.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a layer the layer cannot be deleted because it is the current layer or it contains active geometry.

Method: Rhino.DocObjects.Tables.LayerTable.Delete(Layer layer)
Return: bool
Modifiers: public, override
Summary: Deletes layer.
Parameter: layer (Layer)
Parameter Summary: Layer to be deleted.

Method: Rhino.DocObjects.Tables.LayerTable.Delete(System.Guid layerId, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes layer.
Parameter: layerId (System.Guid)
Parameter Summary: Id of the layer to be deleted.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a layer the layer cannot be deleted because it is the current layer or it contains active geometry.

Method: Rhino.DocObjects.Tables.LayerTable.Duplicate(IEnumerable<int> layerIndices, bool duplicateObjects, bool duplicateSublayers)
Return: int
Modifiers: public
Summary: Duplicates, or copies, one or more layers. Duplicated layers are added to the document.
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: The indices of layers to duplicate.
Parameter: duplicateObjects (bool)
Parameter Summary: If true, then layer objects will also be duplicated and added to the document.
Parameter: duplicateSublayers (bool)
Parameter Summary: If true, then all sub-layers of the layer will be duplicated.

Method: Rhino.DocObjects.Tables.LayerTable.Duplicate(int layerIndex, bool duplicateObjects, bool duplicateSublayers)
Return: int
Modifiers: public
Summary: Duplicates, or copies, a layer. Duplicated layers are added to the document.
Parameter: layerIndex (int)
Parameter Summary: The index of the layer to duplicate.
Parameter: duplicateObjects (bool)
Parameter Summary: If true, then layer objects will also be duplicated and added to the document.
Parameter: duplicateSublayers (bool)
Parameter Summary: If true, then all sub-layers of the layer will be duplicated.

Method: Rhino.DocObjects.Tables.LayerTable.Find(string layerName, bool ignoreDeletedLayers)
Return: int
Modifiers: public
Summary: Finds the layer with a given name. If multiple layers exist that have the same name, the first match layer index will be returned.
Deleted layers have no name. | Since: 5.0 | Parameter: layerName (string) | Parameter Summary: name of layer to search for. The search ignores case. | Parameter: ignoreDeletedLayers (bool) | Parameter Summary: True means don't search deleted layers.

Method: Rhino.DocObjects.Tables.LayerTable.Find(System.Guid layerId, bool ignoreDeletedLayers, int notFoundReturnValue)
Return: int
Modifiers: public
Summary: Finds a layer with a matching ID.
Parameter: layerId (System.Guid)
Parameter Summary: A valid layer ID.
Parameter: ignoreDeletedLayers (bool)
Parameter Summary: If true, deleted layers are not checked.
Parameter: notFoundReturnValue (int)
Parameter Summary: Should be -1 to get the index of the OpenNURBS default layer, or <b>RhinoMath.UnsetIntIndex</b> to get an always-out-of-bound value.

Method: Rhino.DocObjects.Tables.LayerTable.Find(System.Guid layerId, bool ignoreDeletedLayers)
Return: int
Modifiers: public
Summary: Finds a layer with a matching ID.
Parameter: layerId (System.Guid)
Parameter Summary: A valid layer ID.
Parameter: ignoreDeletedLayers (bool)
Parameter Summary: If true, deleted layers are not checked.

Method: Rhino.DocObjects.Tables.LayerTable.Find(System.Guid parentId, string layerName, bool ignoreDeletedLayers)
Return: int
Modifiers: public
Summary: Finds a layer with a given name and matching parent ID.
Parameter: parentId (System.Guid)
Parameter Summary: A valid layer ID.
Parameter: layerName (string)
Parameter Summary: name of layer to search for. The search ignores case.
Parameter: ignoreDeletedLayers (bool)
Parameter Summary: If true, deleted layers are not checked. NOT SUPPORTED FOR NAME SEARCH, only for Guids.

Method: Rhino.DocObjects.Tables.LayerTable.Find(System.Guid parentId, string layerName, int notFoundReturnValue)
Return: int
Modifiers: public
Summary: Finds a layer with a given name and matching parent ID.
Parameter: parentId (System.Guid)
Parameter Summary: A valid layer ID.
Parameter: layerName (string)
Parameter Summary: name of layer to search for. The search ignores case.
Parameter: notFoundReturnValue (int)
Parameter Summary: Should be -1 to get the index of the OpenNURBS default layer, or <b>RhinoMath.UnsetIntIndex</b> to get an always-out-of-bound value.

Method: Rhino.DocObjects.Tables.LayerTable.FindByFullPath(string layerPath, bool ignoreDeletedLayers)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.LayerTable.FindByFullPath(string layerPath, int notFoundReturnValue)
Return: int
Modifiers: public
Summary: Searches for a layer using the fully qualified name, that includes ancestors.
Deleted layers have no name. | Since: 6.0 | Parameter: layerPath (string) | Parameter Summary: The full layer name. | Parameter: notFoundReturnValue (int) | Parameter Summary: Should be -1 to get the index of the OpenNURBS default layer, or <b>RhinoMath.UnsetIntIndex</b> to get an always-out-of-bound value.

Method: Rhino.DocObjects.Tables.LayerTable.FindIndex(int index)
Return: Layer
Modifiers: public
Summary: Retrieves a Layer object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.LayerTable.FindName(string layerName, int startIndex)
Return: Layer
Modifiers: public
Summary: Finds the next layer that has an index equal or higher than the searched value.
Search in case-insensitive. | Since: 6.0 | Parameter: layerName (string) | Parameter Summary: The layer to search for. | Parameter: startIndex (int) | Parameter Summary: If you specify RhinoMath.UnsetIntIndex, then also default layers will be included. This is the first index that will be tested.

Method: Rhino.DocObjects.Tables.LayerTable.FindName(string layerName)
Return: Layer
Modifiers: public
Summary: Finds the layer with a given name. If multiple layers exist that have the same name, the first match layer index will be returned.
Deleted layers have no name.
The default layer is NOT included in the search. If required, use the overload with startIndex input. | Since: 6.0 | Parameter: layerName (string) | Parameter Summary: name of layer to search for. The search ignores case.

Method: Rhino.DocObjects.Tables.LayerTable.FindNameHash(NameHash nameHash)
Return: Layer
Modifiers: public
Summary: Finds a Layer given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the Layer to be searched.

Method: Rhino.DocObjects.Tables.LayerTable.FindNext(int index, string layerName, bool ignoreDeletedLayers)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.LayerTable.FindNext(int index, string layerName)
Return: Layer
Modifiers: public
Summary: Use FindName(name, index).
Parameter: index (int)
Parameter Summary: Do not use.
Parameter: layerName (string)
Parameter Summary: Do not use.

Method: Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(int layerIndex)
Return: bool
Modifiers: public
Summary: Makes a layer and all of its parent layers visible.
Parameter: layerIndex (int)
Parameter Summary: The layer index to be made visible.

Method: Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(System.Guid layerId)
Return: bool
Modifiers: public
Summary: Makes a layer and all of its parent layers visible.
Parameter: layerId (System.Guid)
Parameter Summary: The layer ID to be made visible.

Method: Rhino.DocObjects.Tables.LayerTable.GetEnumerator()
Return: IEnumerator<Layer>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.LayerTable.GetSelected(out List<int> layerIndices)
Return: bool
Modifiers: public
Summary: Returns the indices of layers that are selected on the Layer user interface.
Parameter: layerIndices (List<int>)
Parameter Summary: The indices of selected layers.

Method: Rhino.DocObjects.Tables.LayerTable.GetSorted()
Return: int
Modifiers: public
Summary: Gets an array of layer indices that are sorted by the values of <b>Layer.SortIndex</b> .

Method: Rhino.DocObjects.Tables.LayerTable.GetUnusedLayerName()
Return: string
Modifiers: public
Summary: Gets the next unused layer name used as default when creating new layers.

Method: Rhino.DocObjects.Tables.LayerTable.GetUnusedLayerName(bool ignoreDeleted)
Return: string
Modifiers: public
Summary: Gets the next unused layer name used as default when creating new layers.
Parameter: ignoreDeleted (bool)
Parameter Summary: If this is True then Rhino may use a name used by a deleted layer.

Method: Rhino.DocObjects.Tables.LayerTable.Modify(Layer newSettings, int layerIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies layer settings.
Parameter: newSettings (Layer)
Parameter Summary: This information is copied.
Parameter: layerIndex (int)
Parameter Summary: zero based index of layer to set.  This must be in the range 0 <= layerIndex < LayerTable.Count.
Parameter: quiet (bool)
Parameter Summary: if false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.LayerTable.Modify(Layer newSettings, System.Guid layerId, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies layer settings.
Parameter: newSettings (Layer)
Parameter Summary: This information is copied.
Parameter: layerId (System.Guid)
Parameter Summary: Id of layer.
Parameter: quiet (bool)
Parameter Summary: if false, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.LayerTable.Purge(int layerIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes a layer and all geometry objects on a layer
Parameter: layerIndex (int)
Parameter Summary: zero based index of layer to delete. This must be in the range 0 <= layerIndex < LayerTable.Count.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a layer the layer cannot be deleted because it is the current layer.

Method: Rhino.DocObjects.Tables.LayerTable.Purge(System.Guid layerId, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes a layer and all geometry objects on a layer.
Parameter: layerId (System.Guid)
Parameter Summary: Id of the layer to purge.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a layer the layer cannot be deleted because it is the current layer.

Method: Rhino.DocObjects.Tables.LayerTable.Select(IEnumerable<int> layerIndices, bool bDeselect)
Return: bool
Modifiers: public
Summary: Selects layers in the Layer user interface.
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: The indices of layers to select.
Parameter: bDeselect (bool)
Parameter Summary: If true, then any previously selected layers will be unselected.

Method: Rhino.DocObjects.Tables.LayerTable.SetCurrentLayerIndex(int layerIndex, bool quiet)
Return: bool
Modifiers: public
Summary: At all times, there is a "current" layer. Unless otherwise specified, new objects are assigned to the current layer. The current layer is never locked, hidden, or deleted.
Parameter: layerIndex (int)
Parameter Summary: Value for new current layer. 0 <= layerIndex < LayerTable.Count. The layer's mode is automatically set to NormalMode.
Parameter: quiet (bool)
Parameter Summary: if true, then no warning message box pops up if the current layer request can't be satisfied.

Method: Rhino.DocObjects.Tables.LayerTable.Sort(IEnumerable<int> layerIndices)
Return: void
Modifiers: public
Summary: Updates the layer sort order
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: The sort order.

Method: Rhino.DocObjects.Tables.LayerTable.SortByLayerName(bool bAscending)
Return: void
Modifiers: public
Summary: Sort layers, in the layer table, by their name in either ascending or descending order. This function sorts layers in the same manner as Rhino's Layers panel.
Parameter: bAscending (bool)
Parameter Summary: Sort in ascending (true) or descending (false) order.

Method: Rhino.DocObjects.Tables.LayerTable.Undelete(int layerIndex)
Return: bool
Modifiers: public
Summary: Undeletes a layer that has been deleted by DeleteLayer().
Parameter: layerIndex (int)
Parameter Summary: zero based index of layer to undelete. This must be in the range 0 <= layerIndex < LayerTable.Count.

Method: Rhino.DocObjects.Tables.LayerTable.UndoModify(int layerIndex, uint undoRecordSerialNumber)
Return: bool
Modifiers: public
Summary: Restores the layer to its previous state, if the layer has been modified and the modification can be undone.
Parameter: layerIndex (int)
Parameter Summary: The layer index to be used.
Parameter: undoRecordSerialNumber (uint)
Parameter Summary: The undo record serial number. Pass 0 not to specify one.

Method: Rhino.DocObjects.Tables.LayerTable.UndoModify(int layerIndex)
Return: bool
Modifiers: public
Summary: Restores the layer to its previous state, if the layer has been modified and the modification can be undone.
Parameter: layerIndex (int)
Parameter Summary: The layer index to be used.

Method: Rhino.DocObjects.Tables.LayerTable.UndoModify(System.Guid layerId, uint undoRecordSerialNumber)
Return: bool
Modifiers: public
Summary: Restores the layer to its previous state, if the layer has been modified and the modification can be undone.
Parameter: layerId (System.Guid)
Parameter Summary: The layer Id to be used.
Parameter: undoRecordSerialNumber (uint)
Parameter Summary: The undo record serial number. Pass 0 not to specify one.

Method: Rhino.DocObjects.Tables.LayerTable.UndoModify(System.Guid layerId)
Return: bool
Modifiers: public
Summary: Restores the layer to its previous state, if the layer has been modified and the modification can be undone.
Parameter: layerId (System.Guid)
Parameter Summary: The layer Id to be used.

Class: Rhino.DocObjects.Tables.LayerTableEventArgs

Property: Rhino.DocObjects.Tables.LayerTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTableEventArgs.EventType
Return: LayerTableEventType
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTableEventArgs.LayerIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTableEventArgs.NewState
Return: Layer
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LayerTableEventArgs.OldState
Return: Layer
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Tables.LightTable

Property: Rhino.DocObjects.Tables.LightTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.LightTable.Count
Return: int
Modifiers: public, override
Summary: Number of lights in the light table.  Does not include Sun or Skylight.
Accessors: get

Property: Rhino.DocObjects.Tables.LightTable.Document
Return: RhinoDoc
Modifiers: public, new
Summary: Document that owns this light table.
Accessors: get

Property: Rhino.DocObjects.Tables.LightTable.Skylight
Return: Skylight
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LightTable.Sun
Return: Sun
Modifiers: public
Summary: Gets the Sun instance that is applied to the document.
If the RDK is loaded, an instance is always returned. | Since: 5.0 | Accessors: get

Property: Rhino.DocObjects.Tables.LightTable.this[int index]
Return: LightObject
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Add(Geometry.Light light, ObjectAttributes attributes)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Add(Geometry.Light light)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Delete(int index, bool quiet)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Delete(LightObject item)
Return: bool
Modifiers: public, override

Method: Rhino.DocObjects.Tables.LightTable.Find(System.Guid id, bool ignoreDeleted)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.FindIndex(int index)
Return: LightObject
Modifiers: public
Summary: Retrieves a  object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.LightTable.FindName(string name)
Return: LightObject
Modifiers: public
Summary: Finds the LightObject with a given name.
Deleted lights have no name. | Since: 6.0 | Parameter: name (string) | Parameter Summary: Name to search.

Method: Rhino.DocObjects.Tables.LightTable.FindNameHash(NameHash nameHash)
Return: LightObject
Modifiers: public
Summary: Finds a LightObject given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the LightObject to be searched.

Method: Rhino.DocObjects.Tables.LightTable.GetEnumerator()
Return: IEnumerator<LightObject>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.LightTable.Modify(int index, Geometry.Light light)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Modify(System.Guid id, Geometry.Light light)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.LightTable.Undelete(int index)
Return: bool
Modifiers: public
Summary: Restores a light that has been deleted.
Parameter: index (int)
Parameter Summary: A light index to be undeleted.

Class: Rhino.DocObjects.Tables.LightTableEventArgs

Property: Rhino.DocObjects.Tables.LightTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LightTableEventArgs.EventType
Return: LightTableEventType
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LightTableEventArgs.LightIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LightTableEventArgs.NewState
Return: LightObject
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.LightTableEventArgs.OldState
Return: Light
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Tables.LinetypeTable

Property: Rhino.DocObjects.Tables.LinetypeTable.ActiveCount
Return: int
Modifiers: public
Summary: Returns number of linetypes in the linetypes table, excluding deleted linetypes.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.ByLayerLinetypeName
Return: string
Modifiers: public
Summary: Returns the text name of the by-layer linetype.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.ByParentLinetypeName
Return: string
Modifiers: public
Summary: Returns the text name of the by-parent linetype.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.ContinuousLinetypeName
Return: string
Modifiers: public
Summary: Returns the text name of the continuous linetype.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.Count
Return: int
Modifiers: public, new
Summary: Returns number of linetypes in the linetypes table, including deleted linetypes.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetype
Return: Linetype
Modifiers: public
Summary: Returns reference to the current linetype. Note that this reference may become invalid after a call to AddLinetype().
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeIndex
Return: int
Modifiers: public
Summary: At all times, there is a "current" linetype.  Unless otherwise specified, new objects are assigned to the current linetype. If the current linetype source is LinetypeFromLayer the object's layer's linetype is used instead.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeSource
Return: ObjectLinetypeSource
Modifiers: public
Summary: Source used by an object to determine its current linetype to be used by new objects.
Accessors: get set

Property: Rhino.DocObjects.Tables.LinetypeTable.Document
Return: RhinoDoc
Modifiers: public, new
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTable.LinetypeScale
Return: double
Modifiers: public
Summary: For display in Rhino viewports, the linetypes are scaled by a single scale factor for all viewports. This is not used for printing, where all linetype patterns are scaled to print in their defined size 1:1 on the paper.
Accessors: get set

Property: Rhino.DocObjects.Tables.LinetypeTable.this[int index]
Return: Linetype
Modifiers: public
Summary: Conceptually, the linetype table is an array of linetypes. The operator[] can be used to get individual linetypes. A linetype is either active or deleted and this state is reported by Linetype.IsDeleted.

Method: Rhino.DocObjects.Tables.LinetypeTable.Add(DocObjects.Linetype linetype)
Return: int
Modifiers: public
Summary: Adds a new linetype with specified definition to the linetype table.
Parameter: linetype (DocObjects.Linetype)
Parameter Summary: Definition of new linetype.  The information in linetype is copied. If linetype.Name is empty then a unique name of the form "Linetype 01" will be automatically created.

Method: Rhino.DocObjects.Tables.LinetypeTable.Add(string name, IEnumerable<double> segmentLengths)
Return: int
Modifiers: public
Summary: Adds a new linetype with specified definition to the linetype table.
Parameter: name (string)
Parameter Summary: A name for the new linetype.
Parameter: segmentLengths (IEnumerable<double>)
Parameter Summary: Positive values are dashes, negative values are gaps.

Method: Rhino.DocObjects.Tables.LinetypeTable.AddReferenceLinetype(DocObjects.Linetype linetype)
Return: int
Modifiers: public
Summary: Adds a reference linetypes that will not be saved in files.
Parameter: linetype (DocObjects.Linetype)
Parameter Summary: Definition of new linetype.  The information in linetype is copied. If linetype.Name is empty then a unique name of the form "Linetype 01" will be automatically created.

Method: Rhino.DocObjects.Tables.LinetypeTable.Delete(IEnumerable<int> indices, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes multiple linetypes.
Parameter: indices (IEnumerable<int>)
Parameter Summary: An array, a list or any enumerable instance of linetype indices.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a linetype the linetype cannot be deleted because it is the current linetype or it contains active geometry.

Method: Rhino.DocObjects.Tables.LinetypeTable.Delete(int index, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes linetype.
Parameter: index (int)
Parameter Summary: zero based index of linetype to delete.
Parameter: quiet (bool)
Parameter Summary: If true, no warning message box appears if a linetype the linetype cannot be deleted because it is the current linetype or it contains active geometry.

Method: Rhino.DocObjects.Tables.LinetypeTable.Delete(Linetype item)
Return: bool
Modifiers: public, override

Method: Rhino.DocObjects.Tables.LinetypeTable.Find(string name, bool ignoreDeletedLinetypes)
Return: int
Modifiers: public
Summary: Obsolete. Use the other overload.
Parameter: name (string)
Parameter Summary: search ignores case.
Parameter: ignoreDeletedLinetypes (bool)
Parameter Summary: If true, deleted linetypes are not checked.

Method: Rhino.DocObjects.Tables.LinetypeTable.Find(string name)
Return: int
Modifiers: public
Summary: Finds the linetype with a given name.
Parameter: name (string)
Parameter Summary: The name of the linetype to find. The search ignores case.

Method: Rhino.DocObjects.Tables.LinetypeTable.Find(System.Guid id, bool ignoreDeletedLinetypes)
Return: int
Modifiers: public
Summary: Finds a linetype with a matching ID.
Parameter: id (System.Guid)
Parameter Summary: The ID of the line type to be found.
Parameter: ignoreDeletedLinetypes (bool)
Parameter Summary: If true, deleted linetypes are not checked.

Method: Rhino.DocObjects.Tables.LinetypeTable.FindIndex(int index)
Return: Linetype
Modifiers: public
Summary: Retrieves a Linetype object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.LinetypeTable.FindName(string name)
Return: Linetype
Modifiers: public
Summary: Finds the linetype with a given name.
Parameter: name (string)
Parameter Summary: he name of the linetype to find.

Method: Rhino.DocObjects.Tables.LinetypeTable.GetEnumerator()
Return: IEnumerator<Linetype>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.LinetypeTable.GetUnusedLinetypeName()
Return: string
Modifiers: public
Summary: Gets unused linetype name used as default when creating new linetypes.

Method: Rhino.DocObjects.Tables.LinetypeTable.GetUnusedLinetypeName(bool ignoreDeleted)
Return: string
Modifiers: public
Summary: Obsolete. Use the other overload. Gets unused linetype name used as default when creating new linetypes.
Parameter: ignoreDeleted (bool)
Parameter Summary: If this is True then a name used by a deleted linetype is allowed.

Method: Rhino.DocObjects.Tables.LinetypeTable.LinetypeIndexForObject(Rhino.DocObjects.RhinoObject rhinoObject)
Return: int
Modifiers: public
Summary: Returns the effective linetype index to be used to find the linetype definition to draw an object. If an object's linetype source is LinetypeFromObject, the linetype index in the object's attributes is used. If an object's linetype source is LinetypeFromLayer the linetype index from the object's layer is used.
Parameter: rhinoObject (Rhino.DocObjects.RhinoObject)
Parameter Summary: The Rhino object to use in the query.

Method: Rhino.DocObjects.Tables.LinetypeTable.LoadDefaultLinetypes()
Return: int
Modifiers: public
Summary: Fills in the linetype table with any default linetypes not already included.

Method: Rhino.DocObjects.Tables.LinetypeTable.LoadDefaultLinetypes(bool ignoreDeleted)
Return: int
Modifiers: public
Summary: Fills in the linetype table with any default linetypes not already included.
Parameter: ignoreDeleted (bool)
Parameter Summary: Ignore default linetypes that have been deleted.

Method: Rhino.DocObjects.Tables.LinetypeTable.Modify(DocObjects.Linetype linetype, int index, bool quiet)
Return: bool
Modifiers: public
Summary: Modify linetype settings.
Parameter: linetype (DocObjects.Linetype)
Parameter Summary: New linetype settings. This information is copied.
Parameter: index (int)
Parameter Summary: Zero based index of linetype to set.
Parameter: quiet (bool)
Parameter Summary: if true, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.LinetypeTable.SetCurrentLinetypeIndex(int linetypeIndex, bool quiet)
Return: bool
Modifiers: public
Summary: At all times, there is a "current" linetype. Unless otherwise specified, new objects are assigned to the current linetype. The current linetype is never deleted.
Parameter: linetypeIndex (int)
Parameter Summary: Value for new current linetype. 0 <= linetypeIndex < LinetypeTable.Count.
Parameter: quiet (bool)
Parameter Summary: if true, then no warning message box pops up if the current linetype request can't be satisfied.

Method: Rhino.DocObjects.Tables.LinetypeTable.Undelete(int index)
Return: bool
Modifiers: public
Summary: Restores a linetype that has been deleted.
Parameter: index (int)
Parameter Summary: A linetype index to be undeleted.

Method: Rhino.DocObjects.Tables.LinetypeTable.UndoModify(int index)
Return: bool
Modifiers: public
Summary: If the linetype has been modified and the modification can be undone, then UndoModify() will restore the linetype to its previous state.
Parameter: index (int)
Parameter Summary: Zero based index of linetype for which to undo changes.

Class: Rhino.DocObjects.Tables.LinetypeTableEventArgs
Summary: LinetypeTable event arguments 8.0

Property: Rhino.DocObjects.Tables.LinetypeTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: The document in which the event occurred.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTableEventArgs.EventType
Return: LinetypeTableEventType
Modifiers: public
Summary: The event type.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTableEventArgs.LinetypeIndex
Return: int
Modifiers: public
Summary: Index of the linetype.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTableEventArgs.NewState
Return: Linetype
Modifiers: public
Summary: The new state.
Accessors: get

Property: Rhino.DocObjects.Tables.LinetypeTableEventArgs.OldState
Return: Linetype
Modifiers: public
Summary: The old state.
Accessors: get

Class: Rhino.DocObjects.Tables.MaterialTable

Property: Rhino.DocObjects.Tables.MaterialTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialIndex
Return: int
Modifiers: public
Summary: At all times, there is a "current" material.  Unless otherwise specified, new objects are assigned to the current material. The current material is never locked, hidden, or deleted.
Accessors: get set

Property: Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialSource
Return: ObjectMaterialSource
Modifiers: public
Summary: Gets or sets the current material source.
Accessors: get set

Property: Rhino.DocObjects.Tables.MaterialTable.this[int index]
Return: Material
Modifiers: public
Summary: Conceptually, the material table is an array of materials. The operator[] can be used to get individual materials. A material is either active or deleted and this state is reported by Material.IsDeleted.

Method: Rhino.DocObjects.Tables.MaterialTable.Add()
Return: int
Modifiers: public
Summary: Adds a new material to the table based on the default material.

Method: Rhino.DocObjects.Tables.MaterialTable.Add(Material material, bool reference)
Return: int
Modifiers: public
Summary: Adds a new material to the table based on a given material.
Parameter: material (Material)
Parameter Summary: A model of the material to be added.
Parameter: reference (bool)
Parameter Summary: True if this material is supposed to be a reference material. Reference materials are not saved in the file.

Method: Rhino.DocObjects.Tables.MaterialTable.Add(Material material)
Return: int
Modifiers: public
Summary: Adds a new material to the table based on a given material.
Parameter: material (Material)
Parameter Summary: A model of the material to be added.

Method: Rhino.DocObjects.Tables.MaterialTable.Delete(Material item)
Return: bool
Modifiers: public, override

Method: Rhino.DocObjects.Tables.MaterialTable.DeleteAt(int materialIndex)
Return: bool
Modifiers: public
Summary: Removes a material at a specific position from this material table.
Parameter: materialIndex (int)
Parameter Summary: The position to be removed.

Method: Rhino.DocObjects.Tables.MaterialTable.Find(Material material, bool ignoreDeletedMaterials)
Return: int
Modifiers: public
Summary: Finds a material index.
Parameter: material (Material)
Parameter Summary: Material to search for.
Parameter: ignoreDeletedMaterials (bool)
Parameter Summary: True means don't search deleted materials.

Method: Rhino.DocObjects.Tables.MaterialTable.Find(string materialName, bool ignoreDeletedMaterials)
Return: int
Modifiers: public
Summary: Finds a material with a given name.
Parameter: materialName (string)
Parameter Summary: Name of the material to search for. The search ignores case.
Parameter: ignoreDeletedMaterials (bool)
Parameter Summary: True means don't search deleted materials.

Method: Rhino.DocObjects.Tables.MaterialTable.Find(System.Guid materialId, bool ignoreDeletedMaterials)
Return: int
Modifiers: public
Summary: Finds a material with a matching id.
Parameter: materialId (System.Guid)
Parameter Summary: A material ID to be found.
Parameter: ignoreDeletedMaterials (bool)
Parameter Summary: If true, deleted materials are not checked.

Method: Rhino.DocObjects.Tables.MaterialTable.FindIndex(int index)
Return: Material
Modifiers: public
Summary: Retrieves a Material object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.DocObjects.Tables.MaterialTable.Modify(Material newSettings, int materialIndex, bool quiet)
Return: bool
Modifiers: public
Summary: Modify material settings.
Parameter: newSettings (Material)
Parameter Summary: This information is copied.
Parameter: materialIndex (int)
Parameter Summary: zero based index of material to set.  This must be in the range 0 <= layerIndex < MaterialTable.Count.
Parameter: quiet (bool)
Parameter Summary: if true, information message boxes pop up when illegal changes are attempted.

Method: Rhino.DocObjects.Tables.MaterialTable.ResetMaterial(int materialIndex)
Return: bool
Modifiers: public

Class: Rhino.DocObjects.Tables.MaterialTableEventArgs

Property: Rhino.DocObjects.Tables.MaterialTableEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.MaterialTableEventArgs.EventType
Return: MaterialTableEventType
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.MaterialTableEventArgs.Index
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.MaterialTableEventArgs.OldSettings
Return: Material
Modifiers: public
Accessors: get

Class: Rhino.DocObjects.Tables.NamedConstructionPlaneTable
Summary: Contains all named construction planes in a rhino document.
This class cannot be inherited.

Property: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Count
Return: int
Modifiers: public
Summary: Number of construction planes in the table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Gets the document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.this[int index]
Return: ConstructionPlane
Modifiers: public
Summary: Conceptually, the named construction plane table is an array of ConstructionPlanes and their associated names. The operator[] can be used to get individual ConstructionPlanes.

Method: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Add(string name, Geometry.Plane plane)
Return: int
Modifiers: public
Summary: Adds named construction plane to document.
Parameter: name (string)
Parameter Summary: If name is empty, a unique name is automatically created. If there is already a named construction plane with the same name, that construction plane is replaced.
Parameter: plane (Geometry.Plane)
Parameter Summary: The plane value.

Method: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(int index)
Return: bool
Modifiers: public
Summary: Remove named construction plane from the document.
Parameter: index (int)
Parameter Summary: zero based array index.

Method: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(string name)
Return: bool
Modifiers: public
Summary: Remove named construction plane from the document.
Parameter: name (string)
Parameter Summary: name of the construction plane.

Method: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Find(string name)
Return: int
Modifiers: public
Summary: Finds a named construction plane.
Parameter: name (string)
Parameter Summary: Name of construction plane to search for.

Method: Rhino.DocObjects.Tables.NamedConstructionPlaneTable.GetEnumerator()
Return: IEnumerator<ConstructionPlane>
Modifiers: public

Class: Rhino.DocObjects.Tables.NamedLayerStateTable
Summary: All named layer states in a Rhino document.

Property: Rhino.DocObjects.Tables.NamedLayerStateTable.Count
Return: int
Modifiers: public
Summary: Returns the number of named layers states in the document.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedLayerStateTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedLayerStateTable.Names
Return: string[]
Modifiers: public
Summary: Returns the names of named layer states in the document.
Accessors: get

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Delete(string name)
Return: bool
Modifiers: public
Summary: Deletes an existing named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.FindName(string name)
Return: int
Modifiers: public
Summary: Returns the index of an existing named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Import(string filename)
Return: int
Modifiers: public
Summary: Imports named layer states from a 3dm file.
Parameter: filename (string)
Parameter Summary: The name of the file to import.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Rename(string oldName, string newName)
Return: bool
Modifiers: public
Summary: Renames an existing named layer state.
Parameter: oldName (string)
Parameter Summary: The name of the layer state.
Parameter: newName (string)
Parameter Summary: The new name

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Restore(string name, RestoreLayerProperties properties, System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Restores a named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state.
Parameter: properties (RestoreLayerProperties)
Parameter Summary: The layer properties to restore.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the layout or detail viewport to restore the per-viewport layer properties.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Restore(string name, RestoreLayerProperties properties)
Return: bool
Modifiers: public
Summary: Restores a named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state.
Parameter: properties (RestoreLayerProperties)
Parameter Summary: The layer properties to restore.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Save(string name, System.Guid viewportId)
Return: int
Modifiers: public
Summary: Saves or updates a named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state. If the named layer state already exists, it will be updated.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the layout or detail viewport, required to save per viewport layer state properties.

Method: Rhino.DocObjects.Tables.NamedLayerStateTable.Save(string name)
Return: int
Modifiers: public
Summary: Saves or updates a named layer state.
Parameter: name (string)
Parameter Summary: The name of the layer state. If the named layer state already exists, it will be updated.

Class: Rhino.DocObjects.Tables.NamedPositionTable
Summary: All named positions in a rhino document.

Property: Rhino.DocObjects.Tables.NamedPositionTable.Count
Return: int
Modifiers: public
Summary: Number of Named Positions in the table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedPositionTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedPositionTable.Ids
Return: Guid[]
Modifiers: public
Summary: Array of Named Position Guids.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedPositionTable.Names
Return: string[]
Modifiers: public
Summary: Array of Named Position names.
Accessors: get

Method: Rhino.DocObjects.Tables.NamedPositionTable.Append(string name, IEnumerable<Guid> objectIds)
Return: bool
Modifiers: public
Summary: Append objects to a Named Position.
Parameter: name (string)
Parameter Summary: Name of the Named Position which you want to append to.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: New object Guids to be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Append(string name, IEnumerable<RhinoObject> objects)
Return: bool
Modifiers: public
Summary: Append objects to a Named Position.
Parameter: name (string)
Parameter Summary: Name of the Named Position which you want to append to.
Parameter: objects (IEnumerable<RhinoObject>)
Parameter Summary: Collection of Rhino Objects to be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Append(System.Guid id, IEnumerable<Guid> objectIds)
Return: bool
Modifiers: public
Summary: Append objects to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position which you want to append to.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: New object ids to be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Append(System.Guid id, IEnumerable<RhinoObject> objects)
Return: bool
Modifiers: public
Summary: Append objects to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position which you want to append to.
Parameter: objects (IEnumerable<RhinoObject>)
Parameter Summary: Collection of Rhino Objects to be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Delete(string name)
Return: bool
Modifiers: public
Summary: Delete a Named Position.
Parameter: name (string)
Parameter Summary: Name of the Named Position which you want to delete.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Delete(System.Guid id)
Return: bool
Modifiers: public
Summary: Delete a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position which you want to delete.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Id(string name)
Return: System.Guid
Modifiers: public
Summary: Guid of a Named Position.
Parameter: name (string)
Parameter Summary: Name of the Named Position for which you want to retrieve the Guid.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Name(System.Guid id)
Return: string
Modifiers: public
Summary: Name of a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position for which you want to retrieve the name.

Method: Rhino.DocObjects.Tables.NamedPositionTable.ObjectIds(string name)
Return: System.Guid[]
Modifiers: public
Summary: Array of Rhino Object Guids related to a Named Position.
Parameter: name (string)
Parameter Summary: The name of the Named Position from which you want to retrieve the objects.

Method: Rhino.DocObjects.Tables.NamedPositionTable.ObjectIds(System.Guid id)
Return: System.Guid[]
Modifiers: public
Summary: Array of Rhino Object Guids related to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: The Guid of the named position from which you want to retrieve the objects.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Objects(string name)
Return: RhinoObject[]
Modifiers: public
Summary: Array of Rhino Objects related to a Named Position.
Parameter: name (string)
Parameter Summary: The name of the Named Position from which you want to retrieve the objects.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Objects(System.Guid id)
Return: RhinoObject[]
Modifiers: public
Summary: Array of Rhino Objects related to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: The Guid of the named position from which you want to retrieve the objects.

Method: Rhino.DocObjects.Tables.NamedPositionTable.ObjectXform(System.Guid id, RhinoObject obj, ref Geometry.Transform xform)
Return: bool
Modifiers: public
Summary: Retrieve the Transform of a Rhino Object relate to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: The Guid of the Named Position
Parameter: obj (RhinoObject)
Parameter Summary: The Rhino Object from which to retrieve the Transform.
Parameter: xform (Geometry.Transform)
Parameter Summary: The Transform to retrieve.

Method: Rhino.DocObjects.Tables.NamedPositionTable.ObjectXform(System.Guid id, System.Guid objId, ref Geometry.Transform xform)
Return: bool
Modifiers: public
Summary: Retrieve the Transform of a Rhino Object relate to a Named Position.
Parameter: id (System.Guid)
Parameter Summary: The Guid of the Named Position
Parameter: objId (System.Guid)
Parameter Summary: The Guid of the Rhino Object from which to retrieve the Transform.
Parameter: xform (Geometry.Transform)
Parameter Summary: The Transform to retrieve.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Rename(string oldName, string name)
Return: bool
Modifiers: public
Summary: Rename a Named Position.
Parameter: oldName (string)
Parameter Summary: Current name of the Named Position which you want to rename.
Parameter: name (string)
Parameter Summary: New name for the Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Rename(System.Guid id, string name)
Return: bool
Modifiers: public
Summary: Rename a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position which you want to rename.
Parameter: name (string)
Parameter Summary: New name for the Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Restore(string name)
Return: bool
Modifiers: public
Summary: Restore a Named Position.
Parameter: name (string)
Parameter Summary: Name of the Named Position to restore.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Restore(System.Guid id)
Return: bool
Modifiers: public
Summary: Restore a Named Position.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position to restore.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Save(string name, IEnumerable<Guid> objectIds)
Return: System.Guid
Modifiers: public
Summary: Save a new Named Position.
Parameter: name (string)
Parameter Summary: Name for this Named Position.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: Array of Rhino Object Ids which should be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Save(string name, IEnumerable<RhinoObject> objects)
Return: System.Guid
Modifiers: public
Summary: Save a new Named Position.
Parameter: name (string)
Parameter Summary: Name for this Named Position.
Parameter: objects (IEnumerable<RhinoObject>)
Parameter Summary: Array of Rhino Objects which should be included in this Named Position.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Update(string name)
Return: bool
Modifiers: public
Summary: Updates a Named Position, effectively storing the current positions of the objects which the Named Position is tracking.
Parameter: name (string)
Parameter Summary: Name of the Named Position which you want to update.

Method: Rhino.DocObjects.Tables.NamedPositionTable.Update(System.Guid id)
Return: bool
Modifiers: public
Summary: Updates a Named Position, effectively storing the current positions of the objects which the Named Position is tracking.
Parameter: id (System.Guid)
Parameter Summary: Guid of the Named Position which you want to update.

Class: Rhino.DocObjects.Tables.NamedViewTable
Summary: All named views in a rhino document.

Property: Rhino.DocObjects.Tables.NamedViewTable.Count
Return: int
Modifiers: public
Summary: Number of named views in the table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedViewTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedViewTable.Selection
Return: string[]
Modifiers: public
Summary: Returns the current selection in the Named Views panel. If more than one such panel is open, it will return the selection in the most recently opened panel.
Accessors: get

Property: Rhino.DocObjects.Tables.NamedViewTable.this[int index]
Return: ViewInfo
Modifiers: public
Summary: Conceptually, the named view table is an array of ViewInfo and their associated names. The indexing operator ([] in C#) can be used to get individual ViewInfo items.

Method: Rhino.DocObjects.Tables.NamedViewTable.Add(string name, System.Guid viewportId)
Return: int
Modifiers: public
Summary: Adds named view to document which is based on an existing viewport.
Parameter: name (string)
Parameter Summary: If name is empty, a unique name is automatically created. If there is already a named view with the same name, that view is replaced.
Parameter: viewportId (System.Guid)
Parameter Summary: Id of an existing viewport in the document. View information is copied from this viewport.

Method: Rhino.DocObjects.Tables.NamedViewTable.Add(ViewInfo view)
Return: int
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.Delete(int index)
Return: bool
Modifiers: public
Summary: Remove named view from the document.
Parameter: index (int)
Parameter Summary: index of the named view in the named view table.

Method: Rhino.DocObjects.Tables.NamedViewTable.Delete(string name)
Return: bool
Modifiers: public
Summary: Remove named view from the document.
Parameter: name (string)
Parameter Summary: name of the view.

Method: Rhino.DocObjects.Tables.NamedViewTable.FindByName(string name)
Return: int
Modifiers: public
Summary: Finds a named view.
Parameter: name (string)
Parameter Summary: name to search for.

Method: Rhino.DocObjects.Tables.NamedViewTable.GetEnumerator()
Return: IEnumerator<ViewInfo>
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.Rename(int index, string newName)
Return: bool
Modifiers: public
Summary: Renames a named view.
Parameter: index (int)
Parameter Summary: Index of the named view in the named view table.
Parameter: newName (string)
Parameter Summary: The new name.

Method: Rhino.DocObjects.Tables.NamedViewTable.Rename(string oldName, string newName)
Return: bool
Modifiers: public
Summary: Renames a named view.
Parameter: oldName (string)
Parameter Summary: The name of a named view in the named view table.
Parameter: newName (string)
Parameter Summary: The new name.

Method: Rhino.DocObjects.Tables.NamedViewTable.Restore(int index, Display.RhinoView view, bool backgroundBitmap)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.Restore(int index, Display.RhinoViewport viewport, bool backgroundBitmap)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.Restore(int index, Display.RhinoViewport viewport)
Return: bool
Modifiers: public
Summary: Sets the MainViewport of a standard RhinoView to a named views settings

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimated(int index, Display.RhinoView view, bool backgroundBitmap, int frames, int frameRate)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimated(int index, Display.RhinoView view, bool backgroundBitmap)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimated(int index, Display.RhinoViewport viewport, bool backgroundBitmap, int frames, int frameRate)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimated(int index, Display.RhinoViewport viewport, bool backgroundBitmap)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimatedConstantSpeed(int index, Display.RhinoViewport viewport, double units_per_frame, int ms_delay)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreAnimatedConstantTime(int index, Display.RhinoViewport viewport, int frames, int ms_delay)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.NamedViewTable.RestoreWithAspectRatio(int index, Display.RhinoViewport viewport)
Return: bool
Modifiers: public

Class: Rhino.DocObjects.Tables.ObjectTable

Property: Rhino.DocObjects.Tables.ObjectTable.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box for all objects (normal, locked and hidden) in this document that exist in "model" space. This bounding box does not include objects that exist in layout space.
Accessors: get

Property: Rhino.DocObjects.Tables.ObjectTable.BoundingBoxVisible
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box for all visible objects (normal and locked) in this document that exist in "model" space. This bounding box does not include hidden objects or any objects that exist in layout space.
Accessors: get

Property: Rhino.DocObjects.Tables.ObjectTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Accessors: get

Property: Rhino.DocObjects.Tables.ObjectTable.Document
Return: RhinoDoc
Modifiers: public, new
Summary: Gets the document that owns this object table.
Accessors: get

Property: Rhino.DocObjects.Tables.ObjectTable.HistoryRecordCount
Return: int
Modifiers: public
Summary: Returns the amount of history records in this document.
Accessors: get

Method: Rhino.DocObjects.Tables.ObjectTable.Add(GeometryBase geometry, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds geometry that is not further specified.
This is meant, for example, to handle addition of sets of different geometrical entities. | Since: 6.0 | Parameter: geometry (GeometryBase) | Parameter Summary: The base geometry. This cannot be null. | Parameter: attributes (ObjectAttributes) | Parameter Summary: The object attributes. This can be null. | Parameter: history (HistoryRecord) | Parameter Summary: The history information that will be saved. | Parameter: reference (bool) | Parameter Summary: If reference is true, object will not be saved in the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.Add(GeometryBase geometry, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds geometry that is not further specified.
This is meant, for example, to handle addition of sets of different geometrical entities. | Since: 5.0 | Parameter: geometry (GeometryBase) | Parameter Summary: The base geometry. This cannot be null. | Parameter: attributes (ObjectAttributes) | Parameter Summary: The object attributes. This can be null.

Method: Rhino.DocObjects.Tables.ObjectTable.Add(GeometryBase geometry)
Return: System.Guid
Modifiers: public
Summary: Adds geometry that is not further specified.
This is meant, for example, to handle addition of sets of different geometrical entities. | Since: 5.0 | Parameter: geometry (GeometryBase) | Parameter Summary: The base geometry. This cannot be null.

Method: Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(AngularDimension dimension, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds an angular dimension object to the document.
Parameter: dimension (AngularDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(AngularDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a angular dimension object to the document.
Parameter: dimension (AngularDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.AddAngularDimension(AngularDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds a angular dimension object to the document.
Parameter: dimension (AngularDimension)
Parameter Summary: Dimension object to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddArc(Arc arc, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddArc(Arc arc, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an arc.
Parameter: arc (Arc)
Parameter Summary: An arc value.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to arc.

Method: Rhino.DocObjects.Tables.ObjectTable.AddArc(Arc arc)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an arc.
Parameter: arc (Arc)
Parameter Summary: An arc value.

Method: Rhino.DocObjects.Tables.ObjectTable.AddBox(Box box, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a box to the object table, as an extrusion.
Parameter: box (Box)
Parameter Summary: The box.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the surface object.
Parameter: history (HistoryRecord)
Parameter Summary: History data records.
Parameter: reference (bool)
Parameter Summary: If a reference, object will not be saved in the document.

Method: Rhino.DocObjects.Tables.ObjectTable.AddBox(Box box, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a box to the object table.
Parameter: box (Box)
Parameter Summary: The box.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the surface object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddBox(Box box)
Return: System.Guid
Modifiers: public
Summary: Adds a box to the object table.
Parameter: box (Box)
Parameter Summary: The box.

Method: Rhino.DocObjects.Tables.ObjectTable.AddBrep(Brep brep, ObjectAttributes attributes, HistoryRecord history, bool reference, bool splitKinkySurfaces)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddBrep(Brep brep, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddBrep(Brep brep, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a brep object to Rhino.
Parameter: brep (Brep)
Parameter Summary: A duplicate of this brep is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to brep.

Method: Rhino.DocObjects.Tables.ObjectTable.AddBrep(Brep brep)
Return: System.Guid
Modifiers: public
Summary: Adds a brep object to Rhino.
Parameter: brep (Brep)
Parameter Summary: A duplicate of this brep is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddCentermark(Centermark centermark, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds an ordinate dimension object to the document.
Parameter: centermark (Centermark)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddCircle(Circle circle, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddCircle(Circle circle, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing a circle.
Parameter: circle (Circle)
Parameter Summary: A circle value.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to circle.

Method: Rhino.DocObjects.Tables.ObjectTable.AddCircle(Circle circle)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing a circle.
Parameter: circle (Circle)
Parameter Summary: A circle value.

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: The plane value.
Parameter: uMagnitude (double)
Parameter Summary: The size in the U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in the V direction.
Parameter: clippedViewportIds (IEnumerable<Guid>)
Parameter Summary: A list, an array or any enumerable set of viewport IDs that the new clipping plane will clip.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Document attributes for the plane.

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: The plane value.
Parameter: uMagnitude (double)
Parameter Summary: The size in the U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in the V direction.
Parameter: clippedViewportIds (IEnumerable<Guid>)
Parameter Summary: A list, an array or any enumerable set of viewport IDs that the new clipping plane will clip.

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, System.Guid clippedViewportId, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, System.Guid clippedViewportId)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: The plane value.
Parameter: uMagnitude (double)
Parameter Summary: The size in the U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in the V direction.
Parameter: clippedViewportId (System.Guid)
Parameter Summary: Viewport ID that the new clipping plane will clip.

Method: Rhino.DocObjects.Tables.ObjectTable.AddClippingPlaneSurface(Geometry.ClippingPlaneSurface clippingPlane, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddCurve(Curve curve, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddCurve(Curve curve, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to Rhino.
Parameter: curve (Curve)
Parameter Summary: A curve. A duplicate of this curve is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to curve.

Method: Rhino.DocObjects.Tables.ObjectTable.AddCurve(Curve curve)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to Rhino.
Parameter: curve (Curve)
Parameter Summary: A curve. A duplicate of this curve is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Ellipse ellipse, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Ellipse ellipse, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an ellipse.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse value.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to ellipse.

Method: Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Ellipse ellipse)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an ellipse.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse value.

Method: Rhino.DocObjects.Tables.ObjectTable.AddExplodedInstancePieces(InstanceObject instance, bool explodeNestedInstances, bool deleteInstance)
Return: System.Guid[]
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(Extrusion extrusion, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(Extrusion extrusion, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an extrusion object to Rhino.
Parameter: extrusion (Extrusion)
Parameter Summary: A duplicate of this extrusion is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the extrusion object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(Extrusion extrusion)
Return: System.Guid
Modifiers: public
Summary: Adds an extrusion object to Rhino.
Parameter: extrusion (Extrusion)
Parameter Summary: A duplicate of this extrusion is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddHatch(Hatch hatch, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddHatch(Hatch hatch, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddHatch(Hatch hatch)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(int instanceDefinitionIndex, Transform instanceXform, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds an instance object to the document.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the instance definition.
Parameter: instanceXform (Transform)
Parameter Summary: The instance transformation.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The attributes to apply to the instance object.
Parameter: history (HistoryRecord)
Parameter Summary: The history record associated with this instance object.
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file. Reference objects do not persist in archives.

Method: Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(int instanceDefinitionIndex, Transform instanceXform, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an instance object to the document.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the instance definition.
Parameter: instanceXform (Transform)
Parameter Summary: The instance transformation.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The attributes to apply to the instance object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(int instanceDefinitionIndex, Transform instanceXform)
Return: System.Guid
Modifiers: public
Summary: Adds an instance object to the document.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the instance definition.
Parameter: instanceXform (Transform)
Parameter Summary: The instance transformation.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(Leader leader, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a Leader object to the document.
Parameter: leader (Leader)
Parameter Summary: The leader object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to rich text.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(Leader leader, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds Leader object to the document.
Parameter: leader (Leader)
Parameter Summary: The leader object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to rich text.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(Leader leader)
Return: System.Guid
Modifiers: public
Summary: Adds a Leader object to the document.
Parameter: leader (Leader)
Parameter Summary: The leader object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(Plane plane, IEnumerable<Point2d> points, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(Plane plane, IEnumerable<Point2d> points)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(string text, IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(string text, Plane plane, IEnumerable<Point2d> points, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(string text, Plane plane, IEnumerable<Point2d> points, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLeader(string text, Plane plane, IEnumerable<Point2d> points)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLine(Line line, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: line (Line)
Parameter Summary: The line value.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to line.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLine(Line line)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLine(Point3d from, Point3d to, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddLine(Point3d from, Point3d to, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: from (Point3d)
Parameter Summary: The line origin.
Parameter: to (Point3d)
Parameter Summary: The line end.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to line.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLine(Point3d from, Point3d to)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: from (Point3d)
Parameter Summary: The line origin.
Parameter: to (Point3d)
Parameter Summary: The line end.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(LinearDimension dimension, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a linear dimension object to the document.
Parameter: dimension (LinearDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(LinearDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a linear dimension object to the document.
Parameter: dimension (LinearDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(LinearDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds a linear dimension object to the document.
Parameter: dimension (LinearDimension)
Parameter Summary: Dimension object to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddMesh(Geometry.Mesh mesh)
Return: System.Guid
Modifiers: public
Summary: Adds a mesh object to Rhino.
Parameter: mesh (Geometry.Mesh)
Parameter Summary: A duplicate of this mesh is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddMesh(Mesh mesh, ObjectAttributes attributes, HistoryRecord history, bool reference, bool requireValidMesh)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddMesh(Mesh mesh, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddMesh(Mesh mesh, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a mesh object to Rhino.
Parameter: mesh (Mesh)
Parameter Summary: A duplicate of this mesh is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the mesh object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(MorphControl morphControl, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(MorphControl morphControl, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddMorphControl(MorphControl morphControl)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddOrderedPointCloud(int xCt, int yCt, int zCt, Point3d min, Point3d max, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: xCt (int)
Parameter Summary: Number of points in X dir.
Parameter: yCt (int)
Parameter Summary: Number of points in Y dir.
Parameter: zCt (int)
Parameter Summary: Number of points in Z dir.
Parameter: min (Point3d)
Parameter Summary: point at x0,y0,z0 of bounding box of the pointcloud
Parameter: max (Point3d)
Parameter Summary: point at x1,y1,z1 of bounding box of the pointcloud
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud. None is acceptable
Parameter: history (HistoryRecord)
Parameter Summary: history associated with this point cloud. None is acceptable
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file.  Reference objects do not persist in archives

Method: Rhino.DocObjects.Tables.ObjectTable.AddOrdinateDimension(Geometry.OrdinateDimension dimordinate, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds an ordinate dimension object to the document.
Parameter: dimordinate (Geometry.OrdinateDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPictureFrame(Plane plane, string texturePath, bool asMesh, double width, double height, bool selfIllumination, bool embedBitmap)
Return: System.Guid
Modifiers: public
Summary: Creates a PictureFrame object from a plane and a path to an image file, Note, a PictureFrame object is just a Plane surface or mesh that has a material with a texture assigned to it that displays in all display modes.
Parameter: plane (Plane)
Parameter Summary: Plane in which the PictureFrame will be created.  Bottom left corner of picture will be at plane's origin, width will be in the plane's x axis direction, height will be in the plane's y axis direction.
Parameter: texturePath (string)
Parameter Summary: path to an image file
Parameter: asMesh (bool)
Parameter Summary: If true, the function will make a MeshObject rather than a surface
Parameter: width (double)
Parameter Summary: Width of the resulting PictureFrame. If 0.0, the width of the picture frame is the width of the image if height is also 0.0 or calculated from the height and aspect ratio of the image if height is not 0.0.
Parameter: height (double)
Parameter Summary: Height of the resulting PictureFrame. If 0.0, the height of the picture frame is the height of the image if width is also 0.0 or calculated from the width and aspect ratio of the image if width is not 0.0.
Parameter: selfIllumination (bool)
Parameter Summary: If true, the image mapped to the picture frame plane always displays at full intensity and is not affected by light or shadow.
Parameter: embedBitmap (bool)
Parameter Summary: If true, the function adds the image to the bitmap table of the document to which the PictureFrame will be added

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(double x, double y, double z)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: x (double)
Parameter Summary: X component of point coordinate.
Parameter: y (double)
Parameter Summary: Y component of point coordinate.
Parameter: z (double)
Parameter Summary: Z component of point coordinate.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point point, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a point object and its geometry-linked information to the document
Parameter: point (Point)
Parameter Summary: A point geometry class.
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to point. None is acceptable
Parameter: history (HistoryRecord)
Parameter Summary: history associated with this point. None is acceptable
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file.  Reference objects do not persist in archives

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point3d point, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document
Parameter: point (Point3d)
Parameter Summary: location of point
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to point. None is acceptable
Parameter: history (HistoryRecord)
Parameter Summary: history associated with this point. None is acceptable
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file.  Reference objects do not persist in archives

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point3d point, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3d)
Parameter Summary: location of point.
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to point. None is acceptable

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point3d point)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3d)
Parameter Summary: location of point.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point3f point, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3f)
Parameter Summary: location of point.
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to point.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoint(Point3f point)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3f)
Parameter Summary: location of point.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(IEnumerable<Point3d> points, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of points
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud. None is acceptable
Parameter: history (HistoryRecord)
Parameter Summary: history associated with this point cloud. None is acceptable
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file.  Reference objects do not persist in archives

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(IEnumerable<Point3d> points, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of points.
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to point cloud.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of points.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(PointCloud cloud, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: cloud (PointCloud)
Parameter Summary: PointCloud to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud. None is acceptable
Parameter: history (HistoryRecord)
Parameter Summary: history associated with this point cloud. None is acceptable
Parameter: reference (bool)
Parameter Summary: True if the object is from a reference file.  Reference objects do not persist in archives

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(PointCloud cloud, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: cloud (PointCloud)
Parameter Summary: PointCloud to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(PointCloud cloud)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: cloud (PointCloud)
Parameter Summary: PointCloud to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoints(IEnumerable<Point3d> points, ObjectAttributes attributes)
Return: RhinoList<Guid>
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point objects.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoints(IEnumerable<Point3d> points)
Return: RhinoList<Guid>
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoints(IEnumerable<Point3f> points, ObjectAttributes attributes)
Return: RhinoList<Guid>
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3f>)
Parameter Summary: Points to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to point objects.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPoints(IEnumerable<Point3f> points)
Return: RhinoList<Guid>
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3f>)
Parameter Summary: Points to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPolyline(IEnumerable<Point3d> points, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddPolyline(IEnumerable<Point3d> points, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a polyline object to Rhino.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A <b>Polyline</b> ; a list, an array, or any enumerable set of <b>Point3d</b> .
Parameter: attributes (ObjectAttributes)
Parameter Summary: attributes to apply to line.

Method: Rhino.DocObjects.Tables.ObjectTable.AddPolyline(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds a polyline object to Rhino.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A <b>Polyline</b> ; a list, an array, or any enumerable set of <b>Point3d</b> .

Method: Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(RadialDimension dimension, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a radial dimension object to the document.
Parameter: dimension (RadialDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(RadialDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(RadialDimension dimension)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRectangle(Rectangle3d rectangle, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a rectangle to the object table.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the surface object.
Parameter: history (HistoryRecord)
Parameter Summary: History data records.
Parameter: reference (bool)
Parameter Summary: If a reference, object will not be saved in the document.

Method: Rhino.DocObjects.Tables.ObjectTable.AddRectangle(Rectangle3d rectangle, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a rectangle to the object table.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the surface object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddRectangle(Rectangle3d rectangle)
Return: System.Guid
Modifiers: public
Summary: Adds a rectangle to the object table.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(BrepObject brepObject, Brep brep)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(CurveObject curveObject, Curve curve)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomBrepObject brepObject, HistoryRecord history)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomBrepObject brepObject)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomCurveObject curveObject, HistoryRecord history)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomMeshObject meshObject, HistoryRecord history)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomMeshObject meshObject)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomPointObject pointObject, HistoryRecord history)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(Custom.CustomPointObject pointObject)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(MeshObject meshObject, Mesh mesh)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddRhinoObject(PointObject pointObject, Point point)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddSphere(Sphere sphere, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddSphere(Sphere sphere, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddSphere(Sphere sphere)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddSubD(SubD subD, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a SubD object to Rhino.
Parameter: subD (SubD)
Parameter Summary: A duplicate of this SubD is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the object.
Parameter: history (HistoryRecord)
Parameter Summary: 
Parameter: reference (bool)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.AddSubD(SubD subD, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a SubD object to Rhino.
Parameter: subD (SubD)
Parameter Summary: A duplicate of this SubD is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddSubD(SubD subD)
Return: System.Guid
Modifiers: public
Summary: Adds a SubD object to Rhino.
Parameter: subD (SubD)
Parameter Summary: A duplicate of this SubD is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddSurface(Surface surface, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddSurface(Surface surface, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to Rhino.
Parameter: surface (Surface)
Parameter Summary: A duplicate of this surface is added to Rhino.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the surface object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddSurface(Surface surface)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to Rhino.
Parameter: surface (Surface)
Parameter Summary: A duplicate of this surface is added to Rhino.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes that will be linked with the object.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, TextJustification justification, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, TextJustification justification, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, TextJustification justification)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(Text3d text3d, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text3d (Text3d)
Parameter Summary: The text object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Object Attributes.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(Text3d text3d)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text3d (Text3d)
Parameter Summary: The text object to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(TextEntity text, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public
Summary: Adds a text object to the document.
Parameter: text (TextEntity)
Parameter Summary: Text object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: 
Parameter: history (HistoryRecord)
Parameter Summary: Object history to save.
Parameter: reference (bool)
Parameter Summary: If reference, then object will not be saved into the 3dm file.

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(TextEntity text, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a text object to the document.
Parameter: text (TextEntity)
Parameter Summary: Text object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.AddText(TextEntity text)
Return: System.Guid
Modifiers: public
Summary: Adds a v6_TextObject to the document.
Parameter: text (TextEntity)
Parameter Summary: Text object to add.

Method: Rhino.DocObjects.Tables.ObjectTable.AddTextDot(string text, Point3d location, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to Rhino.
Parameter: text (string)
Parameter Summary: A text string.
Parameter: location (Point3d)
Parameter Summary: A point position.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to curve.

Method: Rhino.DocObjects.Tables.ObjectTable.AddTextDot(string text, Point3d location)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to Rhino.
Parameter: text (string)
Parameter Summary: A text string.
Parameter: location (Point3d)
Parameter Summary: A point position.

Method: Rhino.DocObjects.Tables.ObjectTable.AddTextDot(TextDot dot, ObjectAttributes attributes, HistoryRecord history, bool reference)
Return: System.Guid
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.AddTextDot(TextDot dot, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to Rhino.
Parameter: dot (TextDot)
Parameter Summary: A text dot that will be copied.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to text dot.

Method: Rhino.DocObjects.Tables.ObjectTable.AddTextDot(TextDot dot)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to Rhino.
Parameter: dot (TextDot)
Parameter Summary: A text dot that will be copied.

Method: Rhino.DocObjects.Tables.ObjectTable.AllObjectsSince(uint runtimeSerialNumber)
Return: RhinoObject[]
Modifiers: public
Summary: Gets all the objects that have been added to the document since a given runtime serial number.
Parameter: runtimeSerialNumber (uint)
Parameter Summary: Runtime serial number of the last object not to include in the list.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(IEnumerable<Guid> objectIds, bool quiet)
Return: int
Modifiers: public
Summary: Deletes a collection of objects from the document.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: Ids of all objects to delete.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(ObjRef objref, bool quiet, bool ignoreModes)
Return: bool
Modifiers: public
Summary: Deletes objref.Object(). The deletion can be undone by calling UndeleteObject().
Parameter: objref (ObjRef)
Parameter Summary: objref.Object() will be deleted.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.
Parameter: ignoreModes (bool)
Parameter Summary: If true, locked and hidden objects are deleted.  If False objects that are locked, hidden, or on locked or hidden layers are not deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(ObjRef objref, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes objref.Object(). The deletion can be undone by calling UndeleteObject().
Parameter: objref (ObjRef)
Parameter Summary: objref.Object() will be deleted.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(RhinoObject obj, bool quiet, bool ignoreModes)
Return: bool
Modifiers: public
Summary: Deletes object from document. The deletion can be undone by calling UndeleteObject().
Parameter: obj (RhinoObject)
Parameter Summary: The object to delete.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.
Parameter: ignoreModes (bool)
Parameter Summary: If true, locked and hidden objects are deleted.  If False objects that are locked, hidden, or on locked or hidden layers are not deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(RhinoObject obj, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes object from document. The deletion can be undone by calling UndeleteObject().
Parameter: obj (RhinoObject)
Parameter Summary: The object to delete.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(RhinoObject item)
Return: bool
Modifiers: public, override
Summary: Deletes an object, taking into account modes and not showing error message boxes.
Parameter: item (RhinoObject)
Parameter Summary: The object to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.Delete(System.Guid objectId, bool quiet)
Return: bool
Modifiers: public
Summary: Deletes object from document. The deletion can be undone by calling UndeleteObject().
Parameter: objectId (System.Guid)
Parameter Summary: Id of the object to delete.
Parameter: quiet (bool)
Parameter Summary: If false, a message box will appear when an object cannot be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(GripObject grip)
Return: bool
Modifiers: public
Summary: Deletes a grip object.
Parameter: grip (GripObject)
Parameter Summary: The grip object to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(ObjRef gripRef)
Return: bool
Modifiers: public
Summary: Deletes a grip object.
Parameter: gripRef (ObjRef)
Parameter Summary: A reference to the grip object to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrip(System.Guid gripId)
Return: bool
Modifiers: public
Summary: Deletes a grip object.
Parameter: gripId (System.Guid)
Parameter Summary: The id of the grip object to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(IEnumerable<GripObject> grips)
Return: int
Modifiers: public
Summary: Deletes one or more grip objects.
Parameter: grips (IEnumerable<GripObject>)
Parameter Summary: The grip objects to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(IEnumerable<Guid> gripIds)
Return: int
Modifiers: public
Summary: Deletes one or more grip objects.
Parameter: gripIds (IEnumerable<Guid>)
Parameter Summary: The ids of the grip objects to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(IEnumerable<ObjRef> gripRefs)
Return: int
Modifiers: public
Summary: Deletes one or more grip objects.
Parameter: gripRefs (IEnumerable<ObjRef>)
Parameter Summary: References to the grip objects to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.DeleteGrips(RhinoObject owner, IEnumerable<int> gripIndices)
Return: int
Modifiers: public
Summary: Deletes one or more grip objects.
Parameter: owner (RhinoObject)
Parameter Summary: The owner of the grip objects.
Parameter: gripIndices (IEnumerable<int>)
Parameter Summary: The indices of the grip objects to delete.

Method: Rhino.DocObjects.Tables.ObjectTable.Duplicate(ObjRef objref)
Return: System.Guid
Modifiers: public
Summary: Duplicates the object that is referenced by objref.
Same as Transform(objref, Transform.Identity, false) | Since: 5.0 | Parameter: objref (ObjRef) | Parameter Summary: A Rhino object reference to follow for object duplication.

Method: Rhino.DocObjects.Tables.ObjectTable.Duplicate(RhinoObject obj)
Return: System.Guid
Modifiers: public
Summary: Duplicates the object that is referenced by obj.
Same as TransformObject(obj, Transform.Identityy, false) | Since: 5.0 | Parameter: obj (RhinoObject) | Parameter Summary: A Rhino object to duplicate.

Method: Rhino.DocObjects.Tables.ObjectTable.Duplicate(System.Guid objectId)
Return: System.Guid
Modifiers: public
Summary: Same as TransformObject(objref, ON_Xform.Identity, false)
Parameter: objectId (System.Guid)
Parameter Summary: An ID to an object in the document that needs to be duplicated.

Method: Rhino.DocObjects.Tables.ObjectTable.Find(System.Guid objectId)
Return: RhinoObject
Modifiers: public
Summary: Please use FindId().
Parameter: objectId (System.Guid)
Parameter Summary: Do not use this method.

Method: Rhino.DocObjects.Tables.ObjectTable.Find(uint runtimeSerialNumber)
Return: RhinoObject
Modifiers: public
Summary: Use the object runtime serial number to find a rhino object in the document. This is the value stored on RhinoObject.RuntimeObjectSerialNumber. The RhinoObject constructor sets the runtime serial number and every instance of a RhinoObject class will have a unique serial number for the duration of the Rhino application. If an object is replaced with a new object, then the new object will have a different runtime serial number. Deleted objects stored in the undo list maintain their runtime serial numbers and this function will return pointers to these objects. Call RhinoObject.IsDeleted if you need to determine if the returned object is active or deleted.  The runtime serial number is not saved in files.
Parameter: runtimeSerialNumber (uint)
Parameter Summary: Runtime serial number to search for.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(RhinoViewport viewport, IEnumerable<Point3d> region, bool inside, ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds objects bounded by a polyline region
Parameter: viewport (RhinoViewport)
Parameter Summary: viewport to use for selection
Parameter: region (IEnumerable<Point3d>)
Parameter Summary: list of points that define the
Parameter: inside (bool)
Parameter Summary: should objects returned be the ones inside of this region (or outside)
Parameter: filter (ObjectType)
Parameter Summary: filter down list by object type

Method: Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(RhinoViewport viewport, Point2d screen1, Point2d screen2, bool inside, ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds objects bounded by a region
Parameter: viewport (RhinoViewport)
Parameter Summary: viewport to use for selection
Parameter: screen1 (Point2d)
Parameter Summary: first screen corner
Parameter: screen2 (Point2d)
Parameter Summary: second screen corner
Parameter: inside (bool)
Parameter Summary: should objects returned be the ones inside of this region (or outside)
Parameter: filter (ObjectType)
Parameter Summary: filter down list by object type

Method: Rhino.DocObjects.Tables.ObjectTable.FindByDrawColor(System.Drawing.Color drawColor, bool includeLights)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all objects whose draw color matches a given color.
Parameter: drawColor (System.Drawing.Color)
Parameter Summary: The alpha value of this color is ignored.
Parameter: includeLights (bool)
Parameter Summary: True if lights should be included.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByFilter(ObjectEnumeratorSettings filter)
Return: RhinoObject[]
Modifiers: public
Summary: Same as GetObjectList but converts the result to an array.
Parameter: filter (ObjectEnumeratorSettings)
Parameter Summary: The <b>Rhino.DocObjects.ObjectEnumeratorSettings</b> filter to customize inclusion requirements.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByGroup(int groupIndex)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all RhinoObjects that are in a given group.
Parameter: groupIndex (int)
Parameter Summary: Index of group to search for.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByLayer(Layer layer)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all RhinoObjects that are in a given layer.
Parameter: layer (Layer)
Parameter Summary: Layer to search.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByLayer(string layerName)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all RhinoObjects that are in a given layer.
Parameter: layerName (string)
Parameter Summary: Name of layer to search.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByObjectType(ObjectType typeFilter)
Return: RhinoObject[]
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.FindByUserString(string key, string value, bool caseSensitive, bool searchGeometry, bool searchAttributes, ObjectEnumeratorSettings filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all objects whose UserString matches the search patterns.
Parameter: key (string)
Parameter Summary: Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: value (string)
Parameter Summary: Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: caseSensitive (bool)
Parameter Summary: If true, string comparison will be case sensitive.
Parameter: searchGeometry (bool)
Parameter Summary: If true, UserStrings attached to the geometry of an object will be searched.
Parameter: searchAttributes (bool)
Parameter Summary: If true, UserStrings attached to the attributes of an object will be searched.
Parameter: filter (ObjectEnumeratorSettings)
Parameter Summary: <b>Rhino.DocObjects.ObjectEnumeratorSettings</b> filter used to restrict the number of objects searched.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByUserString(string key, string value, bool caseSensitive, bool searchGeometry, bool searchAttributes, ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all objects whose UserString matches the search patterns.
Parameter: key (string)
Parameter Summary: Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: value (string)
Parameter Summary: Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: caseSensitive (bool)
Parameter Summary: If true, string comparison will be case sensitive.
Parameter: searchGeometry (bool)
Parameter Summary: If true, UserStrings attached to the geometry of an object will be searched.
Parameter: searchAttributes (bool)
Parameter Summary: If true, UserStrings attached to the attributes of an object will be searched.
Parameter: filter (ObjectType)
Parameter Summary: Object type filter.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByUserString(string key, string value, bool caseSensitive)
Return: RhinoObject[]
Modifiers: public
Summary: Finds all objects whose UserString matches the search patterns.
Parameter: key (string)
Parameter Summary: Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: value (string)
Parameter Summary: Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).
Parameter: caseSensitive (bool)
Parameter Summary: If true, string comparison will be case sensitive.

Method: Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(RhinoViewport viewport, IEnumerable<Point3d> region, bool inside, ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds objects bounded by a polyline region
Parameter: viewport (RhinoViewport)
Parameter Summary: viewport to use for selection
Parameter: region (IEnumerable<Point3d>)
Parameter Summary: list of points that define the
Parameter: inside (bool)
Parameter Summary: should objects returned be the ones inside of this region (or outside)
Parameter: filter (ObjectType)
Parameter Summary: filter down list by object type

Method: Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(RhinoViewport viewport, Point2d screen1, Point2d screen2, bool inside, ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Finds objects bounded by a polyline region
Parameter: viewport (RhinoViewport)
Parameter Summary: viewport to use for selection
Parameter: screen1 (Point2d)
Parameter Summary: first screen corner
Parameter: screen2 (Point2d)
Parameter Summary: second screen corner
Parameter: inside (bool)
Parameter Summary: should objects returned be the ones inside of this region (or outside)
Parameter: filter (ObjectType)
Parameter Summary: filter down list by object type

Method: Rhino.DocObjects.Tables.ObjectTable.FindClippingPlanesForViewport(RhinoViewport viewport)
Return: ClippingPlaneObject[]
Modifiers: public
Summary: Finds all of the clipping plane objects that actively clip a viewport.
Parameter: viewport (RhinoViewport)
Parameter Summary: The viewport in which clipping planes are searched.

Method: Rhino.DocObjects.Tables.ObjectTable.FindGeometry(System.Guid id)
Return: GeometryBase
Modifiers: public
Summary: Same as FindId, but returns the Geometry property directly, if it exists.
Parameter: id (System.Guid)
Parameter Summary: ID of object to search for.

Method: Rhino.DocObjects.Tables.ObjectTable.FindId(System.Guid id)
Return: RhinoObject
Modifiers: public, override
Summary: Uses the object guid to find a rhino object. Deleted objects cannot be found by id.     The guid is the value that is stored on RhinoObject.Id In a single document, no two active objects have the same guid. If an object is replaced with a new object, then the guid  persists. For example, if the _Move command moves an object, then the moved object inherits it's guid from the starting object. If the Copy command copies an object, then the copy gets a new guid. This guid persists through file saving/opening operations. This function will not find grip objects.
Parameter: id (System.Guid)
Parameter Summary: ID of object to search for.

Method: Rhino.DocObjects.Tables.ObjectTable.GetEnumerator()
Return: IEnumerator<RhinoObject>
Modifiers: public, override

Method: Rhino.DocObjects.Tables.ObjectTable.GetObjectList(ObjectEnumeratorSettings settings)
Return: IEnumerable<RhinoObject>
Modifiers: public
Summary: Returns an enumerable based on a <b>Rhino.DocObjects.ObjectEnumeratorSettings</b> filter.
Parameter: settings (ObjectEnumeratorSettings)
Parameter Summary: The <b>Rhino.DocObjects.ObjectEnumeratorSettings</b> settings.

Method: Rhino.DocObjects.Tables.ObjectTable.GetObjectList(ObjectType typeFilter)
Return: IEnumerable<RhinoObject>
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.GetObjectList(System.Type typeFilter)
Return: IEnumerable<RhinoObject>
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.GetObjectsByType()
Return: IEnumerable<T>
Modifiers: public
Summary: Returns Rhino object by type.

Method: Rhino.DocObjects.Tables.ObjectTable.GetObjectsByType(ObjectEnumeratorSettings settings)
Return: IEnumerable<T>
Modifiers: public
Summary: Returns Rhino object by type.

Method: Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjectCount(bool checkSubObjects)
Return: uint
Modifiers: public
Summary: Compute the current number of selected objects
Parameter: checkSubObjects (bool)
Parameter Summary: Check to see if subobjects are selected

Method: Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjects(bool includeLights, bool includeGrips)
Return: IEnumerable<RhinoObject>
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.GetSelectedObjectTypes()
Return: ObjectType
Modifiers: public
Summary: What geometry types are currently selected

Method: Rhino.DocObjects.Tables.ObjectTable.GripUpdate(RhinoObject obj, bool deleteOriginal)
Return: RhinoObject
Modifiers: public
Summary: Altered grip positions on a RhinoObject are used to calculate an updated object that is added to the document.
Parameter: obj (RhinoObject)
Parameter Summary: object with modified grips to update.
Parameter: deleteOriginal (bool)
Parameter Summary: if true, obj is deleted from the document.

Method: Rhino.DocObjects.Tables.ObjectTable.Hide(ObjRef objref, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If objref.Object().IsNormal() is true, then the object will be hidden.
Parameter: objref (ObjRef)
Parameter Summary: reference to object to hide.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be hidden even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Hide(RhinoObject obj, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If obj.IsNormal() is true, then the object will be hidden.
Parameter: obj (RhinoObject)
Parameter Summary: object to hide.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be hidden even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Hide(System.Guid objectId, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If Object().IsNormal() is true, then the object will be hidden.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to hide.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be hidden even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.InvalidateBoundingBox()
Return: void
Modifiers: public
Summary: Destroys the cached scene bounding box so that it will be regenerated again from scratch next time the view is regenerated

Method: Rhino.DocObjects.Tables.ObjectTable.Lock(ObjRef objref, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If objref.Object().IsNormal() is true, then the object will be locked.
Parameter: objref (ObjRef)
Parameter Summary: reference to normal object to lock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be locked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Lock(RhinoObject obj, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If obj.IsNormal() is true, then the object will be locked.
Parameter: obj (RhinoObject)
Parameter Summary: normal object to lock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be locked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Lock(System.Guid objectId, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If objref.Object().IsNormal() is true, then the object will be locked.
Parameter: objectId (System.Guid)
Parameter Summary: Id of normal object to lock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be locked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(ObjRef objref, ObjectAttributes newAttributes, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies an object's attributes.  Cannot be used to change object id.
Parameter: objref (ObjRef)
Parameter Summary: reference to object to modify.
Parameter: newAttributes (ObjectAttributes)
Parameter Summary: new attributes.
Parameter: quiet (bool)
Parameter Summary: if true, then warning message boxes are disabled.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(RhinoObject obj, ObjectAttributes newAttributes, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies an object's attributes.  Cannot be used to change object id.
Parameter: obj (RhinoObject)
Parameter Summary: object to modify.
Parameter: newAttributes (ObjectAttributes)
Parameter Summary: new attributes.
Parameter: quiet (bool)
Parameter Summary: if true, then warning message boxes are disabled.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(System.Guid objectId, ObjectAttributes newAttributes, bool quiet)
Return: bool
Modifiers: public
Summary: Modifies an object's attributes.  Cannot be used to change object id.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to modify.
Parameter: newAttributes (ObjectAttributes)
Parameter Summary: new attributes.
Parameter: quiet (bool)
Parameter Summary: if true, then warning message boxes are disabled.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(ObjRef objRef, RenderMaterial material)
Return: bool
Modifiers: public
Summary: Modifies an object's render material assignment, this will set the objects material source to ObjectMaterialSource.MaterialFromObject.
Parameter: objRef (ObjRef)
Parameter Summary: Object to modify.
Parameter: material (RenderMaterial)
Parameter Summary: Material to assign to this object.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(RhinoObject obj, RenderMaterial material)
Return: bool
Modifiers: public
Summary: Modifies an object's render material assignment, this will set the objects material source to ObjectMaterialSource.MaterialFromObject.
Parameter: obj (RhinoObject)
Parameter Summary: Object to modify.
Parameter: material (RenderMaterial)
Parameter Summary: Material to assign to this object.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(System.Guid objectId, RenderMaterial material)
Return: bool
Modifiers: public
Summary: Modifies an object's render material assignment, this will set the objects material source to ObjectMaterialSource.MaterialFromObject.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to modify.
Parameter: material (RenderMaterial)
Parameter Summary: Material to assign to this object.

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(ObjRef objRef, int channel, TextureMapping mapping)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(RhinoObject obj, int channel, TextureMapping mapping)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(System.Guid objId, int channel, TextureMapping mapping)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.MostRecentObject()
Return: RhinoObject
Modifiers: public
Summary: Gets the most recently added object that is still in the Document.

Method: Rhino.DocObjects.Tables.ObjectTable.ObjectCount(ObjectEnumeratorSettings filter)
Return: int
Modifiers: public
Summary: Returns the number objects that pass a filter.
Parameter: filter (ObjectEnumeratorSettings)
Parameter Summary: The <b>Rhino.DocObjects.ObjectEnumeratorSettings</b> filter.

Method: Rhino.DocObjects.Tables.ObjectTable.PickObjects(Input.Custom.PickContext pickContext)
Return: ObjRef[]
Modifiers: public
Summary: Pick one or more objects based on a given pick context
Parameter: pickContext (Input.Custom.PickContext)
Parameter Summary: settings used to define what is picked

Method: Rhino.DocObjects.Tables.ObjectTable.Purge(RhinoObject rhinoObject)
Return: bool
Modifiers: public
Summary: Removes object from document and deletes the pointer. Typically you will want to call Delete instead in order to keep the object on the undo list.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: A Rhino object that will be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Purge(uint runtimeSerialNumber)
Return: bool
Modifiers: public
Summary: Removes object from document and deletes the pointer. Typically you will want to call Delete instead in order to keep the object on the undo list.
Parameter: runtimeSerialNumber (uint)
Parameter Summary: A runtime serial number of the object that will be deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Arc arc)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: arc (Arc)
Parameter Summary: new arc to be added.  The arc is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Brep brep, bool splitKinkySurfaces)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Brep brep)
Return: bool
Modifiers: public
Summary: Replaces one object with new brep object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: brep (Brep)
Parameter Summary: new brep to be added A duplicate of the brep is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Circle circle)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: circle (Circle)
Parameter Summary: new circle to be added.  The circle is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Curve curve)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: curve (Curve)
Parameter Summary: New curve to be added. A duplicate of the curve is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Extrusion extrusion)
Return: bool
Modifiers: public
Summary: Replaces one object with new extrusion object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: extrusion (Extrusion)
Parameter Summary: New extrusion to be added. A duplicate of the extrusion is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, GeometryBase geometry, bool ignoreModes)
Return: bool
Modifiers: public
Summary: Replaces the geometry in one object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: geometry (GeometryBase)
Parameter Summary: 
Parameter: ignoreModes (bool)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Hatch hatch)
Return: bool
Modifiers: public
Summary: Replaces one object with new hatch object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: hatch (Hatch)
Parameter Summary: new hatch to be added. The hatch is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Leader leader)
Return: bool
Modifiers: public
Summary: Replaces one object with new text object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: leader (Leader)
Parameter Summary: new leader to be added.  The leader is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Line line)
Return: bool
Modifiers: public
Summary: Replaces one object with new line curve object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: line (Line)
Parameter Summary: new line to be added.  The line is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Mesh mesh)
Return: bool
Modifiers: public
Summary: Replaces one object with new mesh object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: mesh (Mesh)
Parameter Summary: new mesh to be added A duplicate of the mesh is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Point point)
Return: bool
Modifiers: public
Summary: Replaces one object with new point object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: point (Point)
Parameter Summary: new point to be added.  The point is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Point3d point)
Return: bool
Modifiers: public
Summary: Replaces one object with new point object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: point (Point3d)
Parameter Summary: new point to be added.  The point is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, PointCloud pointcloud)
Return: bool
Modifiers: public
Summary: Replaces one object with new point cloud object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: pointcloud (PointCloud)
Parameter Summary: new point cloud to be added A duplicate of the point cloud is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Polyline polyline)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: polyline (Polyline)
Parameter Summary: new polyline to be added.  The polyline is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, RhinoObject newObject)
Return: bool
Modifiers: public
Summary: Replaces one object with another. Conceptually, this function is the same as calling Setting new_object attributes = old_object attributes DeleteObject(old_object); AddObject(old_object);
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: newObject (RhinoObject)
Parameter Summary: new replacement object - must not be in document.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, SubD subD)
Return: bool
Modifiers: public
Summary: Replaces one object with a new SubD object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: subD (SubD)
Parameter Summary: new SubD to be added A duplicate of the SubD is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, Surface surface)
Return: bool
Modifiers: public
Summary: Replaces one object with new surface object.
Parameter: objref (ObjRef)
Parameter Summary: reference to old object to be replaced. The objref.Object() will be deleted.
Parameter: surface (Surface)
Parameter Summary: new surface to be added A duplicate of the surface is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, TextDot dot)
Return: bool
Modifiers: public
Summary: Replaces one object with new text dot object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: dot (TextDot)
Parameter Summary: new text dot to be added.  The text dot is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(ObjRef objref, TextEntity text)
Return: bool
Modifiers: public
Summary: Replaces one object with new text object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to old object to be replaced. The object objref.Object() will be deleted.
Parameter: text (TextEntity)
Parameter Summary: new text to be added.  The text is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Arc arc)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: arc (Arc)
Parameter Summary: new arc to be added.  The arc is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Brep brep, bool splitKinkySurfaces)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Brep brep)
Return: bool
Modifiers: public
Summary: Replaces one object with new brep object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: brep (Brep)
Parameter Summary: new surface to be added A duplicate of the brep is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Circle circle)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: circle (Circle)
Parameter Summary: new circle to be added.  The circle is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Curve curve)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: curve (Curve)
Parameter Summary: New curve to be added. A duplicate of the curve is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Extrusion extrusion)
Return: bool
Modifiers: public
Summary: Replaces one object with new extrusion object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: extrusion (Extrusion)
Parameter Summary: New extrusion to be added. A duplicate of the extrusion is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, GeometryBase geometry, bool ignoreModes)
Return: bool
Modifiers: public
Summary: Replaces the geometry in one object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: geometry (GeometryBase)
Parameter Summary: 
Parameter: ignoreModes (bool)
Parameter Summary:

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Hatch hatch)
Return: bool
Modifiers: public
Summary: Replaces one object with new hatch object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: hatch (Hatch)
Parameter Summary: new hatch to be added. The hatch is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Leader leader)
Return: bool
Modifiers: public
Summary: Replaces one object with new text object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: leader (Leader)
Parameter Summary: new leader to be added.  The leader is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Line line)
Return: bool
Modifiers: public
Summary: Replaces one object with new line curve object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: line (Line)
Parameter Summary: new line to be added.  The line is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Mesh mesh)
Return: bool
Modifiers: public
Summary: Replaces one object with new mesh object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: mesh (Mesh)
Parameter Summary: new mesh to be added A duplicate of the mesh is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Point point)
Return: bool
Modifiers: public
Summary: Replaces one object with new point object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: point (Point)
Parameter Summary: new point to be added.  The point is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Point3d point)
Return: bool
Modifiers: public
Summary: Replaces one object with new point object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: point (Point3d)
Parameter Summary: new point to be added.  The point is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, PointCloud pointcloud)
Return: bool
Modifiers: public
Summary: Replaces one object with new point cloud object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: pointcloud (PointCloud)
Parameter Summary: new point cloud to be added A duplicate of the point cloud is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Polyline polyline)
Return: bool
Modifiers: public
Summary: Replaces one object with new curve object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: polyline (Polyline)
Parameter Summary: new polyline to be added.  The polyline is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, SubD subD)
Return: bool
Modifiers: public
Summary: Replaces one object with new subd object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: subD (SubD)
Parameter Summary: new mesh to be added A duplicate of the mesh is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, Surface surface)
Return: bool
Modifiers: public
Summary: Replaces one object with new surface object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: surface (Surface)
Parameter Summary: new surface to be added A duplicate of the surface is added to the Rhino model.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, TextDot dot)
Return: bool
Modifiers: public
Summary: Replaces one object with new text dot object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: dot (TextDot)
Parameter Summary: new text dot to be added.  The text dot is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid objectId, TextEntity text)
Return: bool
Modifiers: public
Summary: Replaces one object with new text object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to be replaced.
Parameter: text (TextEntity)
Parameter Summary: new text to be added.  The text is copied.

Method: Rhino.DocObjects.Tables.ObjectTable.ReplaceInstanceObject(ObjRef objref, int instanceDefinitionIndex)
Return: bool
Modifiers: public
Summary: Replaces the underlying instance definition of an instance object.
Parameter: objref (ObjRef)
Parameter Summary: Reference to the instance object to be replaced. The objref.Object() will be deleted.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the new instance definition to use.

Method: Rhino.DocObjects.Tables.ObjectTable.ReplaceInstanceObject(System.Guid objectId, int instanceDefinitionIndex)
Return: bool
Modifiers: public
Summary: Replaces the underlying instance definition of an instance object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of the instance object to be replaced.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the new instance definition to use.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(IEnumerable<Guid> objectIds, bool select)
Return: int
Modifiers: public
Summary: Selects or deselects a collection of objects.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: Ids of objects to select or deselect.
Parameter: select (bool)
Parameter Summary: If true, objects will be selected. If false, objects will be deselected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(IEnumerable<Guid> objectIds)
Return: int
Modifiers: public
Summary: Selects a collection of objects.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: Ids of objects to select.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(IEnumerable<ObjRef> objRefs, bool select)
Return: int
Modifiers: public
Summary: Selects or deselects a collection of objects.
Parameter: objRefs (IEnumerable<ObjRef>)
Parameter Summary: References to objects to select or deselect.
Parameter: select (bool)
Parameter Summary: If true, objects will be selected. If false, objects will be deselected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(IEnumerable<ObjRef> objRefs)
Return: int
Modifiers: public
Summary: Selects a collection of objects.
Parameter: objRefs (IEnumerable<ObjRef>)
Parameter Summary: References to objects to select.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(ObjRef objref, bool select, bool syncHighlight, bool persistentSelect, bool ignoreGripsState, bool ignoreLayerLocking, bool ignoreLayerVisibility)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objref (ObjRef)
Parameter Summary: Object represented by this ObjRef is selected.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Parameter: persistentSelect (bool)
Parameter Summary: Objects that are persistently selected stay selected when a command terminates.
Parameter: ignoreGripsState (bool)
Parameter Summary: If true, then objects with grips on can be selected. If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected when it has grips turned on.
Parameter: ignoreLayerLocking (bool)
Parameter Summary: If true, then objects on locked layers can be selected.
Parameter: ignoreLayerVisibility (bool)
Parameter Summary: If true, then objects on hidden layers can be selectable.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(ObjRef objref, bool select, bool syncHighlight, bool persistentSelect)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objref (ObjRef)
Parameter Summary: Object represented by this ObjRef is selected.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Parameter: persistentSelect (bool)
Parameter Summary: Objects that are persistently selected stay selected when a command terminates.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(ObjRef objref, bool select, bool syncHighlight)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objref (ObjRef)
Parameter Summary: Object represented by this ObjRef is selected.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(ObjRef objref, bool select)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objref (ObjRef)
Parameter Summary: Object represented by this ObjRef is selected.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(ObjRef objref)
Return: bool
Modifiers: public
Summary: Select a single object.
Parameter: objref (ObjRef)
Parameter Summary: Object represented by this ObjRef is selected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid objectId, bool select, bool syncHighlight, bool persistentSelect, bool ignoreGripsState, bool ignoreLayerLocking, bool ignoreLayerVisibility)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to select.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Parameter: persistentSelect (bool)
Parameter Summary: Objects that are persistently selected stay selected when a command terminates.
Parameter: ignoreGripsState (bool)
Parameter Summary: If true, then objects with grips on can be selected. If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected when it has grips turned on.
Parameter: ignoreLayerLocking (bool)
Parameter Summary: If true, then objects on locked layers can be selected.
Parameter: ignoreLayerVisibility (bool)
Parameter Summary: If true, then objects on hidden layers can be selectable.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid objectId, bool select, bool syncHighlight, bool persistentSelect)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to select.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.
Parameter: persistentSelect (bool)
Parameter Summary: Objects that are persistently selected stay selected when a command terminates.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid objectId, bool select, bool syncHighlight)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to select.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.
Parameter: syncHighlight (bool)
Parameter Summary: If true, then the object is highlighted if it is selected and unhighlighted if is not selected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid objectId, bool select)
Return: bool
Modifiers: public
Summary: Select or deselects a single object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to select.
Parameter: select (bool)
Parameter Summary: If true, the object will be selected, if false, it will be deselected.

Method: Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid objectId)
Return: bool
Modifiers: public
Summary: Select a single object.
Parameter: objectId (System.Guid)
Parameter Summary: Id of object to select.

Method: Rhino.DocObjects.Tables.ObjectTable.SelectedObjectsExist(ObjectType objectType, bool checkSubObjects)
Return: bool
Modifiers: public
Summary: Quick way to test if any objects are currently selected
Parameter: objectType (ObjectType)
Parameter Summary: the type of objects to test for
Parameter: checkSubObjects (bool)
Parameter Summary: Check to see if subobjects are selected

Method: Rhino.DocObjects.Tables.ObjectTable.Show(ObjRef objref, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If objref.Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: objref (ObjRef)
Parameter Summary: reference to normal object to show.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be shown even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Show(RhinoObject obj, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If obj.IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: obj (RhinoObject)
Parameter Summary: the normal object to show.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be shown even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Show(System.Guid objectId, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: objectId (System.Guid)
Parameter Summary: Id of the normal object to show.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be shown even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Transform(ObjRef objref, Transform xform, bool deleteOriginal)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and deletes the existing object if deleteOriginal is true.
Parameter: objref (ObjRef)
Parameter Summary: reference to object to transform. The objref.Object() will be deleted if deleteOriginal is true.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.
Parameter: deleteOriginal (bool)
Parameter Summary: if true, the original object is deleted if false, the original object is not deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Transform(RhinoObject obj, Transform xform, bool deleteOriginal)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and deletes the existing object if deleteOriginal is true.
Parameter: obj (RhinoObject)
Parameter Summary: Rhino object to transform. This object will be deleted if deleteOriginal is true.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.
Parameter: deleteOriginal (bool)
Parameter Summary: if true, the original object is deleted if false, the original object is not deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.Transform(System.Guid objectId, Transform xform, bool deleteOriginal)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and deletes the existing object if deleteOriginal is true.
Parameter: objectId (System.Guid)
Parameter Summary: Id of rhino object to transform. This object will be deleted if deleteOriginal is true.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.
Parameter: deleteOriginal (bool)
Parameter Summary: if true, the original object is deleted if false, the original object is not deleted.

Method: Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(ObjRef objref, Transform xform)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and records history of the transformation if history recording is turned on. If history recording is not enabled, this function will act the same as Transform(objref, xform, false)
Parameter: objref (ObjRef)
Parameter Summary: reference to object to transform.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.

Method: Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(RhinoObject obj, Transform xform)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and records history of the transformation if history recording is turned on. If history recording is not enabled, this function will act the same as Transform(obj, xform, false)
Parameter: obj (RhinoObject)
Parameter Summary: Rhino object to transform.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.

Method: Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(System.Guid objectId, Transform xform)
Return: System.Guid
Modifiers: public
Summary: Constructs a new object that is the transformation of the existing object and records history of the transformation if history recording is turned on. If history recording is not enabled, this function will act the same as Transform(objectId, xform, false)
Parameter: objectId (System.Guid)
Parameter Summary: Id of rhino object to transform.
Parameter: xform (Transform)
Parameter Summary: transformation to apply.

Method: Rhino.DocObjects.Tables.ObjectTable.TryFindPoint(System.Guid id, out Point3d point)
Return: bool
Modifiers: public
Summary: Finds the location of a point, if a point exists in the document.
Parameter: id (System.Guid)
Parameter Summary: ID of point object to search for.
Parameter: point (Point3d)
Parameter Summary: The point will be passed here.

Method: Rhino.DocObjects.Tables.ObjectTable.Undelete(RhinoObject rhinoObject)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.Undelete(uint runtimeSerialNumber)
Return: bool
Modifiers: public

Method: Rhino.DocObjects.Tables.ObjectTable.Unlock(ObjRef objref, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If objref.Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: objref (ObjRef)
Parameter Summary: reference to locked object to unlock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be unlocked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Unlock(RhinoObject obj, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If obj.IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: obj (RhinoObject)
Parameter Summary: locked object to unlock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be unlocked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.Unlock(System.Guid objectId, bool ignoreLayerMode)
Return: bool
Modifiers: public
Summary: If Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
Parameter: objectId (System.Guid)
Parameter Summary: Id of locked object to unlock.
Parameter: ignoreLayerMode (bool)
Parameter Summary: if true, the object will be unlocked even if it is on a layer that is locked or off.

Method: Rhino.DocObjects.Tables.ObjectTable.UnselectAll()
Return: int
Modifiers: public
Summary: Unselect objects.

Method: Rhino.DocObjects.Tables.ObjectTable.UnselectAll(bool ignorePersistentSelections)
Return: int
Modifiers: public
Summary: Unselect objects.
Parameter: ignorePersistentSelections (bool)
Parameter Summary: if true, then objects that are persistently selected will not be unselected.

Class: Rhino.DocObjects.Tables.RhinoDocCommonTable<T>

Property: Rhino.DocObjects.Tables.RhinoDocCommonTable<T>.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Class: Rhino.DocObjects.Tables.RuntimeDocumentDataTable
Summary: Collection of document runtime data. This is a good place to put non-serialized, per document data.

Property: Rhino.DocObjects.Tables.RuntimeDocumentDataTable.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.Tables.RuntimeDocumentDataTable.GetValue(object key, Func<RhinoDoc, T> newT)
Return: T
Modifiers: public
Summary: Checks the dictionary for the specified key, if found and the value is not None then the value is returned.  If the key is not found or its value is None then newT(Document) is called to create a new value instance which is put in the dictionary and returned.
Parameter: key (object)
Parameter Summary: Key to search for.
Parameter: newT (Func<RhinoDoc, T>)
Parameter Summary: Function called to create new value

Method: Rhino.DocObjects.Tables.RuntimeDocumentDataTable.TryGetValue(object key)
Return: T
Modifiers: public
Summary: Check dictionary for value and return it properly cast if found.
Parameter: key (object)
Parameter Summary: Key to search for.

Class: Rhino.DocObjects.Tables.SnapshotTable
Summary: All snapshots in a rhino document.

Property: Rhino.DocObjects.Tables.SnapshotTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this table.
Accessors: get

Property: Rhino.DocObjects.Tables.SnapshotTable.Names
Return: string[]
Modifiers: public
Summary: Array of Snapshot names.
Accessors: get

Class: Rhino.DocObjects.Tables.StringTable
Summary: Collection of document user data strings

Property: Rhino.DocObjects.Tables.StringTable.Count
Return: int
Modifiers: public
Summary: The number of user data strings in the current document.
Accessors: get

Property: Rhino.DocObjects.Tables.StringTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this object table.
Accessors: get

Property: Rhino.DocObjects.Tables.StringTable.DocumentDataCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.StringTable.DocumentUserTextCount
Return: int
Modifiers: public
Accessors: get

Method: Rhino.DocObjects.Tables.StringTable.Delete(string section, string entry)
Return: void
Modifiers: public
Summary: Removes user data strings from the document.
Parameter: section (string)
Parameter Summary: name of section to delete. If null, all sections will be deleted.
Parameter: entry (string)
Parameter Summary: name of entry to delete. If null, all entries will be deleted for a given section.

Method: Rhino.DocObjects.Tables.StringTable.Delete(string key)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.StringTable.GetEntryNames(string section)
Return: string
Modifiers: public
Summary: Return list of all entry names for a given section of user data strings in the document.
Parameter: section (string)
Parameter Summary: The section from which to retrieve section names.

Method: Rhino.DocObjects.Tables.StringTable.GetKey(int i)
Return: string
Modifiers: public

Method: Rhino.DocObjects.Tables.StringTable.GetSectionNames()
Return: string
Modifiers: public
Summary: Returns a list of all the section names for user data strings in the document.
By default a section name is a key that is prefixed with a string separated by a backslash. | Since: 5.0

Method: Rhino.DocObjects.Tables.StringTable.GetValue(int i)
Return: string
Modifiers: public

Method: Rhino.DocObjects.Tables.StringTable.GetValue(string section, string entry)
Return: string
Modifiers: public
Summary: Gets a user data string from the document.
Parameter: section (string)
Parameter Summary: The section at which to get the value.
Parameter: entry (string)
Parameter Summary: The entry to search for.

Method: Rhino.DocObjects.Tables.StringTable.GetValue(string key)
Return: string
Modifiers: public

Method: Rhino.DocObjects.Tables.StringTable.SetString(string section, string entry, string value)
Return: string
Modifiers: public
Summary: Adds or sets a user data string to the document.
Parameter: section (string)
Parameter Summary: The section.
Parameter: entry (string)
Parameter Summary: The entry name.
Parameter: value (string)
Parameter Summary: The entry value.

Method: Rhino.DocObjects.Tables.StringTable.SetString(string key, string value)
Return: string
Modifiers: public
Summary: Adds or sets a user data string to the document.
Parameter: key (string)
Parameter Summary: The key.
Parameter: value (string)
Parameter Summary: The entry value.

Class: Rhino.DocObjects.Tables.ViewTable

Property: Rhino.DocObjects.Tables.ViewTable.ActiveView
Return: RhinoView
Modifiers: public
Summary: Gets or Sets the active view.
Accessors: get set

Property: Rhino.DocObjects.Tables.ViewTable.Document
Return: RhinoDoc
Modifiers: public
Summary: Document that owns this object table.
Accessors: get

Property: Rhino.DocObjects.Tables.ViewTable.ModelSpaceIsActive
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.DocObjects.Tables.ViewTable.RedrawEnabled
Return: bool
Modifiers: public
Summary: Returns or sets (enable or disables) screen redrawing.
Accessors: get set

Method: Rhino.DocObjects.Tables.ViewTable.Add(string title, DefinedViewportProjection projection, System.Drawing.Rectangle position, bool floating)
Return: RhinoView
Modifiers: public
Summary: Constructs a new Rhino view and, at the same time, adds it to the list.
Parameter: title (string)
Parameter Summary: The title of the new Rhino view.
Parameter: projection (DefinedViewportProjection)
Parameter Summary: A basic projection type.
Parameter: position (System.Drawing.Rectangle)
Parameter Summary: A position.
Parameter: floating (bool)
Parameter Summary: True if the view floats; False if it is docked.

Method: Rhino.DocObjects.Tables.ViewTable.AddPageView(string title, double pageWidth, double pageHeight)
Return: RhinoPageView
Modifiers: public
Summary: Constructs a new page view with a given title and size and, at the same time, adds it to the list.
Parameter: title (string)
Parameter Summary: If None or empty, a name will be generated as "Page #" where # is the largest page number.
Parameter: pageWidth (double)
Parameter Summary: The page total width.
Parameter: pageHeight (double)
Parameter Summary: The page total height.

Method: Rhino.DocObjects.Tables.ViewTable.AddPageView(string title)
Return: RhinoPageView
Modifiers: public
Summary: Constructs a new page view with a given title and, at the same time, adds it to the list.
Parameter: title (string)
Parameter Summary: If None or empty, a name will be generated as "Page #" where # is the largest page number.

Method: Rhino.DocObjects.Tables.ViewTable.DefaultViewLayout()
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ViewTable.EnableCameraIcon(RhinoView view)
Return: void
Modifiers: public
Summary: Use to turn camera icon on and off
Parameter: view (RhinoView)
Parameter Summary: If null, any camera icon is turned off. If not null, the camera icon for that view is turned on.

Method: Rhino.DocObjects.Tables.ViewTable.EnableRedraw(bool enable, bool redrawDocument, bool redrawLayers)
Return: void
Modifiers: public
Summary: Enables or disables screen redrawing.
Parameter: enable (bool)
Parameter Summary: Enable redrawing.
Parameter: redrawDocument (bool)
Parameter Summary: If enabling, set to True to have the document redrawn.
Parameter: redrawLayers (bool)
Parameter Summary: If enabling, set to True to have the layer user interface redrawn.

Method: Rhino.DocObjects.Tables.ViewTable.Find(string mainViewportName, bool compareCase)
Return: RhinoView
Modifiers: public
Summary: Finds a view in this document with a main viewport that has a given name. Note that there may be multiple views in this document that have the same name. This function only returns the first view found. If you want to find all the views with a given name, use the GetViewList function and iterate through the views.
Parameter: mainViewportName (string)
Parameter Summary: The name of the main viewport.
Parameter: compareCase (bool)
Parameter Summary: True if capitalization influences comparison; otherwise, false.

Method: Rhino.DocObjects.Tables.ViewTable.Find(System.Guid mainViewportId)
Return: RhinoView
Modifiers: public
Summary: Finds a view in this document with a given main viewport Id.
Parameter: mainViewportId (System.Guid)
Parameter Summary: The ID of the main viewport looked for.

Method: Rhino.DocObjects.Tables.ViewTable.FlashObjects(IEnumerable<RhinoObject> list, bool useSelectionColor)
Return: void
Modifiers: public
Summary: Cause objects selection state to change momentarily so the object appears to flash on the screen.
Parameter: list (IEnumerable<RhinoObject>)
Parameter Summary: An array, a list or any enumerable set of Rhino objects.
Parameter: useSelectionColor (bool)
Parameter Summary: If true, flash between object color and selection color. If false, flash between visible and invisible.

Method: Rhino.DocObjects.Tables.ViewTable.FourViewLayout(bool useMatchingViews)
Return: void
Modifiers: public

Method: Rhino.DocObjects.Tables.ViewTable.GetEnumerator()
Return: IEnumerator<RhinoView>
Modifiers: public

Method: Rhino.DocObjects.Tables.ViewTable.GetPageViews()
Return: RhinoPageView[]
Modifiers: public
Summary: Gets all page views in the document.

Method: Rhino.DocObjects.Tables.ViewTable.GetStandardRhinoViews()
Return: RhinoView[]
Modifiers: public

Method: Rhino.DocObjects.Tables.ViewTable.GetViewList(bool includeStandardViews, bool includePageViews)
Return: RhinoView[]
Modifiers: public
Summary: Gets an array of all the views.
Parameter: includeStandardViews (bool)
Parameter Summary: True if "Right", "Perspective", etc., view should be included; False otherwise.
Parameter: includePageViews (bool)
Parameter Summary: True if page-related views should be included; False otherwise.

Method: Rhino.DocObjects.Tables.ViewTable.GetViewList(ViewTypeFilter filter)
Return: RhinoView[]
Modifiers: public
Summary: Gets an array of all the views.
Parameter: filter (ViewTypeFilter)
Parameter Summary: View types to include

Method: Rhino.DocObjects.Tables.ViewTable.IsCameraIconVisible(RhinoView view)
Return: bool
Modifiers: public
Summary: Determine if a camera icon is being shown
Parameter: view (RhinoView)
Parameter Summary: if null, then all views are tested. If not null, then just view is tested.

Method: Rhino.DocObjects.Tables.ViewTable.Redraw()
Return: void
Modifiers: public
Summary: Redraws all views.

Method: Rhino.DocObjects.Tables.ViewTable.ThreeViewLayout(bool useMatchingViews)
Return: void
Modifiers: public

# Namespace: Rhino.FileIO

Class: Rhino.FileIO.BinaryArchiveException
Summary: Thrown by BinaryArchiveReader and BinaryArchiveWriter classes when an IO error has occurred.

Constructor: Rhino.FileIO.BinaryArchiveException.BinaryArchiveException(string message)
Summary: Initializes a new instance of the <b>BinaryArchiveException</b> class.

Class: Rhino.FileIO.BinaryArchiveFile

Constructor: Rhino.FileIO.BinaryArchiveFile.BinaryArchiveFile(string filename, BinaryArchiveMode mode)

Property: Rhino.FileIO.BinaryArchiveFile.Reader
Return: BinaryArchiveReader
Modifiers: public
Accessors: get

Property: Rhino.FileIO.BinaryArchiveFile.Writer
Return: BinaryArchiveWriter
Modifiers: public
Accessors: get

Method: Rhino.FileIO.BinaryArchiveFile.Close()
Return: void
Modifiers: public

Method: Rhino.FileIO.BinaryArchiveFile.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.FileIO.BinaryArchiveFile.Open()
Return: bool
Modifiers: public

Class: Rhino.FileIO.BinaryArchiveReader
Summary: Represents an entity that is capable of reading a binary archive and instantiating strongly-typed objects.

Property: Rhino.FileIO.BinaryArchiveReader.Archive3dmVersion
Return: int
Modifiers: public
Summary: If a 3dm archive is being read or written, then this is the version of the 3dm archive format (1, 2, 3, 4 or 5). 0     a 3dm archive is not being read/written 1     a version 1 3dm archive is being read/written 2     a version 2 3dm archive is being read/written 3     a version 3 3dm archive is being read/written 4     a version 4 3dm archive is being read/written 5     an old version 5 3dm archive is being read 50    a version 5 3dm archive is being read/written.
Accessors: get

Property: Rhino.FileIO.BinaryArchiveReader.CurrentPosition
Return: ulong
Modifiers: public
Summary: current offset (in bytes) into archive ( like ftell() )
Accessors: get

Property: Rhino.FileIO.BinaryArchiveReader.ReadErrorOccured
Return: bool
Modifiers: public
Summary: Gets or sets whether en error occurred during reading.
Accessors: get set

Method: Rhino.FileIO.BinaryArchiveReader.AtEnd()
Return: bool
Modifiers: public
Summary: True if at end of a file

Method: Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(out uint typeCode, out long value)
Return: bool
Modifiers: public
Summary: Begins reading a chunk that must be in the archive at this location.

Method: Rhino.FileIO.BinaryArchiveReader.BeginRead3dmChunk(uint expectedTypeCode, out int majorVersion, out int minorVersion)
Return: bool
Modifiers: public
Summary: Begins reading a chunk that must be in the archive at this location.

Method: Rhino.FileIO.BinaryArchiveReader.Dump3dmChunk(TextLog log)
Return: uint
Modifiers: public
Summary: Function for studying contents of a file.  The primary use is as an aid to help dig through files that have been damaged (bad disks, transmission errors, etc.) If an error is found, a line that begins with the word "ERROR" is printed.
Parameter: log (TextLog)
Parameter Summary: log where information is printed to

Method: Rhino.FileIO.BinaryArchiveReader.EnableCRCCalculation(bool enable)
Return: bool
Modifiers: public
Summary: Expert user function to control CRC calculation while reading and writing. Typically this is used when seeking around and reading/writing information in non-serial order.

Method: Rhino.FileIO.BinaryArchiveReader.EndRead3dmChunk(bool suppressPartiallyReadChunkWarning)
Return: bool
Modifiers: public
Summary: Calling this will skip rest of stuff in chunk if it was only partially read.
Parameter: suppressPartiallyReadChunkWarning (bool)
Parameter Summary: Generally, a call to ON_WARNING is made when a chunk is partially read. If suppressPartiallyReadChunkWarning is true, then no warning is issued for partially read chunks.

Method: Rhino.FileIO.BinaryArchiveReader.Read3dmChunkVersion(out int major, out int minor)
Return: void
Modifiers: public
Summary: A chunk version is a single byte that encodes a major.minor version number.  Useful when creating I/O code for 3dm chunks that may change in the future.  Increment the minor version number if new information is added to the end of the chunk. Increment the major version if the format of the chunk changes in some other way.
Parameter: major (int)
Parameter Summary: 0 to 15.
Parameter: minor (int)
Parameter Summary: 0 to 16.

Method: Rhino.FileIO.BinaryArchiveReader.Read3dmStartSection(out int version, out string comment)
Return: bool
Modifiers: public
Parameter: version (int)
Parameter Summary: .3dm file version (2, 3, 4, 5 or 50)
Parameter: comment (string)
Parameter Summary: String with application name, et cetera.  This information is primarily used when debugging files that contain problems.  McNeel and Associates stores application name, application version, compile date, and the OS in use when file was written.

Method: Rhino.FileIO.BinaryArchiveReader.ReadBool()
Return: bool
Modifiers: public
Summary: Reads a <b>bool</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadBoolArray()
Return: bool
Modifiers: public
Summary: Reads an array of <b>bool</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadBoundingBox()
Return: Geometry.BoundingBox
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.BoundingBox</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadByte()
Return: byte
Modifiers: public
Summary: Reads a <b>byte</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadByteArray()
Return: byte
Modifiers: public
Summary: Reads an array of <b>byte</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadCheckSum()
Return: void
Modifiers: public
Summary: Reads a legacy ON_CheckSum, only provided to read data chunks from old V5 files, the CheckSum read is discarded

Method: Rhino.FileIO.BinaryArchiveReader.ReadColor()
Return: System.Drawing.Color
Modifiers: public
Summary: Reads a <b>System.Drawing.Color</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadCompressedBuffer()
Return: byte
Modifiers: public
Summary: Reads an array of compressed <b>byte</b> information from the archive and uncompresses it.
An array is returned even if the input was another enumerable type. | Since: 5.9

Method: Rhino.FileIO.BinaryArchiveReader.ReadDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Reads a complete <b>Rhino.Collections.ArchivableDictionary</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadDouble()
Return: double
Modifiers: public
Summary: Reads a <b>double</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadDoubleArray()
Return: double
Modifiers: public
Summary: Reads an array of <b>double</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadFont()
Return: System.Drawing.Font
Modifiers: public
Summary: Reads a <b>System.Drawing.Font</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadGeometry()
Return: Geometry.GeometryBase
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.GeometryBase</b> -derived object from the archive.
The  class is abstract. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadGeometryArray()
Return: Geometry.GeometryBase[]
Modifiers: public

Method: Rhino.FileIO.BinaryArchiveReader.ReadGuid()
Return: System.Guid
Modifiers: public
Summary: Reads a <b>Guid</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadGuidArray()
Return: System.Guid[]
Modifiers: public
Summary: Reads an array of <b>Guid</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadInt()
Return: int
Modifiers: public
Summary: Reads a <b>int</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadInt64()
Return: System.Int64
Modifiers: public
Summary: Reads a <b>long</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadIntArray()
Return: int
Modifiers: public
Summary: Reads an array of <b>int</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadInterval()
Return: Geometry.Interval
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Interval</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadLine()
Return: Geometry.Line
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Line</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadMeshingParameters()
Return: Geometry.MeshingParameters
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.MeshingParameters</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadObjRef()
Return: DocObjects.ObjRef
Modifiers: public
Summary: Reads a <b>Rhino.DocObjects.ObjRef</b> from the archive

Method: Rhino.FileIO.BinaryArchiveReader.ReadObjRefArray()
Return: DocObjects.ObjRef[]
Modifiers: public
Summary: Reads an array of <b>double</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.8

Method: Rhino.FileIO.BinaryArchiveReader.ReadPlane()
Return: Geometry.Plane
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Plane</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPoint()
Return: System.Drawing.Point
Modifiers: public
Summary: Reads a <b>System.Drawing.Point</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPoint2d()
Return: Geometry.Point2d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Point2d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPoint3d()
Return: Geometry.Point3d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Point3d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPoint3f()
Return: Geometry.Point3f
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Point3f</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPoint4d()
Return: Geometry.Point4d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Point4d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadPointF()
Return: System.Drawing.PointF
Modifiers: public
Summary: Reads a <b>System.Drawing.PointF</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadRay3d()
Return: Geometry.Ray3d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Ray3d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadRectangle()
Return: System.Drawing.Rectangle
Modifiers: public
Summary: Reads a <b>System.Drawing.Rectangle</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadRectangleF()
Return: System.Drawing.RectangleF
Modifiers: public
Summary: Reads a <b>System.Drawing.RectangleF</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadRenderSettings()
Return: RenderSettings
Modifiers: public
Summary: Reads a <b>Rhino.Render.RenderSettings</b> -derived object from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadSByte()
Return: sbyte
Modifiers: public
Summary: Reads a <b>sbyte</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadSByteArray()
Return: sbyte
Modifiers: public
Summary: Reads an array of <b>sbyte</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadShort()
Return: short
Modifiers: public
Summary: Reads a <b>short</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadShortArray()
Return: short
Modifiers: public
Summary: Reads an array of <b>short</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadSingle()
Return: float
Modifiers: public
Summary: Reads a <b>float</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadSingleArray()
Return: float
Modifiers: public
Summary: Reads an array of <b>float</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadSize()
Return: System.Drawing.Size
Modifiers: public
Summary: Reads a <b>System.Drawing.Size</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadSizeF()
Return: System.Drawing.SizeF
Modifiers: public
Summary: Reads a <b>System.Drawing.SizeF</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadString()
Return: string
Modifiers: public
Summary: Reads a <b>string</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadStringArray()
Return: string
Modifiers: public
Summary: Reads an array of <b>string</b> from the archive.
An array is returned even if the input was another enumerable type. | Since: 5.0

Method: Rhino.FileIO.BinaryArchiveReader.ReadTransform()
Return: Geometry.Transform
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Transform</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadUInt()
Return: uint
Modifiers: public
Summary: Reads a <b>uint</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadUShort()
Return: ushort
Modifiers: public
Summary: Reads a <b>ushort</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadUtf8String()
Return: string
Modifiers: public
Summary: Reads a <b>string</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadVector2d()
Return: Geometry.Vector2d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Vector2d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadVector3d()
Return: Geometry.Vector3d
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Vector3d</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.ReadVector3f()
Return: Geometry.Vector3f
Modifiers: public
Summary: Reads a <b>Rhino.Geometry.Vector3f</b> from the archive.

Method: Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(long byteOffset)
Return: bool
Modifiers: public
Summary: seek from current position ( like fseek( ,SEEK_CUR) )

Method: Rhino.FileIO.BinaryArchiveReader.SeekFromCurrentPosition(ulong byteOffset, bool forward)
Return: bool
Modifiers: public
Summary: seek from current position ( like fseek( ,SEEK_CUR) )
Parameter: byteOffset (ulong)
Parameter Summary: 
Parameter: forward (bool)
Parameter Summary: seek forward of backward in the archive

Method: Rhino.FileIO.BinaryArchiveReader.SeekFromStart(ulong byteOffset)
Return: bool
Modifiers: public
Summary: seek from start position ( like fseek( ,SEEK_SET) )

Class: Rhino.FileIO.BinaryArchiveWriter
Summary: Represents an entity that is able to write data to an archive.

Property: Rhino.FileIO.BinaryArchiveWriter.Archive3dmVersion
Return: int
Modifiers: public
Summary: If a 3dm archive is being read or written, then this is the version of the 3dm archive format (1, 2, 3, 4 or 5). 0     a 3dm archive is not being read/written 1     a version 1 3dm archive is being read/written 2     a version 2 3dm archive is being read/written 3     a version 3 3dm archive is being read/written 4     a version 4 3dm archive is being read/written 5     an old version 5 3dm archive is being read 50    a version 5 3dm archive is being read/written.
Accessors: get

Property: Rhino.FileIO.BinaryArchiveWriter.WriteErrorOccured
Return: bool
Modifiers: public
Summary: Gets or sets whether an error occurred.
Accessors: get set

Method: Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(uint typecode, int majorVersion, int minorVersion)
Return: bool
Modifiers: public
Summary: Begins writing a chunk
Parameter: typecode (uint)
Parameter Summary: chunk's typecode
Parameter: majorVersion (int)
Parameter Summary: 
Parameter: minorVersion (int)
Parameter Summary:

Method: Rhino.FileIO.BinaryArchiveWriter.BeginWrite3dmChunk(uint typecode, long value)
Return: bool
Modifiers: public
Summary: Begins writing a chunk

Method: Rhino.FileIO.BinaryArchiveWriter.EnableCRCCalculation(bool enable)
Return: bool
Modifiers: public
Summary: Expert user function to control CRC calculation while reading and writing. Typically this is used when seeking around and reading/writing information in non-serial order.

Method: Rhino.FileIO.BinaryArchiveWriter.EndWrite3dmChunk()
Return: bool
Modifiers: public
Summary: updates length in chunk header

Method: Rhino.FileIO.BinaryArchiveWriter.Write3dmChunkVersion(int major, int minor)
Return: void
Modifiers: public
Summary: A chunk version is a single byte that encodes a major.minor version number.  Useful when creating I/O code for 3dm chunks that may change in the future.  Increment the minor version number if new information is added to the end of the chunk. Increment the major version if the format of the chunk changes in some other way.
Parameter: major (int)
Parameter Summary: 0 to 15.
Parameter: minor (int)
Parameter Summary: 0 to 16.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteBool(bool value)
Return: void
Modifiers: public
Summary: Writes a <b>bool</b> value to the archive.
Parameter: value (bool)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteBoolArray(IEnumerable<bool> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>bool</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<bool>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteBoundingBox(Geometry.BoundingBox value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.BoundingBox</b> value to the archive.
Parameter: value (Geometry.BoundingBox)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteByte(byte value)
Return: void
Modifiers: public
Summary: Writes a <b>byte</b> value to the archive.
Parameter: value (byte)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteByteArray(IEnumerable<byte> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>byte</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<byte>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteColor(System.Drawing.Color value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.Color</b> value to the archive.
Parameter: value (System.Drawing.Color)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteCompressedBuffer(IEnumerable<byte> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>byte</b> to the archive as a compressed buffer.
The return will always be an array. | Since: 5.9 | Parameter: value (IEnumerable<byte>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteDictionary(Collections.ArchivableDictionary dictionary)
Return: void
Modifiers: public
Summary: Delivers the complete content of a dictionary to the archive.
Parameter: dictionary (Collections.ArchivableDictionary)
Parameter Summary: A dictionary to archive.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteDouble(double value)
Return: void
Modifiers: public
Summary: Writes a <b>double</b> value to the archive.
Parameter: value (double)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteDoubleArray(IEnumerable<double> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>double</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<double>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteEmptyCheckSum()
Return: void
Modifiers: public
Summary: Reads a legacy ON_CheckSum, only provided to read data chunks from old V5 files, the CheckSum read is discarded

Method: Rhino.FileIO.BinaryArchiveWriter.WriteFont(System.Drawing.Font value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.Font</b> value to the archive.
Parameter: value (System.Drawing.Font)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteGeometry(Geometry.GeometryBase value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.GeometryBase</b> value to the archive.
Parameter: value (Geometry.GeometryBase)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteGeometryArray(IEnumerable<GeometryBase> geometry)
Return: void
Modifiers: public

Method: Rhino.FileIO.BinaryArchiveWriter.WriteGuid(System.Guid value)
Return: void
Modifiers: public
Summary: Writes a <b>Guid</b> value to the archive.
Parameter: value (System.Guid)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteGuidArray(IEnumerable<Guid> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>Guid</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<Guid>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteInt(int value)
Return: void
Modifiers: public
Summary: Writes a <b>int</b> value to the archive.
Parameter: value (int)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteInt64(System.Int64 value)
Return: void
Modifiers: public
Summary: Writes a <b>Int64</b> value to the archive.
Parameter: value (System.Int64)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteIntArray(IEnumerable<int> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>int</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<int>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteInterval(Geometry.Interval value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Interval</b> value to the archive.
Parameter: value (Geometry.Interval)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteLine(Geometry.Line value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Line</b> value to the archive.
Parameter: value (Geometry.Line)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteMeshingParameters(Geometry.MeshingParameters value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.MeshingParameters</b> value to the archive.
Parameter: value (Geometry.MeshingParameters)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteObjRef(DocObjects.ObjRef objref)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.DocObjects.ObjRef</b> to the archive

Method: Rhino.FileIO.BinaryArchiveWriter.WriteObjRefArray(IEnumerable<ObjRef> objrefs)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>Rhino.DocObjects.ObjRef</b> to the archive.
The return will always be an array. | Since: 5.8 | Parameter: objrefs (IEnumerable<DocObjects.ObjRef>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePlane(Geometry.Plane value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Plane</b> value to the archive.
Parameter: value (Geometry.Plane)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePoint(System.Drawing.Point value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.Point</b> value to the archive.
Parameter: value (System.Drawing.Point)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePoint2d(Geometry.Point2d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Point2d</b> value to the archive.
Parameter: value (Geometry.Point2d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePoint3d(Geometry.Point3d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Point3d</b> value to the archive.
Parameter: value (Geometry.Point3d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePoint3f(Geometry.Point3f value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Point3f</b> value to the archive.
Parameter: value (Geometry.Point3f)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePoint4d(Geometry.Point4d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Point4d</b> value to the archive.
Parameter: value (Geometry.Point4d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WritePointF(System.Drawing.PointF value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.PointF</b> value to the archive.
Parameter: value (System.Drawing.PointF)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteRay3d(Geometry.Ray3d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Ray3d</b> value to the archive.
Parameter: value (Geometry.Ray3d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteRectangle(System.Drawing.Rectangle value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.Rectangle</b> value to the archive.
Parameter: value (System.Drawing.Rectangle)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteRectangleF(System.Drawing.RectangleF value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.RectangleF</b> value to the archive.
Parameter: value (System.Drawing.RectangleF)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteRenderSettings(RenderSettings value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Render.RenderSettings</b> value to the archive.
Parameter: value (RenderSettings)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSByte(sbyte value)
Return: void
Modifiers: public
Summary: Writes a <b>sbyte</b> value to the archive.
Parameter: value (sbyte)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSByteArray(IEnumerable<sbyte> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>sbyte</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<sbyte>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteShort(short value)
Return: void
Modifiers: public
Summary: Writes a <b>short</b> value to the archive.
Parameter: value (short)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteShortArray(IEnumerable<short> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>short</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<short>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSingle(float value)
Return: void
Modifiers: public
Summary: Writes a <b>float</b> value to the archive.
Parameter: value (float)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSingleArray(IEnumerable<float> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>float</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<float>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSize(System.Drawing.Size value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.Size</b> value to the archive.
Parameter: value (System.Drawing.Size)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteSizeF(System.Drawing.SizeF value)
Return: void
Modifiers: public
Summary: Writes a <b>System.Drawing.SizeF</b> value to the archive.
Parameter: value (System.Drawing.SizeF)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteString(string value)
Return: void
Modifiers: public
Summary: Writes a <b>string</b> value to the archive.
Parameter: value (string)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteStringArray(IEnumerable<string> value)
Return: void
Modifiers: public
Summary: Writes a list, an array, or any enumerable of <b>string</b> to the archive.
The return will always be an array. | Since: 5.0 | Parameter: value (IEnumerable<string>) | Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteTransform(Geometry.Transform value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Transform</b> value to the archive.
Parameter: value (Geometry.Transform)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteUInt(uint value)
Return: void
Modifiers: public
Summary: Writes a <b>uint</b> value to the archive.
Parameter: value (uint)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteUShort(ushort value)
Return: void
Modifiers: public
Summary: Writes a <b>ushort</b> value to the archive.
Parameter: value (ushort)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteUtf8String(string value)
Return: void
Modifiers: public
Summary: Writes a <b>string</b> value to the archive.
Parameter: value (string)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteVector2d(Geometry.Vector2d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Vector2d</b> value to the archive.
Parameter: value (Geometry.Vector2d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteVector3d(Geometry.Vector3d value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Vector3d</b> value to the archive.
Parameter: value (Geometry.Vector3d)
Parameter Summary: A value to write.

Method: Rhino.FileIO.BinaryArchiveWriter.WriteVector3f(Geometry.Vector3f value)
Return: void
Modifiers: public
Summary: Writes a <b>Rhino.Geometry.Vector3f</b> value to the archive.
Parameter: value (Geometry.Vector3f)
Parameter Summary: A value to write.

Class: Rhino.FileIO.CommonComponentTable<T>
Summary: Provides a base table type that encompasses all document tables, both in RhinoDoc and File3dm.

Property: Rhino.FileIO.CommonComponentTable<T>.ComponentType
Return: ModelComponentType
Modifiers: public, abstract
Summary: Returns the actual component type of a table.
Accessors: get

Property: Rhino.FileIO.CommonComponentTable<T>.Count
Return: int
Modifiers: public, virtual
Summary: Returns the count of all items, including deleted ones.
Accessors: get

Method: Rhino.FileIO.CommonComponentTable<T>.Clear()
Return: void
Modifiers: public
Summary: Marks all items as deleted.

Method: Rhino.FileIO.CommonComponentTable<T>.Delete(T item)
Return: bool
Modifiers: public, abstract
Summary: Deletes an item. Items that are deleted are still keeping their space, but the 'IsDeleted' flag is checked.
Parameter: item (T)
Parameter Summary: An item to delete.

Method: Rhino.FileIO.CommonComponentTable<T>.FindId(System.Guid id)
Return: T
Modifiers: public, virtual
Summary: Uses the guid to find a model component. Deleted objects cannot be found by id. The guid is the value that is stored in the .Id property. In a single document, no two active objects have the same guid. If an object is replaced with a new object, then the guid  persists. For example, if the _Move command moves an object, then the moved object inherits its guid from the starting object. If the Copy command copies an object, then the copy gets a new guid. This guid persists through file saving/opening operations. This function will not find grip objects.
Parameter: id (System.Guid)
Parameter Summary: ID of model component to search for.

Method: Rhino.FileIO.CommonComponentTable<T>.GetEnumerator()
Return: IEnumerator<T>
Modifiers: public, virtual
Summary: Returns the enumerator that yields all items.

Class: Rhino.FileIO.ContentHash
Summary: Contains information that is useful to uniquely identify an object. This object is immutable.

Constructor: Rhino.FileIO.ContentHash.ContentHash(ContentHash other)
Summary: Constructs a copy of a content hash.

Property: Rhino.FileIO.ContentHash.ByteCount
Return: ulong
Modifiers: public
Summary: Gets the length of the content, in bytes.
Accessors: get

Property: Rhino.FileIO.ContentHash.HashTime
Return: DateTime
Modifiers: public
Summary: Gets the hash time, rounded to seconds.
Accessors: get

Property: Rhino.FileIO.ContentHash.Sha1ContentHash
Return: byte[]
Modifiers: public
Summary: Gets the 20-bytes long SHA1 hash of the content.
Accessors: get

Property: Rhino.FileIO.ContentHash.Sha1NameHash
Return: byte[]
Modifiers: public
Summary: Gets the 20-bytes long SHA1 hash of the name.
Accessors: get

Method: Rhino.FileIO.ContentHash.CreateFromFile(string path)
Return: ContentHash
Modifiers: public, static
Summary: Creates a new ContentHash, representing the content of a file.
Parameter: path (string)
Parameter Summary: A path. This can be None and can refer to a non-existing path.

Method: Rhino.FileIO.ContentHash.Clone()
Return: ContentHash
Modifiers: public
Summary: Creates a copy of this content hash. Because content hash is immutable, this can be used as a deep copy.

Method: Rhino.FileIO.ContentHash.Equals(ContentHash other)
Return: bool
Modifiers: public
Summary: Determines if another content hash has the same value.
Parameter: other (ContentHash)
Parameter Summary: The other content hash to compare.

Method: Rhino.FileIO.ContentHash.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Determines if another object is a content hash with same value.
Parameter: obj (object)
Parameter Summary: The other content hash to compare.

Method: Rhino.FileIO.ContentHash.GetHashCode()
Return: int
Modifiers: public, override
Summary: Gets an hash code for this content hash. Two equal content hashes have equal hash code. The other way around might not be true.

Class: Rhino.FileIO.DracoCompression
Summary: Google Draco compression for mesh and point cloud data

Constructor: Rhino.FileIO.DracoCompression.DracoCompression()
Summary: Initializes a new instance of the DracoCompression class

Property: Rhino.FileIO.DracoCompression.NormalAttributePosition
Return: int
Modifiers: public
Summary: The attribute position for normals when compressed
Accessors: get

Property: Rhino.FileIO.DracoCompression.TextureCoordinatesAttributePosition
Return: int
Modifiers: public
Summary: The attribute position for texture coordinates when compressed
Accessors: get

Property: Rhino.FileIO.DracoCompression.VertexAttributePosition
Return: int
Modifiers: public
Summary: The attribute position for vertices when compressed
Accessors: get

Property: Rhino.FileIO.DracoCompression.VertexColorAttributePosition
Return: int
Modifiers: public
Summary: The attribute position for vertex colors when compressed
Accessors: get

Method: Rhino.FileIO.DracoCompression.Compress(Rhino.Geometry.Mesh mesh, DracoCompressionOptions options)
Return: DracoCompression
Modifiers: public, static
Summary: Compress a mesh
Parameter: mesh (Rhino.Geometry.Mesh)
Parameter Summary: mesh to compress
Parameter: options (DracoCompressionOptions)
Parameter Summary: options used to determine how the compression will occur

Method: Rhino.FileIO.DracoCompression.Compress(Rhino.Geometry.Mesh mesh)
Return: DracoCompression
Modifiers: public, static
Summary: Compress a mesh using default compression options.
Parameter: mesh (Rhino.Geometry.Mesh)
Parameter Summary: mesh to compress

Method: Rhino.FileIO.DracoCompression.Compress(Rhino.Geometry.PointCloud pointCloud, DracoCompressionOptions options)
Return: DracoCompression
Modifiers: public, static
Summary: Compress a point cloud
Parameter: pointCloud (Rhino.Geometry.PointCloud)
Parameter Summary: point cloud to compress
Parameter: options (DracoCompressionOptions)
Parameter Summary: options used to determine how the compression will occur

Method: Rhino.FileIO.DracoCompression.Compress(Rhino.Geometry.PointCloud pointCloud)
Return: DracoCompression
Modifiers: public, static
Summary: Compress a point cloud
Parameter: pointCloud (Rhino.Geometry.PointCloud)
Parameter Summary: point cloud to compress

Method: Rhino.FileIO.DracoCompression.DecompressBase64String(string encoded)
Return: Rhino.Geometry.GeometryBase
Modifiers: public, static
Summary: Decompress base64 encoded version of Draco data into either a mesh or point cloud
Parameter: encoded (string)
Parameter Summary: compressed Draco data

Method: Rhino.FileIO.DracoCompression.DecompressByteArray(byte bytes)
Return: Rhino.Geometry.GeometryBase
Modifiers: public, static
Summary: Decompress data into either a mesh or point cloud.
Parameter: bytes (byte)
Parameter Summary: compressed Draco data

Method: Rhino.FileIO.DracoCompression.DecompressFile(string path)
Return: Rhino.Geometry.GeometryBase
Modifiers: public, static
Summary: Read compressed data from disk and decompress to RhinoCommon geometry
Parameter: path (string)
Parameter Summary: path to read from

Method: Rhino.FileIO.DracoCompression.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.FileIO.DracoCompression.ToBase64String()
Return: string
Modifiers: public
Summary: Convert byte array of Draco compressed data into a base64 encoded string

Method: Rhino.FileIO.DracoCompression.ToByteArray()
Return: byte
Modifiers: public
Summary: Gets the Draco compressed data as a byte array

Method: Rhino.FileIO.DracoCompression.Write(string path)
Return: bool
Modifiers: public
Summary: Write the compressed data to disk
Parameter: path (string)
Parameter Summary: path to write to

Class: Rhino.FileIO.DracoCompressionOptions
Summary: Options for applying Draco compression

Constructor: Rhino.FileIO.DracoCompressionOptions.DracoCompressionOptions()
Summary: Initializes to default options

Property: Rhino.FileIO.DracoCompressionOptions.CompressionLevel
Return: int
Modifiers: public
Summary: Compression level. 0 if fastest, but least compression. 10 is slowest, but best compression
Accessors: get set

Property: Rhino.FileIO.DracoCompressionOptions.NormalQuantizationBits
Return: int
Modifiers: public
Summary: Sets the quantization compression options for normal values. The values will be quantized in a box defined by the maximum extent of the values. I.e., the actual precision of this option depends on the scale of the attribute values.
Accessors: get set

Property: Rhino.FileIO.DracoCompressionOptions.PositionQuantizationBits
Return: int
Modifiers: public
Summary: Sets the quantization compression options for position values. The values will be quantized in a box defined by the maximum extent of the values. I.e., the actual precision of this option depends on the scale of the attribute values.
Accessors: get set

Property: Rhino.FileIO.DracoCompressionOptions.TextureCoordintateQuantizationBits
Return: int
Modifiers: public
Summary: Sets the quantization compression options for texture coordinate values. The values will be quantized in a box defined by the maximum extent of the values. I.e., the actual precision of this option depends on the scale of the attribute values.
Accessors: get set

Class: Rhino.FileIO.File3dm
Summary: Represents a 3dm file, which is stored using the OpenNURBS file standard.
The 3dm format is the main Rhinoceros storage format.
Visit http://www.opennurbs.com/ for more details.

Constructor: Rhino.FileIO.File3dm.File3dm()
Summary: Initializes a new instance of a 3dm file.

Property: Rhino.FileIO.File3dm.AllDimStyles
Return: File3dmDimStyleTable
Modifiers: public
Summary: Dimension Styles in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllGroups
Return: File3dmGroupTable
Modifiers: public
Summary: Groups in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllHatchPatterns
Return: File3dmHatchPatternTable
Modifiers: public
Summary: Hatch patterns in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllInstanceDefinitions
Return: File3dmInstanceDefinitionTable
Modifiers: public
Summary: Instance definitions in this file
Accessors: get

Property: Rhino.FileIO.File3dm.AllLayers
Return: File3dmLayerTable
Modifiers: public
Summary: Layers in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllLinetypes
Return: File3dmLinetypeTable
Modifiers: public
Summary: Linetypes in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllMaterials
Return: File3dmMaterialTable
Modifiers: public
Summary: Materials in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllNamedConstructionPlanes
Return: File3dmNamedConstructionPlanes
Modifiers: public
Summary: Named construction planes in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllNamedViews
Return: File3dmViewTable
Modifiers: public
Summary: Named views in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.AllViews
Return: File3dmViewTable
Modifiers: public
Summary: Views that represent the RhinoViews which are displayed when Rhino loads this file.
Accessors: get

Property: Rhino.FileIO.File3dm.ApplicationDetails
Return: string
Modifiers: public
Summary: Gets or sets details for the application that wrote this file.
Accessors: get set

Property: Rhino.FileIO.File3dm.ApplicationName
Return: string
Modifiers: public
Summary: Gets or sets the name of the application that wrote this file.
Accessors: get set

Property: Rhino.FileIO.File3dm.ApplicationUrl
Return: string
Modifiers: public
Summary: Gets or sets a URL for the application that wrote this file.
Accessors: get set

Property: Rhino.FileIO.File3dm.ArchiveVersion
Return: int
Modifiers: public
Summary: Gets the 3dm file archive version.
Accessors: get

Property: Rhino.FileIO.File3dm.Created
Return: DateTime
Modifiers: public
Summary: Get the DateTime that this file was originally created. If the value is not set in the 3dm file, then DateTime.MinValue is returned
Accessors: get

Property: Rhino.FileIO.File3dm.CreatedBy
Return: string
Modifiers: public
Summary: Gets a string that names the user who created the file.
Accessors: get

Property: Rhino.FileIO.File3dm.DimStyles
Return: IList<DimensionStyle>
Modifiers: public
Summary: Dimension Styles in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.EarthAnchorPoint
Return: EarthAnchorPoint
Modifiers: public
Summary: If set, this is the model's location on the earth.  This information is used when the model is used with GIS information.
Accessors: get set

Property: Rhino.FileIO.File3dm.EmbeddedFiles
Return: File3dmEmbeddedFiles
Modifiers: public
Summary: The embedded files in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.HatchPatterns
Return: IList<HatchPattern>
Modifiers: public
Summary: Hatch patterns in this file
Accessors: get

Property: Rhino.FileIO.File3dm.InstanceDefinitions
Return: IList<InstanceDefinitionGeometry>
Modifiers: public
Summary: Instance definitions in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.LastEdited
Return: DateTime
Modifiers: public
Summary: Get the DateTime that this file was last edited. If the value is not set in the 3dm file, then DateTime.MinValue is returned
Accessors: get

Property: Rhino.FileIO.File3dm.LastEditedBy
Return: string
Modifiers: public
Summary: Gets a string that names the user who last edited the file.
Accessors: get

Property: Rhino.FileIO.File3dm.Layers
Return: IList<Layer>
Modifiers: public
Summary: Layers in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.Linetypes
Return: IList<Linetype>
Modifiers: public
Summary: Linetypes in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.Manifest
Return: ManifestTable
Modifiers: public
Summary: Retrieves the manifest with all object descriptions in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.Materials
Return: IList<Material>
Modifiers: public
Summary: Materials in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.NamedConstructionPlanes
Return: IList<ConstructionPlane>
Modifiers: public
Summary: Named construction planes in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.NamedViews
Return: IList<ViewInfo>
Modifiers: public
Summary: Named views in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.Notes
Return: File3dmNotes
Modifiers: public
Summary: Gets or sets the model notes.
Accessors: get set

Property: Rhino.FileIO.File3dm.Objects
Return: File3dmObjectTable
Modifiers: public
Summary: Gets access to the <b>File3dmObjectTable</b> class associated with this file, which contains all objects.
Accessors: get

Property: Rhino.FileIO.File3dm.PlugInData
Return: File3dmPlugInDataTable
Modifiers: public
Summary: Custom plug-in data in this file.  This data is not attached to any geometry or attributes
Accessors: get

Property: Rhino.FileIO.File3dm.RenderEnvironments
Return: File3dmRenderEnvironments
Modifiers: public
Summary: The render environments in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.RenderMaterials
Return: File3dmRenderMaterials
Modifiers: public
Summary: The render materials in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.RenderTextures
Return: File3dmRenderTextures
Modifiers: public
Summary: The render textures in this file.
Accessors: get

Property: Rhino.FileIO.File3dm.Revision
Return: int
Modifiers: public
Summary: Gets or sets the revision number.
Accessors: get set

Property: Rhino.FileIO.File3dm.Settings
Return: File3dmSettings
Modifiers: public
Summary: Settings include tolerance, and unit system, and defaults used for creating views and objects.
Accessors: get

Property: Rhino.FileIO.File3dm.StartSectionComments
Return: string
Modifiers: public
Summary: Gets or sets the start section comments, which are the comments with which the 3dm file begins.
Accessors: get set

Property: Rhino.FileIO.File3dm.Strings
Return: File3dmStringTable
Modifiers: public
Summary: Document user strings in this file
Accessors: get

Property: Rhino.FileIO.File3dm.Views
Return: IList<ViewInfo>
Modifiers: public
Summary: Views that represent the RhinoViews which are displayed when Rhino loads this file.
Accessors: get

Method: Rhino.FileIO.File3dm.FromByteArray(byte bytes)
Return: File3dm
Modifiers: public, static
Summary: Read a 3dm file from a byte array

Method: Rhino.FileIO.File3dm.Read(string path, TableTypeFilter tableTypeFilterFilter, ObjectTypeFilter objectTypeFilter)
Return: File3dm
Modifiers: public, static
Summary: Reads a 3dm file from a specified location.
Parameter: path (string)
Parameter Summary: The file to read.
Parameter: tableTypeFilterFilter (TableTypeFilter)
Parameter Summary: If tableTypeFilterFilter is None, then everything in the archive is read. Otherwise tableTypeFilterFilter identifies what tables should be read.
Parameter: objectTypeFilter (ObjectTypeFilter)
Parameter Summary: If objectTypeFilter is not None, then is a filter made by bitwise or-ing values to select which types of objects will be read from the model object table.

Method: Rhino.FileIO.File3dm.Read(string path)
Return: File3dm
Modifiers: public, static
Summary: Reads a 3dm file from a specified location.
Parameter: path (string)
Parameter Summary: The file to read.

Method: Rhino.FileIO.File3dm.ReadApplicationData(string path, out string applicationName, out string applicationUrl, out string applicationDetails)
Return: void
Modifiers: public, static
Summary: Reads only the application information from an existing 3dm file.
Parameter: path (string)
Parameter Summary: A location on disk or network.
Parameter: applicationName (string)
Parameter Summary: The application name. This out parameter is assigned during this call.
Parameter: applicationUrl (string)
Parameter Summary: The application URL. This out parameter is assigned during this call.
Parameter: applicationDetails (string)
Parameter Summary: The application details. This out parameter is assigned during this call.

Method: Rhino.FileIO.File3dm.ReadArchiveVersion(string path)
Return: int
Modifiers: public, static
Summary: Reads only the archive 3dm version from an existing 3dm file.
Parameter: path (string)
Parameter Summary: The file from which to read the archive version.

Method: Rhino.FileIO.File3dm.ReadDimensionStyles(string path)
Return: DimensionStyle[]
Modifiers: public, static
Summary: Read the dimension styles table out of a 3dm file.
Parameter: path (string)
Parameter Summary: The location of the file.

Method: Rhino.FileIO.File3dm.ReadEarthAnchorPoint(string path)
Return: EarthAnchorPoint
Modifiers: public, static
Summary: Reads only the earth anchor point from an existing 3dm file
Parameter: path (string)
Parameter Summary: A location on disk or network.

Method: Rhino.FileIO.File3dm.ReadNotes(string path)
Return: string
Modifiers: public, static
Summary: Reads only the notes from an existing 3dm file.
Parameter: path (string)
Parameter Summary: The file from which to read the notes.

Method: Rhino.FileIO.File3dm.ReadPreviewImage(string path)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Attempts to read the preview image out of a 3dm file.
Parameter: path (string)
Parameter Summary: The location of the file.

Method: Rhino.FileIO.File3dm.ReadRevisionHistory(string path, out string createdBy, out string lastEditedBy, out int revision, out System.DateTime createdOn, out System.DateTime lastEditedOn)
Return: bool
Modifiers: public, static
Summary: Quickly check a file for it's revision information.  This function does not read the entire file, just what it needs to get revision information out
Parameter: path (string)
Parameter Summary: path to the 3dm file
Parameter: createdBy (string)
Parameter Summary: original author of the file
Parameter: lastEditedBy (string)
Parameter Summary: last person to edit the file
Parameter: revision (int)
Parameter Summary: which revision this file is at
Parameter: createdOn (System.DateTime)
Parameter Summary: date file was created (DateTime.MinValue if not set in file)
Parameter: lastEditedOn (System.DateTime)
Parameter Summary: date file was last edited (DateTime.MinValue if not set in file)

Method: Rhino.FileIO.File3dm.ReadWithLog(string path, out string errorLog)
Return: File3dm
Modifiers: public, static
Summary: Read a 3dm file from a specified location and log any archive reading errors.
Parameter: path (string)
Parameter Summary: The file to read.
Parameter: errorLog (string)
Parameter Summary: Any archive reading errors are logged here.

Method: Rhino.FileIO.File3dm.ReadWithLog(string path, TableTypeFilter tableTypeFilterFilter, ObjectTypeFilter objectTypeFilter, out string errorLog)
Return: File3dm
Modifiers: public, static
Summary: Reads a 3dm file from a specified location.
Parameter: path (string)
Parameter Summary: The file to read.
Parameter: tableTypeFilterFilter (TableTypeFilter)
Parameter Summary: If tableTypeFilterFilter is None, then everything in the archive is read. Otherwise tableTypeFilterFilter identifies what tables should be read.
Parameter: objectTypeFilter (ObjectTypeFilter)
Parameter Summary: If objectTypeFilter is not None, then is a filter made by bitwise or-ing values to select which types of objects will be read from the model object table.
Parameter: errorLog (string)
Parameter Summary: Any archive reading errors are logged here.

Method: Rhino.FileIO.File3dm.WriteMultipleObjects(string path, IEnumerable<GeometryBase> geometry)
Return: bool
Modifiers: public, static
Summary: Creates a simple 3dm file that contains a multiple geometric objects.
Parameter: path (string)
Parameter Summary: Path to the 3dm file to create.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: The geometry to be saved in the archive's object table. This is typically some Curves, Surfaces, Breps, Meshs, or SubDs.

Method: Rhino.FileIO.File3dm.WriteOneObject(string path, GeometryBase geometry)
Return: bool
Modifiers: public, static
Summary: Creates a simple 3dm file that contains a single geometric object.
Parameter: path (string)
Parameter Summary: Path to the 3dm file to create.
Parameter: geometry (GeometryBase)
Parameter Summary: The geometry to be saved in the archive's object table. This is typically a Curve, Surface, Brep, Mesh, or SubD.

Method: Rhino.FileIO.File3dm.Audit(bool attemptRepair, out int repairCount, out string errors, out int warnings)
Return: int
Modifiers: public
Summary: This function is only kept for forward assembly compatibility.
Parameter: attemptRepair (bool)
Parameter Summary: Ignored.
Parameter: repairCount (int)
Parameter Summary: Is set to 0.
Parameter: errors (string)
Parameter Summary: Contains no meaningful error.
Parameter: warnings (int)
Parameter Summary: Is set to null.

Method: Rhino.FileIO.File3dm.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.FileIO.File3dm.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.FileIO.File3dm.Dump()
Return: string
Modifiers: public
Summary: Prepares a text dump of the entire model.

Method: Rhino.FileIO.File3dm.DumpSummary()
Return: string
Modifiers: public
Summary: Prepares a text dump of model properties and settings.

Method: Rhino.FileIO.File3dm.DumpToTextLog(TextLog log)
Return: void
Modifiers: public
Summary: Prepares a text dump of the entire model.

Method: Rhino.FileIO.File3dm.GetPreviewImage()
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Preview image used for file explorer

Method: Rhino.FileIO.File3dm.IsValid(out string errors)
Return: bool
Modifiers: public
Summary: The File3dm object is kept consistent during its creation. Therefore, this function now returns only true.
Parameter: errors (string)
Parameter Summary: No errors are found.

Method: Rhino.FileIO.File3dm.IsValid(TextLog errors)
Return: bool
Modifiers: public
Summary: The File3dm object is kept consistent during its creation. Therefore, this function now returns only true.
Parameter: errors (TextLog)
Parameter Summary: No errors are found.

Method: Rhino.FileIO.File3dm.Polish()
Return: void
Modifiers: public
Summary: This function is only kept for forward assembly compatibility.

Method: Rhino.FileIO.File3dm.SetPreviewImage(System.Drawing.Bitmap image)
Return: void
Modifiers: public
Summary: Preview image used for file explorer

Method: Rhino.FileIO.File3dm.ToByteArray()
Return: byte
Modifiers: public
Summary: Write to an in-memory byte[]

Method: Rhino.FileIO.File3dm.ToByteArray(File3dmWriteOptions options)
Return: byte
Modifiers: public
Summary: Write to an in-memory byte[]

Method: Rhino.FileIO.File3dm.Write(string path, File3dmWriteOptions options)
Return: bool
Modifiers: public
Summary: Writes contents of this model to an openNURBS archive. If the model is not valid, then Write will refuse to write it.
Parameter: path (string)
Parameter Summary: The file name to use for writing.
Parameter: options (File3dmWriteOptions)
Parameter Summary: An options instance, or None for default.

Method: Rhino.FileIO.File3dm.Write(string path, int version)
Return: bool
Modifiers: public
Summary: Writes contents of this model to an openNURBS archive. If the model is not valid, then Write will refuse to write it.
Parameter: path (string)
Parameter Summary: The file name to use for writing.
Parameter: version (int)
Parameter Summary: Version of the openNURBS archive to write.  Must be [2; current version]. Rhino can read its current version, plus earlier file versions except 1. Use latest version when possible.
Alternatively, 0 is a placeholder for the last valid version.

Method: Rhino.FileIO.File3dm.WriteWithLog(string path, File3dmWriteOptions options, out string errorLog)
Return: bool
Modifiers: public
Summary: Writes contents of this model to an openNURBS archive. If the model is not valid, then Write will refuse to write it.
Parameter: path (string)
Parameter Summary: The file name to use for writing.
Parameter: options (File3dmWriteOptions)
Parameter Summary: An options instance, or None for default.
Parameter: errorLog (string)
Parameter Summary: This argument will be filled by out reference.

Method: Rhino.FileIO.File3dm.WriteWithLog(string path, int version, out string errorLog)
Return: bool
Modifiers: public
Summary: Writes contents of this model to an openNURBS archive. If the model is not valid, then Write will refuse to write it.
Parameter: path (string)
Parameter Summary: The file name to use for writing.
Parameter: version (int)
Parameter Summary: Version of the openNURBS archive to write.  Must be [2; current version]. Rhino can read its current version, plus earlier file versions except 1. Use latest version when possible.
Alternatively, 0 is a placeholder for the last valid version. | Parameter: errorLog (string) | Parameter Summary: This argument will be filled by out reference.

Class: Rhino.FileIO.File3dmCommonComponentTable<T>
Summary: Provides a base table type that is shared among all File3dm tables.

Method: Rhino.FileIO.File3dmCommonComponentTable<T>.Add(T item)
Return: void
Modifiers: public, virtual
Summary: Adds an item.
Parameter: item (T)
Parameter Summary: The item to add.

Method: Rhino.FileIO.File3dmCommonComponentTable<T>.Delete(int index)
Return: void
Modifiers: public, virtual
Summary: Flags a component as deleted.
Parameter: index (int)
Parameter Summary: The index of the item to flag.

Method: Rhino.FileIO.File3dmCommonComponentTable<T>.Delete(T item)
Return: bool
Modifiers: public, override
Summary: Flags a component as deleted.
Parameter: item (T)
Parameter Summary: The item to flag.

Method: Rhino.FileIO.File3dmCommonComponentTable<T>.Dump()
Return: string
Modifiers: public
Summary: Prepares a text dump of object table.

Class: Rhino.FileIO.File3dmCurvePiping
Summary: Represents the curve piping attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmCurvePiping.Accuracy
Return: int
Modifiers: public
Summary: Specifies the accuracy of the pipe in the range 0 to 100.
Accessors: get set

Property: Rhino.FileIO.File3dmCurvePiping.CapType
Return: CapTypes
Modifiers: public
Summary: Specifies the cap type to use.
Accessors: get set

Property: Rhino.FileIO.File3dmCurvePiping.Faceted
Return: bool
Modifiers: public
Summary: Specifies whether the pipe is faceted or not.
Accessors: get set

Property: Rhino.FileIO.File3dmCurvePiping.On
Return: bool
Modifiers: public
Summary: Specifies whether curve piping is enabled or not.
Accessors: get set

Property: Rhino.FileIO.File3dmCurvePiping.Radius
Return: double
Modifiers: public
Summary: Specifies the radius of the pipe (minimum value 0.0001).
Accessors: get set

Property: Rhino.FileIO.File3dmCurvePiping.Segments
Return: int
Modifiers: public
Summary: Specifies the number of segments in the pipe (minimum value 2).
Accessors: get set

Class: Rhino.FileIO.File3dmDimStyleTable
Summary: Provides access to annotation styles in the 3dm file.

Property: Rhino.FileIO.File3dmDimStyleTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.DimStyle</b> .
Accessors: get

Method: Rhino.FileIO.File3dmDimStyleTable.FindIndex(int index)
Return: DimensionStyle
Modifiers: public
Summary: Retrieves a DimensionStyle object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.FileIO.File3dmDimStyleTable.FindName(string name)
Return: DimensionStyle
Modifiers: public
Summary: Finds a DimensionStyle given its name.
Parameter: name (string)
Parameter Summary: The name of the DimensionStyle to be searched.

Method: Rhino.FileIO.File3dmDimStyleTable.FindNameHash(NameHash nameHash)
Return: DimensionStyle
Modifiers: public
Summary: Finds a DimensionStyle given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the DimensionStyle to be searched.

Class: Rhino.FileIO.File3dmDisplacement
Summary: Represents the displacement attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmDisplacement.BlackPoint
Return: double
Modifiers: public
Summary: Specifies the amount of displacement for the black color in the texture.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.Fairing
Return: int
Modifiers: public
Summary: Specifies the number of steps for the fairing process. Fairing straightens rough feature edges.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.FairingOn
Return: bool
Modifiers: public
Summary: Specifies whether or not to perform a fairing step. Fairing straightens rough feature edges.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.FinalMaxFaces
Return: int
Modifiers: public
Summary: Specifies how many faces the reduction post process should target.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.FinalMaxFacesOn
Return: bool
Modifiers: public
Summary: Specifies whether to perform a mesh reduction as a post process to simplify the result of displacement.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.InitialQuality
Return: int
Modifiers: public
Summary: Specifies how densely the object is initially subdivided. The lower the value, the higher the resolution of the displaced mesh.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.MappingChannel
Return: int
Modifiers: public
Summary: Specifies which texture mapping channel is used for the displacement texture.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.MeshMemoryLimit
Return: int
Modifiers: public
Summary: Specifies in megabytes how much memory can be allocated for use by the displacement mesh.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.On
Return: bool
Modifiers: public
Summary: Specifies whether the displacement feature is enabled or not.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.PostWeldAngle
Return: double
Modifiers: public
Summary: Specifies the maximum angle between face normals of adjacent faces that will get welded together.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.RefineSensitivity
Return: double
Modifiers: public
Summary: Specifies how sensitive the divider for contrasts is on the displacement texture. Specify 1 to split all mesh edges on each refine step. Specify 0.99 to make even slight contrasts on the displacement texture cause edges to be split. Specifying 0.01 only splits edges where heavy contrast exists.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.RefineSteps
Return: int
Modifiers: public
Summary: Specifies the number of refinement passes
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.SweepResolutionFormula
Return: SweepResolutionFormulas
Modifiers: public
Summary: Specifies which formula is used to calculate sweep resolution from initial quality.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.TextureId
Return: Guid
Modifiers: public
Summary: Specifies which texture is used for computing the displacement amount.
Accessors: get set

Property: Rhino.FileIO.File3dmDisplacement.WhitePoint
Return: double
Modifiers: public
Summary: Specifies the amount of displacement for the white color in the texture.
Accessors: get set

Method: Rhino.FileIO.File3dmDisplacement.AddSubItem(int face_index, bool on, System.Guid texture, int mapping_channel, double black_point, double white_point)
Return: bool
Modifiers: public
Summary: Adds a new sub-item to the displacement. face_index is the index of the face on the polysurface/SubD.on is the override for File3dmDisplacement.On.texture is the override for File3dmDisplacement.TextureId.mapping_channel is the override for File3dmDisplacement.MappingChannel.black_point is the override for File3dmDisplacement.BlackPoint.white_point is the override for File3dmDisplacement.WhitePoint.

Method: Rhino.FileIO.File3dmDisplacement.DeleteAllSubItems()
Return: void
Modifiers: public
Summary: Deletes all the sub-items from the displacement.

Method: Rhino.FileIO.File3dmDisplacement.DeleteSubItem(int face_index)
Return: void
Modifiers: public
Summary: Deletes a sub-item by its face index. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.GetSubItemFaceIndexes()
Return: int
Modifiers: public
Summary: Gets all the sub-items on the displacement. Sub-items can exist to override the top-level parameters for polysurface/SubD faces. Sub-items are identified by the face index that they apply to. An array of the face indexes of each sub-item on the displacement.

Method: Rhino.FileIO.File3dmDisplacement.SetSubItemBlackPoint(int face_index, double black_point)
Return: void
Modifiers: public
Summary: Sets the override for displacement 'black-point'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SetSubItemMappingChannel(int face_index, int chan)
Return: void
Modifiers: public
Summary: Sets the override for displacement 'mapping channel'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SetSubItemOn(int face_index, bool on)
Return: void
Modifiers: public
Summary: Sets the override for displacement 'on'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SetSubItemTexture(int face_index, System.Guid texture_id)
Return: void
Modifiers: public
Summary: Sets the override for displacement 'texture'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SetSubItemWhitePoint(int face_index, double white_point)
Return: void
Modifiers: public
Summary: Sets the override for displacement 'white-point'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SubItemBlackPoint(int face_index)
Return: double
Modifiers: public
Summary: Gets the override for displacement 'black-point'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SubItemMappingChannel(int face_index)
Return: int
Modifiers: public
Summary: Gets the override for displacement 'mapping channel'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SubItemOn(int face_index)
Return: bool
Modifiers: public
Summary: Gets the override for displacement 'on'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SubItemTexture(int face_index)
Return: System.Guid
Modifiers: public
Summary: Gets the override for displacement 'texture'. face_index is the index of the face on the polysurface/SubD.

Method: Rhino.FileIO.File3dmDisplacement.SubItemWhitePoint(int face_index)
Return: double
Modifiers: public
Summary: Gets the override for displacement 'white-point'. face_index is the index of the face on the polysurface/SubD.

Class: Rhino.FileIO.File3dmEdgeSoftening
Summary: Represents the edge softening attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmEdgeSoftening.Chamfer
Return: bool
Modifiers: public
Summary: Specifies whether to chamfer the edges.
Accessors: get set

Property: Rhino.FileIO.File3dmEdgeSoftening.EdgeAngleThreshold
Return: double
Modifiers: public
Summary: Threshold angle (in degrees) which controls whether an edge is softened or not. The angle refers to the angles between the adjacent faces of an edge.
Accessors: get set

Property: Rhino.FileIO.File3dmEdgeSoftening.Faceted
Return: bool
Modifiers: public
Summary: Specifies whether the edges are faceted.
Accessors: get set

Property: Rhino.FileIO.File3dmEdgeSoftening.ForceSoftening
Return: bool
Modifiers: public
Summary: Specifies whether to soften edges despite too large a radius.
Accessors: get set

Property: Rhino.FileIO.File3dmEdgeSoftening.On
Return: bool
Modifiers: public
Summary: Specifies whether edge softening is enabled or not.
Accessors: get set

Property: Rhino.FileIO.File3dmEdgeSoftening.Softening
Return: double
Modifiers: public
Summary: The softening radius.
Accessors: get set

Class: Rhino.FileIO.File3dmEmbeddedFile

Constructor: Rhino.FileIO.File3dmEmbeddedFile.File3dmEmbeddedFile()

Property: Rhino.FileIO.File3dmEmbeddedFile.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.EmbeddedFile</b> .
Accessors: get

Property: Rhino.FileIO.File3dmEmbeddedFile.Filename
Return: string
Modifiers: public
Summary: the fully-qualified filename of the embedded file. This filename may or may not refer to a local file depending on the way the embedded file was loaded. For example, if it was loaded from an archive, the filename could be that of a file on a different computer.
Accessors: get

Method: Rhino.FileIO.File3dmEmbeddedFile.SaveToFile(string filename)
Return: bool
Modifiers: public
Summary: Saves the contents of the embedded file to a local file. Returns True if successful, else false.

Class: Rhino.FileIO.File3dmEmbeddedFiles

Constructor: Rhino.FileIO.File3dmEmbeddedFiles.File3dmEmbeddedFiles(File3dm f)

Method: Rhino.FileIO.File3dmEmbeddedFiles.Add(string filename)
Return: bool
Modifiers: public
Summary: Add a new embedded file and load it from a local file.

Method: Rhino.FileIO.File3dmEmbeddedFiles.GetEnumerator()
Return: IEnumerator<File3dmEmbeddedFile>
Modifiers: public

Class: Rhino.FileIO.File3dmGroupTable
Summary: Provides access to groups in the 3dm file.

Property: Rhino.FileIO.File3dmGroupTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Group</b> .
Accessors: get

Method: Rhino.FileIO.File3dmGroupTable.AddGroup()
Return: int
Modifiers: public
Summary: Adds a new empty group to the group table.

Method: Rhino.FileIO.File3dmGroupTable.FindIndex(int groupIndex)
Return: Group
Modifiers: public
Summary: Retrieves a Group object based on an index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: groupIndex (int)
Parameter Summary: The index to search for.

Method: Rhino.FileIO.File3dmGroupTable.FindName(string name)
Return: Group
Modifiers: public
Summary: Finds a Group given its name.
Parameter: name (string)
Parameter Summary: The name of the Group to be searched.

Method: Rhino.FileIO.File3dmGroupTable.FindNameHash(NameHash nameHash)
Return: Group
Modifiers: public
Summary: Finds a Group given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the Group to be searched.

Method: Rhino.FileIO.File3dmGroupTable.GroupMembers(int groupIndex)
Return: File3dmObject[]
Modifiers: public
Summary: Gets an array of all of the objects in a group.
Parameter: groupIndex (int)
Parameter Summary: The index of the group in this table.

Class: Rhino.FileIO.File3dmHatchPatternTable
Summary: Provides access to hatch pattern definitions in the 3dm file.

Property: Rhino.FileIO.File3dmHatchPatternTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.HatchPattern</b> .
Accessors: get

Method: Rhino.FileIO.File3dmHatchPatternTable.FindIndex(int index)
Return: HatchPattern
Modifiers: public
Summary: Retrieves a HatchPattern object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.FileIO.File3dmHatchPatternTable.FindName(string name)
Return: HatchPattern
Modifiers: public
Summary: Finds a HatchPattern given its name.
Parameter: name (string)
Parameter Summary: The name of the HatchPattern to be searched.

Method: Rhino.FileIO.File3dmHatchPatternTable.FindNameHash(NameHash nameHash)
Return: HatchPattern
Modifiers: public
Summary: Finds a HatchPattern given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the HatchPattern to be searched.

Class: Rhino.FileIO.File3dmInstanceDefinitionTable
Summary: Provides access to instance (block) definitions in the 3dm file.

Property: Rhino.FileIO.File3dmInstanceDefinitionTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.InstanceDefinition</b> .
Accessors: get

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.Add(string name, string description, Point3d basePoint, GeometryBase geometry, ObjectAttributes attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (GeometryBase)
Parameter Summary: An element.
Parameter: attributes (ObjectAttributes)
Parameter Summary: An attribute.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.
Parameter: attributes (IEnumerable<ObjectAttributes>)
Parameter Summary: An array, a list or any enumerable set of attributes.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.Add(string name, string description, Point3d basePoint, IEnumerable<GeometryBase> geometry)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.Add(string name, string description, string url, string urlTag, Point3d basePoint, IEnumerable<GeometryBase> geometry, IEnumerable<ObjectAttributes> attributes)
Return: int
Modifiers: public
Summary: Adds an instance definition to the instance definition table.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.
Parameter: url (string)
Parameter Summary: A URL or hyperlink.
Parameter: urlTag (string)
Parameter Summary: A description of the URL or hyperlink.
Parameter: basePoint (Point3d)
Parameter Summary: A base point.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: An array, a list or any enumerable set of geometry.
Parameter: attributes (IEnumerable<ObjectAttributes>)
Parameter Summary: An array, a list or any enumerable set of attributes.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.AddLinked(string filename, string name, string description)
Return: int
Modifiers: public
Summary: Adds a linked instance definition to the instance definition table.
Parameter: filename (string)
Parameter Summary: Full path of the file to link.
Parameter: name (string)
Parameter Summary: The definition name.
Parameter: description (string)
Parameter Summary: The definition description.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.FindName(string name)
Return: InstanceDefinitionGeometry
Modifiers: public
Summary: Finds an InstanceDefinitionGeometry given its name.
Parameter: name (string)
Parameter Summary: The name of the InstanceDefinitionGeometry to be searched.

Method: Rhino.FileIO.File3dmInstanceDefinitionTable.FindNameHash(NameHash nameHash)
Return: InstanceDefinitionGeometry
Modifiers: public
Summary: Finds a InstanceDefinitionGeometry given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the InstanceDefinitionGeometry to be searched.

Class: Rhino.FileIO.File3dmLayerTable
Summary: Provides access to layers in the 3dm file.

Property: Rhino.FileIO.File3dmLayerTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.Layer</b> .
Accessors: get

Method: Rhino.FileIO.File3dmLayerTable.AddDefaultLayer(string name, System.Drawing.Color color)
Return: int
Modifiers: public
Summary: Easy way to add a default layer to the model.
Parameter: name (string)
Parameter Summary: Layer name.
Parameter: color (System.Drawing.Color)
Parameter Summary: Layer color.

Method: Rhino.FileIO.File3dmLayerTable.AddLayer(string name, System.Drawing.Color color, System.Guid parentId)
Return: int
Modifiers: public
Summary: Add a new layer to the model.
Parameter: name (string)
Parameter Summary: Layer name.
Parameter: color (System.Drawing.Color)
Parameter Summary: Layer color.
Parameter: parentId (System.Guid)
Parameter Summary: The id of the parent layer, can be Guid.Empty.

Method: Rhino.FileIO.File3dmLayerTable.AddLayer(string name, System.Drawing.Color color)
Return: int
Modifiers: public
Summary: Easy way to add a new layer to the model.
Parameter: name (string)
Parameter Summary: Layer name.
Parameter: color (System.Drawing.Color)
Parameter Summary: Layer color.

Method: Rhino.FileIO.File3dmLayerTable.FindIndex(int index)
Return: Layer
Modifiers: public
Summary: Retrieves a Layer object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.FileIO.File3dmLayerTable.FindName(string name, System.Guid parentId)
Return: Layer
Modifiers: public
Summary: Finds a Layer given its name.
Parameter: name (string)
Parameter Summary: The name of the Layer to be searched.
Parameter: parentId (System.Guid)
Parameter Summary: The id of the parent Layer to be searched.

Method: Rhino.FileIO.File3dmLayerTable.FindNameHash(NameHash nameHash)
Return: Layer
Modifiers: public
Summary: Finds a Layer given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the Layer to be searched.

Class: Rhino.FileIO.File3dmLinetypeTable
Summary: Provides access to Linetypes in the 3dm file.

Property: Rhino.FileIO.File3dmLinetypeTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.LinePattern</b> .
Accessors: get

Method: Rhino.FileIO.File3dmLinetypeTable.FindIndex(int index)
Return: Linetype
Modifiers: public
Summary: Retrieves a Linetype object based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Method: Rhino.FileIO.File3dmLinetypeTable.FindName(string name)
Return: Linetype
Modifiers: public
Summary: Finds a Linetype given its name.
Parameter: name (string)
Parameter Summary: The name of the Linetype to be searched.

Method: Rhino.FileIO.File3dmLinetypeTable.FindNameHash(NameHash nameHash)
Return: Linetype
Modifiers: public
Summary: Finds a Linetype given its name hash.
Parameter: nameHash (NameHash)
Parameter Summary: The name hash of the Linetype to be searched.

Class: Rhino.FileIO.File3dmMaterialTable
Summary: Provides access to materials in the 3dm file.

Property: Rhino.FileIO.File3dmMaterialTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.RenderMaterial</b> .
Accessors: get

Method: Rhino.FileIO.File3dmMaterialTable.AddMaterial(DocObjects.Material material)
Return: int
Modifiers: public
Summary: Adds a material to the model material table

Method: Rhino.FileIO.File3dmMaterialTable.FindIndex(int index)
Return: DocObjects.Material
Modifiers: public
Summary: Retrieves a material based on Index. This search type of search is discouraged. We are moving towards using only IDs for all tables.
Parameter: index (int)
Parameter Summary: The index to search for.

Class: Rhino.FileIO.File3dmMeshModifiers
Summary: Represents the mesh modifiers attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmMeshModifiers.CurvePiping
Return: File3dmCurvePiping
Modifiers: public
Summary: Returns an object that provides access to curve piping information. If no curve piping information is present, the method returns null.
Accessors: get

Property: Rhino.FileIO.File3dmMeshModifiers.Displacement
Return: File3dmDisplacement
Modifiers: public
Summary: Returns an object that provides access to displacement information. If no displacement information is present, the method returns null.
Accessors: get

Property: Rhino.FileIO.File3dmMeshModifiers.EdgeSoftening
Return: File3dmEdgeSoftening
Modifiers: public
Summary: Returns an object that provides access to edge softening information. If no edge softening information is present, the method returns null.
Accessors: get

Property: Rhino.FileIO.File3dmMeshModifiers.ShutLining
Return: File3dmShutLining
Modifiers: public
Summary: Returns an object that provides access to shut-lining information. If no shutlining information is present, the method returns null.
Accessors: get

Property: Rhino.FileIO.File3dmMeshModifiers.Thickening
Return: File3dmThickening
Modifiers: public
Summary: Returns an object that provides access to thickening information. If no thickening information is present, the method returns null.
Accessors: get

Class: Rhino.FileIO.File3dmNamedConstructionPlanes
Summary: Provides access to named construction planes in the 3dm file.

Property: Rhino.FileIO.File3dmNamedConstructionPlanes.Count
Return: int
Modifiers: public
Summary: Number of named construction planes in the table.
Accessors: get

Property: Rhino.FileIO.File3dmNamedConstructionPlanes.this[int index]
Return: ConstructionPlane
Modifiers: public
Summary: Gets the named construction plane at an index.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Add(ConstructionPlane cplane)
Return: void
Modifiers: public
Summary: Adds a named construction plane to the table.
Parameter: cplane (ConstructionPlane)
Parameter Summary: The construction plane to add.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Add(string name, Geometry.Plane plane)
Return: int
Modifiers: public
Summary: Adds a named construction plane to the table.
Parameter: name (string)
Parameter Summary: The name of the named construction plane.
Parameter: plane (Geometry.Plane)
Parameter Summary: The plane value.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Clear()
Return: void
Modifiers: public
Summary: Removes all named construction planes from the table.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Contains(ConstructionPlane cplane)
Return: bool
Modifiers: public
Summary: Returns an indication of the presence of a named construction plane in the table.
Parameter: cplane (ConstructionPlane)
Parameter Summary: The construction plane to check.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.CopyTo(ConstructionPlane[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the content of the table to an array.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(DocObjects.ConstructionPlane cplane)
Return: bool
Modifiers: public
Summary: Deletes a named construction plane from the table.
Parameter: cplane (DocObjects.ConstructionPlane)
Parameter Summary: The construction plane to delete.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.Delete(int index)
Return: bool
Modifiers: public
Summary: Remove a named construction plane from the table.
Parameter: index (int)
Parameter Summary: Zero based array index.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.FindName(string name)
Return: ConstructionPlane
Modifiers: public
Summary: Finds a named construction plane given its name.
Parameter: name (string)
Parameter Summary: The name of the construction plane to be searched.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.GetEnumerator()
Return: IEnumerator<ConstructionPlane>
Modifiers: public
Summary: Gets an enumerator that yields all construction planes in this collection.

Method: Rhino.FileIO.File3dmNamedConstructionPlanes.IndexOf(ConstructionPlane cplane)
Return: int
Modifiers: public
Summary: Returns the index of a named construction plane.
Parameter: cplane (ConstructionPlane)
Parameter Summary: The construction plane to be searched.

Class: Rhino.FileIO.File3dmNotes
Summary: Represents the notes information stored in a 3dm file.

Constructor: Rhino.FileIO.File3dmNotes.File3dmNotes()
Summary: Creates empty default notes

Property: Rhino.FileIO.File3dmNotes.IsHtml
Return: bool
Modifiers: public
Summary: Gets or sets the text format. If the format is HTML, true; False otherwise.
Accessors: get set

Property: Rhino.FileIO.File3dmNotes.IsVisible
Return: bool
Modifiers: public
Summary: Gets or sets the notes visibility. If the notes are visible, true; False otherwise.
Accessors: get set

Property: Rhino.FileIO.File3dmNotes.Notes
Return: string
Modifiers: public
Summary: Gets or sets the text content of the notes.
Accessors: get set

Property: Rhino.FileIO.File3dmNotes.WindowRectangle
Return: Rectangle
Modifiers: public
Summary: Gets or sets the position of the Notes when they were saved.
Accessors: get set

Class: Rhino.FileIO.File3dmObject
Summary: Used to store geometry table object definition and attributes in a File3dm.

Property: Rhino.FileIO.File3dmObject.Attributes
Return: ObjectAttributes
Modifiers: public
Summary: Gets the attributes that are linked with this document object.
Accessors: get

Property: Rhino.FileIO.File3dmObject.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.ModelGeometry</b> .
Accessors: get

Property: Rhino.FileIO.File3dmObject.Geometry
Return: GeometryBase
Modifiers: public
Summary: Gets the geometry that is linked with this document object.
Accessors: get

Property: Rhino.FileIO.File3dmObject.Name
Return: string
Modifiers: public, override
Summary: Gets or sets the Name of the object. Equivalent to this.Attributes.Name.
Accessors: get set

Method: Rhino.FileIO.File3dmObject.Equals(File3dmObject other)
Return: bool
Modifiers: public
Summary: Verified that two File3dmObject items refer to the same object in a document.
Parameter: other (File3dmObject)
Parameter Summary: The other item to test.

Method: Rhino.FileIO.File3dmObject.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Verified that two objects refer to the same object in a document.
Parameter: obj (object)
Parameter Summary: The other item to test.

Method: Rhino.FileIO.File3dmObject.GetHashCode()
Return: int
Modifiers: public, override
Summary: Provides an hash code for this item.

Method: Rhino.FileIO.File3dmObject.GetTextureMapping(int mappingChannelId, out Transform xform)
Return: TextureMapping
Modifiers: public
Summary: Gets the texture mapping from the <b>File3dmObject</b> object.
Parameter: mappingChannelId (int)
Parameter Summary: The mapping channel id to search for.
Parameter: xform (Transform)
Parameter Summary: The transformation that was applied to the mapping.

Method: Rhino.FileIO.File3dmObject.TryReadUserData(System.Guid userDataId, bool readFromAttributes, Func<File3dm, BinaryArchiveReader, bool> dataReader)
Return: bool
Modifiers: public
Summary: Attempts to read a Rhino plug-in's custom userdata from the <b>File3dmObject</b> object.
Parameter: userDataId (System.Guid)
Parameter Summary: The id of the custom userdata object whose data you want to try to read
Parameter: readFromAttributes (bool)
Parameter Summary: Set True to attempt to read custom userdata object from the object's <b>Attributes</b> . Set False to attempt to read custom userdata object from the object's <b>Geometry</b> .
Parameter: dataReader (Func<File3dm, BinaryArchiveReader, bool>)
Parameter Summary: The function that will read the data. This function must be implemented identical to the the originating <b>DocObjects.Custom.UserData</b> -inherited class's Read method.

Class: Rhino.FileIO.File3dmObjectTable
Summary: Represents a simple object table for a file that is open externally.
This class mimics Rhino.DocObjects.Tables.ObjectTable while providing external access to the file.

Property: Rhino.FileIO.File3dmObjectTable.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.ModelGeometry</b> .
Accessors: get

Property: Rhino.FileIO.File3dmObjectTable.Count
Return: int
Modifiers: public, override
Summary: Returns the total amount of items in the object table, including lights.
Accessors: get

Method: Rhino.FileIO.File3dmObjectTable.Add(File3dmObject item)
Return: void
Modifiers: public, override
Summary: Duplicates the object, then adds a copy of the object to the document.
Parameter: item (File3dmObject)
Parameter Summary: The item to duplicate and add.

Method: Rhino.FileIO.File3dmObjectTable.Add(GeometryBase item, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Duplicates the object, then adds a copy of the object to the document.
Parameter: item (GeometryBase)
Parameter Summary: The item to duplicate and add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The attributes to link with geometry.

Method: Rhino.FileIO.File3dmObjectTable.AddAngularDimension(AngularDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a angular dimension object to the 3dm file object table.
Parameter: dimension (AngularDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.

Method: Rhino.FileIO.File3dmObjectTable.AddAngularDimension(AngularDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds a angular dimension object to the 3dm file object table.
Parameter: dimension (AngularDimension)
Parameter Summary: Dimension object to add.

Method: Rhino.FileIO.File3dmObjectTable.AddArc(Arc arc, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an arc.
Parameter: arc (Arc)
Parameter Summary: An arc to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to arc.

Method: Rhino.FileIO.File3dmObjectTable.AddArc(Arc arc)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an arc.
Parameter: arc (Arc)
Parameter Summary: An arc.

Method: Rhino.FileIO.File3dmObjectTable.AddBrep(Geometry.Brep brep, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a brep object to Rhino.
Parameter: brep (Geometry.Brep)
Parameter Summary: A duplicate of this brep is added to Rhino.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to brep.

Method: Rhino.FileIO.File3dmObjectTable.AddBrep(Geometry.Brep brep)
Return: System.Guid
Modifiers: public
Summary: Adds a brep object to Rhino.
Parameter: brep (Geometry.Brep)
Parameter Summary: A duplicate of this brep is added to Rhino.

Method: Rhino.FileIO.File3dmObjectTable.AddCircle(Circle circle, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing a circle.
Parameter: circle (Circle)
Parameter Summary: A circle to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to circle.

Method: Rhino.FileIO.File3dmObjectTable.AddCircle(Circle circle)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing a circle.
Parameter: circle (Circle)
Parameter Summary: A circle to add.

Method: Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: uMagnitude (double)
Parameter Summary: The size in U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in V direction.
Parameter: clippedViewportIds (IEnumerable<Guid>)
Parameter Summary: list of viewport ids that the new clipping plane will clip.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud.

Method: Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, IEnumerable<Guid> clippedViewportIds)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: uMagnitude (double)
Parameter Summary: The size in U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in V direction.
Parameter: clippedViewportIds (IEnumerable<Guid>)
Parameter Summary: A list, an array or any enumerable of viewport ids that the new clipping plane will clip.

Method: Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Plane plane, double uMagnitude, double vMagnitude, System.Guid clippedViewportId)
Return: System.Guid
Modifiers: public
Summary: Adds a clipping plane object to Rhino.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: uMagnitude (double)
Parameter Summary: The size in U direction.
Parameter: vMagnitude (double)
Parameter Summary: The size in V direction.
Parameter: clippedViewportId (System.Guid)
Parameter Summary: The viewport id that the new clipping plane will clip.

Method: Rhino.FileIO.File3dmObjectTable.AddCurve(Geometry.Curve curve, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the table.
Parameter: curve (Geometry.Curve)
Parameter Summary: A duplicate of this curve is added to Rhino.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to curve.

Method: Rhino.FileIO.File3dmObjectTable.AddCurve(Geometry.Curve curve)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the table.
Parameter: curve (Geometry.Curve)
Parameter Summary: A curve to add.

Method: Rhino.FileIO.File3dmObjectTable.AddEllipse(Ellipse ellipse, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an ellipse.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to ellipse.

Method: Rhino.FileIO.File3dmObjectTable.AddEllipse(Ellipse ellipse)
Return: System.Guid
Modifiers: public
Summary: Adds a curve object to the document representing an ellipse.
Parameter: ellipse (Ellipse)
Parameter Summary: An ellipse to add.

Method: Rhino.FileIO.File3dmObjectTable.AddExtrusion(Geometry.Extrusion extrusion, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an extrusion object to Rhino.
Parameter: extrusion (Geometry.Extrusion)
Parameter Summary: A duplicate of this extrusion is added to Rhino.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link to the object.

Method: Rhino.FileIO.File3dmObjectTable.AddExtrusion(Geometry.Extrusion extrusion)
Return: System.Guid
Modifiers: public
Summary: Adds an extrusion object to Rhino.
Parameter: extrusion (Geometry.Extrusion)
Parameter Summary: A duplicate of this extrusion is added to Rhino.

Method: Rhino.FileIO.File3dmObjectTable.AddHatch(Hatch hatch, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a hatch to the document.
Parameter: hatch (Hatch)
Parameter Summary: A hatch.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply

Method: Rhino.FileIO.File3dmObjectTable.AddHatch(Hatch hatch)
Return: System.Guid
Modifiers: public
Summary: Adds a hatch to the document.
Parameter: hatch (Hatch)
Parameter Summary: A hatch.

Method: Rhino.FileIO.File3dmObjectTable.AddInstanceObject(InstanceReferenceGeometry instanceReference, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an instance reference geometry object to the table.
Parameter: instanceReference (InstanceReferenceGeometry)
Parameter Summary: The instance reference geometry object.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The attributes to link with the object.

Method: Rhino.FileIO.File3dmObjectTable.AddInstanceObject(InstanceReferenceGeometry instanceReference)
Return: System.Guid
Modifiers: public
Summary: Adds an instance reference geometry object to the table.
Parameter: instanceReference (InstanceReferenceGeometry)
Parameter Summary: The instance reference geometry object.

Method: Rhino.FileIO.File3dmObjectTable.AddInstanceObject(int instanceDefinitionIndex, Transform instanceXform, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an instance reference geometry object to the table.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the instance definition geometry object.
Parameter: instanceXform (Transform)
Parameter Summary: The transformation.
Parameter: attributes (ObjectAttributes)
Parameter Summary: The object attributes.

Method: Rhino.FileIO.File3dmObjectTable.AddInstanceObject(int instanceDefinitionIndex, Transform instanceXform)
Return: System.Guid
Modifiers: public
Summary: Adds an instance reference geometry object to the table.
Parameter: instanceDefinitionIndex (int)
Parameter Summary: The index of the instance definition geometry object.
Parameter: instanceXform (Transform)
Parameter Summary: The transformation.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document. This overload is only provided in the Rhino SDK.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(Plane plane, IEnumerable<Point2d> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to brep.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(Plane plane, IEnumerable<Point2d> points)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(string text, IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document. This overload is only provided in the Rhino SDK.
Parameter: text (string)
Parameter Summary: The text.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(string text, Plane plane, IEnumerable<Point2d> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document.
Parameter: text (string)
Parameter Summary: The text.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to brep.

Method: Rhino.FileIO.File3dmObjectTable.AddLeader(string text, Plane plane, IEnumerable<Point2d> points)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation leader to the document.
Parameter: text (string)
Parameter Summary: The text.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: A list, an array or any enumerable set of 2d points.

Method: Rhino.FileIO.File3dmObjectTable.AddLine(Line line, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: line (Line)
Parameter Summary: A line.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to line.

Method: Rhino.FileIO.File3dmObjectTable.AddLine(Line line)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.

Method: Rhino.FileIO.File3dmObjectTable.AddLine(Point3d from, Point3d to, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: from (Point3d)
Parameter Summary: The start point of the line.
Parameter: to (Point3d)
Parameter Summary: The end point of the line.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to line.

Method: Rhino.FileIO.File3dmObjectTable.AddLine(Point3d from, Point3d to)
Return: System.Guid
Modifiers: public
Summary: Adds a line object to Rhino.
Parameter: from (Point3d)
Parameter Summary: A line start point.
Parameter: to (Point3d)
Parameter Summary: A line end point.

Method: Rhino.FileIO.File3dmObjectTable.AddLinearDimension(LinearDimension dimension, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a linear dimension to the 3dm file object table.
Parameter: dimension (LinearDimension)
Parameter Summary: A dimension.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.

Method: Rhino.FileIO.File3dmObjectTable.AddLinearDimension(LinearDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds a linear dimension to the 3dm file object table.
Parameter: dimension (LinearDimension)
Parameter Summary: A dimension.

Method: Rhino.FileIO.File3dmObjectTable.AddMesh(Geometry.Mesh mesh, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a mesh object to Rhino.
Parameter: mesh (Geometry.Mesh)
Parameter Summary: A duplicate of this mesh is added to Rhino.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link to the object.

Method: Rhino.FileIO.File3dmObjectTable.AddMesh(Geometry.Mesh mesh)
Return: System.Guid
Modifiers: public
Summary: Adds a mesh object to Rhino.
Parameter: mesh (Geometry.Mesh)
Parameter Summary: A duplicate of this mesh is added to Rhino.

Method: Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(OrdinateDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an ordinate dimension object to the 3dm file object table.
Parameter: dimension (OrdinateDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.

Method: Rhino.FileIO.File3dmObjectTable.AddOrdinateDimension(OrdinateDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds an ordinate dimension object to the 3dm file object table.
Parameter: dimension (OrdinateDimension)
Parameter Summary: Dimension object to add.

Method: Rhino.FileIO.File3dmObjectTable.AddPoint(double x, double y, double z)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the table.
Parameter: x (double)
Parameter Summary: X component of point coordinate.
Parameter: y (double)
Parameter Summary: Y component of point coordinate.
Parameter: z (double)
Parameter Summary: Z component of point coordinate.

Method: Rhino.FileIO.File3dmObjectTable.AddPoint(Point3d point, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3d)
Parameter Summary: A location for point.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to point.

Method: Rhino.FileIO.File3dmObjectTable.AddPoint(Point3d point)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the table.
Parameter: point (Point3d)
Parameter Summary: A location for point.

Method: Rhino.FileIO.File3dmObjectTable.AddPoint(Point3f point, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3f)
Parameter Summary: location of point.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to point.

Method: Rhino.FileIO.File3dmObjectTable.AddPoint(Point3f point)
Return: System.Guid
Modifiers: public
Summary: Adds a point object to the document.
Parameter: point (Point3f)
Parameter Summary: location of point.

Method: Rhino.FileIO.File3dmObjectTable.AddPointCloud(IEnumerable<Point3d> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to point cloud.

Method: Rhino.FileIO.File3dmObjectTable.AddPointCloud(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .

Method: Rhino.FileIO.File3dmObjectTable.AddPointCloud(PointCloud cloud, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: cloud (PointCloud)
Parameter Summary: PointCloud to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: attributes to apply to point cloud.

Method: Rhino.FileIO.File3dmObjectTable.AddPointCloud(PointCloud cloud)
Return: System.Guid
Modifiers: public
Summary: Adds a point cloud object to the document.
Parameter: cloud (PointCloud)
Parameter Summary: PointCloud to add.

Method: Rhino.FileIO.File3dmObjectTable.AddPoints(IEnumerable<Point3d> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid[]
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to point objects.

Method: Rhino.FileIO.File3dmObjectTable.AddPoints(IEnumerable<Point3d> points)
Return: System.Guid[]
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to add.

Method: Rhino.FileIO.File3dmObjectTable.AddPoints(IEnumerable<Point3f> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid[]
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3f>)
Parameter Summary: Points to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to point objects.

Method: Rhino.FileIO.File3dmObjectTable.AddPoints(IEnumerable<Point3f> points)
Return: System.Guid[]
Modifiers: public
Summary: Adds multiple points to the document.
Parameter: points (IEnumerable<Point3f>)
Parameter Summary: Points to add.

Method: Rhino.FileIO.File3dmObjectTable.AddPolyline(IEnumerable<Point3d> points, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a polyline object to Rhino.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply to line.

Method: Rhino.FileIO.File3dmObjectTable.AddPolyline(IEnumerable<Point3d> points)
Return: System.Guid
Modifiers: public
Summary: Adds a polyline object to Rhino.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .

Method: Rhino.FileIO.File3dmObjectTable.AddRadialDimension(RadialDimension dimension, ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a radial dimension object to the 3dm file object table.
Parameter: dimension (RadialDimension)
Parameter Summary: Dimension object to add.
Parameter: attributes (ObjectAttributes)
Parameter Summary: Attributes to apply to dimension.

Method: Rhino.FileIO.File3dmObjectTable.AddRadialDimension(RadialDimension dimension)
Return: System.Guid
Modifiers: public
Summary: Adds a radial dimension object to the 3dm file object table.
Parameter: dimension (RadialDimension)
Parameter Summary: Dimension object to add.

Method: Rhino.FileIO.File3dmObjectTable.AddSphere(Sphere sphere, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to the document representing a sphere.
Parameter: sphere (Sphere)
Parameter Summary: A sphere to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link with the sphere.

Method: Rhino.FileIO.File3dmObjectTable.AddSphere(Sphere sphere)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to the document representing a sphere.
Parameter: sphere (Sphere)
Parameter Summary: A sphere to add.

Method: Rhino.FileIO.File3dmObjectTable.AddSubD(SubD subd, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a SubD to the document
Parameter: subd (SubD)
Parameter Summary: the Subd to add
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to apply

Method: Rhino.FileIO.File3dmObjectTable.AddSubD(SubD subd)
Return: System.Guid
Modifiers: public
Summary: Adds a SubD to the document
Parameter: subd (SubD)
Parameter Summary: the Subd to add

Method: Rhino.FileIO.File3dmObjectTable.AddSurface(Geometry.Surface surface, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to Rhino.
Parameter: surface (Geometry.Surface)
Parameter Summary: A duplicate of this surface is added to Rhino.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link to the object.

Method: Rhino.FileIO.File3dmObjectTable.AddSurface(Geometry.Surface surface)
Return: System.Guid
Modifiers: public
Summary: Adds a surface object to Rhino.
Parameter: surface (Geometry.Surface)
Parameter Summary: A duplicate of this surface is added to Rhino.

Method: Rhino.FileIO.File3dmObjectTable.AddText(Rhino.Display.Text3d text3d, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text3d (Rhino.Display.Text3d)
Parameter Summary: The text object to add.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link to the object.

Method: Rhino.FileIO.File3dmObjectTable.AddText(Rhino.Display.Text3d text3d)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text3d (Rhino.Display.Text3d)
Parameter Summary: The text object to add.

Method: Rhino.FileIO.File3dmObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Object Attributes.

Method: Rhino.FileIO.File3dmObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, TextJustification justification, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.
Parameter: justification (TextJustification)
Parameter Summary: The justification of the text.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link to the object.

Method: Rhino.FileIO.File3dmObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic, TextJustification justification)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.
Parameter: justification (TextJustification)
Parameter Summary: The justification of the text.

Method: Rhino.FileIO.File3dmObjectTable.AddText(string text, Plane plane, double height, string fontName, bool bold, bool italic)
Return: System.Guid
Modifiers: public
Summary: Adds an annotation text object to the document.
Parameter: text (string)
Parameter Summary: Text string.
Parameter: plane (Plane)
Parameter Summary: Plane of text.
Parameter: height (double)
Parameter Summary: Height of text.
Parameter: fontName (string)
Parameter Summary: Name of FontFace.
Parameter: bold (bool)
Parameter Summary: Bold flag.
Parameter: italic (bool)
Parameter Summary: Italic flag.

Method: Rhino.FileIO.File3dmObjectTable.AddTextDot(Geometry.TextDot dot, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to the table.
Parameter: dot (Geometry.TextDot)
Parameter Summary: The text dot.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link with text dot.

Method: Rhino.FileIO.File3dmObjectTable.AddTextDot(Geometry.TextDot dot)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to the table.
Parameter: dot (Geometry.TextDot)
Parameter Summary: The text dot.

Method: Rhino.FileIO.File3dmObjectTable.AddTextDot(string text, Point3d location, DocObjects.ObjectAttributes attributes)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to the table.
Parameter: text (string)
Parameter Summary: The text.
Parameter: location (Point3d)
Parameter Summary: The location.
Parameter: attributes (DocObjects.ObjectAttributes)
Parameter Summary: Attributes to link with curve.

Method: Rhino.FileIO.File3dmObjectTable.AddTextDot(string text, Point3d location)
Return: System.Guid
Modifiers: public
Summary: Adds a text dot object to the table.
Parameter: text (string)
Parameter Summary: The text.
Parameter: location (Point3d)
Parameter Summary: The location.

Method: Rhino.FileIO.File3dmObjectTable.Delete(IEnumerable<Guid> objectIds)
Return: int
Modifiers: public
Summary: Deletes a collection of objects from the document.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: Ids of all objects to delete.

Method: Rhino.FileIO.File3dmObjectTable.Delete(System.Guid objectId)
Return: bool
Modifiers: public
Summary: Deletes object from document.
Parameter: objectId (System.Guid)
Parameter Summary: Id of the object to delete.

Method: Rhino.FileIO.File3dmObjectTable.FindByGroup(Group group)
Return: File3dmObject[]
Modifiers: public
Summary: Finds all File3dmObject that are in a given group.
Parameter: group (Group)
Parameter Summary: A group instance.

Method: Rhino.FileIO.File3dmObjectTable.FindByLayer(Layer layer)
Return: File3dmObject[]
Modifiers: public
Summary: Finds all File3dmObject that are in a given layer.
Parameter: layer (Layer)
Parameter Summary: A layer instance.

Method: Rhino.FileIO.File3dmObjectTable.FindByLayer(string layer)
Return: File3dmObject[]
Modifiers: public
Summary: Finds all File3dmObject that are in a given layer.
Parameter: layer (string)
Parameter Summary: Layer to search.

Method: Rhino.FileIO.File3dmObjectTable.GetBoundingBox()
Return: Rhino.Geometry.BoundingBox
Modifiers: public
Summary: Gets the bounding box containing every object in this table.

Method: Rhino.FileIO.File3dmObjectTable.GetEnumerator()
Return: IEnumerator<File3dmObject>
Modifiers: public, override
Summary: Returns an enumerator that yields all objects in this document. Like in Rhino, this includes lights. Unlike in Rhino, however, all lights are returned in the end of the list.

Class: Rhino.FileIO.File3dmPlugInData
Summary: Represents custom plug-in data, in the 3dm file, written by a plug-in.

Property: Rhino.FileIO.File3dmPlugInData.PlugInId
Return: Guid
Modifiers: public
Summary: Gets the id of the plug-in that is associated with this custom data.
Accessors: get

Class: Rhino.FileIO.File3dmPlugInDataTable
Summary: Table of custom data provided by plug-ins

Property: Rhino.FileIO.File3dmPlugInDataTable.Count
Return: int
Modifiers: public
Summary: Gets the number of <b>File3dmPlugInData</b> objects in this table.
Accessors: get

Property: Rhino.FileIO.File3dmPlugInDataTable.this[int index]
Return: File3dmPlugInData
Modifiers: public
Summary: Gets the <b>File3dmPlugInData</b> object at the given index.

Method: Rhino.FileIO.File3dmPlugInDataTable.Clear()
Return: void
Modifiers: public
Summary: Remove all entries from this table.

Method: Rhino.FileIO.File3dmPlugInDataTable.Dump()
Return: string
Modifiers: public
Summary: Prepares a text dump of table.

Method: Rhino.FileIO.File3dmPlugInDataTable.GetEnumerator()
Return: IEnumerator<File3dmPlugInData>
Modifiers: public
Summary: Gets the enumerator that visits any <b>File3dmPlugInData</b> in this table.

Method: Rhino.FileIO.File3dmPlugInDataTable.TryRead(File3dmPlugInData pluginData, Func<File3dm, BinaryArchiveReader, bool> dataReader)
Return: bool
Modifiers: public
Summary: Attempts to read a Rhino plug-in's custom data from the <b>File3dm</b> file.
Parameter: pluginData (File3dmPlugInData)
Parameter Summary: The plug-in whose data you want to try to read.
Parameter: dataReader (Func<File3dm, BinaryArchiveReader, bool>)
Parameter Summary: The function that will read the data. This function must be implemented identical to the the originating plug-in's <b>PlugIns.PlugIn.ReadDocument(RhinoDoc, BinaryArchiveReader, FileReadOptions)</b> method.

Class: Rhino.FileIO.File3dmRenderContent

Property: Rhino.FileIO.File3dmRenderContent.AutoDelete
Return: bool
Modifiers: public
Summary: True if the content is automatically deleted when not in use.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Children
Return: IEnumerable<File3dmRenderContent>
Modifiers: public
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.ChildSlotName
Return: string
Modifiers: public
Summary: The render content's child slot name.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.RenderContent</b> .
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.File3dmParent
Return: File3dm
Modifiers: public
Summary: The parent File3dm of the entire hierarchy.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.GroupId
Return: Guid
Modifiers: public
Summary: The content's group id.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Hidden
Return: bool
Modifiers: public
Summary: True if the content is hidden.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.IsChild
Return: bool
Modifiers: public
Summary: True if this is a child of another render content (i.e., has a parent; is not top-level).
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.IsTopLevel
Return: bool
Modifiers: public
Summary: True if this is a top-level render content (i.e., has no parent; is not a child).
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Kind
Return: string
Modifiers: public
Summary: the kind of render content as a string.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Notes
Return: string
Modifiers: public
Summary: The content's notes.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Parent
Return: File3dmRenderContent
Modifiers: public
Summary: The parent content or None if this is the top level object.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.PlugInId
Return: Guid
Modifiers: public
Summary: The content's plug-in id.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Reference
Return: bool
Modifiers: public
Summary: True if the content is a reference content.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.RenderEngineId
Return: Guid
Modifiers: public
Summary: The content's render-engine id.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.Tags
Return: string
Modifiers: public
Summary: The content's tags.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.TopLevel
Return: File3dmRenderContent
Modifiers: public
Summary: The top-level parent content. Returns this if this is the top-level item.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.TypeId
Return: Guid
Modifiers: public
Summary: The unique id of the content type.
Accessors: get

Property: Rhino.FileIO.File3dmRenderContent.TypeName
Return: string
Modifiers: public
Summary: The internal name of the content type.
Accessors: get

Method: Rhino.FileIO.File3dmRenderContent.ChildSlotOn(string child_slot_name)
Return: bool
Modifiers: public
Summary: True if a particular child slot is 'on'.

Method: Rhino.FileIO.File3dmRenderContent.DeleteChild(string child_slot_name)
Return: bool
Modifiers: public
Summary: Deletes any existing child with the specified child slot name. True if successful, else false.

Method: Rhino.FileIO.File3dmRenderContent.FindChild(string child_slot_name)
Return: File3dmRenderContent
Modifiers: public
Summary: The child with the specified child slot name, or None if no such child exists.

Method: Rhino.FileIO.File3dmRenderContent.GetParameter(string param)
Return: System.IConvertible
Modifiers: public
Summary: Gets a named parameter. The parameter value or None if not found.

Method: Rhino.FileIO.File3dmRenderContent.SetParameter(string param, object value)
Return: bool
Modifiers: public
Summary: Sets a named parameter. True if the parameter was set, else false.

Method: Rhino.FileIO.File3dmRenderContent.XML(bool recursive)
Return: string
Modifiers: public
Summary: Gets the render content's state as an XML string.

Class: Rhino.FileIO.File3dmRenderEnvironment

Method: Rhino.FileIO.File3dmRenderEnvironment.ToEnvironment()
Return: Rhino.DocObjects.Environment
Modifiers: public
Summary: Get a simulated environment that approximates this environment's appearance.

Class: Rhino.FileIO.File3dmRenderEnvironments

Constructor: Rhino.FileIO.File3dmRenderEnvironments.File3dmRenderEnvironments(File3dm f)

Method: Rhino.FileIO.File3dmRenderEnvironments.Find(System.Guid g)
Return: File3dmRenderEnvironment
Modifiers: public
Summary: Finds an environment by its id, if possible. Returns None on failure.

Method: Rhino.FileIO.File3dmRenderEnvironments.GetEnumerator()
Return: IEnumerator<File3dmRenderEnvironment>
Modifiers: public

Class: Rhino.FileIO.File3dmRenderMaterial

Method: Rhino.FileIO.File3dmRenderMaterial.ToMaterial()
Return: Material
Modifiers: public
Summary: Get a simulated material that approximates this material's appearance.

Class: Rhino.FileIO.File3dmRenderMaterials

Constructor: Rhino.FileIO.File3dmRenderMaterials.File3dmRenderMaterials(File3dm f)

Method: Rhino.FileIO.File3dmRenderMaterials.Find(System.Guid g)
Return: File3dmRenderMaterial
Modifiers: public
Summary: Finds a material by its id, if possible. Returns None on failure.

Method: Rhino.FileIO.File3dmRenderMaterials.GetEnumerator()
Return: IEnumerator<File3dmRenderMaterial>
Modifiers: public

Class: Rhino.FileIO.File3dmRenderTexture

Property: Rhino.FileIO.File3dmRenderTexture.Filename
Return: string
Modifiers: public
Summary: If the texture has a file name, returns that file name. Otherwise returns an empty string.
Accessors: get

Method: Rhino.FileIO.File3dmRenderTexture.ToTexture()
Return: Texture
Modifiers: public
Summary: Get a simulated texture that approximates this texture's appearance.

Class: Rhino.FileIO.File3dmRenderTextures

Constructor: Rhino.FileIO.File3dmRenderTextures.File3dmRenderTextures(File3dm f)

Method: Rhino.FileIO.File3dmRenderTextures.Find(System.Guid g)
Return: File3dmRenderTexture
Modifiers: public
Summary: Finds a texture by its id, if possible. Returns None on failure.

Method: Rhino.FileIO.File3dmRenderTextures.GetEnumerator()
Return: IEnumerator<File3dmRenderTexture>
Modifiers: public

Class: Rhino.FileIO.File3dmSettings
Summary: General settings in a 3dm file.

Property: Rhino.FileIO.File3dmSettings.ModelAbsoluteTolerance
Return: double
Modifiers: public
Summary: Gets or sets the model space absolute tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelAngleToleranceDegrees
Return: double
Modifiers: public
Summary: Gets or sets the model space angle tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelAngleToleranceRadians
Return: double
Modifiers: public
Summary: Gets or sets the model space angle tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelBasepoint
Return: Point3d
Modifiers: public
Summary: Gets or sets the model base point that is used when the file is read as an instance definition.
This point is mapped to the origin in the instance definition. | Since: 5.0 | Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelRelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the model space relative tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelUnitSystem
Return: UnitSystem
Modifiers: public
Summary: Gets or sets the model unit system, using <b>Rhino.UnitSystem</b> enumeration.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.ModelUrl
Return: string
Modifiers: public
Summary: Gets or sets a Uniform Resource Locator (URL) direction for the model.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.PageAbsoluteTolerance
Return: double
Modifiers: public
Summary: Gets or sets the page space absolute tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.PageAngleToleranceDegrees
Return: double
Modifiers: public
Summary: Gets or sets the page space angle tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.PageAngleToleranceRadians
Return: double
Modifiers: public
Summary: Gets or sets the page space angle tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.PageRelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the page space relative tolerance.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.PageUnitSystem
Return: UnitSystem
Modifiers: public
Summary: Gets or sets the page unit system, using <b>Rhino.UnitSystem</b> enumeration.
Accessors: get set

Property: Rhino.FileIO.File3dmSettings.RenderSettings
Return: RenderSettings
Modifiers: public
Summary: Gets or sets the render settings.
Accessors: get

Class: Rhino.FileIO.File3dmShutLining
Summary: Represents the shut-lining attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmShutLining.AutoUpdate
Return: bool
Modifiers: public
Summary: Specifies whether the shut-lining automatically updates or not.
Accessors: get set

Property: Rhino.FileIO.File3dmShutLining.Faceted
Return: bool
Modifiers: public
Summary: Specifies whether the shut-lining is faceted or not.
Accessors: get set

Property: Rhino.FileIO.File3dmShutLining.ForceUpdate
Return: bool
Modifiers: public
Summary: Specifies whether updating is forced or not.
Accessors: get set

Property: Rhino.FileIO.File3dmShutLining.On
Return: bool
Modifiers: public
Summary: Specifies whether shut-lining is enabled or not.
Accessors: get set

Method: Rhino.FileIO.File3dmShutLining.AddCurve()
Return: System.Guid
Modifiers: public
Summary: Adds a new curve to the shut-lining. The curve will have an id of Guid.Empty. After adding a curve, you should set the id to that of a curve in the model that will be used to calculate the shut-lining.

Method: Rhino.FileIO.File3dmShutLining.CurveEnabled(System.Guid curve_id)
Return: bool
Modifiers: public
Summary: Return whether shut-line is created for the given curve.

Method: Rhino.FileIO.File3dmShutLining.CurveIsBump(System.Guid curve_id)
Return: bool
Modifiers: public
Summary: Returns whether to create a bump instead of a dent for the given curve.

Method: Rhino.FileIO.File3dmShutLining.CurveProfile(System.Guid curve_id)
Return: int
Modifiers: public
Summary: Returns the profile of the shut-line for the given curve.

Method: Rhino.FileIO.File3dmShutLining.CurvePull(System.Guid curve_id)
Return: bool
Modifiers: public
Summary: Returns whether the given curve is pulled to the surface before creating the shut-line.

Method: Rhino.FileIO.File3dmShutLining.CurveRadius(System.Guid curve_id)
Return: double
Modifiers: public
Summary: Returns the radius of the pipe used to create the shut-line for the given curve.

Method: Rhino.FileIO.File3dmShutLining.DeleteAllCurves()
Return: void
Modifiers: public
Summary: Deletes all the curves from the shut-lining.

Method: Rhino.FileIO.File3dmShutLining.GetCurves()
Return: System.Guid[]
Modifiers: public
Summary: Gets all the curves on the shut-lining. Each curve is identified by a Guid. If there are no curves present, the array will be empty.

Method: Rhino.FileIO.File3dmShutLining.SetCurveEnabled(System.Guid curve_id, bool enabled)
Return: void
Modifiers: public
Summary: Sets whether shut-line is created for the given curve.

Method: Rhino.FileIO.File3dmShutLining.SetCurveIsBump(System.Guid curve_id, bool b)
Return: void
Modifiers: public
Summary: Sets whether to create a bump instead of a dent for the given curve.

Method: Rhino.FileIO.File3dmShutLining.SetCurveProfile(System.Guid curve_id, int profile)
Return: void
Modifiers: public
Summary: Sets the profile of the shut-line for the given curve.

Method: Rhino.FileIO.File3dmShutLining.SetCurvePull(System.Guid curve_id, bool pull)
Return: void
Modifiers: public
Summary: Sets whether the given curve is pulled to the surface before creating the shut-line.

Method: Rhino.FileIO.File3dmShutLining.SetCurveRadius(System.Guid curve_id, double radius)
Return: void
Modifiers: public
Summary: Sets the radius of the pipe used to create the shut-line for the given curve.

Class: Rhino.FileIO.File3dmStringTable
Summary: Provides access to document strings in the 3dm file.

Property: Rhino.FileIO.File3dmStringTable.Count
Return: int
Modifiers: public
Summary: Returns the number of document strings in the 3dm file.
Accessors: get

Property: Rhino.FileIO.File3dmStringTable.DocumentUserTextCount
Return: int
Modifiers: public
Summary: Returns the number of Section/Entry-style key values.
Accessors: get

Method: Rhino.FileIO.File3dmStringTable.Delete(string section, string entry)
Return: void
Modifiers: public
Summary: Removes document strings from the 3dm file.
Parameter: section (string)
Parameter Summary: name of section to delete. If null, all sections will be deleted.
Parameter: entry (string)
Parameter Summary: name of entry to delete. If null, all entries will be deleted for a given section.

Method: Rhino.FileIO.File3dmStringTable.Delete(string key)
Return: void
Modifiers: public
Summary: Removes a document string from the 3dm file.
Parameter: key (string)
Parameter Summary: The key to remove.

Method: Rhino.FileIO.File3dmStringTable.GetEntryNames(string section)
Return: string
Modifiers: public
Summary: Return list of all entry names for a given section of document strings in the 3dm file.
Parameter: section (string)
Parameter Summary: The section from which to retrieve section names.

Method: Rhino.FileIO.File3dmStringTable.GetKey(int i)
Return: string
Modifiers: public
Summary: Returns a key value at a given index.
Parameter: i (int)
Parameter Summary: The index.

Method: Rhino.FileIO.File3dmStringTable.GetSectionNames()
Return: string
Modifiers: public
Summary: Returns a list of all the section names for document strings in the 3dm file.
By default a section name is a key that is prefixed with a string separated by a backslash. | Since: 6.0

Method: Rhino.FileIO.File3dmStringTable.GetValue(int i)
Return: string
Modifiers: public
Summary: Returns a string value at a given index.
Parameter: i (int)
Parameter Summary: The index at which to get the value.

Method: Rhino.FileIO.File3dmStringTable.GetValue(string section, string entry)
Return: string
Modifiers: public
Summary: Returns a string value given a section and entry.
Parameter: section (string)
Parameter Summary: The section at which to get the value.
Parameter: entry (string)
Parameter Summary: The entry to search for.

Method: Rhino.FileIO.File3dmStringTable.GetValue(string key)
Return: string
Modifiers: public
Summary: Returns a string value at a key.
Parameter: key (string)
Parameter Summary: The key at which to get the value.

Method: Rhino.FileIO.File3dmStringTable.SetString(string section, string entry, string value)
Return: string
Modifiers: public
Summary: Adds or sets a document string in the 3dm file.
Parameter: section (string)
Parameter Summary: The section.
Parameter: entry (string)
Parameter Summary: The entry name.
Parameter: value (string)
Parameter Summary: The entry value.

Method: Rhino.FileIO.File3dmStringTable.SetString(string key, string value)
Return: string
Modifiers: public
Summary: Adds or sets a a document string in the 3dm file.
Parameter: key (string)
Parameter Summary: The key.
Parameter: value (string)
Parameter Summary: The entry value.

Class: Rhino.FileIO.File3dmThickening
Summary: Represents the thickening attached to file3dm object attributes.

Property: Rhino.FileIO.File3dmThickening.BothSides
Return: bool
Modifiers: public
Summary: Specifies whether to thicken to both sides of the surface.
Accessors: get set

Property: Rhino.FileIO.File3dmThickening.Distance
Return: double
Modifiers: public
Summary: Specifies how thick meshes will be made.
Accessors: get set

Property: Rhino.FileIO.File3dmThickening.OffsetOnly
Return: bool
Modifiers: public
Summary: Specifies whether to only offset the original surface.
Accessors: get set

Property: Rhino.FileIO.File3dmThickening.On
Return: bool
Modifiers: public
Summary: Specifies whether the feature is enabled or not.
Accessors: get set

Property: Rhino.FileIO.File3dmThickening.Solid
Return: bool
Modifiers: public
Summary: Specifies whether to make open meshes solid by adding walls when thickening.
Accessors: get set

Class: Rhino.FileIO.File3dmTypeCodes
Summary: Typecode format 4 bytes long

Constructor: Rhino.FileIO.File3dmTypeCodes.File3dmTypeCodes()
Summary: Initializes a new instance of the File3dmTypeCodes class

Class: Rhino.FileIO.File3dmViewTable
Summary: Provides access to views in the 3dm file.

Property: Rhino.FileIO.File3dmViewTable.Count
Return: int
Modifiers: public
Summary: Gets the amount of items in the table.
Accessors: get

Property: Rhino.FileIO.File3dmViewTable.this[int index]
Return: ViewInfo
Modifiers: public
Summary: Gets the view info at an index. The set method always throws NotSupportedException.

Method: Rhino.FileIO.File3dmViewTable.Add(DocObjects.ViewInfo item)
Return: void
Modifiers: public
Summary: Adds a

Method: Rhino.FileIO.File3dmViewTable.Clear()
Return: void
Modifiers: public
Summary: Removes all items from the table.

Method: Rhino.FileIO.File3dmViewTable.Contains(DocObjects.ViewInfo item)
Return: bool
Modifiers: public
Summary: Returns an indication of the presence of a view in the table.
Parameter: item (DocObjects.ViewInfo)
Parameter Summary: The view to check.

Method: Rhino.FileIO.File3dmViewTable.CopyTo(DocObjects.ViewInfo[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the content of the table to an array.

Method: Rhino.FileIO.File3dmViewTable.Delete(DocObjects.ViewInfo item)
Return: bool
Modifiers: public
Summary: Deletes an item.

Method: Rhino.FileIO.File3dmViewTable.Delete(int index)
Return: bool
Modifiers: public
Summary: Removes an item.
Parameter: index (int)
Parameter Summary: The index of the item to remove.

Method: Rhino.FileIO.File3dmViewTable.FindName(string name)
Return: ViewInfo
Modifiers: public
Summary: Finds a ViewInfo given its name.
Parameter: name (string)
Parameter Summary: The name of the ViewInfo to be searched.

Method: Rhino.FileIO.File3dmViewTable.GetEnumerator()
Return: IEnumerator<DocObjects.ViewInfo>
Modifiers: public
Summary: Returns an enumerator that yields all views in the table.

Method: Rhino.FileIO.File3dmViewTable.IndexOf(DocObjects.ViewInfo item)
Return: int
Modifiers: public
Summary: Returns the index of the current ViewInfo.
Parameter: item (DocObjects.ViewInfo)
Parameter Summary: The item to be searched.

Class: Rhino.FileIO.File3dmWriteOptions
Summary: Options used by File3dm.Write

Constructor: Rhino.FileIO.File3dmWriteOptions.File3dmWriteOptions()
Summary: Initializes properties to defaults.

Property: Rhino.FileIO.File3dmWriteOptions.SaveAnalysisMeshes
Return: bool
Modifiers: public
Summary: Include analysis meshes in the file. Default is true
Accessors: get set

Property: Rhino.FileIO.File3dmWriteOptions.SaveRenderMeshes
Return: bool
Modifiers: public
Summary: Include Render meshes in the file. Default is true
Accessors: get set

Property: Rhino.FileIO.File3dmWriteOptions.SaveUserData
Return: bool
Modifiers: public
Summary: Include custom user data in the file. Default is true
Accessors: get set

Property: Rhino.FileIO.File3dmWriteOptions.Version
Return: int
Modifiers: public
Summary: File version. Default is major version number of this assembly version.
Must be in range [2; current version].
Alternatively, 0 is a placeholder for the last valid version.
Rhino can read its current version, plus earlier file versions except 1.
Use latest version when possible. | Since: 5.9 | Accessors: get set

Method: Rhino.FileIO.File3dmWriteOptions.EnableAnalysisMeshes(ObjectType objectType, bool enable)
Return: void
Modifiers: public
Summary: Activates saving of analysis meshes for specific types of objects. If you do not specify the state for an object type, its default is used. Currently SubD mesh saving is disabled by default, while Brep and Extrusion is enabled.
Parameter: objectType (ObjectType)
Parameter Summary: The object type. Mostly mesh, brep, extrusion and SubD (or their flag combinations) make sense here.
DO NOT specify a 'filter' or sub-object type. | Parameter: enable (bool) | Parameter Summary: If false, disables saving for this object type.

Method: Rhino.FileIO.File3dmWriteOptions.EnableRenderMeshes(ObjectType objectType, bool enable)
Return: void
Modifiers: public
Summary: Activates saving of render meshes for specific types of objects. If you do not specify the state for an object type, its default is used. Specifically, currently SubD mesh saving is disabled by default, while Brep and Extrusion is on.
Parameter: objectType (ObjectType)
Parameter Summary: The object type. Mostly brep, extrusion and SubD (or their flag combinations) make sense here.
DO NOT specify a 'filter' or sub-object type. | Parameter: enable (bool) | Parameter Summary: If false, disables saving for this object type.

Class: Rhino.FileIO.File3ds
Summary: Support for writing 3ds file format

Constructor: Rhino.FileIO.File3ds.File3ds()
Summary: Initializes a new instance of the File3ds class

Method: Rhino.FileIO.File3ds.Read(string path, RhinoDoc doc, File3dsReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a 3ds file intof a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (File3dsReadOptions)
Parameter Summary: options used for importing the 3ds file

Method: Rhino.FileIO.File3ds.Write(string path, RhinoDoc doc, File3dsWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a 3ds file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (File3dsWriteOptions)
Parameter Summary: options used for generating the 3ds file

Class: Rhino.FileIO.File3dsReadOptions
Summary: Options for reading a 3ds file

Constructor: Rhino.FileIO.File3dsReadOptions.File3dsReadOptions()
Summary: Initializes a new instance of the File3dsReadOptions class

Property: Rhino.FileIO.File3dsReadOptions.ImportCameras
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3dsReadOptions.ImportLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3dsReadOptions.Unweld
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3dsReadOptions.UnweldAngle
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.File3dsReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.File3dsWriteOptions
Summary: Options for writing a 3ds file

Constructor: Rhino.FileIO.File3dsWriteOptions.File3dsWriteOptions()
Summary: Initializes a new instance of the File3dsWriteOptions class

Property: Rhino.FileIO.File3dsWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3dsWriteOptions.SaveLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3dsWriteOptions.SaveViews
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.File3dsWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.File3mf
Summary: Support for writing 3mf file format

Constructor: Rhino.FileIO.File3mf.File3mf()
Summary: Initializes a new instance of the File3mf class

Method: Rhino.FileIO.File3mf.Write(string path, RhinoDoc doc, File3mfWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a 3mf file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (File3mfWriteOptions)
Parameter Summary: options used for generating the Vda file

Class: Rhino.FileIO.File3mfWriteOptions
Summary: Options for writing a 3mf file

Constructor: Rhino.FileIO.File3mfWriteOptions.File3mfWriteOptions()
Summary: Initializes a new instance of the File3mfWriteOptions class

Property: Rhino.FileIO.File3mfWriteOptions.Copyright
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.Description
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.Designer
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.LicenseTerms
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.string> Metadata
Return: Dictionary<string,
Modifiers: public
Accessors: get

Property: Rhino.FileIO.File3mfWriteOptions.MoveOutputToPositiveXYZOctant
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.Rating
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.File3mfWriteOptions.Title
Return: string
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.File3mfWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileAi
Summary: Support for writing ai file format

Constructor: Rhino.FileIO.FileAi.FileAi()
Summary: Initializes a new instance of the FileAi class

Method: Rhino.FileIO.FileAi.Read(string path, RhinoDoc doc, FileAiReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Ai file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileAiReadOptions)
Parameter Summary: options used for importing the Ai file

Method: Rhino.FileIO.FileAi.Write(string path, RhinoDoc doc, FileAiWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Ai file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileAiWriteOptions)
Parameter Summary: options used for generating the ai file

Class: Rhino.FileIO.FileAiReadOptions
Summary: Options for reading a AI file (old ai files, ps not pdf)

Constructor: Rhino.FileIO.FileAiReadOptions.FileAiReadOptions()
Summary: Initializes a new instance of the FileAiReadOptions class

Property: Rhino.FileIO.FileAiReadOptions.AiScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiReadOptions.AiUnits
Return: Units
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiReadOptions.PreserveModelScale
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiReadOptions.RhinoScale
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileAiReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public

Class: Rhino.FileIO.FileAiWriteOptions
Summary: Options for writing a ai file

Constructor: Rhino.FileIO.FileAiWriteOptions.FileAiWriteOptions()
Summary: Initializes a new instance of the FileAiWriteOptions class

Property: Rhino.FileIO.FileAiWriteOptions.AIScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.AiUnits
Return: Units
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.ExportHatchesAsSolidFills
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.ExportViewBoundary
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.OrderLayers
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.PreserveModelScale
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.RhinoScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileAiWriteOptions.UseCMYK
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileAiWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public

Class: Rhino.FileIO.FileAmf
Summary: Support for writing amf file format

Constructor: Rhino.FileIO.FileAmf.FileAmf()
Summary: Initializes a new instance of the FileAmf class

Method: Rhino.FileIO.FileAmf.Write(string path, RhinoDoc doc, FileAmfWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a amf file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileAmfWriteOptions)
Parameter Summary: options used for generating the amf file

Class: Rhino.FileIO.FileAmfWriteOptions
Summary: Options for writing a amf file

Constructor: Rhino.FileIO.FileAmfWriteOptions.FileAmfWriteOptions()
Summary: Initializes a new instance of the FileAmfWriteOptions class

Property: Rhino.FileIO.FileAmfWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileAmfWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileCd
Summary: Support for writing CD file format

Constructor: Rhino.FileIO.FileCd.FileCd()
Summary: Initializes a new instance of the FileCd class

Method: Rhino.FileIO.FileCd.Write(string path, RhinoDoc doc, FileCdWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a CD file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileCdWriteOptions)
Parameter Summary: options used for generating the CD file

Class: Rhino.FileIO.FileCdWriteOptions
Summary: Options for writing a CD file

Constructor: Rhino.FileIO.FileCdWriteOptions.FileCdWriteOptions()
Summary: Initializes a new instance of the FileCdWriteOptions class

Property: Rhino.FileIO.FileCdWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileCdWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileCsv
Summary: Support for writing Csv file format

Constructor: Rhino.FileIO.FileCsv.FileCsv()
Summary: Initializes a new instance of the FileCsv class

Method: Rhino.FileIO.FileCsv.Write(string path, RhinoDoc doc, FileCsvWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Csv file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileCsvWriteOptions)
Parameter Summary: options used for generating the Csv file

Class: Rhino.FileIO.FileCsvWriteOptions
Summary: Options for writing a Csv file. Set any value you want included in the output to true. With the exception of Header and CumulativeMassProperties, all checked items apply to each and every object exported.

Constructor: Rhino.FileIO.FileCsvWriteOptions.FileCsvWriteOptions()
Summary: Initializes a new instance of the FileCsvWriteOptions class

Property: Rhino.FileIO.FileCsvWriteOptions.Area
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.AreaCentroid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.AreaMoments
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.AttributesKeys
Return: bool
Modifiers: public
Summary: User text
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.AttributesTexts
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.CumulativeMassProperties
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.GroupIndexes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.GroupName
Return: bool
Modifiers: public
Summary: Group information
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.Header
Return: bool
Modifiers: public
Summary: General
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.LayerColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.LayerHierarchy
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.LayerIndex
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.LayerName
Return: bool
Modifiers: public
Summary: Layer information
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.Length
Return: bool
Modifiers: public
Summary: Mass properties
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectDescription
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectID
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectKeys
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectMaterial
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectName
Return: bool
Modifiers: public
Summary: Object information
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.ObjectsTexts
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.Perimeter
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.SurroundPointsWithDoubleQuotes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.Volume
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.VolumeCentroid
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileCsvWriteOptions.VolumeMoments
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileCsvWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileDgn
Summary: Support for writing Dgn file format

Constructor: Rhino.FileIO.FileDgn.FileDgn()
Summary: Initializes a new instance of the FileDgn class

Method: Rhino.FileIO.FileDgn.Read(string path, RhinoDoc doc, FileDgnReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a dgn file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileDgnReadOptions)
Parameter Summary: options used for importing the dgn file

Class: Rhino.FileIO.FileDgnReadOptions
Summary: Options for reading a Dgn file

Constructor: Rhino.FileIO.FileDgnReadOptions.FileDgnReadOptions()
Summary: Initializes a new instance of the FileDgnReadOptions class

Property: Rhino.FileIO.FileDgnReadOptions.GroupCellHeaders
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDgnReadOptions.ImportUnreferencedBlocks
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDgnReadOptions.ImportUnreferencedLayers
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDgnReadOptions.ImportUnreferencedLineStyles
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDgnReadOptions.ImportViews
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileDgnReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileDst
Summary: Support for writing dst file format

Constructor: Rhino.FileIO.FileDst.FileDst()
Summary: Initializes a new instance of the FileDst class

Method: Rhino.FileIO.FileDst.Read(string path, RhinoDoc doc, FileDstReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a dst file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileDstReadOptions)
Parameter Summary: options used for importing the dst file

Class: Rhino.FileIO.FileDstReadOptions
Summary: Options for reading a Dst file

Constructor: Rhino.FileIO.FileDstReadOptions.FileDstReadOptions()
Summary: Initializes a new instance of the FileDstReadOptions class

Property: Rhino.FileIO.FileDstReadOptions.ImportJumps
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileDstReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileDwg
Summary: Support for writing DWG file format

Constructor: Rhino.FileIO.FileDwg.FileDwg()
Summary: Initializes a new instance of the FileDwg class

Method: Rhino.FileIO.FileDwg.Read(string path, RhinoDoc doc, FileDwgReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a DWG file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileDwgReadOptions)
Parameter Summary: options used for importing the DWG file

Method: Rhino.FileIO.FileDwg.Write(string path, RhinoDoc doc, FileDwgWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a DWG file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileDwgWriteOptions)
Parameter Summary: options used for generating the DWG file

Class: Rhino.FileIO.FileDwgReadOptions
Summary: Options for reading a DWG file

Constructor: Rhino.FileIO.FileDwgReadOptions.FileDwgReadOptions()
Summary: Initializes a new instance of the FileDwgReadOptions class

Property: Rhino.FileIO.FileDwgReadOptions.ConvertRegionsToCurves
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.ConvertWidePolylinesToSurfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.IgnoreThickness
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.ImportUnreferencedBlocks
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.ImportUnreferencedLayers
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.ImportUnreferencedLinetypes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.LayoutUnits
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.MeshPrecision
Return: MeshPrecisionMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.ModelUnits
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgReadOptions.SetLayerMaterialToLayerColor
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileDwgReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileDwgWriteOptions
Summary: Options for writing a DWG file

Constructor: Rhino.FileIO.FileDwgWriteOptions.FileDwgWriteOptions()
Summary: Initializes a new instance of the FileDwgWriteOptions class

Property: Rhino.FileIO.FileDwgWriteOptions.ColorMethod
Return: ColorMethodType
Modifiers: public
Summary: pallette index: clrACI, RGB: clrRGB
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveChordHeight
Return: double
Modifiers: public
Summary: Absolute distance from pline to nurb
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveMaxAngleDegrees
Return: double
Modifiers: public
Summary: Angle between pline segments in writing curve
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveMaxAngleRadians
Return: double
Modifiers: public
Summary: Angle between pline segments in writing curve
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveSegmentLength
Return: double
Modifiers: public
Summary: Max length for any polyline segment
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveUseChordHeight
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveUseMaxAngle
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.CurveUseSegmentLength
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportArcsAs
Return: ExportArcMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportLinesAs
Return: ExportLineMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportMeshesAs
Return: ExportMeshMode
Modifiers: public
Summary: Rhino meshes as polyface meshes or 3dfaces
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportPolycurvesAs
Return: ExportPolycurveMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportPolylinesAs
Return: ExportPolylineMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportSplinesAs
Return: ExportSplineMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.ExportSurfacesAs
Return: ExportSurfaceMode
Modifiers: public
Summary: Rhino surcaces as meshes(0) or curves(1) or acis(2)
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.Flatten
Return: FlattenMode
Modifiers: public
Summary: Project to cplane or view
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.FullLayerPath
Return: bool
Modifiers: public
Summary: write layernames as Parent$Child or Child
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.IsDefault
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.MinPointDistance
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.NoDxfHeader
Return: bool
Modifiers: public
Summary: write an entities only dxf file ( R12 only)
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.PreserveArcNormals
Return: bool
Modifiers: public
Summary: Users wanted to use Pedit in AutoCAD to join them into plines and that didn't work if the normals of arcs being joined are different. Default will be True and will change the behavior
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.Simplify
Return: bool
Modifiers: public
Summary: use lines and arcs where possible
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.SimplifyTolerance
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.SplitPolycurves
Return: bool
Modifiers: public
Summary: Explode polycurves before exporting
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.SplitSplines
Return: bool
Modifiers: public
Summary: Split splines at FMKs before exporting
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.UseLWPolylines
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileDwgWriteOptions.Version
Return: AutocadVersion
Modifiers: public
Summary: Version of DWG file to write
Accessors: get set

Method: Rhino.FileIO.FileDwgWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileEps
Summary: Support for reading eps file format

Constructor: Rhino.FileIO.FileEps.FileEps()
Summary: Initializes a new instance of the FileEps class

Method: Rhino.FileIO.FileEps.Read(string path, RhinoDoc doc, FileEpsReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Eps file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileEpsReadOptions)
Parameter Summary: options used for importing the Ai file

Class: Rhino.FileIO.FileEpsReadOptions
Summary: Options for reading a AI file (old ai files, ps not pdf)

Constructor: Rhino.FileIO.FileEpsReadOptions.FileEpsReadOptions()
Summary: Initializes a new instance of the FileEpsReadOptions class

Property: Rhino.FileIO.FileEpsReadOptions.EpsScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileEpsReadOptions.EpsUnits
Return: Units
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileEpsReadOptions.PreserveModelScale
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileEpsReadOptions.RhinoScale
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileEpsReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public

Class: Rhino.FileIO.FileFbx
Summary: Support for writing Fbx file format

Constructor: Rhino.FileIO.FileFbx.FileFbx()
Summary: Initializes a new instance of the FileFbx class

Method: Rhino.FileIO.FileFbx.Read(string path, RhinoDoc doc, FileFbxReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Fbx file intof a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileFbxReadOptions)
Parameter Summary: options used for importing the Fbx file

Method: Rhino.FileIO.FileFbx.Write(string path, RhinoDoc doc, FileFbxWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Fbx file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileFbxWriteOptions)
Parameter Summary: options used for generating the Fbx file

Class: Rhino.FileIO.FileFbxReadOptions
Summary: Options for reading a Fbx file

Constructor: Rhino.FileIO.FileFbxReadOptions.FileFbxReadOptions()
Summary: Initializes a new instance of the FileFbxReadOptions class

Property: Rhino.FileIO.FileFbxReadOptions.ImportCameras
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxReadOptions.ImportLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxReadOptions.ImportMeshesAsSubD
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxReadOptions.MapFbxYtoRhinoZ
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxReadOptions.Unweld
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxReadOptions.UnweldAngle
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileFbxReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileFbxWriteOptions
Summary: Options for writing a Fbx file

Constructor: Rhino.FileIO.FileFbxWriteOptions.FileFbxWriteOptions()
Summary: Initializes a new instance of the FileFbxWriteOptions class

Property: Rhino.FileIO.FileFbxWriteOptions.MapRhinoZtoFbxY
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveFileAs
Return: FileType
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveLights
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveMaterialsAs
Return: MaterialType
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveObjectsAs
Return: ObjectType
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveVertexNormals
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileFbxWriteOptions.SaveViews
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileFbxWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileGHS
Summary: Support for reading eps file format

Constructor: Rhino.FileIO.FileGHS.FileGHS()
Summary: Initializes a new instance of the FileGHS class

Method: Rhino.FileIO.FileGHS.Read(string path, RhinoDoc doc, FileGHSReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Ghs file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileGHSReadOptions)
Parameter Summary: options used for importing the Ai file

Class: Rhino.FileIO.FileGHSReadOptions
Summary: Options for reading a GHS file

Constructor: Rhino.FileIO.FileGHSReadOptions.FileGHSReadOptions()
Summary: Initializes a new instance of the FileGHSReadOptions class

Property: Rhino.FileIO.FileGHSReadOptions.AttachGhsData
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileGHSReadOptions.RemoveColinearPoints
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileGHSReadOptions.ViewType
Return: ReadViewType
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileGHSReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public

Class: Rhino.FileIO.FileGltf
Summary: Support for writing glTF file format

Constructor: Rhino.FileIO.FileGltf.FileGltf()
Summary: Initializes a new instance of the FileGltf class

Method: Rhino.FileIO.FileGltf.Write(string filename, RhinoDoc doc, FileGltfWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a glTF file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileGltfWriteOptions)
Parameter Summary: options used for generating the glTF file

Class: Rhino.FileIO.FileGltfWriteOptions
Summary: Options used when writing a glTF file

Constructor: Rhino.FileIO.FileGltfWriteOptions.FileGltfWriteOptions()
Summary: Initializes a new instance of the FileGltfWriteOptions class

Property: Rhino.FileIO.FileGltfWriteOptions.CullBackfaces
Return: bool
Modifiers: public
Summary: Setting that determines whether or not the meshes in the glTF will be rendered with or without backface culling. Known as DoubleSided in the glTF specification.
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.DracoCompressionLevel
Return: int
Modifiers: public
Summary: The level of compression used by draco in the range of 1 to 10 inclusive.
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.DracoQuantizationBitsNormal
Return: int
Modifiers: public
Summary: The number of bits used when quantizing mesh normals in the range of 8 to 32 inclusive
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.DracoQuantizationBitsPosition
Return: int
Modifiers: public
Summary: The number of bits used when quantizing mesh vertex positions in the range of 8 to 32 inclusive
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.DracoQuantizationBitsTextureCoordinate
Return: int
Modifiers: public
Summary: The number of bits used when quantizing mesh texture coordinates in the range of 8 to 32 inclusive
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportLayers
Return: bool
Modifiers: public
Summary: glTF uses a scene hierarchy structure where nodes are organized in a parent-child relationship. This setting enables/disables the writing of empty nodes with the same names as layers and places exported objects a children of the corresponding layer node.
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportMaterials
Return: bool
Modifiers: public
Summary: Setting to determine whether or not materials are written to the glTF file
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportOpenMeshes
Return: bool
Modifiers: public
Summary: Enable/disable the exporting of open meshes
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportTextureCoordinates
Return: bool
Modifiers: public
Summary: Enable/disable the exporting of texture coordinates
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportVertexColors
Return: bool
Modifiers: public
Summary: Enable/disable the export of vertex colors
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.ExportVertexNormals
Return: bool
Modifiers: public
Summary: Enable/disable the exporting of vertex normals
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.MapZToY
Return: bool
Modifiers: public
Summary: Setting to transform Rhino's Z axis to glTF's Y axis
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.SubDMeshType
Return: SubDMeshing
Modifiers: public
Summary: The mesh type for exported SubDs
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.SubDSurfaceMeshingDensity
Return: int
Modifiers: public
Summary: Determines how coarse the mesh output will be when surface meshing subd objects  See comments for ON_SubDDisplayParameters in opennurbs_mesh.h for details regarding numbers used.
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.UseDisplayColorForUnsetMaterials
Return: bool
Modifiers: public
Summary: Setting to display color as material when material index for object is -1.
Accessors: get set

Property: Rhino.FileIO.FileGltfWriteOptions.UseDracoCompression
Return: bool
Modifiers: public
Summary: Enable/disable the use of Draco mesh compression in the glTF file
Accessors: get set

Method: Rhino.FileIO.FileGltfWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileGts
Summary: Support for writing Gts file format

Constructor: Rhino.FileIO.FileGts.FileGts()
Summary: Initializes a new instance of the FileGts class

Method: Rhino.FileIO.FileGts.Write(string path, RhinoDoc doc, FileGtsWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Gts file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileGtsWriteOptions)
Parameter Summary: options used for generating the Gts file

Class: Rhino.FileIO.FileGtsWriteOptions
Summary: Options for writing a Gts file

Constructor: Rhino.FileIO.FileGtsWriteOptions.FileGtsWriteOptions()
Summary: Initializes a new instance of the FileGtsWriteOptions class

Property: Rhino.FileIO.FileGtsWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileGtsWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileIgs
Summary: Support for writing Igs file format

Constructor: Rhino.FileIO.FileIgs.FileIgs()
Summary: Initializes a new instance of the FileIgs class

Method: Rhino.FileIO.FileIgs.Write(string path, RhinoDoc doc, FileIgsWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Igs file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileIgsWriteOptions)
Parameter Summary: options used for generating the Igs file

Class: Rhino.FileIO.FileIgsWriteOptions
Summary: Options for writing a Igs file

Constructor: Rhino.FileIO.FileIgsWriteOptions.FileIgsWriteOptions()
Summary: Initializes a new instance of the FileIgsWriteOptions class

Property: Rhino.FileIO.FileIgsWriteOptions.Author
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.CatiaTolsize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.CatiaVersion
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.ClampCurveEndKnots
Return: bool
Modifiers: public
Summary: TRUE means all periodic NURBS will have their end knots clamped.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.ClampSurfaceEndKnots
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.CompositeCurvesAsSingleBsplines
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.CurveMaxDegree
Return: MaxDegreeMode
Modifiers: public
Summary: d >= 3 means all NURBS curves with degree > d be fit with degree d non-rational cubics.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.DoublesUseE
Return: bool
Modifiers: public
Summary: Use "E" instead of the correct "D" for double scientific notation to get around IGES bug in FastShip.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.EolType
Return: EolMode
Modifiers: public
Summary: IGES files are ASCII files.  You need to specify the flavor of the ASCII end of line marker.Possibilities are: TL_LF:   line feed (unix) TL_CRLF: carriage return, line feed (Microsoft) TL_CR:   carriage return (Apple)
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.FitRationalCurves
Return: bool
Modifiers: public
Summary: True means all rational NURBS will be fit with non-rational cubics.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.FitRationalSurfaces
Return: bool
Modifiers: public
Summary: True means non-conic rational surfaces will be fit with non-rational surfaces
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.FlagDependentCurvesAs03
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.FlagDependentSurfacesAs03
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.ForceBezierKnotsOnCurves
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.ForceBezierKnotsOnSurfaces
Return: bool
Modifiers: public
Summary: True means all NURBS surfaces will have their internal knots set to full multiplicity.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.ForceTrimmedSurfaces
Return: bool
Modifiers: public
Summary: True means all surfaces will be exported as 143 or 144s CATIA may like this better.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.HideDependentObjects
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.IgesStringType
Return: IgesStringTypeMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.IgesVersion
Return: IgeswVersionMode
Modifiers: public
Summary: Version of IGES spec to write
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.MaxSurfaceDegree
Return: MaxDegreeMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.MeshType
Return: MeshesMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.NotesInStartSection
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.NoZerosInTSection
Return: bool
Modifiers: public
Summary: The GridTool program used at NASA Langly cannot read IGES files that have leading zeros in the T section.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Organization
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.PointType
Return: PointObjectsMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.PolySurfaceType
Return: PolySurfacesMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Receiver
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.RenderColorAsIgesColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Scale
Return: double
Modifiers: public
Summary: (model space units)/(real world units) For example, if unit_system = TL_INCHES and 1 model space unit = 8 inches, then scale = 0.125.Note that model space units are stored in the IGES file.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Sender
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SimplifyCurves
Return: bool
Modifiers: public
Summary: TRUE means NURBS that are lines or arcs will be written as lines or arcs instead of 126's
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SimplifySurfaces
Return: bool
Modifiers: public
Summary: True means that NURBS surfaces that are ruled surfaces or surfaces of revolution will be written as ruled surfaces or surfaces of revolution.
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SolidType
Return: SolidsMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SplitBiPolarSurfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SplitClosedSurfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.SurfaceType
Return: SurfacesMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Tolerance
Return: double
Modifiers: public
Summary: In model space units specified above
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.Units
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.UseParentLabelOnCurves
Return: bool
Modifiers: public
Summary: copy parent label to dependent curves
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.UseParentLabelOnSurfaces
Return: bool
Modifiers: public
Summary: copy parent label to dependent srfs
Accessors: get set

Property: Rhino.FileIO.FileIgsWriteOptions.WriteNonPlanarUnitNormal
Return: bool
Modifiers: public
Summary: True means the UnitNormal will be written regardless, even if the curve is non planar
Accessors: get set

Method: Rhino.FileIO.FileIgsWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileLwo
Summary: Support for writing lwo file format

Constructor: Rhino.FileIO.FileLwo.FileLwo()
Summary: Initializes a new instance of the FileLwo class

Method: Rhino.FileIO.FileLwo.Read(string path, RhinoDoc doc, FileLwoReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a lwo file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileLwoReadOptions)
Parameter Summary: options used for importing the Lwo file

Method: Rhino.FileIO.FileLwo.Write(string path, RhinoDoc doc, FileLwoWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a lwo file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileLwoWriteOptions)
Parameter Summary: options used for generating the Lwo file

Class: Rhino.FileIO.FileLwoReadOptions
Summary: Options for reading a Lwo file

Constructor: Rhino.FileIO.FileLwoReadOptions.FileLwoReadOptions()
Summary: Initializes a new instance of the FileLwoReadOptions class

Property: Rhino.FileIO.FileLwoReadOptions.Unweld
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileLwoReadOptions.UnweldAngle
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileLwoReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileLwoWriteOptions
Summary: Options for writing a Lwo file

Constructor: Rhino.FileIO.FileLwoWriteOptions.FileLwoWriteOptions()
Summary: Initializes a new instance of the FileLwoWriteOptions class

Property: Rhino.FileIO.FileLwoWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileLwoWriteOptions.WriteVersion6
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileLwoWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileObj
Summary: Support for obj file format

Constructor: Rhino.FileIO.FileObj.FileObj()
Summary: Initializes a new instance of the FileObj class

Method: Rhino.FileIO.FileObj.Read(System.String filename, RhinoDoc doc, FileObjReadOptions options)
Return: bool
Modifiers: public, static

Method: Rhino.FileIO.FileObj.Write(System.IO.StreamWriter stream, RhinoDoc doc, FileObjWriteOptions options)
Return: WriteFileResult
Modifiers: public, static
Summary: Write an obj stream based on the contents of a RhinoDoc

Method: Rhino.FileIO.FileObj.Write(System.String filename, Mesh[] meshes, FileObjWriteOptions options)
Return: WriteFileResult
Modifiers: public, static
Summary: Write an obj file with an array of meshes
Parameter: filename (System.String)
Parameter Summary: path to write to
Parameter: meshes (Mesh[])
Parameter Summary: meshes to write as obj format
Parameter: options (FileObjWriteOptions)
Parameter Summary:

Method: Rhino.FileIO.FileObj.Write(System.String filename, RhinoDoc doc, FileObjWriteOptions options)
Return: WriteFileResult
Modifiers: public, static
Summary: Write an obj file based on the contents of a RhinoDoc

Class: Rhino.FileIO.FileObjReadOptions
Summary: Options used when reading an obj file.

Constructor: Rhino.FileIO.FileObjReadOptions.FileObjReadOptions(FileReadOptions readOptions)

Property: Rhino.FileIO.FileObjReadOptions.DisplayColorFromObjMaterial
Return: bool
Modifiers: public
Summary: Determines whether textures are read from the .mtl file, if it exists.
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.IgnoreTextures
Return: bool
Modifiers: public
Summary: Determines whether textures are read from the .mtl file, if it exists.
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.MapYtoZ
Return: bool
Modifiers: public
Summary: Setting to transform OBJ's Y axis to Rhino's Z axis
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.MorphTargetOnly
Return: bool
Modifiers: public
Summary: TODO
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.ReverseGroupOrder
Return: bool
Modifiers: public
Summary: Determines how groups/layers are nested when reading an obj file. Left to Right (default = false) or Right to Left (true)
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.Split32BitTextures
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.UseObjGroupsAs
Return: UseObjGsAs
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjReadOptions.UseObjObjectsAs
Return: UseObjOsAs
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileObjReadOptions.GetTransform()
Return: Transform
Modifiers: public
Summary: Calculates the YToZ transform.

Class: Rhino.FileIO.FileObjWriteOptions

Constructor: Rhino.FileIO.FileObjWriteOptions.FileObjWriteOptions(FileWriteOptions writeOptions)

Property: Rhino.FileIO.FileObjWriteOptions.ActualFilePathOnMac
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.CreateNgons
Return: bool
Modifiers: public
Summary: Setting to enable/disable the creation of ngons for the output
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.CullUnnecessaryVertexesInNgons
Return: bool
Modifiers: public
Summary: Setting to determine whether interior collinear vertexes are part of the ngon.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.EolType
Return: AsciiEol
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportAsTriangles
Return: bool
Modifiers: public
Summary: Enable/disable export of faces as triangles.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportGroupNameLayerNames
Return: ObjGroupNames
Modifiers: public
Summary: Setting to determine whether object, group or layer names will become "g"s in the OBJ output file
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportMaterialDefinitions
Return: bool
Modifiers: public
Summary: Setting to write an .mtl file and "usemtl"s in the obj file
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportNormals
Return: bool
Modifiers: public
Summary: Enable/disable export of vertex normals, if they exist.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportObjectNames
Return: ObjObjectNames
Modifiers: public
Summary: Setting to determine what object names in Rhino will become in the OBJ output file
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportOpenMeshes
Return: bool
Modifiers: public
Summary: Enable/Disable bailing when an open mesh is encountered.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportTcs
Return: bool
Modifiers: public
Summary: Enable/disable export of texture coordinates, if they exist.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ExportVcs
Return: bool
Modifiers: public
Summary: Enable/disable export of vertex colors, if they exist.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.IncludeUnweldedEdgesInNgons
Return: bool
Modifiers: public
Summary: Setting to determine whether unwelded edges are ignored in the creation of an ngon.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.MapZtoY
Return: bool
Modifiers: public
Summary: Setting to transform Rhino's Z axis to OBJ's Y axis
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.MergeNestedGroupingNames
Return: bool
Modifiers: public
Summary: Setting to merge nested layer or group names into a single OBJ group name
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.MeshParameters
Return: MeshingParameters
Modifiers: public
Summary: Mesh parameters to use when meshing geometry that is not already a mesh.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.MeshType
Return: VertexWelding
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.MinNgonFaceCount
Return: int
Modifiers: public
Summary: Minimum number of faces to consider creation of ngon
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.NgonMode
Return: NGons
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.ObjectType
Return: GeometryType
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.PolylineType
Return: PolylineExportType
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.SignificantDigits
Return: int
Modifiers: public
Summary: Number of significant digits to write out for floating point numbers
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.SortObjGroups
Return: bool
Modifiers: public
Summary: Setting to enable/disable sorting of OBJ groups
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.SubDMeshType
Return: SubDMeshing
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.SubDSurfaceMeshingDensity
Return: int
Modifiers: public
Summary: Determines how coarse the mesh output will be when surface meshing subd objects  See comments for ON_SubDDisplayParameters in opennurbs_mesh.h for details regarding numbers used.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.TrimCurveType
Return: CurveType
Modifiers: public
Summary: trimming curve option
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.UnderbarMaterialNames
Return: bool
Modifiers: public
Summary: Enable/disable replacing white space with under-bars in material names.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.UseDisplayColorForMaterial
Return: bool
Modifiers: public
Summary: Setting to display color as material when material index for object is -1.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.UseRelativeIndexing
Return: bool
Modifiers: public
Summary: Determines whether to use relative indexing.  TRUE = use relative (negative) indexing FALSE = use absolute (positive) indexing
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.UseRenderMeshes
Return: bool
Modifiers: public
Summary: Use existing or generate render meshes instead of calling RhinoObject.MeshObjects.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.UseSimpleDialog
Return: bool
Modifiers: public
Summary: Determines whether to use the simple or detailed meshing dialog.
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.VcsFormat
Return: int
Modifiers: public
Summary: Export vertex colors as 0 == floats (0.0-1.0) or 1 == ints (0-255)
Accessors: get set

Property: Rhino.FileIO.FileObjWriteOptions.WrapLongLines
Return: bool
Modifiers: public
Summary: Setting to enable/disable line wrapping with "\"s
Accessors: get set

Method: Rhino.FileIO.FileObjWriteOptions.GetTransform()
Return: Transform
Modifiers: public
Summary: Calculates the transform combination of ZToY and any the translation that might occur in a SavewithOrigin.

Class: Rhino.FileIO.FileObjWriter.ObjGroupComparer

Class: Rhino.FileIO.FileObjWriter.ObjLayerComparer

Class: Rhino.FileIO.FileObjWriter.ObjRhinoObject

Class: Rhino.FileIO.FileObjWriter.RhinoObjectMesh

Class: Rhino.FileIO.FilePdf
Summary: Support for PDF file format

Constructor: Rhino.FileIO.FilePdf.FilePdf()
Summary: Initializes a new instance of the FilePdf class

Property: Rhino.FileIO.FilePdf.LayersAsOptionalContentGroups
Return: bool
Modifiers: public
Summary: Add layers as "optional content groups" to the PDF. This is the visible layer tree available in PDF viewers
Accessors: get set

Method: Rhino.FileIO.FilePdf.Create()
Return: FilePdf
Modifiers: public, static
Summary: Create a new instance of a FilePdf class

Method: Rhino.FileIO.FilePdf.Read(string path, RhinoDoc doc, FilePdfReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a PDF file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FilePdfReadOptions)
Parameter Summary: options used for importing the PDF file

Method: Rhino.FileIO.FilePdf.AddPage(Display.ViewCaptureSettings settings)
Return: int
Modifiers: public, abstract
Summary: Add a new page to this document and draw a viewport into it based on provided ViewCaptureSettings

Method: Rhino.FileIO.FilePdf.AddPage(int widthInDots, int heightInDots, int dotsPerInch)
Return: int
Modifiers: public, abstract
Summary: Add a blank page to this document

Method: Rhino.FileIO.FilePdf.DrawBitmap(int pageNumber, System.Drawing.Bitmap bitmap, float left, float top, float width, float height, float rotationInDegrees)
Return: void
Modifiers: public, abstract
Summary: Draw a bitmap

Method: Rhino.FileIO.FilePdf.DrawLine(int pageNumber, System.Drawing.PointF from, System.Drawing.PointF to, System.Drawing.Color strokeColor, float strokeWidth)
Return: void
Modifiers: public
Summary: Draw a line

Method: Rhino.FileIO.FilePdf.DrawPolyline(int pageNumber, System.Drawing.PointF[] polyline, System.Drawing.Color fillColor, System.Drawing.Color strokeColor, float strokeWidth)
Return: void
Modifiers: public, abstract
Summary: Draw a polyline path

Method: Rhino.FileIO.FilePdf.DrawText(int pageNumber, string text, double x, double y, float heightPoints, Rhino.DocObjects.Font onfont, System.Drawing.Color fillColor, System.Drawing.Color strokeColor, float strokeWidth, float angleDegrees, DocObjects.TextHorizontalAlignment horizontalAlignment, DocObjects.TextVerticalAlignment verticalAlignment)
Return: void
Modifiers: public, abstract
Summary: Draw text on a page

Method: Rhino.FileIO.FilePdf.FirePreWriteEvent()
Return: void
Modifiers: protected
Summary: Called by the framework to fire a PreWrite event

Method: Rhino.FileIO.FilePdf.PdfDocumentImplementation()
Return: object
Modifiers: public, abstract
Summary: Get actual implementation of PdfDocument class

Method: Rhino.FileIO.FilePdf.Write(string filename)
Return: void
Modifiers: public, abstract
Summary: Write PDF to a file

Method: Rhino.FileIO.FilePdf.Write(System.IO.Stream stream)
Return: void
Modifiers: public, abstract
Summary: Write PDF to a stream

Class: Rhino.FileIO.FilePdfEventArgs
Summary: Used for events that are fired while constructing/saving a PDF

Property: Rhino.FileIO.FilePdfEventArgs.Pdf
Return: FilePdf
Modifiers: public
Summary: The document that is about to be written
Accessors: get set

Class: Rhino.FileIO.FilePdfReadOptions
Summary: Options for reading a PDF file

Constructor: Rhino.FileIO.FilePdfReadOptions.FilePdfReadOptions()
Summary: Initializes a new instance of the FilePdfReadOptions class

Property: Rhino.FileIO.FilePdfReadOptions.ImportFillsAsHatches
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePdfReadOptions.LoadText
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePdfReadOptions.PDFScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePdfReadOptions.PdfUnits
Return: PDF_UNITS
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePdfReadOptions.PreserveModelScale
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePdfReadOptions.RhinoScale
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FilePdfReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public

Class: Rhino.FileIO.FilePly
Summary: Support for ply file format

Constructor: Rhino.FileIO.FilePly.FilePly()
Summary: Initializes a new instance of the FilePly class

Method: Rhino.FileIO.FilePly.Read(string path, RhinoDoc doc, FilePlyReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a PLY file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FilePlyReadOptions)
Parameter Summary: options used for importing the PLY file

Method: Rhino.FileIO.FilePly.Write(System.String filename, RhinoDoc doc, FilePlyWriteOptions options)
Return: WriteFileResult
Modifiers: public, static
Summary: Write a ply file based on the contents of a RhinoDoc

Class: Rhino.FileIO.FilePlyReadOptions
Summary: Options for reading a PLY file

Constructor: Rhino.FileIO.FilePlyReadOptions.FilePlyReadOptions()
Summary: Initializes a new instance of the FilePlyReadOptions class

Property: Rhino.FileIO.FilePlyReadOptions.PLYModelUnits
Return: UnitSystem
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FilePlyReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FilePlyWriteOptions

Constructor: Rhino.FileIO.FilePlyWriteOptions.FilePlyWriteOptions(FileWriteOptions writeOptions)

Property: Rhino.FileIO.FilePlyWriteOptions.ExportASCII
Return: bool
Modifiers: public
Summary: Determines whether to export as Ascii.
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.ExportColors
Return: bool
Modifiers: public
Summary: Determines whether to export vertex colors.
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.ExportDoubles
Return: bool
Modifiers: public
Summary: Determines whether vertexes are exported as doubles or floats.
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.ExportMaterial
Return: bool
Modifiers: public
Summary: Determines whether to export a material.
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.ExportNormals
Return: bool
Modifiers: public
Summary: Determines whether to export vertex normals.
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePlyWriteOptions.UseSimpleDialog
Return: bool
Modifiers: public
Summary: Determines whether to use the simple or detailed meshing dialog.
Accessors: get set

Class: Rhino.FileIO.FilePov
Summary: Support for writing POV file format

Constructor: Rhino.FileIO.FilePov.FilePov()
Summary: Initializes a new instance of the FilePov class

Method: Rhino.FileIO.FilePov.Write(string path, RhinoDoc doc, FilePovWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a POV file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FilePovWriteOptions)
Parameter Summary: options used for generating the POV file

Class: Rhino.FileIO.FilePovWriteOptions
Summary: Options for writing a POV file

Constructor: Rhino.FileIO.FilePovWriteOptions.FilePovWriteOptions()
Summary: Initializes a new instance of the FilePovWriteOptions class

Property: Rhino.FileIO.FilePovWriteOptions.ExportAsOneFile
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FilePovWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FilePovWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileRaw
Summary: Support for writing Raw file format

Constructor: Rhino.FileIO.FileRaw.FileRaw()
Summary: Initializes a new instance of the FileRaw class

Method: Rhino.FileIO.FileRaw.Read(string path, RhinoDoc doc, FileRawReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a raw file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileRawReadOptions)
Parameter Summary: options used for importing the raw file

Method: Rhino.FileIO.FileRaw.Write(string path, RhinoDoc doc, FileRawWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a raw file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileRawWriteOptions)
Parameter Summary: options used for generating the raw file

Class: Rhino.FileIO.FileRawReadOptions
Summary: Options for reading a Raw file

Constructor: Rhino.FileIO.FileRawReadOptions.FileRawReadOptions()
Summary: Initializes a new instance of the FileRawReadOptions class

Property: Rhino.FileIO.FileRawReadOptions.RawModelUnits
Return: UnitSystem
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileRawReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileRawWriteOptions
Summary: Options for writing a Raw file

Constructor: Rhino.FileIO.FileRawWriteOptions.FileRawWriteOptions()
Summary: Initializes a new instance of the FileRawWriteOptions class

Property: Rhino.FileIO.FileRawWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileRawWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileReadOptions

Constructor: Rhino.FileIO.FileReadOptions.FileReadOptions()

Property: Rhino.FileIO.FileReadOptions.BatchMode
Return: bool
Modifiers: public
Summary: True means you cannot ask questions during reading. (no dialogs, no "getters", etc.)
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.ImportMode
Return: bool
Modifiers: public
Summary: True means we are merging whatever is being read into an existing document. This means you need to consider things like:
If the information being read is in a different unit system, it should be     scaled if UseScaleGeometry is true.
There can be existing layers, fonts, materials, dimension styles, hatch     patterns, and so on with the same name as items being read from the file. | Since: 5.0 | Accessors: get set

Property: Rhino.FileIO.FileReadOptions.ImportReferenceMode
Return: bool
Modifiers: public
Summary: True means we are reading information for a work session reference model or a linked instance definition.
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.InsertMode
Return: bool
Modifiers: public
Summary: True means we are reading information that will be used to create an instance definition or some other type of "inserting" that is supported by Rhino's "Insert" command.
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.LinkedInstanceDefinitionSerialNumber
Return: uint
Modifiers: public
Summary: If a file is being read to create an instance definition, then this value will be the serial number of the instance definition being created. Otherwise, this value will be 0;
Accessors: get

Property: Rhino.FileIO.FileReadOptions.NewMode
Return: bool
Modifiers: public
Summary: True means we are reading template information in something like a OnFileNew event.
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.OpenMode
Return: bool
Modifiers: public
Summary: True means we are reading the information into an empty document.  This means you need to consider things like: <ul><li>Setting the unit system (if the file has a unit system)</li><li>Creating a default layer if one is not there.</li><li>Setting up appropriate views when you're finished reading.</li></ul>
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.OptionsDictionary
Return: ArchivableDictionary
Modifiers: public
Summary: Additional read options.
Accessors: get

Property: Rhino.FileIO.FileReadOptions.ReferenceModelGrandParentLayerId
Return: Guid
Modifiers: public
Summary: Information that ultimately is part of a worksession reference model or linked instance definition model is being read, all layers are added as sub-layers of a grand-parent layer.When the information being read is destined for the active model, no grandparent layer is used. Value is Guid.Empty if no grandparent layer is in use.
Accessors: get

Property: Rhino.FileIO.FileReadOptions.ScaleGeometry
Return: bool
Modifiers: public
Summary: true: If ImportMode is True and the geometry in the file being read has     a unit system different from the model's unit system, then apply the unit     conversion scale to the file's geometry before adding it to the model.
false: Do not scale. Once case where this happens is when an instance     definition is read from a file and the model space instance references     have been scaled. In case the instance definition geometry cannot be     scaled or the net result is that the size of the instance reference     object is scaled by the square of the scale factor. | Since: 5.0 | Accessors: get set

Property: Rhino.FileIO.FileReadOptions.UseScaleGeometry
Return: bool
Modifiers: public
Summary: If this parameter is true, then no questions are asked when unit conversion scaling is optional and the setting specified by ScaleGeometry is used.
Accessors: get set

Property: Rhino.FileIO.FileReadOptions.WorkSessionReferenceModelSerialNumber
Return: uint
Modifiers: public
Summary: If a worksession reference model is being read, then a value >= 1000 will be returned. Otherwise, this value will be 0;
Accessors: get

Method: Rhino.FileIO.FileReadOptions.Dispose()
Return: void
Modifiers: public

Method: Rhino.FileIO.FileReadOptions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.FileIO.FileReference
Summary: Manages a reference to an existing or non-existing file, using either or both absolute or relative paths. Once constructed, this class is immutable.

Constructor: Rhino.FileIO.FileReference.FileReference(string fullPath, string relativePath, ContentHash hash, FileReferenceStatus status)
Summary: Constructs a new instance of the FileReference class, given a fullPath, a relativePath a content hash and a status value.

Property: Rhino.FileIO.FileReference.ContentHash
Return: ContentHash
Modifiers: public
Summary: Gets the content hash.
Accessors: get

Property: Rhino.FileIO.FileReference.FullPath
Return: string
Modifiers: public
Summary: Gets the absolute path of this file reference.
Accessors: get

Property: Rhino.FileIO.FileReference.FullPathStatus
Return: FileReferenceStatus
Modifiers: public
Summary: Gets the file reference status.
Accessors: get

Property: Rhino.FileIO.FileReference.IsSet
Return: bool
Modifiers: public
Summary: Returns an indication of the fact that the reference is actually set to a non-None value.
Accessors: get

Property: Rhino.FileIO.FileReference.RelativePath
Return: string
Modifiers: public
Summary: Gets the relative path of this file reference.
Accessors: get

Method: Rhino.FileIO.FileReference.CreateFromFullAndRelativePaths(string fullPath, string relativePath)
Return: FileReference
Modifiers: public, static
Summary: Returns a new file reference. This returns a new instance even if the path does not exist.
Parameter: fullPath (string)
Parameter Summary: A full path. This parameter cannot be null.
Parameter: relativePath (string)
Parameter Summary: A relative path. This parameter can be null.

Method: Rhino.FileIO.FileReference.CreateFromFullPath(string fullPath)
Return: FileReference
Modifiers: public, static
Summary: Returns a new file reference. This returns a new instance even if the path does not exist.
Parameter: fullPath (string)
Parameter Summary: A full path.

Method: Rhino.FileIO.FileReference.Dispose()
Return: void
Modifiers: public
Summary: Reclaims unmanaged resources used by this object.

Class: Rhino.FileIO.FileSat
Summary: Support for writing Sat file format

Constructor: Rhino.FileIO.FileSat.FileSat()
Summary: Initializes a new instance of the FileSat class

Method: Rhino.FileIO.FileSat.Write(string filename, RhinoDoc doc, FileSatWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Sat file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileSatWriteOptions)
Parameter Summary: options used for generating the Sat file

Class: Rhino.FileIO.FileSatWriteOptions
Summary: Options used when writing a Sat file

Constructor: Rhino.FileIO.FileSatWriteOptions.FileSatWriteOptions()
Summary: Initializes a new instance of the FileSatWriteOptions class

Property: Rhino.FileIO.FileSatWriteOptions.Type
Return: SatTypes
Modifiers: public
Summary: Get and set the type of the sat file being written.
Accessors: get set

Method: Rhino.FileIO.FileSatWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileSkp
Summary: Support for writing Skp file format

Constructor: Rhino.FileIO.FileSkp.FileSkp()
Summary: Initializes a new instance of the FileSkp class

Method: Rhino.FileIO.FileSkp.Read(string path, RhinoDoc doc, FileSkpReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Skp file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileSkpReadOptions)
Parameter Summary: options used for importing the Skp file

Method: Rhino.FileIO.FileSkp.Write(string filename, RhinoDoc doc, FileSkpWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Skp file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileSkpWriteOptions)
Parameter Summary: options used for generating the Skp file

Class: Rhino.FileIO.FileSkpReadOptions
Summary: Options used when reading a Skp file

Constructor: Rhino.FileIO.FileSkpReadOptions.FileSkpReadOptions()
Summary: Initializes a new instance of the FileSkpReadOptions class

Property: Rhino.FileIO.FileSkpReadOptions.AddObjectsToGroups
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.EmbedTexturesInModel
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.ImportCurves
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.ImportFacesAsMeshes
Return: bool
Modifiers: public
Summary: Set to False for trimmed planes.
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.JoinEdges
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.JoinFaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.UseGroupLayers
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.UseSketchUpTextureWriter
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.Weld
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpReadOptions.WeldAngle
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileSkpReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Import function

Class: Rhino.FileIO.FileSkpWriteOptions
Summary: Options used when writing a Skp file

Constructor: Rhino.FileIO.FileSkpWriteOptions.FileSkpWriteOptions()
Summary: Initializes a new instance of the FileSkpWriteOptions class

Property: Rhino.FileIO.FileSkpWriteOptions.ExportPlanarRegionsAsPolygons
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSkpWriteOptions.Version
Return: SketchUpVersion
Modifiers: public
Summary: Set the version of the skp file being written.
Accessors: get set

Method: Rhino.FileIO.FileSkpWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileSlc
Summary: Support for writing slice (SLC) file format

Constructor: Rhino.FileIO.FileSlc.FileSlc()
Summary: Initializes a new instance of the FileSlc class

Method: Rhino.FileIO.FileSlc.Write(string filename, RhinoDoc doc, FileSlcWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a SLC file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileSlcWriteOptions)
Parameter Summary: options used for generating the SLC file

Class: Rhino.FileIO.FileSlcWriteOptions
Summary: Options used when writing a SLC file

Constructor: Rhino.FileIO.FileSlcWriteOptions.FileSlcWriteOptions()
Summary: Initializes a new instance of the FileSlcWriteOptions class

Property: Rhino.FileIO.FileSlcWriteOptions.AngleBetweenSegmentsDegrees
Return: double
Modifiers: public
Summary: The angle that determines how smooth the polylines of the slice curves will be. When the number is small you will get a smooth final output but it will take more time to export and a larger file.
Accessors: get set

Property: Rhino.FileIO.FileSlcWriteOptions.EndPoint
Return: Point3d
Modifiers: public
Summary: End of the slicing normal
Accessors: get set

Property: Rhino.FileIO.FileSlcWriteOptions.SliceDistance
Return: double
Modifiers: public
Summary: The distance between the slices or layers of curves that your final output will contain. The distance should be based on the slice thickness of your final output device
Accessors: get set

Property: Rhino.FileIO.FileSlcWriteOptions.StartPoint
Return: Point3d
Modifiers: public
Summary: Start of the slicing normal
Accessors: get set

Property: Rhino.FileIO.FileSlcWriteOptions.UseMeshes
Return: bool
Modifiers: public
Summary: Use meshes to generate slices. The curves for each slice are generated by intersecting the object mesh with a plane. the Angle between polyline segments data is not used when this value is true
Accessors: get set

Class: Rhino.FileIO.FileStl
Summary: Support for writing STL file format

Constructor: Rhino.FileIO.FileStl.FileStl()
Summary: Initializes a new instance of the FileStl class

Method: Rhino.FileIO.FileStl.Read(string path, RhinoDoc doc, FileStlReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a STL file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileStlReadOptions)
Parameter Summary: options used for importing the STL file

Method: Rhino.FileIO.FileStl.Write(string path, RhinoDoc doc, FileStlWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a STL file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileStlWriteOptions)
Parameter Summary: options used for generating the STL file

Class: Rhino.FileIO.FileStlReadOptions
Summary: Options for reading a STL file

Constructor: Rhino.FileIO.FileStlReadOptions.FileStlReadOptions()
Summary: Initializes a new instance of the FileStlReadOptions class

Property: Rhino.FileIO.FileStlReadOptions.SplitDisjointMeshes
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStlReadOptions.STLModelUnits
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStlReadOptions.Weld
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStlReadOptions.WeldAngle
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileStlReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileStlWriteOptions
Summary: Options for writing a STL file

Constructor: Rhino.FileIO.FileStlWriteOptions.FileStlWriteOptions()
Summary: Initializes a new instance of the FileStlWriteOptions class

Property: Rhino.FileIO.FileStlWriteOptions.BinaryFile
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStlWriteOptions.ExportOpenObjects
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStlWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileStlWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileStp
Summary: Support for writing STEP (STP) file format

Constructor: Rhino.FileIO.FileStp.FileStp()
Summary: Initializes a new instance of the FileStp class

Method: Rhino.FileIO.FileStp.Read(string path, RhinoDoc doc, FileStpReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Stp file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileStpReadOptions)
Parameter Summary: options used for importing the Stp file

Method: Rhino.FileIO.FileStp.Write(string filename, RhinoDoc doc, FileStpWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a STP file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileStpWriteOptions)
Parameter Summary: options used for generating the STP file

Class: Rhino.FileIO.FileStpReadOptions
Summary: Options used when reading a STP file

Constructor: Rhino.FileIO.FileStpReadOptions.FileStpReadOptions()
Summary: Initializes a new instance of the FileStpReadOptions class

Property: Rhino.FileIO.FileStpReadOptions.JoinSurfaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStpReadOptions.LimitFaces
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileStpReadOptions.MaxFaceCount
Return: int
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileStpReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Import function

Class: Rhino.FileIO.FileStpWriteOptions
Summary: Options used when writing a STP file

Constructor: Rhino.FileIO.FileStpWriteOptions.FileStpWriteOptions()
Summary: Initializes a new instance of the FileStpWriteOptions class

Property: Rhino.FileIO.FileStpWriteOptions.Export2dCurves
Return: bool
Modifiers: public
Summary: Some (not most, and not Rhino) importing applications can make use of the 2-D trimming curves to get a more accurate and faster import. The size of the step file will be larger
Accessors: get set

Property: Rhino.FileIO.FileStpWriteOptions.ExportBlack
Return: bool
Modifiers: public
Summary: Let importing application set color for black objects. If a Rhino object has color black, no color is assigned to the object in the step file.This will cause the importing application to give the object its default color.This is desirable because black objects look like ink blots in some applications.This option is grayed out if the schema option is AP203ControConfigDesign since that schema does not include color entities.
Accessors: get set

Property: Rhino.FileIO.FileStpWriteOptions.Schema
Return: StepSchema
Modifiers: public
Summary: Get and set the schema of the step file being written.
Accessors: get set

Property: Rhino.FileIO.FileStpWriteOptions.SplitClosedSurfaces
Return: bool
Modifiers: public
Summary: Splits closed surfaces, for example, the interior surfaces of drilled holes.
Accessors: get set

Method: Rhino.FileIO.FileStpWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileSvg
Summary: Support for writing Svg file format

Constructor: Rhino.FileIO.FileSvg.FileSvg()
Summary: Initializes a new instance of the FileSvg class

Method: Rhino.FileIO.FileSvg.Read(string path, RhinoDoc doc, FileSvgReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Svg file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileSvgReadOptions)
Parameter Summary: options used for importing the Svg file

Class: Rhino.FileIO.FileSvgReadOptions
Summary: Options used when reading a Svg file

Constructor: Rhino.FileIO.FileSvgReadOptions.FileSvgReadOptions()
Summary: Initializes a new instance of the FileSvgReadOptions class

Property: Rhino.FileIO.FileSvgReadOptions.GroupMultiCurvePaths
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSvgReadOptions.ImportFilledObjectAs
Return: ImportFillMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSvgReadOptions.RetainGrouping
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileSvgReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Import function

Class: Rhino.FileIO.FileSW

Constructor: Rhino.FileIO.FileSW.FileSW()
Summary: Initializes a new instance of the FileSW class

Method: Rhino.FileIO.FileSW.Read(string path, RhinoDoc doc, FileSwReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a .sldprt or .sldasm file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileSwReadOptions)
Parameter Summary: options used for importing the SW file

Class: Rhino.FileIO.FileSwReadOptions
Summary: Options used when reading a SW file

Constructor: Rhino.FileIO.FileSwReadOptions.FileSwReadOptions()
Summary: Initializes a new instance of the FileSwReadOptions class

Property: Rhino.FileIO.FileSwReadOptions.ImportConstructionGeometry
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSwReadOptions.ImportPartsAsBlocks
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileSwReadOptions.RotateYtoZ
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileSwReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Import function

Class: Rhino.FileIO.FileTxt
Summary: Support for writing Txt (points) file format

Constructor: Rhino.FileIO.FileTxt.FileTxt()
Summary: Initializes a new instance of the FileTxt class

Method: Rhino.FileIO.FileTxt.Read(string path, RhinoDoc doc, FileTxtReadOptions options)
Return: bool
Modifiers: public, static
Summary: Read a Txt file into a RhinoDoc
Parameter: path (string)
Parameter Summary: path to read a file from
Parameter: doc (RhinoDoc)
Parameter Summary: document to import geometry into
Parameter: options (FileTxtReadOptions)
Parameter Summary: options used for importing the Txt file

Method: Rhino.FileIO.FileTxt.Write(string path, RhinoDoc doc, FileTxtWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Txt file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileTxtWriteOptions)
Parameter Summary: options used for generating the Txt file

Class: Rhino.FileIO.FileTxtReadOptions
Summary: Options for writing a Txt file.

Constructor: Rhino.FileIO.FileTxtReadOptions.FileTxtReadOptions()
Summary: Initializes a new instance of the FileTxtReadOptions class

Property: Rhino.FileIO.FileTxtReadOptions.CreatePointCloud
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtReadOptions.Delimiter
Return: DelimiterMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtReadOptions.DelimiterCharacter
Return: char
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileTxtReadOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileTxtWriteOptions
Summary: Options for writing a Txt file.

Constructor: Rhino.FileIO.FileTxtWriteOptions.FileTxtWriteOptions()
Summary: Initializes a new instance of the FileTxtWriteOptions class

Property: Rhino.FileIO.FileTxtWriteOptions.Delimiter
Return: DelimiterMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtWriteOptions.DelimiterCharacter
Return: char
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtWriteOptions.ExportVertexColors
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtWriteOptions.Precision
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileTxtWriteOptions.SurroundWithDoubleQuotes
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileTxtWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileType

Constructor: Rhino.FileIO.FileType.FileType(string extension, string description)

Property: Rhino.FileIO.FileType.Description
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileType.Extension
Return: string
Modifiers: public
Accessors: get set

Class: Rhino.FileIO.FileUdo
Summary: Support for writing Moray UDO file format

Constructor: Rhino.FileIO.FileUdo.FileUdo()
Summary: Initializes a new instance of the FileUdo class

Method: Rhino.FileIO.FileUdo.Write(string path, RhinoDoc doc, FileUdoWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Moray UDO file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileUdoWriteOptions)
Parameter Summary: options used for generating the Moray UDO file

Class: Rhino.FileIO.FileUdoWriteOptions
Summary: Options for writing a Moray UDO file

Constructor: Rhino.FileIO.FileUdoWriteOptions.FileUdoWriteOptions()
Summary: Initializes a new instance of the FileUdoWriteOptions class

Property: Rhino.FileIO.FileUdoWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileUdoWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileUsd
Summary: Support for writing USD file format

Constructor: Rhino.FileIO.FileUsd.FileUsd()
Summary: Initializes a new instance of the FileUsd class

Method: Rhino.FileIO.FileUsd.Write(string path, RhinoDoc doc, FileUsdWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a USD file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileUsdWriteOptions)
Parameter Summary: options used for generating the USD file

Class: Rhino.FileIO.FileUsdWriteOptions
Summary: Options for writing a USD file

Constructor: Rhino.FileIO.FileUsdWriteOptions.FileUsdWriteOptions()
Summary: Initializes a new instance of the FileUsdWriteOptions class

Property: Rhino.FileIO.FileUsdWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileUsdWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileVda
Summary: Support for writing Igs file format

Constructor: Rhino.FileIO.FileVda.FileVda()
Summary: Initializes a new instance of the FileVda class

Method: Rhino.FileIO.FileVda.Write(string path, RhinoDoc doc, FileVdaWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Vda file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileVdaWriteOptions)
Parameter Summary: options used for generating the Vda file

Class: Rhino.FileIO.FileVdaWriteOptions
Summary: Options for writing a Vda file

Constructor: Rhino.FileIO.FileVdaWriteOptions.FileVdaWriteOptions()
Summary: Initializes a new instance of the FileVdaWriteOptions class

Property: Rhino.FileIO.FileVdaWriteOptions.Address
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.CompanyName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.Confidentiality
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.DateEffective
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.ObjectCode
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.PointDeviationHairsAsMDI
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.ProjectName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.ReceivingDepartment
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.SendersName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.SendingCompany
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.TelephoneNumber
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVdaWriteOptions.Variant
Return: string
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileVdaWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileVrml
Summary: Support for writing wrl file format

Constructor: Rhino.FileIO.FileVrml.FileVrml()
Summary: Initializes a new instance of the FileVrml class

Method: Rhino.FileIO.FileVrml.Write(string path, RhinoDoc doc, FileVrmlWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a wrl file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileVrmlWriteOptions)
Parameter Summary: options used for generating the wrl file

Class: Rhino.FileIO.FileVrmlWriteOptions
Summary: Options for writing a wrl file

Constructor: Rhino.FileIO.FileVrmlWriteOptions.FileVrmlWriteOptions()
Summary: Initializes a new instance of the FileVrmlWriteOptions class

Property: Rhino.FileIO.FileVrmlWriteOptions.ExportTextureCoordinates
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVrmlWriteOptions.ExportVertexColors
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVrmlWriteOptions.ExportVertexNormals
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVrmlWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileVrmlWriteOptions.Version
Return: int
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileVrmlWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileWriteOptions

Constructor: Rhino.FileIO.FileWriteOptions.FileWriteOptions()

Property: Rhino.FileIO.FileWriteOptions.DestinationFileName
Return: string
Modifiers: public
Summary: For use on Apple frameworks only. Returns the final destination file name.
Accessors: get

Property: Rhino.FileIO.FileWriteOptions.FileVersion
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.IncludeBitmapTable
Return: bool
Modifiers: public
Summary: The file written should include the bitmap table if your File Writing Plug-in supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.IncludeHistory
Return: bool
Modifiers: public
Summary: The file written should include history information if your File Writing Plug-In supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.IncludePreviewImage
Return: bool
Modifiers: public
Summary: The file written should include a preview image if your File Writing Plug-in supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.IncludeRenderMeshes
Return: bool
Modifiers: public
Summary: The file written should include the render meshes if your File Writing Plug-in supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.OptionsDictionary
Return: ArchivableDictionary
Modifiers: public
Summary: Additional read options.
Accessors: get

Property: Rhino.FileIO.FileWriteOptions.RhinoDoc
Return: RhinoDoc
Modifiers: public
Summary: Source RhinoDoc that is being written
Accessors: get

Property: Rhino.FileIO.FileWriteOptions.SuppressAllInput
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.SuppressDialogBoxes
Return: bool
Modifiers: public
Summary: If true, it means the command has been run with a '-', meaning you should not ask questions during writing. (no dialogs, no "getters", etc.)
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.UpdateDocumentPath
Return: bool
Modifiers: public
Summary: If a complete, current version, 3dm file is successfully saved, then the name of the file will be used to update the document's default file path and title and document will be marked as not modified.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.WriteAsTemplate
Return: bool
Modifiers: public
Summary: Write as template
Accessors: get

Property: Rhino.FileIO.FileWriteOptions.WriteGeometryOnly
Return: bool
Modifiers: public
Summary: If true, the file written should include only geometry File Writing Plug-in supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.WriteSelectedObjectsOnly
Return: bool
Modifiers: public
Summary: If true, this command should export only the objects currently selected in the Rhino model.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.WriteUserData
Return: bool
Modifiers: public
Summary: If true, the file written should include User Data if your File Writing Plug-in supports it.
Accessors: get set

Property: Rhino.FileIO.FileWriteOptions.Xform
Return: Transform
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileWriteOptions.Dispose()
Return: void
Modifiers: public

Method: Rhino.FileIO.FileWriteOptions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.FileIO.FileX_T
Summary: Support for writing X_T file format

Constructor: Rhino.FileIO.FileX_T.FileX_T()
Summary: Initializes a new instance of the FileX_T class

Method: Rhino.FileIO.FileX_T.Write(string filename, RhinoDoc doc, FileX_TWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a X_T file based on the contents of a RhinoDoc
Parameter: filename (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileX_TWriteOptions)
Parameter Summary: options used for generating the X_T file

Class: Rhino.FileIO.FileX_TWriteOptions
Summary: Options used when writing a X_T file

Constructor: Rhino.FileIO.FileX_TWriteOptions.FileX_TWriteOptions()
Summary: Initializes a new instance of the FileX_TWriteOptions class

Property: Rhino.FileIO.FileX_TWriteOptions.Type
Return: X_T_Types
Modifiers: public
Summary: Get and set the type of the x_t file being written.
Accessors: get set

Method: Rhino.FileIO.FileX_TWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileX3dv
Summary: Support for writing x3dv file format

Constructor: Rhino.FileIO.FileX3dv.FileX3dv()
Summary: Initializes a new instance of the FileX3dv class

Method: Rhino.FileIO.FileX3dv.Write(string path, RhinoDoc doc, FileX3dvWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a x3dv file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileX3dvWriteOptions)
Parameter Summary: options used for generating the x3dv file

Class: Rhino.FileIO.FileX3dvWriteOptions
Summary: Options for writing a x3dv file

Constructor: Rhino.FileIO.FileX3dvWriteOptions.FileX3dvWriteOptions()
Summary: Initializes a new instance of the FileX3dvWriteOptions class

Property: Rhino.FileIO.FileX3dvWriteOptions.ExportTextureCoordinates
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileX3dvWriteOptions.ExportVertexColors
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileX3dvWriteOptions.ExportVertexNormals
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileX3dvWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileX3dvWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.FileXaml
Summary: Support for writing Xaml file format

Constructor: Rhino.FileIO.FileXaml.FileXaml()
Summary: Initializes a new instance of the FileXaml class

Method: Rhino.FileIO.FileXaml.Write(string path, RhinoDoc doc, FileFbxWriteOptions options)
Return: bool
Modifiers: public, static
Summary: Write a Xaml file based on the contents of a RhinoDoc
Parameter: path (string)
Parameter Summary: path to write a file to
Parameter: doc (RhinoDoc)
Parameter Summary: document to get geometry from
Parameter: options (FileFbxWriteOptions)
Parameter Summary: options used for generating the Xaml file

Class: Rhino.FileIO.FileXamlWriteOptions
Summary: Options for writing a Xaml file

Constructor: Rhino.FileIO.FileXamlWriteOptions.FileXamlWriteOptions()
Summary: Initializes a new instance of the FileXamlWriteOptions class

Property: Rhino.FileIO.FileXamlWriteOptions.AddRotationAnimation
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileXamlWriteOptions.AddRotationScrollbars
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileXamlWriteOptions.AnimationAxis
Return: AnimationMode
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileXamlWriteOptions.MeshingParameters
Return: MeshingParameters
Modifiers: public
Accessors: get set

Property: Rhino.FileIO.FileXamlWriteOptions.UseExistingRenderMeshes
Return: bool
Modifiers: public
Summary: If render meshes exist they will be used. Otherwise they are created on the fly using the current render settings of the document.
Accessors: get set

Property: Rhino.FileIO.FileXamlWriteOptions.UseOriginForRotationCenter
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.FileIO.FileXamlWriteOptions.ToDictionary()
Return: Rhino.Collections.ArchivableDictionary
Modifiers: public
Summary: Create a dictionary of these options. This dictionary can be passed to the RhinoDoc.Export function

Class: Rhino.FileIO.ImageFile
Summary: Support functions for image files

Constructor: Rhino.FileIO.ImageFile.ImageFile()
Summary: Initializes a new instance of the ImageFile class

Method: Rhino.FileIO.ImageFile.SupportsAlphaChannel(string filename)
Return: bool
Modifiers: public, static
Summary: Returns True if file at given path is an image file and that file format supports an alpha channel

Class: Rhino.FileIO.ManifestTable
Summary: Maintains an index to every model component that is in the 3dm file. This is the "more comprehensive" table that contains all objects in all other tables.

Property: Rhino.FileIO.ManifestTable.ComponentType
Return: ModelComponentType
Modifiers: public
Summary: Returns <b>ModelComponentType.Mixed</b> .
Accessors: get

Property: Rhino.FileIO.ManifestTable.Count
Return: int
Modifiers: public
Summary: Total number of items in the manifest, including deleted items.
Accessors: get

Property: Rhino.FileIO.ManifestTable.LongCount
Return: long
Modifiers: public
Summary: Total number of items in the manifest, including deleted items.
Accessors: get

Property: Rhino.FileIO.ManifestTable.Parent
Return: object
Modifiers: public, abstract
Summary: Returns the parent object. This is the RhinoDoc, or the File3md file.
Accessors: get

Method: Rhino.FileIO.ManifestTable.GetModelComponentTypeFromGenericType()
Return: ModelComponentType
Modifiers: public, static
Summary: Returns the result of the ComponentType property of a ModelComponent.

Method: Rhino.FileIO.ManifestTable.ActiveObjectCount(ModelComponentType type)
Return: int
Modifiers: public
Summary: Total number of items in the manifest, including deleted items.

Method: Rhino.FileIO.ManifestTable.Clear()
Return: void
Modifiers: public, virtual
Summary: Marks all items as deleted.

Method: Rhino.FileIO.ManifestTable.Contains(ModelComponent item)
Return: bool
Modifiers: public
Summary: Determines if an items is contained in this table.
Parameter: item (ModelComponent)
Parameter Summary: An item, or null. Null is never contained.

Method: Rhino.FileIO.ManifestTable.CopyTo(ModelComponent[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the content of this table to an array.
Parameter: array (ModelComponent[])
Parameter Summary: The array to copy to.
Parameter: arrayIndex (int)
Parameter Summary: The position in the array from which to start copying.

Method: Rhino.FileIO.ManifestTable.FindId(System.Guid id, ModelComponentType type)
Return: ModelComponent
Modifiers: public, abstract
Summary: Uses the guid to find a model component. Deleted objects cannot be found by id. The guid is the value that is stored in the .Id property. In a single document, no two active objects have the same guid. If an object is replaced with a new object, then the guid  persists. For example, if the _Move command moves an object, then the moved object inherits its guid from the starting object. If the Copy command copies an object, then the copy gets a new guid. This guid persists through file saving/opening operations. This function will not find grip objects.
Parameter: id (System.Guid)
Parameter Summary: ID of model component to search for.
Parameter: type (ModelComponentType)
Parameter Summary: The type to be searched. If this is <b>ModelComponentType.Unset</b>  then all types are searched.

Method: Rhino.FileIO.ManifestTable.FindId(System.Guid id)
Return: T
Modifiers: public
Summary: Uses the guid to find a model component. Deleted objects cannot be found by id. The guid is the value that is stored in the .Id property. In a single document, no two active objects have the same guid. If an object is replaced with a new object, then the guid  persists. For example, if the _Move command moves an object, then the moved object inherits its guid from the starting object. If the Copy command copies an object, then the copy gets a new guid. This guid persists through file saving/opening operations. This function will not find grip objects.
Parameter: id (System.Guid)
Parameter Summary: Index of model component to search for.

Method: Rhino.FileIO.ManifestTable.FindId(System.Guid id)
Return: ModelComponent
Modifiers: public, abstract
Summary: Uses the guid to find a model component. Deleted objects cannot be found by id. The guid is the value that is stored in the .Id property. In a single document, no two active objects have the same guid. If an object is replaced with a new object, then the guid  persists. For example, if the _Move command moves an object, then the moved object inherits its guid from the starting object. If the Copy command copies an object, then the copy gets a new guid. This guid persists through file saving/opening operations. This function will not find grip objects.
Parameter: id (System.Guid)
Parameter Summary: ID of model component to search for.

Method: Rhino.FileIO.ManifestTable.FindIndex(int index, ModelComponentType type)
Return: ModelComponent
Modifiers: public, abstract
Summary: Uses the index to find a model component. The index is the value that is stored in the .Index property.
Parameter: index (int)
Parameter Summary: Index of model component to search for.
Parameter: type (ModelComponentType)
Parameter Summary: The type to be searched. Cannot be <b>ModelComponentType.Unset</b> .

Method: Rhino.FileIO.ManifestTable.FindIndex(int index)
Return: T
Modifiers: public
Summary: Uses the index to find a model component. The index is the value that is stored in the .Index property.
Parameter: index (int)
Parameter Summary: Index of model component to search for.

Method: Rhino.FileIO.ManifestTable.FindName(string name, ModelComponentType type, System.Guid parent)
Return: ModelComponent
Modifiers: public, abstract
Summary: Uses the name to find a model component. The name is the value that is stored in the .Name property. Deleted objects have no name.
Parameter: name (string)
Parameter Summary: Name of model component to search for.
Parameter: type (ModelComponentType)
Parameter Summary: The type to be searched. Cannot be <b>ModelComponentType.Unset</b> .
Parameter: parent (System.Guid)
Parameter Summary: Parent object id. This is only required for layers.

Method: Rhino.FileIO.ManifestTable.FindName(string name, System.Guid parent)
Return: T
Modifiers: public
Summary: Uses the name to find a model component. The name is the value that is stored in the .Name property. Deleted objects have no name.
Parameter: name (string)
Parameter Summary: Name of model component to search for.
Parameter: parent (System.Guid)
Parameter Summary: Parent object id. This is only required for layers.

Method: Rhino.FileIO.ManifestTable.FindNameHash(NameHash nameHash, ModelComponentType type)
Return: ModelComponent
Modifiers: public, abstract
Summary: Uses the hash of the name to find a model component. Deleted objects have no name.
Parameter: nameHash (NameHash)
Parameter Summary: NameHash of model component to search for.
Parameter: type (ModelComponentType)
Parameter Summary: The type to be searched. Cannot be <b>ModelComponentType.Unset</b> .

Method: Rhino.FileIO.ManifestTable.FindNameHash(NameHash nameHash)
Return: T
Modifiers: public
Summary: Uses the hash of the name to find a model component. Deleted objects have no name.
Parameter: nameHash (NameHash)
Parameter Summary: Name hash of model component to search for.

Method: Rhino.FileIO.ManifestTable.GetEnumerator()
Return: IEnumerator<T>
Modifiers: public, virtual
Summary: Visits all model components in the document, including default ones.

Method: Rhino.FileIO.ManifestTable.GetEnumerator()
Return: IEnumerator<ModelComponent>
Modifiers: public, virtual
Summary: Visits all model components in the document, including default ones.

Method: Rhino.FileIO.ManifestTable.GetEnumerator(ModelComponentType type)
Return: IEnumerator<ModelComponent>
Modifiers: public, abstract
Summary: Returns an enumerators that yields all model components, including default ones, relating to a particular type.
Parameter: type (ModelComponentType)
Parameter Summary: The model component type.

Class: Rhino.FileIO.NameHash
Summary: Contains information that is useful to uniquely identify an object name. This object is immutable.

Constructor: Rhino.FileIO.NameHash.NameHash(NameHash other)
Summary: Constructs a copy of a content hash.

Constructor: Rhino.FileIO.NameHash.NameHash(string name, Guid parentId, bool ignoreCase)
Summary: Creates a new NameHash, representing a piece of text.

Constructor: Rhino.FileIO.NameHash.NameHash(string name, Guid parentId, ModelComponentType type)
Summary: Creates a new NameHash, representing a piece of text.

Constructor: Rhino.FileIO.NameHash.NameHash(string name, Guid parentId)
Summary: Creates a new NameHash, representing a piece of text.

Constructor: Rhino.FileIO.NameHash.NameHash(string name)
Summary: Creates a new NameHash, representing a piece of text.

Property: Rhino.FileIO.NameHash.MappedCodePoints
Return: uint
Modifiers: public
Summary: Gets the NameHash flags. In some cases = number of mapped code points.
Accessors: get

Property: Rhino.FileIO.NameHash.ParentId
Return: Guid
Modifiers: public
Summary: Only useful if this participates in a tree structure, as with layers.
Accessors: get

Property: Rhino.FileIO.NameHash.Sha1Hash
Return: byte[]
Modifiers: public
Summary: Gets the 20-bytes long SHA-1 hash of ordinal minimum mapped Unicode (UTF-32) code points.
Accessors: get

Method: Rhino.FileIO.NameHash.CreateFilePathHash(string path)
Return: NameHash
Modifiers: public, static
Summary: Creates a new NameHash, representing the name of a file.
Parameter: path (string)
Parameter Summary: A path. This can be None and can refer to a non-existing path.

Method: Rhino.FileIO.NameHash.Clone()
Return: NameHash
Modifiers: public
Summary: Creates a copy of this name hash. Because content hash is immutable, this can be used as a deep copy.

Method: Rhino.FileIO.NameHash.Equals(NameHash other)
Return: bool
Modifiers: public
Summary: Determines if another name hash has the same value.
Parameter: other (NameHash)
Parameter Summary: The other name hash to compare.

Method: Rhino.FileIO.NameHash.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Determines if another object is a name hash with same value.
Parameter: obj (object)
Parameter Summary: The other content hash to compare.

Method: Rhino.FileIO.NameHash.GetHashCode()
Return: int
Modifiers: public, override
Summary: Gets an hash code for this name hash. Two equal content hashes have equal hash code. The other way around might not be true.

Class: Rhino.FileIO.SerializationOptions
Summary: Contains options for serializing -or storing- data, such as Rhino version, user data, and meshes.

Constructor: Rhino.FileIO.SerializationOptions.SerializationOptions()
Summary: Initializes a new instance of the <b>SerializationOptions</b> class.

Property: Rhino.FileIO.SerializationOptions.RhinoVersion
Return: int
Modifiers: public
Summary: Gets or sets a value indicating the Rhino version.
Accessors: get set

Property: Rhino.FileIO.SerializationOptions.WriteAnalysisMeshes
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to write analysis meshes
Accessors: get set

Property: Rhino.FileIO.SerializationOptions.WriteRenderMeshes
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to write render meshes
Accessors: get set

Property: Rhino.FileIO.SerializationOptions.WriteUserData
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to write user data.
Accessors: get set

Class: Rhino.FileIO.SHA1OpenNURBS
Summary: Provides the OpenNURBS implementation of SHA1.
This class is provided only with the purpose of hashing. It is not meant to be   used for any cryptographic purpose.

Constructor: Rhino.FileIO.SHA1OpenNURBS.SHA1OpenNURBS()
Summary: Constructs a new instance of the SHA1 algorithm.

Method: Rhino.FileIO.SHA1OpenNURBS.FileSystemPathHash(string path, bool ignoreCase)
Return: byte
Modifiers: public, static
Summary: Computes the SHA1 hash of a file system path, converted to UTF8.
These file system paths have identical values of FileSystemPathHash():
/x/y/z/name.ext
\x\y\z\name.ext
/x//y//z/name.ext
/x/y/a/b/c/../../../z/name.ext
/X/Y/Z/NAME.EXT (When ignoreCase is true) | Parameter: path (string) | Parameter Summary: A non-None path string. | Parameter: ignoreCase (bool) | Parameter Summary: If case should be ignored. If this is None or unspecified, the operating system default is used.

Method: Rhino.FileIO.SHA1OpenNURBS.StringHash(string input)
Return: byte
Modifiers: public, static
Summary: Computes the SHA1 hash of a string, converted to UTF8.

Method: Rhino.FileIO.SHA1OpenNURBS.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: Reclaims unmanaged resources used by this instance, and invalidates the instance. After calling this method, all other methods will always call ObjectDisposedException.
Parameter: disposing (bool)
Parameter Summary: True if the class user called Dispose.

Method: Rhino.FileIO.SHA1OpenNURBS.HashCore(byte array, int start, int length)
Return: void
Modifiers: protected, override
Summary: Advances the hash by an input array.
Parameter: array (byte)
Parameter Summary: The array.
Parameter: start (int)
Parameter Summary: The start of the data to consider in the array.
Parameter: length (int)
Parameter Summary: The used data length on the array.

Method: Rhino.FileIO.SHA1OpenNURBS.HashFinal()
Return: byte
Modifiers: protected, override
Summary: Returns the currently computed hash.

Method: Rhino.FileIO.SHA1OpenNURBS.Initialize()
Return: void
Modifiers: public, override
Summary: Resets this instance of the algorithm, so that it can be used again. It is not required to call this method after creation.

Class: Rhino.FileIO.TextLog
Summary: Used for collecting text data

Constructor: Rhino.FileIO.TextLog.TextLog()
Summary: Creates a text log that stores all text in memory.  Use ToString on this version of the TextLog to get the text that we written

Constructor: Rhino.FileIO.TextLog.TextLog(IntPtr ptr)

Constructor: Rhino.FileIO.TextLog.TextLog(string filename)
Summary: Creates a text log that writes all text to a file. If no filename is provided, then text is written to StdOut

Property: Rhino.FileIO.TextLog.IndentSize
Return: int
Modifiers: public
Summary: 0: one tab per indent. >0: number of spaces per indent
Accessors: get set

Method: Rhino.FileIO.TextLog.NewCommandLine()
Return: TextLog
Modifiers: public, static
Summary: Returns a reference to a TextLog that prints to the Rhino command line. Each new command line reference holds its own indents.

Method: Rhino.FileIO.TextLog.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.FileIO.TextLog.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.FileIO.TextLog.PopIndent()
Return: void
Modifiers: public
Summary: Decrease the indentation level

Method: Rhino.FileIO.TextLog.Print(string format, object arg0, object arg1)
Return: void
Modifiers: public
Summary: Send formatted text to the text log

Method: Rhino.FileIO.TextLog.Print(string format, object arg0)
Return: void
Modifiers: public
Summary: Send formatted text to the text log

Method: Rhino.FileIO.TextLog.Print(string text)
Return: void
Modifiers: public
Summary: Send text to the text log

Method: Rhino.FileIO.TextLog.PrintWrappedText(string text, int lineLength)
Return: void
Modifiers: public
Summary: Send text wrapped at a set line length

Method: Rhino.FileIO.TextLog.PushIndent()
Return: void
Modifiers: public
Summary: Increase the indentation level

Method: Rhino.FileIO.TextLog.ToString()
Return: string
Modifiers: public, override
Summary: If the TextLog was constructed using the empty constructor, then the text information is stored in a runtime string.  The contents of this string is retrieved using ToString for this case

# Namespace: Rhino.Geometry
Summary: The Geometry namespace contains geometric types used in Rhino.
Examples are lines, curves, meshes and boundary representations.

Class: Rhino.Geometry.AngularDimension
Summary: Represents a dimension of an entity that can be measured with an angle.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension()
Summary: Constructs an angular dimension.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Arc arc, double offset)
Summary: Constructs an angular dimension from a given arc.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Line line1, Point3d pointOnLine1, Line line2, Point3d pointOnLine2, Point3d pointOnAngularDimensionArc, bool bSetExtensionPoints)
Summary: Constructs an angular dimension between the lines.  If the lines intersect in a single point, that point is used as the center of the angular dimension arc.In this case, there are eight possible angles to dimension.The pointOnAngularDimensionArc and pointOnLine parameters are used to select the correct angle to dimension. If a pointOnLine parameter is not set, the corresponding line's midpoint is used.  If the lines are colinear, the point on the line closest to pointOnAngularDimensionArc is the center of the angular dimension arc.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Plane plane, Vector3d horizontal, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Summary: Constructs an angular dimension from parameters.

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(Plane plane, Vector3d horizontal, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Summary: Constructs an angular dimension with extension lines starting at plane origin (arc center).

Constructor: Rhino.Geometry.AngularDimension.AngularDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.AngularDimension.AngleFormat
Return: AngleDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.AngleZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.ArrowPoint1
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AngularDimension.ArrowPoint2
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AngularDimension.CenterPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DefPoint1
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DefPoint2
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.AngularDimension.DimlinePoint
Return: Point2d
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Line line1, Point3d pointOnLine1, Line line2, Point3d pointOnLine2, Point3d pointOnAngularDimensionArc, bool bSetExtensionPoints)
Return: AngularDimension
Modifiers: public, static
Summary: The angle between the lines is dimensioned.  If the lines intersect in a single point, that point is used as the center of the angular dimension arc.In this case, there are eight possible angles to dimension.The pointOnAngularDimensionArc and pointOnLine parameters are used to select the correct angle to dimension. If a pointOnLine parameter is not set, the corresponding line's midpoint is used.  If the lines are colinear, the point on the line closest to pointOnAngularDimensionArc is the center of the angular dimension arc.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension style.
Parameter: line1 (Line)
Parameter Summary: The first line.
Parameter: pointOnLine1 (Point3d)
Parameter Summary: If specified, indicates which semi-infinite portion of line1 to dimension. Otherwise the midpoint of line1 as a segment is used. When in doubt, use Point3d.Unset.
Parameter: line2 (Line)
Parameter Summary: The second line.
Parameter: pointOnLine2 (Point3d)
Parameter Summary: 
Parameter: pointOnAngularDimensionArc (Point3d)
Parameter Summary: A point on the interior of the angular dimension arc.
Parameter: bSetExtensionPoints (bool)
Parameter Summary: If bSetExtensionPoints is true, and a pointOnLine parameter is valid, that point is used as the extension point. Otherwise the angular dimension arc endpoint is used.

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static
Summary: Creates an angular dimension from parameters.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: The dimension style.
Parameter: plane (Plane)
Parameter Summary: The dimension's plane.
Parameter: horizontal (Vector3d)
Parameter Summary: The horizontal direction.
Parameter: extpoint1 (Point3d)
Parameter Summary: Start of first extension line.
Parameter: extpoint2 (Point3d)
Parameter Summary: start of second extension line.
Parameter: dirpoint1 (Point3d)
Parameter Summary: point on first extension vector.
Parameter: dirpoint2 (Point3d)
Parameter Summary: Spoint on second extension vector.
Parameter: dimlinepoint (Point3d)
Parameter Summary: point on dimension line.

Method: Rhino.Geometry.AngularDimension.Create(DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static
Summary: Creates an angular dimension with extension lines starting at plane origin (arc center).
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: horizontal (Vector3d)
Parameter Summary: Horizontal reference direction.
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension center point.
Parameter: defpoint1 (Point3d)
Parameter Summary: Point on first extension line.
Parameter: defpoint2 (Point3d)
Parameter Summary: Point on second extension line.
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension arc.

Method: Rhino.Geometry.AngularDimension.Create(System.Guid styleId, Plane plane, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: AngularDimension
Modifiers: public, static

Method: Rhino.Geometry.AngularDimension.AdjustFromPoints(Plane plane, Point3d extpoint1, Point3d extpoint2, Point3d dirpoint1, Point3d dirpoint2, Point3d dimlinepoint)
Return: bool
Modifiers: public
Summary: Update angular dimension from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: extpoint1 (Point3d)
Parameter Summary: Start of first extension line.
Parameter: extpoint2 (Point3d)
Parameter Summary: start of second extension line.
Parameter: dirpoint1 (Point3d)
Parameter Summary: point on first extension vector.
Parameter: dirpoint2 (Point3d)
Parameter Summary: Spoint on second extension vector.
Parameter: dimlinepoint (Point3d)
Parameter Summary: point on dimension line.

Method: Rhino.Geometry.AngularDimension.AdjustFromPoints(Plane plane, Point3d centerpoint, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint)
Return: bool
Modifiers: public
Summary: Updates dimension geometry from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: defpoint1 (Point3d)
Parameter Summary: Point on first extension line.
Parameter: defpoint2 (Point3d)
Parameter Summary: Point on second extension line.
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension arc.

Method: Rhino.Geometry.AngularDimension.Get3dPoints(out Point3d centerpoint, out Point3d defpoint1, out Point3d defpoint2, out Point3d arrowpoint1, out Point3d arrowpoint2, out Point3d dimlinepoint, out Point3d textpoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: defpoint1 (Point3d)
Parameter Summary: First definition point
Parameter: defpoint2 (Point3d)
Parameter Summary: Second definition point
Parameter: arrowpoint1 (Point3d)
Parameter Summary: First arrow point
Parameter: arrowpoint2 (Point3d)
Parameter Summary: Second arrow point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: textpoint (Point3d)
Parameter Summary: Text location point

Method: Rhino.Geometry.AngularDimension.GetAngleDisplayText(DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.AngularDimension.GetDisplayLines(DimensionStyle style, double scale, out Line[] lines, out Arc[] arcs)
Return: bool
Modifiers: public

Method: Rhino.Geometry.AngularDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.AnnotationBase
Summary: Provides a common base class to all annotation geometry.
This class refers to the geometric element that is independent from the document.

Constructor: Rhino.Geometry.AnnotationBase.AnnotationBase()
Summary: Protected constructor for internal use.

Constructor: Rhino.Geometry.AnnotationBase.AnnotationBase(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.AnnotationBase.AlternateDimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Summary: Alternate length display units and format
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.AnnotationType
Return: AnnotationType
Modifiers: public, virtual
Summary: Type of annotation
Accessors: get

Property: Rhino.Geometry.AnnotationBase.DecimalSeparator
Return: char
Modifiers: public
Summary: Set or get the decimal separator c
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionLengthDisplay
Return: LengthDisplay
Modifiers: public
Summary: Length display units and format
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionScale
Return: double
Modifiers: public
Summary: Gets or sets the dimension scale
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: If there are no overrides then the parent style is returned otherwise the dimension style saved with the annotation is returned.
Accessors: get

Property: Rhino.Geometry.AnnotationBase.DimensionStyleId
Return: Guid
Modifiers: public
Summary: Id of this annotation's parent dimstyle If this annotation has overrides to dimstyle properties, those overrides will be represented in the DimensionStyle returned by DimensionStyle(ParentStyle)
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DrawForward
Return: bool
Modifiers: public
Summary: Gets or sets whether the text is oriented towards the reader when viewed from behind
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.DrawTextFrame
Return: bool
Modifiers: public
Summary: Gets or sets whether to draw a frame around a text mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FirstCharFont
Return: Font
Modifiers: public
Summary: Returns the font used by the first run of text in an annotation
Accessors: get

Property: Rhino.Geometry.AnnotationBase.Font
Return: Font
Modifiers: public
Summary: The base Font for the text of the annotation.  The text string is rich text and therefore a different font that the base font can be associated with sub strings of the text
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FontIndex
Return: int
Modifiers: public
Summary: Obsolete; use Font property instead
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.FormatWidth
Return: double
Modifiers: public
Summary: Text format width (Wrapping rectangle)
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.HasPropertyOverrides
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AnnotationBase.MaskColor
Return: Color
Modifiers: public
Summary: Color to use for drawing a text mask when it is enabled. If the mask is enabled and MaskColor is System.Drawing.Color.Transparent, then the viewport's color will be used for the MaskColor
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskColorSource
Return: MaskType
Modifiers: public
Summary: Gets or sets whether the mask background color is from the background or from a color
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskEnabled
Return: bool
Modifiers: public
Summary: Determines whether or not to draw a Text Mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskFrame
Return: MaskFrame
Modifiers: public
Summary: Gets or sets whether to draw a frame around a text mask
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskOffset
Return: double
Modifiers: public
Summary: Offset for the border around text of the rectangle used to draw the mask.  This value multiplied by TextHeight is the offset on each side of the tight rectangle around the text characters to the mask rectangle. The default value is 0.1.
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.MaskUsesViewportColor
Return: bool
Modifiers: public
Summary: If true, the viewport's color is used for the mask color. If false, the color defined by MaskColor is used
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.ParentDimensionStyle
Return: DimensionStyle
Modifiers: public
Summary: The parent dimension style associated with this annotation
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.PlainText
Return: string
Modifiers: public
Summary: Text stripped of RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.PlainTextWithFields
Return: string
Modifiers: public
Summary: Text stripped of RTF formatting information and with field expressions intact
Accessors: get

Property: Rhino.Geometry.AnnotationBase.Plane
Return: Plane
Modifiers: public
Summary: Plane that this annotation lies on
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.RichText
Return: string
Modifiers: public
Summary: Text including additional RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.Text
Return: string
Modifiers: public
Summary: Text including additional RTF formatting information
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextFormula
Return: string
Modifiers: public
Summary: See RichText
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextHasRtfFormatting
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.AnnotationBase.TextHeight
Return: double
Modifiers: public
Summary: AnnotationBase.TextHeight Gets the parent dimstyle for the annotation and gets or sets the text height in the dimstyle
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextIsWrapped
Return: bool
Modifiers: public
Summary: Is text wrapping on
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextModelWidth
Return: double
Modifiers: public
Summary: Width of text in the model
Accessors: get

Property: Rhino.Geometry.AnnotationBase.TextRotationDegrees
Return: double
Modifiers: public
Summary: Rotation of text in degrees
Accessors: get set

Property: Rhino.Geometry.AnnotationBase.TextRotationRadians
Return: double
Modifiers: public
Summary: Rotation of text in radians
Accessors: get set

Method: Rhino.Geometry.AnnotationBase.FirstCharProperties(string rtf_str, ref bool bold, ref bool italic, ref bool underline, ref string facename)
Return: bool
Modifiers: static, public

Method: Rhino.Geometry.AnnotationBase.FormatRtfString(string rtf_in, bool clear_bold, bool set_bold, bool clear_italic, bool set_italic, bool clear_underline, bool set_underline, bool clear_facename, bool set_facename, string facename)
Return: string
Modifiers: static, public

Method: Rhino.Geometry.AnnotationBase.GetDimensionScale(RhinoDoc doc, DimensionStyle dimstyle, Rhino.Display.RhinoViewport vport)
Return: double
Modifiers: public, static
Summary: Get view dependent dimension scale

Method: Rhino.Geometry.AnnotationBase.PlainTextToRtf(string str)
Return: string
Modifiers: public, static

Method: Rhino.Geometry.AnnotationBase.ClearPropertyOverrides()
Return: bool
Modifiers: public
Summary: Clears all overridden properties for this annotation

Method: Rhino.Geometry.AnnotationBase.GetBoundingBox(Transform xform)
Return: BoundingBox
Modifiers: public, override
Summary: Aligned bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to bounding box after calculation. The geometry is not modified.

Method: Rhino.Geometry.AnnotationBase.GetDimensionStyle(DimensionStyle parentDimStyle)
Return: DimensionStyle
Modifiers: public
Summary: Return the proper dimension style from which to get properties for this annotation object If this object has style overrides, those will be included in the returned dimension style and the style will be updated to include the current state of the parent style for non-overridden fields

Method: Rhino.Geometry.AnnotationBase.GetPlainTextWithRunMap(ref int map)
Return: string
Modifiers: public
Summary: Return plain text string for this annotation with field expressions unevaluated.
Parameter: map (int)
Parameter Summary: an array of int values in groups of 3: run index, character start position, and length.

Method: Rhino.Geometry.AnnotationBase.IsAllBold()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Bold, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsAllItalic()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Italic, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsAllUnderlined()
Return: bool
Modifiers: public
Summary: Returns True if all of the text in the annotation is Underlined, otherwise returns false

Method: Rhino.Geometry.AnnotationBase.IsPropertyOverridden(DimensionStyle.Field field)
Return: bool
Modifiers: public
Summary: Returns True if a property is overridden

Method: Rhino.Geometry.AnnotationBase.RunReplace(string replaceString, int startRunIndex, int startRunPosition, int endRunIndex, int endRunPosition)
Return: bool
Modifiers: public
Summary: Replace text within a formatted string

Method: Rhino.Geometry.AnnotationBase.SetBold(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetFacename(bool set_on, string facename)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetItalic(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.SetOverrideDimStyle(DimensionStyle OverrideStyle)
Return: bool
Modifiers: public
Summary: Set a style including overrides for this annotation object. The DimensionStyle OverrideStyle must have the override fields marked as overridden and must have it's Id set to nil. Use DimensinoStyle.SetFieldOverride(Field field) and related functions to manage override settings. To override a field, the field value must be set and the field must be marked as an override. The DimensionStyle passed in here must not be in the dimstyle table

Method: Rhino.Geometry.AnnotationBase.SetRichText(string rtfText, DimensionStyle dimstyle)
Return: void
Modifiers: public

Method: Rhino.Geometry.AnnotationBase.SetUnderline(bool set_on)
Return: bool
Modifiers: public, virtual

Method: Rhino.Geometry.AnnotationBase.WrapText()
Return: void
Modifiers: public
Summary: Wrap text

Class: Rhino.Geometry.ArcCurve
Summary: Represent arcs and circles.
ArcCurve.IsCircle returns True if the curve is a complete circle.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve()
Summary: Initializes a new <b>ArcCurve</b> instance.
Radius is set to 1, position to Origin and Domain to full span (circle).

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Arc arc, double t0, double t1)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>Arc</b> and specifying the needed parametrization of the arc.
Arc will not be cut again at these parameterizations.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Arc arc)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>Arc</b> .

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(ArcCurve other)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from another <b>ArcCurve</b> .

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Circle circle, double t0, double t1)
Summary: Initializes a new <b>ArcCurve</b> instance, copying values from a <b>Circle</b> and specifying the needed parametrization of the arc.
Circle will not be newly cut at these parameterizations.

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(Circle circle)
Summary: Initializes a new <b>ArcCurve</b> instance, copying the shape of a <b>Circle</b> .
Parameterization will be [0;circle.Circumference]

Constructor: Rhino.Geometry.ArcCurve.ArcCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.ArcCurve.AngleDegrees
Return: double
Modifiers: public
Summary: Gets the angles of this arc in degrees.
Accessors: get

Property: Rhino.Geometry.ArcCurve.AngleRadians
Return: double
Modifiers: public
Summary: Gets the angles of this arc in radians.
Accessors: get

Property: Rhino.Geometry.ArcCurve.Arc
Return: Arc
Modifiers: public
Summary: Gets the arc that is contained within this ArcCurve.
Accessors: get

Property: Rhino.Geometry.ArcCurve.IsCompleteCircle
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve can be represented by a complete circle.
Accessors: get

Property: Rhino.Geometry.ArcCurve.Radius
Return: double
Modifiers: public
Summary: Gets the radius of this ArcCurve.
Accessors: get

Class: Rhino.Geometry.AreaMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of area, area centroid and area moments in closed planar curves, in meshes, in surfaces, in hatches and in boundary representations.

Constructor: Rhino.Geometry.AreaMassProperties.AreaMassProperties()
Summary: Initializes a new instance of the AreaMassProperties class

Property: Rhino.Geometry.AreaMassProperties.Area
Return: double
Modifiers: public
Summary: Gets the area solution.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.AreaError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the area calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the area centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the centroid calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the area Y is integral of "y dm" over the area Z is integral of "z dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the area Y is integral of "yz dm" over the area Z is integral of "zx dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the area Y is integral of "yy dm" over the area Z is integral of "zz dm" over the area.
Accessors: get

Property: Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep, bool area, bool firstMoments, bool secondMoments, bool productMoments, double relativeTolerance, double absoluteTolerance)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.
Parameter: relativeTolerance (double)
Parameter Summary: The relative tolerance used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.
Parameter: absoluteTolerance (double)
Parameter Summary: The absolute tolerancwe used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Brep brep)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Curve closedPlanarCurve, double planarTolerance)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a closed planar curve.
Parameter: closedPlanarCurve (Curve)
Parameter Summary: Curve to measure.
Parameter: planarTolerance (double)
Parameter Summary: absolute tolerance used to insure the closed curve is planar

Method: Rhino.Geometry.AreaMassProperties.Compute(Curve closedPlanarCurve)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a closed planar curve.
Parameter: closedPlanarCurve (Curve)
Parameter Summary: Curve to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Hatch hatch)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a hatch.
Parameter: hatch (Hatch)
Parameter Summary: Hatch to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(IEnumerable<GeometryBase> geometry, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes the AreaMassProperties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the area computation.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(IEnumerable<GeometryBase> geometry)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes the Area properties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the area computation.

Method: Rhino.Geometry.AreaMassProperties.Compute(Mesh mesh, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Mesh mesh)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.

Method: Rhino.Geometry.AreaMassProperties.Compute(Surface surface, bool area, bool firstMoments, bool secondMoments, bool productMoments)
Return: AreaMassProperties
Modifiers: public, static
Summary: Compute the AreaMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.
Parameter: area (bool)
Parameter Summary: True to calculate area.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate area first moments, area, and area centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate area second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate area product moments.

Method: Rhino.Geometry.AreaMassProperties.Compute(Surface surface)
Return: AreaMassProperties
Modifiers: public, static
Summary: Computes an AreaMassProperties for a surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.

Method: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.AreaMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.AreaMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Class: Rhino.Geometry.Arrowhead
Summary: Arrowhead used by annotation

Constructor: Rhino.Geometry.Arrowhead.Arrowhead()
Summary: Constructor

Constructor: Rhino.Geometry.Arrowhead.Arrowhead(ArrowType arrowType, Guid blockId)
Summary: Constructor

Property: Rhino.Geometry.Arrowhead.ArrowType
Return: ArrowType
Modifiers: public
Summary: Type of arrowhead used by annotation
Accessors: get

Property: Rhino.Geometry.Arrowhead.BlockId
Return: Guid
Modifiers: public
Summary: Id of block used for user-defined arrowhead
Accessors: get

Class: Rhino.Geometry.BezierCurve
Summary: Represents a Bezier curve.
Note: as an exception, the bezier curve is not derived from .

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point2d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 2d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point3d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 3d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(IEnumerable<Point4d> controlPoints)
Summary: Create bezier curve with controls defined by a list of 4d points

Constructor: Rhino.Geometry.BezierCurve.BezierCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.BezierCurve.ControlVertexCount
Return: int
Modifiers: public
Summary: Number of control vertices in this curve
Accessors: get

Property: Rhino.Geometry.BezierCurve.Dimension
Return: int
Modifiers: public
Summary: Dimension of Bezier
Accessors: get

Property: Rhino.Geometry.BezierCurve.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the curve is rational. Rational curves have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.BezierCurve.IsValid
Return: bool
Modifiers: public
Summary: Tests an object to see if it is valid.
Accessors: get

Method: Rhino.Geometry.BezierCurve.CreateBeziers(Curve sourceCurve)
Return: BezierCurve[]
Modifiers: public, static
Summary: Create an array of Bezier curves that fit to an existing curve. Please note, these Beziers can be of any order and may be rational.
Parameter: sourceCurve (Curve)
Parameter Summary: The curve to fit Beziers to

Method: Rhino.Geometry.BezierCurve.CreateCubicBeziers(Curve sourceCurve, double distanceTolerance, double kinkTolerance)
Return: BezierCurve[]
Modifiers: public, static
Summary: Constructs an array of cubic, non-rational Beziers that fit a curve to a tolerance.
Parameter: sourceCurve (Curve)
Parameter Summary: A curve to approximate.
Parameter: distanceTolerance (double)
Parameter Summary: The max fitting error. Use RhinoMath.SqrtEpsilon as a minimum.
Parameter: kinkTolerance (double)
Parameter Summary: If the input curve has a g1-discontinuity with angle radian measure greater than kinkTolerance at some point P, the list of beziers will also have a kink at P.

Method: Rhino.Geometry.BezierCurve.CreateLoftedBezier(IEnumerable<Point2d> points)
Return: BezierCurve
Modifiers: public, static
Summary: Loft a bezier through a list of points
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: 2 or more points to interpolate

Method: Rhino.Geometry.BezierCurve.CreateLoftedBezier(IEnumerable<Point3d> points)
Return: BezierCurve
Modifiers: public, static
Summary: Loft a bezier through a list of points
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: 2 or more points to interpolate

Method: Rhino.Geometry.BezierCurve.ChangeDimension(int desiredDimension)
Return: bool
Modifiers: public
Summary: Change dimension of bezier.

Method: Rhino.Geometry.BezierCurve.CurvatureAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluate the curvature vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.BezierCurve.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.BezierCurve.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the curve.
Parameter: accurate (bool)
Parameter Summary: If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. For some geometry types there is no difference between the estimate and the accurate bounding box. Estimated bounding boxes can be computed much (much) faster than accurate (or "tight") bounding boxes. Estimated bounding boxes are always similar to or larger than accurate bounding boxes.

Method: Rhino.Geometry.BezierCurve.GetControlVertex2d(int index)
Return: Point2d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetControlVertex3d(int index)
Return: Point3d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetControlVertex4d(int index)
Return: Point4d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: index (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.Geometry.BezierCurve.IncreaseDegree(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase degree of bezier

Method: Rhino.Geometry.BezierCurve.MakeNonRational()
Return: bool
Modifiers: public
Summary: Make bezier non-rational

Method: Rhino.Geometry.BezierCurve.MakeRational()
Return: bool
Modifiers: public
Summary: Make bezier rational

Method: Rhino.Geometry.BezierCurve.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.Split(double t, out BezierCurve left, out BezierCurve right)
Return: bool
Modifiers: public
Summary: Divides the Bezier curve at the specified parameter.
Parameter: t (double)
Parameter Summary: parameter must satisfy 0 < t < 1
Parameter: left (BezierCurve)
Parameter Summary: 
Parameter: right (BezierCurve)
Parameter Summary:

Method: Rhino.Geometry.BezierCurve.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.BezierCurve.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.

Class: Rhino.Geometry.BezierSurface
Summary: Represents a Bezier surface.

Property: Rhino.Geometry.BezierSurface.Dimension
Return: int
Modifiers: public
Summary: Dimension of Bezier
Accessors: get

Property: Rhino.Geometry.BezierSurface.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the surface is rational. Rational surfaces have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.BezierSurface.IsValid
Return: bool
Modifiers: public
Summary: Tests an object to see if it is valid.
Accessors: get

Method: Rhino.Geometry.BezierSurface.CreateLoftedBezier(IEnumerable<BezierCurve> curves)
Return: BezierSurface
Modifiers: public, static
Summary: Loft a bezier surface through a list of bezier curves.
Parameter: curves (IEnumerable<BezierCurve>)
Parameter Summary: list of curves that have the same degree

Method: Rhino.Geometry.BezierSurface.ControlVertexCount(int direction)
Return: int
Modifiers: public
Summary: Number of control vertices in this surface
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.BezierSurface.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.BezierSurface.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.BezierSurface.Domain(int direction)
Return: Interval
Modifiers: public
Summary: Gets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter, 1 gets second parameter.

Method: Rhino.Geometry.BezierSurface.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the surface.

Method: Rhino.Geometry.BezierSurface.GetControlVertex2d(int i, int j)
Return: Point2d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.GetControlVertex3d(int i, int j)
Return: Point3d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.GetControlVertex4d(int i, int j)
Return: Point4d
Modifiers: public
Summary: Get location of a control vertex.
Parameter: i (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)
Parameter: j (int)
Parameter Summary: Control vertex index (0 <= index < ControlVertexCount)

Method: Rhino.Geometry.BezierSurface.MakeNonRational()
Return: bool
Modifiers: public
Summary: Make bezier non-rational

Method: Rhino.Geometry.BezierSurface.MakeRational()
Return: bool
Modifiers: public
Summary: Make bezier rational

Method: Rhino.Geometry.BezierSurface.PointAt(double u, double v)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a surface parameter.
Parameter: u (double)
Parameter Summary: evaluation parameters.
Parameter: v (double)
Parameter Summary: evaluation parameters.

Method: Rhino.Geometry.BezierSurface.Reverse(int direction)
Return: BezierSurface
Modifiers: public
Summary: Reverses parameterization Domain changes from [a,b] to [-b,-a]
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.BezierSurface.Split(int direction, double t, out BezierSurface left, out BezierSurface right)
Return: bool
Modifiers: public
Summary: Divides the Bezier surface at the specified parameter.
Parameter: direction (int)
Parameter Summary: 0 is split along u and 1 is split along v
Parameter: t (double)
Parameter Summary: parameter must satisfy 0 < t < 1
Parameter: left (BezierSurface)
Parameter Summary: 
Parameter: right (BezierSurface)
Parameter Summary:

Method: Rhino.Geometry.BezierSurface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface representation of this surface.

Method: Rhino.Geometry.BezierSurface.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transforms the surface
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to geometry.

Method: Rhino.Geometry.BezierSurface.Transpose()
Return: BezierSurface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Class: Rhino.Geometry.Brep
Summary: Boundary Representation. A surface or polysurface along with trim curve information.

Constructor: Rhino.Geometry.Brep.Brep()
Summary: Initializes a new empty brep

Constructor: Rhino.Geometry.Brep.Brep(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Brep.Curves2D
Return: BrepCurveList
Modifiers: public
Summary: Parameter space trimming curves (used by trims)
Accessors: get

Property: Rhino.Geometry.Brep.Curves3D
Return: BrepCurveList
Modifiers: public
Summary: Pointers to 3d curves (used by edges)
Accessors: get

Property: Rhino.Geometry.Brep.Edges
Return: BrepEdgeList
Modifiers: public
Summary: Gets the brep edges list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.Faces
Return: BrepFaceList
Modifiers: public
Summary: Gets the brep faces list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.HasRegionTopology
Return: bool
Modifiers: public
Summary: Returns True if the Brep has region topology information, False otherwise.
Accessors: get

Property: Rhino.Geometry.Brep.IsManifold
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the Brep is manifold. Non-Manifold breps have at least one edge that is shared among three or more faces.
Accessors: get

Property: Rhino.Geometry.Brep.IsSolid
Return: bool
Modifiers: public
Summary: Determines whether this brep is a solid, or a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.Brep.IsSurface
Return: bool
Modifiers: public
Summary: Returns True if the Brep has a single face and that face is geometrically the same as the underlying surface.  I.e., the face has trivial trimming.
In this case, the surface is the first face surface. The flag     Brep.Faces[0].OrientationIsReversed records the correspondence between the surface's     natural parametric orientation and the orientation of the Brep.
trivial trimming here means that there is only one loop curve in the brep     and that loop curve is the same as the underlying surface boundary. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.Brep.Loops
Return: BrepLoopList
Modifiers: public
Summary: Gets the brep loop list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.SolidOrientation
Return: BrepSolidOrientation
Modifiers: public
Summary: Gets the solid orientation state of this Brep.
Accessors: get

Property: Rhino.Geometry.Brep.Surfaces
Return: BrepSurfaceList
Modifiers: public
Summary: Parametric surfaces used by faces
Accessors: get

Property: Rhino.Geometry.Brep.Trims
Return: BrepTrimList
Modifiers: public
Summary: Gets the brep trims list accessor.
Accessors: get

Property: Rhino.Geometry.Brep.Vertices
Return: BrepVertexList
Modifiers: public
Summary: Gets the brep vertices list accessor.
Accessors: get

Method: Rhino.Geometry.Brep.ChangeSeam(BrepFace face, int direction, double parameter, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Change the seam of a closed trimmed surface.
Parameter: face (BrepFace)
Parameter Summary: A Brep face with a closed underlying surface.
Parameter: direction (int)
Parameter Summary: The parameter direction (0 = U, 1 = V). The face's underlying surface must be closed in this direction.
Parameter: parameter (double)
Parameter Summary: The parameter at which to place the seam.
Parameter: tolerance (double)
Parameter Summary: Tolerance used to cut up surface.

Method: Rhino.Geometry.Brep.CopyTrimCurves(BrepFace trimSource, Surface surfaceSource, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Copy all trims from a Brep face onto a surface.
Parameter: trimSource (BrepFace)
Parameter Summary: Brep face which defines the trimming curves.
Parameter: surfaceSource (Surface)
Parameter Summary: The surface to trim.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for rebuilding 3D trim curves.

Method: Rhino.Geometry.Brep.CreateBaseballSphere(Point3d center, double radius, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Creates a brep representation of the sphere with two similar trimmed NURBS surfaces, and no singularities.
Parameter: center (Point3d)
Parameter Summary: The center of the sphere.
Parameter: radius (double)
Parameter Summary: The radius of the sphere.
Parameter: tolerance (double)
Parameter Summary: Used in computing 2d trimming curves. If >= 0.0, then the max of ON_0.0001 * radius and RhinoMath.ZeroTolerance will be used.

Method: Rhino.Geometry.Brep.CreateBlendShape(BrepFace face0, BrepEdge edge0, double t0, bool rev0, BlendContinuity continuity0, BrepFace face1, BrepEdge edge1, double t1, bool rev1, BlendContinuity continuity1)
Return: Curve
Modifiers: public, static
Summary: Makes a curve blend between points on two surface edges. The blend will be tangent to the surfaces and perpendicular to the edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to blend from.
Parameter: edge0 (BrepEdge)
Parameter Summary: First edge to blend from.
Parameter: t0 (double)
Parameter Summary: Location on first edge for first end of blend curve.
Parameter: rev0 (bool)
Parameter Summary: If false, edge0 will be used in its natural direction. If true, edge0 will be used in the reversed direction.
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to blend from.
Parameter: edge1 (BrepEdge)
Parameter Summary: Second edge to blend from.
Parameter: t1 (double)
Parameter Summary: Location on second edge for second end of blend curve.
Parameter: rev1 (bool)
Parameter Summary: If false, edge1 will be used in its natural direction. If true, edge1 will be used in the reversed direction.
Parameter: continuity1 (BlendContinuity)
Parameter Summary: >Continuity for the blend at the end.

Method: Rhino.Geometry.Brep.CreateBlendSurface(BrepFace face0, BrepEdge edge0, Interval domain0, bool rev0, BlendContinuity continuity0, BrepFace face1, BrepEdge edge1, Interval domain1, bool rev1, BlendContinuity continuity1)
Return: Brep[]
Modifiers: public, static
Summary: Makes a surface blend between two surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to blend from.
Parameter: edge0 (BrepEdge)
Parameter Summary: First edge to blend from.
Parameter: domain0 (Interval)
Parameter Summary: The domain of edge0 to use.
Parameter: rev0 (bool)
Parameter Summary: If false, edge0 will be used in its natural direction. If true, edge0 will be used in the reversed direction.
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to blend from.
Parameter: edge1 (BrepEdge)
Parameter Summary: Second edge to blend from.
Parameter: domain1 (Interval)
Parameter Summary: The domain of edge1 to use.
Parameter: rev1 (bool)
Parameter Summary: If false, edge1 will be used in its natural direction. If true, edge1 will be used in the reversed direction.
Parameter: continuity1 (BlendContinuity)
Parameter Summary: Continuity for the blend at the end.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(Brep firstBrep, Brep secondBrep, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean difference.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean difference.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean difference.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean difference.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps (the set to subtract from).
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps (the set to subtract).
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanDifference(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Difference of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps (the set to subtract from).
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps (the set to subtract).
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for difference operation.

Method: Rhino.Geometry.Brep.CreateBooleanDifferenceWithIndexMap(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly, out int indexMap)
Return: Brep[]
Modifiers: public, static
Summary: Compute the solid difference between two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: The set to be differenced from.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: The set to difference with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for the boolean operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.
Parameter: indexMap (int)
Parameter Summary: results[i] is the result if subtracting something from firstSet[indexMap[i]].

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(Brep firstBrep, Brep secondBrep, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean intersection.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean intersection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two Breps.
Parameter: firstBrep (Brep)
Parameter Summary: First Brep for boolean intersection.
Parameter: secondBrep (Brep)
Parameter Summary: Second Brep for boolean intersection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanIntersection(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Solid Intersection of two sets of Breps.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: First set of Breps.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: Second set of Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreateBooleanSplit(Brep firstBrep, Brep secondBrep, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits shared areas of Breps and creates separate Breps from the shared and unshared parts.
Parameter: firstBrep (Brep)
Parameter Summary: The Brep to split.
Parameter: secondBrep (Brep)
Parameter Summary: The cutting Brep.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for splitting operation. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateBooleanSplit(IEnumerable<Brep> firstSet, IEnumerable<Brep> secondSet, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits shared areas of Breps and creates separate Breps from the shared and unshared parts.
Parameter: firstSet (IEnumerable<Brep>)
Parameter Summary: The Breps to split.
Parameter: secondSet (IEnumerable<Brep>)
Parameter Summary: The cutting Breps.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for splitting operation. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance, bool manifoldOnly, out Point3d[] nakedEdgePoints, out Point3d[] badIntersectionPoints, out Point3d[] nonManifoldEdgePoints)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.
Parameter: nakedEdgePoints (Point3d[])
Parameter Summary: If Boolean failed because the intersection hit a naked edge, a point will be added where the intersection hits the edge.
Parameter: badIntersectionPoints (Point3d[])
Parameter Summary: If Boolean failed because an intersection ends on the interior of both surfaces, a point is added.This happens when the surface intersector fails.
Parameter: nonManifoldEdgePoints (Point3d[])
Parameter Summary: If Boolean failed because the intersection hit a non-manifold edge, a point will be added where the intersection hits the edge.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance, bool manifoldOnly)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.
Parameter: manifoldOnly (bool)
Parameter Summary: If true, non-manifold input breps are ignored.

Method: Rhino.Geometry.Brep.CreateBooleanUnion(IEnumerable<Brep> breps, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Compute the Boolean Union of a set of Breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to union.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreateChamferSurface(BrepFace face0, Point2d uv0, double radius0, BrepFace face1, Point2d uv1, double radius1, bool trim, bool extend, double tolerance, out Brep[] outBreps0, out Brep[] outBreps1)
Return: Brep[]
Modifiers: public, static
Summary: Creates a ruled surface as a bevel between two input surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to chamfer from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after chamfering.
Parameter: radius0 (double)
Parameter Summary: The distance from the intersection of face0 to the edge of the chamfer.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to chamfer from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after chamfering.
Parameter: radius1 (double)
Parameter Summary: The distance from the intersection of face1 to the edge of the chamfer.
Parameter: trim (bool)
Parameter Summary: If true, the input faces will be trimmed, if false, the input faces will be split.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the chamfer surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: outBreps0 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face0.
Parameter: outBreps1 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face1.

Method: Rhino.Geometry.Brep.CreateChamferSurface(BrepFace face0, Point2d uv0, double radius0, BrepFace face1, Point2d uv1, double radius1, bool extend, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a ruled surface as a bevel between two input surface edges.
Parameter: face0 (BrepFace)
Parameter Summary: First face to chamfer from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after chamfering.
Parameter: radius0 (double)
Parameter Summary: The distance from the intersection of face0 to the edge of the chamfer.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to chamfer from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after chamfering.
Parameter: radius1 (double)
Parameter Summary: The distance from the intersection of face1 to the edge of the chamfer.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the chamfer surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateContourCurves(Brep brepToContour, Plane sectionPlane)
Return: Curve[]
Modifiers: public, static
Summary: Constructs the contour curves for a brep, using a slicing plane.
Parameter: brepToContour (Brep)
Parameter Summary: A brep or polysurface.
Parameter: sectionPlane (Plane)
Parameter Summary: A plane.

Method: Rhino.Geometry.Brep.CreateContourCurves(Brep brepToContour, Point3d contourStart, Point3d contourEnd, double interval)
Return: Curve[]
Modifiers: public, static
Summary: Constructs the contour curves for a brep at a specified interval.
Parameter: brepToContour (Brep)
Parameter Summary: A brep or polysurface.
Parameter: contourStart (Point3d)
Parameter Summary: A point to start.
Parameter: contourEnd (Point3d)
Parameter Summary: A point to use as the end.
Parameter: interval (double)
Parameter Summary: The interaxial offset in world units.

Method: Rhino.Geometry.Brep.CreateCurvatureAnalysisMesh(Brep brep, Rhino.ApplicationSettings.CurvatureAnalysisSettingsState state)
Return: Mesh[]
Modifiers: public, static
Summary: Create an array of analysis meshes for the brep using the specified settings. Meshes aren't set on the brep.
Parameter: brep (Brep)
Parameter Summary: 
Parameter: state (Rhino.ApplicationSettings.CurvatureAnalysisSettingsState)
Parameter Summary: CurvatureAnalysisSettingsState

Method: Rhino.Geometry.Brep.CreateDevelopableLoft(Curve crv0, Curve crv1, bool reverse0, bool reverse1, int density)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single developable surface between two curves.
Parameter: crv0 (Curve)
Parameter Summary: The first rail curve.
Parameter: crv1 (Curve)
Parameter Summary: The second rail curve.
Parameter: reverse0 (bool)
Parameter Summary: Reverse the first rail curve.
Parameter: reverse1 (bool)
Parameter Summary: Reverse the second rail curve
Parameter: density (int)
Parameter Summary: The number of rulings across the surface.

Method: Rhino.Geometry.Brep.CreateDevelopableLoft(NurbsCurve rail0, NurbsCurve rail1, IEnumerable<Point2d> fixedRulings)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single developable surface between two curves.
Parameter: rail0 (NurbsCurve)
Parameter Summary: The first rail curve.
Parameter: rail1 (NurbsCurve)
Parameter Summary: The second rail curve.
Parameter: fixedRulings (IEnumerable<Point2d>)
Parameter Summary: Rulings define lines across the surface that define the straight sections on the developable surface, where rulings[i].X = parameter on first rail curve, and rulings[i].Y = parameter on second rail curve. Note, rulings will be automatically adjusted to minimum twist.

Method: Rhino.Geometry.Brep.CreateEdgeSurface(IEnumerable<Curve> curves)
Return: Brep
Modifiers: public, static
Summary: Constructs a coons patch from 2, 3, or 4 curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list, an array or any enumerable set of curves.

Method: Rhino.Geometry.Brep.CreateFilletEdges(Brep brep, IEnumerable<int> edgeIndices, IEnumerable<double> startRadii, IEnumerable<double> endRadii, BlendType blendType, RailType railType, bool setbackFillets, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: startRadii (IEnumerable<double>)
Parameter Summary: An array of starting fillet, chamfer, or blend radaii, one for each edge index.
Parameter: endRadii (IEnumerable<double>)
Parameter Summary: An array of ending fillet, chamfer, or blend radaii, one for each edge index.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: setbackFillets (bool)
Parameter Summary: UJse setback fillets (only used with blendType= <b>BlendType.Blend</b> )
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance to be used to perform calculations [radians].

Method: Rhino.Geometry.Brep.CreateFilletEdges(Brep brep, IEnumerable<int> edgeIndices, IEnumerable<double> startRadii, IEnumerable<double> endRadii, BlendType blendType, RailType railType, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: startRadii (IEnumerable<double>)
Parameter Summary: An array of starting fillet, chamfer, or blend radaii, one for each edge index.
Parameter: endRadii (IEnumerable<double>)
Parameter Summary: An array of ending fillet, chamfer, or blend radaii, one for each edge index.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.

Method: Rhino.Geometry.Brep.CreateFilletEdgesVariableRadius(Brep brep, IEnumerable<int> edgeIndices, IDictionary<int, IList<BrepEdgeFilletDistance>> edgeDistances, BlendType blendType, RailType railType, bool setbackFillets, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Fillets, chamfers, or blends the edges of a brep.
Parameter: brep (Brep)
Parameter Summary: The brep to fillet, chamfer, or blend edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of one or more edge indices where the fillet, chamfer, or blend will occur.
Parameter: edgeDistances (IDictionary<int, IList<BrepEdgeFilletDistance>>)
Parameter Summary: A dictionary with key the edge index on the input brep, and value a list of <b>BrepEdgeFilletDistance</b> items to apply.
Parameter: blendType (BlendType)
Parameter Summary: The blend type.
Parameter: railType (RailType)
Parameter Summary: The rail type.
Parameter: setbackFillets (bool)
Parameter Summary: UJse setback fillets (only used with blendType= <b>BlendType.Blend</b> )
Parameter: tolerance (double)
Parameter Summary: The tolerance to be used to perform calculations.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance to be used to perform calculations [radians].

Method: Rhino.Geometry.Brep.CreateFilletSurface(BrepFace face0, Point2d uv0, BrepFace face1, Point2d uv1, double radius, bool trim, bool extend, double tolerance, out Brep[] outBreps0, out Brep[] outBreps1)
Return: Brep[]
Modifiers: public, static
Summary: Creates a constant-radius round surface between two surfaces.
Parameter: face0 (BrepFace)
Parameter Summary: First face to fillet from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after filleting.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to fillet from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after filleting.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: trim (bool)
Parameter Summary: If true, the input faces will be trimmed, if false, the input faces will be split.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: outBreps0 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face0.
Parameter: outBreps1 (Brep[])
Parameter Summary: The trim or split results of the Brep owned by face1.

Method: Rhino.Geometry.Brep.CreateFilletSurface(BrepFace face0, Point2d uv0, BrepFace face1, Point2d uv1, double radius, bool extend, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a constant-radius round surface between two surfaces.
Parameter: face0 (BrepFace)
Parameter Summary: First face to fillet from.
Parameter: uv0 (Point2d)
Parameter Summary: A parameter face0 at the side you want to keep after filleting.
Parameter: face1 (BrepFace)
Parameter Summary: Second face to fillet from.
Parameter: uv1 (Point2d)
Parameter Summary: A parameter face1 at the side you want to keep after filleting.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.CreateFromBox(BoundingBox box)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep that matches a bounding box.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for creation.

Method: Rhino.Geometry.Brep.CreateFromBox(Box box)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep that matches an aligned box.
Parameter: box (Box)
Parameter Summary: Box to match.

Method: Rhino.Geometry.Brep.CreateFromBox(IEnumerable<Point3d> corners)
Return: Brep
Modifiers: public, static
Summary: Constructs new brep from 8 corner points.
Parameter: corners (IEnumerable<Point3d>)
Parameter Summary: 8 points defining the box corners arranged as the vN labels indicate.

Method: Rhino.Geometry.Brep.CreateFromCone(Cone cone, bool capBottom)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep representation of the cone with a single face for the cone, an edge along the cone seam, and vertices at the base and apex ends of this seam edge. The optional cap is a single face with one circular edge starting and ending at the base vertex.
Parameter: cone (Cone)
Parameter Summary: A cone value.
Parameter: capBottom (bool)
Parameter Summary: if True the base of the cone should be capped.

Method: Rhino.Geometry.Brep.CreateFromCornerPoints(Point3d corner1, Point3d corner2, Point3d corner3, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Makes a Brep with one face from three corner points.
Parameter: corner1 (Point3d)
Parameter Summary: A first corner.
Parameter: corner2 (Point3d)
Parameter Summary: A second corner.
Parameter: corner3 (Point3d)
Parameter Summary: A third corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length allowed before collapsing the side into a singularity.

Method: Rhino.Geometry.Brep.CreateFromCornerPoints(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Makes a Brep with one face from four corner points.
Parameter: corner1 (Point3d)
Parameter Summary: A first corner.
Parameter: corner2 (Point3d)
Parameter Summary: A second corner.
Parameter: corner3 (Point3d)
Parameter Summary: A third corner.
Parameter: corner4 (Point3d)
Parameter Summary: A fourth corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length allowed before collapsing the side into a singularity.

Method: Rhino.Geometry.Brep.CreateFromCylinder(Cylinder cylinder, bool capBottom, bool capTop)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: cylinder.IsFinite() must be true.
Parameter: capBottom (bool)
Parameter Summary: if True end at cylinder.m_height[0] should be capped.
Parameter: capTop (bool)
Parameter Summary: if True end at cylinder.m_height[1] should be capped.

Method: Rhino.Geometry.Brep.CreateFromJoinedEdges(Brep brep0, int edgeIndex0, Brep brep1, int edgeIndex1, double joinTolerance)
Return: Brep
Modifiers: public, static
Summary: Joins two naked edges, or edges that are coincident or close together, from two Breps.
Parameter: brep0 (Brep)
Parameter Summary: The first Brep.
Parameter: edgeIndex0 (int)
Parameter Summary: The edge index on the first Brep.
Parameter: brep1 (Brep)
Parameter Summary: The second Brep.
Parameter: edgeIndex1 (int)
Parameter Summary: The edge index on the second Brep.
Parameter: joinTolerance (double)
Parameter Summary: The join tolerance.

Method: Rhino.Geometry.Brep.CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, bool StartTangent, bool EndTangent, BrepTrim StartTrim, BrepTrim EndTrim, LoftType loftType, bool closed)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves, optionally matching start and end tangents of surfaces when first and/or last loft curves are surface edges
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point. "start" and "StartTangent" cannot both be true.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point. "end and "EndTangent" cannot both be true.
Parameter: StartTangent (bool)
Parameter Summary: If StartTangent is True and the first loft curve is a surface edge, the loft will match the tangent of the surface behind that edge.
Parameter: EndTangent (bool)
Parameter Summary: If EndTangent is True and the first loft curve is a surface edge, the loft will match the tangent of the surface behind that edge.
Parameter: StartTrim (BrepTrim)
Parameter Summary: BrepTrim from the surface edge where start tangent is to be matched
Parameter: EndTrim (BrepTrim)
Parameter Summary: BrepTrim from the surface edge where end tangent is to be matched
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.

Method: Rhino.Geometry.Brep.CreateFromLoft(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.

Method: Rhino.Geometry.Brep.CreateFromLoftRebuild(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed, int rebuildPointCount)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by rebuilding to a specified number of control points.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.
Parameter: rebuildPointCount (int)
Parameter Summary: A number of points to use while rebuilding the curves. 0 leaves turns this parameter off.

Method: Rhino.Geometry.Brep.CreateFromLoftRefit(IEnumerable<Curve> curves, Point3d start, Point3d end, LoftType loftType, bool closed, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by refitting to a specified tolerance.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves to loft through. This function will not perform any curve sorting. You must pass in curves in the order you want them lofted. This function will not adjust the directions of open curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves. This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to adjust the seam of closed curves.
Parameter: start (Point3d)
Parameter Summary: Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
Parameter: loftType (LoftType)
Parameter Summary: type of loft to perform.
Parameter: closed (bool)
Parameter Summary: True if the last curve in this loft should be connected back to the first one.
Parameter: refitTolerance (double)
Parameter Summary: A distance to use in refitting, or 0 if you want to turn this parameter off.

Method: Rhino.Geometry.Brep.CreateFromMesh(Mesh mesh, bool trimmedTriangles)
Return: Brep
Modifiers: public, static
Summary: Create a brep representation of a mesh
Parameter: mesh (Mesh)
Parameter Summary: 
Parameter: trimmedTriangles (bool)
Parameter Summary: if true, triangles in the mesh will be represented by trimmed planes in the brep. If false, triangles in the mesh will be represented by untrimmed singular bilinear NURBS surfaces in the brep.

Method: Rhino.Geometry.Brep.CreateFromOffsetFace(BrepFace face, double offsetDistance, double offsetTolerance, bool bothSides, bool createSolid)
Return: Brep
Modifiers: public, static
Summary: Offsets a face including trim information to create a new brep.
Parameter: face (BrepFace)
Parameter Summary: the face to offset.
Parameter: offsetDistance (double)
Parameter Summary: An offset distance.
Parameter: offsetTolerance (double)
Parameter Summary: Use 0.0 to make a loose offset. Otherwise, the document's absolute tolerance is usually sufficient.
Parameter: bothSides (bool)
Parameter Summary: When true, offset to both sides of the input face.
Parameter: createSolid (bool)
Parameter Summary: When true, make a solid object.

Method: Rhino.Geometry.Brep.CreateFromRevSurface(RevSurface surface, bool capStart, bool capEnd)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep form of a surface of revolution.
Parameter: surface (RevSurface)
Parameter Summary: The surface of revolution.
Parameter: capStart (bool)
Parameter Summary: if true, the start of the revolute is not on the axis of revolution, and the surface of revolution is closed, then a circular cap will be added to close of the hole at the start of the revolute.
Parameter: capEnd (bool)
Parameter Summary: if true, the end of the revolute is not on the axis of revolution, and the surface of revolution is closed, then a circular cap will be added to close of the hole at the end of the revolute.

Method: Rhino.Geometry.Brep.CreateFromSphere(Sphere sphere)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.

Method: Rhino.Geometry.Brep.CreateFromSurface(Surface surface)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep from a surface. The resulting Brep has an outer boundary made from four trims. The trims are ordered so that they run along the south, east, north, and then west side of the surface's parameter space.
Parameter: surface (Surface)
Parameter Summary: A surface to convert.

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a profile curve that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: General 2 rail sweep. If you are not producing the sweep results that you are after, then use the SweepTwoRail class with options to generate the swept geometry.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: General 2 rail sweep. If you are not producing the sweep results that you are after, then use the SweepTwoRail class with options to generate the swept geometry.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, Point3d start, Point3d end, bool closed, double tolerance, SweepRebuild rebuild, int rebuildPointCount, double refitTolerance, bool preserveHeight, bool autoAdjust)
Return: Brep[]
Modifiers: public, static
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines the surface edges.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: start (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.
Parameter: rebuild (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0
Parameter: preserveHeight (bool)
Parameter Summary: Removes the association between the height scaling from the width scaling
Parameter: autoAdjust (bool)
Parameter Summary: Set to True to have shape curves adjusted, sorted, and matched automatically. This will produce results comparable to Rhino's Sweep2 command. Set to False to not have shape curves adjusted, sorted, and matched automatically.

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, Point3d start, Point3d end, bool closed, double tolerance, SweepRebuild rebuild, int rebuildPointCount, double refitTolerance, bool preserveHeight)
Return: Brep[]
Modifiers: public, static
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines the surface edges.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: start (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: end (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.
Parameter: rebuild (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0
Parameter: preserveHeight (bool)
Parameter Summary: Removes the association between the height scaling from the width scaling

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through profile curves that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweep(Curve rail, IEnumerable<Curve> shapes, Point3d startPoint, Point3d endPoint, SweepFrame frameType, Vector3d roadlikeNormal, bool closed, SweepBlend blendType, SweepMiter miterType, double tolerance, SweepRebuild rebuildType, int rebuildPointCount, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: startPoint (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: endPoint (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: frameType (SweepFrame)
Parameter Summary: The frame type.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: The roadlike normal directoion. Use Vector3d.Unset if the frame type is not set to roadlike.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: blendType (SweepBlend)
Parameter Summary: The shape blending type.
Parameter: miterType (SweepMiter)
Parameter Summary: The mitering type.
Parameter: tolerance (double)
Parameter Summary: 
Parameter: rebuildType (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0

Method: Rhino.Geometry.Brep.CreateFromSweepInParts(Curve rail1, Curve rail2, IEnumerable<Curve> shapes, IEnumerable<Point2d> rail_params, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Makes a 2 rail sweep. Like CreateFromSweep but the result is split where parameterization along a rail changes abruptly.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves
Parameter: rail_params (IEnumerable<Point2d>)
Parameter Summary: Shape parameters
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, Curve shape, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a profile curve that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along
Parameter: shape (Curve)
Parameter Summary: Shape curve
Parameter: closed (bool)
Parameter Summary: Only matters if shape is closed
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, IEnumerable<Curve> shapes, bool closed, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: tolerance (double)
Parameter Summary: Tolerance for fitting surface and rails.

Method: Rhino.Geometry.Brep.CreateFromSweepSegmented(Curve rail, IEnumerable<Curve> shapes, Point3d startPoint, Point3d endPoint, SweepFrame frameType, Vector3d roadlikeNormal, bool closed, SweepBlend blendType, SweepMiter miterType, double tolerance, SweepRebuild rebuildType, int rebuildPointCount, double refitTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Sweep1 function that fits a surface through a series of profile curves that define the surface cross-sections and one curve that defines a surface edge. The Segmented version breaks the rail at curvature kinks and sweeps each piece separately, then put the results together into a Brep.
Parameter: rail (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: shapes (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: startPoint (Point3d)
Parameter Summary: Optional starting point of sweep. Use Point3d.Unset if you do not want to include a start point.
Parameter: endPoint (Point3d)
Parameter Summary: Optional ending point of sweep. Use Point3d.Unset if you do not want to include an end point.
Parameter: frameType (SweepFrame)
Parameter Summary: The frame type.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: The roadlike normal directoion. Use Vector3d.Unset if the frame type is not set to roadlike.
Parameter: closed (bool)
Parameter Summary: Only matters if shapes are closed.
Parameter: blendType (SweepBlend)
Parameter Summary: The shape blending type.
Parameter: miterType (SweepMiter)
Parameter Summary: The mitering type.
Parameter: tolerance (double)
Parameter Summary: 
Parameter: rebuildType (SweepRebuild)
Parameter Summary: The rebuild style.
Parameter: rebuildPointCount (int)
Parameter Summary: If rebuild == SweepRebuild.Rebuild, the number of points. Otherwise specify 0.
Parameter: refitTolerance (double)
Parameter Summary: If rebuild == SweepRebuild.Refit, the refit tolerance. Otherwise, specify 0.0

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrude(Curve curveToExtrude, double distance, Vector3d direction, Point3d basePoint, double draftAngleRadians, ExtrudeCornerType cornerType, double tolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Extrude a curve to a taper making a brep (potentially more than 1)
Parameter: curveToExtrude (Curve)
Parameter Summary: the curve to extrude
Parameter: distance (double)
Parameter Summary: the distance to extrude
Parameter: direction (Vector3d)
Parameter Summary: the direction of the extrusion
Parameter: basePoint (Point3d)
Parameter Summary: the base point of the extrusion
Parameter: draftAngleRadians (double)
Parameter Summary: angle of the extrusion
Parameter: cornerType (ExtrudeCornerType)
Parameter Summary: 
Parameter: tolerance (double)
Parameter Summary: tolerance to use for the extrusion
Parameter: angleToleranceRadians (double)
Parameter Summary: angle tolerance to use for the extrusion

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrude(Curve curveToExtrude, double distance, Vector3d direction, Point3d basePoint, double draftAngleRadians, ExtrudeCornerType cornerType)
Return: Brep[]
Modifiers: public, static
Summary: Extrude a curve to a taper making a brep (potentially more than 1)
Parameter: curveToExtrude (Curve)
Parameter Summary: the curve to extrude
Parameter: distance (double)
Parameter Summary: the distance to extrude
Parameter: direction (Vector3d)
Parameter Summary: the direction of the extrusion
Parameter: basePoint (Point3d)
Parameter Summary: the base point of the extrusion
Parameter: draftAngleRadians (double)
Parameter Summary: angle of the extrusion
Parameter: cornerType (ExtrudeCornerType)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreateFromTaperedExtrudeWithRef(Curve curve, Vector3d direction, double distance, double draftAngle, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates one or more Breps by extruding a curve a distance along an axis with draft angle.
Parameter: curve (Curve)
Parameter Summary: The curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: The extrusion direction.
Parameter: distance (double)
Parameter Summary: The extrusion distance.
Parameter: draftAngle (double)
Parameter Summary: The extrusion draft angle in radians.
Parameter: plane (Plane)
Parameter Summary: The end of the extrusion will be parallel to this plane, and "distance" from the plane's origin. The plane's origin is generally be a point on the curve. For planar curves, a natural choice for the plane's normal direction will be the normal direction of the curve's plane. In any case, plane.Normal = direction may make sense.
Parameter: tolerance (double)
Parameter Summary: The intersecting and trimming tolerance.

Method: Rhino.Geometry.Brep.CreateFromTorus(Torus torus)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a torus.
Parameter: torus (Torus)
Parameter Summary: The torus.

Method: Rhino.Geometry.Brep.CreateOffsetBrep(Brep brep, double distance, bool solid, bool extend, bool shrink, double tolerance, out Brep[] outBlends, out Brep[] outWalls)
Return: Brep[]
Modifiers: public, static
Summary: Offsets a Brep.
Parameter: brep (Brep)
Parameter Summary: The Brep to offset.
Parameter: distance (double)
Parameter Summary: The distance to offset. This is a signed distance value with respect to face normals and flipped faces.
Parameter: solid (bool)
Parameter Summary: If true, then the function makes a closed solid from the input and offset surfaces by lofting a ruled surface between all of the matching edges.
Parameter: extend (bool)
Parameter Summary: If true, then the function maintains the sharp corners when the original surfaces have sharps corner. If False, then the function creates fillets at sharp corners in the original surfaces.
Parameter: shrink (bool)
Parameter Summary: If true, then the function shrinks the underlying surfaces to their face's outer boundary loop.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.
Parameter: outBlends (Brep[])
Parameter Summary: The results of the calculation.
Parameter: outWalls (Brep[])
Parameter Summary: The results of the calculation.

Method: Rhino.Geometry.Brep.CreateOffsetBrep(Brep brep, double distance, bool solid, bool extend, double tolerance, out Brep[] outBlends, out Brep[] outWalls)
Return: Brep[]
Modifiers: public, static
Summary: Offsets a Brep.
Parameter: brep (Brep)
Parameter Summary: The Brep to offset.
Parameter: distance (double)
Parameter Summary: The distance to offset. This is a signed distance value with respect to face normals and flipped faces.
Parameter: solid (bool)
Parameter Summary: If true, then the function makes a closed solid from the input and offset surfaces by lofting a ruled surface between all of the matching edges.
Parameter: extend (bool)
Parameter Summary: If true, then the function maintains the sharp corners when the original surfaces have sharps corner. If False, then the function creates fillets at sharp corners in the original surfaces.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.
Parameter: outBlends (Brep[])
Parameter Summary: The results of the calculation.
Parameter: outWalls (Brep[])
Parameter Summary: The results of the calculation.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, int uSpans, int vSpans, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch.
This is the simple version of fit that uses a plane with u x v spans.     It makes a plane by fitting to the points from the input geometry to use as the starting surface.     The surface has the specified u and v span count. | Since: 5.0 | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A combination of <b>Curve</b> , brep trims,  <b>Point</b> , <b>PointCloud</b> or <b>Mesh</b> . Curves and trims are sampled to get points. Trims are sampled for points and normals. | Parameter: uSpans (int) | Parameter Summary: The number of spans in the U direction. | Parameter: vSpans (int) | Parameter Summary: The number of spans in the V direction. | Parameter: tolerance (double) | Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, Surface startingSurface, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch.
This is the simple version of fit that uses a specified starting surface. | Since: 5.0 | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: Combination of Curves, BrepTrims, Points, PointClouds or Meshes. Curves and trims are sampled to get points. Trims are sampled for points and normals. | Parameter: startingSurface (Surface) | Parameter Summary: A starting surface (can be null). | Parameter: tolerance (double) | Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePatch(IEnumerable<GeometryBase> geometry, Surface startingSurface, int uSpans, int vSpans, bool trim, bool tangency, double pointSpacing, double flexibility, double surfacePull, bool fixEdges, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a brep patch using all controls
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: A combination of <b>Curve</b> , brep trims,  <b>Point</b> , <b>PointCloud</b> or <b>Mesh</b> . Curves and trims are sampled to get points. Trims are sampled for points and normals.
Parameter: startingSurface (Surface)
Parameter Summary: A starting surface (can be null).
Parameter: uSpans (int)
Parameter Summary: Number of surface spans used when a plane is fit through points to start in the U direction.
Parameter: vSpans (int)
Parameter Summary: Number of surface spans used when a plane is fit through points to start in the U direction.
Parameter: trim (bool)
Parameter Summary: If true, try to find an outer loop from among the input curves and trim the result to that loop
Parameter: tangency (bool)
Parameter Summary: If true, try to find brep trims in the outer loop of curves and try to fit to the normal direction of the trim's surface at those locations.
Parameter: pointSpacing (double)
Parameter Summary: Basic distance between points sampled from input curves.
Parameter: flexibility (double)
Parameter Summary: Determines the behavior of the surface in areas where its not otherwise controlled by the input.  Lower numbers make the surface behave more like a stiff material; higher, less like a stiff material.  That is, each span is made to more closely match the spans adjacent to it if there is no input geometry mapping to that area of the surface when the flexibility value is low.  The scale is logarithmic. Numbers around 0.001 or 0.1 make the patch pretty stiff and numbers around 10 or 100 make the surface flexible.
Parameter: surfacePull (double)
Parameter Summary: Tends to keep the result surface where it was before the fit in areas where there is on influence from the input geometry
Parameter: fixEdges (bool)
Parameter Summary: Array of four elements. Flags to keep the edges of a starting (untrimmed) surface in place while fitting the interior of the surface.  Order of flags is left, bottom, right, top
Parameter: tolerance (double)
Parameter Summary: Tolerance used by input analysis functions for loop finding, trimming, etc.

Method: Rhino.Geometry.Brep.CreatePipe(Curve rail, double radius, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: radius (double)
Parameter Summary: The radius of the pipe.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreatePipe(Curve rail, IEnumerable<double> railRadiiParameters, IEnumerable<double> radii, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a single walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: railRadiiParameters (IEnumerable<double>)
Parameter Summary: One or more normalized curve parameters where changes in radius occur. Important: curve parameters must be normalized - ranging between 0.0 and 1.0. Use Interval.NormalizedParameterAt to calculate these.
Parameter: radii (IEnumerable<double>)
Parameter Summary: One or more radii - one at each normalized curve parameter in railRadiiParameters.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Curve inputLoop, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoop (Curve)
Parameter Summary: A curve that should form the boundaries of the surfaces or polysurfaces.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Curve inputLoop)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoop (Curve)
Parameter Summary: A curve that should form the boundaries of the surfaces or polysurfaces.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(IEnumerable<Curve> inputLoops, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoops (IEnumerable<Curve>)
Parameter Summary: Curve loops that delineate the planar boundaries.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(IEnumerable<Curve> inputLoops)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar breps as outlines by the loops.
Parameter: inputLoops (IEnumerable<Curve>)
Parameter Summary: Curve loops that delineate the planar boundaries.

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList inputLoops, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar Breps as outlines by the loops.
Parameter: inputLoops (Rhino.Collections.CurveList)
Parameter Summary: Curve loops that delineate the planar boundaries.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList inputLoops)
Return: Brep[]
Modifiers: public, static
Summary: Constructs a set of planar Breps as outlines by the loops.
Parameter: inputLoops (Rhino.Collections.CurveList)
Parameter Summary: Curve loops that delineate the planar boundaries.

Method: Rhino.Geometry.Brep.CreatePlanarDifference(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarDifference
Parameter: b0 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: b1 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for Difference operation.

Method: Rhino.Geometry.Brep.CreatePlanarIntersection(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarIntersection
Parameter: b0 (Brep)
Parameter Summary: The first brep to intersect.
Parameter: b1 (Brep)
Parameter Summary: The second brep to intersect.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersection operation.

Method: Rhino.Geometry.Brep.CreatePlanarUnion(Brep b0, Brep b1, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarUnion
Parameter: b0 (Brep)
Parameter Summary: The first brep to union.
Parameter: b1 (Brep)
Parameter Summary: The first brep to union.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreatePlanarUnion(IEnumerable<Brep> breps, Plane plane, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: CreatePlanarUnion
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The planar regions on which to perform the union operation.
Parameter: plane (Plane)
Parameter Summary: The plane in which all the input breps lie
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for union operation.

Method: Rhino.Geometry.Brep.CreateQuadSphere(Sphere sphere)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep definition of a quad sphere.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.

Method: Rhino.Geometry.Brep.CreateShell(Brep brep, IEnumerable<int> facesToRemove, double distance, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Creates a hollowed out shell from a solid Brep. Function only operates on simple, solid, manifold Breps.
Parameter: brep (Brep)
Parameter Summary: The solid Brep to shell.
Parameter: facesToRemove (IEnumerable<int>)
Parameter Summary: The indices of the Brep faces to remove. These surfaces are removed and the remainder is offset inward, using the outer parts of the removed surfaces to join the inner and outer parts.
Parameter: distance (double)
Parameter Summary: The distance, or thickness, for the shell. This is a signed distance value with respect to face normals and flipped faces.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance. When in doubt, use the document's absolute tolerance.

Method: Rhino.Geometry.Brep.CreateSolid(IEnumerable<Brep> breps, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Constructs closed polysurfaces from surfaces and polysurfaces that bound a region in space.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The intersecting surfaces and polysurfaces to automatically trim and join into closed polysurfaces.
Parameter: tolerance (double)
Parameter Summary: The trim and join tolerance. If set to RhinoMath.UnsetValue, Rhino's global absolute tolerance is used.

Method: Rhino.Geometry.Brep.CreateThickPipe(Curve rail, double radius0, double radius1, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a double-walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: radius0 (double)
Parameter Summary: The first radius of the pipe.
Parameter: radius1 (double)
Parameter Summary: The second radius of the pipe.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreateThickPipe(Curve rail, IEnumerable<double> railRadiiParameters, IEnumerable<double> radii0, IEnumerable<double> radii1, bool localBlending, PipeCapMode cap, bool fitRail, double absoluteTolerance, double angleToleranceRadians)
Return: Brep[]
Modifiers: public, static
Summary: Creates a double-walled pipe.
Parameter: rail (Curve)
Parameter Summary: The rail, or path, curve.
Parameter: railRadiiParameters (IEnumerable<double>)
Parameter Summary: One or more normalized curve parameters where changes in radius occur. Important: curve parameters must be normalized - ranging between 0.0 and 1.0. Use Interval.NormalizedParameterAt to calculate these.
Parameter: radii0 (IEnumerable<double>)
Parameter Summary: One or more radii for the first wall - one at each normalized curve parameter in railRadiiParameters.
Parameter: radii1 (IEnumerable<double>)
Parameter Summary: One or more radii for the second wall - one at each normalized curve parameter in railRadiiParameters.
Parameter: localBlending (bool)
Parameter Summary: The shape blending. If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied. If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied.
Parameter: cap (PipeCapMode)
Parameter Summary: The end cap mode.
Parameter: fitRail (bool)
Parameter Summary: If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created; otherwise the result is a Brep with joined surfaces created from the polycurve segments.
Parameter: absoluteTolerance (double)
Parameter Summary: The sweeping and fitting tolerance. When in doubt, use the document's absolute tolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance. When in doubt, use the document's angle tolerance in radians.

Method: Rhino.Geometry.Brep.CreateTrimmedPlane(Plane plane, Curve curve)
Return: Brep
Modifiers: public, static
Summary: Create a Brep trimmed plane.
Parameter: plane (Plane)
Parameter Summary: Plane that will be trimmed.
Parameter: curve (Curve)
Parameter Summary: A simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.

Method: Rhino.Geometry.Brep.CreateTrimmedPlane(Plane plane, IEnumerable<Curve> curves)
Return: Brep
Modifiers: public, static
Summary: Create a Brep trimmed plane.
Parameter: plane (Plane)
Parameter Summary: Plane that will be trimmed.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list of curves that form a simple (no self intersections) closed curve that defines the outer boundary of the trimmed plane.

Method: Rhino.Geometry.Brep.CreateTrimmedSurface(BrepFace trimSource, Surface surfaceSource, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep using the trimming information of a brep face and a surface. Surface must be roughly the same shape and in the same location as the trimming brep face.
Parameter: trimSource (BrepFace)
Parameter Summary: BrepFace which contains trimmingSource brep.
Parameter: surfaceSource (Surface)
Parameter Summary: Surface that trims of BrepFace will be applied to.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Brep.CreateTrimmedSurface(BrepFace trimSource, Surface surfaceSource)
Return: Brep
Modifiers: public, static
Summary: Constructs a Brep using the trimming information of a brep face and a surface. Surface must be roughly the same shape and in the same location as the trimming brep face.
Parameter: trimSource (BrepFace)
Parameter Summary: BrepFace which contains trimmingSource brep.
Parameter: surfaceSource (Surface)
Parameter Summary: Surface that trims of BrepFace will be applied to.

Method: Rhino.Geometry.Brep.CutUpSurface(Surface surface, IEnumerable<Curve> curves, bool flip, double fitTolerance, double keepTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Splits, or cuts up, a surface. Designed to split the underlying surface of a Brep face with edge curves.
Parameter: surface (Surface)
Parameter Summary: The surface to cut up.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The edge curves with consistent orientation. The curves should lie on the surface.
Parameter: flip (bool)
Parameter Summary: If true, the input curves are oriented clockwise.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance.
Parameter: keepTolerance (double)
Parameter Summary: Used to decide which face to keep. For best results, should be at least 2 * fitTolerance.

Method: Rhino.Geometry.Brep.CutUpSurface(Surface surface, IEnumerable<Curve> curves, bool useEdgeCurves, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Takes a surface and a set of all 3D curves that define a single trimmed surface, and splits the surface with the curves, keeping the piece that uses all of the curves.
Parameter: surface (Surface)
Parameter Summary: The surface.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The curves.
Parameter: useEdgeCurves (bool)
Parameter Summary: The 2D trimming curves are made by pulling back the 3D curves using the fitting tolerance. If useEdgeCurves is true, the input 3D curves will be used as the edge curves in the result. Otherwise, the edges will come from pushing up the 2D pullbacks.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.ExtendBrepFacesToConnect(BrepFace Face0, int edgeIndex0, BrepFace Face1, int edgeIndex1, double tol, double angleTol, out Brep outBrep0, out Brep outBrep1)
Return: bool
Modifiers: public, static
Summary: Extends Faces to meet and trims the faces to each other. If input faces intersect without extending, the selection point indicates the side to keep
Parameter: Face0 (BrepFace)
Parameter Summary: [in] first face to connect
Parameter: edgeIndex0 (int)
Parameter Summary: [in] edge to extend.
Parameter: Face1 (BrepFace)
Parameter Summary: [in] second surface
Parameter: edgeIndex1 (int)
Parameter Summary: [in] edge to extend.
Parameter: tol (double)
Parameter Summary: [in] tolerance used for intersecting faces and simplifing extension curve
Parameter: angleTol (double)
Parameter Summary: [in] angle tolerance in radians used for simplifying extendsion curve
Parameter: outBrep0 (Brep)
Parameter Summary: [out] first face extended and trimmed to connect with the second face
Parameter: outBrep1 (Brep)
Parameter Summary: [out] second face extended and trimmed to connect with the first face

Method: Rhino.Geometry.Brep.ExtendBrepFacesToConnect(BrepFace Face0, Point3d f0_sel_pt, BrepFace Face1, Point3d f1_sel_pt, double tol, double angleTol, out Brep outBrep0, out Brep outBrep1)
Return: bool
Modifiers: public, static
Summary: Extends Faces to meet and trims the faces to each other. If input faces intersect without extending, the selection point indicates the side to keep
Parameter: Face0 (BrepFace)
Parameter Summary: [in] first face to connect
Parameter: f0_sel_pt (Point3d)
Parameter Summary: selection point on first face near the edge to extend.
Parameter: Face1 (BrepFace)
Parameter Summary: [in] second surface
Parameter: f1_sel_pt (Point3d)
Parameter Summary: selection point on second face near the edge to extend.
Parameter: tol (double)
Parameter Summary: [in] tolerance used for intersecting faces and simplifing extension curve
Parameter: angleTol (double)
Parameter Summary: [in] angle tolerance in radians used for simplifying extendsion curve
Parameter: outBrep0 (Brep)
Parameter Summary: [out] first face extended and trimmed to connect with the second face
Parameter: outBrep1 (Brep)
Parameter Summary: [out] second face extended and trimmed to connect with the first face

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance, double angleTolerance, out List<int[]> indexMap)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges. When in doubt, use the document's model absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, used for merging edges. When in doubt, use the document's model angle tolerance.
Parameter: indexMap (List<int[]>)
Parameter Summary: List of integer arrays, one for each joined result, containing all input Brep indices that went into making each result. Note, this can be null.

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance, double angleTolerance)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges. When in doubt, use the document's model absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, used for merging edges. When in doubt, use the document's model angle tolerance.

Method: Rhino.Geometry.Brep.JoinBreps(IEnumerable<Brep> brepsToJoin, double tolerance)
Return: Brep[]
Modifiers: public, static
Summary: Joins the breps in the input array at any overlapping edges to form as few as possible resulting breps. There may be more than one brep in the result array.
Parameter: brepsToJoin (IEnumerable<Brep>)
Parameter Summary: A list, an array or any enumerable set of breps to join.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges.

Method: Rhino.Geometry.Brep.MergeBreps(IEnumerable<Brep> brepsToMerge, double tolerance)
Return: Brep
Modifiers: public, static
Summary: Combines two or more breps into one. A merge is like a boolean union that keeps the inside pieces. This function creates non-manifold Breps which in general are unusual in Rhino. You may want to consider using JoinBreps or CreateBooleanUnion functions instead.
Parameter: brepsToMerge (IEnumerable<Brep>)
Parameter Summary: must contain more than one Brep.
Parameter: tolerance (double)
Parameter Summary: the tolerance to use when merging.

Method: Rhino.Geometry.Brep.MergeSurfaces(Brep brep0, Brep brep1, double tolerance, double angleToleranceRadians, Point2d point0, Point2d point1, double roundness, bool smooth)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges. Both surfaces must be untrimmed and share an edge.
Parameter: brep0 (Brep)
Parameter Summary: The first single-face Brep to merge.
Parameter: brep1 (Brep)
Parameter Summary: The second single-face Brep to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.
Parameter: point0 (Point2d)
Parameter Summary: 2D pick point on the first single-face Brep. The value can be unset.
Parameter: point1 (Point2d)
Parameter Summary: 2D pick point on the second single-face Brep. The value can be unset.
Parameter: roundness (double)
Parameter Summary: Defines the roundness of the merge. Acceptable values are between 0.0 (sharp) and 1.0 (smooth).
Parameter: smooth (bool)
Parameter Summary: The surface will be smooth. This makes the surface behave better for control point editing, but may alter the shape of both surfaces.

Method: Rhino.Geometry.Brep.MergeSurfaces(Brep brep0, Brep brep1, double tolerance, double angleToleranceRadians)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges. Both surfaces must be untrimmed and share an edge.
Parameter: brep0 (Brep)
Parameter Summary: The first single-face Brep to merge.
Parameter: brep1 (Brep)
Parameter Summary: The second single-face Brep to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.

Method: Rhino.Geometry.Brep.MergeSurfaces(Surface surface0, Surface surface1, double tolerance, double angleToleranceRadians)
Return: Brep
Modifiers: public, static
Summary: Merges two surfaces into one surface at untrimmed edges.
Parameter: surface0 (Surface)
Parameter Summary: The first surface to merge.
Parameter: surface1 (Surface)
Parameter Summary: The second surface to merge.
Parameter: tolerance (double)
Parameter Summary: Surface edges must be within this tolerance for the two surfaces to merge.
Parameter: angleToleranceRadians (double)
Parameter Summary: Edge must be within this angle tolerance in order for contiguous edges to be combined into a single edge.

Method: Rhino.Geometry.Brep.TryConvertBrep(GeometryBase geometry)
Return: Brep
Modifiers: public, static
Summary: Attempts to convert a generic Geometry object into a Brep.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry to convert, not all types of GeometryBase can be represented by BReps.

Method: Rhino.Geometry.Brep.AddEdgeCurve(Curve curve)
Return: int
Modifiers: public
Summary: Add a 3d curve used by the brep edges

Method: Rhino.Geometry.Brep.AddSurface(Surface surface)
Return: int
Modifiers: public
Summary: Adds a 3D surface used by BrepFace.
Parameter: surface (Surface)
Parameter Summary: A copy of the surface is added to this brep.

Method: Rhino.Geometry.Brep.AddTrimCurve(Curve curve)
Return: int
Modifiers: public
Summary: Add a 2d curve used by the brep trims

Method: Rhino.Geometry.Brep.Append(Brep other)
Return: void
Modifiers: public
Summary: Appends a copy of another brep to this and updates indices of appended brep parts.  Duplicates are not removed

Method: Rhino.Geometry.Brep.CapPlanarHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Returns a new Brep that is equivalent to this Brep with all planar holes capped.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for capping.

Method: Rhino.Geometry.Brep.ClosestPoint(Point3d testPoint, out Point3d closestPoint, out ComponentIndex ci, out double s, out double t, double maximumDistance, out Vector3d normal)
Return: bool
Modifiers: public
Summary: Finds a point on the Brep that is closest to testPoint. The method searches all Brep faces looking for the one closest to testPoint. When found, if the closest point falls on the inactive region of the face, then the method finds the face's edge that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: Base point to project to surface.
Parameter: closestPoint (Point3d)
Parameter Summary: Location of the closest Brep point.
Parameter: ci (ComponentIndex)
Parameter Summary: Component index of the Brep component that contains the closest point. Possible component index types are ComponentIndexType.BrepEdge and ComponentIndexType.BrepFace.
Parameter: s (double)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepEdge, then s is the parameter of the closest edge point.
Parameter: t (double)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepFace, then (s,t) is the parameter of the closest face point.
Parameter: maximumDistance (double)
Parameter Summary: If maximumDistance > 0, then only points whose distance is <= maximumDistance will be returned. Using a positive value of maximumDistance can substantially speed up the search.
Parameter: normal (Vector3d)
Parameter Summary: If ci.ComponentIndexType == ComponentIndexType.BrepEdge, then this is the tangent to the edge at s. If ci.ComponentIndexType == ComponentIndexType.BrepFace, then this is the normal to the face at (s,t).

Method: Rhino.Geometry.Brep.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Finds a point on the brep that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: Base point to project to brep.

Method: Rhino.Geometry.Brep.Compact()
Return: void
Modifiers: public
Summary: Deletes any unreferenced objects from arrays, re-indexes as needed, and shrinks arrays to minimum required size. Uses CUllUnused* members to delete any unreferenced objects from arrays.

Method: Rhino.Geometry.Brep.CullUnused2dCurves()
Return: bool
Modifiers: public
Summary: Culls 3d curves not referenced by an edge.

Method: Rhino.Geometry.Brep.CullUnused3dCurves()
Return: bool
Modifiers: public
Summary: Culls 2d curves not referenced by a trim.

Method: Rhino.Geometry.Brep.CullUnusedEdges()
Return: bool
Modifiers: public
Summary: Culls edges with m_edge_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedFaces()
Return: bool
Modifiers: public
Summary: Culls faces with m_face_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedLoops()
Return: bool
Modifiers: public
Summary: Culls loops with m_loop_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedSurfaces()
Return: bool
Modifiers: public
Summary: Culls surfaces not referenced by a face.

Method: Rhino.Geometry.Brep.CullUnusedTrims()
Return: bool
Modifiers: public
Summary: Culls trims with m_trim_index == -1.

Method: Rhino.Geometry.Brep.CullUnusedVertices()
Return: bool
Modifiers: public
Summary: Culls vertices with m_vertex_index == -1.

Method: Rhino.Geometry.Brep.DestroyRegionTopology()
Return: void
Modifiers: public
Summary: Destroys a Brep's region topology information.

Method: Rhino.Geometry.Brep.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Copies this brep.

Method: Rhino.Geometry.Brep.DuplicateBrep()
Return: Brep
Modifiers: public
Summary: Same as <b>Duplicate()</b> , but already performs a cast to a brep.
This cast always succeeds. | Since: 5.0

Method: Rhino.Geometry.Brep.DuplicateEdgeCurves()
Return: Curve[]
Modifiers: public
Summary: Duplicate all the edges of this Brep.

Method: Rhino.Geometry.Brep.DuplicateEdgeCurves(bool nakedOnly)
Return: Curve[]
Modifiers: public
Summary: Duplicate edges of this Brep.
Parameter: nakedOnly (bool)
Parameter Summary: If true, then only the "naked" edges are duplicated. If false, then all edges are duplicated.

Method: Rhino.Geometry.Brep.DuplicateNakedEdgeCurves(bool nakedOuter, bool nakedInner)
Return: Curve[]
Modifiers: public
Summary: Duplicate naked edges of this Brep.
Parameter: nakedOuter (bool)
Parameter Summary: Return naked edges that are part of an outer loop.
Parameter: nakedInner (bool)
Parameter Summary: Return naked edges that are part of an inner loop.

Method: Rhino.Geometry.Brep.DuplicateSubBrep(IEnumerable<int> faceIndices)
Return: Brep
Modifiers: public
Summary: Copy a subset of this Brep into another Brep.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: array of face indices in this brep to copy. (If any values in faceIndices are out of range or if faceIndices contains duplicates, this function will return null.)

Method: Rhino.Geometry.Brep.DuplicateVertices()
Return: Point3d[]
Modifiers: public
Summary: Duplicate all the corner vertices of this Brep.

Method: Rhino.Geometry.Brep.FindCoincidentBrepComponents(Point3d point, double tolerance, out int faces, out int edges, out int vertices)
Return: void
Modifiers: public
Summary: Find the indices of all brep faces, edges and vertices that are within tolerance of a test-point.
Parameter: point (Point3d)
Parameter Summary: Test point.
Parameter: tolerance (double)
Parameter Summary: Coincidence tolerance.
Parameter: faces (int)
Parameter Summary: Array of BrepFace indices.
Parameter: edges (int)
Parameter Summary: Array of BrepEdge indices.
Parameter: vertices (int)
Parameter Summary: Array of BrepVertex indices.

Method: Rhino.Geometry.Brep.Flip()
Return: void
Modifiers: public
Summary: Reverses entire brep orientation of all faces.

Method: Rhino.Geometry.Brep.GetArea()
Return: double
Modifiers: public
Summary: Compute the Area of the Brep. If you want proper Area data with moments and error information, use the AreaMassProperties class.

Method: Rhino.Geometry.Brep.GetArea(double relativeTolerance, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Compute the Area of the Brep. If you want proper Area data with moments and error information, use the AreaMassProperties class.
Parameter: relativeTolerance (double)
Parameter Summary: Relative tolerance to use for area calculation.
Parameter: absoluteTolerance (double)
Parameter Summary: Absolute tolerance to use for area calculation.

Method: Rhino.Geometry.Brep.GetConnectedComponents()
Return: Brep[]
Modifiers: public
Summary: If this Brep has two or more connected components, then duplicates of the connected components are returned.

Method: Rhino.Geometry.Brep.GetPointInside(double tolerance, out Point3d point)
Return: bool
Modifiers: public
Summary: Finds a point inside of a solid Brep.
Parameter: tolerance (double)
Parameter Summary: Used for intersecting rays and is not necessarily related to the distance from the brep to the found point. When in doubt, use the document's model absolute tolerance.
Parameter: point (Point3d)
Parameter Summary: A point inside the solid Brep.

Method: Rhino.Geometry.Brep.GetRegions()
Return: BrepRegion[]
Modifiers: public
Summary: Gets an array containing all regions in this brep.

Method: Rhino.Geometry.Brep.GetTangentConnectedComponents(double angleTolerance, bool includeMeshes)
Return: Brep[]
Modifiers: public
Summary: If this Brep has two or more components connected by tangent edges, then duplicates of the connected components are returned.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance, in radians, used to determine tangent edges.
Parameter: includeMeshes (bool)
Parameter Summary: If true, any cached meshes on this Brep are copied to the returned Breps.

Method: Rhino.Geometry.Brep.GetVolume()
Return: double
Modifiers: public
Summary: Compute the Volume of the Brep. If you want proper Volume data with moments and error information, use the VolumeMassProperties class.

Method: Rhino.Geometry.Brep.GetVolume(double relativeTolerance, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Compute the Volume of the Brep. If you want proper Volume data with moments and error information, use the VolumeMassProperties class.
Parameter: relativeTolerance (double)
Parameter Summary: Relative tolerance to use for area calculation.
Parameter: absoluteTolerance (double)
Parameter Summary: Absolute tolerance to use for area calculation.

Method: Rhino.Geometry.Brep.GetWireframe(int density)
Return: Curve[]
Modifiers: public
Summary: Constructs all the Wireframe curves for this Brep.
Parameter: density (int)
Parameter Summary: Wireframe density. Valid values range between -1 and 99.

Method: Rhino.Geometry.Brep.InsetFaces(IEnumerable<int> faceIndices, double distance, bool loose, bool ignoreSeams, bool creaseCorners, double tolerance, double angleTolerance)
Return: Brep
Modifiers: public
Summary: Individually insets faces of a brep by offsetting the faces outer edges inward and inner edges out then splitting the face with the offset curves.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: the indices of the faces to inset
Parameter: distance (double)
Parameter Summary: The distance to offset along the face
Parameter: loose (bool)
Parameter Summary: If true, offset by moving edit points otherwise offset within tolerance.
Parameter: ignoreSeams (bool)
Parameter Summary: If true, the seam edges are not offset and adjacent edges are extended to meet the seam. Otherwise offset normally.
Parameter: creaseCorners (bool)
Parameter Summary: If true, splitting curves will be made between the creases on edge curves and creases on the inset curves.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance for the offset. When in doubt, use the document's absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians for identifying creases when creasing corners.  When in doubt, use the document's angle tolerance.

Method: Rhino.Geometry.Brep.IsBox()
Return: bool
Modifiers: public
Summary: Verifies a Brep is in the form of a solid box.

Method: Rhino.Geometry.Brep.IsBox(double tolerance)
Return: bool
Modifiers: public
Summary: Verifies a Brep is in the form of a solid box.
Parameter: tolerance (double)
Parameter Summary: The tolerance used to determine if faces are planar and to compare face normals.

Method: Rhino.Geometry.Brep.IsDuplicate(Brep other, double tolerance)
Return: bool
Modifiers: public
Summary: See if this and other are same brep geometry.
Parameter: other (Brep)
Parameter Summary: other brep.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when comparing control points.

Method: Rhino.Geometry.Brep.IsPointInside(Point3d point, double tolerance, bool strictlyIn)
Return: bool
Modifiers: public
Summary: Determines if point is inside a Brep.  This question only makes sense when the brep is a closed and manifold.  This function does not check for closed or manifold, so result is not valid in those cases.  Intersects a line through point with brep, finds the intersection point Q closest to point, and looks at face normal at Q.  If the point Q is on an edge or the intersection is not transverse at Q, then another line is used.
Parameter: point (Point3d)
Parameter Summary: 3d point to test.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance used for intersection and determining strict inclusion. A good default is RhinoMath.SqrtEpsilon.
Parameter: strictlyIn (bool)
Parameter Summary: if true, point is in if inside brep by at least tolerance. if false, point is in if truly in or within tolerance of boundary.

Method: Rhino.Geometry.Brep.IsValidGeometry(out string log)
Return: bool
Modifiers: public
Summary: Expert user function that tests the brep to see if its geometry information is valid. The value of brep.IsValidTopology() must be True before brep.IsValidGeometry() can be safely called.
Parameter: log (string)
Parameter Summary: If the brep geometry is not valid, then a brief description of the problem in English is assigned to this out parameter. The information is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool. Otherwise, <b>string.Empty</b> .

Method: Rhino.Geometry.Brep.IsValidTolerancesAndFlags(out string log)
Return: bool
Modifiers: public
Summary: Expert user function that tests the brep to see if its tolerances and flags are valid.  The values of brep.IsValidTopology() and brep.IsValidGeometry() must be True before brep.IsValidTolerancesAndFlags() can be safely called.
Parameter: log (string)
Parameter Summary: If the brep tolerance or flags are not valid, then a brief description of the problem in English is assigned to this out parameter. The information is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool. Otherwise, <b>string.Empty</b> .

Method: Rhino.Geometry.Brep.IsValidTopology(out string log)
Return: bool
Modifiers: public
Summary: Tests the brep to see if its topology information is valid.
Parameter: log (string)
Parameter Summary: If the brep topology is not valid, then a brief English description of the problem is appended to the log.  The information appended to log is suitable for low-level debugging purposes by programmers and is not intended to be useful as a high level user interface tool.

Method: Rhino.Geometry.Brep.Join(Brep otherBrep, double tolerance, bool compact)
Return: bool
Modifiers: public
Summary: If any edges of this brep overlap edges of otherBrep, merge a copy of otherBrep into this brep joining all edges that overlap within tolerance.
Parameter: otherBrep (Brep)
Parameter Summary: Brep to be added to this brep.
Parameter: tolerance (double)
Parameter Summary: 3d distance tolerance for detecting overlapping edges.
Parameter: compact (bool)
Parameter Summary: if true, set brep flags and tolerances, remove unused faces and edges.

Method: Rhino.Geometry.Brep.JoinEdges(int edgeIndex0, int edgeIndex1, double joinTolerance, bool compact)
Return: bool
Modifiers: public
Summary: Joins two naked edges, or edges that are coincident or close together.
Parameter: edgeIndex0 (int)
Parameter Summary: The first edge index.
Parameter: edgeIndex1 (int)
Parameter Summary: The second edge index.
Parameter: joinTolerance (double)
Parameter Summary: The join tolerance.
Parameter: compact (bool)
Parameter Summary: If joining more than one edge pair and want the edge indices of subsequent pairs to remain valid, set to false. But then call Brep.Compact() on the final result.

Method: Rhino.Geometry.Brep.JoinNakedEdges(double tolerance)
Return: int
Modifiers: public
Summary: Joins naked edge pairs within the same brep that overlap within tolerance.
Parameter: tolerance (double)
Parameter Summary: The tolerance value.

Method: Rhino.Geometry.Brep.MakeValidForV2()
Return: bool
Modifiers: public
Summary: No support is available for this function.
Expert user function that converts all geometry in Brep to NURB form. | Since: 6.0

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(int faceIndex, double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges coplanar faces adjacent to Brep face into a single face.
Parameter: faceIndex (int)
Parameter Summary: The index of the Brep face to search.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.MergeCoplanarFaces(int faceIndex0, int faceIndex1, double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges two coplanar, adjacent Brep faces into a single face.
Parameter: faceIndex0 (int)
Parameter Summary: The index of the first Brep face.
Parameter: faceIndex1 (int)
Parameter Summary: The index of the second Brep face.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Brep.RebuildTrimsForV2(BrepFace face, NurbsSurface nurbsSurface)
Return: void
Modifiers: public
Summary: No support is available for this function.
Expert user function used by MakeValidForV2 to convert trim     curves from one surface to its NURBS form. After calling this function,     you need to change the surface of the face to a NurbsSurface. | Since: 5.0 | Parameter: face (BrepFace) | Parameter Summary: Face whose underlying surface has a parameterization that is different from its NURBS form. | Parameter: nurbsSurface (NurbsSurface) | Parameter Summary: NURBS form of the face's underlying surface.

Method: Rhino.Geometry.Brep.RemoveFins()
Return: bool
Modifiers: public
Summary: Recursively removes any Brep face with a naked edge. This function is only useful for non-manifold Breps.

Method: Rhino.Geometry.Brep.RemoveHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Remove all inner loops, or holes, in a Brep.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.RemoveHoles(IEnumerable<ComponentIndex> loops, double tolerance)
Return: Brep
Modifiers: public
Summary: Removes inner loops, or holes, in a Brep.
Parameter: loops (IEnumerable<ComponentIndex>)
Parameter Summary: A list of BrepLoop component indexes, where BrepLoop.LoopType == Rhino.Geometry.BrepLoopType.Inner.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.Repair(double tolerance)
Return: bool
Modifiers: public
Summary: Fills in missing or fixes incorrect component information from a Brep. Useful when reading Brep information from other file formats that do not provide as complete of a Brep definition as required by Rhino.
Parameter: tolerance (double)
Parameter Summary: The repair tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags()
Return: void
Modifiers: public
Summary: Set tolerances and flags in a Brep.

Method: Rhino.Geometry.Brep.SetTolerancesBoxesAndFlags(bool bLazy, bool bSetVertexTolerances, bool bSetEdgeTolerances, bool bSetTrimTolerances, bool bSetTrimIsoFlags, bool bSetTrimTypeFlags, bool bSetLoopTypeFlags, bool bSetTrimBoxes)
Return: void
Modifiers: public
Summary: Set tolerances and flags in a Brep.
Parameter: bLazy (bool)
Parameter Summary: If true, only flags and tolerances that are not set will be calculated.
Parameter: bSetVertexTolerances (bool)
Parameter Summary: Set True to compute BrepVertex tolerances.
Parameter: bSetEdgeTolerances (bool)
Parameter Summary: Set True to compute BrepEdge tolerances.
Parameter: bSetTrimTolerances (bool)
Parameter Summary: Set True to compute BrepTrim tolerances.
Parameter: bSetTrimIsoFlags (bool)
Parameter Summary: Set True to compute BrepTrim.IsoStatus values.
Parameter: bSetTrimTypeFlags (bool)
Parameter Summary: Set True to compute BrepTrim.TrimType values.
Parameter: bSetLoopTypeFlags (bool)
Parameter Summary: Set True to compute BrepLoop.BrepLoopType values.
Parameter: bSetTrimBoxes (bool)
Parameter Summary: Set True to compute BrepTrim bounding boxes.

Method: Rhino.Geometry.Brep.SetTrimIsoFlags()
Return: void
Modifiers: public
Summary: This function can be used to set the BrepTrim::m_iso flag. It is intended to be used when creating a Brep from a definition that does not include compatible parameter space type information.

Method: Rhino.Geometry.Brep.SetVertices()
Return: void
Modifiers: public
Summary: This function can be used to compute vertex information for a b-rep when everything but the Vertices array is properly filled in. It is intended to be used when creating a Brep from a definition that does not include explicit vertex information.

Method: Rhino.Geometry.Brep.Split(Brep cutter, double intersectionTolerance, out bool toleranceWasRaised)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a Brep as a cutter.
Parameter: cutter (Brep)
Parameter Summary: The Brep to use as a cutter.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.
Parameter: toleranceWasRaised (bool)
Parameter Summary: Set to True if the split failed at intersectionTolerance but succeeded when the tolerance was increased to twice intersectionTolerance.

Method: Rhino.Geometry.Brep.Split(Brep cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a Brep as a cutter.
Parameter: cutter (Brep)
Parameter Summary: The Brep to use as a cutter.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<Brep> cutters, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using Breps as cutters.
Parameter: cutters (IEnumerable<Brep>)
Parameter Summary: One or more Breps to use as cutters.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<Curve> cutters, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using curves, at least partially on the Brep, as cutters.
Parameter: cutters (IEnumerable<Curve>)
Parameter Summary: The splitting curves. Only the portion of the curve on the Brep surface will be used for cutting.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Split(IEnumerable<GeometryBase> cutters, Vector3d normal, bool planView, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Splits a Brep into pieces using a combination of curves, to be extruded, and Breps as cutters.
Parameter: cutters (IEnumerable<GeometryBase>)
Parameter Summary: The curves, surfaces, faces and Breps to be used as cutters. Any other geometry is ignored.
Parameter: normal (Vector3d)
Parameter Summary: A construction plane normal, used in deciding how to extrude a curve into a cutter.
Parameter: planView (bool)
Parameter Summary: Set True if the assume view is a plan, or parallel projection, view.
Parameter: intersectionTolerance (double)
Parameter Summary: The tolerance with which to compute intersections.

Method: Rhino.Geometry.Brep.Standardize()
Return: void
Modifiers: public
Summary: Standardizes all trims, edges, and faces in the brep. After standardizing, there may be unused curves and surfaces in the brep.  Call Brep.Compact to remove these unused curves and surfaces.

Method: Rhino.Geometry.Brep.TransformComponent(IEnumerable<ComponentIndex> components, Transform xform, double tolerance, double timeLimit, bool useMultipleThreads)
Return: bool
Modifiers: public
Summary: Transform an array of Brep components, bend neighbors to match, and leave the rest fixed.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: The Brep components to transform.
Parameter: xform (Transform)
Parameter Summary: The transformation to apply.
Parameter: tolerance (double)
Parameter Summary: The desired fitting tolerance to use when bending faces that share edges with both fixed and transformed components.
Parameter: timeLimit (double)
Parameter Summary: If the deformation is extreme, it can take a long time to calculate the result. If time_limit > 0, then the value specifies the maximum amount of time in seconds you want to spend before giving up.
Parameter: useMultipleThreads (bool)
Parameter Summary: True if multiple threads can be used.

Method: Rhino.Geometry.Brep.Trim(Brep cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Trims a brep with an oriented cutter. The parts of the brep that lie inside (opposite the normal) of the cutter are retained while the parts to the outside (in the direction of the normal) are discarded.  If the Cutter is closed, then a connected component of the Brep that does not intersect the cutter is kept if and only if it is contained in the inside of cutter. That is the region bounded by cutter opposite from the normal of cutter, If cutter is not closed all these components are kept.
Parameter: cutter (Brep)
Parameter Summary: A cutting brep.
Parameter: intersectionTolerance (double)
Parameter Summary: A tolerance value with which to compute intersections.

Method: Rhino.Geometry.Brep.Trim(Plane cutter, double intersectionTolerance)
Return: Brep[]
Modifiers: public
Summary: Trims a Brep with an oriented cutter.  The parts of Brep that lie inside (opposite the normal) of the cutter are retained while the parts to the outside ( in the direction of the normal ) are discarded. A connected component of Brep that does not intersect the cutter is kept if and only if it is contained in the inside of Cutter.  That is the region bounded by cutter opposite from the normal of cutter, or in the case of a Plane cutter the half space opposite from the plane normal.
Parameter: cutter (Plane)
Parameter Summary: A cutting plane.
Parameter: intersectionTolerance (double)
Parameter Summary: A tolerance value with which to compute intersections.

Method: Rhino.Geometry.Brep.UnjoinEdges(IEnumerable<int> edgesToUnjoin)
Return: Brep[]
Modifiers: public
Summary: Un-joins, or separates, edges within the Brep. Note, seams in closed surfaces will not separate.
Parameter: edgesToUnjoin (IEnumerable<int>)
Parameter Summary: The indices of the Brep edges to un-join.

Class: Rhino.Geometry.BrepEdge
Summary: Represents a single edge curve in a Brep object.

Property: Rhino.Geometry.BrepEdge.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this edge.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeCurve
Return: Curve
Modifiers: public
Summary: Get the brep.Curves3D[] 3d curve geometry used by this edge or null.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeCurveIndex
Return: int
Modifiers: public
Summary: Get the brep.Curves3D[] index of the 3d curve geometry used by this edge or -1.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EdgeIndex
Return: int
Modifiers: public
Summary: Gets the index of this edge in the Brep.Edges collection.
Accessors: get

Property: Rhino.Geometry.BrepEdge.EndVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at end of edge
Accessors: get

Property: Rhino.Geometry.BrepEdge.ProxyBrepSubDEdgeId
Return: uint
Modifiers: public
Summary: If this edge is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD edge is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepEdge.StartVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at start of edge
Accessors: get

Property: Rhino.Geometry.BrepEdge.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets the accuracy of the edge curve (>=0.0 or RhinoMath.UnsetValue) A value of UnsetValue indicates that the tolerance should be computed.  The maximum distance from the edge's 3d curve to any surface of a face that has this edge as a portion of its boundary must be <= this tolerance.
Accessors: get set

Property: Rhino.Geometry.BrepEdge.TrimCount
Return: int
Modifiers: public
Summary: Gets the number of trim-curves that use this edge.
Accessors: get

Property: Rhino.Geometry.BrepEdge.Valence
Return: EdgeAdjacency
Modifiers: public
Summary: Gets the topological valency of this edge. The topological valency is defined by how many adjacent faces share this edge.
Accessors: get

Method: Rhino.Geometry.BrepEdge.AdjacentFaces()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepFaces that use this edge.

Method: Rhino.Geometry.BrepEdge.ConcavityAt(double t, double tolerance)
Return: Concavity
Modifiers: public
Summary: Determine the concavity of this edge at a specific parameter.
Parameter: t (double)
Parameter Summary: Edge curve parameter.
Parameter: tolerance (double)
Parameter Summary: Angle tolerance for tangent faces.

Method: Rhino.Geometry.BrepEdge.GetEdgeParameter(int trimIndex, double trimParameter, out double edgeParameter)
Return: bool
Modifiers: public
Summary: Get corresponding edge parameter for given trim at given trim parameter.

Method: Rhino.Geometry.BrepEdge.IsSmoothManifoldEdge(double angleToleranceRadians)
Return: bool
Modifiers: public
Summary: For a manifold, non-boundary edge, decides whether or not the two surfaces on either side meet smoothly.
Parameter: angleToleranceRadians (double)
Parameter Summary: used to decide if surface normals on either side are parallel.

Method: Rhino.Geometry.BrepEdge.SetEdgeCurve(int curve3dIndex, Interval subDomain)
Return: bool
Modifiers: public
Summary: Set 3d curve geometry used by a b-rep edge.
Parameter: curve3dIndex (int)
Parameter Summary: index of 3d curve in m_C3[] array
Parameter: subDomain (Interval)
Parameter Summary:

Method: Rhino.Geometry.BrepEdge.SetEdgeCurve(int curve3dIndex)
Return: bool
Modifiers: public
Summary: Set 3d curve geometry used by a b-rep edge.
Parameter: curve3dIndex (int)
Parameter Summary: index of 3d curve in m_C3[] array

Method: Rhino.Geometry.BrepEdge.TrimIndices()
Return: int
Modifiers: public
Summary: Gets the indices of all trims associated with this edge.

Class: Rhino.Geometry.BrepEdgeFilletDistance
Summary: Fillet distances along a BrepEdge

Constructor: Rhino.Geometry.BrepEdgeFilletDistance.BrepEdgeFilletDistance(double edgeParameter, double filletDistance)
Summary: Construct a fillet distance

Property: Rhino.Geometry.BrepEdgeFilletDistance.EdgeParameter
Return: double
Modifiers: public
Summary: The parameter along the BrepEdge where to apply a fillet distance (radius)
Accessors: get

Property: Rhino.Geometry.BrepEdgeFilletDistance.FilletDistance
Return: double
Modifiers: public
Summary: Distance to fillet
Accessors: get

Class: Rhino.Geometry.BrepFace
Summary: Provides strongly-typed access to brep faces.
A Brep face is composed of one surface and trimming curves.

Property: Rhino.Geometry.BrepFace.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this face.
Accessors: get

Property: Rhino.Geometry.BrepFace.FaceIndex
Return: int
Modifiers: public
Summary: Index of face in Brep.Faces array.
Accessors: get

Property: Rhino.Geometry.BrepFace.Id
Return: Guid
Modifiers: public
Summary: Gets or sets the persistent id of this Brep face. By default, the id is Guid.Zero. Note, Rhino does not set this id. Thus, the property is available for use as a way of tracking Brep faces.
Accessors: get set

Property: Rhino.Geometry.BrepFace.IsSurface
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the face is synonymous with the underlying surface. If a Face has no trimming curves then it is considered a Surface.
Accessors: get

Property: Rhino.Geometry.BrepFace.Loops
Return: BrepLoopList
Modifiers: public
Summary: Loops in this face.
Accessors: get

Property: Rhino.Geometry.BrepFace.MaterialChannelIndex
Return: int
Modifiers: public
Summary: This face's rendering material channel index.
Accessors: get set

Property: Rhino.Geometry.BrepFace.OrientationIsReversed
Return: bool
Modifiers: public
Summary: True if face orientation is opposite of natural surface orientation.
Accessors: get set

Property: Rhino.Geometry.BrepFace.OuterLoop
Return: BrepLoop
Modifiers: public
Summary: Every face has a single outer loop.
Accessors: get

Property: Rhino.Geometry.BrepFace.PackId
Return: uint
Modifiers: public
Summary: 0 if the pack it is unset, or >0 if the set pack id.
Accessors: get

Property: Rhino.Geometry.BrepFace.PerFaceColor
Return: Color
Modifiers: public
Summary: If per-face color is "Empty", then this face does not have a custom color
Accessors: get set

Property: Rhino.Geometry.BrepFace.ProxyBrepSubDFaceId
Return: uint
Modifiers: public
Summary: If this face is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD face is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepFace.SurfaceIndex
Return: int
Modifiers: public
Summary: Surface index of the 3d surface geometry used by this face or -1
Accessors: get

Method: Rhino.Geometry.BrepFace.AdjacentEdges()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepEdges that delineate this Face.

Method: Rhino.Geometry.BrepFace.AdjacentFaces()
Return: int
Modifiers: public
Summary: Gets the indices of all the BrepFaces that surround (are adjacent to) this face.

Method: Rhino.Geometry.BrepFace.ChangeSurface(int surfaceIndex)
Return: bool
Modifiers: public
Summary: Expert user tool that replaces the 3d surface geometry use by the face.
Parameter: surfaceIndex (int)
Parameter Summary: brep surface index of new surface.

Method: Rhino.Geometry.BrepFace.ClearMaterialChannelIndex()
Return: void
Modifiers: public
Summary: Clear this face's rendering material channel index.

Method: Rhino.Geometry.BrepFace.ClearPackId()
Return: void
Modifiers: public
Summary: Sets BrepFace.PackId to 0.

Method: Rhino.Geometry.BrepFace.CreateExtrusion(Curve pathCurve, bool cap)
Return: Brep
Modifiers: public
Summary: Extrude a face in a Brep.
Parameter: pathCurve (Curve)
Parameter Summary: The path to extrude along. Note, the direction of the extrusion will follow the direction of the curve.
Parameter: cap (bool)
Parameter Summary: If true, the extrusion is capped with a translation of the face being extruded

Method: Rhino.Geometry.BrepFace.DraftAnglePoint(Point2d testPoint, double testAngle, Vector3d pullDirection, bool edge, out Point3d draftPoint, out double draftAngle)
Return: bool
Modifiers: public
Summary: Returns the surface draft angle and point at a parameter.
Parameter: testPoint (Point2d)
Parameter Summary: The u,v parameter on the face to evaluate.
Parameter: testAngle (double)
Parameter Summary: The angle in radians to test.
Parameter: pullDirection (Vector3d)
Parameter Summary: The pull direction.
Parameter: edge (bool)
Parameter Summary: Restricts the point placement to an edge.
Parameter: draftPoint (Point3d)
Parameter Summary: The draft angle point.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians.

Method: Rhino.Geometry.BrepFace.DuplicateFace(bool duplicateMeshes)
Return: Brep
Modifiers: public
Summary: Duplicate a face from the brep to create new single face brep.
Parameter: duplicateMeshes (bool)
Parameter Summary: If true, shading meshes will be copied as well.

Method: Rhino.Geometry.BrepFace.DuplicateSurface()
Return: Surface
Modifiers: public
Summary: Gets a copy to the untrimmed surface that this face is based on.

Method: Rhino.Geometry.BrepFace.FilletSurfaceToCurve(Curve curve, double t, double u, double v, double radius, int alignToCurve, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, double tolerance, List<Brep> out_fillets, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a constant-radius fillet surface between a surface and the curve.
Parameter: curve (Curve)
Parameter Summary: the curve to which this face is being filleted.
Parameter: t (double)
Parameter Summary: A parameter on the curve, indicating region of fillet.
Parameter: u (double)
Parameter Summary: A parameter in the u direction of the face indicating which side of the curve to fillet.
Parameter: v (double)
Parameter Summary: A parameter in the v direction of the face indicating which side of the curve to fillet.
Parameter: radius (double)
Parameter Summary: The radius of the constant-radius fillet desired. NOTE: using arcSliders will change the shape of the arcs themselves
Parameter: alignToCurve (int)
Parameter Summary: Does the user want the fillet to align to the curve? 0 - No, ignore the curve's b-spline structure 1 - Yes, match the curves's degree, spans, CVs as much as possible 2 - Same as 1, but iterate to fit to tolerance Note that a value of 1 or 2 will cause nBezierSrfs to be ignored
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the curve
Parameter: arcDegree (int)
Parameter Summary: Desired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: he results of the fillet calculation.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along curve [1] max 3d point deviation along face [2] max angle deviation along face(in degrees) [3] max angle deviation between Bézier surfaces(in degrees) [4] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.BrepFace.FilletSurfaceToRail(Curve curveOnFace, BrepFace secondFace, double u1, double v1, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, bool extend, FilletSurfaceSplitType split_type, double tolerance, List<Brep> out_fillets, List<Brep> out_breps0, List<Brep> out_breps1, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a surface between two surfaces, with a fixed rail curve on the first surface.
Parameter: curveOnFace (Curve)
Parameter Summary: A curve on this face
Parameter: secondFace (BrepFace)
Parameter Summary: The second face
Parameter: u1 (double)
Parameter Summary: A parameter in the u direction of the second face at the side you want to keep after filleting.
Parameter: v1 (double)
Parameter Summary: A parameter in the v direction of the second face at the side you want to keep after filleting.
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the rails
Parameter: arcDegree (int)
Parameter Summary: esired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: split_type (FilletSurfaceSplitType)
Parameter Summary: The split type
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: The results of the fillet calculation.
Parameter: out_breps0 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by faceWithCurve.
Parameter: out_breps1 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by pFace1.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along surface 0 [1] max 3d point deviation along surface 1 [2] max angle deviation along surface 0 (in degrees) [3] max angle deviation along surface 1 (in degrees) [4] max angle deviation between Bézier surfaces(in degrees) [5] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.BrepFace.GetMesh(MeshType meshType)
Return: Mesh
Modifiers: public
Summary: Obtains a reference to a specified type of mesh for this brep face.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.BrepFace.IsPointOnFace(double u, double v, double tolerance)
Return: PointFaceRelation
Modifiers: public
Summary: Tests if a parameter space point is in the active region of a face.
Parameter: u (double)
Parameter Summary: Parameter space point U value.
Parameter: v (double)
Parameter Summary: Parameter space point V value.
Parameter: tolerance (double)
Parameter Summary: 3D tolerance used when checking to see if the point is on a face or inside of a loop.

Method: Rhino.Geometry.BrepFace.IsPointOnFace(double u, double v)
Return: PointFaceRelation
Modifiers: public
Summary: Tests if a parameter space point is in the active region of a face.
Parameter: u (double)
Parameter Summary: Parameter space point U value.
Parameter: v (double)
Parameter Summary: Parameter space point V value.

Method: Rhino.Geometry.BrepFace.PullPointsToFace(IEnumerable<Point3d> points, double tolerance)
Return: Point3d[]
Modifiers: public
Summary: Pulls one or more points to a brep face.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to pull.
Parameter: tolerance (double)
Parameter Summary: Tolerance for pulling operation. Only points that are closer than tolerance will be pulled to the face.

Method: Rhino.Geometry.BrepFace.RebuildEdges(double tolerance, bool rebuildSharedEdges, bool rebuildVertices)
Return: bool
Modifiers: public
Summary: Rebuild the edges used by a face so they lie on the surface.
Parameter: tolerance (double)
Parameter Summary: tolerance for fitting 3d edge curves.
Parameter: rebuildSharedEdges (bool)
Parameter Summary: if False and edge is used by this face and a neighbor, then the edge will be skipped.
Parameter: rebuildVertices (bool)
Parameter Summary: if true, vertex locations are updated to lie on the surface.

Method: Rhino.Geometry.BrepFace.RefitTrim(BrepEdge edge, IEnumerable<double> knots, double tolerance, bool bSections, ref double fitQuality)
Return: Surface[]
Modifiers: public
Summary: The RefitTrim command replaces a trimmed surface edge with an untrimmed edge.
Parameter: edge (BrepEdge)
Parameter Summary: The edge to fit.
Parameter: knots (IEnumerable<double>)
Parameter Summary: The custom knot vector to use, or an empty vector to use the existing knots of the surface.
Parameter: tolerance (double)
Parameter Summary: The 3d tolerance for projection, splitting, and fitting.
Parameter: bSections (bool)
Parameter Summary: If true, the surface is divided into seperate surface patches at all knots.
Parameter: fitQuality (double)
Parameter Summary: A measure of the 3d fit to the trim curve.

Method: Rhino.Geometry.BrepFace.RemoveHoles(double tolerance)
Return: Brep
Modifiers: public
Summary: Remove all inner loops, or holes, from a Brep face.

Method: Rhino.Geometry.BrepFace.SetDomain(int direction, Interval domain)
Return: bool
Modifiers: public, override
Summary: Sets the surface domain of this face.
Parameter: direction (int)
Parameter Summary: Direction of face to set (0 = U, 1 = V).
Parameter: domain (Interval)
Parameter Summary: Domain to apply.

Method: Rhino.Geometry.BrepFace.SetMesh(MeshType meshType, Mesh mesh)
Return: bool
Modifiers: public
Summary: Sets a reference to a specified type of mesh for this brep face.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.
Parameter: mesh (Mesh)
Parameter Summary: The new mesh.

Method: Rhino.Geometry.BrepFace.SetPackId(uint packId)
Return: void
Modifiers: public
Summary: Used by SubD functions that create breps to transmit the subd face SubDFace.PackId value to the brep face or faces generated from the subd face. Unless you are an expert and doing something very carefully and very fancy, to not call this function.
Parameter: packId (uint)
Parameter Summary: The pack id.

Method: Rhino.Geometry.BrepFace.ShrinkFace(ShrinkDisableSide disableSide)
Return: bool
Modifiers: public
Summary: Shrinks the underlying untrimmed surface of this Brep face close to trimming boundaries. Shrinking a surface is like extending smoothly, only backwards. knot of full multiplicity are added where you want the surface to be cut off. Then the remaining control points are thrown away.
Parameter: disableSide (ShrinkDisableSide)
Parameter Summary: The side(s) of the surface to not shrink.

Method: Rhino.Geometry.BrepFace.ShrinkSurfaceToEdge()
Return: bool
Modifiers: public
Summary: Shrinks the underlying untrimmed surface of this Brep face right to the trimming boundaries. Note, shrinking the trimmed surface can sometimes cause problems later since having the edges so close to the trimming boundaries can cause commands that use the surface edges as input to fail.

Method: Rhino.Geometry.BrepFace.Split(IEnumerable<Curve> curves, double tolerance)
Return: Brep
Modifiers: public
Summary: Split this face using 3D trimming curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to split with.
Parameter: tolerance (double)
Parameter Summary: Tolerance for splitting, when in doubt use the Document Absolute Tolerance.

Method: Rhino.Geometry.BrepFace.TrimAwareIsoCurve(int direction, double constantParameter)
Return: Curve[]
Modifiers: public
Summary: Similar to IsoCurve function, except this function pays attention to trims on faces and may return multiple curves.
Parameter: direction (int)
Parameter Summary: Direction of isocurve.
0 = Isocurve connects all points with a constant U value.
1 = Isocurve connects all points with a constant V value. | Parameter: constantParameter (double) | Parameter Summary: Surface parameter that remains identical along the isocurves.

Method: Rhino.Geometry.BrepFace.TrimAwareIsoIntervals(int direction, double constantParameter)
Return: Interval[]
Modifiers: public
Summary: Gets intervals where the iso curve exists on a BrepFace (trimmed surface)
Parameter: direction (int)
Parameter Summary: Direction of isocurve.
0 = Isocurve connects all points with a constant U value.
1 = Isocurve connects all points with a constant V value. | Parameter: constantParameter (double) | Parameter Summary: Surface parameter that remains identical along the isocurves.

Method: Rhino.Geometry.BrepFace.UnderlyingSurface()
Return: Surface
Modifiers: public
Summary: Gets the untrimmed surface that is the base of this face.

Class: Rhino.Geometry.BrepLoop
Summary: Represent a single loop in a Brep object. A loop is composed of a list of trim curves.

Property: Rhino.Geometry.BrepLoop.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this loop.
Accessors: get

Property: Rhino.Geometry.BrepLoop.Face
Return: BrepFace
Modifiers: public
Summary: BrepFace this loop belongs to.
Accessors: get

Property: Rhino.Geometry.BrepLoop.LoopIndex
Return: int
Modifiers: public
Summary: Gets the index of this loop in the Brep.Loops collection.
Accessors: get

Property: Rhino.Geometry.BrepLoop.LoopType
Return: BrepLoopType
Modifiers: public
Summary: type of loop.
Accessors: get

Property: Rhino.Geometry.BrepLoop.Trims
Return: BrepTrimList
Modifiers: public
Summary: List of trims for this loop
Accessors: get

Method: Rhino.Geometry.BrepLoop.To2dCurve()
Return: Curve
Modifiers: public
Summary: Create a 2d curve that traces the entire loop

Method: Rhino.Geometry.BrepLoop.To3dCurve()
Return: Curve
Modifiers: public
Summary: Create a 3D curve that approximates the loop geometry.

Class: Rhino.Geometry.BrepRegion
Summary: Represents a brep topological region that has sides.

Property: Rhino.Geometry.BrepRegion.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: Gets the region bounding box.
Accessors: get

Property: Rhino.Geometry.BrepRegion.Brep
Return: Brep
Modifiers: public
Summary: Gets a reference to the Brep this region belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegion.Index
Return: int
Modifiers: public
Summary: Gets the index of region in the RegionTopology array.
Accessors: get

Property: Rhino.Geometry.BrepRegion.IsFinite
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this region is finite.
Accessors: get

Method: Rhino.Geometry.BrepRegion.BoundaryBrep()
Return: Brep
Modifiers: public
Summary: Gets the boundary of a region as a brep object. If the region is finite, the boundary will be a closed  manifold brep. The boundary may have more than one connected component.

Method: Rhino.Geometry.BrepRegion.GetFaceSides()
Return: BrepRegionFaceSide[]
Modifiers: public
Summary: Gets an array of <b>BrepRegionFaceSide</b> entities delimiting this region.

Method: Rhino.Geometry.BrepRegion.NonConstOperation()
Return: void
Modifiers: protected, override

Class: Rhino.Geometry.BrepRegionFaceSide
Summary: Represents a side of a <b>BrepRegion</b> entity.

Property: Rhino.Geometry.BrepRegionFaceSide.Brep
Return: Brep
Modifiers: public
Summary: The brep this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.Face
Return: BrepFace
Modifiers: public
Summary: Gets the face this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.Region
Return: BrepRegion
Modifiers: public
Summary: The region this side belongs to.
Accessors: get

Property: Rhino.Geometry.BrepRegionFaceSide.SurfaceNormalPointsIntoRegion
Return: bool
Modifiers: public
Summary: Gets True if BrepFace's surface normal points into region; False otherwise.
Accessors: get

Method: Rhino.Geometry.BrepRegionFaceSide.NonConstOperation()
Return: void
Modifiers: protected, override

Class: Rhino.Geometry.BrepTrim
Summary: Brep trim information is stored in BrepTrim classes. Brep.Trims is an array of all the trims in the brep. A BrepTrim is derived from CurveProxy so the trim can supply easy to use evaluation tools via the Curve virtual member functions. Note well that the domains and orientations of the curve m_C2[trim.m_c2i] and the trim as a curve may not agree.

Property: Rhino.Geometry.BrepTrim.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this trim.
Accessors: get

Property: Rhino.Geometry.BrepTrim.Edge
Return: BrepEdge
Modifiers: public
Summary: Brep edge this trim belongs to. This will be None for singular trims
Accessors: get

Property: Rhino.Geometry.BrepTrim.EndVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at end of trim
Accessors: get

Property: Rhino.Geometry.BrepTrim.Face
Return: BrepFace
Modifiers: public
Summary: Brep face this trim belongs to
Accessors: get

Property: Rhino.Geometry.BrepTrim.IsoStatus
Return: IsoStatus
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.BrepTrim.Loop
Return: BrepLoop
Modifiers: public
Summary: Loop that this trim belongs to
Accessors: get

Property: Rhino.Geometry.BrepTrim.StartVertex
Return: BrepVertex
Modifiers: public
Summary: BrepVertex at start of trim
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimCurve
Return: Curve
Modifiers: public
Summary: Gets the Brep.Curves2D 2d curve geometry used by this trim, or null.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimCurveIndex
Return: int
Modifiers: public
Summary: Gets the Brep.Curves2D 2d curve index of the 2d curve geometry used by this trim, or -1.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimIndex
Return: int
Modifiers: public
Summary: Gets the index of this trim in the Brep.Trims collection.
Accessors: get

Property: Rhino.Geometry.BrepTrim.TrimType
Return: BrepTrimType
Modifiers: public
Summary: Type of trim
Accessors: get set

Method: Rhino.Geometry.BrepTrim.GetTolerances(out double toleranceU, out double toleranceV)
Return: void
Modifiers: public
Summary: The values in tolerance[] record the accuracy of the parameter space trimming curves.

Method: Rhino.Geometry.BrepTrim.GetTrimParameter(double edgeParameter, out double trimParameter)
Return: bool
Modifiers: public
Summary: Get corresponding trim parameter at given edge parameter.

Method: Rhino.Geometry.BrepTrim.IsReversed()
Return: bool
Modifiers: public
Summary: Get orientation of trim with respect to it's corresponding edge.

Method: Rhino.Geometry.BrepTrim.SetTolerances(double toleranceU, double toleranceV)
Return: void
Modifiers: public
Summary: The values in tolerance[] record the accuracy of the parameter space trimming curves.

Method: Rhino.Geometry.BrepTrim.SetTrimCurve(int curve2dIndex, Interval subDomain)
Return: bool
Modifiers: public
Summary: Set 2d curve geometry used by a b-rep trim.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in m_C2[] array
Parameter: subDomain (Interval)
Parameter Summary:

Method: Rhino.Geometry.BrepTrim.SetTrimCurve(int curve2dIndex)
Return: bool
Modifiers: public
Summary: Set 2d curve geometry used by a b-rep trim.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in m_C2[] array

Class: Rhino.Geometry.BrepVertex
Summary: Brep vertex information

Property: Rhino.Geometry.BrepVertex.Brep
Return: Brep
Modifiers: public
Summary: Gets the Brep that owns this vertex.
Accessors: get

Property: Rhino.Geometry.BrepVertex.ProxyBrepSubDVertexId
Return: uint
Modifiers: public
Summary: If this vertex is part of a brep created by SubD.ProxyBrep(), then the subd component id of the corresponding SubD vertex is returned. Otherwise 0 is returned.
Accessors: get

Property: Rhino.Geometry.BrepVertex.Tolerance
Return: double
Modifiers: public
Summary: Accuracy of vertex point, either >=0.0 or <b>RhinoMath.UnsetValue</b> . A value of <b>RhinoMath.UnsetValue</b> indicates that the tolerance should be computed. A value of 0.0 indicates that the distance from the vertex to any applicable edge or trim end is <= <b>RhinoMath.ZeroTolerance</b> . If an edge begins or ends at this vertex, then the distance from the vertex's 3d point to the appropriate end of the edge's 3d curve must be <= this tolerance. If a trim begins or ends at this vertex, then the distance from the vertex's 3d point to the 3d point on the surface obtained by evaluating the surface at the appropriate end of the trimming curve must be  <= this tolerance.
Accessors: get

Property: Rhino.Geometry.BrepVertex.VertexIndex
Return: int
Modifiers: public
Summary: Gets the index of this vertex in the Brep.Vertices collection.
Accessors: get

Method: Rhino.Geometry.BrepVertex.EdgeIndices()
Return: int
Modifiers: public
Summary: Gets the indices of all edges associated with this vertex.

Class: Rhino.Geometry.Centermark
Summary: Represents a center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark()
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(Plane plane, Curve curve, double curveParameter)
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(Plane plane, Point3d centerPoint, double radius)
Summary: Constructs a new center mark dimension.

Constructor: Rhino.Geometry.Centermark.Centermark(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Centermark.Radius
Return: double
Modifiers: public
Summary: Gets or sets the center mark's radius.
Accessors: get set

Method: Rhino.Geometry.Centermark.Create(DimensionStyle dimStyle, Plane plane, Curve curve, double curveParameter)
Return: Centermark
Modifiers: public, static
Summary: Creates a new center mark dimension.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: curve (Curve)
Parameter Summary: Curve used to determine the center mark's radius.
Parameter: curveParameter (double)
Parameter Summary: Parameter on curve used to determine the center mark's radius.

Method: Rhino.Geometry.Centermark.Create(DimensionStyle dimStyle, Plane plane, Point3d centerPoint, double radius)
Return: Centermark
Modifiers: public, static
Summary: Creates a new center mark dimension.
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimension style.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: centerPoint (Point3d)
Parameter Summary: Dimension's center point.
Parameter: radius (double)
Parameter Summary: Center mark's radius.

Method: Rhino.Geometry.Centermark.AdjustFromPoints(Plane plane, Point3d centerPoint)
Return: bool
Modifiers: public
Summary: Update dimension geometry from point locations.
Parameter: plane (Plane)
Parameter Summary: Dimension's plane.
Parameter: centerPoint (Point3d)
Parameter Summary: Dimension's center point.

Class: Rhino.Geometry.ClippingPlaneSurface
Summary: Represents a planar surface that is used as clipping plane in viewports. A clipping plane object maintains a list of viewports that it clips against.

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface()
Summary: Constructs an empty clipping plane surface

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(Plane plane)
Summary: Constructs a clipping plane surface from a Plane

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(PlaneSurface planeSurface)
Summary: Constructs a ClippingPlaneSurface from a PlaneSurface

Constructor: Rhino.Geometry.ClippingPlaneSurface.ClippingPlaneSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.ClippingPlaneSurface.ParticipationListsEnabled
Return: bool
Modifiers: public
Summary: Should the object and layer participation lists be used when determining clipping
Accessors: get set

Property: Rhino.Geometry.ClippingPlaneSurface.PlaneDepth
Return: double
Modifiers: public
Summary: Distance that the clipping has an effect
Accessors: get set

Property: Rhino.Geometry.ClippingPlaneSurface.PlaneDepthEnabled
Return: bool
Modifiers: public
Summary: Determines if the PlaneDepth value should be used
Accessors: get set

Method: Rhino.Geometry.ClippingPlaneSurface.AddClipViewportId(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Adds a viewport id to the list of viewports that this clipping plane clips.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the RhinoViewport to add.

Method: Rhino.Geometry.ClippingPlaneSurface.ClearClipParticipationLists()
Return: void
Modifiers: public
Summary: Remove list of object ids that this clipping plane surface clips. This causes the clipping plane surface to clip all objects

Method: Rhino.Geometry.ClippingPlaneSurface.GetClipParticipation(out IEnumerable<Guid> objectIds, out IEnumerable<int> layerIndices, out bool isExclusionList)
Return: void
Modifiers: public

Method: Rhino.Geometry.ClippingPlaneSurface.RemoveClipViewportId(System.Guid viewportId)
Return: bool
Modifiers: public
Summary: Removes a viewport id that this being clipped by this clipping plane.
Parameter: viewportId (System.Guid)
Parameter Summary: The id of the RhinoViewport to remove.

Method: Rhino.Geometry.ClippingPlaneSurface.SetClipParticipation(IEnumerable<Guid> objectIds, IEnumerable<int> layerIndices, bool isExclusionList)
Return: void
Modifiers: public
Summary: Set a list of specific object ids and layers that this clipping plane surface clips.
Parameter: objectIds (IEnumerable<Guid>)
Parameter Summary: 
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: 
Parameter: isExclusionList (bool)
Parameter Summary: Is the list a set of ids to not clip or a set to clip

Method: Rhino.Geometry.ClippingPlaneSurface.ViewportIds()
Return: System.Guid[]
Modifiers: public
Summary: Returns the ids of RhinoViewport objects that are clipped by this clipping plane.

Class: Rhino.Geometry.Curve
Summary: Represents a base class that is common to most RhinoCommon curve types.
A curve represents an entity that can be all visited by providing   a single parameter, usually called t.

Constructor: Rhino.Geometry.Curve.Curve(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.Curve.Degree
Return: int
Modifiers: public
Summary: Gets the maximum algebraic degree of any span or a good estimate if curve spans are not algebraic.
Accessors: get

Property: Rhino.Geometry.Curve.Dimension
Return: int
Modifiers: public
Summary: Gets the dimension of the object.
The dimension is typically three. For parameter space trimming     curves the dimension is two. In rare cases the dimension can     be one or greater than three. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.Curve.Domain
Return: Interval
Modifiers: public
Summary: Gets or sets the domain of the curve.
Accessors: get set

Property: Rhino.Geometry.Curve.IsClosed
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve is a closed curve.
Accessors: get

Property: Rhino.Geometry.Curve.IsPeriodic
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not this curve is considered to be Periodic.
Accessors: get

Property: Rhino.Geometry.Curve.IsSubDFriendly
Return: bool
Modifiers: public
Summary: Returns True if the curve is a cubic, non-rational, uniform NURBS curve that is either periodic or has natural end conditions. Otherwise, False is returned.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtEnd
Return: Point3d
Modifiers: public
Summary: Evaluates point at the end of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtMid
Return: Point3d
Modifiers: public
Summary: Evaluates point at the middle, or mid, of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.PointAtStart
Return: Point3d
Modifiers: public
Summary: Evaluates point at the start of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.SpanCount
Return: int
Modifiers: public
Summary: Gets the number of non-empty smooth (c-infinity) spans in the curve.
Accessors: get

Property: Rhino.Geometry.Curve.TangentAtEnd
Return: Vector3d
Modifiers: public
Summary: Evaluate unit tangent vector at the end of the curve.
Accessors: get

Property: Rhino.Geometry.Curve.TangentAtStart
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at the start of the curve.
Accessors: get

Method: Rhino.Geometry.Curve.CreateArcBlend(Point3d startPt, Vector3d startDir, Point3d endPt, Vector3d endDir, double controlPointLengthRatio)
Return: Curve
Modifiers: public, static
Summary: Creates a polycurve consisting of two tangent arc segments that connect two points and two directions.
Parameter: startPt (Point3d)
Parameter Summary: Start of the arc blend curve.
Parameter: startDir (Vector3d)
Parameter Summary: Start direction of the arc blend curve.
Parameter: endPt (Point3d)
Parameter Summary: End of the arc blend curve.
Parameter: endDir (Vector3d)
Parameter Summary: End direction of the arc blend curve.
Parameter: controlPointLengthRatio (double)
Parameter Summary: The ratio of the control polygon lengths of the two arcs. Note, a value of 1.0 means the control polygon lengths for both arcs will be the same.

Method: Rhino.Geometry.Curve.CreateArcCornerRectangle(Rectangle3d rectangle, double radius)
Return: Curve
Modifiers: public, static
Summary: Creates an arc-cornered (rounded) rectangular curve.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: radius (double)
Parameter Summary: The arc radius at each corner.

Method: Rhino.Geometry.Curve.CreateArcLineArcBlend(Point3d startPt, Vector3d startDir, Point3d endPt, Vector3d endDir, double radius)
Return: Curve
Modifiers: public, static
Summary: Creates an arc-line-arc blend curve between two curves. The output is generally a PolyCurve with three segments: arc, line, arc. In some cases, one or more of those segments will be absent because they would have 0 length. If there is only a single segment, the result will either be an ArcCurve or a LineCurve.
Parameter: startPt (Point3d)
Parameter Summary: Start of the blend curve.
Parameter: startDir (Vector3d)
Parameter Summary: Start direction of the blend curve.
Parameter: endPt (Point3d)
Parameter Summary: End of the blend curve.
Parameter: endDir (Vector3d)
Parameter Summary: End direction of the arc blend curve.
Parameter: radius (double)
Parameter Summary: The radius of the arc segments.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curveA, Curve curveB, BlendContinuity continuity, double bulgeA, double bulgeB)
Return: Curve
Modifiers: public, static
Summary: Create a Blend curve between two existing curves.
Parameter: curveA (Curve)
Parameter Summary: Curve to blend from (blending will occur at curve end point).
Parameter: curveB (Curve)
Parameter Summary: Curve to blend to (blending will occur at curve start point).
Parameter: continuity (BlendContinuity)
Parameter Summary: Continuity of blend.
Parameter: bulgeA (double)
Parameter Summary: Bulge factor at curveA end of blend. Values near 1.0 work best.
Parameter: bulgeB (double)
Parameter Summary: Bulge factor at curveB end of blend. Values near 1.0 work best.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curveA, Curve curveB, BlendContinuity continuity)
Return: Curve
Modifiers: public, static
Summary: Create a Blend curve between two existing curves.
Parameter: curveA (Curve)
Parameter Summary: Curve to blend from (blending will occur at curve end point).
Parameter: curveB (Curve)
Parameter Summary: Curve to blend to (blending will occur at curve start point).
Parameter: continuity (BlendContinuity)
Parameter Summary: Continuity of blend.

Method: Rhino.Geometry.Curve.CreateBlendCurve(Curve curve0, double t0, bool reverse0, BlendContinuity continuity0, Curve curve1, double t1, bool reverse1, BlendContinuity continuity1)
Return: Curve
Modifiers: public, static
Summary: Makes a curve blend between 2 curves at the parameters specified with the directions and continuities specified
Parameter: curve0 (Curve)
Parameter Summary: First curve to blend from
Parameter: t0 (double)
Parameter Summary: Parameter on first curve for blend endpoint
Parameter: reverse0 (bool)
Parameter Summary: If false, the blend will go in the natural direction of the curve. If true, the blend will go in the opposite direction to the curve
Parameter: continuity0 (BlendContinuity)
Parameter Summary: Continuity for the blend at the start
Parameter: curve1 (Curve)
Parameter Summary: Second curve to blend from
Parameter: t1 (double)
Parameter Summary: Parameter on second curve for blend endpoint
Parameter: reverse1 (bool)
Parameter Summary: If false, the blend will go in the natural direction of the curve. If true, the blend will go in the opposite direction to the curve
Parameter: continuity1 (BlendContinuity)
Parameter Summary: Continuity for the blend at the end

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, Curve curveB, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, Curve curveB)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, IEnumerable<Curve> subtractors, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between a closed planar curve, and a list of closed planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: subtractors (IEnumerable<Curve>)
Parameter Summary: curves to subtract from the first closed curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanDifference(Curve curveA, IEnumerable<Curve> subtractors)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean difference between a closed planar curve, and a list of closed planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: subtractors (IEnumerable<Curve>)
Parameter Summary: curves to subtract from the first closed curve.

Method: Rhino.Geometry.Curve.CreateBooleanIntersection(Curve curveA, Curve curveB, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean intersection of two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanIntersection(Curve curveA, Curve curveB)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean intersection of two closed, planar curves. Note, curves must be co-planar.
Parameter: curveA (Curve)
Parameter Summary: The first closed, planar curve.
Parameter: curveB (Curve)
Parameter Summary: The second closed, planar curve.

Method: Rhino.Geometry.Curve.CreateBooleanRegions(IEnumerable<Curve> curves, Plane plane, bool combineRegions, double tolerance)
Return: CurveBooleanRegions
Modifiers: public, static
Summary: Calculates curve Boolean regions, which trims and splits curves based on their overlapping regions.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: plane (Plane)
Parameter Summary: Regions will be found in the projection of the curves to this plane.
Parameter: combineRegions (bool)
Parameter Summary: If true, then adjacent regions will be combined.
Parameter: tolerance (double)
Parameter Summary: Function tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateBooleanRegions(IEnumerable<Curve> curves, Plane plane, IEnumerable<Point3d> points, bool combineRegions, double tolerance)
Return: CurveBooleanRegions
Modifiers: public, static
Summary: Curve Boolean method, which trims and splits curves based on their overlapping regions.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: plane (Plane)
Parameter Summary: Regions will be found in the projection of the curves to this plane.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: These points will be projected to plane. All regions that contain at least one of these points will be found.
Parameter: combineRegions (bool)
Parameter Summary: If true, then adjacent regions will be combined.
Parameter: tolerance (double)
Parameter Summary: Function tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateBooleanUnion(IEnumerable<Curve> curves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean union of two or more closed, planar curves. Note, curves must be co-planar.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The co-planar curves to union.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateBooleanUnion(IEnumerable<Curve> curves)
Return: Curve[]
Modifiers: public, static
Summary: Calculates the boolean union of two or more closed, planar curves. Note, curves must be co-planar.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The co-planar curves to union.

Method: Rhino.Geometry.Curve.CreateConicCornerRectangle(Rectangle3d rectangle, double rho)
Return: Curve
Modifiers: public, static
Summary: Creates a conic-corned (rounded) rectangular curve.
Parameter: rectangle (Rectangle3d)
Parameter Summary: The rectangle.
Parameter: rho (double)
Parameter Summary: The rho value at each corner, in the exclusive range (0.0, 1.0).

Method: Rhino.Geometry.Curve.CreateControlPointCurve(IEnumerable<Point3d> points, int degree)
Return: Curve
Modifiers: public, static
Summary: Constructs a curve from a set of control-point locations.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control points.
Parameter: degree (int)
Parameter Summary: Degree of curve. The number of control points must be at least degree+1.

Method: Rhino.Geometry.Curve.CreateControlPointCurve(IEnumerable<Point3d> points)
Return: Curve
Modifiers: public, static
Summary: Constructs a control-point of degree=3 (or less).
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control points of curve.

Method: Rhino.Geometry.Curve.CreateCurve2View(Curve curveA, Curve curveB, Vector3d vectorA, Vector3d vectorB, double tolerance, double angleTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates a third curve from two curves that are planar in different construction planes. The new curve looks the same as each of the original curves when viewed in each plane.
Parameter: curveA (Curve)
Parameter Summary: The first curve.
Parameter: curveB (Curve)
Parameter Summary: The second curve.
Parameter: vectorA (Vector3d)
Parameter Summary: A vector defining the normal direction of the plane which the first curve is drawn upon.
Parameter: vectorB (Vector3d)
Parameter Summary: A vector defining the normal direction of the plane which the second curve is drawn upon.
Parameter: tolerance (double)
Parameter Summary: The tolerance for the operation.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance for the operation.

Method: Rhino.Geometry.Curve.CreateFillet(Curve curve0, Curve curve1, double radius, double t0Base, double t1Base)
Return: Arc
Modifiers: public, static
Summary: Computes the fillet arc for a curve filleting operation.
Parameter: curve0 (Curve)
Parameter Summary: First curve to fillet.
Parameter: curve1 (Curve)
Parameter Summary: Second curve to fillet.
Parameter: radius (double)
Parameter Summary: Fillet radius.
Parameter: t0Base (double)
Parameter Summary: Parameter on curve0 where the fillet ought to start (approximately).
Parameter: t1Base (double)
Parameter Summary: Parameter on curve1 where the fillet ought to end (approximately).

Method: Rhino.Geometry.Curve.CreateFilletCornersCurve(Curve curve, double radius, double tolerance, double angleTolerance)
Return: Curve
Modifiers: public, static
Summary: Rounds the corners of a kinked curve with arcs of a single, specified radius.
Parameter: curve (Curve)
Parameter Summary: The curve to fillet.
Parameter: radius (double)
Parameter Summary: The fillet radius.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. When in doubt, use the document's model space angle tolerance.

Method: Rhino.Geometry.Curve.CreateFilletCurves(Curve curve0, Point3d point0, Curve curve1, Point3d point1, double radius, bool join, bool trim, bool arcExtension, double tolerance, double angleTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates a tangent arc between two curves and trims or extends the curves to the arc.
Parameter: curve0 (Curve)
Parameter Summary: The first curve to fillet.
Parameter: point0 (Point3d)
Parameter Summary: A point on the first curve that is near the end where the fillet will be created.
Parameter: curve1 (Curve)
Parameter Summary: The second curve to fillet.
Parameter: point1 (Point3d)
Parameter Summary: A point on the second curve that is near the end where the fillet will be created.
Parameter: radius (double)
Parameter Summary: The radius of the fillet.
Parameter: join (bool)
Parameter Summary: Join the output curves.
Parameter: trim (bool)
Parameter Summary: Trim copies of the input curves to the output fillet curve.
Parameter: arcExtension (bool)
Parameter Summary: Applies when arcs are filleted but need to be extended to meet the fillet curve or chamfer line. If true, then the arc is extended maintaining its validity. If false, then the arc is extended with a line segment, which is joined to the arc converting it to a polycurve.
Parameter: tolerance (double)
Parameter Summary: The tolerance, generally the document's absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree, CurveKnotStyle knots, Vector3d startTangent, Vector3d endTangent)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate. For periodic curves if the final point is a duplicate of the initial point it is  ignored. (Count must be >=2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1. Note: Even degree > 3 periodic interpolation results in a non-periodic closed curve.
Parameter: knots (CurveKnotStyle)
Parameter Summary: Knot-style to use  and specifies if the curve should be periodic.
Parameter: startTangent (Vector3d)
Parameter Summary: A starting tangent.
Parameter: endTangent (Vector3d)
Parameter Summary: An ending tangent.

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree, CurveKnotStyle knots)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate. For periodic curves if the final point is a duplicate of the initial point it is  ignored. (Count must be >=2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1. Note: Even degree > 3 periodic interpolation results in a non-periodic closed curve.
Parameter: knots (CurveKnotStyle)
Parameter Summary: Knot-style to use  and specifies if the curve should be periodic.

Method: Rhino.Geometry.Curve.CreateInterpolatedCurve(IEnumerable<Point3d> points, int degree)
Return: Curve
Modifiers: public, static
Summary: Interpolates a sequence of points. Used by InterpCurve Command This routine works best when degree=3.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate (Count must be >= 2)
Parameter: degree (int)
Parameter Summary: The degree of the curve >=1.  Degree must be odd.

Method: Rhino.Geometry.Curve.CreateMatchCurve(Curve curve0, bool reverse0, BlendContinuity continuity, Curve curve1, bool reverse1, PreserveEnd preserve, bool average)
Return: Curve[]
Modifiers: public, static
Summary: Changes a curve end to meet a specified curve with a specified continuity.
Parameter: curve0 (Curve)
Parameter Summary: The open curve to change.
Parameter: reverse0 (bool)
Parameter Summary: Reverse the direction of the curve to change before matching.
Parameter: continuity (BlendContinuity)
Parameter Summary: The continuity at the curve end.
Parameter: curve1 (Curve)
Parameter Summary: The open curve to match.
Parameter: reverse1 (bool)
Parameter Summary: Reverse the direction of the curve to match before matching.
Parameter: preserve (PreserveEnd)
Parameter Summary: Prevent modification of the curvature at the end opposite the match for curves with fewer than six control points.
Parameter: average (bool)
Parameter Summary: Adjust both curves to match each other.

Method: Rhino.Geometry.Curve.CreateMeanCurve(Curve curveA, Curve curveB, double angleToleranceRadians)
Return: Curve
Modifiers: public, static
Summary: Constructs a mean, or average, curve from two curves.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.
Parameter: angleToleranceRadians (double)
Parameter Summary: The angle tolerance, in radians, used to match kinks between curves. If you are unsure how to set this parameter, then either use the document's angle tolerance RhinoDoc.AngleToleranceRadians, or the default value (RhinoMath.UnsetValue)

Method: Rhino.Geometry.Curve.CreateMeanCurve(Curve curveA, Curve curveB)
Return: Curve
Modifiers: public, static
Summary: Constructs a mean, or average, curve from two curves.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.

Method: Rhino.Geometry.Curve.CreatePeriodicCurve(Curve curve, bool smooth)
Return: Curve
Modifiers: public, static
Summary: Removes kinks from a curve. Periodic curves deform smoothly without kinks.
Parameter: curve (Curve)
Parameter Summary: The curve to make periodic. Curve must have degree >= 2.
Parameter: smooth (bool)
Parameter Summary: If true, smooths any kinks in the curve and moves control points to make a smooth curve. If false, control point locations are not changed or changed minimally (only one point may move) and only the knot vector is altered.

Method: Rhino.Geometry.Curve.CreatePeriodicCurve(Curve curve)
Return: Curve
Modifiers: public, static
Summary: Removes kinks from a curve. Periodic curves deform smoothly without kinks.
Parameter: curve (Curve)
Parameter Summary: The curve to make periodic. Curve must have degree >= 2.

Method: Rhino.Geometry.Curve.CreateRevisionCloud(Curve curve, int segmentCount, double angle, bool flip)
Return: Curve
Modifiers: public, static
Summary: Creates a revision cloud curve from a planar curve.
Parameter: curve (Curve)
Parameter Summary: The input planar curve.
Parameter: segmentCount (int)
Parameter Summary: The number of segments in the output revision cloud curve. If zero, the number of segments in the output revision cloud curve is based on the NURB form of the input curve.
Parameter: angle (double)
Parameter Summary: The angle in radians, between PI/2.0 and PI radians (90 and 180 degrees). This angle indicates the amount of bulge in the segments.
Parameter: flip (bool)
Parameter Summary: The arc segments in output revision cloud curve will be in the opposite direction to the input curve.

Method: Rhino.Geometry.Curve.CreateRevisionCloud(IEnumerable<Point3d> points, double angle, bool flip)
Return: Curve
Modifiers: public, static
Summary: Creates a revision cloud curve from points that make up a planar polyline.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The input points.
Parameter: angle (double)
Parameter Summary: The angle in radians, between PI/2.0 and PI radians (90 and 180 degrees). This angle indicates the amount of bulge in the segments.
Parameter: flip (bool)
Parameter Summary: The arc segments in output revision cloud curve will be in the opposite direction to the input curve.

Method: Rhino.Geometry.Curve.CreateSoftEditCurve(Curve curve, double t, Vector3d delta, double length, bool fixEnds)
Return: Curve
Modifiers: public, static
Summary: Creates a soft edited curve from an existing curve using a smooth field of influence.
Parameter: curve (Curve)
Parameter Summary: The curve to soft edit.
Parameter: t (double)
Parameter Summary: A parameter on the curve to move from. This location on the curve is moved, and the move is smoothly tapered off with increasing distance along the curve from this parameter.
Parameter: delta (Vector3d)
Parameter Summary: The direction and magnitude, or maximum distance, of the move.
Parameter: length (double)
Parameter Summary: The distance along the curve from the editing point over which the strength of the editing falls off smoothly.
Parameter: fixEnds (bool)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTextOutlines(string text, string font, double textHeight, int textStyle, bool closeLoops, Plane plane, double smallCapsScale, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates outline curves created from a text string. The functionality is similar to what you find in Rhino's TextObject command or TextEntity.Explode() in RhinoCommon.
Parameter: text (string)
Parameter Summary: The text from which to create outline curves.
Parameter: font (string)
Parameter Summary: The text font. If the font does not exist on the system. Rhino will use a substitute with similar properties.
Parameter: textHeight (double)
Parameter Summary: The text height.
Parameter: textStyle (int)
Parameter Summary: The font style. The font style can be any number of the following: 0 - Normal, 1 - Bold, 2 - Italic
Parameter: closeLoops (bool)
Parameter Summary: Set this value to True when dealing with normal fonts and when you expect closed loops. You may want to set this to False when specifying a single-stroke font where you don't want closed loops.
Parameter: plane (Plane)
Parameter Summary: The plane on which the outline curves will lie.
Parameter: smallCapsScale (double)
Parameter Summary: Displays lower-case letters as small caps. Set the relative text size to a percentage of the normal text.
Parameter: tolerance (double)
Parameter Summary: The tolerance for the operation.

Method: Rhino.Geometry.Curve.CreateTweenCurves(Curve curve0, Curve curve1, int numCurves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves. That means the first control point of first curve is matched to first control point of the second curve and so on. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTweenCurves(Curve curve0, Curve curve1, int numCurves)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves. That means the first control point of first curve is matched to first control point of the second curve and so on. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(Curve curve0, Curve curve1, int numCurves, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed. Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless input curves are compatible and no refit is needed. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(Curve curve0, Curve curve1, int numCurves)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed. Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless input curves are compatible and no refit is needed. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(Curve curve0, Curve curve1, int numCurves, int numSamples, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Use sample points method to make curves compatible. This is how the algorithm works: Divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input curves.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(Curve curve0, Curve curve1, int numCurves, int numSamples)
Return: Curve[]
Modifiers: public, static
Summary: Creates curves between two open or closed input curves. Use sample points method to make curves compatible. This is how the algorithm works: Divides the two curves into an equal number of points, finds the midpoint between the corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves direction. Caller must match input curves direction before calling the function.
Parameter: curve0 (Curve)
Parameter Summary: The first, or starting, curve.
Parameter: curve1 (Curve)
Parameter Summary: The second, or ending, curve.
Parameter: numCurves (int)
Parameter Summary: Number of tween curves to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input curves.

Method: Rhino.Geometry.Curve.DoDirectionsMatch(Curve curveA, Curve curveB)
Return: bool
Modifiers: public, static
Summary: Determines whether two curves travel more or less in the same direction.
Parameter: curveA (Curve)
Parameter Summary: First curve to test.
Parameter: curveB (Curve)
Parameter Summary: Second curve to test.

Method: Rhino.Geometry.Curve.GetDistancesBetweenCurves(Curve curveA, Curve curveB, double tolerance, out double maxDistance, out double maxDistanceParameterA, out double maxDistanceParameterB, out double minDistance, out double minDistanceParameterA, out double minDistanceParameterB)
Return: bool
Modifiers: public, static
Summary: Calculates the minimum and maximum distances between two curves. This function is useful for computing curve deviation. If you are not computing curve deviation, use <b>ClosestPoints(Curve, out Point3d, out Point3d)</b> .
Parameter: curveA (Curve)
Parameter Summary: A curve.
Parameter: curveB (Curve)
Parameter Summary: Another curve.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: maxDistance (double)
Parameter Summary: The maximum distance value. This is an out reference argument.
Parameter: maxDistanceParameterA (double)
Parameter Summary: The maximum distance parameter on curve A. This is an out reference argument.
Parameter: maxDistanceParameterB (double)
Parameter Summary: The maximum distance parameter on curve B. This is an out reference argument.
Parameter: minDistance (double)
Parameter Summary: The minimum distance value. This is an out reference argument.
Parameter: minDistanceParameterA (double)
Parameter Summary: The minimum distance parameter on curve A. This is an out reference argument.
Parameter: minDistanceParameterB (double)
Parameter Summary: The minimum distance parameter on curve B. This is an out reference argument.

Method: Rhino.Geometry.Curve.GetFilletPoints(Curve curve0, Curve curve1, double radius, double t0Base, double t1Base, out double t0, out double t1, out Plane filletPlane)
Return: bool
Modifiers: public, static
Summary: Finds points at which to cut a pair of curves so that a fillet of given radius can be inserted.
Parameter: curve0 (Curve)
Parameter Summary: First curve to fillet.
Parameter: curve1 (Curve)
Parameter Summary: Second curve to fillet.
Parameter: radius (double)
Parameter Summary: Fillet radius.
Parameter: t0Base (double)
Parameter Summary: Parameter value for base point on curve0.
Parameter: t1Base (double)
Parameter Summary: Parameter value for base point on curve1.
Parameter: t0 (double)
Parameter Summary: Parameter value of fillet point on curve 0.
Parameter: t1 (double)
Parameter Summary: Parameter value of fillet point on curve 1.
Parameter: filletPlane (Plane)
Parameter Summary: The fillet is contained in this plane with the fillet center at the plane origin.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection, bool simpleJoin, out int key)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output. | Parameter: simpleJoin (bool) | Parameter Summary: Set True to use the simple joining method. In general, set this parameter to false. | Parameter: key (int) | Parameter Summary: inputCurves[i] is part of returnValue[key[i]]

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection, out int key)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output. | Parameter: key (int) | Parameter Summary: inputCurves[i] is part of returnValue[key[i]]

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance, bool preserveDirection)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.
Parameter: preserveDirection (bool)
Parameter Summary: If true, curve endpoints will be compared to curve start points.
If false, all start and endpoints will be compared and copies of input curves may be reversed in output.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves, double joinTolerance)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curve segments to join.
Parameter: joinTolerance (double)
Parameter Summary: Joining tolerance, i.e. the distance between segment end-points that is allowed.

Method: Rhino.Geometry.Curve.JoinCurves(IEnumerable<Curve> inputCurves)
Return: Curve[]
Modifiers: public, static
Summary: Joins a collection of curve segments together.
Parameter: inputCurves (IEnumerable<Curve>)
Parameter Summary: Curve segments to join.

Method: Rhino.Geometry.Curve.MakeEndsMeet(Curve curveA, bool adjustStartCurveA, Curve curveB, bool adjustStartCurveB)
Return: bool
Modifiers: public, static
Summary: Makes adjustments to the ends of one or both input curves so that they meet at a point.
Parameter: curveA (Curve)
Parameter Summary: 1st curve to adjust.
Parameter: adjustStartCurveA (bool)
Parameter Summary: Which end of the 1st curve to adjust: True is start, False is end.
Parameter: curveB (Curve)
Parameter Summary: 2nd curve to adjust.
Parameter: adjustStartCurveB (bool)
Parameter Summary: which end of the 2nd curve to adjust true==start, false==end.

Method: Rhino.Geometry.Curve.PlanarClosedCurveRelationship(Curve curveA, Curve curveB, Plane testPlane, double tolerance)
Return: RegionContainment
Modifiers: public, static
Summary: Determines whether two coplanar simple closed curves are disjoint or intersect; otherwise, if the regions have a containment relationship, discovers which curve encloses the other.
Parameter: curveA (Curve)
Parameter Summary: A first curve.
Parameter: curveB (Curve)
Parameter Summary: A second curve.
Parameter: testPlane (Plane)
Parameter Summary: A plane.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.PlanarCurveCollision(Curve curveA, Curve curveB, Plane testPlane, double tolerance)
Return: bool
Modifiers: public, static
Summary: Determines if two coplanar curves collide (intersect).
Parameter: curveA (Curve)
Parameter Summary: A curve.
Parameter: curveB (Curve)
Parameter Summary: Another curve.
Parameter: testPlane (Plane)
Parameter Summary: A valid plane containing the curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value for intersection.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, Brep brep, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a Brep along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: brep (Brep)
Parameter Summary: Brep to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, IEnumerable<Brep> breps, Vector3d direction, double tolerance, out int brepIndices)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a collection of Breps along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.
Parameter: brepIndices (int)
Parameter Summary: (out) Integers that identify for each resulting curve which Brep it was projected onto.

Method: Rhino.Geometry.Curve.ProjectToBrep(Curve curve, IEnumerable<Brep> breps, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a Curve onto a collection of Breps along a given direction.
Parameter: curve (Curve)
Parameter Summary: Curve to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToBrep(IEnumerable<Curve> curves, IEnumerable<Brep> breps, Vector3d direction, double tolerance, out int curveIndices, out int brepIndices)
Return: Curve[]
Modifiers: public, static
Summary: Projects a collection of Curves onto a collection of Breps along a given direction.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.
Parameter: curveIndices (int)
Parameter Summary: Index of which curve in the input list was the source for a curve in the return array.
Parameter: brepIndices (int)
Parameter Summary: Index of which brep was used to generate a curve in the return array.

Method: Rhino.Geometry.Curve.ProjectToBrep(IEnumerable<Curve> curves, IEnumerable<Brep> breps, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a collection of Curves onto a collection of Breps along a given direction.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: Curves to project.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: Breps to project onto.
Parameter: direction (Vector3d)
Parameter Summary: Direction of projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for projection.

Method: Rhino.Geometry.Curve.ProjectToMesh(Curve curve, IEnumerable<Mesh> meshes, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a set of meshes using a direction and tolerance.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: A list, an array or any enumerable of meshes.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToMesh(Curve curve, Mesh mesh, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a mesh using a direction and tolerance.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: mesh (Mesh)
Parameter Summary: A mesh.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToMesh(IEnumerable<Curve> curves, IEnumerable<Mesh> meshes, Vector3d direction, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Projects a curve to a set of meshes using a direction and tolerance.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: A list, an array or any enumerable of curves.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: A list, an array or any enumerable of meshes.
Parameter: direction (Vector3d)
Parameter Summary: A direction vector.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.ProjectToPlane(Curve curve, Plane plane)
Return: Curve
Modifiers: public, static
Summary: Constructs a curve by projecting an existing curve to a plane.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: plane (Plane)
Parameter Summary: A plane.

Method: Rhino.Geometry.Curve.PullToBrepFace(Curve curve, BrepFace face, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Pull a curve to a BrepFace using closest point projection.
Parameter: curve (Curve)
Parameter Summary: Curve to pull.
Parameter: face (BrepFace)
Parameter Summary: Brep face that pulls.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for pulling.

Method: Rhino.Geometry.Curve.ChangeClosedCurveSeam(double t)
Return: bool
Modifiers: public
Summary: If this curve is closed, then modify it so that the start/end point is at curve parameter t.
Parameter: t (double)
Parameter Summary: Curve parameter of new start/end point. The returned curves domain will start at t.

Method: Rhino.Geometry.Curve.ChangeDimension(int desiredDimension)
Return: bool
Modifiers: public
Summary: Changes the dimension of a curve.
Parameter: desiredDimension (int)
Parameter Summary: The desired dimension.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation()
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in the world XY plane. Only works with simple (no self intersections) closed, planar curves.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Plane plane)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane. Only works with simple (no self intersections) closed, planar curves.
Parameter: plane (Plane)
Parameter Summary: The plane in which to solve the orientation.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Transform xform)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve. Only works with simple (no self intersections) closed, planar curves.
Parameter: xform (Transform)
Parameter Summary: Transformation to map the curve to the world XY plane.

Method: Rhino.Geometry.Curve.ClosedCurveOrientation(Vector3d upDirection)
Return: CurveOrientation
Modifiers: public
Summary: Determines the orientation (counterclockwise or clockwise) of a closed, planar curve in a given plane. Only works with simple (no self intersections) closed, planar curves.
Parameter: upDirection (Vector3d)
Parameter Summary: A vector that is considered "up".

Method: Rhino.Geometry.Curve.ClosestPoint(Point3d testPoint, out double t, double maximumDistance)
Return: bool
Modifiers: public
Summary: Finds the parameter of the point on a curve that is closest to testPoint. If the maximumDistance parameter is > 0, then only points whose distance to the given point is <= maximumDistance will be returned.  Using a positive value of maximumDistance can substantially speed up the search.
Parameter: testPoint (Point3d)
Parameter Summary: Point to project.
Parameter: t (double)
Parameter Summary: parameter of local closest point returned here.
Parameter: maximumDistance (double)
Parameter Summary: The maximum allowed distance.
Past this distance, the search is given up and False is returned.
Use 0 to turn off this parameter.

Method: Rhino.Geometry.Curve.ClosestPoint(Point3d testPoint, out double t)
Return: bool
Modifiers: public
Summary: Finds parameter of the point on a curve that is closest to testPoint. If the maximumDistance parameter is > 0, then only points whose distance to the given point is <= maximumDistance will be returned.  Using a positive value of maximumDistance can substantially speed up the search.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search from.
Parameter: t (double)
Parameter Summary: Parameter of local closest point.

Method: Rhino.Geometry.Curve.ClosestPoints(Curve otherCurve, out Point3d pointOnThisCurve, out Point3d pointOnOtherCurve)
Return: bool
Modifiers: public
Summary: Gets closest points between this and another curves.
Parameter: otherCurve (Curve)
Parameter Summary: The other curve.
Parameter: pointOnThisCurve (Point3d)
Parameter Summary: The point on this curve. This out parameter is assigned during this call.
Parameter: pointOnOtherCurve (Point3d)
Parameter Summary: The point on other curve. This out parameter is assigned during this call.

Method: Rhino.Geometry.Curve.ClosestPoints(IEnumerable<GeometryBase> geometry, out Point3d pointOnCurve, out Point3d pointOnObject, out int whichGeometry, double maximumDistance)
Return: bool
Modifiers: public
Summary: Finds the object (and the closest point in that object) that is closest to this curve.
Breps, surfaces,     curves and point clouds are examples of     objects that can be passed to this function. | Since: 5.0 | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A list, an array or any enumerable set of geometry to search. | Parameter: pointOnCurve (Point3d) | Parameter Summary: The point on curve. This out parameter is assigned during this call. | Parameter: pointOnObject (Point3d) | Parameter Summary: The point on geometry. This out parameter is assigned during this call. | Parameter: whichGeometry (int) | Parameter Summary: The index of the geometry. This out parameter is assigned during this call. | Parameter: maximumDistance (double) | Parameter Summary: Maximum allowable distance. Past this distance, the research is given up and False is returned.

Method: Rhino.Geometry.Curve.ClosestPoints(IEnumerable<GeometryBase> geometry, out Point3d pointOnCurve, out Point3d pointOnObject, out int whichGeometry)
Return: bool
Modifiers: public
Summary: Finds the object (and the closest point in that object) that is closest to this curve.
Breps, surfaces,     curves and point clouds are examples of     objects that can be passed to this function. | Since: 5.0 | Parameter: geometry (IEnumerable<GeometryBase>) | Parameter Summary: A list, an array or any enumerable set of geometry to search. | Parameter: pointOnCurve (Point3d) | Parameter Summary: The point on curve. This out parameter is assigned during this call. | Parameter: pointOnObject (Point3d) | Parameter Summary: The point on geometry. This out parameter is assigned during this call. | Parameter: whichGeometry (int) | Parameter Summary: The index of the geometry. This out parameter is assigned during this call.

Method: Rhino.Geometry.Curve.CombineShortSegments(double tolerance)
Return: bool
Modifiers: public
Summary: Looks for segments that are shorter than tolerance that can be combined. For NURBS of degree greater than 1, spans are combined by removing knots. Similarly for NURBS segments of polycurves. Otherwise, RemoveShortSegments() is called. Does not change the domain, but it will change the relative parameterization.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint, Plane plane, double tolerance)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.
Parameter: plane (Plane)
Parameter Summary: Plane in which to compare point and region.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during comparison.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint, Plane plane)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.
Parameter: plane (Plane)
Parameter Summary: Plane in which to compare point and region.

Method: Rhino.Geometry.Curve.Contains(Point3d testPoint)
Return: PointContainment
Modifiers: public
Summary: Computes the relationship between a point and a closed curve region. This curve must be closed or the return value will be Unset. Both curve and point are projected to the World XY plane.
Parameter: testPoint (Point3d)
Parameter Summary: Point to test.

Method: Rhino.Geometry.Curve.ControlPolygon()
Return: Polyline
Modifiers: public
Summary: Gets the curve's control polygon.

Method: Rhino.Geometry.Curve.CurvatureAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluate the curvature vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.DerivativeAt(double t, int derivativeCount, CurveEvaluationSide side)
Return: Vector3d[]
Modifiers: public
Summary: Evaluate the derivatives at the specified curve parameter.
Parameter: t (double)
Parameter Summary: Curve parameter to evaluate.
Parameter: derivativeCount (int)
Parameter Summary: Number of derivatives to evaluate, must be at least 0.
Parameter: side (CurveEvaluationSide)
Parameter Summary: Side of parameter to evaluate. If the parameter is at a kink, it makes a big difference whether the evaluation is from below or above.

Method: Rhino.Geometry.Curve.DerivativeAt(double t, int derivativeCount)
Return: Vector3d[]
Modifiers: public
Summary: Evaluate the derivatives at the specified curve parameter.
Parameter: t (double)
Parameter Summary: Curve parameter to evaluate.
Parameter: derivativeCount (int)
Parameter Summary: Number of derivatives to evaluate, must be at least 0.

Method: Rhino.Geometry.Curve.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Curve.DivideAsContour(Point3d contourStart, Point3d contourEnd, double interval)
Return: Point3d[]
Modifiers: public
Summary: Divides this curve at fixed steps along a defined contour line.
Parameter: contourStart (Point3d)
Parameter Summary: The start of the contouring line.
Parameter: contourEnd (Point3d)
Parameter Summary: The end of the contouring line.
Parameter: interval (double)
Parameter Summary: A distance to measure on the contouring axis.

Method: Rhino.Geometry.Curve.DivideByCount(int segmentCount, bool includeEnds, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into a number of equal-length segments.
Parameter: segmentCount (int)
Parameter Summary: Segment count. Note that the number of division points may differ from the segment count.
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: points (Point3d[])
Parameter Summary: A list of division points. If the function returns successfully, this point-array will be filled in.

Method: Rhino.Geometry.Curve.DivideByCount(int segmentCount, bool includeEnds)
Return: double
Modifiers: public
Summary: Divide the curve into a number of equal-length segments.
Parameter: segmentCount (int)
Parameter Summary: Segment count. Note that the number of division points may differ from the segment count.
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, bool reverse, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: reverse (bool)
Parameter Summary: If true, then the divisions start from the end of the curve.
Parameter: points (Point3d[])
Parameter Summary: If function is successful, points at each parameter value are returned in points.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, bool reverse)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: reverse (bool)
Parameter Summary: If true, then the divisions start from the end of the curve.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds, out Point3d[] points)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.
Parameter: points (Point3d[])
Parameter Summary: If function is successful, points at each parameter value are returned in points.

Method: Rhino.Geometry.Curve.DivideByLength(double segmentLength, bool includeEnds)
Return: double
Modifiers: public
Summary: Divide the curve into specific length segments.
Parameter: segmentLength (double)
Parameter Summary: The length of each and every segment (except potentially the last one).
Parameter: includeEnds (bool)
Parameter Summary: If true, then the point at the start of the first division segment is returned.

Method: Rhino.Geometry.Curve.DivideEquidistant(double distance, out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Calculates 3d points on a curve where the linear distance between the points is equal.
Parameter: distance (double)
Parameter Summary: The distance between division points.
Parameter: curveParameters (double)
Parameter Summary: If successful, an array of curve parameters at the point locations.

Method: Rhino.Geometry.Curve.DivideEquidistant(double distance)
Return: Point3d[]
Modifiers: public
Summary: Calculates 3d points on a curve where the linear distance between the points is equal.
Parameter: distance (double)
Parameter Summary: The distance between division points.

Method: Rhino.Geometry.Curve.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Constructs an exact duplicate of this Curve.

Method: Rhino.Geometry.Curve.DuplicateCurve()
Return: Curve
Modifiers: public
Summary: Constructs an exact duplicate of this curve.

Method: Rhino.Geometry.Curve.DuplicateSegments()
Return: Curve[]
Modifiers: public
Summary: Duplicates curve segments. Explodes polylines, polycurves and G1 discontinuous NURBS curves. Single segment curves, such as lines, arcs, unkinked NURBS curves, are duplicated.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, CurveExtensionStyle style, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: style (CurveExtensionStyle)
Parameter Summary: The style or type of extension to use.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, CurveExtensionStyle style, Point3d endPoint)
Return: Curve
Modifiers: public
Summary: Extends a curve to a point.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: style (CurveExtensionStyle)
Parameter Summary: The style or type of extension to use.
Parameter: endPoint (Point3d)
Parameter Summary: A new end point.

Method: Rhino.Geometry.Curve.Extend(CurveEnd side, double length, CurveExtensionStyle style)
Return: Curve
Modifiers: public
Summary: Extends a curve by a specific length.
Parameter: side (CurveEnd)
Parameter Summary: Curve end to extend.
Parameter: length (double)
Parameter Summary: Length to add to the curve end.
Parameter: style (CurveExtensionStyle)
Parameter Summary: Extension style.

Method: Rhino.Geometry.Curve.Extend(double t0, double t1)
Return: Curve
Modifiers: public
Summary: Where possible, analytically extends curve to include the given domain. This will not work on closed curves. The original curve will be identical to the restriction of the resulting curve to the original curve domain.
Parameter: t0 (double)
Parameter Summary: Start of extension domain, if the start is not inside the Domain of this curve, an attempt will be made to extend the curve.
Parameter: t1 (double)
Parameter Summary: End of extension domain, if the end is not inside the Domain of this curve, an attempt will be made to extend the curve.

Method: Rhino.Geometry.Curve.Extend(Interval domain)
Return: Curve
Modifiers: public
Summary: Where possible, analytically extends curve to include the given domain. This will not work on closed curves. The original curve will be identical to the restriction of the resulting curve to the original curve domain.
Parameter: domain (Interval)
Parameter Summary: Extension domain.

Method: Rhino.Geometry.Curve.ExtendByArc(CurveEnd side, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve by an Arc until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.ExtendByLine(CurveEnd side, IEnumerable<GeometryBase> geometry)
Return: Curve
Modifiers: public
Summary: Extends a curve by a line until it intersects a collection of objects.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: geometry (System.Collections.Generic.IEnumerable<GeometryBase>)
Parameter Summary: A collection of objects. Allowable object types are Curve, Surface, Brep.

Method: Rhino.Geometry.Curve.ExtendOnSurface(CurveEnd side, BrepFace face)
Return: Curve
Modifiers: public
Summary: Extends a curve on a surface.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: face (BrepFace)
Parameter Summary: BrepFace that contains the curve.

Method: Rhino.Geometry.Curve.ExtendOnSurface(CurveEnd side, Surface surface)
Return: Curve
Modifiers: public
Summary: Extends a curve on a surface.
Parameter: side (CurveEnd)
Parameter Summary: The end of the curve to extend.
Parameter: surface (Surface)
Parameter Summary: Surface that contains the curve.

Method: Rhino.Geometry.Curve.ExtremeParameters(Vector3d direction)
Return: double
Modifiers: public
Summary: Returns the parameter values of all local extrema. Parameter values are in increasing order so consecutive extrema define an interval on which each component of the curve is monotone. Note, non-periodic curves always return the end points.
Parameter: direction (Vector3d)
Parameter Summary: The direction in which to perform the calculation.

Method: Rhino.Geometry.Curve.Fair(double distanceTolerance, double angleTolerance, int clampStart, int clampEnd, int iterations)
Return: Curve
Modifiers: public
Summary: Fairs a curve object. Fair works best on degree 3 (cubic) curves. Attempts to remove large curvature variations while limiting the geometry changes to be no more than the specified tolerance.
Parameter: distanceTolerance (double)
Parameter Summary: Maximum allowed distance the faired curve is allowed to deviate from the input.
Parameter: angleTolerance (double)
Parameter Summary: (in radians) kinks with angles <= angleTolerance are smoothed out 0.05 is a good default.
Parameter: clampStart (int)
Parameter Summary: The number of (control vertices-1) to preserve at start.
0 = preserve start point
1 = preserve start point and 1st derivative
2 = preserve start point, 1st and 2nd derivative | Parameter: clampEnd (int) | Parameter Summary: Same as clampStart. | Parameter: iterations (int) | Parameter Summary: The number of iterations to use in adjusting the curve.

Method: Rhino.Geometry.Curve.FilletSurfaceToCurve(BrepFace face, double t, double u, double v, double radius, int alignToCurve, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, double tolerance, List<Brep> out_fillets, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a constant-radius fillet surface between a surface and the curve.
Parameter: face (BrepFace)
Parameter Summary: the face being filleted.
Parameter: t (double)
Parameter Summary: A parameter on the curve, indicating region of fillet.
Parameter: u (double)
Parameter Summary: A parameter in the u direction of the face indicating which side of the curve to fillet.
Parameter: v (double)
Parameter Summary: A parameter in the v direction of the face indicating which side of the curve to fillet.
Parameter: radius (double)
Parameter Summary: The radius of the constant-radius fillet desired. NOTE: using arcSliders will change the shape of the arcs themselves
Parameter: alignToCurve (int)
Parameter Summary: Does the user want the fillet to align to the curve? 0 - No, ignore the curve's b-spline structure 1 - Yes, match the curves's degree, spans, CVs as much as possible 2 - Same as 1, but iterate to fit to tolerance Note that a value of 1 or 2 will cause nBezierSrfs to be ignored
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the curve
Parameter: arcDegree (int)
Parameter Summary: Desired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: he results of the fillet calculation.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along curve [1] max 3d point deviation along face [2] max angle deviation along face(in degrees) [3] max angle deviation between Bézier surfaces(in degrees) [4] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.Curve.FilletSurfaceToRail(BrepFace faceWithCurve, BrepFace secondFace, double u1, double v1, int railDegree, int arcDegree, IEnumerable<double> arcSliders, int numBezierSrfs, bool extend, FilletSurfaceSplitType split_type, double tolerance, List<Brep> out_fillets, List<Brep> out_breps0, List<Brep> out_breps1, out double fitResults)
Return: bool
Modifiers: public
Summary: Creates a surface between two surfaces, with a fixed rail curve on the first surface.
Parameter: faceWithCurve (BrepFace)
Parameter Summary: The first face on which the curve exists
Parameter: secondFace (BrepFace)
Parameter Summary: The second face
Parameter: u1 (double)
Parameter Summary: A parameter in the u direction of the second face at the side you want to keep after filleting.
Parameter: v1 (double)
Parameter Summary: A parameter in the v direction of the second face at the side you want to keep after filleting.
Parameter: railDegree (int)
Parameter Summary: Desired fillet degree (3 or 5) in the u-direction, along the rails
Parameter: arcDegree (int)
Parameter Summary: esired fillet degree (2, 3, 4, or 5) in the v-direction, along the fillet arcs.If 2, then the surface is rational in v
Parameter: arcSliders (IEnumerable<double>)
Parameter Summary: Array of 2 sliders to shape the fillet in the arc direction, used for arcDegree = 3, 4, or 5; input { 0.0, 0.0 } to ignore [0] (-1 to 1) slides tangent arms from base (-1) to theoretical(1) [1] (-1 to 1) slides inner CV(s) from base (-1) to theoretical(1)
Parameter: numBezierSrfs (int)
Parameter Summary: If >0, this indicates the number of equally-spaced fillet surfaces to be output in the rail direction, each surface Bézier in u.
Parameter: extend (bool)
Parameter Summary: If true, then when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: split_type (FilletSurfaceSplitType)
Parameter Summary: The split type
Parameter: tolerance (double)
Parameter Summary: The tolerance. In in doubt, the the document's absolute tolerance.
Parameter: out_fillets (List<Brep>)
Parameter Summary: The results of the fillet calculation.
Parameter: out_breps0 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by faceWithCurve.
Parameter: out_breps1 (List<Brep>)
Parameter Summary: The trim or split results of the Brep owned by pFace1.
Parameter: fitResults (double)
Parameter Summary: array of doubles indicating fitting results: [0] max 3d point deviation along surface 0 [1] max 3d point deviation along surface 1 [2] max angle deviation along surface 0 (in degrees) [3] max angle deviation along surface 1 (in degrees) [4] max angle deviation between Bézier surfaces(in degrees) [5] max curvature difference between Bézier surfaces

Method: Rhino.Geometry.Curve.FindLocalInflection(Vector3d N, Interval subDomain, double seed, out double curveParameter, out double angleError)
Return: bool
Modifiers: public
Summary: Local minimization for point on a curve with tangent perpendicular to N.
Parameter: N (Vector3d)
Parameter Summary: This vector and the curve tangent define a plane. In this plane, there is a vector V perpendicular to the tangent.
Parameter: subDomain (Interval)
Parameter Summary: Subdomain of of curve to evaluate. This must not be empty.
Parameter: seed (double)
Parameter Summary: A seed parameter, which must be included in the subdomain.
Parameter: curveParameter (double)
Parameter Summary: The parameter on the curve if successful, <b>RhinoMath.UnsetValue</b> if unsuccessful.
Parameter: angleError (double)
Parameter Summary: The measure, in radians, of the angle between N and V. The angle will be zero when the result is an inflection.

Method: Rhino.Geometry.Curve.Fit(int degree, double fitTolerance, double angleTolerance)
Return: Curve
Modifiers: public
Summary: Fits a new curve through an existing curve.
Parameter: degree (int)
Parameter Summary: The degree of the returned Curve. Must be bigger than 1.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance. If fitTolerance is RhinoMath.UnsetValue or <=0.0, the document absolute tolerance is used.
Parameter: angleTolerance (double)
Parameter Summary: The kink smoothing tolerance in radians.
If angleTolerance is 0.0, all kinks are smoothed
If angleTolerance is >0.0, kinks smaller than angleTolerance are smoothed
If angleTolerance is RhinoMath.UnsetValue or <0.0, the document angle tolerance is used for the kink smoothing

Method: Rhino.Geometry.Curve.FrameAt(double t, out Plane plane)
Return: bool
Modifiers: public
Summary: Returns a 3d frame at a parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.
Parameter: plane (Plane)
Parameter Summary: The frame is returned here.

Method: Rhino.Geometry.Curve.GetConicSectionType()
Return: ConicSectionType
Modifiers: public
Summary: Returns the type of conic section based on the curve's shape.

Method: Rhino.Geometry.Curve.GetConicSectionType(out Point3d focus1, out Point3d focus2, out Point3d center)
Return: ConicSectionType
Modifiers: public
Summary: Returns the type of conic section based on the curve's shape.
Parameter: focus1 (Point3d)
Parameter Summary: The first focus point, if applicable.
Parameter: focus2 (Point3d)
Parameter Summary: The second focus point, if applicable.
Parameter: center (Point3d)
Parameter Summary: The center point, if applicable.

Method: Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(double nurbsParameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Convert a NURBS curve parameter to a curve parameter.
Parameter: nurbsParameter (double)
Parameter Summary: NURBS form parameter.
Parameter: curveParameter (double)
Parameter Summary: Curve parameter.

Method: Rhino.Geometry.Curve.GetLength()
Return: double
Modifiers: public
Summary: Gets the length of the curve with a fractional tolerance of 1.0e-8.

Method: Rhino.Geometry.Curve.GetLength(double fractionalTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Get the length of a sub-section of the curve.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).

Method: Rhino.Geometry.Curve.GetLength(double fractionalTolerance)
Return: double
Modifiers: public
Summary: Get the length of the curve.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.GetLength(Interval subdomain)
Return: double
Modifiers: public
Summary: Get the length of a sub-section of the curve with a fractional tolerance of 1e-8.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).

Method: Rhino.Geometry.Curve.GetLocalPerpPoint(Point3d testPoint, double seedParmameter, Interval subDomain, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is perpendicular to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the curve to search.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the perpendicular point

Method: Rhino.Geometry.Curve.GetLocalPerpPoint(Point3d testPoint, double seedParmameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is perpendicular to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the perpendicular point

Method: Rhino.Geometry.Curve.GetLocalTangentPoint(Point3d testPoint, double seedParmameter, Interval subDomain, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is tangent to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the curve to search.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the tangent point

Method: Rhino.Geometry.Curve.GetLocalTangentPoint(Point3d testPoint, double seedParmameter, out double curveParameter)
Return: bool
Modifiers: public
Summary: Search for a location on the curve, near seedParmameter, that is tangent to a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.
Parameter: seedParmameter (double)
Parameter Summary: A "seed" parameter on the curve.
Parameter: curveParameter (double)
Parameter Summary: The parameter value at the tangent point

Method: Rhino.Geometry.Curve.GetNextDiscontinuity(Continuity continuityType, double t0, double t1, double cosAngleTolerance, double curvatureTolerance, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to search for.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: cosAngleTolerance (double)
Parameter Summary: default = cos(1 degree) Used only when continuity is G1_continuous or G2_continuous. If the  cosine of the angle between two tangent vectors is <= cos_angle_tolerance, then a G1 discontinuity is reported.
Parameter: curvatureTolerance (double)
Parameter Summary: (default = ON_SQRT_EPSILON) Used only when continuity is G2_continuous. If K0 and K1 are curvatures evaluated from above and below and |K0 - K1| > curvature_tolerance, then a curvature discontinuity is reported.
Parameter: t (double)
Parameter Summary: If a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Curve.GetNextDiscontinuity(Continuity continuityType, double t0, double t1, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to search for.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: t (double)
Parameter Summary: If a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(double curveParameter, out double nurbsParameter)
Return: bool
Modifiers: public
Summary: Convert a curve parameter to a NURBS curve parameter.
Parameter: curveParameter (double)
Parameter Summary: Curve parameter.
Parameter: nurbsParameter (double)
Parameter Summary: NURBS form parameter.

Method: Rhino.Geometry.Curve.GetPerpendicularFrames(IEnumerable<double> parameters)
Return: Plane[]
Modifiers: public
Summary: Gets a collection of perpendicular frames along the curve. Perpendicular frames are also known as 'Zero-twisting frames' and they minimize rotation from one frame to the next.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection ofstrictly increasingcurve parameters to place perpendicular frames on.

Method: Rhino.Geometry.Curve.GetSubCurves()
Return: Curve[]
Modifiers: public
Summary: Gets subcurves from a curve. The results will be similar to what is produced by Rhino's Explode command.

Method: Rhino.Geometry.Curve.HasNurbsForm()
Return: int
Modifiers: public
Summary: Does a NURBS curve representation of this curve exist?

Method: Rhino.Geometry.Curve.InflectionPoints()
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's inflection points. An inflection point is a location on a curve at which the sign of the curvature (i.e., the concavity) changes. The curvature at these locations is always 0.

Method: Rhino.Geometry.Curve.InflectionPoints(out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's inflection points. An inflection point is a location on a curve at which the sign of the curvature (i.e., the concavity) changes. The curvature at these locations is always 0.
Parameter: curveParameters (double)
Parameter Summary: An array of curve parameters at the inflection points.

Method: Rhino.Geometry.Curve.IsArc()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsArc(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an arc or circle within the given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsCircle()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsCircle(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by a circle within the given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsClosable(double tolerance, double minimumAbsoluteSize, double minimumRelativeSize)
Return: bool
Modifiers: public
Summary: Decide if it makes sense to close off this curve by moving the endpoint to the start based on start-end gap size and length of curve as approximated by chord defined by 6 points.
Parameter: tolerance (double)
Parameter Summary: Maximum allowable distance between start and end. If start - end gap is greater than tolerance, this function will return false.
Parameter: minimumAbsoluteSize (double)
Parameter Summary: If greater than 0.0 and none of the interior sampled points are at least minimumAbsoluteSize from start, this function will return false.
Parameter: minimumRelativeSize (double)
Parameter Summary: If greater than 1.0 and chord length is less than minimumRelativeSize*gap, this function will return false.

Method: Rhino.Geometry.Curve.IsClosable(double tolerance)
Return: bool
Modifiers: public
Summary: Decide if it makes sense to close off this curve by moving the endpoint to the start based on start-end gap size and length of curve as approximated by chord defined by 6 points.
Parameter: tolerance (double)
Parameter Summary: Maximum allowable distance between start and end. If start - end gap is greater than tolerance, this function will return false.

Method: Rhino.Geometry.Curve.IsContinuous(Continuity continuityType, double t)
Return: bool
Modifiers: public
Summary: Test continuity at a curve parameter value.
Parameter: continuityType (Continuity)
Parameter Summary: Type of continuity to test for.
Parameter: t (double)
Parameter Summary: Parameter to test.

Method: Rhino.Geometry.Curve.IsEllipse()
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Curve.IsEllipse(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it can be represented by an ellipse within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for checking.

Method: Rhino.Geometry.Curve.IsInPlane(Plane testPlane, double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it lies in a specific plane.
Parameter: testPlane (Plane)
Parameter Summary: Plane to test for.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsInPlane(Plane testPlane)
Return: bool
Modifiers: public
Summary: Test a curve to see if it lies in a specific plane.
Parameter: testPlane (Plane)
Parameter Summary: Plane to test for.

Method: Rhino.Geometry.Curve.IsLinear()
Return: bool
Modifiers: public
Summary: Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).

Method: Rhino.Geometry.Curve.IsLinear(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve to see if it is linear to within the custom tolerance.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking linearity.

Method: Rhino.Geometry.Curve.IsPlanar()
Return: bool
Modifiers: public
Summary: Test a curve for planarity.

Method: Rhino.Geometry.Curve.IsPlanar(double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve for planarity.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.IsPolyline()
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.

Method: Rhino.Geometry.Curve.IsShort(double tolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Used to quickly find short curves.
Parameter: tolerance (double)
Parameter Summary: Length threshold value for "shortness".
Parameter: subdomain (Interval)
Parameter Summary: The test is performed on the interval that is the intersection of sub-domain with Domain()

Method: Rhino.Geometry.Curve.IsShort(double tolerance)
Return: bool
Modifiers: public
Summary: Used to quickly find short curves.
Parameter: tolerance (double)
Parameter Summary: Length threshold value for "shortness".

Method: Rhino.Geometry.Curve.LcoalClosestPoint(Point3d testPoint, double seed, out double t)
Return: bool
Modifiers: public
Summary: Find parameter of the point on a curve that is locally closest to the testPoint.  The search for a local close point starts at a seed parameter.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seed (double)
Parameter Summary: The seed parameter.
Parameter: t (double)
Parameter Summary: >Parameter of the curve that is closest to testPoint.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, double fractionalTolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the sub-domain.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the start of the sub-domain to t is s.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve rather than the whole curve.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, double fractionalTolerance)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the curve start point to t equals s.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t, Interval subdomain)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the sub-domain.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the start of the sub-domain to t is s.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve rather than the whole curve.

Method: Rhino.Geometry.Curve.LengthParameter(double segmentLength, out double t)
Return: bool
Modifiers: public
Summary: Gets the parameter along the curve which coincides with a given length along the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: segmentLength (double)
Parameter Summary: Length of segment to measure. Must be less than or equal to the length of the curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from the curve start point to t equals length.

Method: Rhino.Geometry.Curve.LocalClosestPoint(Point3d testPoint, double seed, out double t)
Return: bool
Modifiers: public
Summary: Find parameter of the point on a curve that is locally closest to the testPoint.  The search for a local close point starts at a seed parameter.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seed (double)
Parameter Summary: The seed parameter.
Parameter: t (double)
Parameter Summary: >Parameter of the curve that is closest to testPoint.

Method: Rhino.Geometry.Curve.MakeClosed(double tolerance)
Return: bool
Modifiers: public
Summary: If IsClosed, just return true. Otherwise, decide if curve can be closed as follows: Linear curves polylinear curves with 2 segments, NURBS with 3 or less control points cannot be made closed. Also, if tolerance > 0 and the gap between start and end is larger than tolerance, curve cannot be made closed. Adjust the curve's endpoint to match its start point.
Parameter: tolerance (double)
Parameter Summary: If nonzero, and the gap is more than tolerance, curve cannot be made closed.

Method: Rhino.Geometry.Curve.MaxCurvaturePoints()
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's maximum curvature points. The maximum curvature points identify where the curvature starts to decrease in both directions from the points.

Method: Rhino.Geometry.Curve.MaxCurvaturePoints(out double curveParameters)
Return: Point3d[]
Modifiers: public
Summary: Returns a curve's maximum curvature points. The maximum curvature points identify where the curvature starts to decrease in both directions from the points.
Parameter: curveParameters (double)
Parameter Summary: An array of curve parameters at the maximum curvature points.

Method: Rhino.Geometry.Curve.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: For derived classes implementers.
Defines the necessary implementation to free the instance from being constant.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, double fractionalTolerance, Interval subdomain)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, double fractionalTolerance)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision. fabs(("exact" length from start to t) - arc_length)/arc_length <= fractionalTolerance.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t, Interval subdomain)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve.

Method: Rhino.Geometry.Curve.NormalizedLengthParameter(double s, out double t)
Return: bool
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Normalized arc length parameter. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: t (double)
Parameter Summary: Parameter such that the length of the curve from its start to t is arc_length.

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, double fractionalTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision for each segment. fabs("true" length - actual length)/(actual length) <= fractionalTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve. A 0.0 s value corresponds to sub-domain->Min() and a 1.0 s value corresponds to sub-domain->Max().

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, double fractionalTolerance)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: fractionalTolerance (double)
Parameter Summary: Desired fractional precision for each segment. fabs("true" length - actual length)/(actual length) <= fractionalTolerance.

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance, Interval subdomain)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.
Parameter: subdomain (Interval)
Parameter Summary: The calculation is performed on the specified sub-domain of the curve. A 0.0 s value corresponds to sub-domain->Min() and a 1.0 s value corresponds to sub-domain->Max().

Method: Rhino.Geometry.Curve.NormalizedLengthParameters(double s, double absoluteTolerance)
Return: double
Modifiers: public
Summary: Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. A fractional tolerance of 1e-8 is used in this version of the function.
Parameter: s (double)
Parameter Summary: Array of normalized arc length parameters. E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
Parameter: absoluteTolerance (double)
Parameter Summary: If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length and the length of the curve segment from t[i] to t[i+1] will be <= absoluteTolerance.

Method: Rhino.Geometry.Curve.Offset(Plane plane, double distance, double tolerance, CurveOffsetCornerStyle cornerStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: plane (Plane)
Parameter Summary: Offset solution plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.

Method: Rhino.Geometry.Curve.Offset(Point3d directionPoint, Vector3d normal, double distance, double tolerance, CurveOffsetCornerStyle cornerStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset.
Parameter: normal (Vector3d)
Parameter Summary: The normal to the offset plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.

Method: Rhino.Geometry.Curve.Offset(Point3d directionPoint, Vector3d normal, double distance, double tolerance, double angleTolerance, bool loose, CurveOffsetCornerStyle cornerStyle, CurveOffsetEndStyle endStyle)
Return: Curve[]
Modifiers: public
Summary: Offsets this curve. If you have a nice offset, then there will be one entry in the array. If the original curve had kinks or the offset curve had self intersections, you will get multiple segments in the output array.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset.
Parameter: normal (Vector3d)
Parameter Summary: The normal to the offset plane.
Parameter: distance (double)
Parameter Summary: The positive or negative distance to offset.
Parameter: tolerance (double)
Parameter Summary: The offset or fitting tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance, in radians, used to decide whether to split at kinks.
Parameter: loose (bool)
Parameter Summary: If false, offset within tolerance. If true, offset by moving edit points.
Parameter: cornerStyle (CurveOffsetCornerStyle)
Parameter Summary: Corner style for offset kinks.
Parameter: endStyle (CurveOffsetEndStyle)
Parameter Summary: End style for non-loose, non-closed curve offsets.

Method: Rhino.Geometry.Curve.OffsetNormalToSurface(Surface surface, double height)
Return: Curve
Modifiers: public
Summary: Finds a curve by offsetting an existing curve normal to a surface. The caller is responsible for ensuring that the curve lies on the input surface.
Parameter: surface (Surface)
Parameter Summary: Surface from which normals are calculated.
Parameter: height (double)
Parameter Summary: Offset distance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, double curveParameters, double offsetDistances, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a brep face surface. This curve must lie on the surface.
This overload allows to specify different offsets for different curve parameters. | Since: 5.0 | Parameter: face (BrepFace) | Parameter Summary: The brep face on which to offset. | Parameter: curveParameters (double) | Parameter Summary: Curve parameters corresponding to the offset distances. | Parameter: offsetDistances (double) | Parameter Summary: distances to offset (+)left, (-)right. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, double distance, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset this curve on a brep face surface. This curve must lie on the surface.
Parameter: face (BrepFace)
Parameter Summary: The brep face on which to offset.
Parameter: distance (double)
Parameter Summary: A distance to offset (+)left, (-)right.
Parameter: fittingTolerance (double)
Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(BrepFace face, Point2d throughPoint, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a brep face surface. This curve must lie on the surface.
This overload allows to specify a surface point at which the offset will pass. | Since: 5.0 | Parameter: face (BrepFace) | Parameter Summary: The brep face on which to offset. | Parameter: throughPoint (Point2d) | Parameter Summary: 2d point on the brep face to offset through. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, double curveParameters, double offsetDistances, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset this curve on a surface. This curve must lie on the surface.
This overload allows to specify different offsets for different curve parameters. | Since: 5.0 | Parameter: surface (Surface) | Parameter Summary: A surface on which to offset. | Parameter: curveParameters (double) | Parameter Summary: Curve parameters corresponding to the offset distances. | Parameter: offsetDistances (double) | Parameter Summary: Distances to offset (+)left, (-)right. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, double distance, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a surface. This curve must lie on the surface.
Parameter: surface (Surface)
Parameter Summary: A surface on which to offset.
Parameter: distance (double)
Parameter Summary: A distance to offset (+)left, (-)right.
Parameter: fittingTolerance (double)
Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetOnSurface(Surface surface, Point2d throughPoint, double fittingTolerance)
Return: Curve[]
Modifiers: public
Summary: Offset a curve on a surface. This curve must lie on the surface.
This overload allows to specify a surface point at which the offset will pass. | Since: 5.0 | Parameter: surface (Surface) | Parameter Summary: A surface on which to offset. | Parameter: throughPoint (Point2d) | Parameter Summary: 2d point on the brep face to offset through. | Parameter: fittingTolerance (double) | Parameter Summary: A fitting tolerance.

Method: Rhino.Geometry.Curve.OffsetTangentToSurface(Surface surface, double height)
Return: Curve
Modifiers: public
Summary: Finds a curve by offsetting an existing curve tangent to a surface. The caller is responsible for ensuring that the curve lies on the input surface.
Parameter: surface (Surface)
Parameter Summary: Surface from which tangents are calculated.
Parameter: height (double)
Parameter Summary: Offset distance.

Method: Rhino.Geometry.Curve.PerpendicularFrameAt(double t, out Plane plane)
Return: bool
Modifiers: public
Summary: Return a 3d frame at a parameter. This is slightly different than FrameAt in that the frame is computed in a way so there is minimal rotation from one frame to the next.
Parameter: t (double)
Parameter Summary: Evaluation parameter.
Parameter: plane (Plane)
Parameter Summary: The frame is returned here.

Method: Rhino.Geometry.Curve.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Evaluates point at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.PointAtLength(double length)
Return: Point3d
Modifiers: public
Summary: Gets a point at a certain length along the curve. The length must be non-negative and less than or equal to the length of the curve. Lengths will not be wrapped when the curve is closed or periodic.
Parameter: length (double)
Parameter Summary: Length along the curve between the start point and the returned point.

Method: Rhino.Geometry.Curve.PointAtNormalizedLength(double length)
Return: Point3d
Modifiers: public
Summary: Gets a point at a certain normalized length along the curve. The length must be between or including 0.0 and 1.0, where 0.0 equals the start of the curve and 1.0 equals the end of the curve.
Parameter: length (double)
Parameter Summary: Normalized length along the curve between the start point and the returned point.

Method: Rhino.Geometry.Curve.PullToBrepFace(BrepFace face, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Pulls this curve to a brep face and returns the result of that operation.
Parameter: face (BrepFace)
Parameter Summary: A brep face.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Curve.PullToMesh(Mesh mesh, double tolerance)
Return: PolylineCurve
Modifiers: public
Summary: Makes a polyline approximation of the curve and gets the closest point on the mesh for each point on the curve. Then it "connects the points" so that you have a polyline on the mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to project onto.
Parameter: tolerance (double)
Parameter Summary: Input tolerance (RhinoDoc.ModelAbsoluteTolerance is a good default)

Method: Rhino.Geometry.Curve.Rebuild(int pointCount, int degree, bool preserveTangents)
Return: NurbsCurve
Modifiers: public
Summary: Rebuild a curve with a specific point count.
Parameter: pointCount (int)
Parameter Summary: Number of control points in the rebuild curve.
Parameter: degree (int)
Parameter Summary: Degree of curve. Valid values are between and including 1 and 11.
Parameter: preserveTangents (bool)
Parameter Summary: If true, the end tangents of the input curve will be preserved.

Method: Rhino.Geometry.Curve.RemoveShortSegments(double tolerance)
Return: bool
Modifiers: public
Summary: Looks for segments that are shorter than tolerance that can be removed. Does not change the domain, but it will change the relative parameterization.
Parameter: tolerance (double)
Parameter Summary: Tolerance which defines "short" segments.

Method: Rhino.Geometry.Curve.Repair(double tolerance)
Return: bool
Modifiers: public
Summary: Repairs a curve.
Parameter: tolerance (double)
Parameter Summary: The repair tolerance.

Method: Rhino.Geometry.Curve.Reparameterize()
Return: Curve
Modifiers: public
Summary: Reparameterizes a curve using automatic parameterization.

Method: Rhino.Geometry.Curve.Reverse()
Return: bool
Modifiers: public
Summary: Reverses the direction of the curve.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance, out Curve[] crossSections, out Surface[] ruledSurfaces)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.
Parameter: crossSections (Curve[])
Parameter Summary: Contains lines between input and the offset that might be useful as input to Brep.CreateFromSweep or some other surface creation tool.
Parameter: ruledSurfaces (Surface[])
Parameter Summary: Contain ruled surfaces between the input and the parts of the offset that correspond exactly. Note, there will be gaps between these at blends.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance, out double outputParameters, out double curveParameters)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.
Parameter: outputParameters (double)
Parameter Summary: A list of parameter, paired with curveParameters, from the output curve for creating cross sections.
Parameter: curveParameters (double)
Parameter Summary: A list of parameter, paired with outputParameters, from the input curve for creating cross sections.

Method: Rhino.Geometry.Curve.RibbonOffset(double distance, double blendRadius, Point3d directionPoint, Vector3d normal, double tolerance)
Return: Curve
Modifiers: public
Summary: Offsets a closed curve in the following way: pProject the curve to a plane with given normal. Then, loose Offset the projection by distance + blend_radius and trim off self-intersection. THen, Offset the remaining curve back in the opposite direction by blend_radius, filling gaps with blends. Finally, use the elevations of the input curve to get the correct elevations of the result.
Parameter: distance (double)
Parameter Summary: The positive distance to offset the curve.
Parameter: blendRadius (double)
Parameter Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Parameter: directionPoint (Point3d)
Parameter Summary: A point that indicates the direction of the offset. If the offset is inward, the point's projection to the plane should be well within the curve. It will be used to decide which part of the offset to keep if there are self-intersections.
Parameter: normal (Vector3d)
Parameter Summary: A vector that indicates the normal of the plane in which the offset will occur.
Parameter: tolerance (double)
Parameter Summary: Used to determine self-intersections, not offset error.

Method: Rhino.Geometry.Curve.RibbonOffset(RibbonOffsetParameters ribbonParameters, out Curve[] railCurves, out Curve[] crossSectionCurves, out Brep[] brepSurfaces)
Return: Curve
Modifiers: public
Summary: Ribbon offset method to mimic RibbonOffset command
Parameter: ribbonParameters (RibbonOffsetParameters)
Parameter Summary: The ribbon offset parameters
Parameter: railCurves (Curve[])
Parameter Summary: on success an array of split curves representing the sweep rail segments, None on failure
Parameter: crossSectionCurves (Curve[])
Parameter Summary: on success an array of cross section curves used during brep creation, None on failure
Parameter: brepSurfaces (Brep[])
Parameter Summary: on success and array of breps representing the ribbon surfaces, None on failure

Method: Rhino.Geometry.Curve.SetEndPoint(Point3d point)
Return: bool
Modifiers: public
Summary: Forces the curve to end at a specified point. Not all curve types support this operation.
Parameter: point (Point3d)
Parameter Summary: New end point of curve.

Method: Rhino.Geometry.Curve.SetStartPoint(Point3d point)
Return: bool
Modifiers: public
Summary: Forces the curve to start at a specified point. Not all curve types support this operation.
Parameter: point (Point3d)
Parameter Summary: New start point of curve.

Method: Rhino.Geometry.Curve.Simplify(CurveSimplifyOptions options, double distanceTolerance, double angleToleranceRadians)
Return: Curve
Modifiers: public
Summary: Returns a geometrically equivalent PolyCurve.
The PolyCurve has the following properties
1. All the PolyCurve segments are LineCurve, PolylineCurve, ArcCurve, or NurbsCurve.
2. The NURBS Curves segments do not have fully multiple interior knots.
3. Rational NURBS curves do not have constant weights.
4. Any segment for which IsLinear() or IsArc() is True is a Line,         Polyline segment, or an Arc.
5. Adjacent co-linear or co-circular segments are combined.
6. Segments that meet with G1-continuity have there ends tuned up so        that they meet with G1-continuity to within machine precision. | Since: 5.0 | Parameter: options (CurveSimplifyOptions) | Parameter Summary: Simplification options. | Parameter: distanceTolerance (double) | Parameter Summary: A distance tolerance for the simplification. | Parameter: angleToleranceRadians (double) | Parameter Summary: An angle tolerance for the simplification.

Method: Rhino.Geometry.Curve.SimplifyEnd(CurveEnd end, CurveSimplifyOptions options, double distanceTolerance, double angleToleranceRadians)
Return: Curve
Modifiers: public
Summary: Same as SimplifyCurve, but simplifies only the last two segments at "side" end.
Parameter: end (CurveEnd)
Parameter Summary: If CurveEnd.Start the function simplifies the last two start side segments, otherwise if CurveEnd.End the last two end side segments are simplified.
Parameter: options (CurveSimplifyOptions)
Parameter Summary: Simplification options.
Parameter: distanceTolerance (double)
Parameter Summary: A distance tolerance for the simplification.
Parameter: angleToleranceRadians (double)
Parameter Summary: An angle tolerance for the simplification.

Method: Rhino.Geometry.Curve.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: Curve
Modifiers: public
Summary: Smooths a curve by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points. Note that this smoothFactor is equivalent to twice the smooth factor used in the Smooth command: on a polyline, Rhino _Smooth with a factor of 0.2 is the same as <b>Polyline.Smooth(double)</b> with a factor of 0.4.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the curve ends don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Curve.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: Curve
Modifiers: public
Summary: Smooths a curve by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points. Note that this smoothFactor is equivalent to twice the smooth factor used in the Smooth command: on a polyline, Rhino _Smooth with a factor of 0.2 is the same as <b>Polyline.Smooth(double)</b> with a factor of 0.4.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the curve ends don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Curve.SpanDomain(int spanIndex)
Return: Interval
Modifiers: public
Summary: Get the domain of the curve span with the given index. Use the SpanCount property to test how many spans there are.
Parameter: spanIndex (int)
Parameter Summary: Index of span.

Method: Rhino.Geometry.Curve.SpanVector()
Return: double
Modifiers: public

Method: Rhino.Geometry.Curve.Split(Brep cutter, double tolerance, double angleToleranceRadians)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a polysurface.
Parameter: cutter (Brep)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.
Parameter: angleToleranceRadians (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.Split(Brep cutter, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a polysurface.
Parameter: cutter (Brep)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.

Method: Rhino.Geometry.Curve.Split(double t)
Return: Curve[]
Modifiers: public
Summary: Splits (divides) the curve at the specified parameter. The parameter must be in the interior of the curve's domain.
Parameter: t (double)
Parameter Summary: Parameter to split the curve at in the interval returned by Domain().

Method: Rhino.Geometry.Curve.Split(IEnumerable<double> t)
Return: Curve[]
Modifiers: public
Summary: Splits (divides) the curve at a series of specified parameters. The parameter must be in the interior of the curve domain.
Parameter: t (IEnumerable<double>)
Parameter Summary: Parameters to split the curve at in the interval returned by Domain().

Method: Rhino.Geometry.Curve.Split(Surface cutter, double tolerance, double angleToleranceRadians)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a surface.
Parameter: cutter (Surface)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.
Parameter: angleToleranceRadians (double)
Parameter Summary:

Method: Rhino.Geometry.Curve.Split(Surface cutter, double tolerance)
Return: Curve[]
Modifiers: public
Summary: Splits a curve into pieces using a surface.
Parameter: cutter (Surface)
Parameter Summary: A cutting surface or polysurface.
Parameter: tolerance (double)
Parameter Summary: A tolerance for computing intersections.

Method: Rhino.Geometry.Curve.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Evaluates the unit tangent vector at a curve parameter.
Parameter: t (double)
Parameter Summary: Evaluation parameter.

Method: Rhino.Geometry.Curve.ToArcsAndLines(double tolerance, double angleTolerance, double minimumLength, double maximumLength)
Return: PolyCurve
Modifiers: public
Summary: Converts a curve into polycurve consisting of arc segments. Sections of the input curves that are nearly straight are converted to straight-line segments.
Parameter: tolerance (double)
Parameter Summary: The tolerance. This is the maximum deviation from arc midpoints to the curve. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. This is the maximum deviation of the arc end directions from the curve direction. When in doubt, use the document's model space angle tolerance.
Parameter: minimumLength (double)
Parameter Summary: The minimum segment length.
Parameter: maximumLength (double)
Parameter Summary: The maximum segment length.

Method: Rhino.Geometry.Curve.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.

Method: Rhino.Geometry.Curve.ToNurbsCurve(Interval subdomain)
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve representation of this curve.
Parameter: subdomain (Interval)
Parameter Summary: The NURBS representation for this portion of the curve is returned.

Method: Rhino.Geometry.Curve.ToPolyline(double tolerance, double angleTolerance, double minimumLength, double maximumLength)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: tolerance (double)
Parameter Summary: The tolerance. This is the maximum deviation from line midpoints to the curve. When in doubt, use the document's model space absolute tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians. This is the maximum deviation of the line directions. When in doubt, use the document's model space angle tolerance.
Parameter: minimumLength (double)
Parameter Summary: The minimum segment length.
Parameter: maximumLength (double)
Parameter Summary: The maximum segment length.

Method: Rhino.Geometry.Curve.ToPolyline(int mainSegmentCount, int subSegmentCount, double maxAngleRadians, double maxChordLengthRatio, double maxAspectRatio, double tolerance, double minEdgeLength, double maxEdgeLength, bool keepStartPoint, Interval curveDomain)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: mainSegmentCount (int)
Parameter Summary: If mainSegmentCount <= 0, then both subSegmentCount and mainSegmentCount are ignored. If mainSegmentCount > 0, then subSegmentCount must be >= 1. In this case the NURBS will be broken into mainSegmentCount equally spaced chords. If needed, each of these chords can be split into as many subSegmentCount sub-parts if the subdivision is necessary for the mesh to meet the other meshing constraints. In particular, if subSegmentCount = 0, then the curve is broken into mainSegmentCount pieces and no further testing is performed.
Parameter: subSegmentCount (int)
Parameter Summary: An amount of subsegments.
Parameter: maxAngleRadians (double)
Parameter Summary: ( 0 to pi ) Maximum angle (in radians) between unit tangents at adjacent vertices.
Parameter: maxChordLengthRatio (double)
Parameter Summary: Maximum permitted value of (distance chord midpoint to curve) / (length of chord).
Parameter: maxAspectRatio (double)
Parameter Summary: If maxAspectRatio < 1.0, the parameter is ignored. If 1 <= maxAspectRatio < sqrt(2), it is treated as if maxAspectRatio = sqrt(2). This parameter controls the maximum permitted value of (length of longest chord) / (length of shortest chord).
Parameter: tolerance (double)
Parameter Summary: If tolerance = 0, the parameter is ignored. This parameter controls the maximum permitted value of the distance from the curve to the polyline.
Parameter: minEdgeLength (double)
Parameter Summary: The minimum permitted edge length.
Parameter: maxEdgeLength (double)
Parameter Summary: If maxEdgeLength = 0, the parameter is ignored. This parameter controls the maximum permitted edge length.
Parameter: keepStartPoint (bool)
Parameter Summary: If True the starting point of the curve is added to the polyline. If False the starting point of the curve is not added to the polyline.
Parameter: curveDomain (Interval)
Parameter Summary: This sub-domain of the NURBS curve is approximated.

Method: Rhino.Geometry.Curve.ToPolyline(int mainSegmentCount, int subSegmentCount, double maxAngleRadians, double maxChordLengthRatio, double maxAspectRatio, double tolerance, double minEdgeLength, double maxEdgeLength, bool keepStartPoint)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of a curve.
Parameter: mainSegmentCount (int)
Parameter Summary: If mainSegmentCount <= 0, then both subSegmentCount and mainSegmentCount are ignored. If mainSegmentCount > 0, then subSegmentCount must be >= 1. In this case the NURBS will be broken into mainSegmentCount equally spaced chords. If needed, each of these chords can be split into as many subSegmentCount sub-parts if the subdivision is necessary for the mesh to meet the other meshing constraints. In particular, if subSegmentCount = 0, then the curve is broken into mainSegmentCount pieces and no further testing is performed.
Parameter: subSegmentCount (int)
Parameter Summary: An amount of subsegments.
Parameter: maxAngleRadians (double)
Parameter Summary: ( 0 to pi ) Maximum angle (in radians) between unit tangents at adjacent vertices.
Parameter: maxChordLengthRatio (double)
Parameter Summary: Maximum permitted value of (distance chord midpoint to curve) / (length of chord).
Parameter: maxAspectRatio (double)
Parameter Summary: If maxAspectRatio < 1.0, the parameter is ignored. If 1 <= maxAspectRatio < sqrt(2), it is treated as if maxAspectRatio = sqrt(2). This parameter controls the maximum permitted value of (length of longest chord) / (length of shortest chord).
Parameter: tolerance (double)
Parameter Summary: If tolerance = 0, the parameter is ignored. This parameter controls the maximum permitted value of the distance from the curve to the polyline.
Parameter: minEdgeLength (double)
Parameter Summary: The minimum permitted edge length.
Parameter: maxEdgeLength (double)
Parameter Summary: If maxEdgeLength = 0, the parameter is ignored. This parameter controls the maximum permitted edge length.
Parameter: keepStartPoint (bool)
Parameter Summary: If True the starting point of the curve is added to the polyline. If False the starting point of the curve is not added to the polyline.

Method: Rhino.Geometry.Curve.TorsionAt(double t)
Return: double
Modifiers: public
Summary: Evaluate the torsion of a curve at a parameter. Sometimes also called the "second curvature", torsion is the rate of change of a curve's osculating plane.
Parameter: t (double)
Parameter Summary: The evaluation parameter.

Method: Rhino.Geometry.Curve.Trim(CurveEnd side, double length)
Return: Curve
Modifiers: public
Summary: Shortens a curve by a given length

Method: Rhino.Geometry.Curve.Trim(double t0, double t1)
Return: Curve
Modifiers: public
Summary: Removes portions of the curve outside the specified interval.
Parameter: t0 (double)
Parameter Summary: Start of the trimming interval. Portions of the curve before curve(t0) are removed.
Parameter: t1 (double)
Parameter Summary: End of the trimming interval. Portions of the curve after curve(t1) are removed.

Method: Rhino.Geometry.Curve.Trim(Interval domain)
Return: Curve
Modifiers: public
Summary: Removes portions of the curve outside the specified interval.
Parameter: domain (Interval)
Parameter Summary: Trimming interval. Portions of the curve before curve(domain[0]) and after curve(domain[1]) are removed.

Method: Rhino.Geometry.Curve.TryGetArc(out Arc arc, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using a custom tolerance.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetArc(out Arc arc)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.

Method: Rhino.Geometry.Curve.TryGetArc(Plane plane, out Arc arc, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using a custom tolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetArc(Plane plane, out Arc arc)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: arc (Arc)
Parameter Summary: On success, the Arc will be filled in.

Method: Rhino.Geometry.Curve.TryGetCircle(out Circle circle, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into a Circle using a custom tolerance.
Parameter: circle (Circle)
Parameter Summary: On success, the Circle will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetCircle(out Circle circle)
Return: bool
Modifiers: public
Summary: Try to convert this curve into a circle using RhinoMath.ZeroTolerance.
Parameter: circle (Circle)
Parameter Summary: On success, the Circle will be filled in.

Method: Rhino.Geometry.Curve.TryGetEllipse(out Ellipse ellipse, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse using a custom tolerance.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetEllipse(out Ellipse ellipse)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.

Method: Rhino.Geometry.Curve.TryGetEllipse(Plane plane, out Ellipse ellipse, double tolerance)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse using a custom tolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetEllipse(Plane plane, out Ellipse ellipse)
Return: bool
Modifiers: public
Summary: Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
Parameter: plane (Plane)
Parameter Summary: Plane in which the comparison is performed.
Parameter: ellipse (Ellipse)
Parameter Summary: On success, the Ellipse will be filled in.

Method: Rhino.Geometry.Curve.TryGetPlane(out Plane plane, double tolerance)
Return: bool
Modifiers: public
Summary: Test a curve for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use when checking.

Method: Rhino.Geometry.Curve.TryGetPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Test a curve for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.

Method: Rhino.Geometry.Curve.TryGetPolyline(out Polyline polyline, out double parameters)
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.
Parameter: polyline (Polyline)
Parameter Summary: If True is returned, then the polyline form is returned here.
Parameter: parameters (double)
Parameter Summary: if True is returned, then the parameters of the polyline points are returned here.

Method: Rhino.Geometry.Curve.TryGetPolyline(out Polyline polyline)
Return: bool
Modifiers: public
Summary: Several types of Curve can have the form of a polyline including a degree 1 NurbsCurve, a PolylineCurve, and a PolyCurve all of whose segments are some form of polyline. IsPolyline tests a curve to see if it can be represented as a polyline.
Parameter: polyline (Polyline)
Parameter Summary: If True is returned, then the polyline form is returned here.

Class: Rhino.Geometry.CurveBooleanRegions
Summary: Represents the results of a Curve.CreateBooleanRegions calculation.

Constructor: Rhino.Geometry.CurveBooleanRegions.CurveBooleanRegions(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.CurveBooleanRegions.PlanarCurveCount
Return: int
Modifiers: public
Summary: Returns number of planar curves that were calculated by Curve.CreateBooleanRegions.
Accessors: get

Property: Rhino.Geometry.CurveBooleanRegions.PointCount
Return: int
Modifiers: public
Summary: If this object were created using the Curve.CreateBooleanRegions override that accepts a collection of points as input, then this value will be equal to the length of the points collection.
Accessors: get

Property: Rhino.Geometry.CurveBooleanRegions.RegionCount
Return: int
Modifiers: public
Summary: Returns the number of curve regions. A curve region is a collection of curves that bound a single connected region of the plane.
Accessors: get

Method: Rhino.Geometry.CurveBooleanRegions.BoundaryCount(int regionIndex)
Return: int
Modifiers: public
Summary: Returns the number of boundary curves in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.

Method: Rhino.Geometry.CurveBooleanRegions.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.CurveBooleanRegions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: This method is called with argument True when class user calls Dispose(), while with argument False when the Garbage Collector invokes the finalizer, or Finalize() method. You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true. Also, you must call the base virtual method within your overriding method.

Method: Rhino.Geometry.CurveBooleanRegions.PlanarCurve(int planarCurveIndex)
Return: Curve
Modifiers: public
Summary: Returns a planar curve that was calculated by Curve.CreateBooleanRegions.

Method: Rhino.Geometry.CurveBooleanRegions.RegionCurves(int regionIndex)
Return: Curve[]
Modifiers: public
Summary: Returns the boundary curves in a curve region. A curve region is a collection of curves that bound a single connected region of the plane. Note, the first curve is always the outer boundary.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.

Method: Rhino.Geometry.CurveBooleanRegions.RegionPointIndex(int pointIndex)
Return: int
Modifiers: public
Summary: If this object were created using the Curve.CreateBooleanRegions override that accepts a collection of points as input, then you this method to retrieve the index of the point contained in a curve region. If this.RegionPointIndex(i) = n, then points[i] is contained in this.RegionCurves(n). If points[i] is not in any region, then this.RegionPointIndex(i) = -1.
Parameter: pointIndex (int)
Parameter Summary: The point index.

Method: Rhino.Geometry.CurveBooleanRegions.SegmentCount(int regionIndex, int boundaryIndex)
Return: int
Modifiers: public
Summary: Returns the number of segments in a boundary curve in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.
Parameter: boundaryIndex (int)
Parameter Summary: The boundary curve index.

Method: Rhino.Geometry.CurveBooleanRegions.SegmentDetails(int regionIndex, int boundaryIndex, int segmmentIndex, out Interval subDomain, out bool reversed)
Return: int
Modifiers: public
Summary: Returns the details of a segment in a boundary curve in a curve region.
Parameter: regionIndex (int)
Parameter Summary: The curve region index.
Parameter: boundaryIndex (int)
Parameter Summary: The boundary curve index.
Parameter: segmmentIndex (int)
Parameter Summary: The segment index.
Parameter: subDomain (Interval)
Parameter Summary: The sub-domain of the planar curve used by the segment.
Parameter: reversed (bool)
Parameter Summary: True if the piece of the planar curve should be reversed.

Class: Rhino.Geometry.CurveProxy
Summary: Represent curve geometry. Usually this is part of another piece of geometry that can be represented as a "proxy".

Constructor: Rhino.Geometry.CurveProxy.CurveProxy()
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.CurveProxy.ProxyCurveIsReversed
Return: bool
Modifiers: public
Summary: True if "this" is a curve is reversed from the "real" curve geometry
Accessors: get

Class: Rhino.Geometry.DetailView
Summary: Represents a view of the model placed on a page layout.

Constructor: Rhino.Geometry.DetailView.DetailView(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.DetailView.IsParallelProjection
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is parallel.
Accessors: get set

Property: Rhino.Geometry.DetailView.IsPerspectiveProjection
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is perspective.
Accessors: get set

Property: Rhino.Geometry.DetailView.IsProjectionLocked
Return: bool
Modifiers: public
Summary: Gets or sets whether the view is locked.
Accessors: get set

Property: Rhino.Geometry.DetailView.PageToModelRatio
Return: double
Modifiers: public
Summary: Gets the page units/model units quotient.
Accessors: get

Method: Rhino.Geometry.DetailView.SetScale(double modelLength, Rhino.UnitSystem modelUnits, double pageLength, Rhino.UnitSystem pageUnits)
Return: bool
Modifiers: public
Summary: Sets the detail viewport's projection so geometry is displayed at a certain scale.
Parameter: modelLength (double)
Parameter Summary: Reference model length.
Parameter: modelUnits (Rhino.UnitSystem)
Parameter Summary: Units for model length.
Parameter: pageLength (double)
Parameter Summary: Length on page that the modelLength should equal.
Parameter: pageUnits (Rhino.UnitSystem)
Parameter Summary: Units for page length.

Class: Rhino.Geometry.DevelopableSrf
Summary: Helpers for developable surface functions

Constructor: Rhino.Geometry.DevelopableSrf.DevelopableSrf()
Summary: Initializes a new instance of the DevelopableSrf class

Method: Rhino.Geometry.DevelopableSrf.GetLocalDevopableRuling(NurbsCurve rail0, double t0, Interval dom0, NurbsCurve rail1, double t1, Interval dom1, ref double t0_out, ref double t1_out)
Return: int
Modifiers: static, public
Summary: Finds minimum twist ruling between 2 curves at local domains
Parameter: rail0 (NurbsCurve)
Parameter Summary: First rail
Parameter: t0 (double)
Parameter Summary: Seed parameter on first rail
Parameter: dom0 (Interval)
Parameter Summary: Parameter sub-domain to adjust in on first rail
Parameter: rail1 (NurbsCurve)
Parameter Summary: Second rail
Parameter: t1 (double)
Parameter Summary: Seed parameter on second rail
Parameter: dom1 (Interval)
Parameter Summary: Parameter sub-domain to adjust in on second rail
Parameter: t0_out (double)
Parameter Summary: Result ruling on first rail
Parameter: t1_out (double)
Parameter Summary: Result ruling on second rail

Method: Rhino.Geometry.DevelopableSrf.RulingMinTwist(NurbsCurve rail0, double t0, Interval dom0, NurbsCurve rail1, double t1, Interval dom1, ref double t0_out, ref double t1_out, ref double cos_twist_out)
Return: bool
Modifiers: static, public
Summary: Find a ruling from rail0(t0_out) to rail1(t1_out) that has the least twist across the ruling with t0_out in domain0 and t1_out in domain1. max_cos_twist is cos(twist) for the returned ruling

Method: Rhino.Geometry.DevelopableSrf.RulingMinTwist(NurbsCurve rail0, double t0, NurbsCurve rail1, double t1, Interval dom1, ref double t1_out, ref double cos_twist_out)
Return: bool
Modifiers: static, public
Summary: Find a ruling from rail0(t0) to rail1(t1_out) that has the least twist across the ruling with t1_out in domain1. max_cos_twist is cos(twist) for the returned ruling

Method: Rhino.Geometry.DevelopableSrf.UntwistRulings(NurbsCurve rail0, NurbsCurve rail1, ref IEnumerable<Point2d> rulings)
Return: bool
Modifiers: static, public

Class: Rhino.Geometry.Dimension
Summary: Base class for dimensions

Constructor: Rhino.Geometry.Dimension.Dimension()

Constructor: Rhino.Geometry.Dimension.Dimension(SerializationInfo info, StreamingContext context)

Property: Rhino.Geometry.Dimension.AlternateBelowLine
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltLengthRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltPrefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltSuffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltUnitsDisplay
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.AltZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowBlockId1
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowBlockId2
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowFit
Return: ArrowFit
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowheadType1
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowheadType2
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ArrowSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.BaselineSpacing
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.CentermarkSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.CentermarkStyle
Return: CenterMarkStyle
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DetailMeasured
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DimensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.DistanceScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ExtensionLineExtension
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ExtensionLineOffset
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.FixedExtensionLength
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.FixedLengthExtensionOn
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceArrowPosition
Return: ForceArrow
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceDimensionLineBetweenExtensionLines
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceDimLine
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ForceTextPosition
Return: ForceText
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthFactor
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.LengthRoundoff
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.NumericValue
Return: double
Modifiers: public
Summary: Gets the numeric value (or measurement), depending on geometry type.
LinearDimension: distance between arrow tips
RadialDimension: radius or diameter depending on type
AngularDimension: angle in radians | Since: 6.0 | Accessors: get

Property: Rhino.Geometry.Dimension.PlainUserText
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Geometry.Dimension.Prefix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.Suffix
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.SuppressExtension1
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.SuppressExtension2
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.TextAngleType
Return: LeaderContentAngleStyle
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextFit
Return: TextFit
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.TextFormula
Return: string
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.Dimension.TextLocation
Return: TextLocation
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextOrientation
Return: TextOrientation
Modifiers: public, virtual
Accessors: get set

Property: Rhino.Geometry.Dimension.TextPosition
Return: Point2d
Modifiers: public
Summary: Gets and sets the position of text on the plane.
Accessors: get set

Property: Rhino.Geometry.Dimension.TextRotation
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceFormat
Return: ToleranceDisplayFormat
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceHeightScale
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceLowerValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceResolution
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ToleranceUpperValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.UseDefaultTextPoint
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Dimension.ZeroSuppression
Return: ZeroSuppression
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.Dimension.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Explodes this dimension into its geometric components.

Method: Rhino.Geometry.Dimension.GetTextTransform(ViewportInfo viewport, DimensionStyle style, double textScale, bool drawForward)
Return: Transform
Modifiers: public
Summary: Get the transform for this text object's text geometry
Parameter: viewport (ViewportInfo)
Parameter Summary: Viewport where text is being used
Parameter: style (DimensionStyle)
Parameter Summary: Dimension's DimensionStyle
Parameter: textScale (double)
Parameter Summary: Scale to apply to text
Parameter: drawForward (bool)
Parameter Summary: Draw text front-facing

Method: Rhino.Geometry.Dimension.SetAltDimensionLengthDisplayWithZeroSuppressionReset(DimensionStyle.LengthDisplay ld)
Return: void
Modifiers: public

Method: Rhino.Geometry.Dimension.SetDimensionLengthDisplayWithZeroSuppressionReset(DimensionStyle.LengthDisplay ld)
Return: void
Modifiers: public

Method: Rhino.Geometry.Dimension.UpdateDimensionText(DimensionStyle style, UnitSystem units)
Return: void
Modifiers: public
Summary: Remakes dimension text geometry object and sets it on the dimension.
Parameter: style (DimensionStyle)
Parameter Summary: The dimension style.
Parameter: units (UnitSystem)
Parameter Summary: The unit system.

Class: Rhino.Geometry.Extrusion
Summary: Represents an extrusion, or objects such as beams or linearly extruded elements, that can be represented by profile curves and two miter planes at the extremes.

Constructor: Rhino.Geometry.Extrusion.Extrusion()
Summary: Initializes a new instance of the <b>Extrusion</b> class.

Constructor: Rhino.Geometry.Extrusion.Extrusion(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor.

Property: Rhino.Geometry.Extrusion.CapCount
Return: int
Modifiers: public
Summary: Gets the amount of capping surfaces.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsCappedAtBottom
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the surface that fills the bottom profile is existing.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsCappedAtTop
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the surface that fills the top profile is existing.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsMiteredAtEnd
Return: bool
Modifiers: public
Summary: Gets a value indicating whether a miter plane at the end is defined.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsMiteredAtStart
Return: bool
Modifiers: public
Summary: Returns a value indicating whether a miter plane at start is defined.
Accessors: get

Property: Rhino.Geometry.Extrusion.IsSolid
Return: bool
Modifiers: public, override
Summary: Gets a value indicating whether there is no gap among all surfaces constructing this object.
Accessors: get

Property: Rhino.Geometry.Extrusion.MiterPlaneNormalAtEnd
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal of the miter plane at the end in profile coordinates. In profile coordinates, 0,0,1 always maps to the extrusion axis
Accessors: get set

Property: Rhino.Geometry.Extrusion.MiterPlaneNormalAtStart
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal of the miter plane at the start in profile coordinates. In profile coordinates, 0,0,1 always maps to the extrusion axis
Accessors: get set

Property: Rhino.Geometry.Extrusion.PathEnd
Return: Point3d
Modifiers: public
Summary: Gets the end point of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.PathStart
Return: Point3d
Modifiers: public
Summary: Gets the start point of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.PathTangent
Return: Vector3d
Modifiers: public
Summary: Gets the up vector of the path.
Accessors: get

Property: Rhino.Geometry.Extrusion.ProfileCount
Return: int
Modifiers: public
Summary: Gets the amount of profile curves.
Accessors: get

Method: Rhino.Geometry.Extrusion.Create(Curve planarCurve, double height, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Creates an extrusion of a 3d curve (which must be planar) and a height.
Parameter: planarCurve (Curve)
Parameter Summary: Planar curve used as profile
Parameter: height (double)
Parameter Summary: If the height > 0, the bottom of the extrusion will be in plane and the top will be height units above the plane. If the height < 0, the top of the extrusion will be in plane and the bottom will be height units below the plane. The plane used is the one that is returned from the curve's TryGetPlane function.
Parameter: cap (bool)
Parameter Summary: If the curve is closed and cap is true, then the resulting extrusion is capped.

Method: Rhino.Geometry.Extrusion.Create(Curve curve, Plane plane, double height, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Create an extrusion from a 3d curve, a plane and a height.
Parameter: curve (Curve)
Parameter Summary: A continuous 3d curve.
Parameter: plane (Plane)
Parameter Summary: A plane. The 3d curve is projected to this plane and the result is passed to <b>Extrusion.SetOuterProfile</b> .
Parameter: height (double)
Parameter Summary: If the height > 0, the bottom of the extrusion will be in plane and the top will be height units above the plane. If the height < 0, the top of the extrusion will be in plane and the bottom will be height units below the plane. The plane used is the one that is returned from the curve's TryGetPlane function.
Parameter: cap (bool)
Parameter Summary: If the curve is closed and cap is true, then the resulting extrusion is capped.

Method: Rhino.Geometry.Extrusion.CreateBoxExtrusion(Box box, bool cap)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion from a box.
Parameter: box (Box)
Parameter Summary: IsValid must be true.
Parameter: cap (bool)
Parameter Summary: If true, the base and the top of the box will be capped. Defaults to true.

Method: Rhino.Geometry.Extrusion.CreateCylinderExtrusion(Cylinder cylinder, bool capBottom, bool capTop)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion form of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: IsFinite must be true.
Parameter: capBottom (bool)
Parameter Summary: If true, the end at cylinder.Height1 will be capped.
Parameter: capTop (bool)
Parameter Summary: If true, the end at cylinder.Height2 will be capped.

Method: Rhino.Geometry.Extrusion.CreatePipeExtrusion(Cylinder cylinder, double otherRadius, bool capTop, bool capBottom)
Return: Extrusion
Modifiers: public, static
Summary: Gets an extrusion form of a pipe.
Parameter: cylinder (Cylinder)
Parameter Summary: IsFinite must be true.
Parameter: otherRadius (double)
Parameter Summary: If cylinder.Radius is less than other radius, then the cylinder will be the inside of the pipe.
Parameter: capTop (bool)
Parameter Summary: If true, the end at cylinder.Height2 will be capped.
Parameter: capBottom (bool)
Parameter Summary: If true, the end at cylinder.Height1 will be capped.

Method: Rhino.Geometry.Extrusion.AddInnerProfile(Curve innerProfile)
Return: bool
Modifiers: public
Summary: Adds an inner profile.
Parameter: innerProfile (Curve)
Parameter Summary: Closed curve in the XY plane or a 2d curve.

Method: Rhino.Geometry.Extrusion.GetBrepFormComponentIndex(ComponentIndex extrusionComponentIndex)
Return: ComponentIndex
Modifiers: public
Summary: Convert a component index that identifies a part of this extrusion to a component index that identifies a part of the Brep created by Extrusion.ToBrep(false).
Parameter: extrusionComponentIndex (ComponentIndex)
Parameter Summary: The extrusion component index.

Method: Rhino.Geometry.Extrusion.GetMesh(MeshType meshType)
Return: Mesh
Modifiers: public
Summary: Obtains a reference to a specified type of mesh for this extrusion.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.Extrusion.GetPathPlane(double s)
Return: Plane
Modifiers: public
Summary: Gets the 3D plane perpendicular to the path at a normalized path parameter.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetProfilePlane(double s)
Return: Plane
Modifiers: public
Summary: Gets the 3D plane containing the profile curve at a normalized path parameter.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetProfileTransformation(double s)
Return: Transform
Modifiers: public
Summary: Gets the transformation that maps the XY profile curve to its 3d location.
Parameter: s (double)
Parameter Summary: 0.0 = starting profile 1.0 = ending profile.

Method: Rhino.Geometry.Extrusion.GetWireframe()
Return: Curve[]
Modifiers: public
Summary: Constructs all the Wireframe curves for this Extrusion.

Method: Rhino.Geometry.Extrusion.PathLineCurve()
Return: LineCurve
Modifiers: public
Summary: Gets the line-like curve that is the conceptual axis of the extrusion.

Method: Rhino.Geometry.Extrusion.Profile3d(ComponentIndex ci)
Return: Curve
Modifiers: public
Summary: Gets one of the profiles.
Parameter: ci (ComponentIndex)
Parameter Summary: The index of this profile.

Method: Rhino.Geometry.Extrusion.Profile3d(int profileIndex, double s)
Return: Curve
Modifiers: public
Summary: Gets a transversal isocurve of the extruded profile.
Parameter: profileIndex (int)
Parameter Summary: 0 <= profileIndex < ProfileCount The outer profile has index 0.
Parameter: s (double)
Parameter Summary: 0.0 <= s <= 1.0 A relative parameter controlling which profile is returned. 0 = bottom profile and 1 = top profile.

Method: Rhino.Geometry.Extrusion.ProfileIndex(double profileParameter)
Return: int
Modifiers: public
Summary: Gets the index of the profile curve at a domain related to a parameter.
Parameter: profileParameter (double)
Parameter Summary: Parameter on profile curve.

Method: Rhino.Geometry.Extrusion.SetMesh(Mesh mesh, MeshType meshType)
Return: bool
Modifiers: public
Summary: Sets a specified type of mesh for this extrusion.
Parameter: mesh (Mesh)
Parameter Summary: The mesh.
Parameter: meshType (MeshType)
Parameter Summary: The mesh type.

Method: Rhino.Geometry.Extrusion.SetOuterProfile(Curve outerProfile, bool cap)
Return: bool
Modifiers: public
Summary: Sets the outer profile of the extrusion.
Parameter: outerProfile (Curve)
Parameter Summary: curve in the XY plane or a 2D curve.
Parameter: cap (bool)
Parameter Summary: If outerProfile is a closed curve, then cap determines if the extrusion has end caps. If outerProfile is an open curve, cap is ignored.

Method: Rhino.Geometry.Extrusion.SetPathAndUp(Point3d a, Point3d b, Vector3d up)
Return: bool
Modifiers: public
Summary: Allows to set the two points at the extremes and the up vector.
Parameter: a (Point3d)
Parameter Summary: The start point.
Parameter: b (Point3d)
Parameter Summary: The end point.
Parameter: up (Vector3d)
Parameter Summary: The up vector.

Method: Rhino.Geometry.Extrusion.ToBrep(bool splitKinkyFaces)
Return: Brep
Modifiers: public
Summary: Constructs a brep form of the extrusion. The outer profile is always the first face of the brep. If there are inner profiles, additional brep faces are created for each profile. If the outer profile is closed, then end caps are added as the last two faces of the brep.
Parameter: splitKinkyFaces (bool)
Parameter Summary: If True and the profiles have kinks, then the faces corresponding to those profiles are split so they will be G1.

Method: Rhino.Geometry.Extrusion.WallEdge(ComponentIndex ci)
Return: Curve
Modifiers: public
Summary: Gets one of the longitudinal curves along the beam or extrusion.
Parameter: ci (ComponentIndex)
Parameter Summary: The index of this profile.

Method: Rhino.Geometry.Extrusion.WallSurface(ComponentIndex ci)
Return: Surface
Modifiers: public
Summary: Gets one of the longitudinal surfaces of the extrusion.
Parameter: ci (ComponentIndex)
Parameter Summary: The index specifying which precise item to retrieve.

Class: Rhino.Geometry.GeometryBase
Summary: Provides a common base for most geometric classes. This class is abstract.

Constructor: Rhino.Geometry.GeometryBase.GeometryBase(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.GeometryBase.HasBrepForm
Return: bool
Modifiers: public
Summary: Returns True if the Brep.TryConvertBrep function will be successful for this object
Accessors: get

Property: Rhino.Geometry.GeometryBase.IsDeformable
Return: bool
Modifiers: public
Summary: True if object can be accurately modified with "squishy" transformations like projections, shears, and non-uniform scaling.
Accessors: get

Property: Rhino.Geometry.GeometryBase.IsDocumentControlled
Return: bool
Modifiers: public, sealed, override
Summary: If True this object may not be modified. Any properties or functions that attempt to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
Accessors: get

Property: Rhino.Geometry.GeometryBase.ObjectType
Return: ObjectType
Modifiers: public
Summary: Useful for switch statements that need to differentiate between basic object types like points, curves, surfaces, and so on.
Accessors: get

Property: Rhino.Geometry.GeometryBase.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.Geometry.GeometryBase.GeometryEquals(GeometryBase first, GeometryBase second)
Return: bool
Modifiers: public, static
Summary: Determines if two geometries equal one another, in pure geometrical shape. This version only compares the geometry itself and does not include any user data comparisons. This is a comparison by value: for two identical items it will be true, no matter where in memory they may be stored.
Parameter: first (GeometryBase)
Parameter Summary: The first geometry
Parameter: second (GeometryBase)
Parameter Summary: The second geometry

Method: Rhino.Geometry.GeometryBase.GeometryReferenceEquals(GeometryBase one, GeometryBase other)
Return: bool
Modifiers: public, static
Summary: Determines if two objects are respectively shallow copies, new managed instantiations of the same geometry, or similar internal references to the exact same geometry, both in managed and in unmanaged code.
Parameter: one (GeometryBase)
Parameter Summary: The first object
Parameter: other (GeometryBase)
Parameter Summary: The other object

Method: Rhino.Geometry.GeometryBase.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: If this piece of geometry is a component in something larger, like a BrepEdge in a Brep, then this function returns the component index.

Method: Rhino.Geometry.GeometryBase.DataCRC(uint currentRemainder)
Return: uint
Modifiers: public
Summary: Returns a CRC calculated from the information that defines the object. This CRC can be used as a quick way to see if two objects are not identical.
Parameter: currentRemainder (uint)
Parameter Summary: The current remainder value.

Method: Rhino.Geometry.GeometryBase.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Geometry.GeometryBase.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Geometry.GeometryBase.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: Overridden in order to destroy local display cache information

Method: Rhino.Geometry.GeometryBase.Duplicate()
Return: GeometryBase
Modifiers: public, virtual
Summary: Constructs a deep (full) copy of this object.

Method: Rhino.Geometry.GeometryBase.DuplicateShallow()
Return: GeometryBase
Modifiers: public
Summary: Constructs a light copy of this object. By "light", it is meant that the same underlying data is used until something is done to attempt to change it. For example, you could have a shallow copy of a very heavy mesh object and the same underlying data will be used when doing things like inspecting the number of faces on the mesh. If you modify the location of one of the mesh vertices, the shallow copy will create a full duplicate of the underlying mesh data and the shallow copy will become a deep copy.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(bool accurate)
Return: BoundingBox
Modifiers: public
Summary: Bounding box solver. Gets the world axis aligned bounding box for the geometry.
Parameter: accurate (bool)
Parameter Summary: If true, a physically accurate bounding box will be computed. If not, a bounding box estimate will be computed. For some geometry types there is no difference between the estimate and the accurate bounding box. Estimated bounding boxes can be computed much (much) faster than accurate (or "tight") bounding boxes. Estimated bounding boxes are always similar to or larger than accurate bounding boxes.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Plane plane, out Box worldBox)
Return: BoundingBox
Modifiers: public
Summary: Aligned Bounding box solver. Gets the plane aligned bounding box.
Parameter: plane (Plane)
Parameter Summary: Orientation plane for BoundingBox.
Parameter: worldBox (Box)
Parameter Summary: Aligned box in World coordinates.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Plane plane)
Return: BoundingBox
Modifiers: public
Summary: Aligned Bounding box solver. Gets the plane aligned bounding box.
Parameter: plane (Plane)
Parameter Summary: Orientation plane for BoundingBox.

Method: Rhino.Geometry.GeometryBase.GetBoundingBox(Transform xform)
Return: BoundingBox
Modifiers: public, virtual
Summary: Aligned Bounding box solver. Gets the world axis aligned bounding box for the transformed geometry.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to object prior to the BoundingBox computation. The geometry itself is not modified.

Method: Rhino.Geometry.GeometryBase.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Geometry.GeometryBase.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.Geometry.GeometryBase.MakeDeformable()
Return: bool
Modifiers: public
Summary: If possible, converts the object into a form that can be accurately modified with "squishy" transformations like projections, shears, an non-uniform scaling.

Method: Rhino.Geometry.GeometryBase.MemoryEstimate()
Return: uint
Modifiers: public
Summary: Computes an estimate of the number of bytes that this object is using in memory.

Method: Rhino.Geometry.GeometryBase.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Destroy cache handle

Method: Rhino.Geometry.GeometryBase.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Is called when a non-constant operation occurs.

Method: Rhino.Geometry.GeometryBase.Rotate(double angleRadians, Vector3d rotationAxis, Point3d rotationCenter)
Return: bool
Modifiers: public
Summary: Rotates the object about the specified axis. A positive rotation angle results in a counter-clockwise rotation about the axis (right hand rule).
Parameter: angleRadians (double)
Parameter Summary: Angle of rotation in radians.
Parameter: rotationAxis (Vector3d)
Parameter Summary: Direction of the axis of rotation.
Parameter: rotationCenter (Point3d)
Parameter Summary: Point on the axis of rotation.

Method: Rhino.Geometry.GeometryBase.Scale(double scaleFactor)
Return: bool
Modifiers: public
Summary: Scales the object by the specified factor. The scale is centered at the origin.
Parameter: scaleFactor (double)
Parameter Summary: The uniform scaling factor.

Method: Rhino.Geometry.GeometryBase.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Method: Rhino.Geometry.GeometryBase.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: Transforms the geometry. If the input Transform has a SimilarityType of OrientationReversing, you may want to consider flipping the transformed geometry after calling this function when it makes sense. For example, you may want to call Flip() on a Brep after transforming it.
Parameter: xform (Transform)
Parameter Summary: Transformation to apply to geometry.

Method: Rhino.Geometry.GeometryBase.Translate(double x, double y, double z)
Return: bool
Modifiers: public
Summary: Translates the object along the specified vector.
Parameter: x (double)
Parameter Summary: The X component.
Parameter: y (double)
Parameter Summary: The Y component.
Parameter: z (double)
Parameter Summary: The Z component.

Method: Rhino.Geometry.GeometryBase.Translate(Vector3d translationVector)
Return: bool
Modifiers: public
Summary: Translates the object along the specified vector.
Parameter: translationVector (Vector3d)
Parameter Summary: A moving vector.

Class: Rhino.Geometry.Hatch
Summary: Represents a hatch in planar boundary loop or loops. This is a 2d entity with a plane defining a local coordinate system. The loops, patterns, angles, etc are all in this local coordinate system. The Hatch object manages the plane and loop array Fill definitions are in the HatchPattern or class derived from HatchPattern Hatch has an index to get the pattern definition from the pattern table.

Constructor: Rhino.Geometry.Hatch.Hatch(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Hatch.BasePoint
Return: Point3d
Modifiers: public
Summary: Gets or sets the hatch pattern base point
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternIndex
Return: int
Modifiers: public
Summary: Gets or sets the index of the pattern in the document hatch pattern table.
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternRotation
Return: double
Modifiers: public
Summary: Gets or sets the relative rotation of the pattern.
Accessors: get set

Property: Rhino.Geometry.Hatch.PatternScale
Return: double
Modifiers: public
Summary: Gets or sets the scaling factor of the pattern.
Accessors: get set

Property: Rhino.Geometry.Hatch.Plane
Return: Plane
Modifiers: public
Summary: Gets or sets the hatch plane
Accessors: get set

Method: Rhino.Geometry.Hatch.Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from one curve.
Parameter: curve (Curve)
Parameter Summary: A <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.Create(Curve curve, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from one curve.
Parameter: curve (Curve)
Parameter Summary: A <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.

Method: Rhino.Geometry.Hatch.Create(IEnumerable<Curve> curves, int hatchPatternIndex, double rotationRadians, double scale, double tolerance)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.
Parameter: tolerance (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.Create(IEnumerable<Curve> curves, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch[]
Modifiers: public, static
Summary: Constructs an array of <b>Hatch</b> from a set of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of <b>Curve</b> .
Parameter: hatchPatternIndex (int)
Parameter Summary: The index of the hatch pattern in the document hatch pattern table.
Parameter: rotationRadians (double)
Parameter Summary: The relative rotation of the pattern.
Parameter: scale (double)
Parameter Summary: A scaling factor.

Method: Rhino.Geometry.Hatch.Create(Plane hatchPlane, Curve outerLoop, IEnumerable<Curve> innerLoops, int hatchPatternIndex, double rotationRadians, double scale)
Return: Hatch
Modifiers: public, static
Summary: Create a hatch with a given set of outer and inner loops
Parameter: hatchPlane (Plane)
Parameter Summary: 
Parameter: outerLoop (Curve)
Parameter Summary: 2d closed curve representing outer boundary of hatch
Parameter: innerLoops (IEnumerable<Curve>)
Parameter Summary: 2d closed curves for inner boundaries
Parameter: hatchPatternIndex (int)
Parameter Summary: 
Parameter: rotationRadians (double)
Parameter Summary: 
Parameter: scale (double)
Parameter Summary:

Method: Rhino.Geometry.Hatch.CreateFromBrep(Brep brep, int brepFaceIndex, int hatchPatternIndex, double rotationRadians, double scale, Point3d basePoint)
Return: Hatch
Modifiers: public, static
Summary: Create a hatch from a planar face of a Brep

Method: Rhino.Geometry.Hatch.CreateDisplayGeometry(DocObjects.HatchPattern pattern, double patternScale, out Curve[] bounds, out Line[] lines, out Brep solidBrep)
Return: void
Modifiers: public
Summary: Generate geometry that would be used to draw the hatch with a given hatch pattern

Method: Rhino.Geometry.Hatch.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Decomposes the hatch pattern into an array of geometry.

Method: Rhino.Geometry.Hatch.Get3dCurves(bool outer)
Return: Curve[]
Modifiers: public
Summary: Gets 3d curves that define the boundaries of the hatch
Parameter: outer (bool)
Parameter Summary: True to get the outer curves, False to get the inner curves

Method: Rhino.Geometry.Hatch.GetGradientFill()
Return: Rhino.Display.ColorGradient
Modifiers: public
Summary: Get gradient fill information for this hatch. If the "GradientType" for the fill is None, then this hatch doesn't have any gradient fill.

Method: Rhino.Geometry.Hatch.ScalePattern(Transform xform)
Return: void
Modifiers: public
Summary: Scale the hatch's pattern

Method: Rhino.Geometry.Hatch.SetGradientFill(Rhino.Display.ColorGradient fill)
Return: void
Modifiers: public

Method: Rhino.Geometry.Hatch.ToBrep()
Return: Brep
Modifiers: public
Summary: Constructs a Brep representation of this hatch.

Class: Rhino.Geometry.HermiteSurface
Summary: Create an ON_NurbsSurface satisfying Hermite interpolation conditions at a grid of points.

Constructor: Rhino.Geometry.HermiteSurface.HermiteSurface()
Summary: Initializes a new <b>HermiteSurface</b> instance.

Constructor: Rhino.Geometry.HermiteSurface.HermiteSurface(int uCount, int vCount)
Summary: Initializes a new <b>HermiteSurface</b> instance.

Property: Rhino.Geometry.HermiteSurface.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the all of values in all of the internal data structures contain valid values, False otherwise.
Accessors: get

Property: Rhino.Geometry.HermiteSurface.UCount
Return: int
Modifiers: public
Summary: Gets the number of parameters in the "u" direction.
Accessors: get

Property: Rhino.Geometry.HermiteSurface.VCount
Return: int
Modifiers: public
Summary: Gets the number of parameters in the "v" direction.
Accessors: get

Method: Rhino.Geometry.HermiteSurface.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.HermiteSurface.PointAt(int uIndex, int vIndex)
Return: Point3d
Modifiers: public
Summary: Gets the interpolation point at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.SetPointAt(int uIndex, int vIndex, Point3d point)
Return: void
Modifiers: public
Summary: Sets the interpolation point at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: point (Point3d)
Parameter Summary: The point location.

Method: Rhino.Geometry.HermiteSurface.SetTwistAt(int uIndex, int vIndex, Vector3d twist)
Return: void
Modifiers: public
Summary: Set the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: twist (Vector3d)
Parameter Summary: The twist direction.

Method: Rhino.Geometry.HermiteSurface.SetUParameterAt(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets the "u" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.
Parameter: parameter (double)
Parameter Summary: The parameter value.

Method: Rhino.Geometry.HermiteSurface.SetUTangentAt(int uIndex, int vIndex, Vector3d tangent)
Return: void
Modifiers: public
Summary: Set the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: tangent (Vector3d)
Parameter Summary: The tangent direction.

Method: Rhino.Geometry.HermiteSurface.SetVParameterAt(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets the "v" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.
Parameter: parameter (double)
Parameter Summary: The parameter value.

Method: Rhino.Geometry.HermiteSurface.SetVTangentAt(int uIndex, int vIndex, Vector3d tangent)
Return: void
Modifiers: public
Summary: Set the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.
Parameter: tangent (Vector3d)
Parameter Summary: The tangent direction.

Method: Rhino.Geometry.HermiteSurface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface satisfying the Hermite interpolation conditions.

Method: Rhino.Geometry.HermiteSurface.TwistAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the twist direction (mixed second partial derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.UParameterAt(int index)
Return: double
Modifiers: public
Summary: Gets the "u" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.HermiteSurface.UTangentAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the "u" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Method: Rhino.Geometry.HermiteSurface.VParameterAt(int index)
Return: double
Modifiers: public
Summary: Gets the "v" parameter at an index. These parameters are strictly increasing.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.HermiteSurface.VTangentAt(int uIndex, int vIndex)
Return: Vector3d
Modifiers: public
Summary: Get the "v" tangent direction (actually first derivative) to interpolate at the u,v parameter location.
Parameter: uIndex (int)
Parameter Summary: The "u" index.
Parameter: vIndex (int)
Parameter Summary: The "v" index.

Class: Rhino.Geometry.HiddenLineDrawing
Summary: Represents a hidden line drawing object. A hidden line drawing consists of curves generated from source objects. The curves correspond to edges, and silhouettes of  source objects and intersections with cutting planes.

Constructor: Rhino.Geometry.HiddenLineDrawing.HiddenLineDrawing()
Summary: Initializes a new instance of the HiddenLineDrawing class

Property: Rhino.Geometry.HiddenLineDrawing.Points
Return: IEnumerable<HiddenLineDrawingPoint>
Modifiers: public
Summary: Point objects calculated by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.Segments
Return: IEnumerable<HiddenLineDrawingSegment>
Modifiers: public
Summary: Sub-curve objects calculated by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.Viewport
Return: ViewportInfo
Modifiers: public
Summary: Returns the ViewportInfo used by the hidden line drawing.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawing.WorldToHiddenLine
Return: Transform
Modifiers: public
Summary: Returns the world-coordinate system to HLD-coordinate system transformation.
Accessors: get

Method: Rhino.Geometry.HiddenLineDrawing.Compute(HiddenLineDrawingParameters parameters, bool multipleThreads, IProgress<double> progress, System.Threading.CancellationToken cancelToken)
Return: HiddenLineDrawing
Modifiers: public, static
Summary: Perform the hidden line drawing calculation based on input parameters

Method: Rhino.Geometry.HiddenLineDrawing.Compute(HiddenLineDrawingParameters parameters, bool multipleThreads)
Return: HiddenLineDrawing
Modifiers: public, static
Summary: Perform the hidden line drawing calculation based on input parameters

Method: Rhino.Geometry.HiddenLineDrawing.BoundingBox(bool includeHidden)
Return: BoundingBox
Modifiers: public
Summary: Get tight bounding box of the hidden line drawing.
Parameter: includeHidden (bool)
Parameter Summary: Include hidden objects.

Method: Rhino.Geometry.HiddenLineDrawing.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.HiddenLineDrawing.RejoinCompatibleVisible()
Return: void
Modifiers: public
Summary: Join consecutive visible curves from a single FullCurve True if successful, False otherwise.

Class: Rhino.Geometry.HiddenLineDrawingObject
Summary: Represents an object added to a HiddenLineDrawing

Property: Rhino.Geometry.HiddenLineDrawingObject.Geometry
Return: GeometryBase
Modifiers: public
Summary: Returns the geometry in world coordinates if UseXform is false. Otherwise, the geometry in object space coordinates is returned.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObject.OccludingSections
Return: bool
Modifiers: public
Summary: Objects in this drawing could have occluding sections. Objects must added with the occluding section  option set as desired.
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingObject.Tag
Return: object
Modifiers: public
Summary: Returns the extra data used to cross-reference the object specified in HiddenLineDrawing.AddObject.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObject.Transform
Return: Transform
Modifiers: public
Summary: Returns the transformation passed into the Add... function when setting up the hidden line drawing parameters.
Accessors: get

Class: Rhino.Geometry.HiddenLineDrawingObjectCurve
Summary: Curves generated from source objects which correspond to edges, and silhouettes of source objects and intersections with cutting planes. A HiddenLineDrawingObjectCurve is partitioned into hidden and visible segments called HiddenLineDrawingSegment

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.ClippingPlaneIndex
Return: int
Modifiers: public
Summary: Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Index
Return: int
Modifiers: public
Summary: Index of this object in HiddenLineDrawing.FullCurves.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.IsProjecting
Return: bool
Modifiers: public
Summary: Returns True if all the non clipped portions of this curve are projecting.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.IsValid
Return: bool
Modifiers: public
Summary: Verifies the object is valid.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.OriginalDomainStart
Return: double
Modifiers: public
Summary: Initialized to RhinoMath.UnsetValue. Valid if the full curve is closed. Rejoin can reparameterize the curve by moving the seam.  When this has been done the original domain start is stored here.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Parameters
Return: double[]
Modifiers: public
Summary: Increasing, partition of curve.Domain.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.Segments
Return: HiddenLineDrawingSegment[]
Modifiers: public
Summary: The HiddenLineDrawingCurve objects that make up this full curve.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SilhouetteType
Return: SilhouetteType
Modifiers: public
Summary: The silhouette event type
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SourceObject
Return: HiddenLineDrawingObject
Modifiers: public
Summary: Return the source object that this curve came from
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingObjectCurve.SourceObjectComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Component of source object part that generated this curve.
Accessors: get

Method: Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(double t, int side)
Return: HiddenLineDrawingSegment
Modifiers: public
Summary: Returns the HiddenLineDrawingCurve object containing parameter 't'.
Parameter: t (double)
Parameter Summary: The parameter.
Parameter: side (int)
Parameter Summary: Determines which side to return at breakpoints, where: 0 - default, <0 - curve that contains an interval [t-, t], for some t- < t, >0 - curve that contains an interval [t, t+], for some t+ > t.

Method: Rhino.Geometry.HiddenLineDrawingObjectCurve.Curve(double t)
Return: HiddenLineDrawingSegment
Modifiers: public
Summary: Returns the HiddenLineDrawingCurve object containing parameter 't'.
Parameter: t (double)
Parameter Summary: The parameter.

Class: Rhino.Geometry.HiddenLineDrawingParameters
Summary: Input used for computing a hidden line drawing

Constructor: Rhino.Geometry.HiddenLineDrawingParameters.HiddenLineDrawingParameters()
Summary: default constructor

Property: Rhino.Geometry.HiddenLineDrawingParameters.AbsoluteTolerance
Return: double
Modifiers: public
Summary: Absolute tolerance is used to decide if curves overlap or intersect. A suggested value is to use RhinoDoc.AbsoluteTolerance
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.Flatten
Return: bool
Modifiers: public
Summary: Flatten the computed geometry
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeHiddenCurves
Return: bool
Modifiers: public
Summary: Include hidden curves in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeTangentEdges
Return: bool
Modifiers: public
Summary: Include tangent edges in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.IncludeTangentSeams
Return: bool
Modifiers: public
Summary: Include tangent seams in hidden line drawing (default is true)
Accessors: get set

Property: Rhino.Geometry.HiddenLineDrawingParameters.OccludingSectionOption
Return: bool
Modifiers: public
Summary: Enable occluding section option (default is false)
Accessors: get set

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddClippingPlane(Plane plane)
Return: void
Modifiers: public
Summary: Specify clipping planes that are active for this view.

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, object tag, bool occluding_sections)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, object tag)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, Transform xform, object tag, bool occluding_sections)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary: 
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometry(GeometryBase geometry, Transform xform, object tag)
Return: bool
Modifiers: public
Summary: Add geometry that should be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary: 
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, object tag, bool occluding_sections, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, object tag, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only curves, meshes, breps, surfaces, and extrusions are supported
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, Transform xform, object tag, bool occluding_sections, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary: 
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: occluding_sections (bool)
Parameter Summary: sections of this geometry occlude
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.AddGeometryAndPlanes(GeometryBase geometry, Transform xform, object tag, List<Plane> clips)
Return: bool
Modifiers: public
Summary: Add geometry and its active clipping planes to be included in the calculation
Parameter: geometry (GeometryBase)
Parameter Summary: Currently only points, point clouds, curves, meshes, breps, surfaces, and extrusions are supported
Parameter: xform (Transform)
Parameter Summary: 
Parameter: tag (object)
Parameter Summary: arbitrary data to be associated with this geometry
Parameter: clips (List<Plane>)
Parameter Summary: Active clipping planes for this object

Method: Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(Display.RhinoViewport viewport)
Return: void
Modifiers: public
Summary: Set the viewport for the hidden line drawing (HLD). The viewport supplies the projection that determines the visibility of curves, and the HLD coordinate system in which the resulting curves are represented. The HLD-coordinate system is a right handed system for 3-D model space, in which the 3rd coordinate direction is the projection direction. In particular the z-coordinate direction points from the scene toward the camera.
Parameter: viewport (Display.RhinoViewport)
Parameter Summary: A copy of rhinoViewport is made inside of HiddenLineDrawing.

Method: Rhino.Geometry.HiddenLineDrawingParameters.SetViewport(ViewportInfo viewport)
Return: void
Modifiers: public
Summary: Set the viewport for the hidden line drawing (HLD). The viewport supplies the projection that determines the visibility of curves, and the HLD coordinate system in which the resulting curves are represented. The HLD-coordinate system is a right handed system for 3-D model space, in which the 3rd coordinate direction is the projection direction. In particular the z-coordinate direction points from the scene toward the camera.
Parameter: viewport (ViewportInfo)
Parameter Summary: A copy of viewportInfo is made inside of HiddenLineDrawing.

Class: Rhino.Geometry.HiddenLineDrawingPoint
Summary: Points generated from source objects which correspond to point and point cloud source objects.

Property: Rhino.Geometry.HiddenLineDrawingPoint.ClippingPlaneIndex
Return: int
Modifiers: public
Summary: Index into HiddenLineDrawing.ClippingPlanes when SilhouetteType == SilhouetteType.SectionCut.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.Index
Return: int
Modifiers: public
Summary: Index of this object in HiddenLineDrawing.Points.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.Location
Return: Point3d
Modifiers: public
Summary: Returns the location of this object in HiddenLineDrawing coordinates.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.PointVisibility
Return: Visibility
Modifiers: public
Summary: Returns the point's visibility
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.SourceObject
Return: HiddenLineDrawingObject
Modifiers: public
Summary: Return the source object that this point came from.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingPoint.SourceObjectComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Component of source object part that generated this curve.
Accessors: get

Class: Rhino.Geometry.HiddenLineDrawingSegment
Summary: The results of HiddenLineDrawing calculation are a collection of segments. A segment is a sub-curve of a HiddenLineDrawingObjectCurve.

Property: Rhino.Geometry.HiddenLineDrawingSegment.CurveGeometry
Return: Curve
Modifiers: public
Summary: The actual curve geometry
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.CurveSideFills
Return: SideFill[]
Modifiers: public
Summary: The SideFill fields are only valid for visible curves. With respect to the HiddenLineDrawing, the region to the left (or right respectively) of this curve is described by CurveSideFills[0] or CurveSideFills[1], respectively.  If exactly one of these regions is empty this is a scene silhouette. If this region contains a surface it is either a surface which in 3-D is adjacent to this edge or it an surface that is further away from the camera, we call this a shadow surface. unknown is used for unset values and for projecting curves
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.Index
Return: int
Modifiers: public
Summary: Index of this curve in HiddenLineDrawing.Curves.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.IsSceneSilhouette
Return: bool
Modifiers: public
Summary: Returns True if this curve is a scene silhouette.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.ParentCurve
Return: HiddenLineDrawingObjectCurve
Modifiers: public
Summary: This curve is a sub-curve of the returned HiddenLineDrawingFullCurve object.
Accessors: get

Property: Rhino.Geometry.HiddenLineDrawingSegment.SegmentVisibility
Return: Visibility
Modifiers: public
Summary: Returns the segment's visibility
Accessors: get

Class: Rhino.Geometry.InstanceDefinitionGeometry
Summary: Represents a block definition in a File3dm. This is the same as Rhino.DocObjects.InstanceDefinition, but not associated with a RhinoDoc.

Constructor: Rhino.Geometry.InstanceDefinitionGeometry.InstanceDefinitionGeometry()
Summary: Initializes a new block definition.

Property: Rhino.Geometry.InstanceDefinitionGeometry.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.InstanceDefinition</b> .
Accessors: get

Property: Rhino.Geometry.InstanceDefinitionGeometry.Description
Return: string
Modifiers: public
Summary: Gets or sets the description of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.SourceArchive
Return: string
Modifiers: public
Summary: Gets the full file path for linked instance definitions.
Accessors: get

Property: Rhino.Geometry.InstanceDefinitionGeometry.Url
Return: string
Modifiers: public
Summary: Gets or sets the URL or hyperlink of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.UrlDescription
Return: string
Modifiers: public
Summary: Gets or sets the description of the URL or hyperlink of the definition.
Accessors: get set

Property: Rhino.Geometry.InstanceDefinitionGeometry.UserStringCount
Return: int
Modifiers: public
Summary: Gets the amount of user strings.
Accessors: get

Method: Rhino.Geometry.InstanceDefinitionGeometry.DeleteAllUserStrings()
Return: void
Modifiers: public

Method: Rhino.Geometry.InstanceDefinitionGeometry.DeleteUserString(string key)
Return: bool
Modifiers: public

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetObjectIds()
Return: System.Guid[]
Modifiers: public
Summary: list of object ids in the instance geometry table

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetUserString(string key)
Return: string
Modifiers: public
Summary: Gets user string from this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve the string.

Method: Rhino.Geometry.InstanceDefinitionGeometry.GetUserStrings()
Return: System.Collections.Specialized.NameValueCollection
Modifiers: public
Summary: Gets a copy of all (user key string, user value string) pairs attached to this geometry.

Method: Rhino.Geometry.InstanceDefinitionGeometry.SetUserString(string key, string value)
Return: bool
Modifiers: public
Summary: Attach a user string (key,value combination) to this geometry.
Parameter: key (string)
Parameter Summary: id used to retrieve this string.
Parameter: value (string)
Parameter Summary: string associated with key.

Class: Rhino.Geometry.InstanceReferenceGeometry
Summary: Represents a reference to the geometry in a block definition.

Constructor: Rhino.Geometry.InstanceReferenceGeometry.InstanceReferenceGeometry(Guid instanceDefinitionId, Transform transform)
Summary: Constructor used when creating nested instance references.

Constructor: Rhino.Geometry.InstanceReferenceGeometry.InstanceReferenceGeometry(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.InstanceReferenceGeometry.ParentIdefId
Return: Guid
Modifiers: public
Summary: The unique id for the parent instance definition of this instance reference.
Accessors: get

Property: Rhino.Geometry.InstanceReferenceGeometry.Xform
Return: Transform
Modifiers: public
Summary: Transformation for this reference.
Accessors: get

Class: Rhino.Geometry.Interpolator
Summary: Exposes a set of standard numeric interpolation algorithms.

Constructor: Rhino.Geometry.Interpolator.Interpolator()
Summary: Constructs a new, empty Interpolator.

Constructor: Rhino.Geometry.Interpolator.Interpolator(IEnumerable<double> collection)
Summary: Constructs an Interpolator from a collection of numbers.

Constructor: Rhino.Geometry.Interpolator.Interpolator(int amount, double defaultValue)
Summary: Constructs a new Interpolator with a specified amount of numbers.

Constructor: Rhino.Geometry.Interpolator.Interpolator(int initialCapacity)
Summary: Constructs an empty Interpolator with a certain capacity.

Constructor: Rhino.Geometry.Interpolator.Interpolator(RhinoList<double> list)
Summary: Copy all the numbers from an existing RhinoList.

Property: Rhino.Geometry.Interpolator.Cyclical
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the values inside this Interpolator are to be treated as cyclical (i.e. circular).
Accessors: get set

Method: Rhino.Geometry.Interpolator.InterpolateCatmullRom(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with Catmull-Rom interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateCosine(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with cosine interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateCubic(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with cubic interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateLinear(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with linear interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Method: Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(double t)
Return: double
Modifiers: public
Summary: Sample the list of numbers with Nearest Neighbor interpolation.
Parameter: t (double)
Parameter Summary: Parameter to sample at. The integer portion of the parameter indicates the index of the left-hand value. If this Interpolator is cyclical, parameters will be wrapped.

Class: Rhino.Geometry.InvalidDimensionStyleIdException
Summary: General exception that can be thrown by annotations

Constructor: Rhino.Geometry.InvalidDimensionStyleIdException.InvalidDimensionStyleIdException(string msg)

Class: Rhino.Geometry.Leader
Summary: Leader geometry class

Constructor: Rhino.Geometry.Leader.Leader()
Summary: Constructor

Constructor: Rhino.Geometry.Leader.Leader(SerializationInfo info, StreamingContext context)
Summary: Protected serialization constructor for internal use.

Property: Rhino.Geometry.Leader.Curve
Return: NurbsCurve
Modifiers: public
Summary: Gets the curve used by this leader
Accessors: get

Property: Rhino.Geometry.Leader.LeaderArrowBlockId
Return: Guid
Modifiers: public
Summary: Id of the block used as the arrow for the leader when the arrow type is 'User arrow'
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderArrowSize
Return: double
Modifiers: public
Summary: The size of the leader arrow
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderArrowType
Return: ArrowType
Modifiers: public
Summary: The arrowhead type for the leader
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderContentAngleStyle
Return: LeaderContentAngleStyle
Modifiers: public
Summary: Angle for text of leader text
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderCurveStyle
Return: LeaderCurveStyle
Modifiers: public
Summary: The style of the leader curve: polyline or spline
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderHasLanding
Return: bool
Modifiers: public
Summary: Returns True if the leader has a landing line
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderLandingLength
Return: double
Modifiers: public
Summary: Gets or sets the length of the landing line
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderTextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Gets or sets the horizontal alignment of the leader's text
Accessors: get set

Property: Rhino.Geometry.Leader.LeaderTextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Summary: Gets or sets the vertical alignment of the leader's text
Accessors: get set

Property: Rhino.Geometry.Leader.Points2D
Return: Point2d[]
Modifiers: public
Summary: Get or set the 2d points defining the curve used by this leader
Accessors: get set

Property: Rhino.Geometry.Leader.Points3D
Return: Point3d[]
Modifiers: public
Summary: Get or set the 3d points defining the curve used by this leader
Accessors: get set

Method: Rhino.Geometry.Leader.Create(string text, Plane plane, DimensionStyle dimstyle, Point3d[] points)
Return: Leader
Modifiers: public, static
Summary: Creates a Leader geometry object

Method: Rhino.Geometry.Leader.CreateWithRichText(string richText, Plane plane, DimensionStyle dimstyle, Point3d[] points)
Return: Leader
Modifiers: public, static
Summary: Creates a Leader geometry object

Method: Rhino.Geometry.Leader.Explode()
Return: GeometryBase[]
Modifiers: public
Summary: Explodes this leader into its geometric components.

Class: Rhino.Geometry.LengthMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of length, length centroid, and length moments in curves.

Constructor: Rhino.Geometry.LengthMassProperties.LengthMassProperties()
Summary: Initializes a new instance of the LengthMassProperties class

Property: Rhino.Geometry.LengthMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the length centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the centroid calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.Length
Return: double
Modifiers: public
Summary: Gets the length solution.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.LengthError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the length calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the length Y is integral of "y dm" over the length Z is integral of "z dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the length Y is integral of "yz dm" over the length Z is integral of "zx dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the length Y is integral of "yy dm" over the length Z is integral of "zz dm" over the length.
Accessors: get

Property: Rhino.Geometry.LengthMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.LengthMassProperties.Compute(Curve curve, bool length, bool firstMoments, bool secondMoments, bool productMoments)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of a curve.
Parameter: curve (Curve)
Parameter Summary: The curve to measure.
Parameter: length (bool)
Parameter Summary: True to calculate length.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate length first moments, length, and length centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate length second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate length product moments.

Method: Rhino.Geometry.LengthMassProperties.Compute(Curve curve)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of a curve.
Parameter: curve (Curve)
Parameter Summary: The curve to measure.

Method: Rhino.Geometry.LengthMassProperties.Compute(IEnumerable<Curve> curves, bool length, bool firstMoments, bool secondMoments, bool productMoments)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of an enumeration of curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An enumeration of curves.
Parameter: length (bool)
Parameter Summary: True to calculate length.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate length first moments, length, and length centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate length second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate length product moments.

Method: Rhino.Geometry.LengthMassProperties.Compute(IEnumerable<Curve> curves)
Return: LengthMassProperties
Modifiers: public, static
Summary: Calculates the length mass properties of an enumeration of curves.

Method: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.LengthMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.LengthMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Class: Rhino.Geometry.Light
Summary: Represents a light that shines in the modeling space.

Constructor: Rhino.Geometry.Light.Light()
Summary: Initializes a new light.

Constructor: Rhino.Geometry.Light.Light(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.Light.Ambient
Return: Color
Modifiers: public
Summary: Gets or sets the ambient color.
Accessors: get set

Property: Rhino.Geometry.Light.AttenuationType
Return: Attenuation
Modifiers: public
Summary: Get the type of attenuation for this light.
Accessors: get set

Property: Rhino.Geometry.Light.AttenuationVector
Return: Vector3d
Modifiers: public
Summary: Gets or Sets the attenuation vector.
Accessors: get set

Property: Rhino.Geometry.Light.CoordinateSystem
Return: CoordinateSystem
Modifiers: public
Summary: Gets a value, determined by LightStyle, that explains whether the camera directions are relative to World or Camera spaces.
Accessors: get

Property: Rhino.Geometry.Light.Diffuse
Return: Color
Modifiers: public
Summary: Gets or sets the diffuse color.
Accessors: get set

Property: Rhino.Geometry.Light.Direction
Return: Vector3d
Modifiers: public
Summary: Gets or sets the vector direction of the camera.
Accessors: get set

Property: Rhino.Geometry.Light.HotSpot
Return: double
Modifiers: public
Summary: The hot spot setting runs from 0.0 to 1.0 and is used to provides a linear interface for controlling the focus or concentration of a spotlight. A hot spot setting of 0.0 corresponds to a spot exponent of 128. A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
Accessors: get set

Property: Rhino.Geometry.Light.Id
Return: Guid
Modifiers: public
Summary: Gets the ID of this light.
Accessors: get set

Property: Rhino.Geometry.Light.Intensity
Return: double
Modifiers: public
Summary: Gets or sets the light intensity.
Accessors: get set

Property: Rhino.Geometry.Light.IsDirectionalLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraDirectional or WorldDirectional.
Accessors: get

Property: Rhino.Geometry.Light.IsEnabled
Return: bool
Modifiers: public
Summary: Gets or sets a value that defines if the light is turned on (true) or off (false).
Accessors: get set

Property: Rhino.Geometry.Light.IsLinearLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> WorldLinear.
Accessors: get

Property: Rhino.Geometry.Light.IsPointLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraPoint or WorldPoint.
Accessors: get

Property: Rhino.Geometry.Light.IsRectangularLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> WorldRectangular.
Accessors: get

Property: Rhino.Geometry.Light.IsSpotLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the light style is <b>LightStyle</b> CameraSpot or WorldSpot.
Accessors: get

Property: Rhino.Geometry.Light.IsSunLight
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this object is a Sun light.
Accessors: get

Property: Rhino.Geometry.Light.Length
Return: Vector3d
Modifiers: public
Summary: Gets or sets the height in linear and rectangular lights.
(ignored for non-linear/rectangular lights.) | Since: 5.0 | Accessors: get set

Property: Rhino.Geometry.Light.LightStyle
Return: LightStyle
Modifiers: public
Summary: Gets or sets a light style on this camera.
Accessors: get set

Property: Rhino.Geometry.Light.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the light or 3D position or location.
Accessors: get set

Property: Rhino.Geometry.Light.Name
Return: string
Modifiers: public
Summary: Gets or sets the spot light name.
Accessors: get set

Property: Rhino.Geometry.Light.PerpendicularDirection
Return: Vector3d
Modifiers: public
Summary: Gets a perpendicular vector to the camera direction.
Accessors: get

Property: Rhino.Geometry.Light.PowerCandela
Return: double
Modifiers: public
Summary: Gets or sets the light power in candelas (cd).
Accessors: get set

Property: Rhino.Geometry.Light.PowerLumens
Return: double
Modifiers: public
Summary: Gets or sets the light power in lumens (lm).
Accessors: get set

Property: Rhino.Geometry.Light.PowerWatts
Return: double
Modifiers: public
Summary: Gets or sets the light power in watts (W).
Accessors: get set

Property: Rhino.Geometry.Light.ShadowIntensity
Return: double
Modifiers: public
Summary: Gets or sets the shadow intensity for the light.
Accessors: get set

Property: Rhino.Geometry.Light.Specular
Return: Color
Modifiers: public
Summary: Gets or sets the specular color.
Accessors: get set

Property: Rhino.Geometry.Light.SpotAngleRadians
Return: double
Modifiers: public
Summary: Gets or sets the spot angle in radians.
Ignored for non-spot lights.
angle = 0 to pi/2  (0 to 90 degrees). | Since: 5.0 | Accessors: get set

Property: Rhino.Geometry.Light.SpotExponent
Return: double
Modifiers: public
Summary: The spot exponent varies from 0.0 to 128.0 and provides an exponential interface for controlling the focus or concentration of a spotlight (like the OpenGL GL_SPOT_EXPONENT parameter).  The spot exponent and hot spot parameters are linked; changing one will change the other. A hot spot setting of 0.0 corresponds to a spot exponent of 128. A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
Accessors: get set

Property: Rhino.Geometry.Light.SpotLightShadowIntensity
Return: double
Modifiers: public
Summary: Gets or sets the spot light shadow intensity.
(ignored for non-spot lights.) | Since: 5.0 | Accessors: get set

Property: Rhino.Geometry.Light.Width
Return: Vector3d
Modifiers: public
Summary: Gets or sets the width in linear and rectangular lights.
(ignored for non-linear/rectangular lights.) | Since: 5.0 | Accessors: get set

Method: Rhino.Geometry.Light.CreateSunLight(double northAngleDegrees, double azimuthDegrees, double altitudeDegrees)
Return: Light
Modifiers: public, static
Summary: Constructs a light that represents the Sun.
Parameter: northAngleDegrees (double)
Parameter Summary: The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.
Parameter: azimuthDegrees (double)
Parameter Summary: The Azimuth angle value in degrees. Azimuth is the compass angle from North.
Parameter: altitudeDegrees (double)
Parameter Summary: The Altitude angle in degrees. Altitude is the angle above the ground plane.

Method: Rhino.Geometry.Light.CreateSunLight(double northAngleDegrees, System.DateTime when, double latitudeDegrees, double longitudeDegrees)
Return: Light
Modifiers: public, static
Summary: Constructs a light which simulates the Sun based on a given time and location on Earth.
Parameter: northAngleDegrees (double)
Parameter Summary: The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.
Parameter: when (System.DateTime)
Parameter Summary: The time of the measurement. The Kind property of DateTime specifies whether this is in local or universal time.
Local and Undefined date-time kinds in this argument are considered local. | Parameter: latitudeDegrees (double) | Parameter Summary: The latitude, in degrees, of the location on Earth. | Parameter: longitudeDegrees (double) | Parameter Summary: The longitude, in degrees, of the location on Earth.

Method: Rhino.Geometry.Light.CreateSunLight(Render.Sun sun)
Return: Light
Modifiers: public, static
Summary: Constructs a light which simulates a <b>Rhino.Render.Sun</b> .
Parameter: sun (Render.Sun)
Parameter Summary: A Sun object from the Rhino.Render namespace.

Method: Rhino.Geometry.Light.GetAttenuation(double d)
Return: double
Modifiers: public
Summary: Gets the attenuation settings (ignored for "directional" and "ambient" lights).
attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light. | Since: 5.0 | Parameter: d (double) | Parameter Summary: The distance to evaluate.

Method: Rhino.Geometry.Light.GetSpotLightRadii(out double innerRadius, out double outerRadius)
Return: bool
Modifiers: public
Summary: Gets the spot light radii.
Parameter: innerRadius (double)
Parameter Summary: The inner radius. This out parameter is assigned during this call.
Parameter: outerRadius (double)
Parameter Summary: The outer radius. This out parameter is assigned during this call.

Method: Rhino.Geometry.Light.SetAttenuation(double a0, double a1, double a2)
Return: void
Modifiers: public
Summary: Sets the attenuation settings (ignored for "directional" and "ambient" lights).
attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light. | Since: 5.0 | Parameter: a0 (double) | Parameter Summary: The new constant attenuation divisor term. | Parameter: a1 (double) | Parameter Summary: The new reverse linear attenuation divisor term. | Parameter: a2 (double) | Parameter Summary: The new reverse quadratic attenuation divisor term.

Class: Rhino.Geometry.LinearDimension
Summary: Represents a linear dimension

Constructor: Rhino.Geometry.LinearDimension.LinearDimension()

Constructor: Rhino.Geometry.LinearDimension.LinearDimension(Plane dimensionPlane, Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)

Constructor: Rhino.Geometry.LinearDimension.LinearDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.LinearDimension.Aligned
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether this annotation is aligned.
Accessors: get set

Property: Rhino.Geometry.LinearDimension.AnnotationType
Return: AnnotationType
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.LinearDimension.Arrowhead1End
Return: Point2d
Modifiers: public
Summary: Gets the arrow head end of the first extension line.
Accessors: get

Property: Rhino.Geometry.LinearDimension.Arrowhead2End
Return: Point2d
Modifiers: public
Summary: Gets the arrow head end of the second extension line.
Accessors: get

Property: Rhino.Geometry.LinearDimension.DimensionLinePoint
Return: Point2d
Modifiers: public
Summary: Point on annotation plane where dimension line starts
Accessors: get set

Property: Rhino.Geometry.LinearDimension.DistanceBetweenArrowTips
Return: double
Modifiers: public
Summary: Gets the distance between arrow tips.
Accessors: get

Property: Rhino.Geometry.LinearDimension.ExtensionLine1End
Return: Point2d
Modifiers: public
Summary: End of the first extension line.
Accessors: get set

Property: Rhino.Geometry.LinearDimension.ExtensionLine2End
Return: Point2d
Modifiers: public
Summary: End of the second extension line.
Accessors: get set

Method: Rhino.Geometry.LinearDimension.Create(AnnotationType dimtype, DimensionStyle dimStyle, Plane plane, Vector3d horizontal, Point3d defpoint1, Point3d defpoint2, Point3d dimlinepoint, double rotationInPlane)
Return: LinearDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimtype (AnnotationType)
Parameter Summary: AnnotationType.Rotated or AnnotationType.Aligned
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's DimensionStyle
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: horizontal (Vector3d)
Parameter Summary: Horizontal reference direction
Parameter: defpoint1 (Point3d)
Parameter Summary: First definition point
Parameter: defpoint2 (Point3d)
Parameter Summary: Second definition point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: rotationInPlane (double)
Parameter Summary: For Rotated style

Method: Rhino.Geometry.LinearDimension.FromPoints(Point3d extensionLine1End, Point3d extensionLine2End, Point3d pointOnDimensionLine)
Return: LinearDimension
Modifiers: public, static
Summary: Initializes a new instance of the <b>LinearDimension</b> class, based on three points.

Method: Rhino.Geometry.LinearDimension.Get3dPoints(out Point3d extensionLine1End, out Point3d extensionLine2End, out Point3d arrowhead1End, out Point3d arrowhead2End, out Point3d dimlinepoint, out Point3d textpoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: extensionLine1End (Point3d)
Parameter Summary: First definition point
Parameter: extensionLine2End (Point3d)
Parameter Summary: Second definition point
Parameter: arrowhead1End (Point3d)
Parameter Summary: First arrowhead point
Parameter: arrowhead2End (Point3d)
Parameter Summary: Second Arrowhead point
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: textpoint (Point3d)
Parameter Summary: Text location

Method: Rhino.Geometry.LinearDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.LinearDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.LinearDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Method: Rhino.Geometry.LinearDimension.SetLocations(Point2d extensionLine1End, Point2d extensionLine2End, Point2d pointOnDimensionLine)
Return: void
Modifiers: public
Summary: Sets the three locations of the point, using two-dimensional points that refer to the plane of the annotation.

Class: Rhino.Geometry.LineCurve
Summary: Represents a linear curve.

Constructor: Rhino.Geometry.LineCurve.LineCurve()
Summary: Initializes a new instance of the <b>LineCurve</b> class.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Line line, double t0, double t1)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by retrieving its value from a <b>Line</b> and setting the domain.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Line line)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by retrieving its value from a <b>Line</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(LineCurve other)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by copying values from another linear curve.

Constructor: Rhino.Geometry.LineCurve.LineCurve(Point2d from, Point2d to)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by setting start and end point from two <b>Point2d</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(Point3d from, Point3d to)
Summary: Initializes a new instance of the <b>LineCurve</b> class, by setting start and end point from two <b>Point3d</b> .

Constructor: Rhino.Geometry.LineCurve.LineCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.LineCurve.Line
Return: Line
Modifiers: public
Summary: Gets or sets the Line value inside this curve.
Accessors: get set

Class: Rhino.Geometry.Matrix
Summary: Represents an arbitrarily sized matrix of <b>double</b> -precision floating point numbers. If you are working with a 4x4 matrix, then you may want to use the <b>Transform</b> class instead.

Constructor: Rhino.Geometry.Matrix.Matrix(int rowCount, int columnCount)
Summary: Initializes a new instance of the matrix.

Constructor: Rhino.Geometry.Matrix.Matrix(Transform xform)
Summary: Initializes a new instance of the matrix based on a 4x4 matrix <b>Transform</b> .

Property: Rhino.Geometry.Matrix.ColumnCount
Return: int
Modifiers: public
Summary: Gets the amount of columns.
Accessors: get

Property: Rhino.Geometry.Matrix.IsColumnOrthogonal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is column orthogonal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsColumnOrthoNormal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is column orthonormal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsRowOrthogonal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is row orthogonal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsRowOrthoNormal
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the matrix is row orthonormal.
Accessors: get

Property: Rhino.Geometry.Matrix.IsSquare
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this matrix has the same number of rows and columns. 0x0 matrices are not considered square.
Accessors: get

Property: Rhino.Geometry.Matrix.IsValid
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this matrix is valid.
Accessors: get

Property: Rhino.Geometry.Matrix.RowCount
Return: int
Modifiers: public
Summary: Gets the amount of rows.
Accessors: get

Property: Rhino.Geometry.Matrix.this[int row]
Return: double
Modifiers: public
Summary: Gets or sets the matrix value at the given row and column indices.

Method: Rhino.Geometry.Matrix.BackSolve(double zeroTolerance, double b)
Return: double
Modifiers: public
Summary: Solves M*x=b where M is upper triangular with a unit diagonal and b is a column of values.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) used to test for "zero" values in b in under determined systems of equations.
Parameter: b (double)
Parameter Summary: The values in B[RowCount],...,B[B.Length-1] are tested to make sure they are within "zeroTolerance".

Method: Rhino.Geometry.Matrix.BackSolvePoints(double zeroTolerance, Point3d[] b)
Return: Point3d[]
Modifiers: public
Summary: Solves M*x=b where M is upper triangular with a unit diagonal and b is a column of 3d points.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) used to test for "zero" values in b in under determined systems of equations.
Parameter: b (Point3d[])
Parameter Summary: The values in B[RowCount],...,B[B.Length-1] are tested to make sure they are "zero".

Method: Rhino.Geometry.Matrix.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Matrix.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Matrix.Duplicate()
Return: Matrix
Modifiers: public
Summary: Create a duplicate of this matrix.

Method: Rhino.Geometry.Matrix.GetHashCode()
Return: int
Modifiers: public, override
Summary: Gets the hash code for this matrix. The hash code will change when the matrix changes so you cannot change matrices while they are stored in hash tables.

Method: Rhino.Geometry.Matrix.Invert(double zeroTolerance)
Return: bool
Modifiers: public
Summary: Modifies this matrix to become its own inverse.
Matrix might be non-invertible (singular) and the return value will be false. | Since: 5.0 | Parameter: zeroTolerance (double) | Parameter Summary: The admitted tolerance for 0.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, double b, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix as the first step in solving M*X=b where b is a column of values.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test. If the absolute value of a pivot is <= zero_tolerance, then the pivot is assumed to be zero.
Parameter: b (double)
Parameter Summary: an array of RowCount values that is row reduced with the matrix.
Parameter: pivot (double)
Parameter Summary: the value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, out double determinant, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix to calculate rank and determinant.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test.  If a the absolute value of a pivot is <= zeroTolerance, then the pivot is assumed to be zero.
Parameter: determinant (double)
Parameter Summary: value of determinant is returned here.
Parameter: pivot (double)
Parameter Summary: value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.RowReduce(double zeroTolerance, Point3d[] b, out double pivot)
Return: int
Modifiers: public
Summary: Row reduces a matrix as the first step in solving M*X=b where b is a column of 3d points.
Parameter: zeroTolerance (double)
Parameter Summary: (>=0.0) zero tolerance for pivot test. If the absolute value of a pivot is <= zero_tolerance, then the pivot is assumed to be zero.
Parameter: b (Point3d[])
Parameter Summary: An array of RowCount 3d points that is row reduced with the matrix.
Parameter: pivot (double)
Parameter Summary: The value of the smallest pivot is returned here.

Method: Rhino.Geometry.Matrix.Scale(double s)
Return: void
Modifiers: public
Summary: Modifies the current matrix by multiplying its values by a number.
Parameter: s (double)
Parameter Summary: A scale factor.

Method: Rhino.Geometry.Matrix.SetDiagonal(double d)
Return: void
Modifiers: public
Summary: Sets diagonal value and zeros off all non-diagonal values.
Parameter: d (double)
Parameter Summary: The new diagonal value.

Method: Rhino.Geometry.Matrix.SwapColumns(int columnA, int columnB)
Return: bool
Modifiers: public
Summary: Exchanges two columns.
Parameter: columnA (int)
Parameter Summary: A first column.
Parameter: columnB (int)
Parameter Summary: Another column.

Method: Rhino.Geometry.Matrix.SwapRows(int rowA, int rowB)
Return: bool
Modifiers: public
Summary: Exchanges two rows.
Parameter: rowA (int)
Parameter Summary: A first row.
Parameter: rowB (int)
Parameter Summary: Another row.

Method: Rhino.Geometry.Matrix.Transpose()
Return: bool
Modifiers: public
Summary: Modifies this matrix to be its transpose.
This is like swapping rows with columns.
http://en.wikipedia.org/wiki/Transpose | Since: 5.0

Method: Rhino.Geometry.Matrix.Zero()
Return: void
Modifiers: public
Summary: Sets all values inside the matrix to zero.

Class: Rhino.Geometry.Mesh
Summary: Represents a geometry type that is defined by vertices and faces.
This is often called a face-vertex mesh.

Constructor: Rhino.Geometry.Mesh.Mesh()
Summary: Initializes a new empty mesh.

Constructor: Rhino.Geometry.Mesh.Mesh(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Mesh.ComponentStates
Return: MeshVertexStatusList
Modifiers: public
Summary: Gets access to the vertex hidden/visibility collection in this mesh. This is a runtime property and it is not saved in the 3dm file.
Accessors: get

Property: Rhino.Geometry.Mesh.DisjointMeshCount
Return: int
Modifiers: public
Summary: Gets the number of disjoint (topologically unconnected) pieces in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.FaceNormals
Return: MeshFaceNormalList
Modifiers: public
Summary: Gets access to the face normal collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.Faces
Return: MeshFaceList
Modifiers: public
Summary: Gets access to the mesh face list.
Accessors: get

Property: Rhino.Geometry.Mesh.HasCachedTextureCoordinates
Return: bool
Modifiers: public
Summary: Will return True if SetCachedTextureCoordinates has been called; otherwise will return false.
Accessors: get

Property: Rhino.Geometry.Mesh.HasPrincipalCurvatures
Return: bool
Modifiers: public
Summary: HasPrincipalCurvatures
Accessors: get

Property: Rhino.Geometry.Mesh.IsClosed
Return: bool
Modifiers: public
Summary: Returns True if every mesh "edge" has two or more faces.
Accessors: get

Property: Rhino.Geometry.Mesh.IsOriented
Return: bool
Modifiers: public
Summary: Returns True if the mesh is manifold and every pair of faces that share an "edge" have compatible orientations.
Accessors: get

Property: Rhino.Geometry.Mesh.IsSolid
Return: bool
Modifiers: public
Summary: Returns True if the mesh is solid. A "solid" is a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.Mesh.Ngons
Return: MeshNgonList
Modifiers: public
Summary: Gets access to the mesh ngon list.
Ngons represent groups of Faces (triangles + quads).
Faces are used to tessellate an Ngon internally.
When a triangle or quad is referenced in the Ngon list, it is no longer visualized and     conceived as a single entity, but takes part of the Ngon.
If you need to get access to both Ngons and the faces that are not referenced by Ngons,     that is, all polygons that are visible in the mesh, then use the      helper method. | Since: 6.0 | Accessors: get

Property: Rhino.Geometry.Mesh.Normals
Return: MeshVertexNormalList
Modifiers: public
Summary: Gets access to the vertex normal collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.PartitionCount
Return: int
Modifiers: public
Summary: Number of partition information chunks stored on this mesh based on the last call to CreatePartitions
Accessors: get

Property: Rhino.Geometry.Mesh.TextureCoordinates
Return: MeshTextureCoordinateList
Modifiers: public
Summary: Gets access to the vertex texture coordinate collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.TopologyEdges
Return: MeshTopologyEdgeList
Modifiers: public
Summary: Gets the <b>Rhino.Geometry.Collections.MeshTopologyEdgeList</b> object associated with this mesh.
This object stores edge connectivity. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.Mesh.TopologyVertices
Return: MeshTopologyVertexList
Modifiers: public
Summary: Gets the <b>Rhino.Geometry.Collections.MeshTopologyVertexList</b> object associated with this mesh.
This object stores vertex connectivity and the indices of vertices     that were unified while computing the edge topology. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.Mesh.VertexColors
Return: MeshVertexColorList
Modifiers: public
Summary: Gets access to the (optional) vertex color collection in this mesh.
Accessors: get

Property: Rhino.Geometry.Mesh.Vertices
Return: MeshVertexList
Modifiers: public
Summary: Gets access to the vertices set of this mesh.
Accessors: get

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness, double sharpAngle, System.Threading.CancellationToken cancelToken)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.
Parameter: sharpAngle (double)
Parameter Summary: Sharpness angle in radians.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness, System.Threading.CancellationToken cancelToken)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Mesh.ComputeThickness(IEnumerable<Mesh> meshes, double maximumThickness)
Return: MeshThicknessMeasurement[]
Modifiers: public, static
Summary: Compute thickness metrics for this mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to include in thickness analysis.
Parameter: maximumThickness (double)
Parameter Summary: Maximum thickness to consider. Use as small a thickness as possible to speed up the solver.

Method: Rhino.Geometry.Mesh.CreateBooleanDifference(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet, MeshBooleanOptions options, out Commands.Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid difference of two sets of Meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes (the set to subtract from).
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes (the set to subtract).
Parameter: options (MeshBooleanOptions)
Parameter Summary: An option instance. Should have a valid Tolerance set.
Parameter: result (Commands.Result)
Parameter Summary: Indicates if the function succeeded, was cancelled, did nothing, or failed.

Method: Rhino.Geometry.Mesh.CreateBooleanDifference(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid difference of two sets of Meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes (the set to subtract from).
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes (the set to subtract).

Method: Rhino.Geometry.Mesh.CreateBooleanIntersection(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet, MeshBooleanOptions options, out Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid intersection of two sets of meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes.
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes.
Parameter: options (MeshBooleanOptions)
Parameter Summary: The boolean option instance, or null.
Parameter: result (Result)
Parameter Summary: A value indicating success, or cancel, or failure, or nothing.

Method: Rhino.Geometry.Mesh.CreateBooleanIntersection(IEnumerable<Mesh> firstSet, IEnumerable<Mesh> secondSet)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid intersection of two sets of meshes.
Parameter: firstSet (IEnumerable<Mesh>)
Parameter Summary: First set of Meshes.
Parameter: secondSet (IEnumerable<Mesh>)
Parameter Summary: Second set of Meshes.

Method: Rhino.Geometry.Mesh.CreateBooleanSplit(IEnumerable<Mesh> meshesToSplit, IEnumerable<Mesh> meshSplitters, MeshBooleanOptions options, out Result result)
Return: Mesh[]
Modifiers: public, static
Summary: Splits a set of meshes with another set.
Parameter: meshesToSplit (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes to be split. If this is null, None will be returned.
Parameter: meshSplitters (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes that cut. If this is null, None will be returned.
Parameter: options (MeshBooleanOptions)
Parameter Summary: The boolean option instance, or null.
Parameter: result (Result)
Parameter Summary: A value indicating success, or cancel, or failure, or nothing.

Method: Rhino.Geometry.Mesh.CreateBooleanSplit(IEnumerable<Mesh> meshesToSplit, IEnumerable<Mesh> meshSplitters)
Return: Mesh[]
Modifiers: public, static
Summary: Splits a set of meshes with another set.
Parameter: meshesToSplit (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes to be split. If this is null, None will be returned.
Parameter: meshSplitters (IEnumerable<Mesh>)
Parameter Summary: A list, an array, or any enumerable set of meshes that cut. If this is null, None will be returned.

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes, double tolerance)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.
Parameter: tolerance (double)
Parameter Summary: A valid tolerance value. See <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes, MeshBooleanOptions options, out Commands.Result commandResult)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.
Parameter: options (MeshBooleanOptions)
Parameter Summary: An option instance. Can be null, but generally it should be instantiated and have a tolerance set.
Parameter: commandResult (Commands.Result)
Parameter Summary: A value indicating if the function was successful, or if it was cancelled, or if it did nothing, or failed.

Method: Rhino.Geometry.Mesh.CreateBooleanUnion(IEnumerable<Mesh> meshes)
Return: Mesh[]
Modifiers: public, static
Summary: Computes the solid union of a set of meshes. WARNING: Use the overload that takes a tolerance or options.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to union.

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Plane sectionPlane, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Constructs contour curves for a mesh, sectioned at a plane.
Parameter: meshToContour (Mesh)
Parameter Summary: A mesh to contour.
Parameter: sectionPlane (Plane)
Parameter Summary: A cutting plane.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10. See comments at <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Plane sectionPlane)
Return: Curve[]
Modifiers: public, static
Summary: (Old call maintained for compatibility.)
Parameter: meshToContour (Mesh)
Parameter Summary: Avoid.
Parameter: sectionPlane (Plane)
Parameter Summary: Avoid.

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval, double tolerance)
Return: Curve[]
Modifiers: public, static
Summary: Constructs contour curves for a mesh, sectioned along a linear axis.
Parameter: meshToContour (Mesh)
Parameter Summary: A mesh to contour.
Parameter: contourStart (Point3d)
Parameter Summary: A start point of the contouring axis.
Parameter: contourEnd (Point3d)
Parameter Summary: An end point of the contouring axis.
Parameter: interval (double)
Parameter Summary: An interval distance.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10. See comments at <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>

Method: Rhino.Geometry.Mesh.CreateContourCurves(Mesh meshToContour, Point3d contourStart, Point3d contourEnd, double interval)
Return: Curve[]
Modifiers: public, static
Summary: (Old call maintained for compatibility.)
Parameter: meshToContour (Mesh)
Parameter Summary: Avoid.
Parameter: contourStart (Point3d)
Parameter Summary: Avoid.
Parameter: contourEnd (Point3d)
Parameter Summary: Avoid.
Parameter: interval (double)
Parameter Summary: Avoid.

Method: Rhino.Geometry.Mesh.CreateConvexHull3D(IEnumerable<Point3d> points, out int[] hullFacets, double tolerance, double angleTolerance)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a 3d convex hull mesh from input points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The 3D input points to be covered with the convex hull. These points must not be coplanar.
Parameter: hullFacets (int[])
Parameter Summary: An out parameter of jagged array of indices into the argument point enumerable. Each list item specifies the indices that make up a facet of the convex hull. These indices are not indices into the resulting mesh's indices. Can be the empty jagged array if the resulting mesh is null.
Parameter: tolerance (double)
Parameter Summary: The tolerance used to decide if points are coplanar or not. Use the document's tolerance if in doubt.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance used for merging coplanar points into facets. Use the document's angle tolerance in radians if in doubt.

Method: Rhino.Geometry.Mesh.CreateExtrusion(Curve profile, Vector3d direction, MeshingParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.
Parameter: parameters (MeshingParameters)
Parameter Summary: Parameters used to create the mesh.

Method: Rhino.Geometry.Mesh.CreateExtrusion(Curve profile, Vector3d direction)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.

Method: Rhino.Geometry.Mesh.CreateFromBox(BoundingBox box, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh that matches a bounding box.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for creation.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBox(Box box, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh that matches an aligned box.
Parameter: box (Box)
Parameter Summary: Box to match.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBox(IEnumerable<Point3d> corners, int xCount, int yCount, int zCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs new mesh from 8 corner points.
Parameter: corners (IEnumerable<Point3d>)
Parameter Summary: 8 points defining the box corners arranged as the vN labels indicate.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.
Parameter: zCount (int)
Parameter Summary: Number of faces in z-direction.

Method: Rhino.Geometry.Mesh.CreateFromBrep(Brep brep, MeshingParameters meshingParameters)
Return: Mesh[]
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to approximate.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: Parameters to use during meshing.

Method: Rhino.Geometry.Mesh.CreateFromBrep(Brep brep)
Return: Mesh[]
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: brep (Brep)
Parameter Summary: Brep to approximate.

Method: Rhino.Geometry.Mesh.CreateFromClosedPolyline(Polyline polyline)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a Mesh that is a triangulation of a simple closed polyline that projects onto a plane.
Parameter: polyline (Polyline)
Parameter Summary: must be closed

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around, bool solid, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cone.
Parameter: cone (Cone)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.
Parameter: solid (bool)
Parameter Summary: If False the mesh will be open with no faces on the circular planar portion.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around, bool solid)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cone.
Parameter: cone (Cone)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.
Parameter: solid (bool)
Parameter Summary: If False the mesh will be open with no faces on the circular planar portion.

Method: Rhino.Geometry.Mesh.CreateFromCone(Cone cone, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a solid mesh cone.
Parameter: cone (Cone)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cone.

Method: Rhino.Geometry.Mesh.CreateFromCurveExtrusion(Curve curve, Vector3d direction, MeshingParameters parameters, BoundingBox boundingBox)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from an extruded curve. This method is designed for projecting curves onto a mesh. In most cases, a better to use <b>Mesh.CreateExtrusion(Curve, Vector3d)</b> .
Parameter: curve (Curve)
Parameter Summary: A curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: The direction of extrusion.
Parameter: parameters (MeshingParameters)
Parameter Summary: The parameters of meshing.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The bounding box controls the length of the extrusion.

Method: Rhino.Geometry.Mesh.CreateFromCurvePipe(Curve curve, double radius, int segments, int accuracy, MeshPipeCapStyle capType, bool faceted, IEnumerable<Interval> intervals)
Return: Mesh
Modifiers: public, static
Summary: Constructs a new mesh pipe from a curve.
Parameter: curve (Curve)
Parameter Summary: A curve to pipe.
Parameter: radius (double)
Parameter Summary: The radius of the pipe.
Parameter: segments (int)
Parameter Summary: The number of segments in the pipe.
Parameter: accuracy (int)
Parameter Summary: The accuracy of the pipe.
Parameter: capType (MeshPipeCapStyle)
Parameter Summary: The type of cap to be created at the end of the pipe.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the pipe is faceted, or not.
Parameter: intervals (IEnumerable<Interval>)
Parameter Summary: A series of intervals to pipe. This value can be null.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop, bool circumscribe, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.
Parameter: circumscribe (bool)
Parameter Summary: If True end polygons will circumscribe circle.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop, bool quadCaps)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.
Parameter: quadCaps (bool)
Parameter Summary: If True and it's possible to make quad caps, i.e.. around is even, then caps will have quad faces.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around, bool capBottom, bool capTop)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.
Parameter: capBottom (bool)
Parameter Summary: If True end at Cylinder.Height1 should be capped.
Parameter: capTop (bool)
Parameter Summary: If True end at Cylinder.Height2 should be capped.

Method: Rhino.Geometry.Mesh.CreateFromCylinder(Cylinder cylinder, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a capped mesh cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: 
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the cylinder.

Method: Rhino.Geometry.Mesh.CreateFromExtrusion(Extrusion extrusion, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a brep.
Parameter: extrusion (Extrusion)
Parameter Summary: Brep to approximate.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: Parameters to use during meshing.

Method: Rhino.Geometry.Mesh.CreateFromFilteredFaceList(Mesh original, IEnumerable<bool> inclusion)
Return: Mesh
Modifiers: public, static
Summary: Constructs a sub-mesh, that contains a filtered list of faces.
Parameter: original (Mesh)
Parameter Summary: The mesh to copy. If null, None is returned.
Parameter: inclusion (IEnumerable<bool>)
Parameter Summary: A series of True and False values, that determine if each face is used in the new mesh. If None or empty, a non-filtered copy of the original mesh is returned.
If the amount does not match the length of the face list, the pattern is repeated. If it exceeds the amount     of faces in the mesh face list, the pattern is truncated.

Method: Rhino.Geometry.Mesh.CreateFromIterativeCleanup(IEnumerable<Mesh> meshes, double tolerance)
Return: Mesh[]
Modifiers: public, static
Summary: Repairs meshes with vertices that are too near, using a tolerance value.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The meshes to be repaired.
Parameter: tolerance (double)
Parameter Summary: A minimum distance for clean vertices.

Method: Rhino.Geometry.Mesh.CreateFromLines(Curve[] lines, int maxFaceValence, double tolerance)
Return: Mesh
Modifiers: public, static
Summary: Creates a mesh by analizing the edge structure. Input lines could be from the extraction of edges from an original mesh.
Parameter: lines (Curve[])
Parameter Summary: Lines to use for computation. If curve is non-linear, curve ends are used
Parameter: maxFaceValence (int)
Parameter Summary: The maximum number of edges per face.
Parameter: tolerance (double)
Parameter Summary: The distance after which two end points of lines are considered coincident.

Method: Rhino.Geometry.Mesh.CreateFromPatchSingleFace(Mesh mesh, IEnumerable<ComponentIndex> components)
Return: Mesh
Modifiers: public, static
Summary: Creates a single mesh face from the given input.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: An enumeration of component indexes from the input mesh. This can be one following combinations: 1 vertex (MeshVertex or MeshTopologyVertex) and 1 edge (MeshTopologyEdge), 2 edges (MeshTopologyEdge), or 3 vertices (MeshVertex or MeshTopologyVertex).

Method: Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Curve boundary, MeshingParameters parameters, double tolerance)
Return: Mesh
Modifiers: public, static
Summary: Attempts to construct a mesh from a closed planar curve.RhinoMakePlanarMeshes
Parameter: boundary (Curve)
Parameter Summary: must be a closed planar curve.
Parameter: parameters (MeshingParameters)
Parameter Summary: parameters used for creating the mesh.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during operation.

Method: Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Curve boundary, MeshingParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Do not use this overload. Use version that takes a tolerance parameter instead.
Parameter: boundary (Curve)
Parameter Summary: Do not use.
Parameter: parameters (MeshingParameters)
Parameter Summary: Do not use.

Method: Rhino.Geometry.Mesh.CreateFromPlane(Plane plane, Interval xInterval, Interval yInterval, int xCount, int yCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs a planar mesh grid.
Parameter: plane (Plane)
Parameter Summary: Plane of mesh.
Parameter: xInterval (Interval)
Parameter Summary: Interval describing size and extends of mesh along plane x-direction.
Parameter: yInterval (Interval)
Parameter Summary: Interval describing size and extends of mesh along plane y-direction.
Parameter: xCount (int)
Parameter Summary: Number of faces in x-direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in y-direction.

Method: Rhino.Geometry.Mesh.CreateFromSphere(Sphere sphere, int xCount, int yCount)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh sphere.
Parameter: sphere (Sphere)
Parameter Summary: Base sphere for mesh.
Parameter: xCount (int)
Parameter Summary: Number of faces in the around direction.
Parameter: yCount (int)
Parameter Summary: Number of faces in the top-to-bottom direction.

Method: Rhino.Geometry.Mesh.CreateFromSubD(SubD subd, int displayDensity)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD limit surface
Parameter: subd (SubD)
Parameter Summary: SubD to mesh
Parameter: displayDensity (int)
Parameter Summary: Adaptive display density value to use. If in doubt, pass  <b>SubDDisplayParameters.Density.DefaultDensity</b> : this is what the cache uses.

Method: Rhino.Geometry.Mesh.CreateFromSubDControlNet(SubD subd)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD control net

Method: Rhino.Geometry.Mesh.CreateFromSubDControlNetWithTextureCoordinates(SubD subd)
Return: Mesh
Modifiers: public, static
Summary: Create a mesh from a SubD control net including texture coordinates

Method: Rhino.Geometry.Mesh.CreateFromSurface(Surface surface, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a surface
Parameter: surface (Surface)
Parameter Summary: Surface to approximate
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: settings used to create the mesh

Method: Rhino.Geometry.Mesh.CreateFromSurface(Surface surface)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh from a surface
Parameter: surface (Surface)
Parameter Summary: Surface to approximate

Method: Rhino.Geometry.Mesh.CreateFromSurfaceControlNet(Surface surface)
Return: Mesh
Modifiers: public, static
Summary: Calculate a mesh representation of a surface's control net.
Parameter: surface (Surface)
Parameter Summary: The surface.

Method: Rhino.Geometry.Mesh.CreateFromTessellation(IEnumerable<Point3d> points, IEnumerable<IEnumerable<Point3d>> edges, Plane plane, bool allowNewVertices)
Return: Mesh
Modifiers: public, static
Summary: Attempts to create a mesh that is a triangulation of a list of points, projected on a plane, including its holes and fixed edges.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable of points.
Parameter: edges (IEnumerable<IEnumerable<Point3d>>)
Parameter Summary: A list of polylines, or other lists of points representing edges. This can be null. If nested enumerable items are null, they will be discarded.
Parameter: plane (Plane)
Parameter Summary: A plane.
Parameter: allowNewVertices (bool)
Parameter Summary: If true, the mesh might have more vertices than the list of input points, if doing so will improve long thin triangles.

Method: Rhino.Geometry.Mesh.CreateFromTorus(Torus torus, int vertical, int around)
Return: Mesh
Modifiers: public, static
Summary: Constructs a mesh torus.
Parameter: torus (Torus)
Parameter Summary: The torus.
Parameter: vertical (int)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: around (int)
Parameter Summary: Number of faces around the torus.

Method: Rhino.Geometry.Mesh.CreateIcoSphere(Sphere sphere, int subdivisions)
Return: Mesh
Modifiers: public, static
Summary: Constructs a icospherical mesh. A mesh icosphere differs from a standard UV mesh sphere in that it's vertices are evenly distributed. A mesh icosphere starts from an icosahedron (a regular polyhedron with 20 equilateral triangles). It is then refined by splitting each triangle into 4 smaller triangles. This splitting can be done several times.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.
Parameter: subdivisions (int)
Parameter Summary: The number of times you want the faces split, where 0  <= subdivisions <= 7. Note, the total number of mesh faces produces is: 20 * (4 ^ subdivisions)

Method: Rhino.Geometry.Mesh.CreatePatch(Polyline outerBoundary, double angleToleranceRadians, Surface pullbackSurface, IEnumerable<Curve> innerBoundaryCurves, IEnumerable<Curve> innerBothSideCurves, IEnumerable<Point3d> innerPoints, bool trimback, int divisions)
Return: Mesh
Modifiers: public, static
Summary: Construct a mesh patch from a variety of input geometry.
Parameter: outerBoundary (Polyline)
Parameter Summary: (optional: can be null) Outer boundary polyline, if provided this will become the outer boundary of the resulting mesh. Any of the input that is completely outside the outer boundary will be ignored and have no impact on the result. If any of the input intersects the outer boundary the result will be unpredictable and is likely to not include the entire outer boundary.
Parameter: angleToleranceRadians (double)
Parameter Summary: Maximum angle between unit tangents and adjacent vertices. Used to divide curve inputs that cannot otherwise be represented as a polyline.
Parameter: pullbackSurface (Surface)
Parameter Summary: (optional: can be null) Initial surface where 3d input will be pulled to make a 2d representation used by the function that generates the mesh. Providing a pullbackSurface can be helpful when it is similar in shape to the pattern of the input, the pulled 2d points will be a better representation of the 3d points. If all of the input is more or less coplanar to start with, providing pullbackSurface has no real benefit.
Parameter: innerBoundaryCurves (IEnumerable<Curve>)
Parameter Summary: (optional: can be null) Polylines to create holes in the output mesh. If innerBoundaryCurves are the only input then the result may be null if trimback is set to False (see comments for trimback) because the resulting mesh could be invalid (all faces created contained vertices from the perimeter boundary).
Parameter: innerBothSideCurves (IEnumerable<Curve>)
Parameter Summary: (optional: can be null) These polylines will create faces on both sides of the edge. If there are only input points(innerPoints) there is no way to guarantee a triangulation that will create an edge between two particular points. Adding a line, or polyline, to innerBothsideCurves that includes points from innerPoints will help guide the triangulation.
Parameter: innerPoints (IEnumerable<Point3d>)
Parameter Summary: (optional: can be null) Points to be used to generate the mesh. If outerBoundary is not null, points outside of that boundary after it has been pulled to pullbackSurface (or the best plane through the input if pullbackSurface is null) will be ignored.
Parameter: trimback (bool)
Parameter Summary: Only used when a outerBoundary has not been provided. When that is the case, the function uses the perimeter of the surface as the outer boundary instead. If true, any face of the resulting triangulated mesh that contains a vertex of the perimeter boundary will be removed.
Parameter: divisions (int)
Parameter Summary: Only used when a outerBoundary has not been provided. When that is the case, division becomes the number of divisions each side of the surface's perimeter will be divided into to create an outer boundary to work with.

Method: Rhino.Geometry.Mesh.CreateQuadSphere(Sphere sphere, int subdivisions)
Return: Mesh
Modifiers: public, static
Summary: Constructs a quad mesh sphere. A quad mesh sphere differs from a standard UV mesh sphere in that it's vertices are evenly distributed. A quad mesh sphere starts from a cube (a regular polyhedron with 6 square sides). It is then refined by splitting each quad into 4 smaller quads. This splitting can be done several times.
Parameter: sphere (Sphere)
Parameter Summary: The input sphere provides the orienting plane and radius.
Parameter: subdivisions (int)
Parameter Summary: The number of times you want the faces split, where 0  <= subdivisions <= 8. Note, the total number of mesh faces produces is: 6 * (4 ^ subdivisions)

Method: Rhino.Geometry.Mesh.CreateRefinedCatmullClarkMesh(Mesh mesh, RefinementSettings settings)
Return: Mesh
Modifiers: public, static
Summary: Instantiates a new mesh that represents a Catmull-Clark subdivision of the mesh.
Parameter: mesh (Mesh)
Parameter Summary: The mesh to subdivide.
Parameter: settings (RefinementSettings)
Parameter Summary: An instance of the settings class, or None for defaults.

Method: Rhino.Geometry.Mesh.CreateRefinedLoopMesh(Mesh mesh, LoopFormula formula, RefinementSettings settings)
Return: Mesh
Modifiers: public, static
Summary: Instantiates a new mesh that represents a Loop subdivision of the mesh.
Parameter: mesh (Mesh)
Parameter Summary: The mesh to subdivide.
Parameter: formula (LoopFormula)
Parameter Summary: The Loop subdivision formula.
Parameter: settings (RefinementSettings)
Parameter Summary: An instance of the settings class, or None for defaults.

Method: Rhino.Geometry.Mesh.CreateUnweldedMesh(Mesh mesh)
Return: Mesh
Modifiers: public, static
Summary: Creates a new unwelded mesh from an existing mesh. Texture coordinates are ignored.
Parameter: mesh (Mesh)
Parameter Summary: The source mesh to copy.

Method: Rhino.Geometry.Mesh.QuadRemeshBrep(Brep brep, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves)
Return: Mesh
Modifiers: public, static
Summary: Create Quad Remesh from a Brep
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence

Method: Rhino.Geometry.Mesh.QuadRemeshBrep(Brep brep, QuadRemeshParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Create QuadRemesh from a Brep Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode

Method: Rhino.Geometry.Mesh.QuadRemeshBrepAsync(Brep brep, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public, static
Summary: Quad remesh this Brep asynchronously.
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary: 
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshBrepAsync(Brep brep, QuadRemeshParameters parameters, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public, static
Summary: Quad remesh this Brep asynchronously.
Parameter: brep (Brep)
Parameter Summary: Set Brep Face Mode by setting QuadRemeshParameters.PreserveMeshArrayEdgesMode
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: progress (IProgress<int>)
Parameter Summary: 
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.RequireIterativeCleanup(IEnumerable<Mesh> meshes, double tolerance)
Return: bool
Modifiers: public, static
Summary: Analyzes some meshes, and determines if a pass of CreateFromIterativeCleanup would change the array.
All available cleanup steps are used. Currently available cleanup steps are:
- mending of single precision coincidence even though double precision vertices differ.
- union of nearly identical vertices, irrespectively of their origin.
- removal of t-joints along edges. | Since: 7.0 | Parameter: meshes (IEnumerable<Mesh>) | Parameter Summary: A list, and array or any enumerable of meshes. | Parameter: tolerance (double) | Parameter Summary: A 3d distance. This is usually a value of about 10e-7 magnitude.

Method: Rhino.Geometry.Mesh.ShrinkWrap(IEnumerable<GeometryBase> geometryBases, ShrinkWrapParameters parameters, MeshingParameters meshingParameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a collection of GeometryBase objects. returns None or error on failure
Parameter: geometryBases (IEnumerable<GeometryBase>)
Parameter Summary: 
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: GeometryBase objects are converted to meshes first using the MeshingParameters provided. Those meshes are then used in the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.ShrinkWrap(IEnumerable<Mesh> meshes, ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a collection of input meshes. Returns None on error or failure.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: 
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.ShrinkWrap(PointCloud pointCloud, ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public, static
Summary: Creates a unified ShrinkWrap mesh from a point cloud returns None on error or failure

Method: Rhino.Geometry.Mesh.Append(IEnumerable<Mesh> meshes)
Return: void
Modifiers: public
Summary: Append a list of meshes. This function is much more efficient than making repeated calls to Mesh.Append(Mesh) when lots of meshes are being joined into a single large mesh.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to append to this one.

Method: Rhino.Geometry.Mesh.Append(Mesh other)
Return: void
Modifiers: public
Summary: Appends a copy of another mesh to this one and updates indices of appended mesh parts.
Parameter: other (Mesh)
Parameter Summary: Mesh to append to this one.

Method: Rhino.Geometry.Mesh.Check(TextLog textLog, ref MeshCheckParameters parameters)
Return: bool
Modifiers: public
Summary: Examines the mesh and logs a description of what it finds right or wrong. The various properties the function checks for are described in MeshCheckParameters.
Parameter: textLog (TextLog)
Parameter Summary: The text log
Parameter: parameters (MeshCheckParameters)
Parameter Summary: The mesh checking parameter and results.

Method: Rhino.Geometry.Mesh.ClearSurfaceData()
Return: void
Modifiers: public
Summary: Removes surface parameters, curvature parameters and surface statistics from the mesh.

Method: Rhino.Geometry.Mesh.ClearTextureData()
Return: void
Modifiers: public
Summary: Removes all texture coordinate information from this mesh.

Method: Rhino.Geometry.Mesh.ClosestMeshPoint(Point3d testPoint, double maximumDistance)
Return: MeshPoint
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point. Similar to the ClosestPoint function except this returns a MeshPoint class which includes extra information beyond just the location of the closest point.
Parameter: testPoint (Point3d)
Parameter Summary: The source of the search.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint, out Point3d pointOnMesh, double maximumDistance)
Return: int
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.
Parameter: pointOnMesh (Point3d)
Parameter Summary: Point on the mesh closest to testPoint.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint, out Point3d pointOnMesh, out Vector3d normalAtPoint, double maximumDistance)
Return: int
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.
Parameter: pointOnMesh (Point3d)
Parameter Summary: Point on the mesh closest to testPoint.
Parameter: normalAtPoint (Vector3d)
Parameter Summary: The normal vector of the mesh at the closest point.
Parameter: maximumDistance (double)
Parameter Summary: Optional upper bound on the distance from test point to the mesh. If you are only interested in finding a point Q on the mesh when testPoint.DistanceTo(Q) < maximumDistance, then set maximumDistance to that value. This parameter is ignored if you pass 0.0 for a maximumDistance.

Method: Rhino.Geometry.Mesh.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Gets the point on the mesh that is closest to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to search for.

Method: Rhino.Geometry.Mesh.CollapseFacesByArea(double lessThanArea, double greaterThanArea)
Return: int
Modifiers: public
Summary: Collapses multiple mesh faces, with areas less than LessThanArea and greater than GreaterThanArea, based on the principles found in Stan Melax's mesh reduction PDF, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: lessThanArea (double)
Parameter Summary: Area in which faces are selected if their area is less than or equal to.
Parameter: greaterThanArea (double)
Parameter Summary: Area in which faces are selected if their area is greater than or equal to.

Method: Rhino.Geometry.Mesh.CollapseFacesByByAspectRatio(double aspectRatio)
Return: int
Modifiers: public
Summary: Collapses a multiple mesh faces, determined by face aspect ratio, based on criteria found in Stan Melax's polygon reduction, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: aspectRatio (double)
Parameter Summary: Faces with an aspect ratio less than aspectRatio are considered as candidates.

Method: Rhino.Geometry.Mesh.CollapseFacesByEdgeLength(bool bGreaterThan, double edgeLength)
Return: int
Modifiers: public
Summary: Collapses multiple mesh faces, with greater/less than edge length, based on the principles found in Stan Melax's mesh reduction PDF, see http://pomax.nihongoresources.com/downloads/PolygonReduction.pdf
Parameter: bGreaterThan (bool)
Parameter Summary: Determines whether edge with lengths greater than or less than edgeLength are collapsed.
Parameter: edgeLength (double)
Parameter Summary: Length with which to compare to edge lengths.

Method: Rhino.Geometry.Mesh.ColorAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Color
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by <b>MeshPoint.T</b> .
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.ColorAt(MeshPoint meshPoint)
Return: Color
Modifiers: public
Summary: Evaluate a mesh color at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.Compact()
Return: bool
Modifiers: public
Summary: Removes any unreferenced objects from arrays, re-indexes as needed and shrinks arrays to minimum required size.

Method: Rhino.Geometry.Mesh.ComputeAutoCreaseInformation()
Return: byte
Modifiers: public
Summary: Do not use this method. Length: top.Mesh.Vertices.Count

Method: Rhino.Geometry.Mesh.ComputeCurvatureApproximation(int type, out double perVertexCurvatures)
Return: bool
Modifiers: public
Summary: Compute an approximation of the discrete curvatures of the mesh vertices, according to which type of curvature information is requested. This method will not yield meaningful values on nonmanifold vertices, and nan on naked vertices. For now, this method operates solely on the mesh topology (the fully welded mesh), but distribtes the result across all the ordinary vertices. This method is a const and thread-safe method and will leave the m_K array untouched.  An integer indicating which curvature is desired. gaussian_curvature = 1, mean_curvature = 2, minimum unsigned radius of curvature = 3, maximum unsigned radius of curvature = 4  Resulting curvature array on success, None on failure. On success, the length of the array is the number of vertices.
Parameter: type (int)
Parameter Summary: An integer indicating which curvature is desired. gaussian_curvature = 1, mean_curvature = 2, minimum unsigned radius of curvature = 3, maximum unsigned radius of curvature = 4
Parameter: perVertexCurvatures (double)
Parameter Summary: Resulting curvature array on success, None on failure. On success, the length of the array is the number of vertices.

Method: Rhino.Geometry.Mesh.CopyFrom(Mesh other)
Return: void
Modifiers: public
Summary: Copies mesh values into this mesh from another mesh.
Parameter: other (Mesh)
Parameter Summary: The other mesh to copy from.

Method: Rhino.Geometry.Mesh.CreatePartitions(int maximumVertexCount, int maximumTriangleCount)
Return: bool
Modifiers: public
Summary: In ancient times (or modern smart phone times), some rendering engines were only able to process small batches of triangles and the CreatePartitions() function was provided to partition the mesh into subsets of vertices and faces that those rendering engines could handle.

Method: Rhino.Geometry.Mesh.CreateVertexColorsFromBitmap(RhinoDoc doc, TextureMapping mapping, Transform xform, System.Drawing.Bitmap bitmap)
Return: bool
Modifiers: public
Summary: Populate the vertex colors from a bitmap image.
Parameter: doc (RhinoDoc)
Parameter Summary: The document associated with this operation for searching purposes.
Parameter: mapping (TextureMapping)
Parameter Summary: The texture mapping to be used on the mesh.  Surface parameter mapping is assumed if None - but surface parameters must be available on the mesh.
Parameter: xform (Transform)
Parameter Summary: Local mapping transform for the mesh mapping.  Use identity for surface parameter mapping.
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: The bitmap to use for the colors.

Method: Rhino.Geometry.Mesh.DestroyPartition()
Return: void
Modifiers: public
Summary: Destroys mesh partition.

Method: Rhino.Geometry.Mesh.DestroyTopology()
Return: void
Modifiers: public
Summary: Removes topology data, forcing all topology information to be recomputed.

Method: Rhino.Geometry.Mesh.DestroyTree()
Return: void
Modifiers: public
Summary: Destroys the mesh vertex access tree.

Method: Rhino.Geometry.Mesh.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Constructs a copy of this mesh. This is the same as <b>DuplicateMesh</b> .

Method: Rhino.Geometry.Mesh.DuplicateMesh()
Return: Mesh
Modifiers: public
Summary: Constructs a copy of this mesh. This is the same as <b>Duplicate</b> .

Method: Rhino.Geometry.Mesh.EvaluateMeshGeometry(Surface surface)
Return: bool
Modifiers: public
Summary: If the mesh has SurfaceParameters, the surface is evaluated at these parameters and the mesh geometry is updated.
Parameter: surface (Surface)
Parameter Summary: An input surface.

Method: Rhino.Geometry.Mesh.ExplodeAtUnweldedEdges()
Return: Mesh[]
Modifiers: public
Summary: Explode the mesh into sub-meshes where a sub-mesh is a collection of faces that are contained within a closed loop of "unwelded" edges. Unwelded edges are edges where the faces that share the edge have unique mesh vertices (not mesh topology vertices) at both ends of the edge.

Method: Rhino.Geometry.Mesh.ExtendSelectionByEdgeRidge(int preselectedEdges, int newEdge, bool iterative)
Return: int
Modifiers: public
Summary: Suggests an extension of a selection set by using information related with topology and alignment.
Parameter: preselectedEdges (int)
Parameter Summary: An array of edges that were already selected.
Parameter: newEdge (int)
Parameter Summary: A new edge index.
Parameter: iterative (bool)
Parameter Summary:

Method: Rhino.Geometry.Mesh.ExtendSelectionByFaceLoop(int preselectedFaces, int newFace, bool iterative)
Return: int
Modifiers: public
Summary: Suggests an extension of a face selection set by using information related with topology and alignment.
Parameter: preselectedFaces (int)
Parameter Summary: An array of faces that were already selected.
Parameter: newFace (int)
Parameter Summary: A new face index. If this index is already part of the selection, no extension is suggested.
Parameter: iterative (bool)
Parameter Summary:

Method: Rhino.Geometry.Mesh.ExtractNonManifoldEdges(bool selective)
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, non-manifold mesh edges.
Parameter: selective (bool)
Parameter Summary: If true, then extract hanging faces only.

Method: Rhino.Geometry.Mesh.FileHole(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Given a starting "naked" edge index, this function attempts to determine a "hole" by chaining additional naked edges together until if returns to the start index. Then it triangulates the closed polygon and either adds the faces to the mesh.
Parameter: topologyEdgeIndex (int)
Parameter Summary: Starting naked edge index.

Method: Rhino.Geometry.Mesh.FillHoles()
Return: bool
Modifiers: public
Summary: Attempts to determine "holes" in the mesh by chaining naked edges together. Then it triangulates the closed polygons adds the faces to the mesh.

Method: Rhino.Geometry.Mesh.Flip(bool vertexNormals, bool faceNormals, bool faceOrientation, bool ngonsBoundaryDirection)
Return: void
Modifiers: public
Summary: Reverses the direction of the mesh.
Parameter: vertexNormals (bool)
Parameter Summary: If true, vertex normals will be reversed.
Parameter: faceNormals (bool)
Parameter Summary: If true, face normals will be reversed.
Parameter: faceOrientation (bool)
Parameter Summary: If true, face orientations will be reversed.
Parameter: ngonsBoundaryDirection (bool)
Parameter Summary: If true, ngon boundaries will be reversed

Method: Rhino.Geometry.Mesh.Flip(bool vertexNormals, bool faceNormals, bool faceOrientation)
Return: void
Modifiers: public
Summary: Reverses the direction of the mesh.
Parameter: vertexNormals (bool)
Parameter Summary: If true, vertex normals will be reversed.
Parameter: faceNormals (bool)
Parameter Summary: If true, face normals will be reversed.
Parameter: faceOrientation (bool)
Parameter Summary: If true, face orientations will be reversed.

Method: Rhino.Geometry.Mesh.GetCachedTextureCoordinates(RhinoObject rhinoObject, Rhino.DocObjects.Texture texture)
Return: CachedTextureCoordinates
Modifiers: public
Summary: Returns cached texture coordinate set based on the texture. Make sure to set up cached texture coordinates for all textures in the material first by calling SetCachedTextureCoordinatesFromMaterial(RhinoObject rhinoObject, Rhino.DocObjects.Material material)  If this function returns None then there are no texture coordinates available.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: RhinoObject that defines texture mappings
Parameter: texture (Rhino.DocObjects.Texture)
Parameter Summary: Texture that defines the mapping channel

Method: Rhino.Geometry.Mesh.GetCachedTextureCoordinates(System.Guid textureMappingId)
Return: CachedTextureCoordinates
Modifiers: public
Summary: Call this method to get cached texture coordinates for a texture mapping with the specified Id.
Parameter: textureMappingId (System.Guid)
Parameter Summary: Texture mapping Id

Method: Rhino.Geometry.Mesh.GetNakedEdgePointStatus()
Return: bool
Modifiers: public
Summary: Returns an array of Boolean values equal in length to the number of vertices in this mesh. Each value corresponds to a mesh vertex and is set to True if the vertex is not completely surrounded by faces.

Method: Rhino.Geometry.Mesh.GetNakedEdges()
Return: Polyline[]
Modifiers: public
Summary: Returns all edges of a mesh that are considered "naked" in the sense that the edge only has one face.

Method: Rhino.Geometry.Mesh.GetNgonAndFacesCount()
Return: int
Modifiers: public
Summary: Retrieves the count of items that <b>GetNgonAndFacesEnumerable</b> will provide.

Method: Rhino.Geometry.Mesh.GetNgonAndFacesEnumerable()
Return: IEnumerable<MeshNgon>
Modifiers: public
Summary: Retrieves a complete enumerable, i.e., one that provides an iterator over every face that is present, no matter if defined as a triangle, a quad, or a strictly over-four-sided ngon.

Method: Rhino.Geometry.Mesh.GetOutlines(Display.RhinoViewport viewport)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh. The projection information in the viewport is used to determine how the outlines are projected.
Parameter: viewport (Display.RhinoViewport)
Parameter Summary: A viewport to determine projection direction.

Method: Rhino.Geometry.Mesh.GetOutlines(Plane plane)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh projected against a plane.
Parameter: plane (Plane)
Parameter Summary: A plane to project against.

Method: Rhino.Geometry.Mesh.GetOutlines(ViewportInfo viewportInfo, Plane plane)
Return: Polyline[]
Modifiers: public
Summary: Constructs the outlines of a mesh.
Parameter: viewportInfo (ViewportInfo)
Parameter Summary: The viewport info that provides the outline direction.
Parameter: plane (Plane)
Parameter Summary: Usually the view's construction plane. If a parallel projection and view plane is parallel to this, then project the results to the plane.

Method: Rhino.Geometry.Mesh.GetPartition(int which)
Return: MeshPart
Modifiers: public
Summary: Retrieves a partition. See <b>CreatePartitions</b> for details.
Parameter: which (int)
Parameter Summary: The partition index.

Method: Rhino.Geometry.Mesh.GetSelfIntersections(double tolerance, out Polyline[] perforations, bool overlapsPolylines, out Polyline[] overlapsPolylinesResult, bool overlapsMesh, out Mesh overlapsMeshResult, FileIO.TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: bool
Modifiers: public
Summary: Gets the intersections of this mesh with itself.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: perforations (Polyline[])
Parameter Summary: The array of perforations.
Parameter: overlapsPolylines (bool)
Parameter Summary: If true, the next argument is computed.
Parameter: overlapsPolylinesResult (Polyline[])
Parameter Summary: The array of overlaps, in terms of polylines.
Parameter: overlapsMesh (bool)
Parameter Summary: If true, the next argument is computed.
Parameter: overlapsMeshResult (Mesh)
Parameter Summary: A mesh that represents the overlaps in terms of surfaces.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A report of the outcome.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter.

Method: Rhino.Geometry.Mesh.GetUnsafeLock(bool writable)
Return: MeshUnsafeLock
Modifiers: public
Summary: Allows to obtain unsafe pointers to the underlying unmanaged data structures of the mesh.
Parameter: writable (bool)
Parameter Summary: True if user will need to write onto the structure. False otherwise.

Method: Rhino.Geometry.Mesh.HealNakedEdges(double distance)
Return: bool
Modifiers: public
Summary: Attempts to "heal" naked edges in a mesh based on a given distance. First attempts to move vertices to neighboring vertices that are within that distance away. Then it finds edges that have a closest point to the vertex within the distance and splits the edge. When it finds one it splits the edge and makes two new edges using that point.
Parameter: distance (double)
Parameter Summary: Distance to not exceed when modifying the mesh.

Method: Rhino.Geometry.Mesh.InvalidateCachedTextureCoordinates(bool bOnlyInvalidateCachedSurfaceParameterMapping)
Return: void
Modifiers: public
Summary: Invalidates all cached texture coordinates. Call this function when you have made changes that will affect the texture coordinates on the mesh.
Parameter: bOnlyInvalidateCachedSurfaceParameterMapping (bool)
Parameter Summary: If True then only cached surface parameter mapping texture coordinates will be invalidated. Use this after making changes to the m_S array.

Method: Rhino.Geometry.Mesh.IsManifold()
Return: bool
Modifiers: public
Summary: Returns True if every mesh "edge" has at most two faces.

Method: Rhino.Geometry.Mesh.IsManifold(bool topologicalTest, out bool isOriented, out bool hasBoundary)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the mesh is manifold. A manifold mesh does not have any edge that borders more than two faces.
Parameter: topologicalTest (bool)
Parameter Summary: If true, the query treats coincident vertices as the same.
Parameter: isOriented (bool)
Parameter Summary: isOriented will be set to True if the mesh is a manifold and adjacent faces have compatible face normals.
Parameter: hasBoundary (bool)
Parameter Summary: hasBoundary will be set to True if the mesh is a manifold and there is at least one "edge" with no more than one adjacent face.

Method: Rhino.Geometry.Mesh.IsPointInside(Point3d point, double tolerance, bool strictlyIn)
Return: bool
Modifiers: public
Summary: Determines if a point is inside a solid mesh.
Parameter: point (Point3d)
Parameter Summary: 3d point to test.
Parameter: tolerance (double)
Parameter Summary: (>=0) 3d distance tolerance used for ray-mesh intersection and determining strict inclusion. This is expected to be a tiny value.
Parameter: strictlyIn (bool)
Parameter Summary: If strictlyIn is true, then point must be inside mesh by at least tolerance in order for this function to return true. If strictlyIn is false, then this function will return True if point is inside or the distance from point to a mesh face is <= tolerance.

Method: Rhino.Geometry.Mesh.MatchEdges(double distance, bool rachet)
Return: bool
Modifiers: public
Summary: Moves face edges of an open mesh to meet adjacent face edges. The method will first try to match vertices, and then then it will try to split edges to make the edges match.
Parameter: distance (double)
Parameter Summary: The distance tolerance. Use larger tolerances only if you select specific edges to close.
Parameter: rachet (bool)
Parameter Summary: If true, matching the mesh takes place in four passes starting at a tolerance that is smaller than your specified tolerance and working up to the specified tolerance with successive passes. This matches small edges first and works up to larger edges. If false, then a single pass is made.

Method: Rhino.Geometry.Mesh.MergeAllCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.Mesh.MergeAllCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.Mesh.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Clear local cache on non constant calls

Method: Rhino.Geometry.Mesh.NormalAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Vector3d
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by MeshPoint.T.
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.NormalAt(MeshPoint meshPoint)
Return: Vector3d
Modifiers: public
Summary: Evaluate a mesh normal at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify, Vector3d direction, out List<int> wallFacesOut)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance along the direction parameter. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function. Returns list of wall faces, i.e. the faces that connect original and offset mesh when solidified.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.
Parameter: direction (Vector3d)
Parameter Summary: Direction of offset for all vertices.
Parameter: wallFacesOut (List<int>)
Parameter Summary: Returns list of wall faces.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify, Vector3d direction)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance along the direction parameter. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.
Parameter: direction (Vector3d)
Parameter Summary: Direction of offset for all vertices.

Method: Rhino.Geometry.Mesh.Offset(double distance, bool solidify)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals. Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges. If solidify is False it acts exactly as the Offset(distance) function.
Parameter: distance (double)
Parameter Summary: A distance value.
Parameter: solidify (bool)
Parameter Summary: True if the mesh should be solidified.

Method: Rhino.Geometry.Mesh.Offset(double distance)
Return: Mesh
Modifiers: public
Summary: Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals. Same as Mesh.Offset(distance, false)
Parameter: distance (double)
Parameter Summary: A distance value to use for offsetting.

Method: Rhino.Geometry.Mesh.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Performs some memory cleanup if necessary

Method: Rhino.Geometry.Mesh.PatchSingleFace(IEnumerable<ComponentIndex> components)
Return: bool
Modifiers: public
Summary: Creates a single mesh face from the given input. The new mesh will be apppended to this mesh.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: An enumeration of component indexes from this mesh. This can be one following combinations: 1 vertex (MeshVertex or MeshTopologyVertex) and 1 edge (MeshTopologyEdge), 2 edges (MeshTopologyEdge), or 3 vertices (MeshVertex or MeshTopologyVertex).

Method: Rhino.Geometry.Mesh.PointAt(int faceIndex, double t0, double t1, double t2, double t3)
Return: Point3d
Modifiers: public
Summary: Evaluates a mesh at a set of barycentric coordinates. Barycentric coordinates must be assigned in accordance with the rules as defined by MeshPoint.T.
Parameter: faceIndex (int)
Parameter Summary: Index of triangle or quad to evaluate.
Parameter: t0 (double)
Parameter Summary: First barycentric coordinate.
Parameter: t1 (double)
Parameter Summary: Second barycentric coordinate.
Parameter: t2 (double)
Parameter Summary: Third barycentric coordinate.
Parameter: t3 (double)
Parameter Summary: Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.

Method: Rhino.Geometry.Mesh.PointAt(MeshPoint meshPoint)
Return: Point3d
Modifiers: public
Summary: Evaluate a mesh at a set of barycentric coordinates.
Parameter: meshPoint (MeshPoint)
Parameter Summary: MeshPoint instance containing a valid Face Index and Barycentric coordinates.

Method: Rhino.Geometry.Mesh.PullCurve(Curve curve, double tolerance)
Return: PolylineCurve
Modifiers: public
Summary: Gets a polyline approximation of the input curve and then moves its control points to the closest point on the mesh. Then it "connects the points" over edges so that a polyline on the mesh is formed.
Parameter: curve (Curve)
Parameter Summary: A curve to pull.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Mesh.PullPointsToMesh(IEnumerable<Point3d> points)
Return: Point3d[]
Modifiers: public
Summary: Pulls a collection of points to a mesh.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An array, a list or any enumerable set of points.

Method: Rhino.Geometry.Mesh.QuadRemesh(QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves)
Return: Mesh
Modifiers: public
Summary: Quad remesh this mesh.
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence

Method: Rhino.Geometry.Mesh.QuadRemesh(QuadRemeshParameters parameters)
Return: Mesh
Modifiers: public
Summary: Quad remesh this mesh.

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(IEnumerable<int> faceBlocks, QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.
Parameter: faceBlocks (IEnumerable<int>)
Parameter Summary: 
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary: 
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(QuadRemeshParameters parameters, IEnumerable<Curve> guideCurves, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.
Parameter: parameters (QuadRemeshParameters)
Parameter Summary: 
Parameter: guideCurves (IEnumerable<Curve>)
Parameter Summary: A curve array used to influence mesh face layout The curves should touch the input mesh Set Guide Curve Influence by using QuadRemeshParameters.GuideCurveInfluence
Parameter: progress (IProgress<int>)
Parameter Summary: 
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary:

Method: Rhino.Geometry.Mesh.QuadRemeshAsync(QuadRemeshParameters parameters, IProgress<int> progress, System.Threading.CancellationToken cancelToken)
Return: Task<Mesh>
Modifiers: public
Summary: Quad remesh this mesh asynchronously.

Method: Rhino.Geometry.Mesh.RebuildNormals()
Return: void
Modifiers: public
Summary: Removes mesh normals and reconstructs the face and vertex normals based on the orientation of the faces.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, System.Threading.CancellationToken cancelToken, IProgress<double> progress, out string problemDescription, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: 
Parameter: progress (IProgress<double>)
Parameter Summary: 
Parameter: problemDescription (string)
Parameter Summary: 
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize, System.Threading.CancellationToken cancelToken, IProgress<double> progress, out string problemDescription)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: 
Parameter: progress (IProgress<double>)
Parameter Summary: 
Parameter: problemDescription (string)
Parameter Summary:

Method: Rhino.Geometry.Mesh.Reduce(int desiredPolygonCount, bool allowDistortion, int accuracy, bool normalizeSize)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: desiredPolygonCount (int)
Parameter Summary: desired or target number of faces
Parameter: allowDistortion (bool)
Parameter Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Parameter: accuracy (int)
Parameter Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Parameter: normalizeSize (bool)
Parameter Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete

Method: Rhino.Geometry.Mesh.Reduce(ReduceMeshParameters parameters, bool threaded)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: parameters (ReduceMeshParameters)
Parameter Summary: Parameters
Parameter: threaded (bool)
Parameter Summary: If True then will run computation inside a worker thread and ignore any provided CancellationTokens and ProgressReporters. If False then will run on main thread.

Method: Rhino.Geometry.Mesh.Reduce(ReduceMeshParameters parameters)
Return: bool
Modifiers: public
Summary: Reduce polygon count
Parameter: parameters (ReduceMeshParameters)
Parameter Summary: Parameters

Method: Rhino.Geometry.Mesh.ReleaseUnsafeLock(MeshUnsafeLock meshData)
Return: void
Modifiers: public
Summary: Updates the Mesh data with the information that was stored via the <b>MeshUnsafeLock</b> .
Parameter: meshData (MeshUnsafeLock)
Parameter Summary: The data that will be unlocked.

Method: Rhino.Geometry.Mesh.SetCachedTextureCoordinates(TextureMapping tm, ref Transform xf)
Return: void
Modifiers: public
Summary: Set cached texture coordinates using the specified mapping.

Method: Rhino.Geometry.Mesh.SetCachedTextureCoordinatesFromMaterial(RhinoObject rhinoObject, Rhino.DocObjects.Material material)
Return: void
Modifiers: public
Summary: Sets up cached texture coordinate set for each texture in the material. Textures in the Material define which mapping channels are used and the RhinoObject defines what texture mapping is used for each mapping channel. After this method is called all necessary texture coordinate sets are cached and correct texture coordinates for each texture can be fetched using GetCachedTextureCoordinates(RhinoObject rhinoObject, Rhino.DocObjects.Texture texture)  If any texture coordinates are already cached they will not be re-computed.
Parameter: rhinoObject (RhinoObject)
Parameter Summary: RhinoObject that defines texture mappings
Parameter: material (Rhino.DocObjects.Material)
Parameter Summary: Material with textures that define mapping channels

Method: Rhino.Geometry.Mesh.SetSurfaceParametersFromTextureCoordinates()
Return: bool
Modifiers: public
Summary: If the mesh does not have surface evaluation parameters, has texture coordinates, and the surface parameters can be set in a way so the existing texture coordinates can be computed from the surface parameters, then this function sets the surface parameters. This is useful when meshes that have texture coordinates and do not have surface parameters want to set the surface parameters in a way so that the texture mapping of type TextureMappingType.SurfaceParameters will restore the texture coordinates.

Method: Rhino.Geometry.Mesh.SetTextureCoordinates(TextureMapping tm, Transform xf, bool lazy, bool seamCheck)
Return: void
Modifiers: public
Summary: Set texture coordinates using given mapping and applying given transform.  Set lazy to False to generate texture coordinates right away.
Parameter: tm (TextureMapping)
Parameter Summary: Texture mapping
Parameter: xf (Transform)
Parameter Summary: Transform to apply to the texture mapping
Parameter: lazy (bool)
Parameter Summary: Whether to generate lazily (true) or right away (false)
Parameter: seamCheck (bool)
Parameter Summary: If True then some mesh edges might be unwelded to better represent UV discontinuities in the texture mapping. This only happens for the following mappings: Box, Sphere, Cylinder

Method: Rhino.Geometry.Mesh.SetTextureCoordinates(TextureMapping tm, Transform xf, bool lazy)
Return: void
Modifiers: public
Summary: Set texture coordinates using given mapping and applying given transform.  Set lazy to False to generate texture coordinates right away.
Parameter: tm (TextureMapping)
Parameter Summary: Texture mapping
Parameter: xf (Transform)
Parameter Summary: Transform to apply to the texture mapping
Parameter: lazy (bool)
Parameter Summary: Whether to generate lazily (true) or right away (false)

Method: Rhino.Geometry.Mesh.ShrinkWrap(ShrinkWrapParameters parameters, System.Threading.CancellationToken token)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrapped mesh or None when a mesh was not created or error.
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.
Parameter: token (System.Threading.CancellationToken)
Parameter Summary: A cancellation token

Method: Rhino.Geometry.Mesh.ShrinkWrap(ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrapped mesh or None when a mesh was not created or error.
Parameter: parameters (ShrinkWrapParameters)
Parameter Summary: A ShrinkWrapParameters object that specifies the configuration settings for the ShrinkWrap process.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Mesh.Smooth(double smoothFactor, int numSteps, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: numSteps (int)
Parameter Summary: The number of smoothing iterations.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(IEnumerable<int> vertexIndices, double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths part of a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: vertexIndices (IEnumerable<int>)
Parameter Summary: The mesh vertex indices that specify the part of the mesh to smooth.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.Smooth(IEnumerable<int> vertexIndices, double smoothFactor, int numSteps, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: bool
Modifiers: public
Summary: Smooths part of a mesh by averaging the positions of mesh vertices in a specified region.
Parameter: vertexIndices (IEnumerable<int>)
Parameter Summary: The mesh vertex indices that specify the part of the mesh to smooth.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much vertices move towards the average of the neighboring vertices.
Parameter: numSteps (int)
Parameter Summary: The number of smoothing iterations.
Parameter: bXSmooth (bool)
Parameter Summary: When True vertices move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True vertices move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True vertices move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True vertices along naked edges will not be modified.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Mesh.SolidOrientation()
Return: int
Modifiers: public
Summary: Determines orientation of a "solid" mesh.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes, double tolerance, bool splitAtCoplanar, bool createNgons, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.
Parameter: tolerance (double)
Parameter Summary: A value for intersection tolerance.
WARNING! Correct values are typically in the (10e-8 - 10e-4) range.
An option is to use the document tolerance diminished by a few orders or magnitude. | Parameter: splitAtCoplanar (bool) | Parameter Summary: If false, coplanar areas will not be separated. | Parameter: createNgons (bool) | Parameter Summary: If true, creates ngons along the split ridge. | Parameter: textLog (TextLog) | Parameter Summary: A text log to write onto. | Parameter: cancel (System.Threading.CancellationToken) | Parameter Summary: A cancellation token. | Parameter: progress (IProgress<double>) | Parameter Summary: A progress reporter item. This can be null.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes, double tolerance, bool splitAtCoplanar, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.
Parameter: tolerance (double)
Parameter Summary: A value for intersection tolerance.
WARNING! Correct values are typically in the (10e-8 - 10e-4) range.
An option is to use the document tolerance diminished by a few orders or magnitude. | Parameter: splitAtCoplanar (bool) | Parameter Summary: If false, coplanar areas will not be separated. | Parameter: textLog (TextLog) | Parameter Summary: A text log to write onto. | Parameter: cancel (System.Threading.CancellationToken) | Parameter Summary: A cancellation token. | Parameter: progress (IProgress<double>) | Parameter Summary: A progress reporter item. This can be null.

Method: Rhino.Geometry.Mesh.Split(IEnumerable<Mesh> meshes)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with a collection of meshes. Suggestion: upgrade to overload with tolerance. Does not split at coplanar intersections.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: Meshes to split with.

Method: Rhino.Geometry.Mesh.Split(Mesh mesh)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh with another mesh. Suggestion: upgrade to overload with tolerance.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to split with.

Method: Rhino.Geometry.Mesh.Split(Plane plane)
Return: Mesh[]
Modifiers: public
Summary: Split a mesh by an infinite plane.
Parameter: plane (Plane)
Parameter Summary: The splitting plane.

Method: Rhino.Geometry.Mesh.SplitDisjointPieces()
Return: Mesh[]
Modifiers: public
Summary: Splits up the mesh into its unconnected pieces.

Method: Rhino.Geometry.Mesh.SplitWithProjectedPolylines(IEnumerable<PolylineCurve> curves, double tolerance, TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: Mesh[]
Modifiers: public
Summary: Splits a mesh by adding edges in correspondence with input polylines, and divides the mesh at partitioned areas. Polyline segments that are measured not to be on the mesh will be ignored.
Parameter: curves (IEnumerable<PolylineCurve>)
Parameter Summary: An array, a list or any enumerable of polyline curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: textLog (TextLog)
Parameter Summary: A text log, or null.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token to stop the computation at a given point.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter to inform the user about progress. The reported value is indicative.

Method: Rhino.Geometry.Mesh.SplitWithProjectedPolylines(IEnumerable<PolylineCurve> curves, double tolerance)
Return: Mesh[]
Modifiers: public
Summary: Splits a mesh by adding edges in correspondence with input polylines, and divides the mesh at partitioned areas. Polyline segments that are measured not to be on the mesh will be ignored.
Parameter: curves (IEnumerable<PolylineCurve>)
Parameter Summary: An array, a list or any enumerable of polyline curves.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Mesh.Subdivide()
Return: bool
Modifiers: public
Summary: Subdivides the faces of the mesh.

Method: Rhino.Geometry.Mesh.Subdivide(IEnumerable<int> faceIndices)
Return: bool
Modifiers: public
Summary: Subdivides specific faces of the mesh.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: Indices of the faces to subdivide.

Method: Rhino.Geometry.Mesh.UnifyNormals()
Return: int
Modifiers: public
Summary: Attempts to fix inconsistencies in the directions of mesh faces in a mesh. This function does not modify mesh vertex normals, it rearranges the mesh face winding and face normals to make them all consistent. Note, you may want to call Mesh.Normals.ComputeNormals() to recompute vertex normals after calling this functions.

Method: Rhino.Geometry.Mesh.UnifyNormals(bool countOnly)
Return: int
Modifiers: public
Summary: Attempts to fix inconsistencies in the directions of mesh faces in a mesh. This function does not modify mesh vertex normals, it rearranges the mesh face winding and face normals to make them all consistent. Note, you may want to call Mesh.Normals.ComputeNormals() to recompute vertex normals after calling this functions.
Parameter: countOnly (bool)
Parameter Summary: If true, then only the number of faces that would be modified is determined.

Method: Rhino.Geometry.Mesh.Unweld(double angleToleranceRadians, bool modifyNormals)
Return: void
Modifiers: public
Summary: Makes sure that faces sharing an edge and having a difference of normal greater than or equal to angleToleranceRadians have unique vertices along that edge, adding vertices if necessary.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angle at which to make unique vertices.
Parameter: modifyNormals (bool)
Parameter Summary: Determines whether new vertex normals will have the same vertex normal as the original (false) or vertex normals made from the corresponding face normals (true)

Method: Rhino.Geometry.Mesh.UnweldEdge(IEnumerable<int> edgeIndices, bool modifyNormals)
Return: bool
Modifiers: public
Summary: Adds creases to a smooth mesh by creating coincident vertices along selected edges.
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: An array of mesh topology edge indices.
Parameter: modifyNormals (bool)
Parameter Summary: If true, the vertex normals on each side of the edge take the same value as the face to which they belong, giving the mesh a hard edge look. If false, each of the vertex normals on either side of the edge is assigned the same value as the original normal that the pair is replacing, keeping a smooth look.

Method: Rhino.Geometry.Mesh.UnweldVertices(IEnumerable<int> topologyVertexIndices, bool modifyNormals)
Return: bool
Modifiers: public
Summary: Ensures that faces sharing a common topological vertex have unique indices into the <b>Collections.MeshVertexList</b> collection.
Parameter: topologyVertexIndices (IEnumerable<int>)
Parameter Summary: Topological vertex indices, from the <b>Collections.MeshTopologyVertexList</b> collection, to be unwelded. Use <b>Collections.MeshTopologyVertexList.TopologyVertexIndex</b> to convert from vertex indices to topological vertex indices.
Parameter: modifyNormals (bool)
Parameter Summary: If true, the new vertex normals will be calculated from the face normal.

Method: Rhino.Geometry.Mesh.Volume()
Return: double
Modifiers: public
Summary: Compute volume of the mesh.

Method: Rhino.Geometry.Mesh.Weld(double angleToleranceRadians)
Return: void
Modifiers: public
Summary: Makes sure that faces sharing an edge and having a difference of normal greater than or equal to angleToleranceRadians share vertices along that edge, vertex normals are averaged.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angle at which to weld vertices.

Method: Rhino.Geometry.Mesh.WithDisplacement(MeshDisplacementInfo displacement)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with displacement applied to it.
Parameter: displacement (MeshDisplacementInfo)
Parameter Summary: Information on mesh displacement.

Method: Rhino.Geometry.Mesh.WithEdgeSoftening(double softeningRadius, bool chamfer, bool faceted, bool force, double angleThreshold)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with edge softening applied to it.
Parameter: softeningRadius (double)
Parameter Summary: The softening radius.
Parameter: chamfer (bool)
Parameter Summary: Specifies whether to chamfer the edges.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the edges are faceted.
Parameter: force (bool)
Parameter Summary: Specifies whether to soften edges despite too large a radius.
Parameter: angleThreshold (double)
Parameter Summary: Threshold angle (in degrees) which controls whether an edge is softened or not. The angle refers to the angles between the adjacent faces of an edge.

Method: Rhino.Geometry.Mesh.WithShutLining(bool faceted, double tolerance, IEnumerable<ShutLiningCurveInfo> curves)
Return: Mesh
Modifiers: public
Summary: Constructs new mesh from the current one, with shut lining applied to it.
Parameter: faceted (bool)
Parameter Summary: Specifies whether the shutline is faceted.
Parameter: tolerance (double)
Parameter Summary: The tolerance of the shutline.
Parameter: curves (IEnumerable<ShutLiningCurveInfo>)
Parameter Summary: A collection of curve arguments.

Class: Rhino.Geometry.MeshBooleanOptions
Summary: Contains a set of data to pass to boolean options.

Constructor: Rhino.Geometry.MeshBooleanOptions.MeshBooleanOptions()
Summary: Initializes a new instance of the MeshBooleanOptions class

Property: Rhino.Geometry.MeshBooleanOptions.CancellationToken
Return: CancellationToken
Modifiers: public
Summary: A token that allows to request the cancellation of the operation.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.ProgressReporter
Return: IProgress<double>
Modifiers: public
Summary: Gets or sets the object that is responsible to keep track of calculation progression.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.TextLog
Return: TextLog
Modifiers: public
Summary: Gets or sets a text log to write computed operations into.
Accessors: get set

Property: Rhino.Geometry.MeshBooleanOptions.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets a tolerance value for intersections and overlaps.  <b>Intersect.Intersection.MeshIntersectionsTolerancesCoefficient</b>
Accessors: get set

Class: Rhino.Geometry.MeshDisplacementInfo
Summary: Contains mesh displacement information.

Constructor: Rhino.Geometry.MeshDisplacementInfo.MeshDisplacementInfo(RenderTexture texture, TextureMapping mapping)
Summary: Constructs a displacement information instance with default values. Users of this class should not rely on default values to stay constant across service releases.

Property: Rhino.Geometry.MeshDisplacementInfo.Black
Return: double
Modifiers: public
Summary: Value considered lowest point in the displacement.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.BlackMove
Return: double
Modifiers: public
Summary: The amount of displacement for the black color in the texture.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.ChannelNumber
Return: int
Modifiers: public
Summary: Mapping channel number for the displacement mapping.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.FaceLimit
Return: int
Modifiers: public
Summary: Runs a mesh reduction as a post process o simplify the result of displacement to meet the specified number of faces.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.FairingAmount
Return: int
Modifiers: public
Summary: Straightens rough feature edges. The value specifies the number of passes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.InstanceTransform
Return: Transform
Modifiers: public
Summary: Instance transformation of the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.Mapping
Return: TextureMapping
Modifiers: public
Summary: The texture mapping of the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.MappingTransform
Return: Transform
Modifiers: public
Summary: Texture mapping transform.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.MemoryLimit
Return: int
Modifiers: public
Summary: Specifies how much memory can be allocated for use by the displacement mesh. Value in megabytes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.PostWeldAngle
Return: double
Modifiers: public
Summary: Specifies the maximum angle between face normals of adjacent faces that will get welded together.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.RefineSensitivity
Return: double
Modifiers: public
Summary: Specifies how sensitive the divider for contrasts is on the     displacement texture.
Specify 1 to split all mesh edges on each refine step.
Specify 0.99 to make even slight contrasts on the displacement     texture cause edges to be split.
Specifying 0.01 only splits edges where heavy contrast     exists. | Since: 6.0 | Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.RefineStepCount
Return: int
Modifiers: public
Summary: Specifies the number of refinement passes.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.SweepPitch
Return: double
Modifiers: public
Summary: Specifies how densely the object is initially subdivided. The lower the value, the higher the resolution of the displaced mesh.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.Texture
Return: RenderTexture
Modifiers: public
Summary: The texture used as displacement.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.White
Return: double
Modifiers: public
Summary: Value considered highest point of the displacement texture.
Accessors: get set

Property: Rhino.Geometry.MeshDisplacementInfo.WhiteMove
Return: double
Modifiers: public
Summary: The amount of displacement for the white color in the texture.
Accessors: get set

Class: Rhino.Geometry.MeshExtruder
Summary: Extrudes a mesh and provides preview

Constructor: Rhino.Geometry.MeshExtruder.MeshExtruder(Mesh inputMesh, IEnumerable<ComponentIndex> componentIndices)
Summary: Construct object to extrude given mesh faces, edges and ngons.

Property: Rhino.Geometry.MeshExtruder.EdgeBasedUVN
Return: bool
Modifiers: public
Summary: Edge based UVN defines UVN directions according to boundary edge directions
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.FaceDirectionMode
Return: MeshExtruderFaceDirectionMode
Modifiers: public
Summary: Face direction mode determines how faces are oriented
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.KeepOriginalFaces
Return: bool
Modifiers: public
Summary: Whether or not to keep original faces.
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.PreviewLines
Return: Line[]
Modifiers: public
Summary: Gets Line objects to preview extruded mesh.
Accessors: get

Property: Rhino.Geometry.MeshExtruder.SurfaceParameterMode
Return: MeshExtruderParameterMode
Modifiers: public
Summary: Mode for creating surface parameters for extruded areas
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.TextureCoordinateMode
Return: MeshExtruderParameterMode
Modifiers: public
Summary: Mode for creating texture coordinates for extruded areas
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.Transform
Return: Transform
Modifiers: public
Summary: Transform of extrusion
Accessors: get set

Property: Rhino.Geometry.MeshExtruder.UVN
Return: bool
Modifiers: public
Summary: Whether or not to perform extrude in UVN basis.
Accessors: get set

Method: Rhino.Geometry.MeshExtruder.Dispose()
Return: void
Modifiers: public
Summary: Dispose of this object and any unmanaged memory associated with it.

Method: Rhino.Geometry.MeshExtruder.ExtrudedMesh(out Mesh extrudedMeshOut, out List<ComponentIndex> componentIndicesOut)
Return: bool
Modifiers: public
Summary: Creates new extruded mesh. Returns True if any edges or faces were extruded.
Parameter: extrudedMeshOut (Mesh)
Parameter Summary: Extruded mesh
Parameter: componentIndicesOut (List<ComponentIndex>)
Parameter Summary: Component indices of extruded faces and vertices

Method: Rhino.Geometry.MeshExtruder.ExtrudedMesh(out Mesh extrudedMeshOut)
Return: bool
Modifiers: public
Summary: Creates new extruded mesh. Returns True if any edges or faces were extruded.
Parameter: extrudedMeshOut (Mesh)
Parameter Summary: Extruded mesh

Method: Rhino.Geometry.MeshExtruder.GetWallFaces()
Return: List<int>
Modifiers: public
Summary: Return list of faces that were added to connect transformed edges/faces to non-transformed edges/faces.

Class: Rhino.Geometry.MeshingParameters
Summary: Represents settings used for creating a mesh representation of a brep or surface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters()
Summary: Initializes a new instance with default values.
Initial values are same as .

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(double density, double minimumEdgeLength)
Summary: Initializes a new instance with simple values, similar to that of Rhino's meshing slider interface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(double density)
Summary: Initializes a new instance with simple values, similar to that of Rhino's meshing slider interface.

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(MeshingParameters source)
Summary: Initializes a new instance copying values from source.
Initial values are same as .

Constructor: Rhino.Geometry.MeshingParameters.MeshingParameters(SerializationInfo info, StreamingContext context)
Summary: Called by BinaryFormatter.Deserialize to create a new MeshParamaters object.

Property: Rhino.Geometry.MeshingParameters.Coarse
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters for coarse meshing.
This corresponds with the "Jagged and Faster" default in Rhino. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.MeshingParameters.Default
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the default render mesh. Only use this if you plan on specifying your own custom meshing parameters.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.DefaultAnalysisMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the default analysis mesh.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.FastRenderMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the a render mesh when meshing speed is preferred over mesh quality.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.Minimal
Return: MeshingParameters
Modifiers: public, static
Summary: Gets minimal meshing parameters.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.QualityRenderMesh
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters to create the a render mesh when mesh quality is preferred over meshing speed.
Accessors: get

Property: Rhino.Geometry.MeshingParameters.Smooth
Return: MeshingParameters
Modifiers: public, static
Summary: Gets mesh creation parameters for smooth meshing.
This corresponds with the "Smooth and Slower" default in Rhino. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.MeshingParameters.ClosedObjectPostProcess
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not to post process non-closed meshes that should be closed. If the Brep being meshed is closed, JaggedSeams = false, and ClosedObjectPostProcess = true, and the resulting mesh is not closed, then a post meshing process is applied to find and close gaps in the mesh. Typically the resulting mesh is not closed because the input Brep has a geometric flaw, like loops in trimming curve.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.ComputeCurvature
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not surface curvature data will be embedded in the mesh.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.DoublePrecision
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the mesh should have double precision vertices in addition to the floats.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAmplification
Return: double
Modifiers: public
Summary: Gets or sets the grid amplification factor. Values lower than 1.0 will decrease the number of initial quads, values higher than 1.0 will increase the number of initial quads.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAngle
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed angle difference (in radians) for a single sampling quad. The angle pertains to the surface normals.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridAspectRatio
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed aspect ratio of sampling quads.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridMaxCount
Return: int
Modifiers: public
Summary: Gets or sets the maximum number of grid quads in the initial sampling grid.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.GridMinCount
Return: int
Modifiers: public
Summary: Gets or sets the minimum number of grid quads in the initial sampling grid.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.JaggedSeams
Return: bool
Modifiers: public
Summary: Gets or sets whether or not the mesh is allowed to have jagged seams. When this flag is set to true, meshes on either side of a Brep Edge will not match up.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MaximumEdgeLength
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed mesh edge length.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MinimumEdgeLength
Return: double
Modifiers: public
Summary: Gets or sets the minimum allowed mesh edge length.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.MinimumTolerance
Return: double
Modifiers: public
Summary: Gets or sets the minimum tolerance.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineAngle
Return: double
Modifiers: public
Summary: Gets or sets the mesh parameter refine angle in radians.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineAngleInDegrees
Return: double
Modifiers: public
Summary: Gets or sets the mesh parameter refine angle in degrees.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RefineGrid
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not the sampling grid can be refined when certain tolerances are not met.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.RelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the relative tolerance.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.SimplePlanes
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether or not planar areas are allowed to be meshed in a simplified manner.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.TextureRange
Return: MeshingParameterTextureRange
Modifiers: public
Summary: Gets or sets how and if textures will be packed.
Accessors: get set

Property: Rhino.Geometry.MeshingParameters.Tolerance
Return: double
Modifiers: public
Summary: Gets or sets the maximum allowed edge deviation. This tolerance is measured between the center of the mesh edge and the surface.
Accessors: get set

Method: Rhino.Geometry.MeshingParameters.DocumentCurrentSetting(RhinoDoc doc)
Return: MeshingParameters
Modifiers: public, static
Summary: Gets the MeshingParameters that are currently set for a document. These are the same settings that are shown in the DocumentProperties "mesh settings" user interface.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document to query.

Method: Rhino.Geometry.MeshingParameters.FromEncodedString(string value)
Return: MeshingParameters
Modifiers: public, static
Summary: Converts encoded serialized string into a MeshingParameters
Parameter: value (string)
Parameter Summary: Encoded string returned by MeshingParameters.ToString()

Method: Rhino.Geometry.MeshingParameters.CopyFrom(MeshingParameters source)
Return: void
Modifiers: public
Summary: Call this method to copy MeshingParameters from another instance.

Method: Rhino.Geometry.MeshingParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.MeshingParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.MeshingParameters.Equals(MeshingParameters other)
Return: bool
Modifiers: public
Summary: Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
Parameter: other (MeshingParameters)
Parameter Summary: The specified MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Determines whether the specified MeshingParameters has the same values as the present MeshingParameters.
Parameter: obj (object)
Parameter Summary: The specified MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.GetHashCode()
Return: int
Modifiers: public, override
Summary: Computes a hash number that represents the current MeshingParameters.

Method: Rhino.Geometry.MeshingParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public

Method: Rhino.Geometry.MeshingParameters.SetSubDDisplayParameters(SubDDisplayParameters subDDisplayParameters)
Return: void
Modifiers: public
Summary: Sets the SubD display parameters.
Parameter: subDDisplayParameters (SubDDisplayParameters)
Parameter Summary: The SubD display parameters.

Method: Rhino.Geometry.MeshingParameters.SubDDisplayParameters()
Return: SubDDisplayParameters
Modifiers: public
Summary: Gets the SubD display parameters.

Method: Rhino.Geometry.MeshingParameters.ToEncodedString()
Return: string
Modifiers: public
Summary: Returns a encoded string that represents the MeshingParameters.

Class: Rhino.Geometry.MeshNgon
Summary: Represents a mesh ngon.
When retrieved from the Ngon property of a mesh,   this contains faces that have edge valence strictly higher than 4.
When retrieving Ngons from ,   this might contain also triangles and quads.

Property: Rhino.Geometry.MeshNgon.Empty
Return: MeshNgon
Modifiers: public, static
Summary: Gets an empty MeshNgon.
Accessors: get

Property: Rhino.Geometry.MeshNgon.BoundaryVertexCount
Return: int
Modifiers: public
Summary: Get the number of vertices in this ngon.  <b>MeshNgon</b> about length information.
Accessors: get

Property: Rhino.Geometry.MeshNgon.FaceCount
Return: int
Modifiers: public
Summary: Get the number of faces in this ngon.
Accessors: get

Property: Rhino.Geometry.MeshNgon.this[int index]
Return: int
Modifiers: public
Summary: Get a mesh vertex index from the ngon's vertex index list.

Method: Rhino.Geometry.MeshNgon.Create(IList<int> meshVertexIndexList, IList<int> meshFaceIndexList)
Return: MeshNgon
Modifiers: public, static
Summary: Constructs an ngon from lists of mesh vertex and face indexes.
Parameter: meshVertexIndexList (IList<int>)
Parameter Summary: A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
Parameter: meshFaceIndexList (IList<int>)
Parameter Summary: A list of mesh face indexes that define the interior of the ngon. The mesh face indexes may be in any order.

Method: Rhino.Geometry.MeshNgon.BoundaryVertexIndexList()
Return: uint
Modifiers: public
Summary: Get the outer boundary mesh vertex list of the ngon.
Vertices are sorted counterclockwise with respect to the direction of the face,     although the degree by which vertex normals will respect this might vary. | Since: 6.0

Method: Rhino.Geometry.MeshNgon.CompareTo(MeshNgon otherNgon)
Return: int
Modifiers: public
Summary: Compares this <b>MeshNgon</b> with otherNgon and returns a value of 1, 0, or -1.
Priority is for vertex count, then face count,     then vertex index list values, then face index list values. | Since: 6.0 | Parameter: otherNgon (MeshNgon) | Parameter Summary: The other <b>MeshNgon</b> to use in comparison.

Method: Rhino.Geometry.MeshNgon.Equals(MeshNgon otherNgon)
Return: bool
Modifiers: public
Summary: Determines if this ngon and otherNgon are identical.
Parameter: otherNgon (MeshNgon)
Parameter Summary: The other ngon for comparison.

Method: Rhino.Geometry.MeshNgon.Equals(object otherObj)
Return: bool
Modifiers: public, override
Summary: Determines if otherObj is a MeshNgon and is identical to this ngon.
Parameter: otherObj (object)
Parameter Summary: Any object the represents the other mesh face for comparison.

Method: Rhino.Geometry.MeshNgon.FaceIndexList()
Return: uint
Modifiers: public
Summary: Get the ngon's mesh face index list.

Method: Rhino.Geometry.MeshNgon.GetHashCode()
Return: int
Modifiers: public, override
Summary: Returns a runtime-stable hash code for the current mesh ngon. You are not allowed to rely on persistence of this hash code in serialization, but for each instance of the application, this hash code will be the same for ngons with identical vertex and face lists.

Method: Rhino.Geometry.MeshNgon.Set(IList<int> meshVertexIndexList, IList<int> meshFaceIndexList)
Return: void
Modifiers: public
Summary: Set the ngon vertex and face index lists.
Parameter: meshVertexIndexList (IList<int>)
Parameter Summary: A list of mesh vertex indexes that define the outer boundary of the ngon. The mesh vertex indexes must be in the correct order.
Parameter: meshFaceIndexList (IList<int>)
Parameter Summary: A list of mesh face indexes that define the interior of the ngon. The mesh face indexes may be in any order.

Method: Rhino.Geometry.MeshNgon.ToString()
Return: string
Modifiers: public, override
Summary: Returns a string representation for this <b>MeshNgon</b> . This is to provide a meaningful visualization of this structure and is subject to change in newer releases.

Class: Rhino.Geometry.MeshPart
Summary: Represents a portion of a mesh for partitioning

Property: Rhino.Geometry.MeshPart.EndFaceIndex
Return: int
Modifiers: public
Summary: End of subinterval of parent mesh face array
Accessors: get

Property: Rhino.Geometry.MeshPart.EndVertexIndex
Return: int
Modifiers: public
Summary: End of subinterval of parent mesh vertex array
Accessors: get

Property: Rhino.Geometry.MeshPart.StartFaceIndex
Return: int
Modifiers: public
Summary: Start of subinterval of parent mesh face array
Accessors: get

Property: Rhino.Geometry.MeshPart.StartVertexIndex
Return: int
Modifiers: public
Summary: Start of subinterval of parent mesh vertex array
Accessors: get

Property: Rhino.Geometry.MeshPart.TriangleCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Geometry.MeshPart.VertexCount
Return: int
Modifiers: public
Summary: EndVertexIndex - StartVertexIndex
Accessors: get

Class: Rhino.Geometry.MeshPoint
Summary: Represents a point that is found on a mesh.

Property: Rhino.Geometry.MeshPoint.ComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of the intersecting element in the mesh.
Accessors: get

Property: Rhino.Geometry.MeshPoint.EdgeIndex
Return: int
Modifiers: public
Summary: When set, EdgeIndex is an index of an edge in the mesh's edge list.
Accessors: get

Property: Rhino.Geometry.MeshPoint.EdgeParameter
Return: double
Modifiers: public
Summary: Edge parameter when found.
Accessors: get

Property: Rhino.Geometry.MeshPoint.FaceIndex
Return: int
Modifiers: public
Summary: FaceIndex is an index of a face in mesh.Faces. When ComponentIndex refers to a vertex, any face that uses the vertex may appear as FaceIndex.  When ComponenctIndex refers to an Edge or EdgeIndex is set, then any face that uses that edge may appear as FaceIndex.
Accessors: get

Property: Rhino.Geometry.MeshPoint.Mesh
Return: Mesh
Modifiers: public
Summary: The mesh that is related to this point.
Accessors: get

Property: Rhino.Geometry.MeshPoint.Point
Return: Point3d
Modifiers: public
Summary: Gets the location (position) of this point.
Accessors: get

Property: Rhino.Geometry.MeshPoint.T
Return: double[]
Modifiers: public
Summary: Barycentric quad coordinates for the point on the mesh face mesh.Faces[FaceIndex].  If the face is a triangle disregard T[3] (it should be set to 0.0). If the face is a quad and is split between vertices 0 and 2, then T[3] will be 0.0 when point is on the triangle defined by vi[0], vi[1], vi[2], and T[1] will be 0.0 when point is on the triangle defined by vi[0], vi[2], vi[3]. If the face is a quad and is split between vertices 1 and 3, then T[2] will be 0.0 when point is on the triangle defined by vi[0], vi[1], vi[3], and m_t[0] will be 0.0 when point is on the triangle defined by vi[1], vi[2], vi[3].
Accessors: get

Property: Rhino.Geometry.MeshPoint.Triangle
Return: char
Modifiers: public
Summary: Face triangle where the intersection takes place:
0 is unset
A is 0,1,2
B is 0,2,3
C is 0,1,3
D is 1,2,3 | Since: 5.0 | Accessors: get

Method: Rhino.Geometry.MeshPoint.GetTriangle(out int a, out int b, out int c)
Return: bool
Modifiers: public
Summary: Gets the mesh face indices of the triangle where the intersection is on the face takes into consideration the way the quad was split during the intersection.

Class: Rhino.Geometry.MeshUnsafeLock
Summary: Permits access to the underlying mesh raw data structures in an unsafe way.

Method: Rhino.Geometry.MeshUnsafeLock.FaceNormalsArray(out int length)
Return: Vector3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh face normals array, which uses vectors defined with single precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.FacesArray(out int length)
Return: MeshFace*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw faces array, which uses 4 integers for each face.  <b>MeshFace</b> .
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.NormalVector3fArray(out int length)
Return: Vector3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex normal array, which uses vectors defined with single precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.Release()
Return: void
Modifiers: public
Summary: Releases the lock and updates the underlying unmanaged data structures.

Method: Rhino.Geometry.MeshUnsafeLock.VertexColorsArray(out int length)
Return: int*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex colors array, which uses RGBA integers or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.VertexPoint3dArray(out int length)
Return: Point3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex array, which uses coordinates defined with double precision floating point numbers, or throws an exception if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#).

Method: Rhino.Geometry.MeshUnsafeLock.VertexPoint3fArray(out int length)
Return: Point3f*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw mesh vertex array, which uses coordinates defined with single precision floating point numbers, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Class: Rhino.Geometry.MeshUnwrapper
Summary: Unwraps meshes and stores the result in their texture coordinates

Constructor: Rhino.Geometry.MeshUnwrapper.MeshUnwrapper(IEnumerable<Mesh> meshes)
Summary: Creates a mesh unwrapper for a set of meshes

Constructor: Rhino.Geometry.MeshUnwrapper.MeshUnwrapper(Mesh mesh)
Summary: Creates a mesh unwrapper for a single mesh

Property: Rhino.Geometry.MeshUnwrapper.SymmetryPlane
Return: Plane
Modifiers: public
Summary: Symmetry plane. Unwrapper tries to keep unwrap result symmetric to this plane.
Accessors: set

Method: Rhino.Geometry.MeshUnwrapper.Dispose()
Return: void
Modifiers: public
Summary: Dispose of this object and any unmanaged memory associated with it.

Method: Rhino.Geometry.MeshUnwrapper.Unwrap(MeshUnwrapMethod method)
Return: bool
Modifiers: public
Summary: Unwraps the meshes passed in as constructor arguments and stores the results in texture coordinates.
Parameter: method (MeshUnwrapMethod)
Parameter Summary: Unwrap method to be used

Class: Rhino.Geometry.MorphControl
Summary: Represents a geometry that is able to control the morphing behavior of some other geometry.

Constructor: Rhino.Geometry.MorphControl.MorphControl(NurbsCurve originCurve, NurbsCurve targetCurve)
Summary: Constructs a MorphControl that allows for morphing between two curves.

Constructor: Rhino.Geometry.MorphControl.MorphControl(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.MorphControl.Curve
Return: NurbsCurve
Modifiers: public
Summary: Returns the morph control's curve.  While this should never be null, the calling function should check.
Accessors: get

Property: Rhino.Geometry.MorphControl.PreserveStructure
Return: bool
Modifiers: public
Summary: True if the morph should be done in a way that preserves the structure of the geometry.  In particular, for NURBS objects, True  means that only the control points are moved.  The PreserveStructure value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.MorphControl.QuickPreview
Return: bool
Modifiers: public
Summary: True if the morph should be done as quickly as possible because the result is being used for some type of dynamic preview.  If QuickPreview is true, the tolerance may be ignored. The QuickPreview value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.MorphControl.SpaceMorphTolerance
Return: double
Modifiers: public
Summary: The 3d fitting tolerance used when morphing surfaces and breps. The default is 0.0 and any value <= 0.0 is ignored by morphing functions. The value returned by Tolerance does not affect the way meshes and points are morphed.
Accessors: get set

Property: Rhino.Geometry.MorphControl.Surface
Return: NurbsSurface
Modifiers: public
Summary: Returns the morph control's surface.  While this should never be null, the calling function should check.
Accessors: get

Method: Rhino.Geometry.MorphControl.Morph(GeometryBase geometry)
Return: bool
Modifiers: public
Summary: Applies the space morph to geometry.
Parameter: geometry (GeometryBase)
Parameter Summary: The geometry to be morphed.

Class: Rhino.Geometry.NurbsCurve
Summary: Represents a Non Uniform Rational B-Splines (NURBS) curve.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(int dimension, bool rational, int order, int pointCount)
Summary: Constructs a new NURBS curve with knot and CV memory allocated.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(int degree, int pointCount)
Summary: Constructs a new NURBS curve with a specific degree and control point count.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(NurbsCurve other)
Summary: Initializes a NURBS curve by copying its values from another NURBS curve.

Constructor: Rhino.Geometry.NurbsCurve.NurbsCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.NurbsCurve.HasBezierSpans
Return: bool
Modifiers: public
Summary: Returns True if the NURBS curve has Bezier spans (all distinct knots have multiplicity = degree)
Accessors: get

Property: Rhino.Geometry.NurbsCurve.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the curve is rational. Rational curves have control-points with custom weights.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Knots
Return: NurbsCurveKnotList
Modifiers: public
Summary: Gets access to the knots (or "knot vector") of this NURBS curve.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Order
Return: int
Modifiers: public
Summary: Gets the order of the curve. Order = Degree + 1.
Accessors: get

Property: Rhino.Geometry.NurbsCurve.Points
Return: NurbsCurvePointList
Modifiers: public
Summary: Gets access to the control points of this NURBS curve.
Accessors: get

Method: Rhino.Geometry.NurbsCurve.Create(bool periodic, int degree, IEnumerable<Point3d> points)
Return: NurbsCurve
Modifiers: public, static
Summary: Constructs a 3D NURBS curve from a list of control points.
Parameter: periodic (bool)
Parameter Summary: If true, create a periodic uniform curve. If false, create a clamped uniform curve.
Parameter: degree (int)
Parameter Summary: (>=1) degree=order-1.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: control vertex locations.

Method: Rhino.Geometry.NurbsCurve.CreateFromArc(Arc arc, int degree, int cvCount)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a uniform non-rational cubic NURBS approximation of an arc.
Parameter: arc (Arc)
Parameter Summary: 
Parameter: degree (int)
Parameter Summary: >=1
Parameter: cvCount (int)
Parameter Summary: CV count >=5

Method: Rhino.Geometry.NurbsCurve.CreateFromArc(Arc arc)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the arc. Note that the parameterization of NURBS curve does not match arc's transcendental parameterization.

Method: Rhino.Geometry.NurbsCurve.CreateFromCircle(Circle circle, int degree, int cvCount)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a uniform non-rational cubic NURBS approximation of a circle.
Parameter: circle (Circle)
Parameter Summary: 
Parameter: degree (int)
Parameter Summary: >=1
Parameter: cvCount (int)
Parameter Summary: CV count >=5

Method: Rhino.Geometry.NurbsCurve.CreateFromCircle(Circle circle)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the circle. Note that the parameterization of NURBS curve does not match circle's transcendental parameterization. Use GetRadianFromNurbFormParameter() and GetParameterFromRadian() to convert between the NURBS curve parameter and the transcendental parameter.

Method: Rhino.Geometry.NurbsCurve.CreateFromEllipse(Ellipse ellipse)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a rational degree 2 NURBS curve representation of the ellipse.
Note that the parameterization of the NURBS curve does not match     with the transcendental parameterization of the ellipsis. | Since: 5.0

Method: Rhino.Geometry.NurbsCurve.CreateFromFitPoints(IEnumerable<Point3d> points, double tolerance, bool periodic)
Return: NurbsCurve
Modifiers: public, static
Summary: Fits a NURBS curve to a dense, ordered set of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of 3D points.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: periodic (bool)
Parameter Summary: Set True to create a periodic curve.

Method: Rhino.Geometry.NurbsCurve.CreateFromFitPoints(IEnumerable<Point3d> points, double tolerance, int degree, bool periodic, Vector3d startTangent, Vector3d endTangent)
Return: NurbsCurve
Modifiers: public, static
Summary: Fits a NURBS curve to a dense, ordered set of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of 3D points.
Parameter: tolerance (double)
Parameter Summary: The fitting tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: degree (int)
Parameter Summary: The desired degree of the output curve.
Parameter: periodic (bool)
Parameter Summary: Set True to create a periodic curve.
Parameter: startTangent (Vector3d)
Parameter Summary: The tangent direction at the start of the curve. If unknown, set to <b>Vector3d.Unset</b> .
Parameter: endTangent (Vector3d)
Parameter Summary: The tangent direction at the end of the curve. If unknown, set to <b>Vector3d.Unset</b> .

Method: Rhino.Geometry.NurbsCurve.CreateFromLine(Line line)
Return: NurbsCurve
Modifiers: public, static
Summary: Gets a non-rational, degree 1 NURBS curve representation of the line.

Method: Rhino.Geometry.NurbsCurve.CreateHSpline(IEnumerable<Point3d> points, Vector3d startTangent, Vector3d endTangent)
Return: NurbsCurve
Modifiers: public, static
Summary: Construct an H-spline from a sequence of interpolation points and optional start and end derivative information
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate
Parameter: startTangent (Vector3d)
Parameter Summary: Unit tangent vector or Unset
Parameter: endTangent (Vector3d)
Parameter Summary: Unit tangent vector or Unset

Method: Rhino.Geometry.NurbsCurve.CreateHSpline(IEnumerable<Point3d> points)
Return: NurbsCurve
Modifiers: public, static
Summary: Construct an H-spline from a sequence of interpolation points
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to interpolate

Method: Rhino.Geometry.NurbsCurve.CreateNonRationalArcBezier(int degree, Point3d center, Point3d start, Point3d end, double radius, double tanSlider, double midSlider)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a non-rational approximation of a rational arc as a single bezier segment
Parameter: degree (int)
Parameter Summary: The degree of the non-rational approximation, can be either 3, 4, or 5
Parameter: center (Point3d)
Parameter Summary: The arc center
Parameter: start (Point3d)
Parameter Summary: A point in the direction of the start point of the arc
Parameter: end (Point3d)
Parameter Summary: A point in the direction of the end point of the arc
Parameter: radius (double)
Parameter Summary: The radius of the arc
Parameter: tanSlider (double)
Parameter Summary: a number between zero and one which moves the tangent control point toward the mid control point of an equivalent quadratic rational arc
Parameter: midSlider (double)
Parameter Summary: a number between zero and one which moves the mid control points toward the mid control point of an equivalent quadratic rational arc

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromFocus(Point3d focus, Point3d startPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from focus and end points.
Parameter: focus (Point3d)
Parameter Summary: The focal point.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromPoints(Point3d startPoint, Point3d innerPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from three points.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: innerPoint (Point3d)
Parameter Summary: A point on the curve.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateParabolaFromVertex(Point3d vertex, Point3d startPoint, Point3d endPoint)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a parabola from vertex and end points.
Parameter: vertex (Point3d)
Parameter Summary: The vertex point.
Parameter: startPoint (Point3d)
Parameter Summary: The start point.
Parameter: endPoint (Point3d)
Parameter Summary: The end point

Method: Rhino.Geometry.NurbsCurve.CreateSpiral(Curve railCurve, double t0, double t1, Point3d radiusPoint, double pitch, double turnCount, double radius0, double radius1, int pointsPerTurn)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a C2 non-rational uniform cubic NURBS approximation of a swept helix or spiral.
Parameter: railCurve (Curve)
Parameter Summary: The rail curve.
Parameter: t0 (double)
Parameter Summary: Starting portion of rail curve's domain to sweep along.
Parameter: t1 (double)
Parameter Summary: Ending portion of rail curve's domain to sweep along.
Parameter: radiusPoint (Point3d)
Parameter Summary: Point used only to get a vector that is perpendicular to the axis. In particular, this vector must not be (anti)parallel to the axis vector.
Parameter: pitch (double)
Parameter Summary: The pitch. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation.
Parameter: turnCount (double)
Parameter Summary: The turn count. If != 0, then the resulting helix will have this many turns. If = 0, then pitch must be != 0 and the approximate distance between turns will be set to pitch. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation.
Parameter: radius0 (double)
Parameter Summary: The starting radius. At least one radii must be nonzero. Negative values are allowed.
Parameter: radius1 (double)
Parameter Summary: The ending radius. At least one radii must be nonzero. Negative values are allowed.
Parameter: pointsPerTurn (int)
Parameter Summary: Number of points to interpolate per turn. Must be greater than 4. When in doubt, use 12.

Method: Rhino.Geometry.NurbsCurve.CreateSpiral(Point3d axisStart, Vector3d axisDir, Point3d radiusPoint, double pitch, double turnCount, double radius0, double radius1)
Return: NurbsCurve
Modifiers: public, static
Summary: Creates a C1 cubic NURBS approximation of a helix or spiral. For a helix, you may have radius0 == radius1. For a spiral radius0 == radius1 produces a circle. Zero and negative radii are permissible.
Parameter: axisStart (Point3d)
Parameter Summary: Helix's axis starting point or center of spiral.
Parameter: axisDir (Vector3d)
Parameter Summary: Helix's axis vector or normal to spiral's plane.
Parameter: radiusPoint (Point3d)
Parameter Summary: Point used only to get a vector that is perpendicular to the axis. In particular, this vector must not be (anti)parallel to the axis vector.
Parameter: pitch (double)
Parameter Summary: The pitch, where a spiral has a pitch = 0, and pitch > 0 is the distance between the helix's "threads".
Parameter: turnCount (double)
Parameter Summary: The number of turns in spiral or helix. Positive values produce counter-clockwise orientation, negative values produce clockwise orientation. Note, for a helix, turnCount * pitch = length of the helix's axis.
Parameter: radius0 (double)
Parameter Summary: The starting radius.
Parameter: radius1 (double)
Parameter Summary: The ending radius.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(Curve curve, int pointCount, bool periodicClosedCurve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, from an existing curve.
Parameter: curve (Curve)
Parameter Summary: Curve to rebuild as a SubD friendly curve.
Parameter: pointCount (int)
Parameter Summary: Desired number of control points. If periodicClosedCurve is true, the number must be >= 6, otherwise the number must be >= 4.
Parameter: periodicClosedCurve (bool)
Parameter Summary: True if the SubD friendly curve should be closed and periodic. False in all other cases.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(Curve curve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, from an existing curve.
Parameter: curve (Curve)
Parameter Summary: Curve to rebuild as a SubD friendly curve.

Method: Rhino.Geometry.NurbsCurve.CreateSubDFriendly(IEnumerable<Point3d> points, bool interpolatePoints, bool periodicClosedCurve)
Return: NurbsCurve
Modifiers: public, static
Summary: Create a NURBS curve, that is suitable for calculations like lofting SubD objects, through a sequence of curves.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An enumeration of points. Adjacent points must not be equal. If periodicClosedCurve is false, there must be at least two points. If periodicClosedCurve is true, there must be at least three points and it is not necessary to duplicate the first and last points. When periodicClosedCurve is True and the first and last points are equal, the duplicate last point is automatically ignored.
Parameter: interpolatePoints (bool)
Parameter Summary: True if the curve should interpolate the points. False if points specify control point locations. In either case, the curve will begin at the first point and end at the last point.
Parameter: periodicClosedCurve (bool)
Parameter Summary: True to create a periodic closed curve. Do not duplicate the start/end point in the point input.

Method: Rhino.Geometry.NurbsCurve.IsDuplicate(NurbsCurve curveA, NurbsCurve curveB, bool ignoreParameterization, double tolerance)
Return: bool
Modifiers: public, static
Summary: Determines if two curves are similar.
Parameter: curveA (NurbsCurve)
Parameter Summary: First curve used in comparison.
Parameter: curveB (NurbsCurve)
Parameter Summary: Second curve used in comparison.
Parameter: ignoreParameterization (bool)
Parameter Summary: if true, parameterization and orientation are ignored.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when comparing control points.

Method: Rhino.Geometry.NurbsCurve.MakeCompatible(IEnumerable<Curve> curves, Point3d startPt, Point3d endPt, int simplifyMethod, int numPoints, double refitTolerance, double angleTolerance)
Return: NurbsCurve[]
Modifiers: public, static
Summary: For expert use only. From the input curves, make an array of compatible NURBS curves.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: The input curves.
Parameter: startPt (Point3d)
Parameter Summary: The start point. To omit, specify Point3d.Unset.
Parameter: endPt (Point3d)
Parameter Summary: The end point. To omit, specify Point3d.Unset.
Parameter: simplifyMethod (int)
Parameter Summary: The simplify method.
Parameter: numPoints (int)
Parameter Summary: The number of rebuild points.
Parameter: refitTolerance (double)
Parameter Summary: The refit tolerance.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance in radians.

Method: Rhino.Geometry.NurbsCurve.Append(NurbsCurve nurbsCurve)
Return: bool
Modifiers: public
Summary: Appends a NURBS curve to this curve.
Parameter: nurbsCurve (NurbsCurve)
Parameter Summary: The NURBS curve to append.

Method: Rhino.Geometry.NurbsCurve.ConvertSpanToBezier(int spanIndex)
Return: BezierCurve
Modifiers: public
Summary: Converts a span of the NURBS curve into a Bezier.
Parameter: spanIndex (int)
Parameter Summary: The span index, where (0 <= spanIndex <= Points.Count - Order).

Method: Rhino.Geometry.NurbsCurve.CreatePlanarRailFrames(IEnumerable<double> parameters, Vector3d normal)
Return: Plane[]
Modifiers: public
Summary: Computes planar rail sweep frames at specified parameters.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection of curve parameters.
Parameter: normal (Vector3d)
Parameter Summary: Unit normal to the plane.

Method: Rhino.Geometry.NurbsCurve.CreateRailFrames(IEnumerable<double> parameters)
Return: Plane[]
Modifiers: public
Summary: Computes relatively parallel rail sweep frames at specified parameters.
Parameter: parameters (IEnumerable<double>)
Parameter Summary: A collection of curve parameters.

Method: Rhino.Geometry.NurbsCurve.EpsilonEquals(NurbsCurve other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.NurbsCurve.GrevilleParameter(int index)
Return: double
Modifiers: public
Summary: Gets the greville (edit point) parameter that belongs to the control point at the specified index.
Parameter: index (int)
Parameter Summary: Index of Greville (Edit) point.

Method: Rhino.Geometry.NurbsCurve.GrevilleParameters()
Return: double
Modifiers: public
Summary: Gets all Greville parameters for this curve.

Method: Rhino.Geometry.NurbsCurve.GrevillePoint(int index)
Return: Point3d
Modifiers: public
Summary: Gets the Greville parameter that belongs to the control point at the specified index.
Parameter: index (int)
Parameter Summary: Index of Greville point.

Method: Rhino.Geometry.NurbsCurve.GrevillePoints()
Return: Point3dList
Modifiers: public
Summary: Gets all Greville points for this curve.

Method: Rhino.Geometry.NurbsCurve.GrevillePoints(bool all)
Return: Point3dList
Modifiers: public
Summary: Gets Greville points for this curve.
Parameter: all (bool)
Parameter Summary: If true, then all Greville points are returns. If false, only edit points are returned.

Method: Rhino.Geometry.NurbsCurve.IncreaseDegree(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this curve.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(bool setEndWeightsToOne)
Return: bool
Modifiers: public
Summary: Clamps ends and adds knots so the NURBS curve has Bezier spans (all distinct knots have multiplicity = degree).
Parameter: setEndWeightsToOne (bool)
Parameter Summary: If True and the first or last weight is not one, then the first and last spans are re-parameterized so that the end weights are one.

Method: Rhino.Geometry.NurbsCurve.MatchToCurve(Curve targetCurve, double maxEndDistance, double maxInteriorDistance, double matchTolerance, int maxLevel)
Return: NurbsCurve
Modifiers: public
Summary: Constructs a NURBS curve with the start and end matching the start and end of targetCurve, and Greville points on targetCurve.
Parameter: targetCurve (Curve)
Parameter Summary: The target curve.
Parameter: maxEndDistance (double)
Parameter Summary: If maxEndDistance dist > 0, the curve's start must be within maxEndDistance of targetCurve start. If maxEndDistance dist > 0, the curve's end must be within maxEndDistance of targetCurve end.
Parameter: maxInteriorDistance (double)
Parameter Summary: If maxInteriorDistance > 0, all interior Greville points of the curve must be within maxInteriorDistance of targetCurve.
Parameter: matchTolerance (double)
Parameter Summary: The matching tolerance.
Parameter: maxLevel (int)
Parameter Summary: If maxLevel > 0, the result will be refined up to that many times, attempting to get the result within matchTolerance. If matchTolerance <= 0, no refinement will be done. In any case, the parameters closest points on targetCurve of the Greville points of the curve must be monotonic increasing.

Method: Rhino.Geometry.NurbsCurve.Reparameterize(double c)
Return: bool
Modifiers: public
Summary: Use a linear fractional transformation to re-parameterize the NURBS curve. This does not change the curve's domain.
Parameter: c (double)
Parameter Summary: re-parameterization constant (generally speaking, c should be > 0). The control points and knots are adjusted so that output_nurbs(t) = input_nurbs(lambda(t)), where lambda(t) = c*t/( (c-1)*t + 1 ). Note that lambda(0) = 0, lambda(1) = 1, lambda'(t) > 0, lambda'(0) = c and lambda'(1) = 1/c.

Method: Rhino.Geometry.NurbsCurve.SetEndCondition(bool bSetEnd, NurbsCurveEndConditionType continuity, Point3d point, Vector3d tangent, Vector3d curvature)
Return: bool
Modifiers: public
Summary: Set end condition of a NURBS curve to point, tangent and curvature.
Parameter: bSetEnd (bool)
Parameter Summary: true: set end of curve, false: set start of curve
Parameter: continuity (NurbsCurveEndConditionType)
Parameter Summary: Position: set start or end point, Tangency: set point and tangent, Curvature: set point, tangent and curvature
Parameter: point (Point3d)
Parameter Summary: point to set
Parameter: tangent (Vector3d)
Parameter Summary: tangent to set
Parameter: curvature (Vector3d)
Parameter Summary: curvature to set

Method: Rhino.Geometry.NurbsCurve.SetEndCondition(bool bSetEnd, NurbsCurveEndConditionType continuity, Point3d point, Vector3d tangent)
Return: bool
Modifiers: public
Summary: Set end condition of a NURBS curve to point, tangent and curvature.
Parameter: bSetEnd (bool)
Parameter Summary: true: set end of curve, false: set start of curve
Parameter: continuity (NurbsCurveEndConditionType)
Parameter Summary: Position: set start or end point, Tangency: set point and tangent, Curvature: set point, tangent and curvature
Parameter: point (Point3d)
Parameter Summary: point to set
Parameter: tangent (Vector3d)
Parameter Summary: tangent to set

Method: Rhino.Geometry.NurbsCurve.SetGrevillePoints(IEnumerable<Point3d> points)
Return: bool
Modifiers: public
Summary: Sets all Greville edit points for this curve.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The new point locations. The number of points should match the number of point returned by NurbsCurve.GrevillePoints(false).

Method: Rhino.Geometry.NurbsCurve.UVNDirectionsAt(double t, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the u, V, and N directions of a NURBS curve at a parameter similar to the method used by Rhino's MoveUVN command.
Parameter: t (double)
Parameter Summary: The evaluation parameter.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Class: Rhino.Geometry.NurbsSurface
Summary: Represents a Non Uniform Rational B-Splines (NURBS) surface.

Constructor: Rhino.Geometry.NurbsSurface.NurbsSurface(NurbsSurface other)
Summary: Initializes a new NURBS surface by copying the values from another surface.

Constructor: Rhino.Geometry.NurbsSurface.NurbsSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.NurbsSurface.IsRational
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the NURBS surface is rational.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.KnotsU
Return: NurbsSurfaceKnotList
Modifiers: public
Summary: The U direction knot vector.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.KnotsV
Return: NurbsSurfaceKnotList
Modifiers: public
Summary: The V direction knot vector.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.OrderU
Return: int
Modifiers: public
Summary: Gets the order in the U direction.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.OrderV
Return: int
Modifiers: public
Summary: Gets the order in the V direction.
Accessors: get

Property: Rhino.Geometry.NurbsSurface.Points
Return: NurbsSurfacePointList
Modifiers: public
Summary: Gets a collection of surface control points that form this surface.
Accessors: get

Method: Rhino.Geometry.NurbsSurface.Create(int dimension, bool isRational, int order0, int order1, int controlPointCount0, int controlPointCount1)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surface with internal uninitialized arrays.
Parameter: dimension (int)
Parameter Summary: The number of dimensions.
>= 1. This value is usually 3. | Parameter: isRational (bool) | Parameter Summary: True to make a rational NURBS. | Parameter: order0 (int) | Parameter Summary: The order in U direction.
>= 2. | Parameter: order1 (int) | Parameter Summary: The order in V direction.
>= 2. | Parameter: controlPointCount0 (int) | Parameter Summary: Control point count in U direction.
>= order0. | Parameter: controlPointCount1 (int) | Parameter Summary: Control point count in V direction.
>= order1.

Method: Rhino.Geometry.NurbsSurface.CreateCurveOnSurface(Surface surface, IEnumerable<Point2d> points, double tolerance, bool periodic)
Return: NurbsCurve
Modifiers: public, static
Summary: Fit a sequence of 2d points on a surface to make a curve on the surface.
Parameter: surface (Surface)
Parameter Summary: Surface on which to construct curve.
Parameter: points (IEnumerable<Point2d>)
Parameter Summary: Parameter space coordinates of the points to interpolate.
Parameter: tolerance (double)
Parameter Summary: Curve should be within tolerance of surface and points.
Parameter: periodic (bool)
Parameter Summary: When True make a periodic curve.

Method: Rhino.Geometry.NurbsSurface.CreateCurveOnSurfacePoints(Surface surface, IEnumerable<Point2d> fixedPoints, double tolerance, bool periodic, int initCount, int levels)
Return: Point2d[]
Modifiers: public, static
Summary: Computes a discrete spline curve on the surface. In other words, computes a sequence of points on the surface, each with a corresponding parameter value.
Parameter: surface (Surface)
Parameter Summary: The surface on which the curve is constructed. The surface should be G1 continuous. If the surface is closed in the u or v direction and is G1 at the seam, the function will construct point sequences that cross over the seam.
Parameter: fixedPoints (IEnumerable<Point2d>)
Parameter Summary: Surface points to interpolate given by parameters. These must be distinct.
Parameter: tolerance (double)
Parameter Summary: Relative tolerance used by the solver. When in doubt, use a tolerance of 0.0.
Parameter: periodic (bool)
Parameter Summary: When True constructs a smoothly closed curve.
Parameter: initCount (int)
Parameter Summary: Maximum number of points to insert between fixed points on the first level.
Parameter: levels (int)
Parameter Summary: The number of levels (between 1 and 3) to be used in multi-level solver. Use 1 for single level solve.

Method: Rhino.Geometry.NurbsSurface.CreateFromCone(Cone cone)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from cone data.
Parameter: cone (Cone)
Parameter Summary: A cone value.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4, double tolerance)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 4 corner points.
Parameter: corner1 (Point3d)
Parameter Summary: The first corner.
Parameter: corner2 (Point3d)
Parameter Summary: The second corner.
Parameter: corner3 (Point3d)
Parameter Summary: The third corner.
Parameter: corner4 (Point3d)
Parameter Summary: The fourth corner.
Parameter: tolerance (double)
Parameter Summary: Minimum edge length without collapsing to a singularity.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3, Point3d corner4)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 4 corner points.
This is the same as calling  with tolerance 0. | Since: 5.0 | Parameter: corner1 (Point3d) | Parameter Summary: The first corner. | Parameter: corner2 (Point3d) | Parameter Summary: The second corner. | Parameter: corner3 (Point3d) | Parameter Summary: The third corner. | Parameter: corner4 (Point3d) | Parameter Summary: The fourth corner.

Method: Rhino.Geometry.NurbsSurface.CreateFromCorners(Point3d corner1, Point3d corner2, Point3d corner3)
Return: NurbsSurface
Modifiers: public, static
Summary: Makes a surface from 3 corner points.
Parameter: corner1 (Point3d)
Parameter Summary: The first corner.
Parameter: corner2 (Point3d)
Parameter Summary: The second corner.
Parameter: corner3 (Point3d)
Parameter Summary: The third corner.

Method: Rhino.Geometry.NurbsSurface.CreateFromCylinder(Cylinder cylinder)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from cylinder data.
Parameter: cylinder (Cylinder)
Parameter Summary: A cylinder value.

Method: Rhino.Geometry.NurbsSurface.CreateFromPlane(Plane plane, Interval uInterval, Interval vInterval, int uDegree, int vDegree, int uPointCount, int vPointCount)
Return: NurbsSurface
Modifiers: public, static
Summary: Creates a NURBS surface from a plane and additional parameters.
Parameter: plane (Plane)
Parameter Summary: The plane.
Parameter: uInterval (Interval)
Parameter Summary: The interval describing the extends of the output surface in the U direction.
Parameter: vInterval (Interval)
Parameter Summary: The interval describing the extends of the output surface in the V direction.
Parameter: uDegree (int)
Parameter Summary: The degree of the output surface in the U direction.
Parameter: vDegree (int)
Parameter Summary: The degree of the output surface in the V direction.
Parameter: uPointCount (int)
Parameter Summary: The number of control points of the output surface in the U direction.
Parameter: vPointCount (int)
Parameter Summary: The number of control points of the output surface in the V direction.

Method: Rhino.Geometry.NurbsSurface.CreateFromPoints(IEnumerable<Point3d> points, int uCount, int vCount, int uDegree, int vDegree)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a NURBS surface from a 2D grid of control points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control point locations.
Parameter: uCount (int)
Parameter Summary: Number of points in U direction.
Parameter: vCount (int)
Parameter Summary: Number of points in V direction.
Parameter: uDegree (int)
Parameter Summary: Degree of surface in U direction.
Parameter: vDegree (int)
Parameter Summary: Degree of surface in V direction.

Method: Rhino.Geometry.NurbsSurface.CreateFromSphere(Sphere sphere)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from sphere data.
Parameter: sphere (Sphere)
Parameter Summary: A sphere value.

Method: Rhino.Geometry.NurbsSurface.CreateFromTorus(Torus torus)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a new NURBS surfaces from torus data.
Parameter: torus (Torus)
Parameter Summary: A torus value.

Method: Rhino.Geometry.NurbsSurface.CreateNetworkSurface(IEnumerable<Curve> curves, int continuity, double edgeTolerance, double interiorTolerance, double angleTolerance, out int error)
Return: NurbsSurface
Modifiers: public, static
Summary: Builds a surface from an auto-sorted network of curves/edges.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curves/edges, sorted automatically into U and V curves.
Parameter: continuity (int)
Parameter Summary: continuity along edges, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: edgeTolerance (double)
Parameter Summary: tolerance to use along network surface edge.
Parameter: interiorTolerance (double)
Parameter Summary: tolerance to use for the interior curves.
Parameter: angleTolerance (double)
Parameter Summary: angle tolerance to use.
Parameter: error (int)
Parameter Summary: If the NurbsSurface could not be created, the error value describes where the failure occurred.  0 = success,  1 = curve sorter failed, 2 = network initializing failed, 3 = failed to build surface, 4 = network surface is not valid.

Method: Rhino.Geometry.NurbsSurface.CreateNetworkSurface(IEnumerable<Curve> uCurves, int uContinuityStart, int uContinuityEnd, IEnumerable<Curve> vCurves, int vContinuityStart, int vContinuityEnd, double edgeTolerance, double interiorTolerance, double angleTolerance, out int error)
Return: NurbsSurface
Modifiers: public, static
Summary: Builds a surface from an ordered network of curves/edges.
Parameter: uCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of U curves.
Parameter: uContinuityStart (int)
Parameter Summary: continuity at first U segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: uContinuityEnd (int)
Parameter Summary: continuity at last U segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: vCurves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of V curves.
Parameter: vContinuityStart (int)
Parameter Summary: continuity at first V segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: vContinuityEnd (int)
Parameter Summary: continuity at last V segment, 0 = loose, 1 = position, 2 = tan, 3 = curvature.
Parameter: edgeTolerance (double)
Parameter Summary: tolerance to use along network surface edge.
Parameter: interiorTolerance (double)
Parameter Summary: tolerance to use for the interior curves.
Parameter: angleTolerance (double)
Parameter Summary: angle tolerance to use.
Parameter: error (int)
Parameter Summary: If the NurbsSurface could not be created, the error value describes where the failure occurred.  0 = success,  1 = curve sorter failed, 2 = network initializing failed, 3 = failed to build surface, 4 = network surface is not valid.

Method: Rhino.Geometry.NurbsSurface.CreateRailRevolvedSurface(Curve profile, Curve rail, Line axis, bool scaleHeight)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a railed Surface-of-Revolution.
Parameter: profile (Curve)
Parameter Summary: Profile curve for revolution.
Parameter: rail (Curve)
Parameter Summary: Rail curve for revolution.
Parameter: axis (Line)
Parameter Summary: Axis of revolution.
Parameter: scaleHeight (bool)
Parameter Summary: If true, surface will be locally scaled.

Method: Rhino.Geometry.NurbsSurface.CreateRuledSurface(Curve curveA, Curve curveB)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a ruled surface between two curves. Curves must share the same knot-vector.
Parameter: curveA (Curve)
Parameter Summary: First curve.
Parameter: curveB (Curve)
Parameter Summary: Second curve.

Method: Rhino.Geometry.NurbsSurface.CreateSubDFriendly(Surface surface)
Return: NurbsSurface
Modifiers: public, static
Summary: Create a bi-cubic SubD friendly surface from a surface.
Parameter: surface (Surface)
Parameter Summary: >Surface to rebuild as a SubD friendly surface.

Method: Rhino.Geometry.NurbsSurface.CreateThroughPoints(IEnumerable<Point3d> points, int uCount, int vCount, int uDegree, int vDegree, bool uClosed, bool vClosed)
Return: NurbsSurface
Modifiers: public, static
Summary: Constructs a NURBS surface from a 2D grid of points.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Control point locations.
Parameter: uCount (int)
Parameter Summary: Number of points in U direction.
Parameter: vCount (int)
Parameter Summary: Number of points in V direction.
Parameter: uDegree (int)
Parameter Summary: Degree of surface in U direction.
Parameter: vDegree (int)
Parameter Summary: Degree of surface in V direction.
Parameter: uClosed (bool)
Parameter Summary: True if the surface should be closed in the U direction.
Parameter: vClosed (bool)
Parameter Summary: True if the surface should be closed in the V direction.

Method: Rhino.Geometry.NurbsSurface.MakeCompatible(Surface surface0, Surface surface1, out NurbsSurface nurb0, out NurbsSurface nurb1)
Return: bool
Modifiers: public, static
Summary: For expert use only. Makes a pair of compatible NURBS surfaces based on two input surfaces.
Parameter: surface0 (Surface)
Parameter Summary: The first surface.
Parameter: surface1 (Surface)
Parameter Summary: The second surface.
Parameter: nurb0 (NurbsSurface)
Parameter Summary: The first output NURBS surface.
Parameter: nurb1 (NurbsSurface)
Parameter Summary: The second output NURBS surface.

Method: Rhino.Geometry.NurbsSurface.ConvertSpanToBezier(int spanIndex0, int spanIndex1)
Return: BezierSurface
Modifiers: public
Summary: Convert a NURBS surface bispan into a Bezier surface.
Parameter: spanIndex0 (int)
Parameter Summary: Specifies the "u" span
Parameter: spanIndex1 (int)
Parameter Summary: Specifies the "v" span

Method: Rhino.Geometry.NurbsSurface.CopyFrom(NurbsSurface other)
Return: void
Modifiers: public
Summary: Copies this NURBS surface from another NURBS surface.
Parameter: other (NurbsSurface)
Parameter Summary: The other NURBS surface to use as source.

Method: Rhino.Geometry.NurbsSurface.EpsilonEquals(NurbsSurface other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.NurbsSurface.FindClosestIsoCurve(Point3d testPoint)
Return: IsoStatus
Modifiers: public
Summary: Find the closest isoparamentric curve, given a test point.
Parameter: testPoint (Point3d)
Parameter Summary: The test point.

Method: Rhino.Geometry.NurbsSurface.IncreaseDegreeU(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this surface in U direction.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsSurface.IncreaseDegreeV(int desiredDegree)
Return: bool
Modifiers: public
Summary: Increase the degree of this surface in V direction.
Parameter: desiredDegree (int)
Parameter Summary: The desired degree. Degrees should be number between and including 1 and 11.

Method: Rhino.Geometry.NurbsSurface.MakeNonRational()
Return: bool
Modifiers: public
Summary: Makes this surface non-rational.

Method: Rhino.Geometry.NurbsSurface.MakeRational()
Return: bool
Modifiers: public
Summary: Makes this surface rational.

Method: Rhino.Geometry.NurbsSurface.MatchToCurve(IsoStatus side, Curve targetCurve, double maxEndDistance, double maxInteriorDistance, double matchTolerance, int maxLevel)
Return: NurbsSurface
Modifiers: public
Summary: Constructs a NURBS surface with start and end edge isocurve matching the start and end of targetCurve, and Greville points on targetCurve.
Parameter: side (IsoStatus)
Parameter Summary: The isoparamentric curve direction.
Parameter: targetCurve (Curve)
Parameter Summary: The target curve.
Parameter: maxEndDistance (double)
Parameter Summary: If maxEndDistance dist > 0, the edge isocurve must be within maxEndDistance of targetCurve start. If maxEndDistance dist > 0, the edge isocurve must be within maxEndDistance of targetCurve end.
Parameter: maxInteriorDistance (double)
Parameter Summary: If maxInteriorDistance > 0, all interior Greville points of the edge isocurve must be within maxInteriorDistance of targetCurve.
Parameter: matchTolerance (double)
Parameter Summary: The matching tolerance.
Parameter: maxLevel (int)
Parameter Summary: If maxLevel > 0, the result will be refined up to that many times, attempting to get the result within matchTolerance. If matchTolerance <= 0, no refinement will be done. In any case, the parameters closest points on targetCurve of the Greville points of the edge isocurve must be monotonic increasing.

Method: Rhino.Geometry.NurbsSurface.UVNDirectionsAt(double u, double v, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS surface at a u,v parameter similar to the method used by Rhino's MoveUVN command.
Parameter: u (double)
Parameter Summary: The u evaluation parameter.
Parameter: v (double)
Parameter Summary: The v evaluation parameter.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Class: Rhino.Geometry.OrdinateDimension
Summary: Represents an ordinate dimension

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension()

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension(Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Summary: Constructs an ordinate dimension from parameters.

Constructor: Rhino.Geometry.OrdinateDimension.OrdinateDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.OrdinateDimension.DefPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.Direction
Return: MeasuredDirection
Modifiers: public
Summary: Gets or sets the measured direction.
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkOffset1
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkOffset2
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.OrdinateDimension.KinkPoint1
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.OrdinateDimension.KinkPoint2
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.OrdinateDimension.LeaderPoint
Return: Point2d
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.OrdinateDimension.Create(DimensionStyle dimStyle, Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Return: OrdinateDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's AnnotationStyle
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: direction (MeasuredDirection)
Parameter Summary: MeasuredDirection.XAxis or MeasuredDirection.YAxis
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkoffset1 (double)
Parameter Summary: Distance to first jog
Parameter: kinkoffset2 (double)
Parameter Summary: Distance to second jog

Method: Rhino.Geometry.OrdinateDimension.AdjustFromPoints(Plane plane, MeasuredDirection direction, Point3d basepoint, Point3d defpoint, Point3d leaderpoint, double kinkoffset1, double kinkoffset2)
Return: bool
Modifiers: public
Summary: Update Dimension geometry from point locations
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: direction (MeasuredDirection)
Parameter Summary: MeasuredDirection.XAxis or MeasuredDirection.YAxisw
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkoffset1 (double)
Parameter Summary: Distance to first jog
Parameter: kinkoffset2 (double)
Parameter Summary: Distance to second jog

Method: Rhino.Geometry.OrdinateDimension.Get3dPoints(out Point3d basepoint, out Point3d defpoint, out Point3d leaderpoint, out Point3d kinkpoint1, out Point3d kinkpoint2)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: basepoint (Point3d)
Parameter Summary: Dimension's base point
Parameter: defpoint (Point3d)
Parameter Summary: Dimension's definition point
Parameter: leaderpoint (Point3d)
Parameter Summary: Point at tail of leader
Parameter: kinkpoint1 (Point3d)
Parameter Summary: Point at first jog
Parameter: kinkpoint2 (Point3d)
Parameter Summary: Point at second jog

Method: Rhino.Geometry.OrdinateDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.OrdinateDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.OrdinateDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.Particle
Summary: Represents a simple particle.
This base class only defines position and display properties (size, color, bitmap id).   You will most likely create a class that derives from this particle class to perform some   sort of physical simulation (movement over time or frames).

Constructor: Rhino.Geometry.Particle.Particle()
Summary: Initializes a new instance of the <b>Particle</b> class.

Property: Rhino.Geometry.Particle.Color
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Particle.DisplayBitmapIndex
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.Particle.Index
Return: int
Modifiers: public
Summary: Index in ParentSystem for this Particle. Can change when the particle system is modified.
Accessors: get set

Property: Rhino.Geometry.Particle.Location
Return: Point3d
Modifiers: public
Summary: 3d Location of the Particle.
Accessors: get set

Property: Rhino.Geometry.Particle.ParentSystem
Return: ParticleSystem
Modifiers: public
Summary: Gets the parent particle system of this particle.
Accessors: get set

Property: Rhino.Geometry.Particle.Size
Return: float
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.Particle.Update()
Return: void
Modifiers: public, virtual
Summary: Base class implementation does nothing.

Class: Rhino.Geometry.ParticleSystem

Constructor: Rhino.Geometry.ParticleSystem.ParticleSystem()
Summary: Initializes a new instance of the ParticleSystem class

Property: Rhino.Geometry.ParticleSystem.BoundingBox
Return: BoundingBox
Modifiers: public
Accessors: get

Property: Rhino.Geometry.ParticleSystem.DisplaySizesInWorldUnits
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ParticleSystem.DrawRequiresDepthSorting
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.ParticleSystem.Add(Particle particle)
Return: bool
Modifiers: public, virtual
Summary: Adds a particle to this ParticleSystem. A Particle can only be in one system at a time.  If the Particle already exists in a different system, this function will return false. You should remove the particle from the other system first before adding it.
Parameter: particle (Particle)
Parameter Summary: A particle to be added.

Method: Rhino.Geometry.ParticleSystem.Clear()
Return: void
Modifiers: public, virtual
Summary: Remove all Particles from this system.

Method: Rhino.Geometry.ParticleSystem.GetEnumerator()
Return: IEnumerator<Particle>
Modifiers: public

Method: Rhino.Geometry.ParticleSystem.Remove(Particle particle)
Return: void
Modifiers: public, virtual
Summary: Removes a single particle from this system.
Parameter: particle (Particle)
Parameter Summary: The particle to be removed.

Method: Rhino.Geometry.ParticleSystem.Update()
Return: void
Modifiers: public, virtual
Summary: Calls Update on every particle in the system.

Class: Rhino.Geometry.PlaneSurface
Summary: Represents a plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface()
Summary: Constructs a new plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(Plane plane, Interval xExtents, Interval yExtents)
Summary: Constructs a plane surface with x and y extents.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(Plane plane)
Summary: Constructs a new plane surface.

Constructor: Rhino.Geometry.PlaneSurface.PlaneSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PlaneSurface.Plane
Return: Plane
Modifiers: public
Summary: Gets or sets the plane surface's plane.
Accessors: get set

Method: Rhino.Geometry.PlaneSurface.CreateThroughBox(Line lineInPlane, Vector3d vectorInPlane, BoundingBox box)
Return: PlaneSurface
Modifiers: public, static
Summary: Create a plane that contains the intersection of a bounding box.
Parameter: lineInPlane (Line)
Parameter Summary: A line that will lie on the plane.
Parameter: vectorInPlane (Vector3d)
Parameter Summary: A vector the direction of which will be in plane.
Parameter: box (BoundingBox)
Parameter Summary: A box to cut through.

Method: Rhino.Geometry.PlaneSurface.CreateThroughBox(Plane plane, BoundingBox box)
Return: PlaneSurface
Modifiers: public, static
Summary: Create a plane that contains the intersection of a bounding box.
Parameter: plane (Plane)
Parameter Summary: An original plane value.
Parameter: box (BoundingBox)
Parameter Summary: A box to use for extension boundary.

Method: Rhino.Geometry.PlaneSurface.GetExtents(int direction)
Return: Interval
Modifiers: public
Summary: Gets the extents of the plane surface.
Parameter: direction (int)
Parameter Summary: The direction, where 0 gets plane surface's x coordinate extents and 1 gets plane surface's y coordinate extents.

Method: Rhino.Geometry.PlaneSurface.SetExtents(int direction, Interval extents, bool syncDomain)
Return: void
Modifiers: public
Summary: Sets the extents of the plane surface.
Parameter: direction (int)
Parameter Summary: The direction, where 0 sets plane surface's x coordinate extents and 1 sets plane surface's y coordinate extents.
Parameter: extents (Interval)
Parameter Summary: An increasing interval.
Parameter: syncDomain (bool)
Parameter Summary: If true, the corresponding evaluation interval domain is set so that it matches the extents interval. If false, the corresponding evaluation interval domain is not changed.

Method: Rhino.Geometry.PlaneSurface.ToMesh()
Return: Mesh
Modifiers: public
Summary: Computes a polygon mesh of the surface made of one quad.

Class: Rhino.Geometry.Point
Summary: Represents a geometric point.
This is fundamentally a class that derives from    and contains a single  location.

Constructor: Rhino.Geometry.Point.Point(Point3d location)
Summary: Initializes a new point instance with a location.

Constructor: Rhino.Geometry.Point.Point(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Point.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the location (position) of this point.
Accessors: get set

Class: Rhino.Geometry.Point3dGrid
Summary: Represents a rectangular grid of 3D points.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid()
Summary: Initializes a rectangular grid of points, with no points in it.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid(int rows, int columns)
Summary: Initializes a rectangular grid of points with a given number of columns and rows.

Constructor: Rhino.Geometry.Point3dGrid.Point3dGrid(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Class: Rhino.Geometry.PointCloud
Summary: Represents a collection of coordinates with optional normal vectors and colors.

Constructor: Rhino.Geometry.PointCloud.PointCloud()
Summary: Initializes a new instance of the <b>PointCloud</b> class that is empty.

Constructor: Rhino.Geometry.PointCloud.PointCloud(IEnumerable<Point3d> points)
Summary: Initializes a new instance of the <b>PointCloud</b> class, copying the content from a set of points.

Constructor: Rhino.Geometry.PointCloud.PointCloud(PointCloud other)
Summary: Initializes a new instance of the <b>PointCloud</b> class, copying (Merge) the content of another point cloud.

Constructor: Rhino.Geometry.PointCloud.PointCloud(SerializationInfo info, StreamingContext context)
Summary: Binds with the Rhino default serializer to support object persistence.

Property: Rhino.Geometry.PointCloud.ContainsColors
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have colors assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsHiddenFlags
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have hidden flags assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsNormals
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have normals assigned to them.
Accessors: get

Property: Rhino.Geometry.PointCloud.ContainsPointValues
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the points in this point cloud have extra values assigned to them. Extra values can be used to store a user-defined values, such as intensity.
Accessors: get

Property: Rhino.Geometry.PointCloud.Count
Return: int
Modifiers: public
Summary: Gets the number of points in this point cloud.
Accessors: get

Property: Rhino.Geometry.PointCloud.HiddenPointCount
Return: int
Modifiers: public
Summary: Gets the number of points that have their Hidden flag set.
Accessors: get

Property: Rhino.Geometry.PointCloud.this[int index]
Return: PointCloudItem
Modifiers: public
Summary: Gets the item at the given index.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Color color)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal, Color color, double value)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.
Parameter: value (double)
Parameter Summary: Extra value of new point. An extra value can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal, Color color)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point, Vector3d normal)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.

Method: Rhino.Geometry.PointCloud.Add(Point3d point)
Return: void
Modifiers: public
Summary: Append a new point to the end of the list.
Parameter: point (Point3d)
Parameter Summary: Point to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Color> colors)
Return: void
Modifiers: public
Summary: Appends a collection of points and normal vectors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals, IEnumerable<Color> colors, IEnumerable<double> values)
Return: void
Modifiers: public
Summary: Appends a collection of points, normal vectors, colors, and extra values to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.
Parameter: values (IEnumerable<double>)
Parameter Summary: Exta point values to append. Extra values can be used to store a user-defined values, such as intensity.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals, IEnumerable<Color> colors)
Return: void
Modifiers: public
Summary: Appends a collection of points, normal vectors, and colors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points, IEnumerable<Vector3d> normals)
Return: void
Modifiers: public
Summary: Appends a collection of points and normal vectors to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.
Parameter: normals (IEnumerable<Vector3d>)
Parameter Summary: Normal Vectors to append.

Method: Rhino.Geometry.PointCloud.AddRange(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Appends a collection of points to this point cloud.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.

Method: Rhino.Geometry.PointCloud.AppendNew()
Return: PointCloudItem
Modifiers: public
Summary: Appends a new PointCloudItem to the end of this point cloud.

Method: Rhino.Geometry.PointCloud.AsReadOnlyListOfPoints()
Return: IReadOnlyList<Point3d>
Modifiers: public
Summary: Returns an enumerator and list indexer over point cloud locations.

Method: Rhino.Geometry.PointCloud.ClearColors()
Return: void
Modifiers: public
Summary: Destroys the color information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearHiddenFlags()
Return: void
Modifiers: public
Summary: Destroys the hidden flag information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearNormals()
Return: void
Modifiers: public
Summary: Destroys the normal vector information in this point cloud.

Method: Rhino.Geometry.PointCloud.ClearPointValues()
Return: void
Modifiers: public
Summary: Destroys the extra value information in this point cloud. Extra values can be used to store a user-defined values, such as intensity.

Method: Rhino.Geometry.PointCloud.ClosestPoint(Point3d testPoint)
Return: int
Modifiers: public
Summary: Returns index of the closest point in the point cloud to a given test point.
Parameter: testPoint (Point3d)
Parameter Summary: .

Method: Rhino.Geometry.PointCloud.CreateContourCurves(Point3d startPoint, Point3d endPoint, double interval, double absoluteTolerance, double maxDistance, double minDistance, bool openCurves, bool createSpline, bool createPolyline, double fitTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curves by intersecting a plane with a point cloud.
Parameter: startPoint (Point3d)
Parameter Summary: Start point for vector that is normal to contour plane.
Parameter: endPoint (Point3d)
Parameter Summary: End point for vector that is normal to contour plane.
Parameter: interval (double)
Parameter Summary: he interval or distance between contours.
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance
Parameter: maxDistance (double)
Parameter Summary: Maximum distance to plane. The thickness of the "slab" around the plane from which sample points are taken. Those sample points are projected to the section plane and a polyline is found that connects them. This distance depends on the size of the point cloud and the spacing of the points.
Parameter: minDistance (double)
Parameter Summary: Minimum distance between points. A threshold for the minimum spacing between adjacent sample points. If there are points closer than that, some are not used.
Parameter: openCurves (bool)
Parameter Summary: True for open, False for closed.
Parameter: createSpline (bool)
Parameter Summary: Creates a smooth curve. You can create both a curve and a polyline.
Parameter: createPolyline (bool)
Parameter Summary: Creates a polyline. You can create both a curve and a polyline.
Parameter: fitTolerance (double)
Parameter Summary: The tolerance used to fit the curve through the polyline.

Method: Rhino.Geometry.PointCloud.CreateContourCurves(Point3d contourStart, Point3d contourEnd, double interval, double absoluteTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curves by intersecting a plane with a point cloud.
Parameter: contourStart (Point3d)
Parameter Summary: Start point for vector that is normal to contour plane.
Parameter: contourEnd (Point3d)
Parameter Summary: End point for vector that is normal to contour plane.
Parameter: interval (double)
Parameter Summary: he interval or distance between contours.
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance

Method: Rhino.Geometry.PointCloud.CreateSectionCurve(Plane plane, double absoluteTolerance, double maxDistance, double minDistance, bool openCurves, bool createSpline, bool createPolyline, double fitTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates a planar curve by intersecting a plane with a point cloud.
Parameter: plane (Plane)
Parameter Summary: The plane to intersect with
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance
Parameter: maxDistance (double)
Parameter Summary: Maximum distance to plane. The thickness of the "slab" around the plane from which sample points are taken. Those sample points are projected to the section plane and a polyline is found that connects them. This distance depends on the size of the point cloud and the spacing of the points.
Parameter: minDistance (double)
Parameter Summary: Minimum distance between points. A threshold for the minimum spacing between adjacent sample points. If there are points closer than that, some are not used.
Parameter: openCurves (bool)
Parameter Summary: True for open, False for closed.
Parameter: createSpline (bool)
Parameter Summary: Creates a smooth curve. You can create both a curve and a polyline.
Parameter: createPolyline (bool)
Parameter Summary: Creates a polyline. You can create both a curve and a polyline.
Parameter: fitTolerance (double)
Parameter Summary: The tolerance used to fit the curve through the polyline.

Method: Rhino.Geometry.PointCloud.CreateSectionCurve(Plane plane, double absoluteTolerance)
Return: Curve[]
Modifiers: public
Summary: Creates planar curves by intersecting a plane with a point cloud.
Parameter: plane (Plane)
Parameter Summary: The plane to intersect with
Parameter: absoluteTolerance (double)
Parameter Summary: The document's model absolute tolerance

Method: Rhino.Geometry.PointCloud.GetColors()
Return: Color[]
Modifiers: public
Summary: Copy all the point colors in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetEnumerator()
Return: IEnumerator<PointCloudItem>
Modifiers: public
Summary: Gets an enumerator that allows to modify each point cloud point.

Method: Rhino.Geometry.PointCloud.GetNormals()
Return: Vector3d[]
Modifiers: public
Summary: Copy all the normal vectors in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetPoints()
Return: Point3d[]
Modifiers: public
Summary: Copy all the point coordinates in this point cloud to an array.

Method: Rhino.Geometry.PointCloud.GetPointValues()
Return: double
Modifiers: public
Summary: Copy all the extra point values in this point cloud to an array. Extra values can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.GetRandomSubsample(uint numberOfPoints, System.Threading.CancellationToken cancelToken, IProgress<double> progress)
Return: PointCloud
Modifiers: public
Summary: Returns a random subsample of a point cloud.
Parameter: numberOfPoints (uint)
Parameter Summary: The number of points the new point cloud should contain.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: The cancellation token.
Parameter: progress (IProgress<double>)
Parameter Summary: The provider for progress updates.

Method: Rhino.Geometry.PointCloud.GetRandomSubsample(uint numberOfPoints)
Return: PointCloud
Modifiers: public
Summary: Returns a random subsample of a point cloud.
Parameter: numberOfPoints (uint)
Parameter Summary: The number of points the new point cloud should contain.

Method: Rhino.Geometry.PointCloud.GetUnsafeLock(bool writable)
Return: PointCloudUnsafeLock
Modifiers: public
Summary: Allows the developer to obtain unsafe pointers to the underlying unmanaged data structures of the PointCloud.
Parameter: writable (bool)
Parameter Summary: True if user will need to write onto the structure. False otherwise.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Color color)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal, Color color, double value)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.
Parameter: value (double)
Parameter Summary: An extra value of new point. An extra values can be used to store a user-defined value, such as intensity.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal, Color color)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.
Parameter: color (Color)
Parameter Summary: Color of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point, Vector3d normal)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.
Parameter: normal (Vector3d)
Parameter Summary: Normal vector of new point.

Method: Rhino.Geometry.PointCloud.Insert(int index, Point3d point)
Return: void
Modifiers: public
Summary: Inserts a new point into the point list.
Parameter: index (int)
Parameter Summary: Insertion index.
Parameter: point (Point3d)
Parameter Summary: Point to append.

Method: Rhino.Geometry.PointCloud.InsertNew(int index)
Return: PointCloudItem
Modifiers: public
Summary: Inserts a new <b>PointCloudItem</b> at a specific position of the point cloud.
Parameter: index (int)
Parameter Summary: Index of new item.

Method: Rhino.Geometry.PointCloud.InsertRange(int index, IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Append a collection of points to this point cloud.
Parameter: index (int)
Parameter Summary: Index at which to insert the new collection.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points to append.

Method: Rhino.Geometry.PointCloud.Merge(PointCloud other)
Return: void
Modifiers: public
Summary: Merges, or appends, a specified point cloud into this one.
Parameter: other (PointCloud)
Parameter Summary: PointCloud to merge with this one.

Method: Rhino.Geometry.PointCloud.PointAt(int index)
Return: Point3d
Modifiers: public
Summary: Returns the location of the point at a specific index.
Parameter: index (int)
Parameter Summary: The index.

Method: Rhino.Geometry.PointCloud.ReleaseUnsafeLock(PointCloudUnsafeLock pointCloudData)
Return: void
Modifiers: public
Summary: Updates the PointCloud data with the information that was stored via the <b>PointCloudUnsafeLock</b> .
Parameter: pointCloudData (PointCloudUnsafeLock)
Parameter Summary: The data that will be unlocked.

Method: Rhino.Geometry.PointCloud.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Remove the point at the given index.
Parameter: index (int)
Parameter Summary: Index of point to remove.

Method: Rhino.Geometry.PointCloud.RemoveRange(IEnumerable<int> indices)
Return: int
Modifiers: public
Summary: Removes points at given indices.
Parameter: indices (IEnumerable<int>)
Parameter Summary: An array of indices of the points to remove.

Method: Rhino.Geometry.PointCloud.ShrinkWrap(ShrinkWrapParameters parameters)
Return: Mesh
Modifiers: public
Summary: Returns a ShrinkWrap mesh from this point cloud object.

Class: Rhino.Geometry.PointCloudItem
Summary: Represents a single item in a point cloud. A PointCloud item always has a location, but it has an optional normal vector and color.

Property: Rhino.Geometry.PointCloudItem.Color
Return: Color
Modifiers: public
Summary: Gets or sets the color of this point cloud item. If this point cloud item does not have a color, System.Drawing.Color.Black is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Hidden
Return: bool
Modifiers: public
Summary: Gets or sets the hidden flag of this point cloud item. If this point cloud item does not have a hidden flag, False is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Index
Return: int
Modifiers: public
Summary: Gets the index of this point cloud item.
Accessors: get

Property: Rhino.Geometry.PointCloudItem.Location
Return: Point3d
Modifiers: public
Summary: Gets or sets the location of this point cloud item.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Normal
Return: Vector3d
Modifiers: public
Summary: Gets or sets the normal vector for this point cloud item. If this point cloud item does not have a normal vector, Vector3d.Unset is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.PointValue
Return: double
Modifiers: public
Summary: Gets or set the extra value of this point cloud item. The extra value can be used to store a user-defined value, such as intensity. If this point cloud item does not have an extra value, RhinoMath.UnsetValue is returned.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.X
Return: double
Modifiers: public
Summary: Gets or sets the X component of this point cloud item location.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Y
Return: double
Modifiers: public
Summary: Gets or sets the Y component of this point cloud item location.
Accessors: get set

Property: Rhino.Geometry.PointCloudItem.Z
Return: double
Modifiers: public
Summary: Gets or sets the Z component of this point cloud item location.
Accessors: get set

Class: Rhino.Geometry.PointCloudUnsafeLock
Summary: Permits access to the underlying PointCloud raw data structures in an unsafe way.

Method: Rhino.Geometry.PointCloudUnsafeLock.ColorArray(out int length)
Return: int*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of colors, which are represented as 32-bit integers in ARGB format, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.NormalArray(out int length)
Return: Vector3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of point normals, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.PointArray(out int length)
Return: Point3d*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw point array, which uses coordinates defined with double precision floating point numbers, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Method: Rhino.Geometry.PointCloudUnsafeLock.Release()
Return: void
Modifiers: public
Summary: Releases the lock and updates the underlying unmanaged data structures.

Method: Rhino.Geometry.PointCloudUnsafeLock.ValueArray(out int length)
Return: double*
Modifiers: public, unsafe
Summary: Retrieves a pointer to the raw array of point values, or None if none is available.
Parameter: length (int)
Parameter Summary: The length of the array. This value is returned by reference (out in C#). 0 is returned when there is no single precision array.

Class: Rhino.Geometry.PolyCurve
Summary: Represents a curve that is the result of joining several (possibly different) types of curves.

Constructor: Rhino.Geometry.PolyCurve.PolyCurve()
Summary: Initializes a new, empty polycurve.

Constructor: Rhino.Geometry.PolyCurve.PolyCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PolyCurve.HasGap
Return: bool
Modifiers: public
Summary: This is a quick way to see if the curve has gaps between the sub curve segments.
Accessors: get

Property: Rhino.Geometry.PolyCurve.IsNested
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not a PolyCurve contains nested PolyCurves.
Accessors: get

Property: Rhino.Geometry.PolyCurve.SegmentCount
Return: int
Modifiers: public
Summary: Gets the number of segments that make up this Polycurve.
Accessors: get

Method: Rhino.Geometry.PolyCurve.Append(Arc arc)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the arc to the end of polycurve. This function will fail if the polycurve is closed or if SegmentCount > 0 and the arc is closed.
Parameter: arc (Arc)
Parameter Summary: Arc segment to append.

Method: Rhino.Geometry.PolyCurve.Append(Curve curve)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the curve to the end of polycurve. This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
Parameter: curve (Curve)
Parameter Summary: Segment to append.

Method: Rhino.Geometry.PolyCurve.Append(Line line)
Return: bool
Modifiers: public
Summary: Appends and matches the start of the line to the end of polycurve. This function will fail if the polycurve is closed.
Parameter: line (Line)
Parameter Summary: Line segment to append.

Method: Rhino.Geometry.PolyCurve.AppendSegment(Curve curve)
Return: bool
Modifiers: public
Summary: Appends the curve to the polycurve without changing the new segment's geometry. This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
Parameter: curve (Curve)
Parameter Summary: Segment to append.

Method: Rhino.Geometry.PolyCurve.CleanUp()
Return: Curve
Modifiers: public
Summary: Removes any nesting of polycurves. If this polycurve has just a single segment, the segment is returned. If, after nest removal, there are adjacent segments which are polylines, they are combined into a single polyline. The new curve may have a different domain from this polycurve. If the start and end segments of a closed input are polylines, the result may have a different seam location since the start and end segments will be combined.

Method: Rhino.Geometry.PolyCurve.Duplicate()
Return: GeometryBase
Modifiers: public, override
Summary: Duplicates this polycurve.
When not overridden in a derived class, this calls . | Since: 5.0

Method: Rhino.Geometry.PolyCurve.DuplicatePolyCurve()
Return: PolyCurve
Modifiers: public
Summary: Duplicates this polycurve.
This is the same as . | Since: 5.0

Method: Rhino.Geometry.PolyCurve.Explode()
Return: Curve[]
Modifiers: public
Summary: Explodes this PolyCurve into a list of Curve segments. This willnot explodenested polycurves. Call <b>RemoveNesting</b> first if you need all individual segments.

Method: Rhino.Geometry.PolyCurve.PolyCurveParameter(int segmentIndex, double segmentCurveParameter)
Return: double
Modifiers: public
Summary: Converts a segment curve parameter to a polycurve parameter.
Parameter: segmentIndex (int)
Parameter Summary: Index of segment.
Parameter: segmentCurveParameter (double)
Parameter Summary: Parameter on segment.

Method: Rhino.Geometry.PolyCurve.RemoveNesting()
Return: bool
Modifiers: public
Summary: Explodes nested polycurve segments and reconstructs this curve from the shattered remains. The result will have not have any PolyCurves as segments but it will have identical locus and parameterization.

Method: Rhino.Geometry.PolyCurve.SegmentCurve(int index)
Return: Curve
Modifiers: public
Summary: Gets the segment curve at the given index.
Parameter: index (int)
Parameter Summary: Index of segment to retrieve.

Method: Rhino.Geometry.PolyCurve.SegmentCurveParameter(double polycurveParameter)
Return: double
Modifiers: public
Summary: Converts a polycurve parameter to a segment curve parameter.
Parameter: polycurveParameter (double)
Parameter Summary: Parameter on PolyCurve to convert.

Method: Rhino.Geometry.PolyCurve.SegmentDomain(int segmentIndex)
Return: Interval
Modifiers: public
Summary: Returns the polycurve sub-domain assigned to a segment curve.
Parameter: segmentIndex (int)
Parameter Summary: Index of segment.

Method: Rhino.Geometry.PolyCurve.SegmentIndex(double polycurveParameter)
Return: int
Modifiers: public
Summary: Finds the segment used for evaluation at polycurve_parameter.
Parameter: polycurveParameter (double)
Parameter Summary: Parameter on polycurve for segment lookup.

Method: Rhino.Geometry.PolyCurve.SegmentIndexes(Interval subdomain, out int segmentIndex0, out int segmentIndex1)
Return: int
Modifiers: public
Summary: Finds the segments that overlap the Polycurve sub domain.
Parameter: subdomain (Interval)
Parameter Summary: Domain on this PolyCurve.
Parameter: segmentIndex0 (int)
Parameter Summary: Index of first segment that overlaps the sub-domain.
Parameter: segmentIndex1 (int)
Parameter Summary: Index of last segment that overlaps the sub-domain. Note that segmentIndex0 <= i < segmentIndex1.

Class: Rhino.Geometry.Polyline
Summary: Represents an ordered set of points connected by linear segments.
Polylines are closed if start and end points coincide.

Constructor: Rhino.Geometry.Polyline.Polyline()
Summary: Initializes a new empty polyline.

Constructor: Rhino.Geometry.Polyline.Polyline(IEnumerable<Point3d> collection)
Summary: Initializes a new polyline from a collection of points.

Constructor: Rhino.Geometry.Polyline.Polyline(int initialCapacity)
Summary: Initializes a new empty polyline with an initial capacity.

Property: Rhino.Geometry.Polyline.IsClosed
Return: bool
Modifiers: public
Summary: Test a polyline to see if it is closed.
Accessors: get

Property: Rhino.Geometry.Polyline.IsValid
Return: bool
Modifiers: public
Summary: Gets a value that indicates whether this polyline is valid.
Valid polylines have at least one segment, no Invalid points and no zero length segments.
Closed polylines with only two segments are also not considered valid. | Since: 5.0 | Accessors: get

Property: Rhino.Geometry.Polyline.Length
Return: double
Modifiers: public
Summary: Gets the total length of the polyline.
Accessors: get

Property: Rhino.Geometry.Polyline.SegmentCount
Return: int
Modifiers: public
Summary: Gets the number of segments for this polyline.
Accessors: get

Method: Rhino.Geometry.Polyline.CreateByJoiningLines(IEnumerable<Line> lines, double tolerance, bool splitAtIntersections)
Return: Polyline[]
Modifiers: public, static
Summary: Creates polylines by joining lines.
Parameter: lines (IEnumerable<Line>)
Parameter Summary: An array, a list or any enumerable of lines.
Parameter: tolerance (double)
Parameter Summary: The threshold distance for joining lines.
Parameter: splitAtIntersections (bool)
Parameter Summary: If true, splits lines at intersections.

Method: Rhino.Geometry.Polyline.CreateCircumscribedPolygon(Circle circle, int sideCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular polygon circumscribe about a circle. The midpoints of the polygon's edges will be tangent to the circle.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: sideCount (int)
Parameter Summary: The number of sides

Method: Rhino.Geometry.Polyline.CreateInscribedPolygon(Circle circle, int sideCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular polygon inscribed in a circle. The vertices of the polygon will be on the circle.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: sideCount (int)
Parameter Summary: The number of sides

Method: Rhino.Geometry.Polyline.CreateStarPolygon(Circle circle, double radius, int cornerCount)
Return: Polyline
Modifiers: public, static
Summary: Create a regular star polygon. The star begins at circle.PointAt(0) and the vertices alternate between being on circle and begin on a concentric circle of other_radius.
Parameter: circle (Circle)
Parameter Summary: The circle.
Parameter: radius (double)
Parameter Summary: The radius of other circle.
Parameter: cornerCount (int)
Parameter Summary: The number of corners on the circle. There will be 2*cornerCount sides and 2*cornerCount vertices.

Method: Rhino.Geometry.Polyline.BreakAtAngles(double angle)
Return: Polyline[]
Modifiers: public
Summary: Breaks this polyline into sections at sharp kinks. Closed polylines will also be broken at the first and last vertex.
Parameter: angle (double)
Parameter Summary: Angle (in radians) between adjacent segments for a break to occur.

Method: Rhino.Geometry.Polyline.CenterPoint()
Return: Point3d
Modifiers: public
Summary: Compute the center point of the polyline as the weighted average of all segments.

Method: Rhino.Geometry.Polyline.ClosestParameter(Point3d testPoint)
Return: double
Modifiers: public
Summary: Gets the parameter along the polyline which is closest to a test-point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to approximate.

Method: Rhino.Geometry.Polyline.ClosestPoint(Point3d testPoint)
Return: Point3d
Modifiers: public
Summary: Gets the point on the polyline which is closest to a test-point.
Parameter: testPoint (Point3d)
Parameter Summary: Point to approximate.

Method: Rhino.Geometry.Polyline.CollapseShortSegments(double tolerance)
Return: int
Modifiers: public
Summary: Collapses all segments until none are shorter than tolerance. This function is significantly slower than DeleteShortSegments, since it recursively operates on the shortest segment. When a segment is collapsed the end-points are placed in the center of the segment.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during collapsing.

Method: Rhino.Geometry.Polyline.DeleteShortSegments(double tolerance)
Return: int
Modifiers: public
Summary: Removes all points that are closer than tolerance to the previous point.
Start and end points are left intact. | Since: 5.0 | Parameter: tolerance (double) | Parameter Summary: Vertices closer together than tolerance will be removed.

Method: Rhino.Geometry.Polyline.Duplicate()
Return: Polyline
Modifiers: public, new
Summary: Returns a deep copy of this polyline instance.

Method: Rhino.Geometry.Polyline.GetSegments()
Return: Line[]
Modifiers: public
Summary: Constructs an array of line segments that make up the entire polyline.

Method: Rhino.Geometry.Polyline.IsClosedWithinTolerance(double tolerance)
Return: bool
Modifiers: public
Summary: Test a polyline to see if it is closed.
Parameter: tolerance (double)
Parameter Summary: The tolerance.

Method: Rhino.Geometry.Polyline.MergeColinearSegments(double angleTolerance, bool includeSeam)
Return: int
Modifiers: public
Summary: Merge co-linear consecutive segments in a polyline. This method will automatically remove any zero-length segments as well.
Parameter: angleTolerance (double)
Parameter Summary: The angle tolerance between adjacent segments for collinearity test.
Parameter: includeSeam (bool)
Parameter Summary: If true, the seam point of a closed polyline will be moved forwards if it is collinear too.

Method: Rhino.Geometry.Polyline.PointAt(double t)
Return: Point3d
Modifiers: public
Summary: Gets the point on the polyline at the given parameter. The integer part of the parameter indicates the index of the segment.
Parameter: t (double)
Parameter Summary: Polyline parameter.

Method: Rhino.Geometry.Polyline.ReduceSegments(double tolerance)
Return: int
Modifiers: public
Summary: Constructs a reduction of this polyline by recursively removing the least significant segments.
Parameter: tolerance (double)
Parameter Summary: Tolerance for reduction. Whenever a vertex of the polyline is more significant than tolerance, it will be included in the reduction.

Method: Rhino.Geometry.Polyline.RemoveNearlyEqualSubsequentPoints(double tolerance)
Return: void
Modifiers: public
Summary: Removes one copy of a point that is equal to the previous or later point, by an absolute tolerance factor.

Method: Rhino.Geometry.Polyline.SegmentAt(int index)
Return: Line
Modifiers: public
Summary: Gets the line segment at the given index.
Parameter: index (int)
Parameter Summary: Index of segment to retrieve.

Method: Rhino.Geometry.Polyline.Smooth(double amount)
Return: bool
Modifiers: public
Summary: Smoothen the polyline segments by averaging adjacent vertices. Smoothing requires a polyline with exclusively valid vertices.
Parameter: amount (double)
Parameter Summary: Amount to smooth. Zero equals no smoothing, one equals complete smoothing.

Method: Rhino.Geometry.Polyline.TangentAt(double t)
Return: Vector3d
Modifiers: public
Summary: Gets the unit tangent vector along the polyline at the given parameter. The integer part of the parameter indicates the index of the segment.
Parameter: t (double)
Parameter Summary: Polyline parameter.

Method: Rhino.Geometry.Polyline.ToNurbsCurve()
Return: NurbsCurve
Modifiers: public
Summary: Constructs a nurbs curve representation of this polyline.

Method: Rhino.Geometry.Polyline.ToPolylineCurve()
Return: PolylineCurve
Modifiers: public
Summary: Constructs a polyline curve representation of this polyline.

Method: Rhino.Geometry.Polyline.TriangulateClosedPolyline()
Return: MeshFace[]
Modifiers: public
Summary: Attempts to create a list of triangles which represent a triangulation of a closed polyline

Method: Rhino.Geometry.Polyline.Trim(Interval domain)
Return: Polyline
Modifiers: public
Summary: Constructs a polyline out of a parameter sub-domain in this curve.
Parameter: domain (Interval)
Parameter Summary: The sub-domain of the polyline. The integer part of the domain parameters indicate the index of the segment.

Class: Rhino.Geometry.PolylineCurve
Summary: Represents the geometry of a set of linked line segments.
This is fundamentally a class that derives from    and internally contains a .

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve()
Summary: Initializes a new empty polyline curve.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(IEnumerable<Point3d> points)
Summary: Initializes a new polyline curve by copying its content from another set of points.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(PolylineCurve other)
Summary: Initializes a new polyline curve by copying its content from another polyline curve.

Constructor: Rhino.Geometry.PolylineCurve.PolylineCurve(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.PolylineCurve.PointCount
Return: int
Modifiers: public
Summary: Gets the number of points in this polyline.
Accessors: get

Method: Rhino.Geometry.PolylineCurve.CreateConvexHull2d(Point2d[] points, out int hullIndices)
Return: PolylineCurve
Modifiers: public, static
Summary: Attempts to create a closed PolylineCurve that is the anti-clockwise planar convex hull of the input points. In addition, the indices of the extremal points among the input points are returned in correct order. Possible duplicates among the input points are taken care of. The input pointsThe indices into the input points such that points[hullIndices[i]] = result[i]. Since the result is a closed polyline if successful, the start/end index is repeated at the beginning and end of the hullIndices.  The closed PolylineCurve encompassing the input points, or None if the input points were either too few, or were found to be collinear.
Parameter: points (Point2d[])
Parameter Summary: The input points
Parameter: hullIndices (int)
Parameter Summary: The indices into the input points such that points[hullIndices[i]] = result[i]. Since the result is a closed polyline if successful, the start/end index is repeated at the beginning and end of the hullIndices.

Method: Rhino.Geometry.PolylineCurve.Parameter(int index)
Return: double
Modifiers: public
Summary: Gets a parameter at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.

Method: Rhino.Geometry.PolylineCurve.Point(int index)
Return: Point3d
Modifiers: public
Summary: Gets a point at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.

Method: Rhino.Geometry.PolylineCurve.SetArcLengthParameterization(double tolerance)
Return: void
Modifiers: public
Summary: Sets the polyline curve to use arc length parameterization for higher quality geometry.
Parameter: tolerance (double)
Parameter Summary: Minimum distance tolerance.

Method: Rhino.Geometry.PolylineCurve.SetParameter(int index, double parameter)
Return: void
Modifiers: public
Summary: Sets a parameter at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.
Parameter: parameter (double)
Parameter Summary: A parameter to set.

Method: Rhino.Geometry.PolylineCurve.SetPoint(int index, Point3d point)
Return: void
Modifiers: public
Summary: Sets a point at a specified index in the polyline curve.
Parameter: index (int)
Parameter Summary: An index.
Parameter: point (Point3d)
Parameter Summary: A point location to set.

Method: Rhino.Geometry.PolylineCurve.ToArray()
Return: Point3d[]
Modifiers: public
Summary: Returns the underlying Polyline points as an array.

Method: Rhino.Geometry.PolylineCurve.ToPolyline()
Return: Polyline
Modifiers: public
Summary: Returns the underlying Polyline, or points.

Class: Rhino.Geometry.QuadRemeshParameters
Summary: Parameters for QuadRemesh method

Constructor: Rhino.Geometry.QuadRemeshParameters.QuadRemeshParameters()
Summary: Initializes a new instance of the QuadRemeshParameters class

Property: Rhino.Geometry.QuadRemeshParameters.AdaptiveQuadCount
Return: bool
Modifiers: public
Summary: Respect the original Target Quad Count value as much as possible. True returns more quads than TargetQuadCount depending on amount of high-curvature areas. Note: this value is ignored when TargetEdgeLength > 0
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.AdaptiveSize
Return: double
Modifiers: public
Summary: Larger values results in for quad sizes that adjust to match input curvature. Smaller values results in more uniform quad sizes at the risk of less feature preservation. Range [0 - 100] Note: this value is ignored when TargetEdgeLength > 0
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.DetectHardEdges
Return: bool
Modifiers: public
Summary: When enabled the hard edges in models will be retained.
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.GuideCurveInfluence
Return: int
Modifiers: public
Summary: 0 = Approximate 1 = Interpolate Edge Ring 2 = Interpolate Edge Loop This value is ignored if Guide Curves are not supplied
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.PreserveMeshArrayEdgesMode
Return: int
Modifiers: public
Summary: 0=off, 1=On(Smart), 2=On(Strict) : Mesh array's created from Breps will have their brep face edge boundaries retained. Smart - Small or insignificant input faces are ignored. Strict - All input faces are factored in re-meshed result.
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.SymmetryAxis
Return: QuadRemeshSymmetryAxis
Modifiers: public
Summary: Symmetry axis to use for symmetric re-meshing
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.TargetEdgeLength
Return: double
Modifiers: public
Summary: When TargetEdgeLength is greater than 0 TargetQuadCount will be re-computed with the target goal of an approximated edge length based on the area of the input mesh e.g TargetQuadCount = Input mesh Area * sqr(TargetEdgeLength) AdaptiveSize as well as AdaptiveQuadCount will also be ignored;
Accessors: get set

Property: Rhino.Geometry.QuadRemeshParameters.TargetQuadCount
Return: int
Modifiers: public
Summary: The number of quads to try to achieve in the final re-meshed object Note: This value is overridden if TargetEdgeLength > 0
Accessors: get set

Class: Rhino.Geometry.RadialDimension
Summary: Represents a dimension of a circular entity that can be measured with radius or diameter.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension()
Summary: Constructs a radial dimension.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension(AnnotationType dimtype, Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint)
Summary: Constructs a radial dimension from parameters.

Constructor: Rhino.Geometry.RadialDimension.RadialDimension(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.RadialDimension.AnnotationType
Return: AnnotationType
Modifiers: public, new
Accessors: get set

Property: Rhino.Geometry.RadialDimension.CenterPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.DimlinePoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.IsDiameterDimension
Return: bool
Modifiers: public
Summary: Gets a value indicating whether the value refers to the diameter, rather than the radius.
Accessors: get

Property: Rhino.Geometry.RadialDimension.KneePoint
Return: Point2d
Modifiers: public
Accessors: get

Property: Rhino.Geometry.RadialDimension.LeaderArrowBlockId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderArrowSize
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderArrowType
Return: ArrowType
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderCurveStyle
Return: LeaderCurveStyle
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.LeaderTextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Summary: Gets or sets the horizontal alignment of the radial dimension's text
Accessors: get set

Property: Rhino.Geometry.RadialDimension.RadiusPoint
Return: Point2d
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextAngleType
Return: LeaderContentAngleStyle
Modifiers: public, override
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextLocation
Return: TextLocation
Modifiers: public, override
Accessors: get set

Property: Rhino.Geometry.RadialDimension.TextOrientation
Return: TextOrientation
Modifiers: public, override
Accessors: get set

Method: Rhino.Geometry.RadialDimension.Create(DimensionStyle dimStyle, AnnotationType dimtype, Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint)
Return: RadialDimension
Modifiers: public, static
Summary: Initialize Dimension parameters
Parameter: dimStyle (DimensionStyle)
Parameter Summary: Dimension's dimstyle
Parameter: dimtype (AnnotationType)
Parameter Summary: AnnotationType.Diameter or AnnotationType.Radius
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line

Method: Rhino.Geometry.RadialDimension.AdjustFromPoints(Plane plane, Point3d centerpoint, Point3d radiuspoint, Point3d dimlinepoint, double rotationInPlane)
Return: bool
Modifiers: public
Summary: Update Dimension geometry from point locations
Parameter: plane (Plane)
Parameter Summary: Dimension's plane
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: rotationInPlane (double)
Parameter Summary: Rotation around plane origin

Method: Rhino.Geometry.RadialDimension.Get3dPoints(out Point3d centerpoint, out Point3d radiuspoint, out Point3d dimlinepoint, out Point3d kneepoint)
Return: bool
Modifiers: public
Summary: Get locations of dimension's 3d points
Parameter: centerpoint (Point3d)
Parameter Summary: Dimension's center point
Parameter: radiuspoint (Point3d)
Parameter Summary: Point on dimension's radius
Parameter: dimlinepoint (Point3d)
Parameter Summary: Point on dimension line
Parameter: kneepoint (Point3d)
Parameter Summary: Point where dimension line jogs

Method: Rhino.Geometry.RadialDimension.GetDisplayLines(DimensionStyle style, double scale, out IEnumerable<Line> lines)
Return: bool
Modifiers: public

Method: Rhino.Geometry.RadialDimension.GetDistanceDisplayText(UnitSystem unitsystem, DimensionStyle style)
Return: string
Modifiers: public

Method: Rhino.Geometry.RadialDimension.GetTextRectangle(out Point3d[] corners)
Return: bool
Modifiers: public

Class: Rhino.Geometry.ReduceMeshParameters
Summary: Parameters for Reduce method

Constructor: Rhino.Geometry.ReduceMeshParameters.ReduceMeshParameters()
Summary: Constructs a polygon reduction parameter object with default values. Users of this class should not rely on default values to stay constant across service releases.

Property: Rhino.Geometry.ReduceMeshParameters.Accuracy
Return: int
Modifiers: public
Summary: Integer from 1 to 10 telling how accurate reduction algorithm to use. Greater number gives more accurate results
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.AllowDistortion
Return: bool
Modifiers: public
Summary: If True mesh appearance is not changed even if the target polygon count is not reached
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.CancelToken
Return: CancellationToken
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.DesiredPolygonCount
Return: int
Modifiers: public
Summary: Desired or target number of faces
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.Error
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.FaceTags
Return: int[]
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.LockedComponents
Return: ComponentIndex[]
Modifiers: public
Summary: List of topological mesh vertices and mesh vertices that will not be moved or deleted in reduction process. Each mesh vertex will lock the corresponding topological mesh vertex. In other words it is not possible to have a locked and non-locked mesh vertex at the same location.
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.NormalizeMeshSize
Return: bool
Modifiers: public
Summary: If True mesh is fitted to an axis aligned unit cube until reduction is complete
Accessors: get set

Property: Rhino.Geometry.ReduceMeshParameters.ProgressReporter
Return: IProgress<double>
Modifiers: public
Accessors: get set

Class: Rhino.Geometry.RevSurface
Summary: Represents a surface of revolution.
Revolutions can be incomplete (they can form arcs).

Constructor: Rhino.Geometry.RevSurface.RevSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.RevSurface.Angle
Return: Interval
Modifiers: public
Summary: Gets the start and end angles of revolution in radians. The interval angle must be increasing and satisfy RhinoMath.ZeroTolerance < Angle.Length<= 2.0 * System.Math.PI.
Accessors: get

Property: Rhino.Geometry.RevSurface.Axis
Return: Line
Modifiers: public
Summary: Gets the axis of revolution.
Accessors: get

Property: Rhino.Geometry.RevSurface.Curve
Return: Curve
Modifiers: public
Summary: Gets the revolute curve.
Accessors: get

Property: Rhino.Geometry.RevSurface.Interval
Return: Interval
Modifiers: public
Summary: Interval specifies the parameterization for the angular parameter. Interval must be an increasing interval. The parameter Interval[0] corresponds to Angle[0] and the parameter Interval[1] corresponds to Angle[1].
Accessors: get

Property: Rhino.Geometry.RevSurface.IsTransposed
Return: bool
Modifiers: public
Summary: If false, the "u" parameter is the angle parameter and the "v" parameter is the curve parameter. If true, the "u" parameter is the curve parameter and the "v" parameter is the angle parameter.
Accessors: get

Method: Rhino.Geometry.RevSurface.Create(Curve revoluteCurve, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix curve and an axis.
This overload accepts a slice start and end angles. | Since: 5.0 | Parameter: revoluteCurve (Curve) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Curve revoluteCurve, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix curve and an axis.
Parameter: revoluteCurve (Curve)
Parameter Summary: A generatrix.
Parameter: axisOfRevolution (Line)
Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.Create(Line revoluteLine, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix line and an axis.
This overload accepts a slice start and end angles.
Results can be (truncated) cones, cylinders and circular hyperboloids, or can fail. | Since: 5.0 | Parameter: revoluteLine (Line) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Line revoluteLine, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix line and an axis.
If the operation succeeds, results can be (truncated) cones, cylinders and circular hyperboloids. | Since: 5.0 | Parameter: revoluteLine (Line) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.Create(Polyline revolutePolyline, Line axisOfRevolution, double startAngleRadians, double endAngleRadians)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix polyline and an axis.
This overload accepts a slice start and end angles. | Since: 5.0 | Parameter: revolutePolyline (Polyline) | Parameter Summary: A generatrix. | Parameter: axisOfRevolution (Line) | Parameter Summary: An axis. | Parameter: startAngleRadians (double) | Parameter Summary: An angle in radians for the start. | Parameter: endAngleRadians (double) | Parameter Summary: An angle in radians for the end.

Method: Rhino.Geometry.RevSurface.Create(Polyline revolutePolyline, Line axisOfRevolution)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from a generatrix polyline and an axis.
Parameter: revolutePolyline (Polyline)
Parameter Summary: A generatrix.
Parameter: axisOfRevolution (Line)
Parameter Summary: An axis.

Method: Rhino.Geometry.RevSurface.CreateFromCone(Cone cone)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a cone.
Parameter: cone (Cone)
Parameter Summary: A cone.

Method: Rhino.Geometry.RevSurface.CreateFromCylinder(Cylinder cylinder)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: A cylinder.

Method: Rhino.Geometry.RevSurface.CreateFromSphere(Sphere sphere)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a sphere.
Parameter: sphere (Sphere)
Parameter Summary: A sphere.

Method: Rhino.Geometry.RevSurface.CreateFromTorus(Torus torus)
Return: RevSurface
Modifiers: public, static
Summary: Constructs a new surface of revolution from the values of a torus.
Parameter: torus (Torus)
Parameter Summary: A torus.

Class: Rhino.Geometry.RibbonOffsetParameters
Summary: Advanced parameters for RibbonOffset Parameters mimic the RibbonOffset Command.

Constructor: Rhino.Geometry.RibbonOffsetParameters.RibbonOffsetParameters()
Summary: Initializes a new instance of the RibbonOffsetParameters class

Property: Rhino.Geometry.RibbonOffsetParameters.AlignCrossSections
Return: bool
Modifiers: public
Summary: When false: cross section slashes between input and output curve are located at the ends of ruled spans. When true: cross section slashes between input and output curve are located at the mid points of ruled spans and blends.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.BlendRadius
Return: double
Modifiers: public
Summary: Positive, typically the same as distance. When the offset results in a self-intersection that gets trimmed off at a kink, the kink will be blended out using this radius.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetDistance
Return: double
Modifiers: public
Summary: Offset curve distance from input curve.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetLocation
Return: Point3d
Modifiers: public
Summary: Inside or Outside point location
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetPlaneVector3d
Return: Vector3d
Modifiers: public
Summary: A vector that indicates the normal of the plane in which the offset will occur. This vector is typically similar to a logical extrude direction for the closed input curve.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.OffsetTolerance
Return: double
Modifiers: public
Summary: Used to determine self-intersections of offset curve, not offset error.
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RebuildPointCount
Return: int
Modifiers: public
Summary: Rebuild offset curve with defined number of control points 0 for disabled
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RefitTolerance
Return: double
Modifiers: public
Summary: Refit the offset curve to a specified tolerance 0 for disabled
Accessors: get set

Property: Rhino.Geometry.RibbonOffsetParameters.RibbonSurfaceGenerationMethod
Return: RibbonOffsetSurfaceMethod
Modifiers: public
Summary: 0 - no surfaces will be created, curves only 1 - Simple Sweep 2 2 - Sweep 2 mixed with NetworkSrf corners
Accessors: get set

Class: Rhino.Geometry.RTree
Summary: Represents a spatial search structure based on implementations of the R-tree algorithm by Toni Gutman.

Constructor: Rhino.Geometry.RTree.RTree()
Summary: Initializes a new, empty instance of the tree.

Property: Rhino.Geometry.RTree.Count
Return: int
Modifiers: public
Summary: Gets the number of items in this tree.
Accessors: get

Method: Rhino.Geometry.RTree.CreateFromPointArray(IEnumerable<Point3d> points)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each point cloud point.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: Points.

Method: Rhino.Geometry.RTree.CreateMeshFaceTree(Mesh mesh)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each face in the mesh. The element id is set to the index of the face.
Parameter: mesh (Mesh)
Parameter Summary: A mesh.

Method: Rhino.Geometry.RTree.CreatePointCloudTree(PointCloud cloud)
Return: RTree
Modifiers: public, static
Summary: Constructs a new tree with an element for each point cloud point.
Parameter: cloud (PointCloud)
Parameter Summary: A point cloud.

Method: Rhino.Geometry.RTree.Point3dClosestPoints(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePts, double limitDistance)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds the point in a list of 3D points that is closest to a test point.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A series of points.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: limitDistance (double)
Parameter Summary: The maximum allowed distance.

Method: Rhino.Geometry.RTree.Point3dKNeighbors(IEnumerable<Point3d> hayPoints, IEnumerable<Point3d> needlePts, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
Parameter: hayPoints (IEnumerable<Point3d>)
Parameter Summary: A series of points.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Geometry.RTree.PointCloudClosestPoints(PointCloud pointcloud, IEnumerable<Point3d> needlePts, double limitDistance)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds the point in a list of 3D points that is closest to a test point.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: limitDistance (double)
Parameter Summary: The maximum allowed distance.

Method: Rhino.Geometry.RTree.PointCloudKNeighbors(PointCloud pointcloud, IEnumerable<Point3d> needlePts, int amount)
Return: IEnumerable<int[]>
Modifiers: public, static
Summary: Finds a certain amount of points in a list of 3D points that are the k-closest to a test point.
Parameter: pointcloud (PointCloud)
Parameter Summary: A point cloud to be searched.
Parameter: needlePts (IEnumerable<Point3d>)
Parameter Summary: Points to search for.
Parameter: amount (int)
Parameter Summary: The required amount of closest neighbors to find.

Method: Rhino.Geometry.RTree.SearchOverlaps(RTree treeA, RTree treeB, double tolerance, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public, static
Summary: Searches two R-trees for all pairs elements whose bounding boxes overlap.
Parameter: treeA (RTree)
Parameter Summary: A first tree.
Parameter: treeB (RTree)
Parameter Summary: A second tree.
Parameter: tolerance (double)
Parameter Summary: If the distance between a pair of bounding boxes is less than tolerance, then callback is called.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: A callback event handler.

Method: Rhino.Geometry.RTree.Clear()
Return: void
Modifiers: public
Summary: Removes all elements.

Method: Rhino.Geometry.RTree.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.RTree.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.RTree.Insert(BoundingBox box, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(BoundingBox box, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Insert(Point2d point, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(Point2d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Insert(Point3d point, int elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Insert(Point3d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Inserts an element into the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Remove(BoundingBox box, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(BoundingBox box, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: box (BoundingBox)
Parameter Summary: A bounding box.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Remove(Point2d point, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point2d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(Point3d point, int elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (int)
Parameter Summary: A number.

Method: Rhino.Geometry.RTree.Remove(Point3d point, System.IntPtr elementId)
Return: bool
Modifiers: public
Summary: Removes an element from the tree.
Parameter: point (Point3d)
Parameter Summary: A point.
Parameter: elementId (System.IntPtr)
Parameter Summary: A pointer.

Method: Rhino.Geometry.RTree.Search(BoundingBox box, EventHandler<RTreeEventArgs> callback, object tag)
Return: bool
Modifiers: public
Summary: Searches for items in a bounding box.
The bounding box can be singular and contain exactly one single point. | Since: 5.0 | Parameter: box (BoundingBox) | Parameter Summary: A bounding box. | Parameter: callback (EventHandler<RTreeEventArgs>) | Parameter Summary: An event handler to be raised when items are found. | Parameter: tag (object) | Parameter Summary: State to be passed inside the <b>RTreeEventArgs</b> Tag property.

Method: Rhino.Geometry.RTree.Search(BoundingBox box, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public
Summary: Searches for items in a bounding box.
The bounding box can be singular and contain exactly one single point. | Since: 5.0 | Parameter: box (BoundingBox) | Parameter Summary: A bounding box. | Parameter: callback (EventHandler<RTreeEventArgs>) | Parameter Summary: An event handler to be raised when items are found.

Method: Rhino.Geometry.RTree.Search(Sphere sphere, EventHandler<RTreeEventArgs> callback, object tag)
Return: bool
Modifiers: public
Summary: Searches for items in a sphere.
Parameter: sphere (Sphere)
Parameter Summary: bounds used for searching.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: An event handler to be raised when items are found.
Parameter: tag (object)
Parameter Summary: State to be passed inside the <b>RTreeEventArgs</b> Tag property.

Method: Rhino.Geometry.RTree.Search(Sphere sphere, EventHandler<RTreeEventArgs> callback)
Return: bool
Modifiers: public
Summary: Searches for items in a sphere.
Parameter: sphere (Sphere)
Parameter Summary: bounds used for searching.
Parameter: callback (EventHandler<RTreeEventArgs>)
Parameter Summary: An event handler to be raised when items are found.

Class: Rhino.Geometry.RTreeEventArgs
Summary: Represents event data that is passed when an item that meets certain criteria is found and the passed RTree event is raised.

Property: Rhino.Geometry.RTreeEventArgs.Cancel
Return: bool
Modifiers: public
Summary: Gets or sets a value that determines if the search should be conducted farther.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.Id
Return: int
Modifiers: public
Summary: Gets the identifier of the found item.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdB
Return: int
Modifiers: public
Summary: If search is using two r-trees, IdB is element b in the search.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdBPtr
Return: IntPtr
Modifiers: public
Summary: If search is using two r-trees, IdB is the element b pointer in the search.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.IdPtr
Return: IntPtr
Modifiers: public
Summary: Gets the identifier pointer of the found item.
Accessors: get

Property: Rhino.Geometry.RTreeEventArgs.SearchBoundingBox
Return: BoundingBox
Modifiers: public
Summary: Bounding box bounds used during a search. You may modify the box in a search callback to help reduce the bounds to search.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.SearchSphere
Return: Sphere
Modifiers: public
Summary: Sphere bounds used during a search. You can modify the sphere in a search callback to help reduce the bounds to search.
Accessors: get set

Property: Rhino.Geometry.RTreeEventArgs.Tag
Return: object
Modifiers: public
Summary: Gets or sets an arbitrary object that can be attached to this event args. This object will "stick" through a single search and can represent user-defined state.
Accessors: get set

Class: Rhino.Geometry.ShrinkWrapParameters
Summary: Parameters for ShrinkWrap method

Constructor: Rhino.Geometry.ShrinkWrapParameters.ShrinkWrapParameters()
Summary: Initializes a new instance of the ShrinkWrapParameters class

Property: Rhino.Geometry.ShrinkWrapParameters.FillHolesInInputObjects
Return: bool
Modifiers: public
Summary: Any input meshes will have "Fill Holes" applied to them before volume creation This value is ignored when input objects are Point Clouds
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.InflateVerticesAndPoints
Return: bool
Modifiers: public
Summary: Inflate mesh vertices, points and point clouds Mesh vertices will be inflated as though the mesh were a point cloud
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.Offset
Return: double
Modifiers: public
Summary: Distance to offset outward or inward
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.PolygonOptimization
Return: int
Modifiers: public
Summary: 0 - 100 the percentage of optimization desired. Polygons will be reduced in areas of lower curvature Lower values result in better feature preservation at the cost of more polygons
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.SmoothingIterations
Return: int
Modifiers: public
Summary: Number of times to apply smoothing
Accessors: get set

Property: Rhino.Geometry.ShrinkWrapParameters.TargetEdgeLength
Return: double
Modifiers: public
Summary: The desired target edge length in document units Smaller values equal more mesh resolution at the expense of larger mesh sizes
Accessors: get set

Class: Rhino.Geometry.ShutLiningCurveInfo
Summary: Contains shutlining curve information. This is used in <b>Mesh.WithShutLining</b> .

Constructor: Rhino.Geometry.ShutLiningCurveInfo.ShutLiningCurveInfo(Curve curve, double radius, int profile, bool pull, bool isBump, IEnumerable<Interval> curveIntervals, bool enabled)
Summary: Creates a new instance of the ShutLining curve information class.

Property: Rhino.Geometry.ShutLiningCurveInfo.Curve
Return: Curve
Modifiers: public
Summary: The profile curve.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.CurveIntervals
Return: ReadOnlyCollection<Interval>
Modifiers: public
Summary: The parts of the curve to use as profiles.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Enabled
Return: bool
Modifiers: public
Summary: If true, this curve is active.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.IsBump
Return: bool
Modifiers: public
Summary: True if profile constitutes a bump. See Rhino's Help for more information.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Profile
Return: int
Modifiers: public
Summary: >The profile type.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Pull
Return: bool
Modifiers: public
Summary: True if the curve should be pulled.
Accessors: get

Property: Rhino.Geometry.ShutLiningCurveInfo.Radius
Return: double
Modifiers: public
Summary: The profile radius.
Accessors: get

Class: Rhino.Geometry.Silhouette
Summary: Information about silhouette curves that are generated from geometry (surfaces, brep faces, meshes)

Constructor: Rhino.Geometry.Silhouette.Silhouette()
Summary: Initializes a new instance of the Silhouette class

Property: Rhino.Geometry.Silhouette.Curve
Return: Curve
Modifiers: public
Summary: 3D curve representing the shape of the silhouette.
Accessors: get set

Property: Rhino.Geometry.Silhouette.GeometryComponentIndex
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index corresponding with this silhouette curve. This field is only set when the entire silhouette curve is part of some geometry component.
Accessors: get set

Property: Rhino.Geometry.Silhouette.SilhouetteType
Return: SilhouetteType
Modifiers: public
Summary: Gets the type of this silhouette curve.
Accessors: get set

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Point3d perspectiveCameraLocation, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a perspective projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: perspectiveCameraLocation (Point3d)
Parameter Summary: Location of perspective camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Point3d perspectiveCameraLocation, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a perspective projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: perspectiveCameraLocation (Point3d)
Parameter Summary: Location of perspective camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Vector3d parallelCameraDirection, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a parallel projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: parallelCameraDirection (Vector3d)
Parameter Summary: Direction of parallel camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, Vector3d parallelCameraDirection, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a parallel projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: parallelCameraDirection (Vector3d)
Parameter Summary: Direction of parallel camera.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, ViewportInfo viewport, double tolerance, double angleToleranceRadians, IEnumerable<Plane> clippingPlanes, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a specified projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: viewport (ViewportInfo)
Parameter Summary: Projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: clippingPlanes (IEnumerable<Plane>)
Parameter Summary: Optional collection of clipping planes.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.Compute(GeometryBase geometry, SilhouetteType silhouetteType, ViewportInfo viewport, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Compute silhouettes of a shape for a specified projection.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: silhouetteType (SilhouetteType)
Parameter Summary: Types of silhouette to compute.
Parameter: viewport (ViewportInfo)
Parameter Summary: Projection.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Method: Rhino.Geometry.Silhouette.ComputeDraftCurve(GeometryBase geometry, double draftAngle, Vector3d pullDirection, double tolerance, double angleToleranceRadians, System.Threading.CancellationToken cancelToken)
Return: Silhouette[]
Modifiers: public, static
Summary: Computes draft curve silhouettes of a shape.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians. Draft angle can be a positive or negative value.
Parameter: pullDirection (Vector3d)
Parameter Summary: 3d direction for the mold to be pulled in, directed away from the object.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.
Parameter: cancelToken (System.Threading.CancellationToken)
Parameter Summary: Computation cancellation token.

Method: Rhino.Geometry.Silhouette.ComputeDraftCurve(GeometryBase geometry, double draftAngle, Vector3d pullDirection, double tolerance, double angleToleranceRadians)
Return: Silhouette[]
Modifiers: public, static
Summary: Computes draft curve silhouettes of a shape.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry whose silhouettes need to be computed. Can be Brep, BrepFace, Mesh, or Extrusion.
Parameter: draftAngle (double)
Parameter Summary: The draft angle in radians. Draft angle can be a positive or negative value.
Parameter: pullDirection (Vector3d)
Parameter Summary: 3d direction for the mold to be pulled in, directed away from the object.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for determining projecting relationships. Surfaces and curves that are closer than tolerance, may be treated as projecting. When in doubt use RhinoDoc.ModelAbsoluteTolerance.
Parameter: angleToleranceRadians (double)
Parameter Summary: Angular tolerance to use for determining projecting relationships. A surface normal N that satisfies N o cameraDirection < Sin(angleToleranceRadians) may be considered projecting. When in doubt use RhinoDoc.ModelAngleToleranceRadians.

Class: Rhino.Geometry.SpaceMorph
Summary: Represents a spacial, Euclidean morph.

Constructor: Rhino.Geometry.SpaceMorph.SpaceMorph()
Summary: Initializes a new instance of the SpaceMorph class

Property: Rhino.Geometry.SpaceMorph.PreserveStructure
Return: bool
Modifiers: public
Summary: True if the morph should be done in a way that preserves the structure of the geometry. In particular, for NURBS objects, True means that only the control points are moved. The PreserveStructure value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.SpaceMorph.QuickPreview
Return: bool
Modifiers: public
Summary: True if the morph should be done as quickly as possible because the result is being used for some type of dynamic preview. If QuickPreview is true, the tolerance may be ignored. The QuickPreview value does not affect the way meshes and points are morphed. The default is false.
Accessors: get set

Property: Rhino.Geometry.SpaceMorph.Tolerance
Return: double
Modifiers: public
Summary: The desired accuracy of the morph. This value is primarily used for deforming surfaces and breps. The default is 0.0 and any value <= 0.0 is ignored by morphing functions. The Tolerance value does not affect the way meshes and points are morphed.
Accessors: get set

Method: Rhino.Geometry.SpaceMorph.IsMorphable(GeometryBase geometry)
Return: bool
Modifiers: public, static
Summary: True if the geometry can be morphed by calling SpaceMorph.Morph(geometry)

Method: Rhino.Geometry.SpaceMorph.Morph(GeometryBase geometry)
Return: bool
Modifiers: public
Summary: Apply the space morph to geometry.
Parameter: geometry (GeometryBase)
Parameter Summary: Geometry to morph.

Method: Rhino.Geometry.SpaceMorph.Morph(ref Plane plane)
Return: bool
Modifiers: public
Summary: Apply the space morph to a plane.
Parameter: plane (Plane)
Parameter Summary: Plane to morph.

Method: Rhino.Geometry.SpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, abstract
Summary: Morphs an Euclidean point.
This method is abstract. | Since: 5.0 | Parameter: point (Point3d) | Parameter Summary: A point that will be morphed by this function.

Class: Rhino.Geometry.Squisher
Summary: class used to wrap Squish functions

Constructor: Rhino.Geometry.Squisher.Squisher()
Summary: constructs a squisher with default parameters

Method: Rhino.Geometry.Squisher.Is2dPatternSquished(GeometryBase geometry)
Return: bool
Modifiers: public, static
Summary: Returns True if the input geometry was the result of a squish operation

Method: Rhino.Geometry.Squisher.SquishBack2dMarks(GeometryBase squishedGeometry, IEnumerable<GeometryBase> marks)
Return: IEnumerable<GeometryBase>
Modifiers: public, static
Summary: Maps 2D geometry from the squished surface or mesh back to the original 3D surface or mesh
Parameter: squishedGeometry (GeometryBase)
Parameter Summary: The squished surface or mesh
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: The input 2D geometry

Method: Rhino.Geometry.Squisher.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Squisher.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Squisher.Get2dMesh()
Return: Mesh
Modifiers: public
Summary: Get the 2d mesh that results from the squish operation

Method: Rhino.Geometry.Squisher.Get3dMesh()
Return: Mesh
Modifiers: public
Summary: Get the 3d mesh that was used for squish operation

Method: Rhino.Geometry.Squisher.GetAreaConstrainedTrianglesIndices()
Return: MeshFace[]
Modifiers: public
Summary: Gets mesh vertex indices for the triangular faces that were constrained during the squish. Indices can be used in both the 2d and 3d mesh vertices arrays.

Method: Rhino.Geometry.Squisher.GetLengthConstrained2dLines()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 2d mesh. The line at any index here corresponds to the same line in GetLengthConstrained3dLines.

Method: Rhino.Geometry.Squisher.GetLengthConstrained3dLines()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 3d mesh. The line at any index here corresponds to the same line in GetLengthConstrained2dLines.

Method: Rhino.Geometry.Squisher.GetMesh2dEdges()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 2d mesh. The line at any index here corresponds to the same line in GetLengthConstrained3dLines.

Method: Rhino.Geometry.Squisher.GetMesh3dEdges()
Return: Line[]
Modifiers: public
Summary: Gets lines at the position of the mesh edges and diagonals that were constrained during the squish, in the 3d mesh. The line at any index here corresponds to the same line in GetLengthConstrained2dLines.

Method: Rhino.Geometry.Squisher.SquishCurve(Curve curve)
Return: PolylineCurve
Modifiers: public
Summary: Maps a curve on or near a previously squished 3d surface to the resulting 2d surface
Parameter: curve (Curve)
Parameter Summary: The curve to squish

Method: Rhino.Geometry.Squisher.SquishMesh(SquishParameters sp, Mesh mesh3d, IEnumerable<GeometryBase> marks, List<GeometryBase> squished_marks_out)
Return: Mesh
Modifiers: public
Summary: Squish the given mesh into a flat mesh
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: mesh3d (Mesh)
Parameter Summary: The mesh to squish
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: Points, Curves, PoiuntClouds, and TextDots to squish. Can be null.
Parameter: squished_marks_out (List<GeometryBase>)
Parameter Summary: The squished marks. If a mark fails to squish, it will have a None entry in the list.

Method: Rhino.Geometry.Squisher.SquishMesh(SquishParameters sp, Mesh mesh3d)
Return: Mesh
Modifiers: public
Summary: Squish the given mesh into a flat mesh
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: mesh3d (Mesh)
Parameter Summary: The mesh to squish

Method: Rhino.Geometry.Squisher.SquishPoint(Point3d point, out Point3d squishedPoint)
Return: bool
Modifiers: public
Summary: Maps a point on or near the previously squished 3d surface to the flattened surface
Parameter: point (Point3d)
Parameter Summary: The point to squish
Parameter: squishedPoint (Point3d)
Parameter Summary: The squished point

Method: Rhino.Geometry.Squisher.SquishSurface(SquishParameters sp, Surface surface, IEnumerable<GeometryBase> marks, List<GeometryBase> squished_marks_out)
Return: Brep
Modifiers: public
Summary: Squish the surface into a flat brep
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: surface (Surface)
Parameter Summary: The surface to be squished
Parameter: marks (IEnumerable<GeometryBase>)
Parameter Summary: Point, PountCloud, TextDot, and Curve objects to squish. Can be null.
Parameter: squished_marks_out (List<GeometryBase>)
Parameter Summary: A list of the squished marks, with None entries for marks that fail to squish. Can be null.

Method: Rhino.Geometry.Squisher.SquishSurface(SquishParameters sp, Surface surface)
Return: Brep
Modifiers: public
Summary: Squish the surface into a flat brep
Parameter: sp (SquishParameters)
Parameter Summary: The parameters for the squish operation
Parameter: surface (Surface)
Parameter Summary: The surface to be squished

Method: Rhino.Geometry.Squisher.SquishTextDot(TextDot textDot)
Return: TextDot
Modifiers: public
Summary: Maps a TextDot on or near a previously squished 3d surface to the resulting 2d surface
Parameter: textDot (TextDot)
Parameter Summary: The text dot to squish

Class: Rhino.Geometry.SquishParameters
Summary: Parameters used by the 'Squish' command flattening algorithm

Constructor: Rhino.Geometry.SquishParameters.SquishParameters()
Summary: Initializes a new instance with default values. Initial values are same as Default.

Property: Rhino.Geometry.SquishParameters.Default
Return: SquishParameters
Modifiers: public, static
Summary: Gets the default Squishing parameters
Accessors: get

Property: Rhino.Geometry.SquishParameters.AbsoluteLimit
Return: double
Modifiers: public
Summary: If -1.0 <= AnsoluteLimit < 0.0, then then an absolute compression limit is applied so that (2d length)/(3d length) >= abs(AbsoluteLimit). In particular, Absolute = -1.0, then no compression is permitted(2d length) >= (3d length). If 0.0 < m_absolute_limit <= 1.0 then then an absolute stretching limit is applied so that (2d length)/(3d length) <= 1/abs(AbsoluteLimit). Examples: AbsoluteLimit 1.0: no stretching, (2d length) <= 1.0*(3d length) 0.5: cap on stretching, 0.5*(2d length) <= (3d length) -0.5: cap on compression, (2d length) >= 0.5*(3d length) -1.0: no compression, (2d length) >= 1.0*(3d length)
Accessors: get set

Property: Rhino.Geometry.SquishParameters.Algorithm
Return: SquishFlatteningAlgorithm
Modifiers: public
Summary: The flattening algorithm to use: Geometric: (scale independent)the "spring" constant is proportional to 1/L^2 and the result is independent of scale. PhysicalStress: (scale dependent) the "spring" constant is proportional to 1/L.
Accessors: get set

Property: Rhino.Geometry.SquishParameters.BoundaryCompressConstant
Return: double
Modifiers: public
Summary: Spring constant for compressed boundary edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.BoundaryStretchConstant
Return: double
Modifiers: public
Summary: Spring constant for stretched boundary edges
Accessors: get set

Property: Rhino.Geometry.SquishParameters.InteriorCompressConstant
Return: double
Modifiers: public
Summary: Spring constant for compressed interior edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.InteriorStretchConstant
Return: double
Modifiers: public
Summary: Spring constant for stretched boundary edges times the rest length
Accessors: get set

Property: Rhino.Geometry.SquishParameters.PreserveTopology
Return: bool
Modifiers: public
Summary: the mesh has coincident vertices and PreserveTopology is true, then the flattening is based on the mesh's topology and coincident vertices will remain coincident. Otherwise coincident vertices are free to move apart.
Accessors: get set

Property: Rhino.Geometry.SquishParameters.SaveMapping
Return: bool
Modifiers: public
Summary: If SaveMapping is true, then ON_SquishMesh() will save extra information on the squished mesh so 3d points and curves near the input mesh can be mapped to the squished mesh and 2d points and curves on the squished mesh can be mapped back to the 3d mesh.
Accessors: get set

Method: Rhino.Geometry.SquishParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SquishParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SquishParameters.GetSpringConstants(out double boundaryBias, out double deformationBias)
Return: bool
Modifiers: public
Summary: See if the spring constants could have been set with SetSpringConstants().
Parameter: boundaryBias (double)
Parameter Summary: boundary_bias: 0.0 to 1.0 0.0: boundary and interior treated the same 1.0: strongest bias to preserving boundary lengths at the expense of interior distortion.
Parameter: deformationBias (double)
Parameter Summary: deformation_bias: -1.0 to 1.0 -1.0: strongest bias in favor of compression. 0.0: no preference between compression and stretching 1.0: strongest bias in favor of stretching

Method: Rhino.Geometry.SquishParameters.SetDeformation(SquishDeformation deformation, bool bPreserveBoundary, double boundaryStretchConstant, double boundaryCompressConstant, double interiorStretchConstant, double interiorCompressConstant)
Return: void
Modifiers: public
Summary: Sets the squish deformation characteristics

Method: Rhino.Geometry.SquishParameters.SetSpringConstants(double boundaryBias, double deformationBias)
Return: void
Modifiers: public
Summary: A simplified interface for setting the Stretch and Compression spring constants
Parameter: boundaryBias (double)
Parameter Summary: boundary_bias: 0.0 to 1.0 0.0: boundary and interior treated the same 1.0: strongest bias to preserving boundary lengths at the expense of interior distortion.
Parameter: deformationBias (double)
Parameter Summary: deformation_bias: -1.0 to 1.0 -1.0: strongest bias in favor of compression. 0.0: no preference between compression and stretching 1.0: strongest bias in favor of stretching

Class: Rhino.Geometry.SubD
Summary: Subdivision surface

Constructor: Rhino.Geometry.SubD.SubD()
Summary: Create a new instance of SubD geometry

Constructor: Rhino.Geometry.SubD.SubD(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Property: Rhino.Geometry.SubD.Empty
Return: SubD
Modifiers: public, static
Summary: Get a new, empty SubD object.
Accessors: get

Property: Rhino.Geometry.SubD.Edges
Return: SubDEdgeList
Modifiers: public
Summary: All edges in this SubD
Accessors: get

Property: Rhino.Geometry.SubD.Faces
Return: SubDFaceList
Modifiers: public
Summary: All faces in this SubD
Accessors: get

Property: Rhino.Geometry.SubD.IsSolid
Return: bool
Modifiers: public
Summary: Test SubD to see if the active level is a solid. A "solid" is a closed oriented manifold, or a closed oriented manifold.
Accessors: get

Property: Rhino.Geometry.SubD.Vertices
Return: SubDVertexList
Modifiers: public
Summary: All vertices in this SubD
Accessors: get

Method: Rhino.Geometry.SubD.CreateFromCylinder(Cylinder cylinder, uint circumferenceFaceCount, uint heightFaceCount, SubDEndCapStyle endCapStyle, SubDEdgeTag endCapEdgeTag, SubDComponentLocation radiusLocation)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD form of a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: The defining cylinder.
Parameter: circumferenceFaceCount (uint)
Parameter Summary: Number of faces around the cylinder.
Parameter: heightFaceCount (uint)
Parameter Summary: Number of faces in the top-to-bottom direction.
Parameter: endCapStyle (SubDEndCapStyle)
Parameter Summary: The end cap style.
Parameter: endCapEdgeTag (SubDEdgeTag)
Parameter Summary: The end cap edge tag.
Parameter: radiusLocation (SubDComponentLocation)
Parameter Summary: The SubD component location.

Method: Rhino.Geometry.SubD.CreateFromLoft(IEnumerable<NurbsCurve> curves, bool closed, bool addCorners, bool addCreases, int divisions)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD lofted through shape curves.
Parameter: curves (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to loft through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the lofting direction. Must have three or more shape curves.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.
Parameter: addCreases (bool)
Parameter Summary: With kinked curves, adds creased edges to the SubD along the kinks.
Parameter: divisions (int)
Parameter Summary: The segment number between adjacent input curves.

Method: Rhino.Geometry.SubD.CreateFromMesh(Mesh mesh, SubDCreationOptions options)
Return: SubD
Modifiers: public, static
Summary: Create a new SubD from a mesh.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.
Parameter: options (SubDCreationOptions)
Parameter Summary: The SubD creation options.

Method: Rhino.Geometry.SubD.CreateFromMesh(Mesh mesh)
Return: SubD
Modifiers: public, static
Summary: Create a new SubD from a mesh.
Parameter: mesh (Mesh)
Parameter Summary: The input mesh.

Method: Rhino.Geometry.SubD.CreateFromSurface(Surface surface, SubDFromSurfaceMethods method, bool corners)
Return: SubD
Modifiers: public, static
Summary: Create a SubD that approximates the surface. If the surface is a SubD friendly NURBS surface and withCorners is true, then the SubD and input surface will have the same geometry.
Parameter: surface (Surface)
Parameter Summary: 
Parameter: method (SubDFromSurfaceMethods)
Parameter Summary: Selects the method used to calculate the SubD.
Parameter: corners (bool)
Parameter Summary: If the surface is open, then the corner vertices with be tagged as VertexTagCorner. This makes the resulting SubD have sharp corners to match the appearance of the input surface.

Method: Rhino.Geometry.SubD.CreateFromSweep(NurbsCurve rail1, IEnumerable<NurbsCurve> shapes, bool closed, bool addCorners, bool roadlikeFrame, Vector3d roadlikeNormal)
Return: SubD
Modifiers: public, static
Summary: Fits a SubD through a series of profile curves that define the SubD cross-sections and one curve that defines a SubD edge.
Parameter: rail1 (NurbsCurve)
Parameter Summary: A SubD-friendly NURBS curve to sweep along.
Parameter: shapes (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to sweep through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the rail curve direction.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.
Parameter: roadlikeFrame (bool)
Parameter Summary: Determines how sweep frame rotations are calculated. If False (Freeform), frame are propagated based on a reference direction taken from the rail curve curvature direction. If True (Roadlike), frame rotations are calculated based on a vector supplied in "roadlikeNormal" and the world coordinate system.
Parameter: roadlikeNormal (Vector3d)
Parameter Summary: If roadlikeFrame = true, provide 3D vector used to calculate the frame rotations for sweep shapes. If roadlikeFrame = false, then pass <b> Vector3d.Unset</b> .

Method: Rhino.Geometry.SubD.CreateFromSweep(NurbsCurve rail1, NurbsCurve rail2, IEnumerable<NurbsCurve> shapes, bool closed, bool addCorners)
Return: SubD
Modifiers: public, static
Summary: Fits a SubD through a series of profile curves that define the SubD cross-sections and two curves that defines SubD edges.
Parameter: rail1 (NurbsCurve)
Parameter Summary: The first SubD-friendly NURBS curve to sweep along.
Parameter: rail2 (NurbsCurve)
Parameter Summary: The second SubD-friendly NURBS curve to sweep along.
Parameter: shapes (IEnumerable<NurbsCurve>)
Parameter Summary: An enumeration of SubD-friendly NURBS curves to sweep through.
Parameter: closed (bool)
Parameter Summary: Creates a SubD that is closed in the rail curve direction.
Parameter: addCorners (bool)
Parameter Summary: With open curves, adds creased vertices to the SubD at both ends of the first and last curves.

Method: Rhino.Geometry.SubD.CreateGlobeSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint axialFaceCount, uint equatorialFaceCount)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from polar triangle fans and bands of quads. The result resembles a globe with triangle fans at the poles and the edges forming latitude parallels and longitude meridians.
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: axialFaceCount (uint)
Parameter Summary: Number of faces along the sphere's meridians. (axialFaceCount >= 2) For example, if you wanted each face to span 30 degrees of latitude, you would pass 6 (=180 degrees/30 degrees) for axialFaceCount.
Parameter: equatorialFaceCount (uint)
Parameter Summary: Number of faces around the sphere's parallels. (equatorialFaceCount >= 3) For example, if you wanted each face to span 30 degrees of longitude, you would pass 12 (=360 degrees/30 degrees) for equatorialFaceCount.

Method: Rhino.Geometry.SubD.CreateIcosahedron(Sphere sphere, SubDComponentLocation vertexLocation)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere based on an icosohedron (20 triangular faces and 5 valent vertices). This is a goofy topology for a Catmull-Clark subdivision surface (all triangles, all vertices have 5 edges). You may want to consider using the much behaved result from CreateSubDQuadSphere(sphere, vertexLocation, 1) or even the result from CreateSubDGlobeSphere().
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.

Method: Rhino.Geometry.SubD.CreateQuadSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint quadSubdivisionLevel)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from quad faces.
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: quadSubdivisionLevel (uint)
Parameter Summary: The resulting sphere will have 6*4^subdivision level quads. (0 for 6 quads, 1 for 24 quads, 2 for 96 quads, ...).

Method: Rhino.Geometry.SubD.CreateTriSphere(Sphere sphere, SubDComponentLocation vertexLocation, uint triSubdivisionLevel)
Return: SubD
Modifiers: public, static
Summary: Creates a SubD sphere made from triangular faces. This is a goofy topology for a Catmull-Clark subdivision surface (all triangles and all vertices have 5 or 6 edges). You may want to consider using the much behaved result from CreateSubDQuadSphere() or even the result from CreateSubDGlobeSphere().
Parameter: sphere (Sphere)
Parameter Summary: Location, size and orientation of the sphere.
Parameter: vertexLocation (SubDComponentLocation)
Parameter Summary: If vertexLocation = SubDComponentLocation::ControlNet, then the control net points will be on the surface of the sphere. Otherwise the limit surface points will be on the sphere.
Parameter: triSubdivisionLevel (uint)
Parameter Summary: The resulting sphere will have 20*4^subdivision level triangles. (0 for 20 triangles, 1 for 80 triangles, 2 for 320 triangles, ...).

Method: Rhino.Geometry.SubD.JoinSubDs(IEnumerable<SubD> subdsToJoin, double tolerance, bool joinedEdgesAreCreases, bool preserveSymmetry)
Return: SubD[]
Modifiers: public, static
Summary: Joins an enumeration of SubDs to form as few as possible resulting SubDs. There may be more than one SubD in the result array.
Parameter: subdsToJoin (IEnumerable<SubD>)
Parameter Summary: An enumeration of SubDs to join.
Parameter: tolerance (double)
Parameter Summary: The join tolerance.
Parameter: joinedEdgesAreCreases (bool)
Parameter Summary: If true, merged boundary edges will be creases. If false, merged boundary edges will be smooth.
Parameter: preserveSymmetry (bool)
Parameter Summary: If true, and if all inputs share the same symmetry, the output will also be symmetrical wrt. that symmetry. If false, or True but no common symmetry exists, symmetry information is removed from all newly joined SubDs.

Method: Rhino.Geometry.SubD.JoinSubDs(IEnumerable<SubD> subdsToJoin, double tolerance, bool joinedEdgesAreCreases)
Return: SubD[]
Modifiers: public, static
Summary: Joins an enumeration of SubDs to form as few as possible resulting SubDs. There may be more than one SubD in the result array.
Parameter: subdsToJoin (IEnumerable<SubD>)
Parameter Summary: An enumeration of SubDs to join.
Parameter: tolerance (double)
Parameter Summary: The join tolerance.
Parameter: joinedEdgesAreCreases (bool)
Parameter Summary: If true, merged boundary edges will be creases. If false, merged boundary edges will be smooth.

Method: Rhino.Geometry.SubD.ClearEvaluationCache()
Return: void
Modifiers: public
Summary: Clear all cached evaluation information (meshes, surface points, bounding boxes, ...) that depends on edge tags, vertex tags, and the location of vertex control points.

Method: Rhino.Geometry.SubD.ComponentFromComponentIndex(ComponentIndex componentIndex)
Return: SubDComponent
Modifiers: public
Summary: Returns a SubDComponent, either a SubDEdge, SubDFace, or SubDVertex, from a component index.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: The component index.

Method: Rhino.Geometry.SubD.CopyEvaluationCache(in SubD src)
Return: bool
Modifiers: public
Summary: Expert function that copies cached evaluations of component subdivision points and limit surface information from src to this. Typically this is done for performance critical situations like control point editing: - Copy a SubD to be modified (this does not copy the evaluation cache) - Copy the evaluation cache from the unmodified SubD - Modify the SubD copy - Update the surface mesh cache so that only the modified parts are recalculated - Display, meshing, bounding boxes on the modified SubD are now available
Parameter: src (SubD)
Parameter Summary: The SubD from which to copy cached evaluations

Method: Rhino.Geometry.SubD.Dispose(bool disposing)
Return: void
Modifiers: protected, override
Summary: Deletes the underlying native pointer during a Dispose call or GC collection

Method: Rhino.Geometry.SubD.DuplicateEdgeCurves()
Return: Curve[]
Modifiers: public
Summary: Gets Nurbs form of all edges in this SubD, with clamped knots. NB: Does not update the SubD evaluation cache before getting the edges.

Method: Rhino.Geometry.SubD.DuplicateEdgeCurves(bool boundaryOnly, bool interiorOnly, bool smoothOnly, bool sharpOnly, bool creaseOnly, bool clampEnds)
Return: Curve[]
Modifiers: public
Summary: Gets Nurbs form of edges in this SubD. NB: Does not update the SubD evaluation cache before getting the edges.
Parameter: boundaryOnly (bool)
Parameter Summary: If true, then only the boundary edges are duplicated. If false, then all edges are duplicated. If both boundaryOnly and interiorOnly are true, an empty array is returned.
Parameter: interiorOnly (bool)
Parameter Summary: If true, then only the interior edges are duplicated. If false, then all edges are duplicated. Note: interior edges with faces of different orientations are also returned. If both boundaryOnly and interiorOnly are true, an empty array is returned.
Parameter: smoothOnly (bool)
Parameter Summary: If true, then only the smooth (and not sharp) edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: sharpOnly (bool)
Parameter Summary: If true, then only the sharp edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: creaseOnly (bool)
Parameter Summary: If true, then only the creased edges are duplicated. If false, then all edges are duplicated. If both smoothOnly and sharpOnly and creaseOnly are true, an empty array is returned.
Parameter: clampEnds (bool)
Parameter Summary: If true, the end knots are clamped. Otherwise the end knots are(-2,-1,0,...., k1, k1+1, k1+2).

Method: Rhino.Geometry.SubD.Flip()
Return: bool
Modifiers: public
Summary: Reverses the orientation of all SubD normals.

Method: Rhino.Geometry.SubD.InterpolateSurfacePoints(Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Modifies the SubD so that the SubD vertex limit surface points are equal to surface_points[]
Parameter: surfacePoints (Point3d[])
Parameter Summary: Points for limit surface to interpolate. surface_points[i] is the location for the i-th vertex returned by SubVertexIterator vit(this)

Method: Rhino.Geometry.SubD.InterpolateSurfacePoints(uint vertexIndices, Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Modifies the SubD so that the SubD vertex limit surface points of the listed vertices are equal to surface_points[].
Parameter: vertexIndices (uint)
Parameter Summary: Ids of the vertices to interpolate. Other vertices remain fixed.
Parameter: surfacePoints (Point3d[])
Parameter Summary: Points for limit surface to interpolate. surface_points[i] is the location for the vertex returned by this.Vertices.Find(vertexIndices[i]).

Method: Rhino.Geometry.SubD.MergeAllCoplanarFaces(double tolerance, double angleTolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance, in radians, for determining when faces are parallel. When in doubt, use the document's ModelAngleToleranceRadians property.

Method: Rhino.Geometry.SubD.MergeAllCoplanarFaces(double tolerance)
Return: bool
Modifiers: public
Summary: Merges adjacent coplanar faces into single faces.
Parameter: tolerance (double)
Parameter Summary: Tolerance for determining when edges are adjacent. When in doubt, use the document's ModelAbsoluteTolerance property.

Method: Rhino.Geometry.SubD.NonConstOperation()
Return: void
Modifiers: protected, override
Summary: Destroy cache handle

Method: Rhino.Geometry.SubD.Offset(double distance, bool solidify)
Return: SubD
Modifiers: public
Summary: Makes a new SubD with vertices offset at distance in the direction of the control net vertex normals. Optionally, based on the value of solidify, adds the input SubD and a ribbon of faces along any naked edges.
Parameter: distance (double)
Parameter Summary: The distance to offset.
Parameter: solidify (bool)
Parameter Summary: True if the output SubD should be turned into a closed SubD.

Method: Rhino.Geometry.SubD.OnSwitchToNonConst()
Return: void
Modifiers: protected, override
Summary: Called when this object switches from being considered "owned by the document" to being an independent instance.

Method: Rhino.Geometry.SubD.PackFaces()
Return: uint
Modifiers: public
Summary: Resets the SubD to the default face packing if adding creases or deleting faces breaks the quad grids. It does not change the topology or geometry of the SubD. SubD face packs always stop at creases.

Method: Rhino.Geometry.SubD.SetVertexSurfacePoint(uint vertexIndex, Point3d surfacePoint)
Return: bool
Modifiers: public
Summary: Set the location of a single vertex surface point. This function is not suitable for setting the locations of multiple vertex surface points that are topologically near to each other.
Parameter: vertexIndex (uint)
Parameter Summary: Index of the vertex to modify
Parameter: surfacePoint (Point3d)
Parameter Summary: New surface point location for that vertex

Method: Rhino.Geometry.SubD.Subdivide()
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.

Method: Rhino.Geometry.SubD.Subdivide(IEnumerable<int> faceIndices)
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: Indices of the faces to subdivide.

Method: Rhino.Geometry.SubD.Subdivide(int count)
Return: bool
Modifiers: public
Summary: Apply the Catmull-Clark subdivision algorithm and save the results in this SubD.
Parameter: count (int)
Parameter Summary: Number of times to subdivide (must be greater than 0)

Method: Rhino.Geometry.SubD.SurfaceMeshCacheExists(bool bTextureCoordinatesExist, bool bCurvaturesExist, bool bColorsExist)
Return: bool
Modifiers: public
Summary: Checks that a surface mesh evaluation cache exists, and that it has the required options. This cache is used by - <b>SubDVertex.SurfacePoint()</b> , - <b>SubDEdge.ToNurbsCurve(bool)</b> , and - <b>Mesh.CreateFromSubD(SubD, int)</b> .
Parameter: bTextureCoordinatesExist (bool)
Parameter Summary: If True, the cache must contain texture coordinates information.
Parameter: bCurvaturesExist (bool)
Parameter Summary: If True, the cache must contain curvature information.
Parameter: bColorsExist (bool)
Parameter Summary: If True, the cache must contain color information.

Method: Rhino.Geometry.SubD.ToBrep()
Return: Brep
Modifiers: public
Summary: Create a Brep based on this SubD geometry, based on SubDToBrepOptions.Default options.

Method: Rhino.Geometry.SubD.ToBrep(SubDToBrepOptions options)
Return: Brep
Modifiers: public
Summary: Create a Brep based on this SubD geometry.
Parameter: options (SubDToBrepOptions)
Parameter Summary: The SubD to Brep conversion options. Use SubDToBrepOptions.Default for sensible defaults. Currently, these return unpacked faces and locally-G1 vertices in the output Brep.

Method: Rhino.Geometry.SubD.TransformComponents(IEnumerable<ComponentIndex> components, Transform xform, SubDComponentLocation componentLocation)
Return: uint
Modifiers: public
Summary: Transforms an enumerable of SubD components.
Parameter: components (IEnumerable<ComponentIndex>)
Parameter Summary: The SubD components to transform.
Parameter: xform (Transform)
Parameter Summary: The transformation to apply.
Parameter: componentLocation (SubDComponentLocation)
Parameter Summary: Select between applying the transform to the control net (faster) or the surface points (slower).

Method: Rhino.Geometry.SubD.UpdateAllTagsAndSectorCoefficients()
Return: uint
Modifiers: public
Summary: Updates vertex tag, edge tag, and edge coefficient values on the active level. After completing custom editing operations that modify the topology of the SubD control net or changing values of vertex or edge tags, the tag and sector coefficients information on nearby components in the edited areas need to be updated.

Method: Rhino.Geometry.SubD.UpdateSurfaceMeshCache(bool lazyUpdate)
Return: uint
Modifiers: public
Summary: Updates limit surface information returned by - <b>SubDVertex.SurfacePoint()</b> , - <b>SubDEdge.ToNurbsCurve(bool)</b> , and - <b>Mesh.CreateFromSubD(SubD, int)</b> . The density of the mesh cache is <b>SubDDisplayParameters.Default</b> .
Parameter: lazyUpdate (bool)
Parameter Summary: If false, all information is updated. If true, only missing information is updated. If a relatively small subset of a SubD has been modified and care was taken to mark cached subdivision information as stale, then passing True can substantially improve performance.

Class: Rhino.Geometry.SubDComponent
Summary: A part of SubD geometry. Common base class for vertices, faces, and edges

Property: Rhino.Geometry.SubDComponent.Id
Return: uint
Modifiers: public
Summary: Unique id within the parent SubD for this item
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsDamaged
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is damaged.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsDeleted
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is deleted.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsHidden
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is hidden.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsHighlighted
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is highlighted.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsLocked
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is locked.
Accessors: get

Property: Rhino.Geometry.SubDComponent.IsSelected
Return: bool
Modifiers: public
Summary: Returns True if the SubD component is selected.
Accessors: get

Property: Rhino.Geometry.SubDComponent.ParentSubD
Return: SubD
Modifiers: public
Summary: SubD that this component belongs to
Accessors: get

Class: Rhino.Geometry.SubDCreationOptions
Summary: Options used for creating a SubD

Constructor: Rhino.Geometry.SubDCreationOptions.SubDCreationOptions()
Summary: Create default options

Property: Rhino.Geometry.SubDCreationOptions.ConvexAndConcaveCornersAndInteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Look for convex corners at sub-D vertices with 2 edges or fewer that have an included angle ≤ 120 degrees. Look for concave corners at sub-D vertices with 3 edges or more that have an included angle ≥ 240 degrees.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.ConvexCornersAndInteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Look for convex corners at sub-D vertices with 2 edges or fewer that have an included angle ≤ 120 degrees.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.InteriorCreases
Return: SubDCreationOptions
Modifiers: public, static
Summary: Create an interior sub-D crease along all input mesh double edges
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.Smooth
Return: SubDCreationOptions
Modifiers: public, static
Summary: No interior creases and no corners.
Accessors: get

Property: Rhino.Geometry.SubDCreationOptions.ConcaveCornerTest
Return: ConcaveCornerOption
Modifiers: public
Summary: Get or sets the concave corner test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.ConvexCornerTest
Return: ConvexCornerOption
Modifiers: public
Summary: Get or sets the convex corner test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.InteriorCreaseTest
Return: InteriorCreaseOption
Modifiers: public
Summary: Get or sets the interior crease test option.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.InterpolateMeshVertices
Return: bool
Modifiers: public
Summary: If false, input mesh vertex locations will be used to set SubD vertex control net locations. If true, input mesh vertex locations will be used to set SubD vertex limit surface locations.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerAngleRadians
Return: double
Modifiers: public
Summary: If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is <= MaximumConvexCornerEdgeCount edges and the corner angle is <= MaximumConvexCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MaximumConvexCornerEdgeCount
Return: uint
Modifiers: public
Summary: If ConvexCornerTest == ConvexCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is <= MaximumConvexCornerEdgeCount edges and the corner angle is <= MaximumConvexCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerAngleRadians
Return: double
Modifiers: public
Summary: If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is >= MinimumConcaveCornerEdgeCount edges and the corner angle is >= MinimumConcaveCornerAngleRadians.
Accessors: get set

Property: Rhino.Geometry.SubDCreationOptions.MinimumConcaveCornerEdgeCount
Return: uint
Modifiers: public
Summary: If ConcaveCornerTest == ConcaveCornerOption.AtMeshCorner, then an input mesh boundary vertex becomes a SubD corner when the number of edges that end at the vertex is >= MinimumConcaveCornerEdgeCount edges and the corner angle is >= MinimumConcaveCornerAngleRadians.
Accessors: get set

Method: Rhino.Geometry.SubDCreationOptions.Dispose()
Return: void
Modifiers: public
Summary: Delete unmanaged pointer for this

Class: Rhino.Geometry.SubDDisplayParameters
Summary: A collection of parameters that are passed to functions that calculate a various representations of SubD objects.

Constructor: Rhino.Geometry.SubDDisplayParameters.SubDDisplayParameters()
Summary: Initializes a new instance with default values.

Constructor: Rhino.Geometry.SubDDisplayParameters.SubDDisplayParameters(SerializationInfo info, StreamingContext context)
Summary: Called by BinaryFormatter.Deserialize to create a new MeshParamaters object.

Property: Rhino.Geometry.SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum
Return: uint
Modifiers: public, static
Summary: When the SubD display density is adaptive (default), AdaptiveMeshQuadMaximum specifies the approximate number of display mesh quads to permit before reducing the SubD display mesh density.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAbsolute
Return: bool
Modifiers: public
Summary: True if the SubD display density setting is absolute.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.DisplayDensityIsAdaptive
Return: bool
Modifiers: public
Summary: True if the SubD display density setting is adaptive and approximate display mesh quad count is capped at SubDDisplayParameters::AdaptiveDisplayMeshQuadMaximum.
Accessors: get

Property: Rhino.Geometry.SubDDisplayParameters.MeshLocation
Return: SubDComponentLocation
Modifiers: public
Summary: The MeshLocation property determines if the mesh is on the SubD's control net or the SubD's surface.
Accessors: get set

Method: Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubD(uint adaptiveSubDDisplayDensity, SubD subd)
Return: uint
Modifiers: public, static
Summary: Gets absolute SubD display density for subd.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
Parameter: subd (SubD)
Parameter Summary: In the cases when the SubD in question is not available, like user interface code that applies in general and to unknown SubDs, pass SubD.Empty.

Method: Rhino.Geometry.SubDDisplayParameters.AbsoluteDisplayDensityFromSubDFaceCount(uint adaptiveSubDDisplayDensity, uint subDFaceCount)
Return: uint
Modifiers: public, static
Summary: Gets the absolute SubD display density for SubD with subdFaceCount faces.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.
Parameter: subDFaceCount (uint)
Parameter Summary: Number of SubD faces.

Method: Rhino.Geometry.SubDDisplayParameters.ClampDisplayDensity(uint displayDensity)
Return: uint
Modifiers: public, static
Summary: Limits display density to a value useful in user interface code.

Method: Rhino.Geometry.SubDDisplayParameters.Coarse()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a course limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.CoarseDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromAbsoluteDisplayDensity(uint absoluteSubDDisplayDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Use of absolute display density is strongly discouraged. SubDs can have a single face or millions of faces. Adaptive display meshing produces more desirable results in almost all cases.
Parameter: absoluteSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromDisplayDensity(uint adaptiveSubDDisplayDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: In most applications, the caller sets the mesh density and leaves the other parameters set to the default values.
Parameter: adaptiveSubDDisplayDensity (uint)
Parameter Summary: A value <= SubDDisplayParameters.Density.MaximumDensity. When in doubt, pass SubDDisplayParameters.Density.DefaultDensity. Values < SubDDisplayParameters.Density.MinimumAdaptiveDensity are treated as SubDDisplayParameters.Density.MinimumAdaptiveDensity. All other invalid input values are treated as SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.CreateFromMeshDensity(double normalizedMeshDensity)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: This function creates SubDDisplayParameters from a user interface "slider" like Rhino's simple mesh controls.
Parameter: normalizedMeshDensity (double)
Parameter Summary: A double between 0.0 and 1.0.

Method: Rhino.Geometry.SubDDisplayParameters.Default()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for the default limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.DefaultDensity.

Method: Rhino.Geometry.SubDDisplayParameters.Empty()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Get an empty SubDDisplayParameters.

Method: Rhino.Geometry.SubDDisplayParameters.ExtraCoarse()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for an extra course limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.ExtraCoarseDensity.

Method: Rhino.Geometry.SubDDisplayParameters.ExtraFine()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for an extra fine limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.ExtraFineDensity.

Method: Rhino.Geometry.SubDDisplayParameters.Fine()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a fine limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.FineDensity.

Method: Rhino.Geometry.SubDDisplayParameters.FromEncodedString(string value)
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Converts encoded serialized string into a MeshingParameters
Parameter: value (string)
Parameter Summary: Encoded string returned by MeshingParameters.ToString()

Method: Rhino.Geometry.SubDDisplayParameters.Medium()
Return: SubDDisplayParameters
Modifiers: public, static
Summary: Parameters for a medium limit surface display mesh. SubD display density = adaptive SubDDisplayParameters.Density.MediumDensity.

Method: Rhino.Geometry.SubDDisplayParameters.DisplayDensity(SubD subd)
Return: uint
Modifiers: public
Summary: Gets the absolute display density to use when creating display meshes for SubD. When adaptive reduction is enabled, subd.Faces.Count is used to determine the appropriate display density.
Parameter: subd (SubD)
Parameter Summary: The SubD object.

Method: Rhino.Geometry.SubDDisplayParameters.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDDisplayParameters.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SubDDisplayParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public

Method: Rhino.Geometry.SubDDisplayParameters.SetAbsoluteDisplayDensity(uint absoluteDisplayDensity)
Return: void
Modifiers: public
Summary: In almast all cases, you are better off using SetAdaptiveDisplayDensity().
Parameter: absoluteDisplayDensity (uint)
Parameter Summary: absoluteDisplayDensity <= SubDDisplayParameters.Density.MaximumDensity.

Method: Rhino.Geometry.SubDDisplayParameters.SetAdaptiveDisplayDensity(uint adaptiveDisplayDensity)
Return: void
Modifiers: public
Summary: Set an adaptive SubD display density that caps display mesh quad count at SubDDisplayParameters.AdaptiveDisplayMeshQuadMaximum.
Parameter: adaptiveDisplayDensity (uint)
Parameter Summary: adaptiveDisplayDensity <= SubDDisplayParameters.Density.MaximumDensity. Values <= SubDDisplayParameters.Density.MinimumAdaptiveDensity will never be adaptively reduced during display mesh creation.

Method: Rhino.Geometry.SubDDisplayParameters.ToEncodedString()
Return: string
Modifiers: public
Summary: Returns a encoded string that represents the MeshingParameters.

Class: Rhino.Geometry.SubDEdge
Summary: Single edge of a SubD

Property: Rhino.Geometry.SubDEdge.ControlNetLine
Return: Line
Modifiers: public
Summary: Line representing the control net end points.
Accessors: get

Property: Rhino.Geometry.SubDEdge.FaceCount
Return: int
Modifiers: public
Summary: Number of faces for this edge.
Accessors: get

Property: Rhino.Geometry.SubDEdge.Tag
Return: SubDEdgeTag
Modifiers: public
Summary: identifies the type of subdivision edge.
Accessors: get set

Property: Rhino.Geometry.SubDEdge.VertexFrom
Return: SubDVertex
Modifiers: public
Summary: Start vertex for this edge.
Accessors: get

Property: Rhino.Geometry.SubDEdge.VertexTo
Return: SubDVertex
Modifiers: public
Summary: End vertex for this edge.
Accessors: get

Method: Rhino.Geometry.SubDEdge.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of this edge.

Method: Rhino.Geometry.SubDEdge.FaceAt(int index)
Return: SubDFace
Modifiers: public
Summary: Retrieve a SubDFace from this edge.

Method: Rhino.Geometry.SubDEdge.ToNurbsCurve(bool clampEnds)
Return: NurbsCurve
Modifiers: public
Summary: Get a cubic, uniform, non-rational, NURBS curve that is on the edge's limit curve.
Parameter: clampEnds (bool)
Parameter Summary: If true, the end knots are clamped. Otherwise the end knots are(-2,-1,0,...., k1, k1+1, k1+2).

Class: Rhino.Geometry.SubDFace
Summary: Single face of a SubD

Property: Rhino.Geometry.SubDFace.ControlNetCenterFrame
Return: Plane
Modifiers: public
Summary: The face's control net center frame is a plane with normal equal to ControlNetCenterNormal and origin equal to ControlNetCenterPoint. The x and y axes of the frame have no predictable relationship to the face or SubD control net topology.
Accessors: get

Property: Rhino.Geometry.SubDFace.ControlNetCenterNormal
Return: Vector3d
Modifiers: public
Summary: When the face's control net polygon is planar, the face's control net normal is a unit vector perpendicular to the plane that points outwards. If the control net polygon is not planar, the control net normal is control net normal is a unit vector that is the average of the control polygon's corner normals.
Accessors: get

Property: Rhino.Geometry.SubDFace.ControlNetCenterPoint
Return: Point3d
Modifiers: public
Summary: The face's control net center point is the average of the face's vertex control net points. This is the same point as the face's subdivision point.
Accessors: get

Property: Rhino.Geometry.SubDFace.EdgeCount
Return: int
Modifiers: public
Summary: Number of edges for this face. Note that EdgeCount is always the same as VertexCount. Two properties are provided simply for clarity.
Accessors: get

Property: Rhino.Geometry.SubDFace.LimitSurfaceCenterPoint
Return: Point3d
Modifiers: public
Summary: Get the limit surface point location at the center of the face
Accessors: get

Property: Rhino.Geometry.SubDFace.PerFaceColor
Return: Color
Modifiers: public
Summary: If per-face color is "Empty", then this face does not have a custom color
Accessors: get set

Property: Rhino.Geometry.SubDFace.SurfaceCenterFrame
Return: Plane
Modifiers: public
Summary: Get the limit surface tangent plane at the center of the face. The plane's origin is the point on the limit surface at the center of the face. The plane's z axis is the limit surface normal vector at the center of the face.
Accessors: get

Property: Rhino.Geometry.SubDFace.SurfaceCenterNormal
Return: Vector3d
Modifiers: public
Summary: Get the limit surface normal vector at the center of the face.
Accessors: get

Property: Rhino.Geometry.SubDFace.VertexCount
Return: int
Modifiers: public
Summary: Number of vertices for this face. Note that EdgeCount is always the same as VertexCount. Two properties are provided simply for clarity.
Accessors: get

Method: Rhino.Geometry.SubDFace.ComponentIndex()
Return: ComponentIndex
Modifiers: public
Summary: Gets the component index of this face.

Method: Rhino.Geometry.SubDFace.EdgeAt(int index)
Return: SubDEdge
Modifiers: public
Summary: Get an edge at a given index

Method: Rhino.Geometry.SubDFace.EdgeDirectionMatchesFaceOrientation(int index)
Return: bool
Modifiers: public
Summary: Check if a given edge in this face has the same direction as the face orientation

Method: Rhino.Geometry.SubDFace.VertexAt(int index)
Return: SubDVertex
Modifiers: public
Summary: Get a vertex that this face uses by index

Class: Rhino.Geometry.SubDSurfaceInterpolator
Summary: Interpolate some or all of the vertices limit surface positions in a SubD to specified locations. NB: It is recommended not to use these methods to interpolate more than 1000 vertices.  <b>SubD.SetVertexSurfacePoint(uint, Point3d)</b>  <b>SubD.InterpolateSurfacePoints(Point3d[])</b>  <b>SubD.InterpolateSurfacePoints(uint[], Point3d[])</b>  <b>SubDVertex.SurfacePoint()</b>

Constructor: Rhino.Geometry.SubDSurfaceInterpolator.SubDSurfaceInterpolator()
Summary: Initialize an empty SubDSurfaceInterpolator.

Property: Rhino.Geometry.SubDSurfaceInterpolator.MaximumRecommendedInterpolatedVertexCount
Return: uint
Modifiers: public, static
Summary: Interpolation requires building a solver. We estimate that this solver will work in reasonnable time if the number of interplolated vertices is smaller than MaximumInterpolatedVertexCount. However, given sufficient time, memory, and CPU resources, the code will work with any value. In version 8.0, this value is 1000.
Accessors: get

Property: Rhino.Geometry.SubDSurfaceInterpolator.ContextId
Return: Guid
Modifiers: public
Summary: The context assigned id. This id is provided for applications using ON_SubDSurfaceInterpolator. It is not inspected or used in any part of the interpolation setup or calculations.
Accessors: get set

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromMarkedVertices(SubD subd, bool interpolatedVerticesMark, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the marked vertices (unmarked if interpolatedVerticesMark is false) in the SubD are free vertices in the linear system used for interpolation, and the unmarked (marked if interpolatedVerticesMark is false) are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: interpolatedVerticesMark (bool)
Parameter Summary: If True, marked vertices will be considered free, and unmarked vertices will be fixed.
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSelectedVertices(SubD subd, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the selected vertices in the SubD are free vertices in the linear system used for interpolation, and the unselected are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromSubD(SubD subd, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the vertices in the SubD are free vertices in the linear system used for interpolation (i.e. can move as a result of the interpolation, and can receive an interpolation target location).
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.CreateFromVertexIdList(SubD subd, IEnumerable<uint> vertexIndices, out uint freeVertexCount)
Return: SubDSurfaceInterpolator
Modifiers: public, static
Summary: Create an interpolator where all the listed vertices in the SubD are free vertices in the linear system used for interpolation, and the unselected are fixed to their initial positions. Free vertices are can move as a result of the interpolation, and can receive an interpolation target location.
Parameter: subd (SubD)
Parameter Summary: The SubD to use for interpolation
Parameter: vertexIndices (IEnumerable<uint>)
Parameter Summary: Indices of the vertices to be interpolated
Parameter: freeVertexCount (uint)
Parameter Summary: The number of free vertices in the system

Method: Rhino.Geometry.SubDSurfaceInterpolator.Clear()
Return: void
Modifiers: public
Summary: Destroys the information needed to solve the interpolation.

Method: Rhino.Geometry.SubDSurfaceInterpolator.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDSurfaceInterpolator.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Since: 8.0 | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SubDSurfaceInterpolator.FixedVertexCount()
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexCount()
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.InterpolatedVertexIndex(uint vertexId)
Return: uint
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(SubDVertex vertex)
Return: bool
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.IsInterpolatedVertex(uint vertexId)
Return: bool
Modifiers: public

Method: Rhino.Geometry.SubDSurfaceInterpolator.Solve(Point3d[] surfacePoints)
Return: bool
Modifiers: public
Summary: Solve the interpolation system, given target interpolation locations for the free vertices in the system. Updates the subd referenced by this system so the corresponding surface points are at the locations given by surfacePoints.
Parameter: surfacePoints (Point3d[])
Parameter Summary: The limit surface locations for the interpolated vertices. The number of desired locations needs to match the <b>InterpolatedVertexCount()</b> .

Method: Rhino.Geometry.SubDSurfaceInterpolator.Transform(Transform transform)
Return: void
Modifiers: public
Summary: Apply an arbitrary transformation to the target interpolation points.
Parameter: transform (Transform)
Parameter Summary: The transformation to apply.

Method: Rhino.Geometry.SubDSurfaceInterpolator.VertexIdList()
Return: uint
Modifiers: public

Class: Rhino.Geometry.SubDToBrepOptions
Summary: Options used for converting a SubD to a Brep

Constructor: Rhino.Geometry.SubDToBrepOptions.SubDToBrepOptions()
Summary: Create default options

Constructor: Rhino.Geometry.SubDToBrepOptions.SubDToBrepOptions(bool packFaces, ExtraordinaryVertexProcessOption vertexProcess)
Summary: Create options from the given packFaces and vertexProcess values.

Property: Rhino.Geometry.SubDToBrepOptions.Default
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default SubDToBrepOptions settings. Currently selects the same options as DefaultUnpacked: Locally-G1 smoothing of extraordinary vertices, unpacked faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.DefaultPacked
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default ON_SubDToBrepParameters settings for creating a packed brep. Locally-G1 smoothing of extraordinary vertices, packed faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.DefaultUnpacked
Return: SubDToBrepOptions
Modifiers: public, static
Summary: Default ON_SubDToBrepParameters settings for creating an unpacked brep. Locally-G1 smoothing of extraordinary vertices, unpacked faces.
Accessors: get

Property: Rhino.Geometry.SubDToBrepOptions.ExtraordinaryVertexProcess
Return: ExtraordinaryVertexProcessOption
Modifiers: public
Summary: Get or sets the extraordinary vertex process option.
Accessors: get set

Property: Rhino.Geometry.SubDToBrepOptions.PackFaces
Return: bool
Modifiers: public
Summary: Get or sets the pack faces option.
Accessors: get set

Method: Rhino.Geometry.SubDToBrepOptions.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SubDToBrepOptions.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Class: Rhino.Geometry.SubDVertex
Summary: Single vertex of a SubD

Property: Rhino.Geometry.SubDVertex.ControlNetPoint
Return: Point3d
Modifiers: public
Summary: Location of the "control net" point that this SubDVertex represents
Accessors: get set

Property: Rhino.Geometry.SubDVertex.EdgeCount
Return: int
Modifiers: public
Summary: Number of edges for this vertex
Accessors: get

Property: Rhino.Geometry.SubDVertex.Edges
Return: IEnumerable<SubDEdge>
Modifiers: public
Summary: All edges that this vertex is part of
Accessors: get

Property: Rhino.Geometry.SubDVertex.FaceCount
Return: int
Modifiers: public
Summary: Number of faces for this vertex
Accessors: get

Property: Rhino.Geometry.SubDVertex.Next
Return: SubDVertex
Modifiers: public
Summary: Next vertex in linked list of vertices on this level
Accessors: get

Property: Rhino.Geometry.SubDVertex.Previous
Return: SubDVertex
Modifiers: public
Summary: Previous vertex in linked list of vertices on this level
Accessors: get

Property: Rhino.Geometry.SubDVertex.Tag
Return: SubDVertexTag
Modifiers: public
Summary: identifies the type of subdivision vertex
Accessors: get set

Method: Rhino.Geometry.SubDVertex.EdgeAt(int index)
Return: SubDEdge
Modifiers: public
Summary: Retrieve a SubDEdge from this vertex

Method: Rhino.Geometry.SubDVertex.FaceAt(int index)
Return: SubDFace
Modifiers: public
Summary: Retrieve a SubDFace from this vertex

Method: Rhino.Geometry.SubDVertex.SetControlNetPoint(Point3d position, bool bClearNeighborhoodCache)
Return: bool
Modifiers: public
Summary: Change the location of the "control net" point that this SubDVertex represents
Parameter: position (Point3d)
Parameter Summary: New position for the vertex' control net point.
Parameter: bClearNeighborhoodCache (bool)
Parameter Summary: If true, clear the evaluation cache in the faces around the modified vertex.

Method: Rhino.Geometry.SubDVertex.SurfacePoint()
Return: Point3d
Modifiers: public
Summary: The SubD surface point

Class: Rhino.Geometry.SumSurface
Summary: Represents a sum surface, or an extrusion of a curve along a curved path.

Constructor: Rhino.Geometry.SumSurface.SumSurface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Method: Rhino.Geometry.SumSurface.Create(Curve curveA, Curve curveB)
Return: SumSurface
Modifiers: public, static
Summary: Constructs a new sum surface by extruding a curve A along a path B.
Parameter: curveA (Curve)
Parameter Summary: The curve used as extrusion profile.
Parameter: curveB (Curve)
Parameter Summary: The curve used as path.

Method: Rhino.Geometry.SumSurface.Create(Curve curve, Vector3d extrusionDirection)
Return: SumSurface
Modifiers: public, static
Summary: Constructs a new sum surface by extruding a curve in a specified direction.
Parameter: curve (Curve)
Parameter Summary: The curve used as extrusion profile.
Parameter: extrusionDirection (Vector3d)
Parameter Summary: The extrusion vector (must be non-zero).

Class: Rhino.Geometry.Surface
Summary: Represents a base class that is common to most RhinoCommon surface types.
A surface represents an entity that can be all visited by providing   two independent parameters, usually called (u, v), or sometimes (s, t).

Constructor: Rhino.Geometry.Surface.Surface()
Summary: Protected constructor for internal use.

Constructor: Rhino.Geometry.Surface.Surface(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Geometry.Surface.IsSolid
Return: bool
Modifiers: public, virtual
Summary: Gets a values indicating whether a surface is solid.
Accessors: get

Property: Rhino.Geometry.Surface.IsSubDFriendly
Return: bool
Modifiers: public
Summary: Returns True if the surface is a non-rational, uniform, natural or periodic, cubic NURBS surface. Otherwise, False is returned.
Accessors: get

Method: Rhino.Geometry.Surface.CreateExtrusion(Curve profile, Vector3d direction)
Return: Surface
Modifiers: public, static
Summary: Constructs a surface by extruding a curve along a vector.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: direction (Vector3d)
Parameter Summary: Direction and length of extrusion.

Method: Rhino.Geometry.Surface.CreateExtrusionToPoint(Curve profile, Point3d apexPoint)
Return: Surface
Modifiers: public, static
Summary: Constructs a surface by extruding a curve to a point.
Parameter: profile (Curve)
Parameter Summary: Profile curve to extrude.
Parameter: apexPoint (Point3d)
Parameter Summary: Apex point of extrusion.

Method: Rhino.Geometry.Surface.CreatePeriodicSurface(Surface surface, int direction, bool bSmooth)
Return: Surface
Modifiers: public, static
Summary: Constructs a periodic surface from a base surface and a direction.
Parameter: surface (Surface)
Parameter Summary: The surface to make periodic.
Parameter: direction (int)
Parameter Summary: The direction to make periodic, either 0 = U, or 1 = V.
Parameter: bSmooth (bool)
Parameter Summary: Controls kink removal. If true, smooths any kinks in the surface and moves control points to make a smooth surface. If false, control point locations are not changed or changed minimally (only one point may move) and only the knot vector is altered.

Method: Rhino.Geometry.Surface.CreatePeriodicSurface(Surface surface, int direction)
Return: Surface
Modifiers: public, static
Summary: Constructs a periodic surface from a base surface and a direction.
Parameter: surface (Surface)
Parameter Summary: The surface to make periodic.
Parameter: direction (int)
Parameter Summary: The direction to make periodic, either 0 = U, or 1 = V.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, bool flipA, Surface surfaceB, bool flipB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: flipA (bool)
Parameter Summary: A value that indicates whether A should be used in flipped mode.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: flipB (bool)
Parameter Summary: A value that indicates whether B should be used in flipped mode.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, Point2d uvA, Surface surfaceB, Point2d uvB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: uvA (Point2d)
Parameter Summary: A point in the parameter space of FaceA near where the fillet is expected to hit the surface.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: uvB (Point2d)
Parameter Summary: A point in the parameter space of FaceB near where the fillet is expected to hit the surface.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value used for approximating and intersecting offset surfaces.

Method: Rhino.Geometry.Surface.CreateRollingBallFillet(Surface surfaceA, Surface surfaceB, double radius, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Constructs a rolling ball fillet between two surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: A first surface.
Parameter: surfaceB (Surface)
Parameter Summary: A second surface.
Parameter: radius (double)
Parameter Summary: A radius value.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.CreateSoftEditSurface(Surface surface, Point2d uv, Vector3d delta, double uLength, double vLength, double tolerance, bool fixEnds)
Return: Surface
Modifiers: public, static
Summary: Creates a soft edited surface from an existing surface using a smooth field of influence.
Parameter: surface (Surface)
Parameter Summary: The surface to soft edit.
Parameter: uv (Point2d)
Parameter Summary: A point in the parameter space to move from. This location on the surface is moved, and the move is smoothly tapered off with increasing distance along the surface from this parameter.
Parameter: delta (Vector3d)
Parameter Summary: The direction and magnitude, or maximum distance, of the move.
Parameter: uLength (double)
Parameter Summary: The distance along the surface's u-direction from the editing point over which the strength of the editing falls off smoothly.
Parameter: vLength (double)
Parameter Summary: The distance along the surface's v-direction from the editing point over which the strength of the editing falls off smoothly.
Parameter: tolerance (double)
Parameter Summary: The active document's model absolute tolerance.
Parameter: fixEnds (bool)
Parameter Summary: Keeps edge locations fixed.

Method: Rhino.Geometry.Surface.CreateTweenSurfacesWithSampling(Surface surface0, Surface surface1, int numSurfaces, int numSamples, double tolerance)
Return: Surface[]
Modifiers: public, static
Summary: Create tween surfaces that gradually transition between two bounding surfaces using point sampling.
Parameter: surface0 (Surface)
Parameter Summary: The first, or starting, surface.
Parameter: surface1 (Surface)
Parameter Summary: The second, or ending, curve.
Parameter: numSurfaces (int)
Parameter Summary: Number of tween surfaces to create.
Parameter: numSamples (int)
Parameter Summary: Number of sample points along input surfaces.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Surface.ClosestPoint(Point3d testPoint, out double u, out double v)
Return: bool
Modifiers: public
Summary: Input the parameters of the point on the surface that is closest to testPoint.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: u (double)
Parameter Summary: U parameter of the surface that is closest to testPoint.
Parameter: v (double)
Parameter Summary: V parameter of the surface that is closest to testPoint.

Method: Rhino.Geometry.Surface.ClosestSide(double u, double v)
Return: IsoStatus
Modifiers: public
Summary: Gets the side that is closest, in terms of 3D-distance, to a U and V parameter.
Parameter: u (double)
Parameter Summary: A u parameter.
Parameter: v (double)
Parameter Summary: A v parameter.

Method: Rhino.Geometry.Surface.CurvatureAt(double u, double v)
Return: SurfaceCurvature
Modifiers: public
Summary: Computes the curvature at the given UV coordinate.
Parameter: u (double)
Parameter Summary: U parameter for evaluation.
Parameter: v (double)
Parameter Summary: V parameter for evaluation.

Method: Rhino.Geometry.Surface.Degree(int direction)
Return: int
Modifiers: public
Summary: Returns the maximum algebraic degree of any span (or a good estimate if curve spans are not algebraic).
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.Domain(int direction)
Return: Interval
Modifiers: public
Summary: Gets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter, 1 gets second parameter.

Method: Rhino.Geometry.Surface.Evaluate(double u, double v, int numberDerivatives, out Point3d point, out Vector3d[] derivatives)
Return: bool
Modifiers: public
Summary: Evaluates a surface mathematically.
Parameter: u (double)
Parameter Summary: A U parameter.
Parameter: v (double)
Parameter Summary: A V parameter.
Parameter: numberDerivatives (int)
Parameter Summary: The number of derivatives.
Parameter: point (Point3d)
Parameter Summary: A point. This out parameter will be assigned during this call.
Parameter: derivatives (Vector3d[])
Parameter Summary: A vector array. This out parameter will be assigned during this call. This can be null.

Method: Rhino.Geometry.Surface.Extend(int direction, Interval interval)
Return: bool
Modifiers: public
Summary: Analytically extends the surface to include the interval.
Parameter: direction (int)
Parameter Summary: If 0, Surface.Domain(0) will include the interval. (the first surface parameter). If 1, Surface.Domain(1) will include the interval. (the second surface parameter).
Parameter: interval (Interval)
Parameter Summary: If the interval is not included in surface domain, the surface will be extended so that its domain includes the interval. Note, this method will fail if the surface is closed in the specified direction.

Method: Rhino.Geometry.Surface.Extend(IsoStatus edge, double extensionLength, bool smooth)
Return: Surface
Modifiers: public
Summary: Extends an untrimmed surface along one edge.
Parameter: edge (IsoStatus)
Parameter Summary: Edge to extend.  Must be North, South, East, or West.
Parameter: extensionLength (double)
Parameter Summary: distance to extend.
Parameter: smooth (bool)
Parameter Summary: True for smooth (C-infinity) extension. False for a C1- ruled extension.

Method: Rhino.Geometry.Surface.Fit(int uDegree, int vDegree, double fitTolerance)
Return: Surface
Modifiers: public
Summary: Fits a new surface through an existing surface.
Parameter: uDegree (int)
Parameter Summary: the output surface U degree. Must be bigger than 1.
Parameter: vDegree (int)
Parameter Summary: the output surface V degree. Must be bigger than 1.
Parameter: fitTolerance (double)
Parameter Summary: The fitting tolerance.

Method: Rhino.Geometry.Surface.FitCurveToSurface(Curve trimCurve3d, Vector3d trimProjectionDir, double tolerance, IEnumerable<double> Knots, bool divideIntoSections, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: Curve[]
Modifiers: public
Parameter: trimCurve3d (Curve)
Parameter Summary: curve that will trim from one edge to the opposite
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: Knots (IEnumerable<double>)
Parameter Summary: For TrimParamKnots=3, the custom knots to add
Parameter: divideIntoSections (bool)
Parameter Summary: If true, the surface is divided at each knot
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.FrameAt(double u, double v, out Plane frame)
Return: bool
Modifiers: public
Summary: Computes the orient plane on a surface given a U and V parameter.
This is the simple evaluation call with no error handling. | Since: 5.0 | Parameter: u (double) | Parameter Summary: A first parameter. | Parameter: v (double) | Parameter Summary: A second parameter. | Parameter: frame (Plane) | Parameter Summary: A frame plane that will be computed during this call.

Method: Rhino.Geometry.Surface.GetNextDiscontinuity(int direction, Continuity continuityType, double t0, double t1, double cosAngleTolerance, double curvatureTolerance, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: direction (int)
Parameter Summary: If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
Parameter: continuityType (Continuity)
Parameter Summary: The desired continuity.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: cosAngleTolerance (double)
Parameter Summary: default = cos(1 degree) Used only  when continuityType is G1_continuous or G2_continuous. If the cosine of the angle between two tangent vectors is <= cos_angle_tolerance, then a G1 discontinuity is reported.
Parameter: curvatureTolerance (double)
Parameter Summary: (default = ON_SQRT_EPSILON) Used only when continuityType is G2_continuous. If K0 and K1 are curvatures evaluated from above and below and |K0 - K1| > curvature_tolerance, then a curvature discontinuity is reported.
Parameter: t (double)
Parameter Summary: if a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Surface.GetNextDiscontinuity(int direction, Continuity continuityType, double t0, double t1, out double t)
Return: bool
Modifiers: public
Summary: Searches for a derivative, tangent, or curvature discontinuity.
Parameter: direction (int)
Parameter Summary: If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
Parameter: continuityType (Continuity)
Parameter Summary: The desired continuity.
Parameter: t0 (double)
Parameter Summary: Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
Parameter: t1 (double)
Parameter Summary: (t0 != t1) If there is a discontinuity at t1 is will be ignored unless c is a locus discontinuity type and t1 is at the start or end of the curve.
Parameter: t (double)
Parameter Summary: if a discontinuity is found, then t reports the parameter at the discontinuity.

Method: Rhino.Geometry.Surface.GetNurbsFormParameterFromSurfaceParameter(double surfaceS, double surfaceT, out double nurbsS, out double nurbsT)
Return: bool
Modifiers: public
Summary: Translates a parameter from the current surface to the parameter space of the surface returned by <b>ToNurbsSurface()</b> .
Parameter: surfaceS (double)
Parameter Summary: The parameter in the S, or sometimes U, direction, of this surface.
Parameter: surfaceT (double)
Parameter Summary: The parameter in the T, or sometimes V, direction of this surface.
Parameter: nurbsS (double)
Parameter Summary: S on the NURBS form.
Parameter: nurbsT (double)
Parameter Summary: T on the NURBS form.

Method: Rhino.Geometry.Surface.GetSpanVector(int direction)
Return: double
Modifiers: public
Summary: Gets array of span "knots".
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.GetSurfaceParameterFromNurbsFormParameter(double nurbsS, double nurbsT, out double surfaceS, out double surfaceT)
Return: bool
Modifiers: public
Summary: Translates a parameter from a value on the surface returned by <b>ToNurbsSurface()</b> to the current surface.
Parameter: nurbsS (double)
Parameter Summary: The parameter in the S, or sometimes U, direction of the NURBS form surface.
Parameter: nurbsT (double)
Parameter Summary: The parameter in the T, or sometimes V, direction of the NURBS form surface.
Parameter: surfaceS (double)
Parameter Summary: S on this surface.
Parameter: surfaceT (double)
Parameter Summary: T o n this surface.

Method: Rhino.Geometry.Surface.GetSurfaceSize(out double width, out double height)
Return: bool
Modifiers: public
Summary: Gets an estimate of the size of the rectangle that would be created if the 3d surface where flattened into a rectangle.
Parameter: width (double)
Parameter Summary: corresponds to the first surface parameter.
Parameter: height (double)
Parameter Summary: corresponds to the second surface parameter.

Method: Rhino.Geometry.Surface.HasNurbsForm()
Return: int
Modifiers: public
Summary: Is there a NURBS surface representation of this surface.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurface(IEnumerable<Point3d> points, double tolerance)
Return: NurbsCurve
Modifiers: public
Summary: Constructs an interpolated curve on a surface, using 3D points.
Parameter: points (System.Collections.Generic.IEnumerable<Point3d>)
Parameter Summary: A list, an array or any enumerable set of points.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(IEnumerable<Point2d> points, double tolerance, bool closed, int closedSurfaceHandling)
Return: NurbsCurve
Modifiers: public
Summary: Returns a curve that interpolates points on a surface. The interpolant lies on the surface.
Parameter: points (System.Collections.Generic.IEnumerable<Point2d>)
Parameter Summary: List of at least two UV parameter locations on the surface.
Parameter: tolerance (double)
Parameter Summary: Tolerance used for the fit of the push-up curve. Generally, the resulting interpolating curve will be within tolerance of the surface.
Parameter: closed (bool)
Parameter Summary: If false, the interpolating curve is not closed. If true, the interpolating curve is closed, and the last point and first point should generally not be equal.
Parameter: closedSurfaceHandling (int)
Parameter Summary: If 0, all points must be in the rectangular domain of the surface. If the surface is closed in some direction, then this routine will interpret each point and place it at an appropriate location in the covering space. This is the simplest option and should give good results. If 1, then more options for more control of handling curves going across seams are available. If the surface is closed in some direction, then the points are taken as points in the covering space. Example, if srf.IsClosed(0)=True and srf.IsClosed(1)=False and srf.Domain(0)=srf.Domain(1)=Interval(0,1) then if closedSurfaceHandling=1 a point(u, v) in points can have any value for the u coordinate, but must have 0<=v<=1. In particular, if points = { (0.0,0.5), (2.0,0.5) } then the interpolating curve will wrap around the surface two times in the closed direction before ending at start of the curve. If closed=True the last point should equal the first point plus an integer multiple of the period on a closed direction.

Method: Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(IEnumerable<Point2d> points, double tolerance)
Return: NurbsCurve
Modifiers: public
Summary: Returns a curve that interpolates points on a surface. The interpolant lies on the surface.
Parameter: points (System.Collections.Generic.IEnumerable<Point2d>)
Parameter Summary: List of at least two UV parameter locations on the surface.
Parameter: tolerance (double)
Parameter Summary: Tolerance used for the fit of the push-up curve. Generally, the resulting interpolating curve will be within tolerance of the surface.

Method: Rhino.Geometry.Surface.IsAtSeam(double u, double v)
Return: int
Modifiers: public
Summary: Tests if a surface parameter value is at a seam.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.

Method: Rhino.Geometry.Surface.IsAtSingularity(double u, double v, bool exact)
Return: bool
Modifiers: public
Summary: Tests if a surface parameter value is at a singularity.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.
Parameter: exact (bool)
Parameter Summary: If true, test if (u,v) is exactly at a singularity. If false, test if close enough to cause numerical problems.

Method: Rhino.Geometry.Surface.IsClosed(int direction)
Return: bool
Modifiers: public
Summary: Gets a value indicating if the surface is closed in a direction.
Parameter: direction (int)
Parameter Summary: 0 = U, 1 = V.

Method: Rhino.Geometry.Surface.IsCone()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cone within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsCone(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cone within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsContinuous(Continuity continuityType, double u, double v)
Return: bool
Modifiers: public
Summary: Tests continuity at a surface parameter value.
Parameter: continuityType (Continuity)
Parameter Summary: The continuity type to sample.
Parameter: u (double)
Parameter Summary: Surface u parameter to test.
Parameter: v (double)
Parameter Summary: Surface v parameter to test.

Method: Rhino.Geometry.Surface.IsCylinder()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsCylinder(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a cylinder within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsIsoparametric(BoundingBox bbox)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2d bounding box is isoparametric in the parameter space of this surface.
Parameter: bbox (BoundingBox)
Parameter Summary: Bounding box to test.

Method: Rhino.Geometry.Surface.IsIsoparametric(Curve curve, Interval curveDomain)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2D curve is isoparametric in the parameter space of this surface.
Parameter: curve (Curve)
Parameter Summary: Curve to test.
Parameter: curveDomain (Interval)
Parameter Summary: Sub domain of the curve.

Method: Rhino.Geometry.Surface.IsIsoparametric(Curve curve)
Return: IsoStatus
Modifiers: public
Summary: Determines if a 2d curve is isoparametric in the parameter space of this surface.
Parameter: curve (Curve)
Parameter Summary: Curve to test.

Method: Rhino.Geometry.Surface.IsoCurve(int direction, double constantParameter)
Return: Curve
Modifiers: public
Summary: Gets isoparametric curve.
Parameter: direction (int)
Parameter Summary: 0 first parameter varies and second parameter is constant e.g., point on IsoCurve(0,c) at t is srf(t,c) This is a horizontal line from left to right  1 first parameter is constant and second parameter varies e.g., point on IsoCurve(1,c) at t is srf(c,t This is a vertical line from bottom to top.
Parameter: constantParameter (double)
Parameter Summary: The parameter that was constant on the original surface.

Method: Rhino.Geometry.Surface.IsPeriodic(int direction)
Return: bool
Modifiers: public
Summary: Gets a value indicating if the surface is periodic in a direction (default is false).
Parameter: direction (int)
Parameter Summary: 0 = U, 1 = V.

Method: Rhino.Geometry.Surface.IsPlanar()
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is planar to zero tolerance.

Method: Rhino.Geometry.Surface.IsPlanar(double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is planar to a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsSingular(int side)
Return: bool
Modifiers: public
Summary: True if surface side is collapsed to a point.
Parameter: side (int)
Parameter Summary: side of parameter space to test 0 = south, 1 = east, 2 = north, 3 = west.

Method: Rhino.Geometry.Surface.IsSphere()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a sphere within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsSphere(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a sphere within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.IsTorus()
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a torus within RhinoMath.ZeroTolerance.

Method: Rhino.Geometry.Surface.IsTorus(double tolerance)
Return: bool
Modifiers: public
Summary: Determines if the surface is a portion of a torus within a given tolerance.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.LocalClosestPoint(Point3d testPoint, double seedU, double seedV, out double u, out double v)
Return: bool
Modifiers: public
Summary: Find parameters of the point on a surface that is locally closest to the testPoint. The search for a local close point starts at seed parameters.
Parameter: testPoint (Point3d)
Parameter Summary: A point to test against.
Parameter: seedU (double)
Parameter Summary: The seed parameter in the U direction.
Parameter: seedV (double)
Parameter Summary: The seed parameter in the V direction.
Parameter: u (double)
Parameter Summary: U parameter of the surface that is closest to testPoint.
Parameter: v (double)
Parameter Summary: V parameter of the surface that is closest to testPoint.

Method: Rhino.Geometry.Surface.NormalAt(double u, double v)
Return: Vector3d
Modifiers: public
Summary: Computes the surface normal at a point.
This is the simple evaluation call - it does not support error handling. | Since: 5.0 | Parameter: u (double) | Parameter Summary: A U parameter. | Parameter: v (double) | Parameter Summary: A V parameter.

Method: Rhino.Geometry.Surface.Offset(double distance, double tolerance)
Return: Surface
Modifiers: public
Summary: Constructs a new surface which is offset from the current surface.
Parameter: distance (double)
Parameter Summary: Distance (along surface normal) to offset.
Parameter: tolerance (double)
Parameter Summary: Offset accuracy.

Method: Rhino.Geometry.Surface.PointAt(double u, double v)
Return: Point3d
Modifiers: public
Summary: Evaluates a point at a given parameter.
Parameter: u (double)
Parameter Summary: evaluation parameters.
Parameter: v (double)
Parameter Summary: evaluation parameters.

Method: Rhino.Geometry.Surface.Pullback(Curve curve3d, double tolerance, Interval curve3dSubdomain)
Return: Curve
Modifiers: public
Summary: Pulls a 3d curve back to the surface's parameter space.
Parameter: curve3d (Curve)
Parameter Summary: A curve.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable 3d distance between from surface(curve_2d(t)) to the locus of points on the surface that are closest to curve_3d.
Parameter: curve3dSubdomain (Interval)
Parameter Summary: A sub-domain of the curve to sample.

Method: Rhino.Geometry.Surface.Pullback(Curve curve3d, double tolerance)
Return: Curve
Modifiers: public
Summary: Pulls a 3d curve back to the surface's parameter space.
Parameter: curve3d (Curve)
Parameter Summary: The curve to pull.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable 3d distance between from surface(curve_2d(t)) to the locus of points on the surface that are closest to curve_3d.

Method: Rhino.Geometry.Surface.Pushup(Curve curve2d, double tolerance, Interval curve2dSubdomain)
Return: Curve
Modifiers: public
Summary: Computes a 3d curve that is the composite of a 2d curve and the surface map.
Parameter: curve2d (Curve)
Parameter Summary: a 2d curve whose image is in the surface's domain.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
Parameter: curve2dSubdomain (Interval)
Parameter Summary: The curve interval (a sub-domain of the original curve) to use.

Method: Rhino.Geometry.Surface.Pushup(Curve curve2d, double tolerance)
Return: Curve
Modifiers: public
Summary: Computes a 3d curve that is the composite of a 2d curve and the surface map.
Parameter: curve2d (Curve)
Parameter Summary: a 2d curve whose image is in the surface's domain.
Parameter: tolerance (double)
Parameter Summary: the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.

Method: Rhino.Geometry.Surface.Rebuild(int uDegree, int vDegree, int uPointCount, int vPointCount)
Return: NurbsSurface
Modifiers: public
Summary: Rebuilds an existing surface to a given degree and point count.
Parameter: uDegree (int)
Parameter Summary: the output surface u degree.
Parameter: vDegree (int)
Parameter Summary: the output surface u degree.
Parameter: uPointCount (int)
Parameter Summary: The number of points in the output surface u direction. Must be bigger than uDegree (maximum value is 1000)
Parameter: vPointCount (int)
Parameter Summary: The number of points in the output surface v direction. Must be bigger than vDegree (maximum value is 1000)

Method: Rhino.Geometry.Surface.RebuildOneDirection(int direction, int pointCount, LoftType loftType, double refitTolerance)
Return: NurbsSurface
Modifiers: public
Summary: Rebuilds an existing surface with a new surface to a given point count in either the u or v directions independently.
Parameter: direction (int)
Parameter Summary: The direction (0 = U, 1 = V).
Parameter: pointCount (int)
Parameter Summary: The number of points in the output surface in the "direction" direction.
Parameter: loftType (LoftType)
Parameter Summary: The loft type
Parameter: refitTolerance (double)
Parameter Summary: The refit tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Surface.RefitSimplySplitSurface(Curve trimCurve3d, Vector3d trimProjectionDir, double tolerance, RefitTrimKnotMode knotAdditionMode, int numInsertKnots, IEnumerable<double> Knots, RefitTrimSectionMode sectionMode, int numNonTrimSpans, bool meetCurve, bool oneSided, Point3d PtActive, bool outputSurface, bool outputCurve, ref int numSections, List<Surface> lowerSurface, List<Surface> upperSurface, List<Curve> edgeCurve, ref double FitMeasurement, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: bool
Modifiers: public
Summary: This routine accepts a 3-d trim curve (trimCrv3d). The trim curve is assumed to run from one surface edge to the opposite edge; this is referred to as a "simple" trim curve, roughly parallel to one of the srf directions (either u or v).  We refer to that parameter as the "trim parameter".  The routine splits the surface via the trim curve, and then refits either side ("upper" = "above the trim", and "lower" = "below the trim") as a set of untrimmed Nurbs surfaces.  The idea is to retain, as much as possible, the Nurbs structure of srf, especially in the trim parameter.
Parameter: trimCurve3d (Curve)
Parameter Summary: curve that will trim from one edge to the opposite
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: knotAdditionMode (RefitTrimKnotMode)
Parameter Summary: 0: no, don't add any 1: Yes, add nKnots knots, spaced regularly over the entire surface 2: Yes, add nKnots knots, spaced regularly PER EXISTING SPAN 3: Yes, add nKnots knots, as provided in the array Knots
Parameter: numInsertKnots (int)
Parameter Summary: FOr TrimParamKnots != 3, the number of knots to add
Parameter: Knots (IEnumerable<double>)
Parameter Summary: For TrimParamKnots=3, the custom knots to add
Parameter: sectionMode (RefitTrimSectionMode)
Parameter Summary: 0: no sections, just output one "upper" and one "lower" surface 1: Yes, divide into sections at each of the input surface's existing knots 2: Yes, divide into sections at each of the "nKnot" added knot values 3: Yes, divide into sections at ALL knot values (i.e. both 1 and 2)
Parameter: numNonTrimSpans (int)
Parameter Summary: number of spans in the non-trim parameter
Parameter: meetCurve (bool)
Parameter Summary: Drag the refit surfaces out to meet the original trim curve
Parameter: oneSided (bool)
Parameter Summary: Inputting an "active" point means you only want one side of the "split" to be refit - In other words, you want a "trim refit".  Results will be returned in "srfLower"
Parameter: PtActive (Point3d)
Parameter Summary: Active point
Parameter: outputSurface (bool)
Parameter Summary: if true, output fit surfaces: srfLower and, if !bActivePt, srfUpper
Parameter: outputCurve (bool)
Parameter Summary: if true, output fit curve:  crvEdge
Parameter: numSections (int)
Parameter Summary: 
Parameter: lowerSurface (List<Surface>)
Parameter Summary: Surfaces (# = nSections) below trim curve in srf's (u,v) domain
Parameter: upperSurface (List<Surface>)
Parameter Summary: Surfaces (# = nSections) above trim curve in srf's (u,v) domain
Parameter: edgeCurve (List<Curve>)
Parameter Summary: Curves (# = nSections) fit to trim curve with srf's u/v parameter
Parameter: FitMeasurement (double)
Parameter Summary: Calculated based on trimParamSections
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.RefitSplit(Curve curve, Vector3d trimProjectionDir, double tolerance, IEnumerable<double> Knots, bool bMeetCurve, bool divideIntoSections, List<Surface> srfLower, List<Surface> srfUpper, List<Curve> edgeCurve, ref Curve trimCurveOnSurface, ref Curve splitCurve)
Return: int
Modifiers: public
Summary: Splits the surface into two and refits the split edge
Parameter: curve (Curve)
Parameter Summary: The curve used to split the surface. It must be a simple division, from one edge of the parametric space to the opposite edge.
Parameter: trimProjectionDir (Vector3d)
Parameter Summary: Vector for projection, or zero vector for no projection
Parameter: tolerance (double)
Parameter Summary: 3d tolerance for projection, splitting, fitting...
Parameter: Knots (IEnumerable<double>)
Parameter Summary: 
Parameter: bMeetCurve (bool)
Parameter Summary: 
Parameter: divideIntoSections (bool)
Parameter Summary: If true, the surface is divided at each knot
Parameter: srfLower (List<Surface>)
Parameter Summary: Surfaces below trim curve in srf's (u,v) domain
Parameter: srfUpper (List<Surface>)
Parameter Summary: Surfaces below trim curve in srf's (u,v) domain
Parameter: edgeCurve (List<Curve>)
Parameter Summary: Curves (# = nSections) fit to trim curve with srf's u/v parameter
Parameter: trimCurveOnSurface (Curve)
Parameter Summary: the actual trim curve as it is projected on or pulled to the surface
Parameter: splitCurve (Curve)
Parameter Summary: the actual fit curve the split the surface

Method: Rhino.Geometry.Surface.Reverse(int direction, bool inPlace)
Return: Surface
Modifiers: public
Summary: Same as Reverse, but if inPlace is set to True this Surface is modified instead of a new copy being created.
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.
Parameter: inPlace (bool)
Parameter Summary:

Method: Rhino.Geometry.Surface.Reverse(int direction)
Return: Surface
Modifiers: public
Summary: Reverses parameterization Domain changes from [a,b] to [-b,-a]
Parameter: direction (int)
Parameter Summary: 0 for first parameter's domain, 1 for second parameter's domain.

Method: Rhino.Geometry.Surface.SetDomain(int direction, Interval domain)
Return: bool
Modifiers: public, virtual
Summary: Sets the domain in a direction.
Parameter: direction (int)
Parameter Summary: 0 sets first parameter's domain, 1 sets second parameter's domain.
Parameter: domain (Interval)
Parameter Summary: A new domain to be assigned.

Method: Rhino.Geometry.Surface.ShortPath(Point2d start, Point2d end, double tolerance)
Return: Curve
Modifiers: public
Summary: Constructs a geodesic between 2 points, used by ShortPath command in Rhino.
Parameter: start (Point2d)
Parameter Summary: start point of curve in parameter space. Points must be distinct in the domain of the surface.
Parameter: end (Point2d)
Parameter Summary: end point of curve in parameter space. Points must be distinct in the domain of the surface.
Parameter: tolerance (double)
Parameter Summary: tolerance used in fitting discrete solution.

Method: Rhino.Geometry.Surface.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem, Plane plane)
Return: Surface
Modifiers: public
Summary: Smooths a surface by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the surface edges don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.
Parameter: plane (Plane)
Parameter Summary: If SmoothingCoordinateSystem.CPlane specified, then the construction plane.

Method: Rhino.Geometry.Surface.Smooth(double smoothFactor, bool bXSmooth, bool bYSmooth, bool bZSmooth, bool bFixBoundaries, SmoothingCoordinateSystem coordinateSystem)
Return: Surface
Modifiers: public
Summary: Smooths a surface by averaging the positions of control points in a specified region.
Parameter: smoothFactor (double)
Parameter Summary: The smoothing factor, which controls how much control points move towards the average of the neighboring control points.
Parameter: bXSmooth (bool)
Parameter Summary: When True control points move in X axis direction.
Parameter: bYSmooth (bool)
Parameter Summary: When True control points move in Y axis direction.
Parameter: bZSmooth (bool)
Parameter Summary: When True control points move in Z axis direction.
Parameter: bFixBoundaries (bool)
Parameter Summary: When True the surface edges don't move.
Parameter: coordinateSystem (SmoothingCoordinateSystem)
Parameter Summary: The coordinates to determine the direction of the smoothing.

Method: Rhino.Geometry.Surface.SpanCount(int direction)
Return: int
Modifiers: public
Summary: Gets number of smooth nonempty spans in the parameter direction.
Parameter: direction (int)
Parameter Summary: 0 gets first parameter's domain, 1 gets second parameter's domain.

Method: Rhino.Geometry.Surface.Split(int direction, double parameter)
Return: Surface[]
Modifiers: public
Summary: Splits (divides) the surface into two parts at the specified parameter
Parameter: direction (int)
Parameter Summary: 0 = The surface is split vertically. The "west" side is returned as the first surface in the array and the "east" side is returned as the second surface in the array. 1 = The surface is split horizontally. The "south" side is returned as the first surface in the array and the "north" side is returned as the second surface in the array
Parameter: parameter (double)
Parameter Summary: value of constant parameter in interval returned by Domain(direction)

Method: Rhino.Geometry.Surface.ToBrep()
Return: Brep
Modifiers: public
Summary: Converts the surface into a Brep.

Method: Rhino.Geometry.Surface.ToNurbsSurface()
Return: NurbsSurface
Modifiers: public
Summary: Gets a NURBS surface representation of this surface. Default tolerance of 0.0 is used.

Method: Rhino.Geometry.Surface.ToNurbsSurface(double tolerance, out int accuracy)
Return: NurbsSurface
Modifiers: public
Summary: Gets a NURBS surface representation of this surface.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when creating NURBS representation.
Parameter: accuracy (int)
Parameter Summary: 0 = unable to create NURBS representation with desired accuracy.
1 = success - returned NURBS parameterization matches the surface's     to the desired accuracy.
2 = success - returned NURBS point locus matches the surface's to the     desired accuracy and the domain of the NURBS surface is correct.      However, this surface's parameterization and the NURBS surface     parameterization may not match to the desired accuracy. This      situation happens when getting NURBS representations of surfaces     that have a transcendental parameterization like spheres, cylinders,     and cones.

Method: Rhino.Geometry.Surface.Transpose()
Return: Surface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Method: Rhino.Geometry.Surface.Transpose(bool inPlace)
Return: Surface
Modifiers: public
Summary: Transposes surface parameterization (swap U and V)

Method: Rhino.Geometry.Surface.Trim(Interval u, Interval v)
Return: Surface
Modifiers: public
Summary: Constructs a sub-surface that covers the specified UV trimming domain.
Parameter: u (Interval)
Parameter Summary: Domain of surface along U direction to include in the subsurface.
Parameter: v (Interval)
Parameter Summary: Domain of surface along V direction to include in the subsurface.

Method: Rhino.Geometry.Surface.TryGetCone(out Cone cone, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cone and returns the cone.
Parameter: cone (Cone)
Parameter Summary: On success, the cone parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetCone(out Cone cone)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cone within RhinoMath.ZeroTolerance and return the cone.
Parameter: cone (Cone)
Parameter Summary: On success, the cone parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetCylinder(out Cylinder cylinder, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cylinder and return the infinite cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetCylinder(out Cylinder cylinder)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a cylinder within RhinoMath.ZeroTolerance and return the cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetFiniteCylinder(out Cylinder cylinder, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface with the assumption that it might be a right circular cylinder and returns this geometry.
Parameter: cylinder (Cylinder)
Parameter Summary: On success, the cylinder parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetPlane(out Plane plane, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetPlane(out Plane plane)
Return: bool
Modifiers: public
Summary: Tests a surface for planarity and return the plane.
Parameter: plane (Plane)
Parameter Summary: On success, the plane parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetSphere(out Sphere sphere, double tolerance)
Return: bool
Modifiers: public
Summary: Test a surface to see if it is a portion of a sphere and return the sphere.
Parameter: sphere (Sphere)
Parameter Summary: On success, the sphere parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetSphere(out Sphere sphere)
Return: bool
Modifiers: public
Summary: Test a surface to see if it is a portion of a sphere and return the sphere.
Parameter: sphere (Sphere)
Parameter Summary: On success, the sphere parameters are filled in.

Method: Rhino.Geometry.Surface.TryGetTorus(out Torus torus, double tolerance)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a torus and returns the torus.
Parameter: torus (Torus)
Parameter Summary: On success, the torus parameters are filled in.
Parameter: tolerance (double)
Parameter Summary: tolerance to use when checking.

Method: Rhino.Geometry.Surface.TryGetTorus(out Torus torus)
Return: bool
Modifiers: public
Summary: Tests a surface to see if it is a portion of a torus within RhinoMath.ZeroTolerance and returns the torus.
Parameter: torus (Torus)
Parameter Summary: On success, the torus parameters are filled in.

Method: Rhino.Geometry.Surface.VariableOffset(double uMinvMin, double uMinvMax, double uMaxvMin, double uMaxvMax, double tolerance)
Return: Surface
Modifiers: public
Summary: Copies a surface so that all locations at the corners of the copied surface are specified distances from the original surface.
Parameter: uMinvMin (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Min.
Parameter: uMinvMax (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Max.
Parameter: uMaxvMin (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Min.
Parameter: uMaxvMax (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Max.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.

Method: Rhino.Geometry.Surface.VariableOffset(double uMinvMin, double uMinvMax, double uMaxvMin, double uMaxvMax, IEnumerable<Point2d> interiorParameters, IEnumerable<double> interiorDistances, double tolerance)
Return: Surface
Modifiers: public
Summary: Copies a surface so that all locations at the corners, and from specified interior locations, of the copied surface are specified distances from the original surface.
Parameter: uMinvMin (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Min.
Parameter: uMinvMax (double)
Parameter Summary: Offset distance at Domain(0).Min, Domain(1).Max.
Parameter: uMaxvMin (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Min.
Parameter: uMaxvMax (double)
Parameter Summary: Offset distance at Domain(0).Max, Domain(1).Max.
Parameter: interiorParameters (IEnumerable<Point2d>)
Parameter Summary: An array of interior UV parameters to offset from.
Parameter: interiorDistances (IEnumerable<double>)
Parameter Summary: >An array of offset distances at the interior UV parameters.
Parameter: tolerance (double)
Parameter Summary: The offset tolerance.

Class: Rhino.Geometry.SurfaceCurvature
Summary: Maintains computed information for surface curvature evaluation.

Constructor: Rhino.Geometry.SurfaceCurvature.SurfaceCurvature()
Summary: Initializes a new instance of the SurfaceCurvature class

Property: Rhino.Geometry.SurfaceCurvature.Gaussian
Return: double
Modifiers: public
Summary: Gets the Gaussian curvature value at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Mean
Return: double
Modifiers: public
Summary: Gets the Mean curvature value at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Normal
Return: Vector3d
Modifiers: public
Summary: Gets the surface normal at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.Point
Return: Point3d
Modifiers: public
Summary: Gets the surface point at UV.
Accessors: get

Property: Rhino.Geometry.SurfaceCurvature.UVPoint
Return: Point2d
Modifiers: public
Summary: Gets the UV location where the curvature was computed.
Accessors: get

Method: Rhino.Geometry.SurfaceCurvature.Direction(int direction)
Return: Vector3d
Modifiers: public
Summary: Gets the principal curvature direction vector.
Parameter: direction (int)
Parameter Summary: Direction index, valid values are 0 and 1.

Method: Rhino.Geometry.SurfaceCurvature.Kappa(int direction)
Return: double
Modifiers: public
Summary: Gets the principal curvature values. Kappa(0) - Principal curvature with maximum absolute value Kappa(1) - Principal curvature with minimum absolute value
Parameter: direction (int)
Parameter Summary: Kappa index, valid values are 0 and 1.

Method: Rhino.Geometry.SurfaceCurvature.OsculatingCircle(int direction)
Return: Circle
Modifiers: public
Summary: Computes the osculating circle along the given direction.
Parameter: direction (int)
Parameter Summary: Direction index, valid values are 0 and 1.

Class: Rhino.Geometry.SurfaceFilletBase
Summary: New interactive FilletSrf

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace RailFace, Curve Rail3d, BrepFace Face, Point2d uv, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace FaceA, Point2d uvA, BrepFace FaceB, Point2d uvB, double radius, bool allowExtend, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace FaceA, Point2d uvA, BrepFace FaceB, Point2d uvB, double radius, double tolerance)

Constructor: Rhino.Geometry.SurfaceFilletBase.SurfaceFilletBase(BrepFace face, Point2d uv, Curve rail3d, double u, double radius, double tolerance)

Method: Rhino.Geometry.SurfaceFilletBase.CreateG2ChordalQuinticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using G2 chordal Quintic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Cubic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalCubicFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Cubic sections with a tangent slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Quartic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuarticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, double InnerSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Quartic sections with a tangent and inner slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: InnerSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the inner control point toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a surface fillet using Non-rational Quintic arc approximations as sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateNonRationalQuinticFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, double TanSlider, double InnerSlider, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a fillet using non-rational Quintic sections with a tangent and inner slider
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: TanSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the tangent control points toward or away from the theoretical quadratic middle control point
Parameter: InnerSlider (double)
Parameter Summary: A number between -0.95 and 0.95 indicating how far to push the inner control points toward or away from the theoretical quadratic middle control point
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.CreateRationalArcsFilletSrf(BrepFace faceA, Point2d uvA, BrepFace faceB, Point2d uvB, double radius, double tolerance, List<Brep> trimmedBrepsA, List<Brep> trimmedBrepsB, int rail_degree, bool bTrim, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public, static
Summary: Creates a standard surface fillet using rational arc sections
Parameter: faceA (BrepFace)
Parameter Summary: the first face to use constructing the fillet
Parameter: uvA (Point2d)
Parameter Summary: The parametric u,v selection point on FaceA close to the edge to fillet
Parameter: faceB (BrepFace)
Parameter Summary: the second face to use constructing the fillet
Parameter: uvB (Point2d)
Parameter Summary: The parametric u,v selection point on FaceB close to the edge to fillet
Parameter: radius (double)
Parameter Summary: The radius of the fillet
Parameter: tolerance (double)
Parameter Summary: Tolerance to use in fitting a solution
Parameter: trimmedBrepsA (List<Brep>)
Parameter Summary: if bTrim = true, returns the remains of FaceA trimmed to the fillet
Parameter: trimmedBrepsB (List<Brep>)
Parameter Summary: if bTrim = true, the remains of FaceB trimmed to the fillet
Parameter: rail_degree (int)
Parameter Summary: the degree of the rail curve
Parameter: bTrim (bool)
Parameter Summary: if True, trim the faces and retuen those results in resultsA and resultsB
Parameter: bExtend (bool)
Parameter Summary: if True and if one input surface is longer than the other, the fillet surface is extended to the input surface edges
Parameter: Fillets (List<Brep>)
Parameter Summary: the resulting fillet surfaces

Method: Rhino.Geometry.SurfaceFilletBase.ChangeFilletRadius(double radius)
Return: bool
Modifiers: protected
Summary: This will clear out the existing rails and fillet surfaces, and redo the offset intersections, etc.
Parameter: radius (double)
Parameter Summary: The new radius

Method: Rhino.Geometry.SurfaceFilletBase.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.SurfaceFilletBase.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.SurfaceFilletBase.G2ChordalQuintic(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.IsInitialized()
Return: bool
Modifiers: public
Summary: Check to see if the fillet is properly initialized. If it is not, then the selected curves, surfaces, and/or radius must be adjusted in some way before creating the fillet

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalCubic(int railDegree, double TanSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalCubicArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuartic(int railDegree, double TanSlider, double InnerSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: InnerSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the inner control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuarticArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuintic(int railDegree, double TanSlider, double InnerSlider, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: TanSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the tangent control points.
Parameter: InnerSlider (double)
Parameter Summary: A number from -1 to 1 indicating how far towards the theoretical rational midpoint to adjust the inner control points.
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.NonRationalQuinticArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.RationalArcs(int railDegree, bool bExtend, List<Brep> Fillets)
Return: bool
Modifiers: public
Summary: make fillet surfaces and hack them up to active pieces. Adjusts cross sections
Parameter: railDegree (int)
Parameter Summary: The degree of the rail
Parameter: bExtend (bool)
Parameter Summary: If true, when one input surface is longer than the other, the fillet surface is extended to the input surface edges.
Parameter: Fillets (List<Brep>)
Parameter Summary: the fillet8s that were created

Method: Rhino.Geometry.SurfaceFilletBase.TrimBreps(bool bExtend, List<Brep> TrimmedBreps0, List<Brep> TrimmedBreps1)
Return: bool
Modifiers: public
Summary: If the two input breps are the same, TrimmedBreps[1] will be empty. The constructor idoes everything necessary for this to be called. Calles to the various fillet creation members will not change the result.

Class: Rhino.Geometry.SurfaceProxy
Summary: Provides a base class to brep faces and other surface proxies.

Constructor: Rhino.Geometry.SurfaceProxy.SurfaceProxy()
Summary: Protected constructor for internal use.

Class: Rhino.Geometry.SweepOneRail
Summary: Utility class for generating Breps by sweeping cross section curves over a single rail curve. Note, this class has been superseded by the Rhino.Geometry.Brep.CreateFromSweep static functions.

Constructor: Rhino.Geometry.SweepOneRail.SweepOneRail()

Property: Rhino.Geometry.SweepOneRail.AngleToleranceRadians
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.ClosedSweep
Return: bool
Modifiers: public
Summary: If the input rail is closed, ClosedSweep determines if the swept breps will also be closed.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.GlobalShapeBlending
Return: bool
Modifiers: public
Summary: If true, the sweep is linearly blended from one end to the other, creating sweeps that taper from one cross-section curve to the other. If false, the sweep stays constant at the ends and changes more rapidly in the middle.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.IsFreeform
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlike
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlikeFront
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlikeTop
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.IsRoadlineRight
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Geometry.SweepOneRail.MiterType
Return: int
Modifiers: public
Summary: 0: don't miter,  1: intersect surfaces and trim sweeps,  2: rotate shapes at kinks and don't trim.
Accessors: get set

Property: Rhino.Geometry.SweepOneRail.SweepTolerance
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, Curve crossSection, double crossSectionParameter)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, Curve crossSection)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweep(Curve rail, IEnumerable<Curve> crossSections)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, Curve crossSection, double crossSectionParameter, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, Curve crossSection, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRebuild(Curve rail, IEnumerable<Curve> crossSections, int rebuildCount)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, Curve crossSection, double crossSectionParameter, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, Curve crossSection, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, IEnumerable<Curve> crossSections, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.PerformSweepRefit(Curve rail, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters, double refitTolerance)
Return: Brep[]
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetRoadlikeUpDirection(Vector3d up)
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeFront()
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeRight()
Return: void
Modifiers: public

Method: Rhino.Geometry.SweepOneRail.SetToRoadlikeTop()
Return: void
Modifiers: public

Class: Rhino.Geometry.SweepTwoRail
Summary: Utility class for generating Breps by sweeping cross section curves over two rail curves. Note, this class has been superseded by the Rhino.Geometry.Brep.CreateFromSweep static functions.

Constructor: Rhino.Geometry.SweepTwoRail.SweepTwoRail()

Property: Rhino.Geometry.SweepTwoRail.AngleToleranceRadians
Return: double
Modifiers: public
Summary: Gets or sets the angle tolerance in radians.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.AutoAdjust
Return: bool
Modifiers: public
Summary: Set to True to have shape curves adjusted, sorted, and matched automatically. This will produce results comparable to Rhino's Sweep2 command. Set to False to not have shape curves adjusted, sorted, and matched automatically.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.ClosedSweep
Return: bool
Modifiers: public
Summary: If the input rails are closed, ClosedSweep determines if the swept Breps will also be closed.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.MaintainHeight
Return: bool
Modifiers: public
Summary: Removes the association between the height scaling from the width scaling.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.SweepTolerance
Return: double
Modifiers: public
Summary: Gets or sets the sweeping tolerance.
Accessors: get set

Property: Rhino.Geometry.SweepTwoRail.UseLegacySweeper
Return: bool
Modifiers: public
Summary: Set to True if you want to use the legacy, low-level sweeper found in earlier versions of Rhino.
Accessors: get set

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, Curve crossSection)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParameters1, IEnumerable<double> crossSectionParameters2)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Cross section curves.
Parameter: crossSectionParameters1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameters2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.

Method: Rhino.Geometry.SweepTwoRail.PerformSweep(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, Curve crossSection, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParametersRail1, IEnumerable<double> crossSectionParametersRail2, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: crossSectionParametersRail1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParametersRail2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRebuild(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, int rebuildCount)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: rebuildCount (int)
Parameter Summary: Rebuild point count.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, Curve crossSection, double crossSectionParameterRail1, double crossSectionParameterRail2, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: crossSectionParameterRail1 (double)
Parameter Summary: Curve parameter on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParameterRail2 (double)
Parameter Summary: Curve parameter on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, Curve crossSection, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSection (Curve)
Parameter Summary: Shape curve.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Method: Rhino.Geometry.SweepTwoRail.PerformSweepRefit(Curve rail1, Curve rail2, IEnumerable<Curve> crossSections, IEnumerable<double> crossSectionParametersRail1, IEnumerable<double> crossSectionParametersRail2, double refitTolerance)
Return: Brep[]
Modifiers: public
Summary: Sweep2 function that fits a surface through profile curves that define the surface cross-sections and two curves that defines a surface edge.
Parameter: rail1 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: rail2 (Curve)
Parameter Summary: Rail to sweep shapes along.
Parameter: crossSections (IEnumerable<Curve>)
Parameter Summary: Shape curves.
Parameter: crossSectionParametersRail1 (IEnumerable<double>)
Parameter Summary: Curve parameters on first rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: crossSectionParametersRail2 (IEnumerable<double>)
Parameter Summary: Curve parameters on second rail curve. Unused if <b>UseLegacySweeper</b> is true.
Parameter: refitTolerance (double)
Parameter Summary: Refit tolerance.

Class: Rhino.Geometry.TextDot
Summary: Represents a text dot, or an annotation entity with text that always faces the camera and always has the same size.
This class refers to the geometric element that is independent from the document.

Constructor: Rhino.Geometry.TextDot.TextDot(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization.

Constructor: Rhino.Geometry.TextDot.TextDot(string text, Point3d location)
Summary: Initializes a new text dot based on the text and the location.

Property: Rhino.Geometry.TextDot.FontFace
Return: string
Modifiers: public
Summary: Font face used for displaying the dot
Accessors: get set

Property: Rhino.Geometry.TextDot.FontHeight
Return: int
Modifiers: public
Summary: Height of font used for displaying the dot
Accessors: get set

Property: Rhino.Geometry.TextDot.Point
Return: Point3d
Modifiers: public
Summary: Gets or sets the position of the text dot.
Accessors: get set

Property: Rhino.Geometry.TextDot.SecondaryText
Return: string
Modifiers: public
Summary: Gets or sets the secondary text of the text dot.
Accessors: get set

Property: Rhino.Geometry.TextDot.Text
Return: string
Modifiers: public
Summary: Gets or sets the primary text of the text dot.
Accessors: get set

Class: Rhino.Geometry.TextEntity

Constructor: Rhino.Geometry.TextEntity.TextEntity()
Summary: Initializes a new instance of the <b>TextEntity</b> class.

Constructor: Rhino.Geometry.TextEntity.TextEntity(SerializationInfo info, StreamingContext context)
Summary: Protected constructor used in serialization

Property: Rhino.Geometry.TextEntity.Justification
Return: TextJustification
Modifiers: public
Summary: Gets or sets the justification of text in relation to its base point.
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextHorizontalAlignment
Return: TextHorizontalAlignment
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextOrientation
Return: TextOrientation
Modifiers: public
Accessors: get set

Property: Rhino.Geometry.TextEntity.TextVerticalAlignment
Return: TextVerticalAlignment
Modifiers: public
Accessors: get set

Method: Rhino.Geometry.TextEntity.Create(string text, Plane plane, DimensionStyle style, bool wrapped, double rectWidth, double rotationRadians)
Return: TextEntity
Modifiers: public, static
Summary: Create Text geometry or None if input is invalid

Method: Rhino.Geometry.TextEntity.CreateWithRichText(string richTextString, Plane plane, DimensionStyle style, bool wrapped, double rectWidth, double rotationRadians)
Return: TextEntity
Modifiers: public, static
Summary: Create RichText geometry or None if input is invalid

Method: Rhino.Geometry.TextEntity.CreateCurves(DimensionStyle dimstyle, bool allowOpen, double smallCapsScale, double spacing)
Return: Curve[]
Modifiers: public
Summary: Returns the outline curves.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: 
Parameter: allowOpen (bool)
Parameter Summary: Set to True to prevent forced closing of open curves retrieved from glyphs.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateCurvesGrouped(DimensionStyle dimstyle, bool allowOpen, double smallCapsScale, double spacing)
Return: System.Collections.Generic.List<Curve[]>
Modifiers: public
Summary: Creates planar curve from text outline curves. Curves are grouped such that each element in the list being returned represents a single character.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: 
Parameter: allowOpen (bool)
Parameter Summary: Set to True to prevent forced closing of open curves retrieved from glyphs.
Parameter: smallCapsScale (double)
Parameter Summary: 
Parameter: spacing (double)
Parameter Summary:

Method: Rhino.Geometry.TextEntity.CreateExtrusions(DimensionStyle dimstyle, double height, double smallCapsScale, double spacing)
Return: Extrusion[]
Modifiers: public
Summary: Creates extrusions from the outline curves with specified height.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: 
Parameter: height (double)
Parameter Summary: Height in direction perpendicular to plane of text.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateExtrusionsGrouped(DimensionStyle dimstyle, double smallCapsScale, double height, double spacing)
Return: System.Collections.Generic.List<Extrusion[]>
Modifiers: public
Summary: Creates 3d Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.CreatePolySurfaces(DimensionStyle dimstyle, double height, double smallCapsScale, double spacing)
Return: Brep[]
Modifiers: public
Summary: Creates breps from the outline curves with specified height.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: 
Parameter: height (double)
Parameter Summary: Height in direction perpendicular to plane of text.
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreatePolysurfacesGrouped(DimensionStyle dimstyle, double smallCapsScale, double height, double spacing)
Return: System.Collections.Generic.List<Brep[]>
Modifiers: public
Summary: Creates 3d Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.CreateSurfaces(DimensionStyle dimstyle, double smallCapsScale, double spacing)
Return: Brep[]
Modifiers: public
Summary: Creates planar breps from the outline curves.
Parameter: dimstyle (DimensionStyle)
Parameter Summary: 
Parameter: smallCapsScale (double)
Parameter Summary: Set to create small caps out of lower case letters.
Parameter: spacing (double)
Parameter Summary: Set to add additional spacing between glyph output.

Method: Rhino.Geometry.TextEntity.CreateSurfacesGrouped(DimensionStyle dimstyle, double smallCapsScale, double spacing)
Return: System.Collections.Generic.List<Brep[]>
Modifiers: public
Summary: Creates planar Breps from text outline curves. Breps are grouped such that each element in the list being returned represents a single character.

Method: Rhino.Geometry.TextEntity.Explode()
Return: Curve[]
Modifiers: public
Summary: Explodes this text entity into an array of curves.

Method: Rhino.Geometry.TextEntity.GetTextTransform(double textscale, DimensionStyle dimstyle)
Return: Transform
Modifiers: public
Summary: Get the transform for this text object's text geometry

Method: Rhino.Geometry.TextEntity.Transform(Transform transform, DimensionStyle style)
Return: bool
Modifiers: public
Summary: Transform the object by a 4x4 transform matrix and change text height override to accommodate scaling in the transform if necessary
Parameter: transform (Transform)
Parameter Summary: An Transform with the transformation information
Parameter: style (DimensionStyle)
Parameter Summary:

Class: Rhino.Geometry.Unroller
Summary: Represents the operation of unrolling a single surface.

Constructor: Rhino.Geometry.Unroller.Unroller(Brep brep)
Summary: Initializes a new instance of the <b>Unroller</b> class with a brep.

Constructor: Rhino.Geometry.Unroller.Unroller(Surface surface)
Summary: Initializes a new instance of the <b>Unroller</b> class with surface.

Property: Rhino.Geometry.Unroller.AbsoluteTolerance
Return: double
Modifiers: public
Summary: Gets or sets the absolute tolerance for the unrolling operation.
Absolute tolerance is used in the evaluation of new entities,     such as intersections, re-projections and splits.
In the current implementation, absolute tolerance is used      in tessellating rails, fitting curves and pulling back trims. | Since: 5.0 | Accessors: get set

Property: Rhino.Geometry.Unroller.ExplodeOutput
Return: bool
Modifiers: public
Summary: Gets or sets a value determining whether geometry should be exploded.
Accessors: get set

Property: Rhino.Geometry.Unroller.ExplodeSpacing
Return: double
Modifiers: public
Summary: Gets or sets a value determining whether spacing should be exploded.
Accessors: get set

Property: Rhino.Geometry.Unroller.RelativeTolerance
Return: double
Modifiers: public
Summary: Gets or sets the relative tolerance for the unrolling operation.
Relative tolerance is used in the evaluation of intrinsic properties,     such as computations "along" the surface or brep.
In the current implementation, relative tolerance is used to decide     if a surface is flat enough to try to unroll. That helps ease the scale dependency.     The surface has to be linear in one direction within (length * RelativeTolerance)     to be considered linear for that purpose. Otherwise smash will ignore that tolerance and     unroll anything. | Since: 5.0 | Accessors: get set

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Curve curve)
Return: void
Modifiers: public
Summary: Adds a curve that should be unrolled along with the surface/brep.
Parameter: curve (Curve)
Parameter Summary: The curve.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Curve> curves)
Return: void
Modifiers: public
Summary: Adds curves that should be unrolled along with the surface/brep.
Parameter: curves (IEnumerable<Curve>)
Parameter Summary: An array, a list or any enumerable set of curves.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Point3d> dotLocations, IEnumerable<string> dotText)
Return: void
Modifiers: public
Summary: Adds text dots that should be unrolled along with the surface/brep.
Parameter: dotLocations (IEnumerable<Point3d>)
Parameter Summary: An array, a list, or any enumerable set of dot locations.
Parameter: dotText (IEnumerable<string>)
Parameter Summary: An array, a list, or any enumerable set of dot strings.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<Point3d> points)
Return: void
Modifiers: public
Summary: Adds points that should be unrolled along with the surface/brep.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: An array, a list or any enumerable set of points.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(IEnumerable<TextDot> dots)
Return: void
Modifiers: public
Summary: Adds text dots that should be unrolled along with the surface/brep.
Parameter: dots (IEnumerable<TextDot>)
Parameter Summary: An array, a list or any enumerable set of text dots.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point point)
Return: void
Modifiers: public
Summary: Adds a point that should be unrolled along with the surface/brep.
Parameter: point (Point)
Parameter Summary: A point.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point3d dotLocation, string dotText)
Return: void
Modifiers: public
Summary: Adds a text dot that should be unrolled along with the surface/brep.
Parameter: dotLocation (Point3d)
Parameter Summary: A dot point.
Parameter: dotText (string)
Parameter Summary: A dot text.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(Point3d point)
Return: void
Modifiers: public
Summary: Adds a point that should be unrolled along with the surface/brep.
Parameter: point (Point3d)
Parameter Summary: A point.

Method: Rhino.Geometry.Unroller.AddFollowingGeometry(TextDot dot)
Return: void
Modifiers: public
Summary: Adds a text dot that should be unrolled along with the surface/brep.
Parameter: dot (TextDot)
Parameter Summary: A text dot.

Method: Rhino.Geometry.Unroller.FollowingGeometryIndex(Curve curve)
Return: int
Modifiers: public
Summary: Given an unrolled curve, returns the index of the source, or following curve.
Parameter: curve (Curve)
Parameter Summary: An unrolled curve returned by Unroller.PerformUnroll.

Method: Rhino.Geometry.Unroller.FollowingGeometryIndex(TextDot dot)
Return: int
Modifiers: public
Summary: Given an unrolled text dot, returns the index of the source, or following text dot.
Parameter: dot (TextDot)
Parameter Summary: An unrolled text dot returned by Unroller.PerformUnroll.

Method: Rhino.Geometry.Unroller.PerformUnroll(List<Brep> flatbreps)
Return: int
Modifiers: public
Summary: Executes unrolling operations.
Parameter: flatbreps (List<Brep>)
Parameter Summary: List of breps containing flattened results.

Method: Rhino.Geometry.Unroller.PerformUnroll(out Curve[] unrolledCurves, out Point3d[] unrolledPoints, out TextDot[] unrolledDots)
Return: Brep[]
Modifiers: public
Summary: Executes unrolling operations.
Parameter: unrolledCurves (Curve[])
Parameter Summary: An array of unrolled curves is assigned during the call in this out parameter.
Parameter: unrolledPoints (Point3d[])
Parameter Summary: An array of unrolled points is assigned during the call in this out parameter.
Parameter: unrolledDots (TextDot[])
Parameter Summary: An array of unrolled text dots is assigned during the call in this out parameter.

Class: Rhino.Geometry.VolumeMassProperties
Summary: Contains static initialization methods and allows access to the computed metrics of volume, volume centroid and volume moments in in solid meshes, in solid surfaces and in solid (closed) boundary representations.

Constructor: Rhino.Geometry.VolumeMassProperties.VolumeMassProperties()
Summary: Initializes a new instance of the VolumeMassProperties class

Property: Rhino.Geometry.VolumeMassProperties.Centroid
Return: Point3d
Modifiers: public
Summary: Gets the volume centroid in the world coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: Moments of inertia with respect to centroid coordinate system. X = integral of ((y-y0)^2 + (z-z0)^2) dm Y = integral of ((z-z0)^2 + (x-x0)^2) dm Z = integral of ((z-z0)^2 + (y-y0)^2) dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in product moments with respect to centroid coordinate system.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to centroid coordinate system. X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M) Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M) Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M) where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Second moments with respect to centroid coordinate system. X = integral of (x-x0)^2 dm Y = integral of (y-y0)^2 dm Z = integral of (z-z0)^2 dm where (x0,y0,z0) = centroid.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in centroid coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.CentroidError
Return: Vector3d
Modifiers: public
Summary: Gets the uncertainty in the Centroid calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.Volume
Return: double
Modifiers: public
Summary: Gets the volume solution.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.VolumeError
Return: double
Modifiers: public
Summary: Gets the uncertainty in the volume calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate first moments if they were able to be calculated. X is integral of "x dm" over the volume Y is integral of "y dm" over the volume Z is integral of "z dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates first moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertia
Return: Vector3d
Modifiers: public
Summary: The moments of inertia about the world coordinate axes. X = integral of (y^2 + z^2) dm Y = integral of (z^2 + x^2) dm Z = integral of (z^2 + y^2) dm.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertiaError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates moments of inertia calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate product moments if they were able to be calculated. X is integral of "xy dm" over the volume Y is integral of "yz dm" over the volume Z is integral of "zx dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesRadiiOfGyration
Return: Vector3d
Modifiers: public
Summary: Radii of gyration with respect to world coordinate system. X = sqrt(integral of (y^2 + z^2) dm/M) Y = sqrt(integral of (z^2 + x^2) dm/M) Z = sqrt(integral of (z^2 + y^2) dm/M)
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMoments
Return: Vector3d
Modifiers: public
Summary: Returns the world coordinate second moments if they were able to be calculated. X is integral of "xx dm" over the volume Y is integral of "yy dm" over the volume Z is integral of "zz dm" over the volume.
Accessors: get

Property: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMomentsError
Return: Vector3d
Modifiers: public
Summary: Uncertainty in world coordinates second moments calculation.
Accessors: get

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep, bool volume, bool firstMoments, bool secondMoments, bool productMoments, double relativeTolerance, double absoluteTolerance)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.
Parameter: relativeTolerance (double)
Parameter Summary: The relative tolerance used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.
Parameter: absoluteTolerance (double)
Parameter Summary: The absolute tolerancwe used for the calculation. In overloads of this function where tolerances are not specified, 1.0e-6 is used.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Brep brep)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Brep.
Parameter: brep (Brep)
Parameter Summary: Brep to measure.

Method: Rhino.Geometry.VolumeMassProperties.Compute(IEnumerable<GeometryBase> geometry, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Computes the VolumeMassProperties for a collection of geometric objects. At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the volume computation.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(IEnumerable<GeometryBase> geometry)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Computes the VolumeMassProperties for a collection of geometric objects. At present only Breps, Surfaces, and Meshes are supported.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Objects to include in the volume computation.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Mesh mesh, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Mesh mesh)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Mesh.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to measure.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Surface surface, bool volume, bool firstMoments, bool secondMoments, bool productMoments)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.
Parameter: volume (bool)
Parameter Summary: True to calculate volume.
Parameter: firstMoments (bool)
Parameter Summary: True to calculate volume first moments, volume, and volume centroid.
Parameter: secondMoments (bool)
Parameter Summary: True to calculate volume second moments.
Parameter: productMoments (bool)
Parameter Summary: True to calculate volume product moments.

Method: Rhino.Geometry.VolumeMassProperties.Compute(Surface surface)
Return: VolumeMassProperties
Modifiers: public, static
Summary: Compute the VolumeMassProperties for a single Surface.
Parameter: surface (Surface)
Parameter Summary: Surface to measure.

Method: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of the moments matrix with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to centroid coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.VolumeMassProperties.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.VolumeMassProperties.Sum(VolumeMassProperties summand)
Return: bool
Modifiers: public
Summary: Sum mass properties together to get an aggregate mass.
Parameter: summand (VolumeMassProperties)
Parameter Summary: mass properties to add.

Method: Rhino.Geometry.VolumeMassProperties.Transform(Transform xform)
Return: bool
Modifiers: public
Summary: On input, this contains the mass properties for some geometry G. On exit, this contains the mass properties for the transformed geometry xform(G).
Parameter: xform (Transform)
Parameter Summary: The transformation. When computing volumne mass properties, transform must be an affine transformation, or <b>Geometry.Transform.IsAffine</b> . When computing area mass properties, transform must be a similarity transformation, or <b>Geometry.Transform.IsSimilarity</b> . Perspective transformations are not allowed.

Method: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMoments(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the eigenvalues and eigenvectors of moments matrix in world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

Method: Rhino.Geometry.VolumeMassProperties.WorldCoordinatesPrincipalMomentsOfInertia(out double x, out Vector3d xaxis, out double y, out Vector3d yaxis, out double z, out Vector3d zaxis)
Return: bool
Modifiers: public
Summary: Calculates the principal moments of inertia and principal axes with respect to world coordinates.
Parameter: x (double)
Parameter Summary: Principal moment.
Parameter: xaxis (Vector3d)
Parameter Summary: Principal axis for x.
Parameter: y (double)
Parameter Summary: Principal moment.
Parameter: yaxis (Vector3d)
Parameter Summary: Principal axis for y.
Parameter: z (double)
Parameter Summary: Principal moment.
Parameter: zaxis (Vector3d)
Parameter Summary: Principal axis for z.

# Namespace: Rhino.Geometry.Collections

Class: Rhino.Geometry.Collections.BrepCurveList
Summary: Provides access to all the underlying curves in a Brep object.

Property: Rhino.Geometry.Collections.BrepCurveList.Count
Return: int
Modifiers: public
Summary: Gets the number of curves in this list.
Accessors: get

Property: Rhino.Geometry.Collections.BrepCurveList.this[int index]
Return: Curve
Modifiers: public
Summary: Gets the Curve at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepCurveList.Add(Curve curve)
Return: int
Modifiers: public
Summary: Adds a curve
Parameter: curve (Curve)
Parameter Summary: A copy of the curve is added to this brep

Method: Rhino.Geometry.Collections.BrepCurveList.GetEnumerator()
Return: IEnumerator<Curve>
Modifiers: public
Summary: Get an enumerator that visits all curves.

Class: Rhino.Geometry.Collections.BrepEdgeList
Summary: Provides access to all the Edges in a Brep object.

Property: Rhino.Geometry.Collections.BrepEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep edges.
Accessors: get

Property: Rhino.Geometry.Collections.BrepEdgeList.this[int index]
Return: BrepEdge
Modifiers: public
Summary: Gets the BrepEdge at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(BrepVertex startVertex, BrepVertex endVertex, int curve3dIndex, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(BrepVertex startVertex, BrepVertex endVertex, int curve3dIndex, Interval subDomain, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int startVertexIndex, int endVertexIndex, int curve3dIndex, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int startVertexIndex, int endVertexIndex, int curve3dIndex, Interval subDomain, double edgeTolerance)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.Add(int curve3dIndex)
Return: BrepEdge
Modifiers: public
Summary: Create and add a new edge to this list

Method: Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator()
Return: IEnumerator<BrepEdge>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Method: Rhino.Geometry.Collections.BrepEdgeList.MergeAllEdges(double angleTolerance)
Return: int
Modifiers: public
Summary: Merges all possible Brep edges. Edges across kinks cannot be merged. A pair of adjacent edges in a Brep  are mergeable if the angle between them is less than tolerance and the valence of the shared vertex is 2.
Parameter: angleTolerance (double)
Parameter Summary: The maximum allowable difference of angle in radian between adjacent edges that can be merged.

Method: Rhino.Geometry.Collections.BrepEdgeList.MergeEdge(int edgeIndex, double angleTolerance)
Return: int
Modifiers: public
Summary: Merge adjacent edges to a specified edge recursively. A pair of adjacent edges in a Brep  are mergeable if the angle between them is less than tolerance and the valence of the shared vertex is 2.
Parameter: edgeIndex (int)
Parameter Summary: >Index of edge to merge.
Parameter: angleTolerance (double)
Parameter Summary: The maximum allowable difference of angle in radian between adjacent edges that can be merged.

Method: Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(double tolerance, bool cleanUp)
Return: int
Modifiers: public
Summary: Finds any naked edges with the same start and end vertex and an arc-length less than tolerance and attempts to remove them by removing trims and extending the adjacent to meet.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.
Parameter: cleanUp (bool)
Parameter Summary: If true, then the method cleans up the Brep by setting tolerances, boxes, flags, and then compacts. If false, then the caller should do this at some point.

Method: Rhino.Geometry.Collections.BrepEdgeList.RemoveNakedMicroEdges(double tolerance)
Return: int
Modifiers: public
Summary: Finds any naked edges with the same start and end vertex and an arc-length less than tolerance and attempts to remove them by removing trims and extending the adjacent to meet.
Parameter: tolerance (double)
Parameter Summary: The tolerance. When in doubt, use the document's model absolute tolerance.

Method: Rhino.Geometry.Collections.BrepEdgeList.SplitEdgeAtParameters(int edgeIndex, IEnumerable<double> edgeParameters)
Return: int
Modifiers: public
Summary: Splits an edge at the specified parameters.
Parameter: edgeIndex (int)
Parameter Summary: The index of the edge to be addressed.
Parameter: edgeParameters (IEnumerable<double>)
Parameter Summary: The parameter along that edge.

Method: Rhino.Geometry.Collections.BrepEdgeList.SplitKinkyEdge(int edgeIndex, double kinkToleranceRadians)
Return: bool
Modifiers: public
Summary: Splits the edge into G1 pieces.
Parameter: edgeIndex (int)
Parameter Summary: Index of edge to test and split.
Parameter: kinkToleranceRadians (double)
Parameter Summary: The split tolerance in radians.

Class: Rhino.Geometry.Collections.BrepFaceList
Summary: Provides access to all the Faces in a Brep object.

Property: Rhino.Geometry.Collections.BrepFaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep faces.
Accessors: get

Property: Rhino.Geometry.Collections.BrepFaceList.this[int index]
Return: BrepFace
Modifiers: public
Summary: Gets the BrepFace at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepFaceList.Add(int surfaceIndex)
Return: BrepFace
Modifiers: public
Summary: Create and add a new face to this list. An incomplete face is added. The caller must create and fill in the loops used by the face.
Parameter: surfaceIndex (int)
Parameter Summary: index of surface in brep's Surfaces list

Method: Rhino.Geometry.Collections.BrepFaceList.Add(Surface surface)
Return: BrepFace
Modifiers: public
Summary: Add a new face to a brep.  This creates a complete face with new vertices at the surface corners, new edges along the surface boundary, etc.  The loop of the returned face has four trims that correspond to the south, east, north, and west side of the surface in that order.  If you use this version of Add to add an exiting brep, then you are responsible for using a tool like JoinEdges() to hook the new face to its neighbors.
Parameter: surface (Surface)
Parameter Summary: surface is copied

Method: Rhino.Geometry.Collections.BrepFaceList.AddConeFace(BrepVertex vertex, BrepEdge edge, bool revEdge)
Return: BrepFace
Modifiers: public
Summary: Add a new face to the brep whose surface geometry is a ruled cone with the edge as the base and the vertex as the apex point.
Parameter: vertex (BrepVertex)
Parameter Summary: The apex of the cone will be at this vertex. The north side of the surface's parameter space will be a singular point at the vertex.
Parameter: edge (BrepEdge)
Parameter Summary: The south side of the face's surface will run along this edge.
Parameter: revEdge (bool)
Parameter Summary: True if the new face's outer boundary orientation along the edge is opposite the orientation of edge.

Method: Rhino.Geometry.Collections.BrepFaceList.AddRuledFace(BrepEdge edgeA, bool revEdgeA, BrepEdge edgeB, bool revEdgeB)
Return: BrepFace
Modifiers: public
Summary: Add a new face to the brep whose surface geometry is a ruled surface between two edges.
Parameter: edgeA (BrepEdge)
Parameter Summary: The south side of the face's surface will run along edgeA.
Parameter: revEdgeA (bool)
Parameter Summary: True if the new face's outer boundary orientation along edgeA is opposite the orientation of edgeA.
Parameter: edgeB (BrepEdge)
Parameter Summary: The north side of the face's surface will run along edgeA
Parameter: revEdgeB (bool)
Parameter Summary: True if the new face's outer boundary orientation along edgeB is opposite the orientation of edgeB

Method: Rhino.Geometry.Collections.BrepFaceList.ExtractFace(int faceIndex)
Return: Brep
Modifiers: public
Summary: Extracts a face from a Brep.
Parameter: faceIndex (int)
Parameter Summary: A face index

Method: Rhino.Geometry.Collections.BrepFaceList.Flip(bool onlyReversedFaces)
Return: void
Modifiers: public
Summary: Flips the orientation of faces.
Parameter: onlyReversedFaces (bool)
Parameter Summary: If true, clears all BrepFace.OrientationIsReversed flags by calling BrepFace.Transpose() on each face with a True OrientationIsReversed setting. If false, all of the faces are flipped regardless of their orientation.

Method: Rhino.Geometry.Collections.BrepFaceList.GetEnumerator()
Return: IEnumerator<BrepFace>
Modifiers: public
Summary: Gets an enumerators that yields <b>BrepFace</b> objects.

Method: Rhino.Geometry.Collections.BrepFaceList.RemoveAt(int faceIndex)
Return: void
Modifiers: public
Summary: Deletes a face at a specified index.
Parameter: faceIndex (int)
Parameter Summary: The index of the mesh face.

Method: Rhino.Geometry.Collections.BrepFaceList.RemoveSlits()
Return: bool
Modifiers: public
Summary: Remove slit trims and slit boundaries from each face.

Method: Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces()
Return: bool
Modifiers: public
Summary: Shrinks all the underlying surfaces in this Brep. Sometimes the surfaces extend far beyond the trimming boundaries of the Brep Face. This function will remove those portions of the surfaces that are not used.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitBipolarFaces()
Return: bool
Modifiers: public
Summary: Splits surfaces with two singularities, like spheres, so the results have at most one singularity.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitClosedFaces(int minimumDegree)
Return: bool
Modifiers: public
Summary: Splits closed surfaces so they are not closed.
Parameter: minimumDegree (int)
Parameter Summary: If the degree of the surface < min_degree, the surface is not split. In some cases, minimumDegree = 2 is useful to preserve piecewise linear surfaces.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitFaceAtTangents(int faceIndex)
Return: bool
Modifiers: public
Summary: Splits the face of a Brep at tangent locations.
Parameter: faceIndex (int)
Parameter Summary: The index of the face to split.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitFacesAtTangents()
Return: bool
Modifiers: public
Summary: Splits all of the faces of a Brep at tangent locations.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFace(int faceIndex, double kinkTolerance)
Return: bool
Modifiers: public
Summary: Splits a single face into G1 pieces.
Parameter: faceIndex (int)
Parameter Summary: The index of the face to split.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces()
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(double kinkTolerance, bool compact)
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.
Parameter: compact (bool)
Parameter Summary: If true, the Brep will be compacted if possible.

Method: Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(double kinkTolerance)
Return: bool
Modifiers: public
Summary: Splits any faces with creases into G1 pieces.
Parameter: kinkTolerance (double)
Parameter Summary: Tolerance (in radians) to use for crease detection.

Method: Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurface(int faceIndex)
Return: bool
Modifiers: public
Summary: Standardizes the relationship between a BrepFace and the 3d surface it uses.  When done, the face will be the only face that references its 3d surface, and the orientations of the face and 3d surface will be the same.
Parameter: faceIndex (int)
Parameter Summary: The index of the face.

Method: Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurfaces()
Return: void
Modifiers: public
Summary: Standardize all faces in the brep.

Class: Rhino.Geometry.Collections.BrepLoopList
Summary: Provides access to all the Loops in a Brep object.

Property: Rhino.Geometry.Collections.BrepLoopList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep loops.
Accessors: get

Property: Rhino.Geometry.Collections.BrepLoopList.this[int index]
Return: BrepLoop
Modifiers: public
Summary: Gets the BrepLoop at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepLoopList.Add(BrepLoopType loopType, BrepFace face)
Return: BrepLoop
Modifiers: public
Summary: Create a new boundary loop on a face.  After you get this BrepLoop, you still need to create the vertices, edges, and trims that define the loop.

Method: Rhino.Geometry.Collections.BrepLoopList.Add(BrepLoopType loopType)
Return: BrepLoop
Modifiers: public
Summary: Create a new empty boundary loop. The new loop will not be part of a face and will not include any trim curves.

Method: Rhino.Geometry.Collections.BrepLoopList.AddOuterLoop(int faceIndex)
Return: BrepLoop
Modifiers: public
Summary: Create a new outer boundary loop that runs along the sides of the face's surface.  All the necessary trims, edges, and vertices are created and added to the brep.
Parameter: faceIndex (int)
Parameter Summary: index of face that needs an outer boundary that runs along the sides of its surface.

Method: Rhino.Geometry.Collections.BrepLoopList.AddPlanarFaceLoop(int faceIndex, BrepLoopType loopType, IEnumerable<Curve> boundaryCurves)
Return: BrepLoop
Modifiers: public
Summary: Add a planar trimming loop to a planar face
Parameter: faceIndex (int)
Parameter Summary: index of planar face.  The underlying surface must be a PlaneSurface
Parameter: loopType (BrepLoopType)
Parameter Summary: type of loop to add.  If loopType is Unknown, then the loop direction is tested and the new loops type will be set to Outer or Inner. If the loopType is Outer, then the direction of the new loop is tested and flipped if it is clockwise. If the loopType is Inner, then the direction of the new loop is tested and flipped if it is counter-clockwise.
Parameter: boundaryCurves (IEnumerable<Curve>)
Parameter Summary: list of 3d curves that form a simple (no self intersections) closed curve.  These curves define the 3d edge geometry and should be near the planar surface.

Method: Rhino.Geometry.Collections.BrepLoopList.GetEnumerator()
Return: IEnumerator<BrepLoop>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Class: Rhino.Geometry.Collections.BrepSurfaceList
Summary: Provides access to all the underlying surfaces in a Brep object.

Property: Rhino.Geometry.Collections.BrepSurfaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of surfaces in a brep.
Accessors: get

Property: Rhino.Geometry.Collections.BrepSurfaceList.this[int index]
Return: Surface
Modifiers: public
Summary: Gets the Surface at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator()
Return: IEnumerator<Surface>
Modifiers: public
Summary: Gets an enumerator that visits all surfaces.

Class: Rhino.Geometry.Collections.BrepTrimList
Summary: Provides access to all the Trims in a Brep object

Property: Rhino.Geometry.Collections.BrepTrimList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep trims.
Accessors: get

Property: Rhino.Geometry.Collections.BrepTrimList.this[int index]
Return: BrepTrim
Modifiers: public
Summary: Gets the BrepTrim at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepTrimList.Add(bool rev3d, BrepEdge edge, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this trim
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(bool rev3d, BrepLoop loop, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(BrepEdge edge, bool rev3d, BrepLoop loop, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep.
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this trim
Parameter: rev3d (bool)
Parameter Summary: True if the edge and trim have opposite directions
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.Add(int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new trim that will be part of an inner, outer, or slit loop to the brep.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.AddCurveOnFace(BrepFace face, BrepEdge edge, bool rev3d, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new curve on face to the brep
Parameter: face (BrepFace)
Parameter Summary: face that curve lies on
Parameter: edge (BrepEdge)
Parameter Summary: 3d edge associated with this curve on surface
Parameter: rev3d (bool)
Parameter Summary: True if the 3d edge and the 2d parameter space curve have opposite directions.
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d curve in face's parameter space

Method: Rhino.Geometry.Collections.BrepTrimList.AddSingularTrim(BrepVertex vertex, BrepLoop loop, IsoStatus iso, int curve2dIndex)
Return: BrepTrim
Modifiers: public
Summary: Add a new singular trim to the brep.
Parameter: vertex (BrepVertex)
Parameter Summary: vertex along collapsed surface edge
Parameter: loop (BrepLoop)
Parameter Summary: trim is appended to this loop
Parameter: iso (IsoStatus)
Parameter Summary: 
Parameter: curve2dIndex (int)
Parameter Summary: index of 2d trimming curve

Method: Rhino.Geometry.Collections.BrepTrimList.GetEnumerator()
Return: IEnumerator<BrepTrim>
Modifiers: public
Summary: Gets an enumerator that visits all edges.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds()
Return: bool
Modifiers: public
Summary: Matches the endpoints of all trims in the Brep.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(BrepLoop loop)
Return: bool
Modifiers: public
Summary: Match the endpoints of all trims in a loop.
Parameter: loop (BrepLoop)
Parameter Summary: The Brep loop.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(BrepTrim trim0, BrepTrim trim1)
Return: bool
Modifiers: public
Summary: Match the end of a trim to the start of the next trim.
Parameter: trim0 (BrepTrim)
Parameter Summary: The Brep trim.
Parameter: trim1 (BrepTrim)
Parameter Summary: Brep trim that comes immediately after trim0 in the same loop.

Method: Rhino.Geometry.Collections.BrepTrimList.MatchEnds(int trimIndex)
Return: bool
Modifiers: public
Summary: Match the endpoints of a trim to the next and previous trim.

Class: Rhino.Geometry.Collections.BrepVertexList
Summary: Provides access to all the Vertices in a Brep object

Property: Rhino.Geometry.Collections.BrepVertexList.Count
Return: int
Modifiers: public
Summary: Gets the number of brep vertices.
Accessors: get

Property: Rhino.Geometry.Collections.BrepVertexList.this[int index]
Return: BrepVertex
Modifiers: public
Summary: Gets the BrepVertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.BrepVertexList.Add()
Return: BrepVertex
Modifiers: public
Summary: Create and add a new vertex to this list

Method: Rhino.Geometry.Collections.BrepVertexList.Add(Point3d point, double vertexTolerance)
Return: BrepVertex
Modifiers: public
Summary: Create and add a new vertex to this list
Parameter: point (Point3d)
Parameter Summary: 
Parameter: vertexTolerance (double)
Parameter Summary: Use RhinoMath.UnsetTolerance if you are unsure

Method: Rhino.Geometry.Collections.BrepVertexList.AddPointOnFace(BrepFace face, double s, double t)
Return: BrepVertex
Modifiers: public
Summary: Adds a new point on face to the brep
Parameter: face (BrepFace)
Parameter Summary: face that vertex lies on
Parameter: s (double)
Parameter Summary: surface parameters
Parameter: t (double)
Parameter Summary: surface parameters

Method: Rhino.Geometry.Collections.BrepVertexList.GetEnumerator()
Return: IEnumerator<BrepVertex>
Modifiers: public
Summary: Gets an enumerator that visits all surfaces.

Class: Rhino.Geometry.Collections.MeshFaceList
Summary: Provides access to the faces and Face related functionality of a Mesh.

Property: Rhino.Geometry.Collections.MeshFaceList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of mesh triangles and quads the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh faces. When getting this can includes invalid faces.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceList.QuadCount
Return: int
Modifiers: public
Summary: Gets the number of faces that are valid quads (4 corners).
Accessors: get

Property: Rhino.Geometry.Collections.MeshFaceList.TriangleCount
Return: int
Modifiers: public
Summary: Gets the number of faces that are valid triangles (3 corners).
Accessors: get

Property: Rhino.Geometry.Collections.MeshFaceList.this[int index]
Return: MeshFace
Modifiers: public
Summary: Returns the mesh face at the given index.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(int vertex1, int vertex2, int vertex3, int vertex4)
Return: int
Modifiers: public
Summary: Appends a new quadrangular face to the end of the mesh face list.
Parameter: vertex1 (int)
Parameter Summary: Index of first face corner.
Parameter: vertex2 (int)
Parameter Summary: Index of second face corner.
Parameter: vertex3 (int)
Parameter Summary: Index of third face corner.
Parameter: vertex4 (int)
Parameter Summary: Index of fourth face corner.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(int vertex1, int vertex2, int vertex3)
Return: int
Modifiers: public
Summary: Appends a new triangular face to the end of the mesh face list.
Parameter: vertex1 (int)
Parameter Summary: Index of first face corner.
Parameter: vertex2 (int)
Parameter Summary: Index of second face corner.
Parameter: vertex3 (int)
Parameter Summary: Index of third face corner.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFace(MeshFace face)
Return: int
Modifiers: public
Summary: Appends a new mesh face to the end of the mesh face list.
Parameter: face (MeshFace)
Parameter Summary: Face to add.

Method: Rhino.Geometry.Collections.MeshFaceList.AddFaces(IEnumerable<MeshFace> faces)
Return: int
Modifiers: public
Summary: Appends a list of faces to the end of the mesh face list.
Parameter: faces (IEnumerable<MeshFace>)
Parameter Summary: Faces to add.

Method: Rhino.Geometry.Collections.MeshFaceList.AdjacentFaces(int faceIndex)
Return: int
Modifiers: public
Summary: Gets all faces that share a topological edge with a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.Clear()
Return: void
Modifiers: public
Summary: Clears the Face list on the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertNonPlanarQuadsToTriangles(double planarTolerance, double angleToleranceRadians, int splitMethod)
Return: int
Modifiers: public
Summary: Splits non-planar quads into two triangles based on given parameters.
Parameter: planarTolerance (double)
Parameter Summary: If planarTolerance >= 0, then a quad is split if its vertices are not coplanar. If both planarTolerance = Rhino.RhinoMath.UnsetValue and angleToleranceRadians >= 0.0, then the planarity test is skipped.
Parameter: angleToleranceRadians (double)
Parameter Summary: If angleToleranceRadians >= 0.0, then a quad is split if the angle between opposite corner normals is > angleToleranceRadians. The corner normal is the normal to the triangle formed by two adjacent edges and the diagonal connecting their endpoints. A quad has four corner normals. If both angleToleranceRadians = Rhino.RhinoMath.UnsetValue and planarTolerance >= 0.0, then the corner normal angle test is skipped.
Parameter: splitMethod (int)
Parameter Summary: 0 default Currently divides along the short diagonal. This may be changed as better methods are found or preferences change. By passing zero, you let the developers of this code decide what's best for you over time. 1 divide along the short diagonal 2 divide along the long diagonal 3 minimize resulting area 4 maximize resulting area 5 minimize angle between triangle normals 6 maximize angle between triangle normals

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles()
Return: bool
Modifiers: public
Summary: Splits all quads along the short diagonal.

Method: Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(double angleToleranceRadians, double minimumDiagonalLengthRatio)
Return: bool
Modifiers: public
Summary: Joins adjacent triangles into quads if the resulting quad is 'nice'.
Parameter: angleToleranceRadians (double)
Parameter Summary: Used to compare adjacent triangles' face normals. For two triangles to be considered, the angle between their face normals has to be <= angleToleranceRadians. When in doubt use RhinoMath.PI/90.0 (2 degrees).
Parameter: minimumDiagonalLengthRatio (double)
Parameter Summary: ( <= 1.0) For two triangles to be considered the ratio of the resulting quad's diagonals (length of the shortest diagonal)/(length of longest diagonal). has to be >= minimumDiagonalLengthRatio. When in doubt us .875.

Method: Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces()
Return: int
Modifiers: public
Summary: Attempts to removes degenerate faces from the mesh.
Degenerate faces are faces that contains such a combination of indices,     that their final shape collapsed in a line or point.
Before returning, this method also attempts to repair faces by juggling     vertex indices. | Since: 5.0

Method: Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(IEnumerable<int> faceIndexes, bool compact)
Return: int
Modifiers: public
Summary: Removes a collection of faces from the mesh without affecting the remaining geometry.
Parameter: faceIndexes (IEnumerable<int>)
Parameter Summary: An array containing all the face indices to be removed.
Parameter: compact (bool)
Parameter Summary: If true, removes vertices that are no longer referenced.

Method: Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(IEnumerable<int> faceIndexes)
Return: int
Modifiers: public
Summary: Removes a collection of faces from the mesh without affecting the remaining geometry.
Parameter: faceIndexes (IEnumerable<int>)
Parameter Summary: An array containing all the face indices to be removed.

Method: Rhino.Geometry.Collections.MeshFaceList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store faces. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshFaceList.ExtractDuplicateFaces()
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, duplicate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.ExtractFaces(IEnumerable<int> faceIndices)
Return: Mesh
Modifiers: public
Summary: Extracts, or removes, faces.
Parameter: faceIndices (IEnumerable<int>)
Parameter Summary: The face indices to be extracted.

Method: Rhino.Geometry.Collections.MeshFaceList.GetClashingFacePairs(int maxPairCount)
Return: IndexPair[]
Modifiers: public
Summary: Gets an array of pairs of mesh faces that clash.
Parameter: maxPairCount (int)
Parameter Summary: If >0, then at most this many pairs will be added to the output array. If <=0, then all clashing pairs will be added to the output array.

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(int faceIndex, double angleRadians, bool greaterThanAngle)
Return: int
Modifiers: public
Summary: Find all connected face indices where adjacent face normals meet the criteria of angleRadians and greaterThanAngle
Parameter: faceIndex (int)
Parameter Summary: face index to start from
Parameter: angleRadians (double)
Parameter Summary: angle to use for comparison of what is connected
Parameter: greaterThanAngle (bool)
Parameter Summary: If True angles greater than or equal to are considered connected. If false, angles less than or equal to are considered connected.

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(int faceIndex)
Return: int
Modifiers: public
Summary: Find all connected face indices
Parameter: faceIndex (int)
Parameter Summary: face index to start from

Method: Rhino.Geometry.Collections.MeshFaceList.GetConnectedFacesToEdges(int startFaceIndex, bool treatNonmanifoldLikeUnwelded)
Return: int
Modifiers: public
Summary: Uses startFaceIndex and finds all connected face indexes up to unwelded or naked edges. If treatNonmanifoldLikeUnwelded is True then non-manifold edges will be considered as unwelded or naked
Parameter: startFaceIndex (int)
Parameter Summary: Initial face index
Parameter: treatNonmanifoldLikeUnwelded (bool)
Parameter Summary: True means non-manifold edges will be handled like unwelded edges, False means they aren't considered

Method: Rhino.Geometry.Collections.MeshFaceList.GetDuplicateFaces()
Return: int
Modifiers: public
Summary: Finds all of the duplicate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.GetEnumerator()
Return: IEnumerator<MeshFace>
Modifiers: public
Summary: Gets an enumerator that yields all faces in this collection.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFace(int index)
Return: MeshFace
Modifiers: public
Summary: Returns the mesh face at the given index.
Parameter: index (int)
Parameter Summary: Index of face to get. Must be larger than or equal to zero and smaller than the Face Count of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceAspectRatio(int index)
Return: double
Modifiers: public
Summary: Returns the mesh face at the given index.
Parameter: index (int)
Parameter Summary: Index of face to get. Must be larger than or equal to zero and smaller than the Face Count of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceBoundingBox(int faceIndex)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceCenter(int faceIndex)
Return: Point3d
Modifiers: public
Summary: Gets the center point of a face.
For a triangular face, this is the centroid or barycenter.
For a quad, this is the average of four comer points. | Since: 5.0 | Parameter: faceIndex (int) | Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetFaceVertices(int faceIndex, out Point3f a, out Point3f b, out Point3f c, out Point3f d)
Return: bool
Modifiers: public
Summary: Gets the 3D location of the vertices forming a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.
Parameter: a (Point3f)
Parameter Summary: A first point. This out argument is assigned during the call.
Parameter: b (Point3f)
Parameter Summary: A second point. This out argument is assigned during the call.
Parameter: c (Point3f)
Parameter Summary: A third point. This out argument is assigned during the call.
Parameter: d (Point3f)
Parameter Summary: A fourth point. This out argument is assigned during the call.

Method: Rhino.Geometry.Collections.MeshFaceList.GetTopologicalVertices(int faceIndex)
Return: int
Modifiers: public
Summary: Gets the topology vertex indices of a face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.GetZeroAreaFaces(out int whollyDegenerateFaces, out int partiallyDegenerateFaces)
Return: bool
Modifiers: public
Summary: Examines and adds face indexes to whollyDegenerateFaces if the face is a triangle with zero area or a quad both triangles have zero area. Face indexes are added to partiallyDegenerateFaces when a quad has one triangle with zero area.
Parameter: whollyDegenerateFaces (int)
Parameter Summary: Array of indexes for faces, both triangles and quads, that have zero area.
Parameter: partiallyDegenerateFaces (int)
Parameter Summary: Array of indexes for quad faces, that have one triangle with zero area.

Method: Rhino.Geometry.Collections.MeshFaceList.HasNakedEdges(int faceIndex)
Return: bool
Modifiers: public
Summary: Returns True if at least one of the face edges are not topologically connected to any other faces.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.Insert(int index, MeshFace face)
Return: void
Modifiers: public
Summary: Inserts a mesh face at a defined index in this list.
Parameter: index (int)
Parameter Summary: An index.
Parameter: face (MeshFace)
Parameter Summary: A face.

Method: Rhino.Geometry.Collections.MeshFaceList.IsHidden(int faceIndex)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether a face is hidden.
A face is hidden if, and only if, at least one of its vertices is hidden. | Since: 5.0 | Parameter: faceIndex (int) | Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshFaceList.MergeAdjacentFaces(int edgeIndex)
Return: bool
Modifiers: public
Summary: Merges two triangular mesh faces that share an edge into one quadrangular face.
Parameter: edgeIndex (int)
Parameter Summary: The common topological edge index.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveAt(int index, bool compact)
Return: void
Modifiers: public
Summary: Removes a face from the mesh.
Parameter: index (int)
Parameter Summary: The index of the face that will be removed.
Parameter: compact (bool)
Parameter Summary: If true, removes vertices that are no longer referenced.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes a face from the mesh.
Parameter: index (int)
Parameter Summary: The index of the face that will be removed.

Method: Rhino.Geometry.Collections.MeshFaceList.RemoveZeroAreaFaces(ref int fixedFaceCount)
Return: int
Modifiers: public
Summary: Deletes or fixes mesh faces that have zero area.
Parameter: fixedFaceCount (int)
Parameter Summary: Number of fixed partially degenerate faces.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, int vertex1, int vertex2, int vertex3, int vertex4)
Return: bool
Modifiers: public
Summary: Sets a quadrangular face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: vertex1 (int)
Parameter Summary: The first vertex index.
Parameter: vertex2 (int)
Parameter Summary: The second vertex index.
Parameter: vertex3 (int)
Parameter Summary: The third vertex index.
Parameter: vertex4 (int)
Parameter Summary: The fourth vertex index.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, int vertex1, int vertex2, int vertex3)
Return: bool
Modifiers: public
Summary: Sets a triangular face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: vertex1 (int)
Parameter Summary: The first vertex index.
Parameter: vertex2 (int)
Parameter Summary: The second vertex index.
Parameter: vertex3 (int)
Parameter Summary: The third vertex index.

Method: Rhino.Geometry.Collections.MeshFaceList.SetFace(int index, MeshFace face)
Return: bool
Modifiers: public
Summary: Sets a face at a specific index of the mesh.
Parameter: index (int)
Parameter Summary: A position in the list.
Parameter: face (MeshFace)
Parameter Summary: A face.

Method: Rhino.Geometry.Collections.MeshFaceList.ToIntArray(bool asTriangles, ref List<int> replacedIndices)
Return: int
Modifiers: public
Summary: Copies all of the faces to a linear array of indices.  Clean-up of vertex indices if replacedIndices is a valid List<int>
Parameter: asTriangles (bool)
Parameter Summary: If set totrueas triangles.
Parameter: replacedIndices (List<int>)
Parameter Summary: List is populated with vertex indices that were replaced with 0. If replacedIndices is None there will be no cleanup

Method: Rhino.Geometry.Collections.MeshFaceList.ToIntArray(bool asTriangles)
Return: int
Modifiers: public
Summary: Copies all of the face indices to a linear array of indices per face.  Note that this includes indices from invalid faces too.
Parameter: asTriangles (bool)
Parameter Summary: If set totrueas triangles.

Class: Rhino.Geometry.Collections.MeshFaceNormalList
Summary: Provides access to the Face normals of a Mesh.

Property: Rhino.Geometry.Collections.MeshFaceNormalList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of face normals the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceNormalList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh face normals.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshFaceNormalList.this[int index]
Return: Vector3f
Modifiers: public
Summary: Gets or sets the face normal at the given face index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(double x, double y, double z)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: x (double)
Parameter Summary: X component of face normal.
Parameter: y (double)
Parameter Summary: Y component of face normal.
Parameter: z (double)
Parameter Summary: Z component of face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(float x, float y, float z)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: x (float)
Parameter Summary: X component of face normal.
Parameter: y (float)
Parameter Summary: Y component of face normal.
Parameter: z (float)
Parameter Summary: Z component of face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Vector3d normal)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: normal (Vector3d)
Parameter Summary: New face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Vector3f normal)
Return: int
Modifiers: public
Summary: Appends a face normal to the list of mesh face normals.
Parameter: normal (Vector3f)
Parameter Summary: New face normal.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.Clear()
Return: void
Modifiers: public
Summary: Clears the Face Normal list on the mesh.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals()
Return: bool
Modifiers: public
Summary: Computes all the face normals for this mesh based on the physical shape of the mesh.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store face normals. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshFaceNormalList.GetEnumerator()
Return: IEnumerator<Vector3f>
Modifiers: public
Summary: Gets an enumerator that yields all normals (vectors) in this collection.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using three double-precision numbers.
Parameter: index (int)
Parameter Summary: An index.
Parameter: x (double)
Parameter Summary: A x component.
Parameter: y (double)
Parameter Summary: A y component.
Parameter: z (double)
Parameter Summary: A z component.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using three single-precision numbers.
Parameter: index (int)
Parameter Summary: An index.
Parameter: x (float)
Parameter Summary: A x component.
Parameter: y (float)
Parameter Summary: A y component.
Parameter: z (float)
Parameter Summary: A z component.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, Vector3d normal)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using a single-precision vector.
Parameter: index (int)
Parameter Summary: An index.
Parameter: normal (Vector3d)
Parameter Summary: A normal vector.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(int index, Vector3f normal)
Return: bool
Modifiers: public
Summary: Sets a face normal vector at an index using a single-precision vector.
Parameter: index (int)
Parameter Summary: An index.
Parameter: normal (Vector3f)
Parameter Summary: A normal vector.

Method: Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals()
Return: bool
Modifiers: public
Summary: Unitizes all the existing face normals.

Class: Rhino.Geometry.Collections.MeshNgonList
Summary: Provides access to the ngons and ngon-related functionality of a Mesh. See also the <b>Rhino.Geometry.Mesh.Ngons</b> property for Ngon functionality details.

Property: Rhino.Geometry.Collections.MeshNgonList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh ngons.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshNgonList.UnsignedCount
Return: uint
Modifiers: public
Summary: Gets or sets the number of mesh ngons.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshNgonList.this[int index]
Return: MeshNgon
Modifiers: public
Summary: Returns the mesh ngon at the given index.

Method: Rhino.Geometry.Collections.MeshNgonList.AddNgon(MeshNgon ngon)
Return: int
Modifiers: public
Summary: Appends a new ngon to the end of the mesh ngon list.
Parameter: ngon (MeshNgon)
Parameter Summary: Ngon to add.

Method: Rhino.Geometry.Collections.MeshNgonList.AddNgons(IEnumerable<MeshNgon> ngons)
Return: int
Modifiers: public
Summary: Appends a list of ngons to the end of the mesh ngon list.
Parameter: ngons (IEnumerable<MeshNgon>)
Parameter Summary: Ngons to add.

Method: Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(double planarTolerance, int minimumNgonVertexCount, int minimumNgonFaceCount, bool allowHoles)
Return: int
Modifiers: public
Summary: Add an ngon for each group of connected coplanar faces.
Parameter: planarTolerance (double)
Parameter Summary: 3d distance tolerance for coplanar test.
Parameter: minimumNgonVertexCount (int)
Parameter Summary: Minimum number of vertices for an ngon.
Parameter: minimumNgonFaceCount (int)
Parameter Summary: Minimum number of faces for an ngon.
Parameter: allowHoles (bool)
Parameter Summary: Determines whether the ngon can have inner boundaries.

Method: Rhino.Geometry.Collections.MeshNgonList.AddPlanarNgons(double planarTolerance)
Return: int
Modifiers: public
Summary: Add an ngon for each group of connected coplanar faces.
Parameter: planarTolerance (double)
Parameter Summary: 3d distance tolerance for coplanar test.

Method: Rhino.Geometry.Collections.MeshNgonList.Clear()
Return: void
Modifiers: public
Summary: Clears the Ngon list on the mesh.

Method: Rhino.Geometry.Collections.MeshNgonList.GetEnumerator()
Return: IEnumerator<MeshNgon>
Modifiers: public
Summary: Gets an enumerator that yields all ngons in this collection.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgon(int index)
Return: MeshNgon
Modifiers: public
Summary: Returns the mesh ngon at the given index.
Parameter: index (int)
Parameter Summary: Index of ngon to get. Must be larger than or equal to zero and smaller than the Ngon Count of the mesh.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundary(IEnumerable<int> ngonFaceIndexList)
Return: int
Modifiers: public
Summary: Get a list of vertices that form the boundary of a face set. This is often use to get ngon boundaries.
Parameter: ngonFaceIndexList (IEnumerable<int>)
Parameter Summary: List of mesh face indices.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(int index)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of an ngon.
Parameter: index (int)
Parameter Summary: A ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonBoundingBox(MeshNgon ngon)
Return: BoundingBox
Modifiers: public
Summary: Gets the bounding box of an ngon.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(int index)
Return: Point3d
Modifiers: public
Summary: Gets the center point of an ngon.
This the average of the corner points. | Since: 6.0 | Parameter: index (int) | Parameter Summary: A ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonCenter(MeshNgon ngon)
Return: Point3d
Modifiers: public
Summary: Gets the center point of an ngon.
This the average of the corner points. | Since: 6.0 | Parameter: ngon (MeshNgon) | Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonEdgeCount(int index)
Return: int
Modifiers: public
Summary: Gets the complete edge count of an ngon.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.GetNgonOuterEdgeCount(int index)
Return: int
Modifiers: public
Summary: Gets the outer edge count of an ngon.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.Insert(int index, MeshNgon ngon)
Return: void
Modifiers: public
Summary: Inserts a mesh ngon at a defined index in this list.
Parameter: index (int)
Parameter Summary: An ngon index.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.IsValid(int index, TextLog textLog)
Return: uint
Modifiers: public
Summary: Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
Parameter: index (int)
Parameter Summary: The index of the ngon to test.
Parameter: textLog (TextLog)
Parameter Summary: A text log for collecting information about problems.

Method: Rhino.Geometry.Collections.MeshNgonList.IsValid(int index)
Return: uint
Modifiers: public
Summary: Tests an ngon to see if the vertex and face references are valid and pass partial boundary validity checks.
Parameter: index (int)
Parameter Summary: The index of the ngon to test.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonBoundaryVertexList(MeshNgon ngon, bool bAppendStartPoint)
Return: Point3d[]
Modifiers: public
Summary: Get an ngon's boundary points.
Parameter: ngon (MeshNgon)
Parameter Summary: ngon.
Parameter: bAppendStartPoint (bool)
Parameter Summary: If true, the first point in the list is also appended to the end of the list to create a closed polyline.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonHasHoles(int index)
Return: bool
Modifiers: public
Summary: Determines whether a ngon has holes.
Parameter: index (int)
Parameter Summary: Ngon index.

Method: Rhino.Geometry.Collections.MeshNgonList.NgonIndexFromFaceIndex(int meshFaceIndex)
Return: int
Modifiers: public
Summary: Returns the index of a mesh ngon the face belongs to.
Parameter: meshFaceIndex (int)
Parameter Summary: Index of a mesh face.

Method: Rhino.Geometry.Collections.MeshNgonList.Orientation(int index, bool permitHoles)
Return: int
Modifiers: public
Summary: Determine if the ngon's boundary orientation matches that of the set of faces it is made from.
Parameter: index (int)
Parameter Summary: Ngon index.
Parameter: permitHoles (bool)
Parameter Summary: True if the ngon is permitted to have interior holes, False otherwise.

Method: Rhino.Geometry.Collections.MeshNgonList.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes an ngon from the mesh.
Parameter: index (int)
Parameter Summary: The index of the ngon.

Method: Rhino.Geometry.Collections.MeshNgonList.RemoveNgons(IEnumerable<int> indices)
Return: int
Modifiers: public
Summary: Remove one or more ngons from the mesh.
Parameter: indices (IEnumerable<int>)
Parameter Summary: An array of ngon indices.

Method: Rhino.Geometry.Collections.MeshNgonList.ReverseOuterBoundary(int index)
Return: void
Modifiers: public
Summary: Reverse the order of the m_vi[] array for an ngon

Method: Rhino.Geometry.Collections.MeshNgonList.SetNgon(int index, MeshNgon ngon)
Return: void
Modifiers: public
Summary: Set an ngon in this list.
Parameter: index (int)
Parameter Summary: An ngon index.
Parameter: ngon (MeshNgon)
Parameter Summary: An ngon.

Class: Rhino.Geometry.Collections.MeshTextureCoordinateList
Summary: Provides access to the Vertex Texture coordinates of a Mesh.

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of texture coordinates the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of texture coordinates.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshTextureCoordinateList.this[int index]
Return: Point2f
Modifiers: public
Summary: Gets or sets the texture coordinate at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(double s, double t)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: s (double)
Parameter Summary: S component of new texture coordinate.
Parameter: t (double)
Parameter Summary: T component of new texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(float s, float t)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: s (float)
Parameter Summary: S component of new texture coordinate.
Parameter: t (float)
Parameter Summary: T component of new texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Point2f tc)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: tc (Point2f)
Parameter Summary: Texture coordinate to add.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Point3d tc)
Return: int
Modifiers: public
Summary: Adds a new texture coordinate to the end of the Texture list.
Parameter: tc (Point3d)
Parameter Summary: Texture coordinate to add.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(Point2f[] textureCoordinates)
Return: bool
Modifiers: public
Summary: Appends an array of texture coordinates.
Parameter: textureCoordinates (Point2f[])
Parameter Summary: Texture coordinates to append.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear()
Return: void
Modifiers: public
Summary: Clears the Texture Coordinate list on the mesh.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store texture coordinates. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.GetEnumerator()
Return: IEnumerator<Point2f>
Modifiers: public
Summary: Gets an enumerator that yields all texture coordinates in this collection.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates()
Return: bool
Modifiers: public
Summary: Scales the texture coordinates so the texture domains are [0,1] and eliminate any texture rotations.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(int direction)
Return: bool
Modifiers: public
Summary: Reverses one coordinate direction of the texture coordinates.
The region of the bitmap the texture uses does not change.     Either Us or Vs direction is flipped. | Since: 5.0 | Parameter: direction (int) | Parameter Summary: 0 = first texture coordinate is reversed.
1 = second texture coordinate is reversed.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, double s, double t)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: s (double) | Parameter Summary: S component of texture coordinate. | Parameter: t (double) | Parameter Summary: T component of texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, float s, float t)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: s (float) | Parameter Summary: S component of texture coordinate. | Parameter: t (float) | Parameter Summary: T component of texture coordinate.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, Point2f tc)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: tc (Point2f) | Parameter Summary: Texture coordinate point.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(int index, Point3f tc)
Return: bool
Modifiers: public
Summary: Sets or adds a texture coordinate to the Texture Coordinate List.
If [index] is less than [Count], the existing coordinate at [index] will be modified.
If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of texture coordinate to set. | Parameter: tc (Point3f) | Parameter Summary: Texture coordinate point.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Point2f[] textureCoordinates)
Return: bool
Modifiers: public
Summary: Sets all texture coordinates in one go.
Parameter: textureCoordinates (Point2f[])
Parameter Summary: Texture coordinates to assign to the mesh.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(TextureMapping mapping)
Return: bool
Modifiers: public
Summary: Set all texture coordinates based on a texture mapping function
Parameter: mapping (TextureMapping)
Parameter Summary: The new mapping type.

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertices to a linear array of float in u,v order

Method: Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates()
Return: bool
Modifiers: public
Summary: Transposes texture coordinates.
The region of the bitmap the texture uses does not change.     All texture coordinates rows (Us) become columns (Vs), and vice versa. | Since: 5.0

Class: Rhino.Geometry.Collections.MeshTopologyEdgeList
Summary: Represents an entry point to the list of edges in a mesh topology.

Property: Rhino.Geometry.Collections.MeshTopologyEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the amount of edges in this list.
Accessors: get

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.CollapseEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Replaces a mesh edge with a vertex at its center and update adjacent faces as needed.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.EdgeLine(int topologyEdgeIndex)
Return: Line
Modifiers: public
Summary: Gets the 3d line along an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: The topology edge index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(int topologyEdgeIndex, out bool faceOrientationMatchesEdgeDirection)
Return: int
Modifiers: public
Summary: Gets indices of faces connected to an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge that is queried.
Parameter: faceOrientationMatchesEdgeDirection (bool)
Parameter Summary: An array of Boolean values that explains whether each face direction matches the direction of the specified edge.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(int topologyEdgeIndex)
Return: int
Modifiers: public
Summary: Gets indices of faces connected to an edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge that is queried.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgeIndex(int topologyVertex1, int topologyVertex2)
Return: int
Modifiers: public
Summary: Returns index of edge that connects topological vertices. returns -1 if no edge is found.
Parameter: topologyVertex1 (int)
Parameter Summary: The first topology vertex index.
Parameter: topologyVertex2 (int)
Parameter Summary: The second topology vertex index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(int faceIndex, out bool sameOrientation)
Return: int
Modifiers: public
Summary: Gets indices of edges that surround a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.
Parameter: sameOrientation (bool)
Parameter Summary: Same length as returned edge index array. For each edge, the sameOrientation value tells you if the edge orientation matches the face orientation (true), or is reversed (false) compared to it.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(int faceIndex)
Return: int
Modifiers: public
Summary: Gets indices of edges that surround a given face.
Parameter: faceIndex (int)
Parameter Summary: A face index.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.GetTopologyVertices(int topologyEdgeIndex)
Return: IndexPair
Modifiers: public
Summary: Gets the two topology vertices for a given topology edge.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge.

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsEdgeUnwelded(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Determines if the mesh edge is unwelded, or if the mesh faces that share the edge have unique vertex indices.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsHidden(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological edge is hidden. The mesh topology edge is hidden only if either of its mesh topology vertices is hidden.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsNgonInterior(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological edge is an interior ngon edge
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.IsSwappableEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: Determines if a mesh edge index is valid input for <b>SwapEdge</b> .
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(int topologyEdgeIndex, double t)
Return: bool
Modifiers: public
Summary: Divides a mesh edge to create two or more triangles
Parameter: topologyEdgeIndex (int)
Parameter Summary: Edge to divide
Parameter: t (double)
Parameter Summary: Parameter along edge. This is the same as getting an EdgeLine and calling PointAt(t) on that line

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(int topologyEdgeIndex, Point3d point)
Return: bool
Modifiers: public
Summary: Divides a mesh edge to create two or more triangles
Parameter: topologyEdgeIndex (int)
Parameter Summary: Edge to divide
Parameter: point (Point3d)
Parameter Summary: Location to perform the split

Method: Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(int topologyEdgeIndex)
Return: bool
Modifiers: public
Summary: If the edge is shared by two triangular face, then the edge is swapped.
Parameter: topologyEdgeIndex (int)
Parameter Summary: An index of a topology edge in <b>Mesh.TopologyEdges</b> .

Class: Rhino.Geometry.Collections.MeshTopologyVertexList
Summary: Provides access to the mesh topology vertices of a mesh. Topology vertices are sets of vertices in the MeshVertexList that can topologically be considered the same vertex.

Property: Rhino.Geometry.Collections.MeshTopologyVertexList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh topology vertices.
Accessors: get

Property: Rhino.Geometry.Collections.MeshTopologyVertexList.this[int index]
Return: Point3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. Setting a location adjusts all vertices in the mesh's vertex list that are defined by this topological vertex The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdge(int topologyVertexIndex, int edgeAtVertexIndex)
Return: int
Modifiers: public
Summary: Gets a particular edge that is connected to a topological vertex.
Call TopologyVertices.SortVertices before this if you are interested in ordered edges. | Since: 6.0 | Parameter: topologyVertexIndex (int) | Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices. | Parameter: edgeAtVertexIndex (int) | Parameter Summary: Index of the edge at the vertex.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdges(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all edges that are connected to a given vertex.
Call TopologyVertices.SortVertices before this if you are interested in ordered edges. | Since: 6.0 | Parameter: topologyVertexIndex (int) | Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedEdgesCount(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets the count of edges that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all faces that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(int topologyVertexIndex, bool sorted)
Return: int
Modifiers: public
Summary: Gets all topological vertices that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.
Parameter: sorted (bool)
Parameter Summary: if true, the vertices are returned in a radially sorted order.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all topological vertices that are connected to a given vertex.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.GetEnumerator()
Return: IEnumerator<Point3f>
Modifiers: public
Summary: Gets an enumerator that yields all topology vertices in this collection.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.IndicesFromFace(int faceIndex)
Return: int
Modifiers: public
Summary: Returns TopologyVertexIndices for a given mesh face index.
Parameter: faceIndex (int)
Parameter Summary: The index of a face to query.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.IsHidden(int topologyVertexIndex)
Return: bool
Modifiers: public
Summary: Returns True if the topological vertex is hidden. The mesh topology vertex is hidden if and only if all the ON_Mesh vertices it represents is hidden.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(int topologyVertexIndex)
Return: int
Modifiers: public
Summary: Gets all indices of the mesh vertices that a given topology vertex represents.
Parameter: topologyVertexIndex (int)
Parameter Summary: Index of a topology vertex in Mesh.TopologyVertices to query.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges()
Return: bool
Modifiers: public
Summary: Sorts the edge list for the mesh topology vertex list so that the edges are in radial order when you call ConnectedTopologyVertices. A non-manifold edge is treated as a boundary edge with respect to sorting.  If any boundary or non-manifold edges end at the vertex, then the first edge will be a boundary or non-manifold edge.

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(int topologyVertexIndex)
Return: bool
Modifiers: public
Summary: Sorts the edge list for as single mesh topology vertex so that the edges are in radial order when you call ConnectedTopologyVertices. A non-manifold edge is treated as a boundary edge with respect to sorting.  If any boundary or non-manifold edges end at the vertex, then the first edge will be a boundary or non-manifold edge.
Parameter: topologyVertexIndex (int)
Parameter Summary: index of a topology vertex in Mesh.TopologyVertices>

Method: Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets the topology vertex index for an existing mesh vertex in the mesh's VertexList.
Parameter: vertexIndex (int)
Parameter Summary: Index of a vertex in the Mesh.Vertices.

Class: Rhino.Geometry.Collections.MeshVertexColorList
Summary: Provides access to the vertex colors of a mesh object.

Property: Rhino.Geometry.Collections.MeshVertexColorList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of vertex colors the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh colors.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.Tag
Return: MappingTag
Modifiers: public
Summary: Gets or sets a mapping information for the mesh associated with these vertex colors.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexColorList.this[int index]
Return: Color
Modifiers: public
Summary: Gets or sets the vertex color at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Add(Color color)
Return: int
Modifiers: public
Summary: Adds a new vertex color to the end of the color list.
Parameter: color (Color)
Parameter Summary: Color to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Add(int red, int green, int blue)
Return: int
Modifiers: public
Summary: Adds a new vertex color to the end of the color list.
Parameter: red (int)
Parameter Summary: Red component of color, must be in the 0~255 range.
Parameter: green (int)
Parameter Summary: Green component of color, must be in the 0~255 range.
Parameter: blue (int)
Parameter Summary: Blue component of color, must be in the 0~255 range.

Method: Rhino.Geometry.Collections.MeshVertexColorList.AddRange(IEnumerable<Color> colors)
Return: bool
Modifiers: public
Summary: Adds an enumerable of colors to the to the vertex color list. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: Colors to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(Color[] colors)
Return: bool
Modifiers: public
Summary: Appends a collection of colors to the vertex color list. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (Color[])
Parameter Summary: Colors to append.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Clear()
Return: void
Modifiers: public
Summary: Clears the vertex color list on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(Color baseColor)
Return: bool
Modifiers: public
Summary: Constructs a valid vertex color list consisting of a single color.
Parameter: baseColor (Color)
Parameter Summary: Color to apply to every vertex.

Method: Rhino.Geometry.Collections.MeshVertexColorList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store vertex colors. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshVertexColorList.GetEnumerator()
Return: IEnumerator<Color>
Modifiers: public
Summary: Gets an enumerator that yields all colors in this collection.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(int index, Color color)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex color to set. If index equals Count, then the color will be appended. | Parameter: color (Color) | Parameter Summary: Color to set, Alpha channels will be ignored.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(int index, int red, int green, int blue)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex color to the color List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex color to set. If index equals Count, then the color will be appended. | Parameter: red (int) | Parameter Summary: Red component of vertex color. Value must be in the 0~255 range. | Parameter: green (int) | Parameter Summary: Green component of vertex color. Value must be in the 0~255 range. | Parameter: blue (int) | Parameter Summary: Blue component of vertex color. Value must be in the 0~255 range.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColor(MeshFace face, Color color)
Return: bool
Modifiers: public
Summary: Sets a color at the three or four vertex indices of a specified face.
Parameter: face (MeshFace)
Parameter Summary: A face to use to retrieve indices.
Parameter: color (Color)
Parameter Summary: A color.

Method: Rhino.Geometry.Collections.MeshVertexColorList.SetColors(Color[] colors)
Return: bool
Modifiers: public
Summary: Sets all the vertex colors in one go. For the Mesh to be valid, the number of colors must match the number of vertices.
Parameter: colors (Color[])
Parameter Summary: Colors to set.

Method: Rhino.Geometry.Collections.MeshVertexColorList.ToARGBArray()
Return: int
Modifiers: public
Summary: Return colors as an array of integers with packed ARGB values

Class: Rhino.Geometry.Collections.MeshVertexList
Summary: Provides access to the vertices and vertex-related functionality of a mesh.

Property: Rhino.Geometry.Collections.MeshVertexList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of vertices the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh vertices.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.UseDoublePrecisionVertices
Return: bool
Modifiers: public
Summary: Set to True if the vertices should be stored in double precision
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexList.this[int index]
Return: Point3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexList.Align(IEnumerable<Mesh> meshes, double distance, IEnumerable<IEnumerable<bool>> whichVertices)
Return: int
Modifiers: public, static
Summary: Moves mesh vertices that belong to naked edges to neighboring vertices, within the specified distance.
This forces unaligned mesh vertices to the same location and is helpful to clean meshes for 3D printing.
See the _AlignMeshVertices Rhino command for more information. | Parameter: meshes (IEnumerable<Mesh>) | Parameter Summary: The enumerable of meshes that need to have vertices adjusted. | Parameter: distance (double) | Parameter Summary: Distance that should not be exceed when modifying the mesh. | Parameter: whichVertices (IEnumerable<IEnumerable<bool>>) | Parameter Summary: If not null, defines which vertices should be considered for adjustment.
If this parameter is non-null, then all items within it have to be non-None as well, defining for each mesh, which vertices to adjust.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(double x, double y, double z)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: x (double)
Parameter Summary: X component of new vertex coordinate.
Parameter: y (double)
Parameter Summary: Y component of new vertex coordinate.
Parameter: z (double)
Parameter Summary: Z component of new vertex coordinate.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(float x, float y, float z)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: x (float)
Parameter Summary: X component of new vertex coordinate.
Parameter: y (float)
Parameter Summary: Y component of new vertex coordinate.
Parameter: z (float)
Parameter Summary: Z component of new vertex coordinate.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(Point3d vertex)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: vertex (Point3d)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.MeshVertexList.Add(Point3f vertex)
Return: int
Modifiers: public
Summary: Adds a new vertex to the end of the Vertex list.
Parameter: vertex (Point3f)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.MeshVertexList.AddVertices(IEnumerable<Point3d> vertices)
Return: void
Modifiers: public
Summary: Adds a series of new vertices to the end of the vertex list.
This overload accepts double-precision points. | Since: 5.0 | Parameter: vertices (IEnumerable<Point3d>) | Parameter Summary: A list, an array or any enumerable set of <b>Point3d</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.AddVertices(IEnumerable<Point3f> vertices)
Return: void
Modifiers: public
Summary: Adds a series of new vertices to the end of the vertex list.
This overload accepts single-precision points. | Since: 5.0 | Parameter: vertices (IEnumerable<Point3f>) | Parameter Summary: A list, an array or any enumerable set of <b>Point3f</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.Align(double distance, IEnumerable<bool> whichVertices)
Return: int
Modifiers: public
Summary: Moves mesh vertices that belong to naked edges to neighboring vertices, within the specified distance.
This forces unaligned mesh vertices to the same location and is helpful to clean meshes for 3D printing.
See the _AlignMeshVertices Rhino command for more information. | Since: 6.0 | Parameter: distance (double) | Parameter Summary: Distance that should not be exceed when modifying the mesh. | Parameter: whichVertices (IEnumerable<bool>) | Parameter Summary: If not null, defines which vertices should be considered for adjustment.

Method: Rhino.Geometry.Collections.MeshVertexList.Clear()
Return: void
Modifiers: public
Summary: Clears the Vertex list on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(bool ignoreNormals, bool ignoreAdditional)
Return: bool
Modifiers: public
Summary: Merges identical vertices.
Parameter: ignoreNormals (bool)
Parameter Summary: If true, vertex normals will not be taken into consideration when comparing vertices.
Parameter: ignoreAdditional (bool)
Parameter Summary: If true, texture coordinates, colors, and principal curvatures will not be taken into consideration when comparing vertices.

Method: Rhino.Geometry.Collections.MeshVertexList.CullUnused()
Return: int
Modifiers: public
Summary: Removes all vertices that are currently not used by the Face list.

Method: Rhino.Geometry.Collections.MeshVertexList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store faces. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets indices of all vertices that form "edges" with a given vertex index.
Parameter: vertexIndex (int)
Parameter Summary: The index of a vertex to query.

Method: Rhino.Geometry.Collections.MeshVertexList.GetEnumerator()
Return: IEnumerator<Point3f>
Modifiers: public
Summary: Gets an enumerator that yields all mesh vertices (points) in this collection.

Method: Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets a list of other vertices which are "topologically" identical to this vertex.
Parameter: vertexIndex (int)
Parameter Summary: A vertex index in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(int vertexIndex)
Return: int
Modifiers: public
Summary: Gets a list of all of the faces that share a given vertex.
Parameter: vertexIndex (int)
Parameter Summary: The index of a vertex in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.Hide(int vertexIndex)
Return: void
Modifiers: public
Summary: Hides the vertex at the given index.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to hide.

Method: Rhino.Geometry.Collections.MeshVertexList.HideAll()
Return: void
Modifiers: public
Summary: Hides all vertices in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.IsHidden(int vertexIndex)
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not a vertex is hidden.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to query.

Method: Rhino.Geometry.Collections.MeshVertexList.Point3dAt(int index)
Return: Point3d
Modifiers: public
Summary: Get double precision location at a given index

Method: Rhino.Geometry.Collections.MeshVertexList.Remove(IEnumerable<int> indices, bool shrinkFaces)
Return: bool
Modifiers: public
Summary: Removes the vertices at the given indices and all faces that reference those vertices.
Parameter: indices (IEnumerable<int>)
Parameter Summary: Vertex indices to remove.
Parameter: shrinkFaces (bool)
Parameter Summary: If true, quads that reference the deleted vertex will be converted to triangles.

Method: Rhino.Geometry.Collections.MeshVertexList.Remove(int index, bool shrinkFaces)
Return: bool
Modifiers: public
Summary: Removes the vertex at the given index and all faces that reference that index.
Parameter: index (int)
Parameter Summary: Index of vertex to remove.
Parameter: shrinkFaces (bool)
Parameter Summary: If true, quads that reference the deleted vertex will be converted to triangles.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, double x, double y, double z, bool updateNormals)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 6.6 | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (double) | Parameter Summary: X component of vertex location. | Parameter: y (double) | Parameter Summary: Y component of vertex location. | Parameter: z (double) | Parameter Summary: Z component of vertex location. | Parameter: updateNormals (bool) | Parameter Summary: Set to True if you'd like the vertex and face normals impacted by the change updated.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (double) | Parameter Summary: X component of vertex location. | Parameter: y (double) | Parameter Summary: Y component of vertex location. | Parameter: z (double) | Parameter Summary: Z component of vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: x (float) | Parameter Summary: X component of vertex location. | Parameter: y (float) | Parameter Summary: Y component of vertex location. | Parameter: z (float) | Parameter Summary: Z component of vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, Point3d vertex)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: vertex (Point3d) | Parameter Summary: Vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.SetVertex(int index, Point3f vertex)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex to the Vertex List.
If [index] is less than [Count], the existing vertex at [index] will be modified.
If [index] equals [Count], a new vertex is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex to set. | Parameter: vertex (Point3f) | Parameter Summary: Vertex location.

Method: Rhino.Geometry.Collections.MeshVertexList.Show(int vertexIndex)
Return: void
Modifiers: public
Summary: Shows the vertex at the given index.
Parameter: vertexIndex (int)
Parameter Summary: Index of vertex to show.

Method: Rhino.Geometry.Collections.MeshVertexList.ShowAll()
Return: void
Modifiers: public
Summary: Shows all vertices in the mesh.

Method: Rhino.Geometry.Collections.MeshVertexList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertices to a linear array of float in x,y,z order

Method: Rhino.Geometry.Collections.MeshVertexList.ToPoint3dArray()
Return: Point3d[]
Modifiers: public
Summary: Copies all vertices to a new array of <b>Point3d</b> .

Method: Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray()
Return: Point3f[]
Modifiers: public
Summary: Copies all vertices to a new array of <b>Point3f</b> .

Class: Rhino.Geometry.Collections.MeshVertexNormalList
Summary: Provides access to the Vertex Normals of a Mesh.

Property: Rhino.Geometry.Collections.MeshVertexNormalList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the amount of vertex normals that the list can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexNormalList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of mesh vertex normals.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexNormalList.this[int index]
Return: Vector3f
Modifiers: public
Summary: Gets or sets the vertex at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(double x, double y, double z)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: x (double)
Parameter Summary: X component of new vertex normal.
Parameter: y (double)
Parameter Summary: Y component of new vertex normal.
Parameter: z (double)
Parameter Summary: Z component of new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(float x, float y, float z)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: x (float)
Parameter Summary: X component of new vertex normal.
Parameter: y (float)
Parameter Summary: Y component of new vertex normal.
Parameter: z (float)
Parameter Summary: Z component of new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(Vector3d normal)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: normal (Vector3d)
Parameter Summary: new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Add(Vector3f normal)
Return: int
Modifiers: public
Summary: Adds a new vertex normal at the end of the list.
Parameter: normal (Vector3f)
Parameter Summary: new vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(Vector3f[] normals)
Return: bool
Modifiers: public
Summary: Appends a collection of normal vectors.
Parameter: normals (Vector3f[])
Parameter Summary: Normals to append.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Clear()
Return: void
Modifiers: public
Summary: Clears the vertex normal collection on the mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals()
Return: bool
Modifiers: public
Summary: Computes the vertex normals based on the physical shape of the mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store vertex normals. The list capacity will be 0 after this call.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshVertexNormalList.Flip()
Return: void
Modifiers: public
Summary: Reverses direction of all vertex normals
This is the same as Mesh.Flip(true, false, false) | Since: 5.0

Method: Rhino.Geometry.Collections.MeshVertexNormalList.GetEnumerator()
Return: IEnumerator<Vector3f>
Modifiers: public
Summary: Gets an enumerator that yields all normals (vectors) in this collection.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: x (double) | Parameter Summary: X component of vertex normal. | Parameter: y (double) | Parameter Summary: Y component of vertex normal. | Parameter: z (double) | Parameter Summary: Z component of vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, float x, float y, float z)
Return: bool
Modifiers: public
Summary: Sets or adds a normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: x (float) | Parameter Summary: X component of vertex normal. | Parameter: y (float) | Parameter Summary: Y component of vertex normal. | Parameter: z (float) | Parameter Summary: Z component of vertex normal.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, Vector3d normal)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: normal (Vector3d) | Parameter Summary: The new normal at the index.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(int index, Vector3f normal)
Return: bool
Modifiers: public
Summary: Sets or adds a vertex normal to the list.
If [index] is less than [Count], the existing vertex normal at [index] will be modified.
If [index] equals [Count], a new vertex normal is appended to the end of the vertex list.
If [index] is larger than [Count], the function will return false. | Since: 5.0 | Parameter: index (int) | Parameter Summary: Index of vertex normal to set. | Parameter: normal (Vector3f) | Parameter Summary: The new normal at the index.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(Vector3f[] normals)
Return: bool
Modifiers: public
Summary: Sets all normal vectors in one go. This method destroys the current normal array if it exists.
Parameter: normals (Vector3f[])
Parameter Summary: Normals for the entire mesh.

Method: Rhino.Geometry.Collections.MeshVertexNormalList.ToFloatArray()
Return: float
Modifiers: public
Summary: Copies all vertex normals to a linear array of float in x,y,z order

Method: Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals()
Return: bool
Modifiers: public
Summary: Unitizes all vertex normals.

Class: Rhino.Geometry.Collections.MeshVertexStatusList
Summary: Provides access to status information relative to components of a mesh.

Property: Rhino.Geometry.Collections.MeshVertexStatusList.Capacity
Return: int
Modifiers: public
Summary: Gets or sets the total number of hidden vertex information the internal data structure can hold without resizing.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexStatusList.Count
Return: int
Modifiers: public
Summary: Gets or sets the number of hidden vertices. For this to be a valid part of a mesh, this count should be the same as the one of mesh vertices.
Accessors: get set

Property: Rhino.Geometry.Collections.MeshVertexStatusList.HiddenCount
Return: int
Modifiers: public
Summary: Gets a value indicating how many vertices have been set to hidden.
Accessors: get

Property: Rhino.Geometry.Collections.MeshVertexStatusList.this[int index]
Return: bool
Modifiers: public
Summary: Gets or sets the hidden value at the given index. The index must be valid or an IndexOutOfRangeException will be thrown.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Add(bool hidden)
Return: void
Modifiers: public
Summary: Adds a new flag at the end of the list.
Parameter: hidden (bool)
Parameter Summary: True if vertex is hidden.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.AddRange(IEnumerable<bool> values)
Return: void
Modifiers: public
Summary: Appends an array, a list or any enumerable of flags to the end of the list.
Parameter: values (IEnumerable<bool>)
Parameter Summary: Hidden values to append.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Clear()
Return: void
Modifiers: public
Summary: Clears the hidden vertex list on the mesh. This results in a fully visible mesh.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Contains(bool hidden)
Return: bool
Modifiers: public
Summary: Determines if some vertices are hidden or some are shown.
Parameter: hidden (bool)
Parameter Summary: The value to be checked. True means some vertex is hidden.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.CopyTo(bool array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies to an array, starting at an index.
Parameter: array (bool)
Parameter Summary: The array to be copied into.
Parameter: arrayIndex (int)
Parameter Summary: The starting index in the array.

Method: Rhino.Geometry.Collections.MeshVertexStatusList.Destroy()
Return: void
Modifiers: public
Summary: Releases all memory allocated to store hidden vertices. The list capacity will be 0 after this call.
Vertices will be immediately considered visible.
Subsequent calls can add new items. | Since: 6.0

Method: Rhino.Geometry.Collections.MeshVertexStatusList.GetEnumerator()
Return: IEnumerator<bool>
Modifiers: public
Summary: Gets an enumerator that yields all flags in this collection.

Class: Rhino.Geometry.Collections.NurbsCurveKnotList
Summary: Provides access to the knot vector of a NURBS curve.

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.Count
Return: int
Modifiers: public
Summary: Total number of knots in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedEnd
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the knot vector is clamped at the end of the curve. Clamped curves are coincident with the first and last control-point. This requires fully multiple knots.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedStart
Return: bool
Modifiers: public
Summary: Gets a value indicating whether or not the knot vector is clamped at the start of the curve. Clamped curves start at the first control-point. This requires fully multiple knots.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.KnotStyle
Return: KnotStyle
Modifiers: public
Summary: Gets the style of the knot vector.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurveKnotList.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the knot vector value at the given index.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(CurveEnd end)
Return: bool
Modifiers: public
Summary: Clamp end knots. Does not modify control point locations.
Parameter: end (CurveEnd)
Parameter Summary: Curve end to clamp.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.Contains(double item)
Return: bool
Modifiers: public
Summary: Returns an indication of the presence of a value in the knot list.
Parameter: item (double)
Parameter Summary: The item.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CopyTo(double array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the list to an array.
Parameter: array (double)
Parameter Summary: The array to copy to.
Parameter: arrayIndex (int)
Parameter Summary: The index into copy will begin.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform, periodic knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.EpsilonEquals(NurbsCurveKnotList other, double epsilon)
Return: bool
Modifiers: public
Summary: Checks that all values in the other list are sequentially equal within epsilon to the values in this list.
Parameter: other (NurbsCurveKnotList)
Parameter Summary: The other list.
Parameter: epsilon (double)
Parameter Summary: The epsilon value.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.IndexOf(double item)
Return: int
Modifiers: public
Summary: Returns the first item in the list.
Parameter: item (double)
Parameter Summary: The value.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(double value, int multiplicity)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.
Parameter: multiplicity (int)
Parameter Summary: Multiplicity of knot to insert.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(double value)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(int index)
Return: int
Modifiers: public
Summary: Get knot multiplicity.
Parameter: index (int)
Parameter Summary: Index of knot to query.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnotAt(double t)
Return: bool
Modifiers: public
Summary: Remove a knot from a curve and adjusts the remaining control points to maintain curve position as closely as possible.
Parameter: t (double)
Parameter Summary: The parameter on the curve that is closest to the knot to be removed.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveKnots(int index0, int index1)
Return: bool
Modifiers: public
Summary: Remove knots from a curve and adjusts the remaining control points to maintain curve position as closely as possible. The knots from Knots[index0] through Knots[index1 - 1] will be removed.
Parameter: index0 (int)
Parameter Summary: The starting knot index, where Degree-1 < index0 < index1 <= Points.Count-1.
Parameter: index1 (int)
Parameter Summary: The ending knot index, where Degree-1 < index0 < index1 <= Points.Count-1.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.RemoveMultipleKnots(int minimumMultiplicity, int maximumMultiplicity, double tolerance)
Return: int
Modifiers: public
Summary: Remove multiple knots from this curve.
Parameter: minimumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity > minimumKnotMultiplicity.
Parameter: maximumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity < maximumKnotMultiplicity.
Parameter: tolerance (double)
Parameter Summary: When you remove knots, the shape of the curve is changed. If tolerance is RhinoMath.UnsetValue, any amount of change is permitted. If tolerance is >=0, the maximum distance between the input and output curve is restricted to be <= tolerance.

Method: Rhino.Geometry.Collections.NurbsCurveKnotList.SuperfluousKnot(bool start)
Return: double
Modifiers: public
Summary: Computes the knots that are superfluous because they are not used in NURBs evaluation. These make it appear so that the first and last curve spans are different from interior spans.
http://wiki.mcneel.com/developer/onsuperfluousknot | Since: 5.0 | Parameter: start (bool) | Parameter Summary: True if the query targets the first knot. Otherwise, the last knot.

Class: Rhino.Geometry.Collections.NurbsCurvePointList
Summary: Provides access to the control points of a NURBS curve.

Property: Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygonLength
Return: double
Modifiers: public
Summary: Gets the length of the polyline connecting all control points.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.Count
Return: int
Modifiers: public
Summary: Gets the number of control points in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.PointSize
Return: int
Modifiers: public
Summary: Returns the control point size, or the number of doubles per control point. For rational curves, PointSize = Curve.Dimension + 1. For non-rational curves, PointSize = Curve.Dimension.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsCurvePointList.this[int index]
Return: ControlPoint
Modifiers: public
Summary: Gets or sets the control point location at the given index.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(double w0, double w1)
Return: bool
Modifiers: public
Summary: Use a combination of scaling and reparameterization to change the end weights to the specified values.
Parameter: w0 (double)
Parameter Summary: Weight for first control point.
Parameter: w1 (double)
Parameter Summary: Weight for last control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.Contains(ControlPoint item)
Return: bool
Modifiers: public
Summary: Determines if this list contains an item.
Parameter: item (ControlPoint)
Parameter Summary: The exact item to search for.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon()
Return: Polyline
Modifiers: public
Summary: Constructs a polyline through all the control points. Note that periodic curves generate a closed polyline withfewer points than control-points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.CopyTo(ControlPoint[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copied the list to an array.
Parameter: array (ControlPoint[])
Parameter Summary: The array to copy to.
Parameter: arrayIndex (int)
Parameter Summary: The index in which the copy will begin.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.EpsilonEquals(NurbsCurvePointList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(int index, out Point3d point)
Return: bool
Modifiers: public
Summary: Gets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to get.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetPoint(int index, out Point4d point)
Return: bool
Modifiers: public
Summary: Gets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to get.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.GetWeight(int index)
Return: double
Modifiers: public
Summary: Gets the weight of a control point at the given index. Note, if the curve is non-rational, the weight will be 1.0.
Parameter: index (int)
Parameter Summary: Index of control point to get.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.IndexOf(ControlPoint item)
Return: int
Modifiers: public
Summary: Gets the index of a control point, or -1.
Parameter: item (ControlPoint)
Parameter Summary: The exact item to search for.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational()
Return: bool
Modifiers: public
Summary: Converts the curve to a Non-rational NURBS curve. Non-rational curves have unweighted control points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational()
Return: bool
Modifiers: public
Summary: Converts the curve to a Rational NURBS curve. Rational NURBS curves have weighted control points.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, double x, double y, double z, double weight)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point3d point, double weight)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point and weight at a given index. The 4-D representation is (x*w, y*w, z*w, w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point3d)
Parameter Summary: Coordinates of the control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point3d point)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given index. The 4-D representation is (x, y, z, 1.0).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(int index, Point4d point)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.SetWeight(int index, double weight)
Return: bool
Modifiers: public
Summary: Sets the weight of a control point at the given index Note, if the curve is non-rational, it will be converted to rational.
Parameter: index (int)
Parameter Summary: Index of control point to set.
Parameter: weight (double)
Parameter Summary: The control point weight.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.UVNDirectionsAt(int index, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS curve control point similar to the method used by Rhino's MoveUVN command.
Parameter: index (int)
Parameter Summary: Index of control point.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Method: Rhino.Geometry.Collections.NurbsCurvePointList.ValidateSpacing(double closeTolerance, double stackTolerance, out int closeIndices, out int stackedIndices)
Return: bool
Modifiers: public
Summary: Simple check of distance between adjacent control points
Parameter: closeTolerance (double)
Parameter Summary: tolerance to use for determining if control points are 'close'
Parameter: stackTolerance (double)
Parameter Summary: tolerance to use for determining if control points are 'stacked'
Parameter: closeIndices (int)
Parameter Summary: indices of 'close' points are returned in this array
Parameter: stackedIndices (int)
Parameter Summary: indices of 'stacked' points are returned in this array

Class: Rhino.Geometry.Collections.NurbsSurfaceKnotList
Summary: Provides access to the knot vector of a NURBS surface.

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtEnd
Return: bool
Modifiers: public
Summary: Determines if a knot vector is clamped.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtStart
Return: bool
Modifiers: public
Summary: Determines if a knot vector is clamped.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.Count
Return: int
Modifiers: public
Summary: Gets the total number of knots in this curve.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotStyle
Return: KnotStyle
Modifiers: public
Summary: Gets the style of the knot vector.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfaceKnotList.this[int index]
Return: double
Modifiers: public
Summary: Gets or sets the knot vector value at the given index.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform, periodic knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(double knotSpacing)
Return: bool
Modifiers: public
Summary: Compute a clamped, uniform knot vector based on the current degree and control point count. Does not change values of control vertices.
Parameter: knotSpacing (double)
Parameter Summary: Spacing of subsequent knots.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.EpsilonEquals(NurbsSurfaceKnotList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(double value, int multiplicity)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.
Parameter: multiplicity (int)
Parameter Summary: Multiplicity of knot to insert.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(double value)
Return: bool
Modifiers: public
Summary: Inserts a knot and update control point locations. Does not change parameterization or locus of curve.
Parameter: value (double)
Parameter Summary: Knot value to insert.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(int index)
Return: int
Modifiers: public
Summary: Get knot multiplicity.
Parameter: index (int)
Parameter Summary: Index of knot to query.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnots(int index0, int index1)
Return: bool
Modifiers: public
Summary: Remove knots from the knot vector and adjusts the remaining control points to maintain surface position as closely as possible. The knots from Knots[index0] through Knots[index1 - 1] will be removed.
Parameter: index0 (int)
Parameter Summary: The starting knot index, where Degree-1 < index0 < index1 <= Points.Count-1.
Parameter: index1 (int)
Parameter Summary: The ending knot index, where Degree-1 < index0 < index1 <= Points.Count-1.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveKnotsAt(double u, double v)
Return: bool
Modifiers: public
Summary: Remove knots from the surface and adjusts the remaining control points to maintain surface position as closely as possible.
Parameter: u (double)
Parameter Summary: The u parameter on the surface that is closest to the knot to be removed.
Parameter: v (double)
Parameter Summary: The v parameter on the surface that is closest to the knot to be removed.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.RemoveMultipleKnots(int minimumMultiplicity, int maximumMultiplicity, double tolerance)
Return: int
Modifiers: public
Summary: Remove multiple knots from this surface
Parameter: minimumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity > minimumKnotMultiplicity
Parameter: maximumMultiplicity (int)
Parameter Summary: Remove knots with multiplicity < maximumKnotMultiplicity
Parameter: tolerance (double)
Parameter Summary: When you remove knots, the shape of the surface is changed. If tolerance is RhinoMath.UnsetValue, any amount of change is permitted. If tolerance is >=0, the maximum distance between the input and output surface is restricted to be <= tolerance.

Method: Rhino.Geometry.Collections.NurbsSurfaceKnotList.SuperfluousKnot(bool start)
Return: double
Modifiers: public
Summary: Computes the knots that are superfluous because they are not used in NURBs evaluation. These make it appear so that the first and last surface spans are different from interior spans.
http://wiki.mcneel.com/developer/onsuperfluousknot | Since: 5.0 | Parameter: start (bool) | Parameter Summary: True if the query targets the first knot. Otherwise, the last knot.

Class: Rhino.Geometry.Collections.NurbsSurfacePointList
Summary: Provides access to the control points of a NURBS surface.

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.CountU
Return: int
Modifiers: public
Summary: Gets the number of control points in the U direction of this surface.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.CountV
Return: int
Modifiers: public
Summary: Gets the number of control points in the V direction of this surface.
Accessors: get

Property: Rhino.Geometry.Collections.NurbsSurfacePointList.PointSize
Return: int
Modifiers: public
Summary: Returns the control point size, or the number of doubles per control point. For rational curves, PointSize = Surface.Dimension + 1. For non-rational curves, PointSize = Surface.Dimension.
Accessors: get

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.EpsilonEquals(NurbsSurfacePointList other, double epsilon)
Return: bool
Modifiers: public
Summary: Check that all values in other are within epsilon of the values in this

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(int u, int v)
Return: ControlPoint
Modifiers: public
Summary: Gets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(int u, int v)
Return: Point2d
Modifiers: public
Summary: Gets the 2-D Greville point associated with the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(int u, int v, out Point3d point)
Return: bool
Modifiers: public
Summary: Gets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetPoint(int u, int v, out Point4d point)
Return: bool
Modifiers: public
Summary: Gets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.GetWeight(int u, int v)
Return: double
Modifiers: public
Summary: Gets the weight of a control point at the given (u, v) index. Note, if the surface is non-rational, the weight will be 1.0.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(int u, int v, ControlPoint cp)
Return: bool
Modifiers: public
Summary: Sets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: cp (ControlPoint)
Parameter Summary: The control point to set.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(int u, int v, Point3d cp)
Return: bool
Modifiers: public
Summary: Sets the control point at the given (u, v) index.
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: cp (Point3d)
Parameter Summary: The control point location to set (weight is assumed to be 1.0).

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, double x, double y, double z, double weight)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, double x, double y, double z)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: x (double)
Parameter Summary: X coordinate of control point.
Parameter: y (double)
Parameter Summary: Y coordinate of control point.
Parameter: z (double)
Parameter Summary: Z coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point3d point, double weight)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point and weight at a given index. The 4-D representation is (x*w, y*w, z*w, w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinates of the control point.
Parameter: weight (double)
Parameter Summary: Weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point3d point)
Return: bool
Modifiers: public
Summary: Sets a world 3-D, or Euclidean, control point at the given (u, v) index. The 4-D representation is (x, y, z, 1.0).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point3d)
Parameter Summary: Coordinate of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetPoint(int u, int v, Point4d point)
Return: bool
Modifiers: public
Summary: Sets a homogeneous control point at the given (u, v) index, where the 4-D representation is (x, y, z, w). The world 3-D, or Euclidean, representation is (x/w, y/w, z/w).
Parameter: u (int)
Parameter Summary: Index of control point in the surface U direction.
Parameter: v (int)
Parameter Summary: Index of control point in the surface V direction.
Parameter: point (Point4d)
Parameter Summary: Coordinate and weight of control point.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.SetWeight(int u, int v, double weight)
Return: bool
Modifiers: public
Summary: Sets the weight of a control point at the given (u, v) index. Note, if the surface is non-rational, it will be converted to rational.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.
Parameter: weight (double)
Parameter Summary: The control point weight.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.UVNDirectionsAt(int u, int v, out Vector3d uDir, out Vector3d vDir, out Vector3d nDir)
Return: bool
Modifiers: public
Summary: Calculates the U, V, and N directions of a NURBS surface control point similar to the method used by Rhino's MoveUVN command.
Parameter: u (int)
Parameter Summary: Index of control-point along surface U direction.
Parameter: v (int)
Parameter Summary: Index of control-point along surface V direction.
Parameter: uDir (Vector3d)
Parameter Summary: The U direction.
Parameter: vDir (Vector3d)
Parameter Summary: The V direction.
Parameter: nDir (Vector3d)
Parameter Summary: The N direction.

Method: Rhino.Geometry.Collections.NurbsSurfacePointList.ValidateSpacing(double closeTolerance, double stackTolerance, out IndexPair[] closeIndices, out IndexPair[] stackedIndices)
Return: bool
Modifiers: public
Summary: Simple check of distance between adjacent control points

Class: Rhino.Geometry.Collections.SubDEdgeList
Summary: All edges in a SubD

Property: Rhino.Geometry.Collections.SubDEdgeList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD edges.
Accessors: get

Method: Rhino.Geometry.Collections.SubDEdgeList.Add(SubDEdgeTag tag, SubDVertex v0, SubDVertex v1)
Return: SubDEdge
Modifiers: public
Summary: Add a new edge to the list.
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag, such as smooth or corner.
Parameter: v0 (SubDVertex)
Parameter Summary: First vertex.
Parameter: v1 (SubDVertex)
Parameter Summary: Second vertex.

Method: Rhino.Geometry.Collections.SubDEdgeList.Find(int id)
Return: SubDEdge
Modifiers: public
Summary: Find an edge in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDEdgeList.Find(uint id)
Return: SubDEdge
Modifiers: public
Summary: Find an edge in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDEdgeList.GetEnumerator()
Return: IEnumerator<SubDEdge>
Modifiers: public
Summary: Implementation of IEnumerable

Method: Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(IEnumerable<int> edgeIndices, SubDEdgeTag tag)
Return: void
Modifiers: public
Summary: Set edge tags for a list of edges. Useful for adding creases to SubDs
Parameter: edgeIndices (IEnumerable<int>)
Parameter Summary: list of indices for the edges to set tags on
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag

Method: Rhino.Geometry.Collections.SubDEdgeList.SetEdgeTags(IEnumerable<SubDEdge> edges, SubDEdgeTag tag)
Return: void
Modifiers: public
Summary: Set edge tags for a list of edges. Useful for adding creases to SubDs
Parameter: edges (IEnumerable<SubDEdge>)
Parameter Summary: list of edges to set a specific tag on
Parameter: tag (SubDEdgeTag)
Parameter Summary: The type of edge tag

Class: Rhino.Geometry.Collections.SubDFaceList
Summary: All faces in a SubD

Property: Rhino.Geometry.Collections.SubDFaceList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD faces.
Accessors: get

Method: Rhino.Geometry.Collections.SubDFaceList.Find(int id)
Return: SubDFace
Modifiers: public
Summary: Find a face in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDFaceList.Find(uint id)
Return: SubDFace
Modifiers: public
Summary: Find a face in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDFaceList.GetEnumerator()
Return: IEnumerator<SubDFace>
Modifiers: public
Summary: Implementation of IEnumerable

Class: Rhino.Geometry.Collections.SubDVertexList
Summary: Provides access to all the vertices and vertex-related functionality of a SubD

Property: Rhino.Geometry.Collections.SubDVertexList.Count
Return: int
Modifiers: public
Summary: Gets the number of SubD vertices.
Accessors: get

Property: Rhino.Geometry.Collections.SubDVertexList.First
Return: SubDVertex
Modifiers: public
Summary: First vertex in this linked list of vertices
Accessors: get

Method: Rhino.Geometry.Collections.SubDVertexList.Add(SubDVertexTag tag, Point3d vertex)
Return: SubDVertex
Modifiers: public
Summary: Add a new vertex to the end of the Vertex list.
Parameter: tag (SubDVertexTag)
Parameter Summary: The type of vertex tag, such as smooth or corner.
Parameter: vertex (Point3d)
Parameter Summary: Location of new vertex.

Method: Rhino.Geometry.Collections.SubDVertexList.Find(int id)
Return: SubDVertex
Modifiers: public
Summary: Find a vertex in this SubD with a given id

Method: Rhino.Geometry.Collections.SubDVertexList.Find(uint id)
Return: SubDVertex
Modifiers: public
Summary: Find a vertex in this SubD with a given id

# Namespace: Rhino.Geometry.Intersect

Class: Rhino.Geometry.Intersect.CurveIntersections
Summary: Maintains an ordered list of Curve Intersection results.

Constructor: Rhino.Geometry.Intersect.CurveIntersections.CurveIntersections()
Summary: Initializes a new instance of the CurveIntersections class

Property: Rhino.Geometry.Intersect.CurveIntersections.Count
Return: int
Modifiers: public
Summary: Gets the number of recorded intersection events.
Accessors: get

Property: Rhino.Geometry.Intersect.CurveIntersections.this[int index]
Return: IntersectionEvent
Modifiers: public
Summary: Gets the intersection event data at the given index.

Method: Rhino.Geometry.Intersect.CurveIntersections.CopyTo(IntersectionEvent[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies all intersection results into another array, departing at an index in the target array.
Parameter: array (IntersectionEvent[])
Parameter Summary: The target array. This value cannot be null.
Parameter: arrayIndex (int)
Parameter Summary: Zero-based index in which to start the copy.

Method: Rhino.Geometry.Intersect.CurveIntersections.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Intersect.CurveIntersections.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Intersect.CurveIntersections.GetEnumerator()
Return: IEnumerator<IntersectionEvent>
Modifiers: public
Summary: Returns an enumerator that is capable of yielding all IntersectionEvents in the collection.

Class: Rhino.Geometry.Intersect.Intersection
Summary: Provides static methods for the computation of intersections, projections, sections and similar.

Constructor: Rhino.Geometry.Intersect.Intersection.Intersection()
Summary: Initializes a new instance of the Intersection class

Property: Rhino.Geometry.Intersect.Intersection.MeshIntersectionsTolerancesCoefficient
Return: double
Modifiers: public, static
Summary: Offers a requested adjustment coefficient for mesh-mesh intersections tolerances.     The value can be used to multiply the document absolute tolerance.
This is only a UI value; it is up to developer to honor (or not) this request, depending on application needs. | Since: 7.0 | Accessors: get set

Method: Rhino.Geometry.Intersect.Intersection.ArcArc(Arc arcA, Arc arcB, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: ArcArcIntersection
Modifiers: public, static
Summary: Intersects two arcs using exact calculations.
Parameter: arcA (Arc)
Parameter Summary: First arc to intersect.
Parameter: arcB (Arc)
Parameter Summary: Second arc to intersect.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.BrepBrep(Brep brepA, Brep brepB, double tolerance, bool joinCurves, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Breps.
Parameter: brepA (Brep)
Parameter Summary: First Brep for intersection.
Parameter: brepB (Brep)
Parameter Summary: Second Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: joinCurves (bool)
Parameter Summary: If true, join the resulting curves where possible.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepBrep(Brep brepA, Brep brepB, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Breps.
Parameter: brepA (Brep)
Parameter Summary: First Brep for intersection.
Parameter: brepB (Brep)
Parameter Summary: Second Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepPlane(Brep brep, Plane plane, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep with an (infinite) plane.
Parameter: brep (Brep)
Parameter Summary: Brep to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use for intersections.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.BrepSurface(Brep brep, Surface surface, double tolerance, bool joinCurves, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep and a Surface.
Parameter: brep (Brep)
Parameter Summary: A brep to be intersected.
Parameter: surface (Surface)
Parameter Summary: A surface to be intersected.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: joinCurves (bool)
Parameter Summary: If true, join the resulting curves where possible.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.BrepSurface(Brep brep, Surface surface, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a Brep and a Surface.
Parameter: brep (Brep)
Parameter Summary: A brep to be intersected.
Parameter: surface (Surface)
Parameter Summary: A surface to be intersected.
Parameter: tolerance (double)
Parameter Summary: A tolerance value.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.CircleCircle(Circle circleA, Circle circleB, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: CircleCircleIntersection
Modifiers: public, static
Summary: Intersects two circles using exact calculations.
Parameter: circleA (Circle)
Parameter Summary: First circle to intersect.
Parameter: circleB (Circle)
Parameter Summary: Second circle to intersect.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, double angleTolerance, out double t)
Return: bool
Modifiers: public, static
Summary: Intersect a curve with a Brep. This function returns the intersection parameters on the curve.
Parameter: curve (Curve)
Parameter Summary: Curve.
Parameter: brep (Brep)
Parameter Summary: Brep.
Parameter: tolerance (double)
Parameter Summary: Absolute tolerance for intersections.
Parameter: angleTolerance (double)
Parameter Summary: Angle tolerance in radians.
Parameter: t (double)
Parameter Summary: Curve parameters at intersections.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints, out double curveParameters)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep. This function returns the 3D points of intersection, curve parameters at the intersection locations, and 3D overlap curves. If an error occurs while processing overlap curves, this function will return false, but it will still provide partial results.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: brep (Brep)
Parameter Summary: Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: The overlap curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.
Parameter: curveParameters (double)
Parameter Summary: The intersection curve parameters will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrep(Curve curve, Brep brep, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep. This function returns the 3D points of intersection and 3D overlap curves. If an error occurs while processing overlap curves, this function will return false, but it will still provide partial results.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: brep (Brep)
Parameter Summary: Brep for intersection.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: The overlap curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Method: Rhino.Geometry.Intersect.Intersection.CurveBrepFace(Curve curve, BrepFace face, double tolerance, out Curve[] overlapCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects a curve with a Brep face.
Parameter: curve (Curve)
Parameter Summary: A curve.
Parameter: face (BrepFace)
Parameter Summary: A brep face.
Parameter: tolerance (double)
Parameter Summary: Fitting and near miss tolerance.
Parameter: overlapCurves (Curve[])
Parameter Summary: A overlap curves array argument. This out reference is assigned during the call.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: A points array argument. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.CurveCurve(Curve curveA, Curve curveB, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the intersections between two curves.
Parameter: curveA (Curve)
Parameter Summary: First curve for intersection.
Parameter: curveB (Curve)
Parameter Summary: Second curve for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveCurveValidate(Curve curveA, Curve curveB, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the intersections between two curves.
Parameter: curveA (Curve)
Parameter Summary: First curve for intersection.
Parameter: curveB (Curve)
Parameter Summary: Second curve for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.CurveLine(Curve curve, Line line, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and an infinite line.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: line (Line)
Parameter Summary: Infinite line to intersect.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curves approach each other to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurvePlane(Curve curve, Plane plane, double tolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve with an (infinite) plane.
Parameter: curve (Curve)
Parameter Summary: Curve to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Tolerance to use during intersection.

Method: Rhino.Geometry.Intersect.Intersection.CurveSelf(Curve curve, double tolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Finds the places where a curve intersects itself.
Parameter: curve (Curve)
Parameter Summary: Curve for self-intersections.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches itself to within tolerance, an intersection is assumed.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurface(Curve curve, Interval curveDomain, Surface surface, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a sub-curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: curveDomain (Interval)
Parameter Summary: Domain of sub-curve to take into consideration for Intersections.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurface(Curve curve, Surface surface, double tolerance, double overlapTolerance)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(Curve curve, Interval curveDomain, Surface surface, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a sub-curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: curveDomain (Interval)
Parameter Summary: Domain of sub-curve to take into consideration for Intersections.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.CurveSurfaceValidate(Curve curve, Surface surface, double tolerance, double overlapTolerance, out int invalidIndices, out TextLog textLog)
Return: CurveIntersections
Modifiers: public, static
Summary: Intersects a curve and a surface.
Parameter: curve (Curve)
Parameter Summary: Curve for intersection.
Parameter: surface (Surface)
Parameter Summary: Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance. If the curve approaches the surface to within tolerance, an intersection is assumed.
Parameter: overlapTolerance (double)
Parameter Summary: The tolerance with which the curves are tested.
Parameter: invalidIndices (int)
Parameter Summary: The indices in the resulting CurveIntersections collection that are invalid.
Parameter: textLog (TextLog)
Parameter Summary: A text log that contains tails about the invalid intersection events.

Method: Rhino.Geometry.Intersect.Intersection.LineBox(Line line, BoundingBox box, double tolerance, out Interval lineParameters)
Return: bool
Modifiers: public, static
Summary: Intersects an infinite line and an axis aligned bounding box.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: box (BoundingBox)
Parameter Summary: BoundingBox to intersect.
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then the intersection is performed against a box that has each side moved out by tolerance.
Parameter: lineParameters (Interval)
Parameter Summary: The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineBox(Line line, Box box, double tolerance, out Interval lineParameters)
Return: bool
Modifiers: public, static
Summary: Intersects an infinite line with a box volume.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: box (Box)
Parameter Summary: Box to intersect.
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then the intersection is performed against a box that has each side moved out by tolerance.
Parameter: lineParameters (Interval)
Parameter Summary: The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineCircle(Line line, Circle circle, out double t1, out Point3d point1, out double t2, out Point3d point2)
Return: LineCircleIntersection
Modifiers: public, static
Summary: Intersects a line with a circle using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: circle (Circle)
Parameter Summary: Circle for intersection.
Parameter: t1 (double)
Parameter Summary: Parameter on line for first intersection.
Parameter: point1 (Point3d)
Parameter Summary: Point on circle closest to first intersection.
Parameter: t2 (double)
Parameter Summary: Parameter on line for second intersection.
Parameter: point2 (Point3d)
Parameter Summary: Point on circle closest to second intersection.

Method: Rhino.Geometry.Intersect.Intersection.LineCylinder(Line line, Cylinder cylinder, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: LineCylinderIntersection
Modifiers: public, static
Summary: Intersects a line with a cylinder using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: cylinder (Cylinder)
Parameter Summary: Cylinder for intersection.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.LineLine(Line lineA, Line lineB, out double a, out double b, double tolerance, bool finiteSegments)
Return: bool
Modifiers: public, static
Summary: Intersects two lines.
Parameter: lineA (Line)
Parameter Summary: First line for intersection.
Parameter: lineB (Line)
Parameter Summary: Second line for intersection.
Parameter: a (double)
Parameter Summary: Parameter on lineA that is closest to LineB. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
Parameter: b (double)
Parameter Summary: Parameter on lineB that is closest to LineA. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
Parameter: tolerance (double)
Parameter Summary: If tolerance > 0.0, then an intersection is reported only if the distance between the points is <= tolerance. If tolerance <= 0.0, then the closest point between the lines is reported.
Parameter: finiteSegments (bool)
Parameter Summary: If true, the input lines are treated as finite segments. If false, the input lines are treated as infinite lines.

Method: Rhino.Geometry.Intersect.Intersection.LineLine(Line lineA, Line lineB, out double a, out double b)
Return: bool
Modifiers: public, static
Summary: Find the unique closest-points pair between two infinite lines, if it exists.
Parameter: lineA (Line)
Parameter Summary: First line.
Parameter: lineB (Line)
Parameter Summary: Second line.
Parameter: a (double)
Parameter Summary: Parameter on lineA that is closest to lineB.
Parameter: b (double)
Parameter Summary: Parameter on lineB that is closest to lineA. The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)

Method: Rhino.Geometry.Intersect.Intersection.LinePlane(Line line, Plane plane, out double lineParameter)
Return: bool
Modifiers: public, static
Summary: Intersects a line and a plane. This function only returns True if the intersection result is a single point (i.e. if the line is coincident with the plane then no intersection is assumed).
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: lineParameter (double)
Parameter Summary: Parameter on line where intersection occurs. If the parameter is not within the {0, 1} Interval then the finite segment does not intersect the plane.

Method: Rhino.Geometry.Intersect.Intersection.LineSphere(Line line, Sphere sphere, out Point3d intersectionPoint1, out Point3d intersectionPoint2)
Return: LineSphereIntersection
Modifiers: public, static
Summary: Intersects a line with a sphere using exact calculations.
Parameter: line (Line)
Parameter Summary: Line for intersection.
Parameter: sphere (Sphere)
Parameter Summary: Sphere for intersection.
Parameter: intersectionPoint1 (Point3d)
Parameter Summary: First intersection point.
Parameter: intersectionPoint2 (Point3d)
Parameter Summary: Second intersection point.

Method: Rhino.Geometry.Intersect.Intersection.MeshLine(Mesh mesh, Line line, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line. The points are not necessarily sorted.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call. Empty if nothing is found.

Method: Rhino.Geometry.Intersect.Intersection.MeshLine(Mesh mesh, Line line)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh

Method: Rhino.Geometry.Intersect.Intersection.MeshLineSorted(Mesh mesh, Line line, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersections of a mesh and a line. Points are sorted along the line.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect
Parameter: line (Line)
Parameter Summary: The line to intersect with the mesh
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call. Empty if nothing is found.

Method: Rhino.Geometry.Intersect.Intersection.MeshMesh(IEnumerable<Mesh> meshes, double tolerance, out Polyline[] intersections, bool overlapsPolylines, out Polyline[] overlapsPolylinesResult, bool overlapsMesh, out Mesh overlapsMeshResult, FileIO.TextLog textLog, System.Threading.CancellationToken cancel, IProgress<double> progress)
Return: bool
Modifiers: public, static
Summary: Intersects meshes. Overlaps and perforations are provided in the output list.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The mesh input list. This cannot be null. Null entries are tolerated.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: intersections (Polyline[])
Parameter Summary: Returns the intersections.
Parameter: overlapsPolylines (bool)
Parameter Summary: If true, overlaps are computed and returned.
Parameter: overlapsPolylinesResult (Polyline[])
Parameter Summary: If requested, overlaps are returned here.
Parameter: overlapsMesh (bool)
Parameter Summary: If true, an overlaps mesh is computed and returned.
Parameter: overlapsMeshResult (Mesh)
Parameter Summary: If requested, overlaps are returned here.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A text log, or null.
Parameter: cancel (System.Threading.CancellationToken)
Parameter Summary: A cancellation token to stop the computation at a given point.
Parameter: progress (IProgress<double>)
Parameter Summary: A progress reporter to inform the user about progress, or null. The reported value is indicative.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshAccurate(Mesh meshA, Mesh meshB, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects two meshes. Overlaps and near misses are handled. This is an old method kept for compatibility.
Parameter: meshA (Mesh)
Parameter Summary: First mesh for intersection.
Parameter: meshB (Mesh)
Parameter Summary: Second mesh for intersection.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshFast(Mesh meshA, Mesh meshB)
Return: Line[]
Modifiers: public, static
Summary: This is an old overload kept for compatibility. Overlaps and near misses are ignored.
Parameter: meshA (Mesh)
Parameter Summary: First mesh for intersection.
Parameter: meshB (Mesh)
Parameter Summary: Second mesh for intersection.

Method: Rhino.Geometry.Intersect.Intersection.MeshMeshPredicate(IEnumerable<Mesh> meshes, double tolerance, out int pairs, FileIO.TextLog textLog)
Return: bool
Modifiers: public, static
Summary: Determines if meshes intersect or overlap.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: The mesh input list. This cannot be null. Null entries are tolerated.
Parameter: tolerance (double)
Parameter Summary: A tolerance value. If negative, the positive value will be used. WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
Parameter: pairs (int)
Parameter Summary: An array containing pairs of meshes that intersect.
Parameter: textLog (FileIO.TextLog)
Parameter Summary: A text log, or null.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, IEnumerable<Plane> planes)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with a collection of infinite planes.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: planes (IEnumerable<Plane>)
Parameter Summary: Planes to intersect with.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, MeshIntersectionCache cache, IEnumerable<Plane> planes, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with a collection of infinite planes.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: cache (MeshIntersectionCache)
Parameter Summary: Intersection cache for the mesh.
Parameter: planes (IEnumerable<Plane>)
Parameter Summary: Planes to intersect with.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, MeshIntersectionCache cache, Plane plane, double tolerance)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with an infinite plane.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: cache (MeshIntersectionCache)
Parameter Summary: Intersection cache for mesh.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.

Method: Rhino.Geometry.Intersect.Intersection.MeshPlane(Mesh mesh, Plane plane)
Return: Polyline[]
Modifiers: public, static
Summary: Intersects a mesh with an infinite plane.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to intersect.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect with.

Method: Rhino.Geometry.Intersect.Intersection.MeshPolyline(Mesh mesh, PolylineCurve curve, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersection of a mesh and a polyline. Starting from version 7, points are always sorted along the polyline.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: curve (PolylineCurve)
Parameter Summary: A polyline curves to intersect.
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.MeshPolylineSorted(Mesh mesh, PolylineCurve curve, out int faceIds)
Return: Point3d[]
Modifiers: public, static
Summary: Finds the intersection of a mesh and a polyline. Points are guaranteed to be sorted along the polyline.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: curve (PolylineCurve)
Parameter Summary: A polyline curves to intersect.
Parameter: faceIds (int)
Parameter Summary: The indices of the intersecting faces. This out reference is assigned during the call.

Method: Rhino.Geometry.Intersect.Intersection.MeshRay(Mesh mesh, Ray3d ray, out int meshFaceIndices)
Return: double
Modifiers: public, static
Summary: Finds the first intersection of a ray with a mesh.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: ray (Ray3d)
Parameter Summary: A ray to be casted.
Parameter: meshFaceIndices (int)
Parameter Summary: faces on mesh that ray intersects.

Method: Rhino.Geometry.Intersect.Intersection.MeshRay(Mesh mesh, Ray3d ray)
Return: double
Modifiers: public, static
Summary: Finds the first intersection of a ray with a mesh.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to intersect.
Parameter: ray (Ray3d)
Parameter Summary: A ray to be casted.

Method: Rhino.Geometry.Intersect.Intersection.PlaneBoundingBox(Plane plane, BoundingBox boundingBox, out Polyline polyline)
Return: bool
Modifiers: public, static
Summary: Intersects a plane and a bounding box.
Parameter: plane (Plane)
Parameter Summary: The plane.
Parameter: boundingBox (BoundingBox)
Parameter Summary: The bounding box.
Parameter: polyline (Polyline)
Parameter Summary: The output polyline if successful.

Method: Rhino.Geometry.Intersect.Intersection.PlaneCircle(Plane plane, Circle circle, out double firstCircleParameter, out double secondCircleParameter)
Return: PlaneCircleIntersection
Modifiers: public, static
Summary: Intersects a plane with a circle using exact calculations.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: circle (Circle)
Parameter Summary: Circe to intersect.
Parameter: firstCircleParameter (double)
Parameter Summary: First intersection parameter on circle if successful or RhinoMath.UnsetValue if not.
Parameter: secondCircleParameter (double)
Parameter Summary: Second intersection parameter on circle if successful or RhinoMath.UnsetValue if not.

Method: Rhino.Geometry.Intersect.Intersection.PlanePlane(Plane planeA, Plane planeB, out Line intersectionLine)
Return: bool
Modifiers: public, static
Summary: Intersects two planes and return the intersection line. If the planes are parallel or coincident, no intersection is assumed.
Parameter: planeA (Plane)
Parameter Summary: First plane for intersection.
Parameter: planeB (Plane)
Parameter Summary: Second plane for intersection.
Parameter: intersectionLine (Line)
Parameter Summary: If this function returns true, the intersectionLine parameter will return the line where the planes intersect.

Method: Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(Plane planeA, Plane planeB, Plane planeC, out Point3d intersectionPoint)
Return: bool
Modifiers: public, static
Summary: Intersects three planes to find the single point they all share.
Parameter: planeA (Plane)
Parameter Summary: First plane for intersection.
Parameter: planeB (Plane)
Parameter Summary: Second plane for intersection.
Parameter: planeC (Plane)
Parameter Summary: Third plane for intersection.
Parameter: intersectionPoint (Point3d)
Parameter Summary: Point where all three planes converge.

Method: Rhino.Geometry.Intersect.Intersection.PlaneSphere(Plane plane, Sphere sphere, out Circle intersectionCircle)
Return: PlaneSphereIntersection
Modifiers: public, static
Summary: Intersects a plane with a sphere using exact calculations.
Parameter: plane (Plane)
Parameter Summary: Plane to intersect.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to intersect.
Parameter: intersectionCircle (Circle)
Parameter Summary: Intersection result.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToBreps(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The breps projection targets.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The points to project.
Parameter: direction (Vector3d)
Parameter Summary: The direction to project.
Parameter: tolerance (double)
Parameter Summary: The tolerance used for intersections.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToBrepsEx(IEnumerable<Brep> breps, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int indices)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto breps.
Parameter: breps (IEnumerable<Brep>)
Parameter Summary: The breps projection targets.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: The points to project.
Parameter: direction (Vector3d)
Parameter Summary: The direction to project.
Parameter: tolerance (double)
Parameter Summary: The tolerance used for intersections.
Parameter: indices (int)
Parameter Summary: Return points[i] is a projection of points[indices[i]]

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshes(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: the meshes to project on to.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: the points to project.
Parameter: direction (Vector3d)
Parameter Summary: the direction to project.
Parameter: tolerance (double)
Parameter Summary: Projection tolerances used for culling close points and for line-mesh intersection.

Method: Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshesEx(IEnumerable<Mesh> meshes, IEnumerable<Point3d> points, Vector3d direction, double tolerance, out int indices)
Return: Point3d[]
Modifiers: public, static
Summary: Projects points onto meshes.
Parameter: meshes (IEnumerable<Mesh>)
Parameter Summary: the meshes to project on to.
Parameter: points (IEnumerable<Point3d>)
Parameter Summary: the points to project.
Parameter: direction (Vector3d)
Parameter Summary: the direction to project.
Parameter: tolerance (double)
Parameter Summary: Projection tolerances used for culling close points and for line-mesh intersection.
Parameter: indices (int)
Parameter Summary: Return points[i] is a projection of points[indices[i]]

Method: Rhino.Geometry.Intersect.Intersection.RayShoot(IEnumerable<GeometryBase> geometry, Ray3d ray, int maxReflections)
Return: RayShootEvent[]
Modifiers: public, static
Summary: Computes point intersections that occur when shooting a ray to a collection of surfaces and Breps.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: The collection of surfaces and Breps to intersect. Trims are ignored on Breps.
Parameter: ray (Ray3d)
Parameter Summary: >A ray used in intersection.
Parameter: maxReflections (int)
Parameter Summary: The maximum number of reflections. This value should be any value between 1 and 1000, inclusive.

Method: Rhino.Geometry.Intersect.Intersection.RayShoot(Ray3d ray, IEnumerable<GeometryBase> geometry, int maxReflections)
Return: Point3d[]
Modifiers: public, static
Summary: Computes point intersections that occur when shooting a ray to a collection of surfaces and Breps.
Parameter: ray (Ray3d)
Parameter Summary: A ray used in intersection.
Parameter: geometry (IEnumerable<GeometryBase>)
Parameter Summary: Only Surface and Brep objects are currently supported. Trims are ignored on Breps.
Parameter: maxReflections (int)
Parameter Summary: The maximum number of reflections. This value should be any value between 1 and 1000, inclusive.

Method: Rhino.Geometry.Intersect.Intersection.SphereSphere(Sphere sphereA, Sphere sphereB, out Circle intersectionCircle)
Return: SphereSphereIntersection
Modifiers: public, static
Summary: Intersects two spheres using exact calculations.
Parameter: sphereA (Sphere)
Parameter Summary: First sphere to intersect.
Parameter: sphereB (Sphere)
Parameter Summary: Second sphere to intersect.
Parameter: intersectionCircle (Circle)
Parameter Summary: If intersection is a point, then that point will be the center, radius 0.

Method: Rhino.Geometry.Intersect.Intersection.SurfaceSurface(Surface surfaceA, Surface surfaceB, double tolerance, out Curve[] intersectionCurves, out Point3d[] intersectionPoints)
Return: bool
Modifiers: public, static
Summary: Intersects two Surfaces.
Parameter: surfaceA (Surface)
Parameter Summary: First Surface for intersection.
Parameter: surfaceB (Surface)
Parameter Summary: Second Surface for intersection.
Parameter: tolerance (double)
Parameter Summary: Intersection tolerance.
Parameter: intersectionCurves (Curve[])
Parameter Summary: The intersection curves will be returned here.
Parameter: intersectionPoints (Point3d[])
Parameter Summary: The intersection points will be returned here.

Class: Rhino.Geometry.Intersect.IntersectionEvent
Summary: Provides all the information for a single Curve Intersection event.

Constructor: Rhino.Geometry.Intersect.IntersectionEvent.IntersectionEvent()
Summary: Initializes a new instance of the IntersectionEvent class

Property: Rhino.Geometry.Intersect.IntersectionEvent.IsOverlap
Return: bool
Modifiers: public
Summary: All curve intersection events are either a single point or an overlap.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.IsPoint
Return: bool
Modifiers: public
Summary: All curve intersection events are either a single point or an overlap.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.OverlapA
Return: Interval
Modifiers: public
Summary: Gets the interval on curve A where the overlap occurs. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.OverlapB
Return: Interval
Modifiers: public
Summary: Gets the interval on curve B where the overlap occurs. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.ParameterA
Return: double
Modifiers: public
Summary: Gets the parameter on Curve A where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.ParameterB
Return: double
Modifiers: public
Summary: Gets the parameter on Curve B where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointA
Return: Point3d
Modifiers: public
Summary: Gets the point on Curve A where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointA2
Return: Point3d
Modifiers: public
Summary: Gets the end point of the overlap on Curve A. If the intersection type is not overlap, this value is meaningless.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointB
Return: Point3d
Modifiers: public
Summary: Gets the point on Curve B (or Surface B) where the intersection occurred. If the intersection type is overlap, then this will return the start of the overlap region.
Accessors: get

Property: Rhino.Geometry.Intersect.IntersectionEvent.PointB2
Return: Point3d
Modifiers: public
Summary: Gets the end point of the overlap on Curve B (or Surface B). If the intersection type is not overlap, this value is meaningless.
Accessors: get

Method: Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(IntersectionEvent eventA, IntersectionEvent eventB, double relativePointTolerance, Rhino.FileIO.TextLog log)
Return: bool
Modifiers: public, static
Summary: Compare intersection events.
Parameter: eventA (IntersectionEvent)
Parameter Summary: The first intersection event to compare.
Parameter: eventB (IntersectionEvent)
Parameter Summary: The second intersection event to compare.
Parameter: relativePointTolerance (double)
Parameter Summary: The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.
Parameter: log (Rhino.FileIO.TextLog)
Parameter Summary: If not None and False is returned, then a description of the error is appended to log.

Method: Rhino.Geometry.Intersect.IntersectionEvent.CompareEquivalent(IntersectionEvent eventA, IntersectionEvent eventB, double relativePointTolerance)
Return: bool
Modifiers: public, static
Summary: Compare intersection events.
Parameter: eventA (IntersectionEvent)
Parameter Summary: The first intersection event to compare.
Parameter: eventB (IntersectionEvent)
Parameter Summary: The second intersection event to compare.
Parameter: relativePointTolerance (double)
Parameter Summary: The comparison tolerance. If RhinoMath.UnsetValue, then RhinoMath.SqrtEpsilon is used.

Method: Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(out Interval uDomain, out Interval vDomain)
Return: void
Modifiers: public
Summary: If this instance records a Curve|Surface intersection event, andthe intersection type ifoverlap, then use this function to get the U and V domains on the surface where the overlap occurs.
Parameter: uDomain (Interval)
Parameter Summary: Domain along surface U direction for overlap event.
Parameter: vDomain (Interval)
Parameter Summary: Domain along surface V direction for overlap event.

Method: Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(out double u, out double v)
Return: void
Modifiers: public
Summary: If this instance records a Curve|Surface intersection event, andthe intersection type ispoint, then use this function to get the U and V parameters on the surface where the intersection occurs.
Parameter: u (double)
Parameter Summary: Parameter on surface u direction where the intersection occurs.
Parameter: v (double)
Parameter Summary: Parameter on surface v direction where the intersection occurs.

Class: Rhino.Geometry.Intersect.MeshClash
Summary: Represents a particular instance of a clash or intersection between two meshes.

Constructor: Rhino.Geometry.Intersect.MeshClash.MeshClash()
Summary: Initializes a new instance of the MeshClash class

Property: Rhino.Geometry.Intersect.MeshClash.ClashPoint
Return: Point3d
Modifiers: public
Summary: If valid, then the sphere centered at ClashPoint of ClashRadius distance intersects the clashing meshes.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.ClashRadius
Return: double
Modifiers: public
Summary: Gets the clash, or intersection, radius.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.MeshA
Return: Mesh
Modifiers: public
Summary: Gets the first mesh.
Accessors: get

Property: Rhino.Geometry.Intersect.MeshClash.MeshB
Return: Mesh
Modifiers: public
Summary: Gets the second mesh.
Accessors: get

Method: Rhino.Geometry.Intersect.MeshClash.FindDetail(RhinoObject objA, RhinoObject objB, double distance, MeshType meshType, MeshingParameters meshingParameters)
Return: Mesh[]
Modifiers: public, static
Summary: Finds all of the mesh faces on each of two Rhino objects that interfere within a clash distance. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: objA (RhinoObject)
Parameter Summary: The first Rhino object.
Parameter: objB (RhinoObject)
Parameter Summary: The second Rhino object.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.
Parameter: meshType (MeshType)
Parameter Summary: The type of mesh to be used for the calculation.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: The meshing parameters used to generate meshes for the calculation.

Method: Rhino.Geometry.Intersect.MeshClash.FindDetail(RhinoObject objA, RhinoObject objB, double distance)
Return: Mesh[]
Modifiers: public, static
Summary: Finds all of the mesh faces on each of two Rhino objects that interfere within a clash distance. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: objA (RhinoObject)
Parameter Summary: The first Rhino object.
Parameter: objB (RhinoObject)
Parameter Summary: The second Rhino object.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<Mesh> setA, IEnumerable<Mesh> setB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches for locations where the distance froma mesh in one setof meshes is less than distance toanother mesh in a second setof meshes.
Parameter: setA (IEnumerable<Mesh>)
Parameter Summary: The first set of meshes.
Parameter: setB (IEnumerable<Mesh>)
Parameter Summary: The second set of meshes.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<RhinoObject> setA, IEnumerable<RhinoObject> setB, double distance, MeshType meshType, MeshingParameters meshingParameters)
Return: MeshInterference[]
Modifiers: public, static
Summary: Searches for locations where the distance from a RhinoObject, in one set of objects, is less than the specified distance to another RhinoObject in a second set of objects. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: setA (IEnumerable<RhinoObject>)
Parameter Summary: The first set of Rhino objects.
Parameter: setB (IEnumerable<RhinoObject>)
Parameter Summary: The second set of Rhino objects.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.
Parameter: meshType (MeshType)
Parameter Summary: The type of mesh to be used for the calculation.
Parameter: meshingParameters (MeshingParameters)
Parameter Summary: The meshing parameters used to generate meshes for the calculation.

Method: Rhino.Geometry.Intersect.MeshClash.Search(IEnumerable<RhinoObject> setA, IEnumerable<RhinoObject> setB, double distance)
Return: MeshInterference[]
Modifiers: public, static
Summary: Searches for locations where the distance from a RhinoObject, in one set of objects, is less than the specified distance to another RhinoObject in a second set of objects. This function uses the object's mesh to calculate the interferences. Acceptable object types include: BrepObject, ExtrusionObject, MeshObject, and SubDObject.
Parameter: setA (IEnumerable<RhinoObject>)
Parameter Summary: The first set of Rhino objects.
Parameter: setB (IEnumerable<RhinoObject>)
Parameter Summary: The second set of Rhino objects.
Parameter: distance (double)
Parameter Summary: The largest distance at which a clash can occur.

Method: Rhino.Geometry.Intersect.MeshClash.Search(Mesh meshA, IEnumerable<Mesh> setB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches the locations where the distance fromthe first meshtoa mesh in the second setof meshes is less than the provided value.
Parameter: meshA (Mesh)
Parameter Summary: The first mesh.
Parameter: setB (IEnumerable<Mesh>)
Parameter Summary: The second set of meshes.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Method: Rhino.Geometry.Intersect.MeshClash.Search(Mesh meshA, Mesh meshB, double distance, int maxEventCount)
Return: MeshClash[]
Modifiers: public, static
Summary: Searches the locations where the distance fromthe first meshtothe second mesh is less than the provided value.
Parameter: meshA (Mesh)
Parameter Summary: The first mesh.
Parameter: meshB (Mesh)
Parameter Summary: The second mesh.
Parameter: distance (double)
Parameter Summary: The largest distance at which there is a clash. All values smaller than this cause a clash as well.
Parameter: maxEventCount (int)
Parameter Summary: The maximum number of clash objects.

Class: Rhino.Geometry.Intersect.MeshIntersectionCache
Summary: Provides a mechanism for lazily evaluating mesh data.

Constructor: Rhino.Geometry.Intersect.MeshIntersectionCache.MeshIntersectionCache()
Summary: Provides a mechanism for lazily evaluating mesh data. The implementation is private and subject to change.

Method: Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Intersect.MeshIntersectionCache.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Disposes the mesh intersection cache.
Parameter: disposing (bool)
Parameter Summary: If set totruedispose was called explicitly, otherwise specify False if calling from a finalizer.

# Namespace: Rhino.Geometry.MeshRefinements

Class: Rhino.Geometry.MeshRefinements.RefinementSettings
Summary: Defines the way a mesh refinement modifier works.

Constructor: Rhino.Geometry.MeshRefinements.RefinementSettings.RefinementSettings()
Summary: Creates a default operation settings object.

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.ContinueRequest
Return: CancellationToken
Modifiers: public
Summary: A token to request computation termination.
Accessors: get set

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.HasPull
Return: bool
Modifiers: public
Summary: Gets a value indicating whether this subdivision should create a result on a specific surface.
Accessors: get

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.Level
Return: int
Modifiers: public
Summary: The level of subdivision to achieve.
Accessors: get set

Property: Rhino.Geometry.MeshRefinements.RefinementSettings.NakedEdgeMode
Return: CreaseEdges
Modifiers: public
Summary: Set this property to define how naked edges should be treated.
Accessors: get set

# Namespace: Rhino.Geometry.Morphs

Class: Rhino.Geometry.Morphs.BendSpaceMorph
Summary: Deforms objects by bending along a spine arc.

Constructor: Rhino.Geometry.Morphs.BendSpaceMorph.BendSpaceMorph(Point3d start, Point3d end, Point3d point, bool straight, bool symmetric)
Summary: Constructs a bend space morph.

Constructor: Rhino.Geometry.Morphs.BendSpaceMorph.BendSpaceMorph(Point3d start, Point3d end, Point3d point, double angle, bool straight, bool symmetric)
Summary: Constructs a bend space morph.

Property: Rhino.Geometry.Morphs.BendSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.BendSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.BendSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.BendSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.FlowSpaceMorph
Summary: Re-aligns objects from a base curve to a target curve.

Constructor: Rhino.Geometry.Morphs.FlowSpaceMorph.FlowSpaceMorph(Curve curve0, Curve curve1, bool reverseCurve0, bool reverseCurve1, bool preventStretching)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.FlowSpaceMorph.FlowSpaceMorph(Curve curve0, Curve curve1, bool preventStretching)
Summary: Constructs a flow space morph.

Property: Rhino.Geometry.Morphs.FlowSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.FlowSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.MaelstromSpaceMorph
Summary: Deforms objects in a spiral as if they were caught in a whirlpool.

Constructor: Rhino.Geometry.Morphs.MaelstromSpaceMorph.MaelstromSpaceMorph(Plane plane, double radius0, double radius1, double angle)
Summary: Constructs a maelstrom space morph.

Property: Rhino.Geometry.Morphs.MaelstromSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.MaelstromSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.SplopSpaceMorph
Summary: Rotates, scales, and wraps objects on a surface.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam, double scale, double angle)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam, double scale)
Summary: Constructs a flow space morph.

Constructor: Rhino.Geometry.Morphs.SplopSpaceMorph.SplopSpaceMorph(Plane plane, Surface surface, Point2d surfaceParam)
Summary: Constructs a flow space morph.

Property: Rhino.Geometry.Morphs.SplopSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.SplopSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.SporphSpaceMorph
Summary: Deforms an object from a source surface to a target surface.

Constructor: Rhino.Geometry.Morphs.SporphSpaceMorph.SporphSpaceMorph(Surface surface0, Surface surface1, Point2d surface0Param, Point2d surface1Param)
Summary: Constructs a Sporph space morph.

Constructor: Rhino.Geometry.Morphs.SporphSpaceMorph.SporphSpaceMorph(Surface surface0, Surface surface1)
Summary: Constructs a Sporph space morph.

Property: Rhino.Geometry.Morphs.SporphSpaceMorph.ConstrainNormal
Return: Vector3d
Modifiers: public
Summary: Specifies how the normal direction of the base surface is mapped onto the target surface. To use the target surface normal, set to <b>Vector3d.Unset</b> .
Accessors: get set

Property: Rhino.Geometry.Morphs.SporphSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.SporphSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.StretchSpaceMorph
Summary: Deforms objects toward or away from a specified axis.

Constructor: Rhino.Geometry.Morphs.StretchSpaceMorph.StretchSpaceMorph(Point3d start, Point3d end, double length)
Summary: Constructs a stretch space morph.

Constructor: Rhino.Geometry.Morphs.StretchSpaceMorph.StretchSpaceMorph(Point3d start, Point3d end, Point3d point)
Summary: Constructs a stretch space morph.

Property: Rhino.Geometry.Morphs.StretchSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.StretchSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.TaperSpaceMorph
Summary: Deforms objects toward or away from a specified axis.

Constructor: Rhino.Geometry.Morphs.TaperSpaceMorph.TaperSpaceMorph(Point3d start, Point3d end, double startRadius, double endRadius, bool bFlat, bool infiniteTaper)
Summary: Constructs a taper space morph.

Property: Rhino.Geometry.Morphs.TaperSpaceMorph.IsValid
Return: bool
Modifiers: public
Summary: Returns True if the space morph definition is valid, False otherwise.
Accessors: get

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.TaperSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
Parameter: point (Point3d)
Parameter Summary: A point that will be morphed by this object.

Class: Rhino.Geometry.Morphs.TwistSpaceMorph
Summary: Deforms objects by rotating them around an axis.

Constructor: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistSpaceMorph()
Summary: Constructs a twist space morph.

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.InfiniteTwist
Return: bool
Modifiers: public
Summary: If true, the deformation is constant throughout the object, even if the axis is shorter than the object. If false, the deformation takes place only the length of the axis.
Accessors: get set

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAngleRadians
Return: double
Modifiers: public
Summary: Twist angle in radians.
Accessors: get set

Property: Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAxis
Return: Line
Modifiers: public
Summary: Axis to rotate about.
Accessors: get set

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Geometry.Morphs.TwistSpaceMorph.MorphPoint(Point3d point)
Return: Point3d
Modifiers: public, override
Summary: Morphs an Euclidean point.
This method is abstract. | Since: 5.1 | Parameter: point (Point3d) | Parameter Summary: A point that will be morphed by this function.

# Namespace: Rhino.Input
Summary: Classes related to getting user input for things like points, objects, and numbers

Class: Rhino.Input.RhinoGet
Summary: Base class for GetObject, GetPoint, GetSphere, etc.  You will never directly create a RhinoGet but you will use its member functions after calling GetObject::GetObjects(), GetPoint::GetPoint(), and so on.  Provides tools to set command prompt, set command options, and specify if the "get" can optionally accept numbers, nothing (pressing enter), and undo.

Constructor: Rhino.Input.RhinoGet.RhinoGet()
Summary: Initializes a new instance of the RhinoGet class

Property: Rhino.Input.RhinoGet.AllBitmapFileTypes
Return: BitmapFileTypes
Modifiers: public, static
Accessors: get

Method: Rhino.Input.RhinoGet.Get2dRectangle(bool solidPen, out Rectangle rectangle, out RhinoView rectView)
Return: Result
Modifiers: public, static
Summary: Gets a rectangle in view window coordinates.
Parameter: solidPen (bool)
Parameter Summary: If true, a solid pen is used for drawing while the user selects a rectangle. If false, a dotted pen is used for drawing while the user selects a rectangle.
Parameter: rectangle (Rectangle)
Parameter Summary: user selected rectangle in window coordinates.
Parameter: rectView (RhinoView)
Parameter Summary: view that the user selected the window in.

Method: Rhino.Input.RhinoGet.GetAngle(string commandPrompt, Point3d basePoint, Point3d referencePoint, double defaultAngleRadians, out double angleRadians)
Return: Result
Modifiers: public, static
Summary: Allows user to interactively pick an angle
Parameter: commandPrompt (string)
Parameter Summary: if null, a default prompt will be displayed
Parameter: basePoint (Point3d)
Parameter Summary: 
Parameter: referencePoint (Point3d)
Parameter Summary: 
Parameter: defaultAngleRadians (double)
Parameter Summary: 
Parameter: angleRadians (double)
Parameter Summary:

Method: Rhino.Input.RhinoGet.GetArc(out Arc arc)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetBool(string prompt, bool acceptNothing, string offPrompt, string onPrompt, ref bool boolValue)
Return: Result
Modifiers: public, static
Summary: Easy to use Boolean getter.
Parameter: prompt (string)
Parameter Summary: Command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: If true, the user can press enter.
Parameter: offPrompt (string)
Parameter Summary: The 'false/off' message.
Parameter: onPrompt (string)
Parameter Summary: The 'true/on' message.
Parameter: boolValue (bool)
Parameter Summary: Default Boolean value set to this and returned here.

Method: Rhino.Input.RhinoGet.GetBox(out Box box, GetBoxMode mode, Point3d basePoint, string prompt1, string prompt2, string prompt3)
Return: Result
Modifiers: public, static
Summary: Asks the user to select a Box in the viewport.
Parameter: box (Box)
Parameter Summary: If the result is Success, this parameter will be filled out.
Parameter: mode (GetBoxMode)
Parameter Summary: A particular "get box" mode, or <b>GetBoxMode.All</b> .
Parameter: basePoint (Point3d)
Parameter Summary: Optional base point. Supply Point3d.Unset if you don't want to use this.
Parameter: prompt1 (string)
Parameter Summary: Optional first prompt. Supply None to use the default prompt.
Parameter: prompt2 (string)
Parameter Summary: Optional second prompt. Supply None to use the default prompt.
Parameter: prompt3 (string)
Parameter Summary: Optional third prompt. Supply None to use the default prompt.

Method: Rhino.Input.RhinoGet.GetBox(out Box box)
Return: Result
Modifiers: public, static
Summary: Asks the user to select a Box in the viewport.
Parameter: box (Box)
Parameter Summary: If the result is Success, this parameter will be filled out.

Method: Rhino.Input.RhinoGet.GetBoxWithCounts(int xMin, ref int xCount, int yMin, ref int yCount, int zMin, ref int zCount, out Point3d[] corners)
Return: Result
Modifiers: public, static
Summary: Gets a 3d box with prompts for counts in X, Y and Z directions.
Parameter: xMin (int)
Parameter Summary: Minimum value allowed for count in the x direction.
Parameter: xCount (int)
Parameter Summary: Count in the x direction.
Parameter: yMin (int)
Parameter Summary: Minimum value allowed for count in the y direction.
Parameter: yCount (int)
Parameter Summary: Count in the y direction.
Parameter: zMin (int)
Parameter Summary: Minimum value allowed for count in the z direction.
Parameter: zCount (int)
Parameter Summary: Count in the z direction.
Parameter: corners (Point3d[])
Parameter Summary: corners of the bottom rectangle in counter-clockwise order, followed by top rectangle.

Method: Rhino.Input.RhinoGet.GetCircle(out Circle circle)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetColor(string prompt, bool acceptNothing, ref Color color)
Return: Result
Modifiers: public, static
Summary: Easy to use color getter.
Parameter: prompt (string)
Parameter Summary: Command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: If true, the user can press enter.
Parameter: color (Color)
Parameter Summary: Color value returned here. also used as default color.

Method: Rhino.Input.RhinoGet.GetFileName(GetFileNameMode mode, string defaultName, string title, object parent, BitmapFileTypes fileTypes)
Return: string
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetFileName(GetFileNameMode mode, string defaultName, string title, object parent)
Return: string
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetFileNameScripted(GetFileNameMode mode, string defaultName)
Return: string
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetGrip(out GripObject grip, string prompt)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetGrips(out GripObject[] grips, string prompt)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetHelix(out NurbsCurve helix)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetInteger(string prompt, bool acceptNothing, ref int outputNumber, int lowerLimit, int upperLimit)
Return: Result
Modifiers: public, static
Summary: Easy to use number getter.
Parameter: prompt (string)
Parameter Summary: The command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: If true, the user can press enter.
Parameter: outputNumber (int)
Parameter Summary: default number is set to this value and number value returned here.
Parameter: lowerLimit (int)
Parameter Summary: The minimum allowed value.
Parameter: upperLimit (int)
Parameter Summary: The maximum allowed value.

Method: Rhino.Input.RhinoGet.GetInteger(string prompt, bool acceptNothing, ref int outputNumber)
Return: Result
Modifiers: public, static
Summary: Easy to use number getter.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: outputNumber (int)
Parameter Summary: default number is set to this value and number value returned here.

Method: Rhino.Input.RhinoGet.GetLine(out Line line)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetLinearDimension(out LinearDimension dimension)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetMeshParameters(RhinoDoc doc, ref MeshingParameters parameters, ref int uiStyle)
Return: Result
Modifiers: public, static
Summary: Asks the user to specify meshing parameters.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document
Parameter: parameters (MeshingParameters)
Parameter Summary: The initial meshing parameters. If successful, the updated meshing parameters are returned here.
Parameter: uiStyle (int)
Parameter Summary: The user interface style, where: 0 = simple dialog, 1 = details dialog, 2 = script or batch mode.

Method: Rhino.Input.RhinoGet.GetMultipleObjects(string prompt, bool acceptNothing, GetObjectGeometryFilter filter, out ObjRef[] rhObjects)
Return: Result
Modifiers: public, static
Summary: Easy to use object getter for getting multiple objects.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: filter (GetObjectGeometryFilter)
Parameter Summary: geometry filter to use when getting objects.
Parameter: rhObjects (ObjRef[])
Parameter Summary: result of the get. may be null.

Method: Rhino.Input.RhinoGet.GetMultipleObjects(string prompt, bool acceptNothing, ObjectType filter, out ObjRef[] rhObjects)
Return: Result
Modifiers: public, static
Summary: Easy to use object getter for getting multiple objects.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: filter (ObjectType)
Parameter Summary: geometry filter to use when getting objects.
Parameter: rhObjects (ObjRef[])
Parameter Summary: result of the get. may be null.

Method: Rhino.Input.RhinoGet.GetNumber(string prompt, bool acceptNothing, ref double outputNumber, double lowerLimit, double upperLimit)
Return: Result
Modifiers: public, static
Summary: Easy to use number getter.
Parameter: prompt (string)
Parameter Summary: The command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: If true, the user can press Enter.
Parameter: outputNumber (double)
Parameter Summary: Default number is set to this value and the return number value is assigned to this variable during the call.
Parameter: lowerLimit (double)
Parameter Summary: The minimum allowed value.
Parameter: upperLimit (double)
Parameter Summary: The maximum allowed value.

Method: Rhino.Input.RhinoGet.GetNumber(string prompt, bool acceptNothing, ref double outputNumber)
Return: Result
Modifiers: public, static
Summary: Easy to use number getter.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: outputNumber (double)
Parameter Summary: default number is set to this value and number value returned here.

Method: Rhino.Input.RhinoGet.GetOneObject(string prompt, bool acceptNothing, GetObjectGeometryFilter filter, out ObjRef objref)
Return: Result
Modifiers: public, static
Summary: Easy to use object getter.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: filter (GetObjectGeometryFilter)
Parameter Summary: geometry filter to use when getting objects.
Parameter: objref (ObjRef)
Parameter Summary: result of the get. may be null.

Method: Rhino.Input.RhinoGet.GetOneObject(string prompt, bool acceptNothing, ObjectType filter, out ObjRef rhObject)
Return: Result
Modifiers: public, static
Summary: Easy to use object getter.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: filter (ObjectType)
Parameter Summary: geometry filter to use when getting objects.
Parameter: rhObject (ObjRef)
Parameter Summary: result of the get. may be null.

Method: Rhino.Input.RhinoGet.GetPlane(out Plane plane)
Return: Result
Modifiers: public, static
Summary: Gets an oriented infinite plane.
Parameter: plane (Plane)
Parameter Summary: The plane result.

Method: Rhino.Input.RhinoGet.GetPoint(string prompt, bool acceptNothing, out Point3d point)
Return: Result
Modifiers: public, static
Summary: Gets a point coordinate from the document.
Parameter: prompt (string)
Parameter Summary: Prompt to display in command line during the operation.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: point (Point3d)
Parameter Summary: point value returned here.

Method: Rhino.Input.RhinoGet.GetPointOnMesh(MeshObject meshObject, string prompt, bool acceptNothing, out Point3d point)
Return: Result
Modifiers: public, static
Summary: Gets a point constrained to an existing mesh in the document.
Parameter: meshObject (MeshObject)
Parameter Summary: An mesh object in the document.
Parameter: prompt (string)
Parameter Summary: Text prompt.
Parameter: acceptNothing (bool)
Parameter Summary: True if nothing else should be accepted.
Parameter: point (Point3d)
Parameter Summary: A point value will be assigned to this out parameter during this call.

Method: Rhino.Input.RhinoGet.GetPointOnMesh(RhinoDoc doc, MeshObject meshObject, string prompt, bool acceptNothing, out Point3d point)
Return: Result
Modifiers: public, static
Summary: Gets a point constrained to an existing mesh in the document.
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document
Parameter: meshObject (MeshObject)
Parameter Summary: An mesh object in the document.
Parameter: prompt (string)
Parameter Summary: Text prompt.
Parameter: acceptNothing (bool)
Parameter Summary: True if nothing else should be accepted.
Parameter: point (Point3d)
Parameter Summary: A point value will be assigned to this out parameter during this call.

Method: Rhino.Input.RhinoGet.GetPointOnMesh(RhinoDoc doc, System.Guid meshObjectId, string prompt, bool acceptNothing, out Point3d point)
Return: Result
Modifiers: public, static
Summary: Gets a point constrained to an existing mesh in the document.
Parameter: doc (RhinoDoc)
Parameter Summary: Document containing mesh object.
Parameter: meshObjectId (System.Guid)
Parameter Summary: An ID of a mesh in the document.
Parameter: prompt (string)
Parameter Summary: Text prompt.
Parameter: acceptNothing (bool)
Parameter Summary: True if nothing else should be accepted.
Parameter: point (Point3d)
Parameter Summary: A point value will be assigned to this out parameter during this call.

Method: Rhino.Input.RhinoGet.GetPointOnMesh(System.Guid meshObjectId, string prompt, bool acceptNothing, out Point3d point)
Return: Result
Modifiers: public, static
Summary: Gets a point constrained to an existing mesh in the document.
Parameter: meshObjectId (System.Guid)
Parameter Summary: An ID of a mesh in the document.
Parameter: prompt (string)
Parameter Summary: Text prompt.
Parameter: acceptNothing (bool)
Parameter Summary: True if nothing else should be accepted.
Parameter: point (Point3d)
Parameter Summary: A point value will be assigned to this out parameter during this call.

Method: Rhino.Input.RhinoGet.GetPolygon(bool useActiveLayerLinetype, ref int numberSides, ref bool inscribed, out Polyline polyline)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetPolygon(ref int numberSides, ref bool inscribed, out Polyline polyline)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetPolyline(out Polyline polyline)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetPrintWindow(ref ViewCaptureSettings settings)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetRectangle(GetBoxMode mode, Point3d firstPoint, IEnumerable<string> prompts, out Point3d[] corners)
Return: Result
Modifiers: public, static
Summary: Gets a 3d rectangle made up of four points.
Parameter: mode (GetBoxMode)
Parameter Summary: A get box mode.
Parameter: firstPoint (Point3d)
Parameter Summary: The first corner used. Pass Point3d.Unset if you do not want to set this.
Parameter: prompts (IEnumerable<string>)
Parameter Summary: Optional prompts to display while getting points. May be null.
Parameter: corners (Point3d[])
Parameter Summary: Corners of the rectangle in counter-clockwise order will be assigned to this out parameter during this call.

Method: Rhino.Input.RhinoGet.GetRectangle(out Point3d[] corners)
Return: Result
Modifiers: public, static
Summary: Gets a 3d rectangle.
Parameter: corners (Point3d[])
Parameter Summary: corners of the rectangle in counter-clockwise order.

Method: Rhino.Input.RhinoGet.GetRectangle(string firstPrompt, out Point3d[] corners)
Return: Result
Modifiers: public, static
Summary: Gets a 3d rectangle.
Parameter: firstPrompt (string)
Parameter Summary: 
Parameter: corners (Point3d[])
Parameter Summary: corners of the rectangle in counter-clockwise order.

Method: Rhino.Input.RhinoGet.GetRectangleWithCounts(int xMin, ref int xCount, int yMin, ref int yCount, out Point3d[] corners)
Return: Result
Modifiers: public, static
Summary: Gets a 3d rectangle with prompts for counts in X and Y directions.
Parameter: xMin (int)
Parameter Summary: Minimum value allowed for count in the x direction.
Parameter: xCount (int)
Parameter Summary: Count in the x direction.
Parameter: yMin (int)
Parameter Summary: Minimum value allowed for count in the y direction.
Parameter: yCount (int)
Parameter Summary: Count in the y direction.
Parameter: corners (Point3d[])
Parameter Summary: corners of the rectangle in counter-clockwise order.

Method: Rhino.Input.RhinoGet.GetSpiral(out NurbsCurve spiral)
Return: Result
Modifiers: public, static

Method: Rhino.Input.RhinoGet.GetString(string prompt, bool acceptNothing, ref string outputString)
Return: Result
Modifiers: public, static
Summary: Easy to use string getter.
Parameter: prompt (string)
Parameter Summary: command prompt.
Parameter: acceptNothing (bool)
Parameter Summary: if true, the user can press enter.
Parameter: outputString (string)
Parameter Summary: default string set to this value and string value returned here.

Method: Rhino.Input.RhinoGet.GetView(string commandPrompt, out RhinoView view)
Return: Result
Modifiers: public, static
Summary: Allows the user to interactively pick a viewport.
Parameter: commandPrompt (string)
Parameter Summary: The command prompt during the request.
Parameter: view (RhinoView)
Parameter Summary: The view that the user picked.
If the operation is successful, then this out parameter is assigned the correct view during this call.

Method: Rhino.Input.RhinoGet.InGet(RhinoDoc doc)
Return: bool
Modifiers: public, static
Summary: Returns True if the document is current in a "Get" operation.

Method: Rhino.Input.RhinoGet.InGetObject(RhinoDoc doc)
Return: bool
Modifiers: public, static
Summary: Returns True if currently in a GetObject.GetObjects()

Method: Rhino.Input.RhinoGet.InGetPoint(RhinoDoc doc)
Return: bool
Modifiers: public, static
Summary: Returns True if currently in a GetPoint.Get()

Method: Rhino.Input.RhinoGet.StringToCommandOptionName(string englishString, string localizedString)
Return: LocalizeStringPair
Modifiers: public, static
Summary: Convert some arbitrary string value to a valid command option name removing any invalid characters.
Parameter: englishString (string)
Parameter Summary: English string to convert.
Parameter: localizedString (string)
Parameter Summary: Optional localized string to convert.

Method: Rhino.Input.RhinoGet.StringToCommandOptionName(string stringToConvert)
Return: string
Modifiers: public, static
Summary: Convert some arbitrary string value to a valid command option name removing any invalid characters.
Parameter: stringToConvert (string)
Parameter Summary: String to convert.

Class: Rhino.Input.StringParser
Summary: Parse strings to numbers, distances and angles

Constructor: Rhino.Input.StringParser.StringParser()
Summary: Initializes a new instance of the StringParser class

Method: Rhino.Input.StringParser.ParseAngleExpession(string expression, int start_offset, int expression_length, StringParserSettings parse_settings_in, AngleUnitSystem output_angle_unit_system, out double value_out, ref StringParserSettings parse_results, ref AngleUnitSystem parsed_unit_system)
Return: int
Modifiers: public, static

Method: Rhino.Input.StringParser.ParseAngleExpressionDegrees(string expression, out double angle_degrees)
Return: bool
Modifiers: public, static

Method: Rhino.Input.StringParser.ParseAngleExpressionRadians(string expression, out double angle_radians)
Return: bool
Modifiers: public, static

Method: Rhino.Input.StringParser.ParseLengthExpession(string expression, int start_offset, int expression_length, StringParserSettings parse_settings_in, UnitSystem output_unit_system, out double value_out, ref StringParserSettings parse_results, ref UnitSystem parsed_unit_system)
Return: int
Modifiers: public, static
Summary: Parse a string for a length value. Expression can include complex expressions Most complex version of length parsing
Parameter: expression (string)
Parameter Summary: [In] The string to parse
Parameter: start_offset (int)
Parameter Summary: [In] Offset position in string to start parsing
Parameter: expression_length (int)
Parameter Summary: [In] Maximum length of string to parse. -1 means parse to a terminating character or end of string
Parameter: parse_settings_in (StringParserSettings)
Parameter Summary: [In] Determines what input will be parsed
Parameter: output_unit_system (UnitSystem)
Parameter Summary: [In] Output value is returned in this unit system
Parameter: value_out (double)
Parameter Summary: [Out] The length value result
Parameter: parse_results (StringParserSettings)
Parameter Summary: [Out] Describes the results of the parse operation
Parameter: parsed_unit_system (UnitSystem)
Parameter Summary: [Out] If a unit system name was found in the string, it is returned here. The output value is in the unit system specified in output_unit_system

Method: Rhino.Input.StringParser.ParseLengthExpession(string expression, StringParserSettings parse_settings_in, UnitSystem output_unit_system, out double value_out)
Return: int
Modifiers: public, static
Summary: Parse a string for a length value. Expression can include complex expressions Simplest version of Length parsing
Parameter: expression (string)
Parameter Summary: [In] The string to parse
Parameter: parse_settings_in (StringParserSettings)
Parameter Summary: [In] Determines what input will be parsed
Parameter: output_unit_system (UnitSystem)
Parameter Summary: [In] Output value is in this unit system
Parameter: value_out (double)
Parameter Summary: [Out] The length value result

Method: Rhino.Input.StringParser.ParseNumber(string expression, int max_count, StringParserSettings settings_in, ref StringParserSettings settings_out, out double answer)
Return: int
Modifiers: public, static
Summary: Parse a string expression to get a number
Parameter: expression (string)
Parameter Summary: String to parse
Parameter: max_count (int)
Parameter Summary: Maximum number of characters to parse
Parameter: settings_in (StringParserSettings)
Parameter Summary: Determines what input will be parsed
Parameter: settings_out (StringParserSettings)
Parameter Summary: Reports the results of the parse operation
Parameter: answer (double)
Parameter Summary: The number result of the parse operation

Class: Rhino.Input.StringParserSettings
Summary: Parameters for parsing strings

Constructor: Rhino.Input.StringParserSettings.StringParserSettings()

Property: Rhino.Input.StringParserSettings.DefaultParseSettings
Return: StringParserSettings
Modifiers: public, static
Summary: - The default settings parse just about everything in a reasonable way. - Any angle values with unspecified units will be treated as radians. Angles without units can be encountered while parsing formulas, lengths and points and need to be thoughtfully considered in most parsing situations.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsDegrees
Return: StringParserSettings
Modifiers: public, static
Summary: - The default settings parse just about everything in a reasonable way. - Any angle values with unspecified units will be treated as degrees.Angles without units can be encountered while parsing formulas, lengths and points and need to be thoughtfully considered in most parsing situations.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsDoubleNumber
Return: StringParserSettings
Modifiers: public, static
Summary: - The double number settings parse and optional unary + or unary - and then parse a number that can be integer, decimal, or scientific e notation.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsEmpty
Return: StringParserSettings
Modifiers: public, static
Summary: - ON_ParseSetting::FalseSettings has all parsing options set to false. - A common use of ON_ParseSettings FalseSettings is to initialize ON_ParseSettings classes that are used to report what happened during parsing.Any parsing results value set to True after parsing indicates that type of parsing occurred.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsIntegerNumber
Return: StringParserSettings
Modifiers: public, static
Summary: - The integer settings parse and optional unary + or unary - and then parses one or more digits.Parsing stops after the last digit.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsRadians
Return: StringParserSettings
Modifiers: public, static
Summary: - The default settings parse just about everything in a reasonable way. - Any angle values with unspecified units will be treated as radians.Angles without units can be encountered while parsing formulas, lengths and points and need to be thoughtfully considered in most parsing situations.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsRationalNumber
Return: StringParserSettings
Modifiers: public, static
Summary: - The rational number settings parse and optional unary + or unary - and then parse one or more digits.If a rational number fraction bar follows the last digit in the numerator, then it is parsed and an integer denominator is parsed.The denominator cannot have a unary + or - preceding the digits.Parsing stops after the last digit in the denominator.
Accessors: get

Property: Rhino.Input.StringParserSettings.ParseSettingsRealNumber
Return: StringParserSettings
Modifiers: public, static
Summary: - The real number settings parse and optional unary + or unary - and then parse a number that can be integer, decimal, scientific e notation or pi.
Accessors: get

Property: Rhino.Input.StringParserSettings.DefaultAngleUnitSystem
Return: AngleUnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.DefaultLengthUnitSystem
Return: UnitSystem
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseAddition
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseArcDegreesMinutesSeconds
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseArithmeticExpression
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseCommaAsDecimalPoint
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseCommaAsDigitSeparator
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseDAsExponentInScientificENotation
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseDivision
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseExplicitFormulaExpression
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseFeetInches
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseFullStopAsDecimalPoint
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseFullStopAsDigitSeparator
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseHyphenAsNumberDash
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseHyphenMinusAsNumberDash
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseIntegerDashFraction
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseLeadingWhiteSpace
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseMathFunctions
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseMultiplication
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParsePairedParentheses
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParsePi
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseRationalNumber
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseScientificENotation
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSignificandDigitSeparators
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSignificandFractionalPart
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSignificandIntegerPart
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSpaceAsDigitSeparator
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSubtraction
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseSurveyorsNotation
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseUnaryMinus
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.ParseUnaryPlus
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.StringParserSettings.PreferedLocaleId
Return: uint
Modifiers: public
Accessors: get set

Method: Rhino.Input.StringParserSettings.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.StringParserSettings.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Input.StringParserSettings.SetAllExpressionSettingsToFalse()
Return: void
Modifiers: public

Method: Rhino.Input.StringParserSettings.SetAllFieldsToFalse()
Return: void
Modifiers: public

# Namespace: Rhino.Input.Custom

Class: Rhino.Input.Custom.CommandLineOption

Property: Rhino.Input.Custom.CommandLineOption.CurrentListOptionIndex
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.CurrentNumericValue
Return: double
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.CurrentToggleValue
Return: bool?
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.EnglishName
Return: string
Modifiers: public
Summary: The English command option name
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.Index
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.LocalName
Return: string
Modifiers: public
Summary: The localized command option name
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.OptionType
Return: CommandLineOptionType
Modifiers: public
Summary: The type of this command line option
Accessors: get

Property: Rhino.Input.Custom.CommandLineOption.StringOptionValue
Return: string
Modifiers: public
Summary: Assigned by RhinoGet.Get if an option value is specified in a script or by a command window control.
Accessors: get

Method: Rhino.Input.Custom.CommandLineOption.IsValidOptionName(string optionName)
Return: bool
Modifiers: public, static
Summary: Test a string to see if it can be used as an option name in any of the RhinoGet::AddCommandOption...() functions.
Parameter: optionName (string)
Parameter Summary: The string to be tested.

Method: Rhino.Input.Custom.CommandLineOption.IsValidOptionValueName(string optionValue)
Return: bool
Modifiers: public, static
Summary: Test a string to see if it can be used as an option value in RhinoGet::AddCommandOption, RhinoGet::AddCommandOptionToggle, or RhinoGet::AddCommandOptionList.
Parameter: optionValue (string)
Parameter Summary: The string to be tested.

Method: Rhino.Input.Custom.CommandLineOption.ListOptions(bool english)
Return: string
Modifiers: public
Summary: If this OptionType is a list, then the option should contain a list of values that the user can pick from.
Parameter: english (bool)
Parameter Summary: return the English or local versions of the list options

Method: Rhino.Input.Custom.CommandLineOption.ToggleValues(bool english, out string offValue, out string onValue)
Return: void
Modifiers: public

Class: Rhino.Input.Custom.GetArc

Constructor: Rhino.Input.Custom.GetArc.GetArc()

Property: Rhino.Input.Custom.GetArc.AllowDeformable
Return: bool
Modifiers: public
Summary: Allow for deformable options
Accessors: get set

Property: Rhino.Input.Custom.GetArc.DefaultRadius
Return: double
Modifiers: public
Summary: Default radius used for start and end radius
Accessors: get set

Property: Rhino.Input.Custom.GetArc.Deformable
Return: bool
Modifiers: public
Summary: Is the deformable option set
Accessors: get set

Property: Rhino.Input.Custom.GetArc.DeformableDegree
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetArc.DeformablePointCount
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetArc.UseActiveLayerLinetypeForCurves
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Input.Custom.GetArc.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetArc.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetArc.Get(out Geometry.Arc arc)
Return: Commands.Result
Modifiers: public
Summary: Perform the 'get' operation.

Class: Rhino.Input.Custom.GetBaseClass
Summary: Base class for GetObject, GetPoint, GetSphere, etc.  You will never directly create a GetBaseClass but you will use its member functions after calling GetObject.Gets(), GetPoint.Get(), and so on.  Provides tools to set command prompt, set command options, and specify if the "get" can optionally accept numbers, nothing (pressing enter), and undo.

Constructor: Rhino.Input.Custom.GetBaseClass.GetBaseClass()
Summary: Initializes a new instance of the GetBaseClass class

Method: Rhino.Input.Custom.GetBaseClass.PostCustomMessage(object messageData)
Return: void
Modifiers: public, static

Method: Rhino.Input.Custom.GetBaseClass.AcceptColor(bool enable)
Return: void
Modifiers: public
Summary: If you want to allow the user to be able to type in a color r,g,b or name during GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptColor(true) before calling GetPoint()/GetObject(). If the user chooses to type in a color, then the result code GetResult.Color is returned and you can use RhinoGet.Color() to get the value of the color.  If the get accepts points, then the user will not be able to type in r,g,b colors but will be able to type color names.
Parameter: enable (bool)
Parameter Summary: True if user is able to type a color.

Method: Rhino.Input.Custom.GetBaseClass.AcceptCustomMessage(bool enable)
Return: void
Modifiers: public

Method: Rhino.Input.Custom.GetBaseClass.AcceptEnterWhenDone(bool enable)
Return: void
Modifiers: public
Summary: There are instances of RhinoGet that prompt with "Press Enter when Done." yet do not call AcceptNothing(). On the Mac, these instances need an additional call to AcceptEnterWhenDone() so the GetPointOptions dialog can correctly enable the Done button.

Method: Rhino.Input.Custom.GetBaseClass.AcceptNothing(bool enable)
Return: void
Modifiers: public
Summary: If you want to allow the user to be able to press enter in order to skip selecting a something in GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptNothing( True ) beforehand.
Parameter: enable (bool)
Parameter Summary: True if user is able to press enter in order to skip selecting.

Method: Rhino.Input.Custom.GetBaseClass.AcceptNumber(bool enable, bool acceptZero)
Return: void
Modifiers: public
Summary: If you want to allow the user to be able to type in a number during GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptNumber() beforehand. If the user chooses to type in a number, then the result code GetResult.Number is returned and you can use RhinoGet.Number() to get the value of the number. If you are using GetPoint and you want "0" to return (0,0,0) instead of the number zero, then set acceptZero = false.
Parameter: enable (bool)
Parameter Summary: True if user is able to type a number.
Parameter: acceptZero (bool)
Parameter Summary: If you are using GetPoint and you want "0" to return (0,0,0) instead of the number zero, then set acceptZero = false.

Method: Rhino.Input.Custom.GetBaseClass.AcceptPoint(bool enable)
Return: void
Modifiers: public
Summary: If you want to allow the user to be able to type in a point then call AcceptPoint(true) before calling GetPoint()/GetObject(). If the user chooses to type in a number, then the result code GetResult.Point is returned and you can use RhinoGet.Point() to get the value of the point.
Parameter: enable (bool)
Parameter Summary: True if user is able to type in a point.

Method: Rhino.Input.Custom.GetBaseClass.AcceptString(bool enable)
Return: void
Modifiers: public
Summary: If you want to allow the user to be able to type in a string during GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptString(true) before calling GetPoint()/GetObject(). If the user chooses to type in a string, then the result code GetResult.String is returned and you can use RhinoGet.String() to get the value of the string.
Parameter: enable (bool)
Parameter Summary: True if user is able to type a string.

Method: Rhino.Input.Custom.GetBaseClass.AcceptUndo(bool enable)
Return: void
Modifiers: public
Summary: If you want to allow the user to have an 'undo' option in GetPoint.Get(), GetObject.GetObjects(), etc., then call AcceptUndo(true) beforehand.
Parameter: enable (bool)
Parameter Summary: True if user is able to choose the 'Undo' option.

Method: Rhino.Input.Custom.GetBaseClass.AddOption(LocalizeStringPair optionName, LocalizeStringPair optionValue, bool hiddenOption)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).
Parameter: optionValue (LocalizeStringPair)
Parameter Summary: The localized value visualized after an equality sign.
Parameter: hiddenOption (bool)
Parameter Summary: If true, the option is not displayed on the command line and the full option name must be typed in order to activate the option.

Method: Rhino.Input.Custom.GetBaseClass.AddOption(LocalizeStringPair optionName, LocalizeStringPair optionValue)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).
Parameter: optionValue (LocalizeStringPair)
Parameter Summary: The localized value visualized after an equality sign.

Method: Rhino.Input.Custom.GetBaseClass.AddOption(LocalizeStringPair optionName)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).

Method: Rhino.Input.Custom.GetBaseClass.AddOption(string englishOption, string englishOptionValue, bool hiddenOption)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: englishOption (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).
Parameter: englishOptionValue (string)
Parameter Summary: The option value in English, visualized after an equality sign.
Parameter: hiddenOption (bool)
Parameter Summary: If true, the option is not displayed on the command line and the full option name must be typed in order to activate the option.

Method: Rhino.Input.Custom.GetBaseClass.AddOption(string englishOption, string englishOptionValue)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: englishOption (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).
Parameter: englishOptionValue (string)
Parameter Summary: The option value in English, visualized after an equality sign.

Method: Rhino.Input.Custom.GetBaseClass.AddOption(string englishOption)
Return: int
Modifiers: public
Summary: Adds a command line option.
Parameter: englishOption (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes).

Method: Rhino.Input.Custom.GetBaseClass.AddOptionColor(LocalizeStringPair optionName, ref OptionColor colorValue, string prompt)
Return: int
Modifiers: public
Summary: Add a command line option to get colors and automatically save the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: option description.
Parameter: colorValue (OptionColor)
Parameter Summary: The current color value.
Parameter: prompt (string)
Parameter Summary: option prompt shown if the user selects this option

Method: Rhino.Input.Custom.GetBaseClass.AddOptionColor(LocalizeStringPair optionName, ref OptionColor colorValue)
Return: int
Modifiers: public
Summary: Add a command line option to get colors and automatically save the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: option description
Parameter: colorValue (OptionColor)
Parameter Summary: The current color value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionColor(string englishName, ref OptionColor colorValue, string prompt)
Return: int
Modifiers: public
Summary: Add a command line option to get colors and automatically save the value.
Parameter: englishName (string)
Parameter Summary: option description
Parameter: colorValue (OptionColor)
Parameter Summary: The current color value.
Parameter: prompt (string)
Parameter Summary: The command prompt will show this during picking.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionColor(string englishName, ref OptionColor colorValue)
Return: int
Modifiers: public
Summary: Add a command line option to get colors and automatically save the value.
Parameter: englishName (string)
Parameter Summary: option description
Parameter: colorValue (OptionColor)
Parameter Summary: The current color value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionDouble(LocalizeStringPair optionName, ref OptionDouble numberValue, string prompt)
Return: int
Modifiers: public
Summary: Adds a command line option to get numbers and automatically saves the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: numberValue (OptionDouble)
Parameter Summary: The current number value.
Parameter: prompt (string)
Parameter Summary: option prompt shown if the user selects this option.  If None or empty, then the option name is used as the get number prompt.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionDouble(LocalizeStringPair optionName, ref OptionDouble numberValue)
Return: int
Modifiers: public
Summary: Adds a command line option to get numbers and automatically save the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: numberValue (OptionDouble)
Parameter Summary: The current number value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionDouble(string englishName, ref OptionDouble numberValue, string prompt)
Return: int
Modifiers: public
Summary: Adds a command line option to get numbers and automatically save the value.
Parameter: englishName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: numberValue (OptionDouble)
Parameter Summary: Current value.
Parameter: prompt (string)
Parameter Summary: option prompt shown if the user selects this option.  If None or empty, then the option name is used as the get number prompt.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionDouble(string englishName, ref OptionDouble numberValue)
Return: int
Modifiers: public
Summary: Adds a command line option to get numbers and automatically save the value.
Parameter: englishName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: numberValue (OptionDouble)
Parameter Summary: The current number value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionEnumList(string englishOptionName, T defaultValue, T[] include)
Return: int
Modifiers: public
Summary: Adds a choice of enumerated values as list option. Allows to include only some enumerated values.
Parameter: englishOptionName (string)
Parameter Summary: The name of the option
Parameter: defaultValue (T)
Parameter Summary: The default value
Parameter: include (T[])
Parameter Summary: An array of enumerated values to use. This argument can also be null; in this case, the whole enumerated is used.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionEnumList(string englishOptionName, T defaultValue)
Return: int
Modifiers: public
Summary: Adds a choice of enumerated values as list option
Parameter: englishOptionName (string)
Parameter Summary: The name of the option
Parameter: defaultValue (T)
Parameter Summary: The default value

Method: Rhino.Input.Custom.GetBaseClass.AddOptionEnumSelectionList(string englishOptionName, IEnumerable<T> enumSelection, int listCurrentIndex)
Return: int
Modifiers: public
Summary: Adds a list of enumerated values as option list. Use enumSelection[go.Option.CurrentListOptionIndex] to retrieve selection.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionInteger(LocalizeStringPair optionName, ref OptionInteger intValue, string prompt)
Return: int
Modifiers: public
Summary: Adds a command line option to get integers and automatically save the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: intValue (OptionInteger)
Parameter Summary: The current integer value.
Parameter: prompt (string)
Parameter Summary: option prompt shown if the user selects this option.  If None or empty, then the option name is used as the get number prompt.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionInteger(LocalizeStringPair optionName, ref OptionInteger intValue)
Return: int
Modifiers: public
Summary: Adds a command line option to get integers and automatically save the value.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: intValue (OptionInteger)
Parameter Summary: The current integer value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionInteger(string englishName, ref OptionInteger intValue, string prompt)
Return: int
Modifiers: public
Summary: Adds a command line option to get integers and automatically save the value.
Parameter: englishName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: intValue (OptionInteger)
Parameter Summary: The current integer value.
Parameter: prompt (string)
Parameter Summary: option prompt shown if the user selects this option.  If None or empty, then the option name is used as the get number prompt.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionInteger(string englishName, ref OptionInteger intValue)
Return: int
Modifiers: public
Summary: Adds a command line option to get integers and automatically save the value.
Parameter: englishName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: intValue (OptionInteger)
Parameter Summary: The current integer value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionList(LocalizeStringPair optionName, IEnumerable<LocalizeStringPair> listValues, int listCurrentIndex)
Return: int
Modifiers: public
Summary: Adds a command line list option.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: listValues (IEnumerable<LocalizeStringPair>)
Parameter Summary: The string values.
Parameter: listCurrentIndex (int)
Parameter Summary: Zero based index of current option.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionList(string englishOptionName, IEnumerable<string> listValues, int listCurrentIndex)
Return: int
Modifiers: public
Summary: Adds a command line list option.
Parameter: englishOptionName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: listValues (IEnumerable<string>)
Parameter Summary: The string values.
Parameter: listCurrentIndex (int)
Parameter Summary: Zero based index of current option.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionToggle(LocalizeStringPair optionName, ref OptionToggle toggleValue)
Return: int
Modifiers: public
Summary: Adds a command line option to toggle a setting.
Parameter: optionName (LocalizeStringPair)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: toggleValue (OptionToggle)
Parameter Summary: The current toggle value.

Method: Rhino.Input.Custom.GetBaseClass.AddOptionToggle(string englishName, ref OptionToggle toggleValue)
Return: int
Modifiers: public
Summary: Adds a command line option to toggle a setting.
Parameter: englishName (string)
Parameter Summary: Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
Parameter: toggleValue (OptionToggle)
Parameter Summary: The current toggle value.

Method: Rhino.Input.Custom.GetBaseClass.ClearCommandOptions()
Return: void
Modifiers: public
Summary: Clear all command options.

Method: Rhino.Input.Custom.GetBaseClass.ClearDefault()
Return: void
Modifiers: public
Summary: Clears any defaults set using SetDefaultPoint, SetDefaultNumber, SetDefaultString, or SetCommandPromptDefault.

Method: Rhino.Input.Custom.GetBaseClass.Color()
Return: Color
Modifiers: public
Summary: Gets a color if Get*() returns GetResult.Color.

Method: Rhino.Input.Custom.GetBaseClass.CommandResult()
Return: Result
Modifiers: public
Summary: Helper method for getting command result value from getter results.

Method: Rhino.Input.Custom.GetBaseClass.CustomMessage()
Return: object
Modifiers: public

Method: Rhino.Input.Custom.GetBaseClass.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.GetBaseClass.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Input.Custom.GetBaseClass.EnableTransparentCommands(bool enable)
Return: void
Modifiers: public
Summary: Control the availability of transparent commands during the get.
Parameter: enable (bool)
Parameter Summary: If true, then transparent commands can be run during the get. If false, then transparent commands cannot be run during the get.

Method: Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValue()
Return: T
Modifiers: public
Summary: Returns the selected enumerated value. Use this in combination with <b>AddOptionEnumList{T}(string, T)</b> .
This must be called directly after having called a Get method, and having obtained a  value. | Since: 5.4

Method: Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValueFromSelectionList(IEnumerable<T> selectionList)
Return: T
Modifiers: public
Summary: Returns the selected enumerated value by looking at the list of values from which to select. Use this in combination with <b>AddOptionEnumSelectionList{T}</b>

Method: Rhino.Input.Custom.GetBaseClass.GotDefault()
Return: bool
Modifiers: public
Summary: Returns True if user pressed Enter to accept a default point, number, or string set using SetDefaultPoint, SetDefaultNumber, or SetDefaultString.

Method: Rhino.Input.Custom.GetBaseClass.Line2d()
Return: System.Drawing.Point[]
Modifiers: public
Summary: Returns two points defining the location in the view window of the 2d line selected in GetPoint::Get2dLine().
(0,0) = upper left corner of window. | Since: 5.0

Method: Rhino.Input.Custom.GetBaseClass.Number()
Return: double
Modifiers: public
Summary: Gets a number if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.Number.

Method: Rhino.Input.Custom.GetBaseClass.Option()
Return: CommandLineOption
Modifiers: public

Method: Rhino.Input.Custom.GetBaseClass.OptionIndex()
Return: int
Modifiers: public

Method: Rhino.Input.Custom.GetBaseClass.PickRectangle()
Return: Rectangle
Modifiers: public
Summary: If the get was a GetObjects() and the mouse was used to select the objects, then the returned rectangle has left < right and top < bottom. This rectangle is the Windows GDI screen coordinates of the picking rectangle. RhinoViewport.GetPickXform( pick_rect, pick_xform ) will calculate the picking transformation that was used. In all other cases, left=right=top=bottom=0;

Method: Rhino.Input.Custom.GetBaseClass.Point()
Return: Point3d
Modifiers: public
Summary: Gets a point if Get*() returns GetResult.Point.

Method: Rhino.Input.Custom.GetBaseClass.Point2d()
Return: System.Drawing.Point
Modifiers: public
Summary: Returns location in view of point in selected in GetPoint::Get() or GetPoint::Get2dPoint(). (0,0) = upper left corner of window.

Method: Rhino.Input.Custom.GetBaseClass.Rectangle2d()
Return: Rectangle
Modifiers: public
Summary: Returns the location in the view of the 2d rectangle selected in GetPoint::Get2dRectangle(). rect.left < rect.right and rect.top < rect.bottom (0,0) = upper left corner of window.

Method: Rhino.Input.Custom.GetBaseClass.Result()
Return: GetResult
Modifiers: public
Summary: Returns result of the Get*() call.

Method: Rhino.Input.Custom.GetBaseClass.SetCommandPrompt(string prompt)
Return: void
Modifiers: public
Summary: Sets prompt message that appears in the command prompt window.
Parameter: prompt (string)
Parameter Summary: command prompt message.

Method: Rhino.Input.Custom.GetBaseClass.SetCommandPromptDefault(string defaultValue)
Return: void
Modifiers: public
Summary: Sets message that describes what default value will be used if the user presses enter. This description appears in angle brackets <> in the command prompt window. You do not need to provide a default value description unless you explicitly enable AcceptNothing.
Parameter: defaultValue (string)
Parameter Summary: description of default value.

Method: Rhino.Input.Custom.GetBaseClass.SetDefaultColor(Color defaultColor)
Return: void
Modifiers: public
Summary: Sets a color as default value that will be returned if the user presses ENTER key during the get.
Parameter: defaultColor (Color)
Parameter Summary: value for default color.

Method: Rhino.Input.Custom.GetBaseClass.SetDefaultInteger(int defaultValue)
Return: void
Modifiers: public
Summary: Sets a number as default value that will be returned if the user presses ENTER key during the get.
Parameter: defaultValue (int)
Parameter Summary: value for default number.

Method: Rhino.Input.Custom.GetBaseClass.SetDefaultNumber(double defaultNumber)
Return: void
Modifiers: public
Summary: Sets a number as default value that will be returned if the user presses ENTER key during the get.
Parameter: defaultNumber (double)
Parameter Summary: value for default number.

Method: Rhino.Input.Custom.GetBaseClass.SetDefaultPoint(Point3d point)
Return: void
Modifiers: public
Summary: Sets a point as default value that will be returned if the user presses the ENTER key during the get.
Parameter: point (Point3d)
Parameter Summary: value for default point.

Method: Rhino.Input.Custom.GetBaseClass.SetDefaultString(string defaultValue)
Return: void
Modifiers: public
Summary: Sets a string as default value that will be returned if the user presses ENTER key during the get.
Parameter: defaultValue (string)
Parameter Summary: value for default string.

Method: Rhino.Input.Custom.GetBaseClass.SetOptionVaries(int optionIndex, bool varies)
Return: void
Modifiers: public
Summary: Sets a command line option value to print "Varies" instead of the regular value.
Parameter: optionIndex (int)
Parameter Summary: The option index.
Parameter: varies (bool)
Parameter Summary: True to print "Varies", False to print the option's current value.

Method: Rhino.Input.Custom.GetBaseClass.SetWaitDuration(int milliseconds)
Return: void
Modifiers: public
Summary: Sets the wait duration (in milliseconds) of the getter. If the duration passes without the user making a decision, the GetResult.Timeout code is returned.
Parameter: milliseconds (int)
Parameter Summary: Number of milliseconds to wait.

Method: Rhino.Input.Custom.GetBaseClass.StringResult()
Return: string
Modifiers: public
Summary: Gets a string if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.String.

Method: Rhino.Input.Custom.GetBaseClass.Vector()
Return: Vector3d
Modifiers: public
Summary: Gets a direction if Get*() returns GetResult.Point (Set by some digitizers, but in general it's (0,0,0).

Method: Rhino.Input.Custom.GetBaseClass.View()
Return: RhinoView
Modifiers: public
Summary: Gets a view the user clicked in during GetPoint.Get(), GetObject.GetObjects(), etc.

Class: Rhino.Input.Custom.GetCancel

Constructor: Rhino.Input.Custom.GetCancel.GetCancel()

Property: Rhino.Input.Custom.GetCancel.Progress
Return: IProgress<double>
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetCancel.ProgressMessage
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCancel.ProgressReporting
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCancel.Token
Return: CancellationToken
Modifiers: public
Accessors: get

Method: Rhino.Input.Custom.GetCancel.Wait(System.Threading.Tasks.Task task, RhinoDoc doc)
Return: Result
Modifiers: public
Summary: Awaits a particular task to finish.
Parameter: task (System.Threading.Tasks.Task)
Parameter Summary: The task.
Parameter: doc (RhinoDoc)
Parameter Summary: A document to set progress reporting.

Method: Rhino.Input.Custom.GetCancel.Wait(Task<TResult> task, RhinoDoc doc)
Return: Result
Modifiers: public
Summary: Awaits a particular task to finish.
Parameter: task (Task<TResult>)
Parameter Summary: The task.
Parameter: doc (RhinoDoc)
Parameter Summary: A document to set progress reporting.

Method: Rhino.Input.Custom.GetCancel.WaitAll(IEnumerable<Task<TResult>> tasks, RhinoDoc doc)
Return: Result
Modifiers: public
Summary: Awaits some tasks to finish.
Parameter: tasks (IEnumerable<Task<TResult>>)
Parameter Summary: The tasks.
Parameter: doc (RhinoDoc)
Parameter Summary: A document to set progress reporting.

Method: Rhino.Input.Custom.GetCancel.WaitAll(IEnumerable<Task> tasks, RhinoDoc doc)
Return: Result
Modifiers: public
Summary: Awaits some tasks to finish.
Parameter: tasks (IEnumerable<Task>)
Parameter Summary: The tasks.
Parameter: doc (RhinoDoc)
Parameter Summary: A document to set progress reporting.

Class: Rhino.Input.Custom.GetCircle

Constructor: Rhino.Input.Custom.GetCircle.GetCircle()

Property: Rhino.Input.Custom.GetCircle.AllowDeformable
Return: bool
Modifiers: public
Summary: Allow for deformable options
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.Deformable
Return: bool
Modifiers: public
Summary: Is the deformable option set
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.DeformableDegree
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.DeformablePointCount
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Property: Rhino.Input.Custom.GetCircle.UseActiveLayerLinetypeForCurves
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Input.Custom.GetCircle.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetCircle.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetCircle.Get(out Geometry.Circle circle)
Return: Commands.Result
Modifiers: public
Summary: Perform the 'get' operation.

Class: Rhino.Input.Custom.GetCone
Summary: Class provides user interface to define a cone.

Constructor: Rhino.Input.Custom.GetCone.GetCone()

Property: Rhino.Input.Custom.GetCone.AllowInputAngle
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCone.ApexAngleDegrees
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCone.BaseAngleDegrees
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCone.Cap
Return: bool
Modifiers: public
Summary: Gets or sets whether or not the output should be capped.
Accessors: get set

Property: Rhino.Input.Custom.GetCone.ConeConstraint
Return: ConeConstraint
Modifiers: public
Summary: State of the cone/cylinder constraint option. When the cone/cylinder option is selected, the circle is being made as a base for a cone/cylinder. By default the vertical cone/cylinder option not available but is not selected.  By default the "Vertical" option applies to VerticalCircle.
Accessors: get set

Property: Rhino.Input.Custom.GetCone.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetCone.Height
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetCone.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Method: Rhino.Input.Custom.GetCone.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetCone.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetCone.Get(out Geometry.Cone cone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a cone.
Parameter: cone (Geometry.Cone)
Parameter Summary: The cone geometry defined by the user.

Method: Rhino.Input.Custom.GetCone.GetMesh(ref int verticalFaces, ref int aroundFaces, out Geometry.Cone cone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh cone.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: cone (Geometry.Cone)
Parameter Summary: The cone geometry defined by the user.

Method: Rhino.Input.Custom.GetCone.GetMesh(ref int verticalFaces, ref int aroundFaces, ref int capStyle, out Geometry.Cone cone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh cone.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: capStyle (int)
Parameter Summary: Set to 0 if you don't want the prompt, 3 is triangles, 4 is quads.
Parameter: cone (Geometry.Cone)
Parameter Summary: The cone geometry defined by the user.

Class: Rhino.Input.Custom.GetCylinder
Summary: Class provides user interface to define a cylinder.

Constructor: Rhino.Input.Custom.GetCylinder.GetCylinder()

Property: Rhino.Input.Custom.GetCylinder.BothSidesOption
Return: bool
Modifiers: public
Summary: Determine if the "both sides" option is enabled
Accessors: get set

Property: Rhino.Input.Custom.GetCylinder.Cap
Return: bool
Modifiers: public
Summary: Gets or sets whether or not the output should be capped.
Accessors: get set

Property: Rhino.Input.Custom.GetCylinder.CylinderConstraint
Return: CylinderConstraint
Modifiers: public
Summary: State of the cone/cylinder constraint option. When the cone/cylinder option is selected, the circle is being made as a base for a cone/cylinder. By default the vertical cone/cylinder option not available but is not selected.  By default the "Vertical" option applies to VerticalCircle.
Accessors: get set

Property: Rhino.Input.Custom.GetCylinder.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetCylinder.Height
Return: double
Modifiers: public
Summary: Height of cylinder
Accessors: get set

Property: Rhino.Input.Custom.GetCylinder.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Method: Rhino.Input.Custom.GetCylinder.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetCylinder.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetCylinder.Get(out Geometry.Cylinder cylinder)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a cylinder.
Parameter: cylinder (Geometry.Cylinder)
Parameter Summary: The cylinder geometry defined by the user.

Method: Rhino.Input.Custom.GetCylinder.GetMesh(ref int verticalFaces, ref int aroundFaces, out Geometry.Cylinder cylinder)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh cylinder.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: cylinder (Geometry.Cylinder)
Parameter Summary: The cylinder geometry defined by the user.

Method: Rhino.Input.Custom.GetCylinder.GetMesh(ref int verticalFaces, ref int aroundFaces, ref int capStyle, out Geometry.Cylinder cylinder)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh cylinder.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: capStyle (int)
Parameter Summary: Set to 0 if you don't want the prompt, 3 is triangles, 4 is quads.
Parameter: cylinder (Geometry.Cylinder)
Parameter Summary: The cylinder geometry defined by the user.

Class: Rhino.Input.Custom.GetEllipse
Summary: Class provides user interface to define an ellipse.

Constructor: Rhino.Input.Custom.GetEllipse.GetEllipse()
Summary: Constructs a GetEllispe object.

Property: Rhino.Input.Custom.GetEllipse.FirstPoint
Return: Point3d
Modifiers: public
Summary: Returns the first point. If in "from foci" mode, then this is the first foci point.
Accessors: get

Property: Rhino.Input.Custom.GetEllipse.IsModeFromFoci
Return: bool
Modifiers: public
Summary: Indicates the ellipse was created from foci.
Accessors: get

Property: Rhino.Input.Custom.GetEllipse.MarkFoci
Return: bool
Modifiers: public
Summary: Indicates the user wants the ellipse foci marked with point objects.
Accessors: get set

Property: Rhino.Input.Custom.GetEllipse.SecondPoint
Return: Point3d
Modifiers: public
Summary: Returns the second point. If in "from foci" mode, then this is the second foci point.
Accessors: get

Method: Rhino.Input.Custom.GetEllipse.Dispose()
Return: void
Modifiers: public
Summary: Actively releases the unmanaged object.

Method: Rhino.Input.Custom.GetEllipse.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Releases the unmanaged object.

Method: Rhino.Input.Custom.GetEllipse.Get(out Geometry.NurbsCurve ellipse)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of an ellipse.
Parameter: ellipse (Geometry.NurbsCurve)
Parameter Summary: The ellipse in NURB form.

Class: Rhino.Input.Custom.GetEllipsoid
Summary: Class provides user interface to define an ellipsoid.

Constructor: Rhino.Input.Custom.GetEllipsoid.GetEllipsoid()

Property: Rhino.Input.Custom.GetEllipsoid.FirstPoint
Return: Point3d
Modifiers: public
Summary: Returns the first point. If in "from foci" mode, then this is the first foci point.
Accessors: get

Property: Rhino.Input.Custom.GetEllipsoid.IsModeFromFoci
Return: bool
Modifiers: public
Summary: Indicates the ellipsoid was created from foci.
Accessors: get

Property: Rhino.Input.Custom.GetEllipsoid.MarkFoci
Return: bool
Modifiers: public
Summary: Indicates the user wants the ellipsoid foci marked with point objects.
Accessors: get set

Property: Rhino.Input.Custom.GetEllipsoid.SecondPoint
Return: Point3d
Modifiers: public
Summary: Returns the second point. If in "from foci" mode, then this is the second foci point.
Accessors: get

Method: Rhino.Input.Custom.GetEllipsoid.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetEllipsoid.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetEllipsoid.Get(out Geometry.NurbsSurface ellipsoid)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of an ellipsoid.
Parameter: ellipsoid (Geometry.NurbsSurface)
Parameter Summary: The ellipsoid in NURB form.

Method: Rhino.Input.Custom.GetEllipsoid.GetMesh(ref int verticalFaces, ref int aroundFaces, out Geometry.Mesh ellipsoid)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh ellipsoid.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: ellipsoid (Geometry.Mesh)
Parameter Summary: The ellipsoid in Mesh form.

Method: Rhino.Input.Custom.GetEllipsoid.GetMesh(ref int verticalFaces, ref int aroundFaces, ref bool quadCaps, out Geometry.Mesh ellipsoid)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh ellipsoid.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: quadCaps (bool)
Parameter Summary: Set True to create quad faces at the caps, False for triangles.
Parameter: ellipsoid (Geometry.Mesh)
Parameter Summary: The ellipsoid in Mesh form.

Class: Rhino.Input.Custom.GetInteger
Summary: Used to get integer numbers.

Constructor: Rhino.Input.Custom.GetInteger.GetInteger()

Method: Rhino.Input.Custom.GetInteger.Get()
Return: GetResult
Modifiers: public
Summary: Call to get an integer.

Method: Rhino.Input.Custom.GetInteger.Number()
Return: int
Modifiers: public, new

Method: Rhino.Input.Custom.GetInteger.SetLowerLimit(int lowerLimit, bool strictlyGreaterThan)
Return: void
Modifiers: public
Summary: Sets a lower limit on the number that can be returned. By default there is no lower limit.
Parameter: lowerLimit (int)
Parameter Summary: smallest acceptable number.
Parameter: strictlyGreaterThan (bool)
Parameter Summary: If true, then the returned number will be > lower_limit.

Method: Rhino.Input.Custom.GetInteger.SetUpperLimit(int upperLimit, bool strictlyLessThan)
Return: void
Modifiers: public
Summary: Sets an upper limit on the number that can be returned. By default there is no upper limit.
Parameter: upperLimit (int)
Parameter Summary: largest acceptable number.
Parameter: strictlyLessThan (bool)
Parameter Summary: If true, then the returned number will be < upper_limit.

Class: Rhino.Input.Custom.GetLine
Summary: Use to interactively get a line.  The Rhino "Line" command uses GetLine.

Constructor: Rhino.Input.Custom.GetLine.GetLine()

Property: Rhino.Input.Custom.GetLine.AcceptZeroLengthLine
Return: bool
Modifiers: public
Summary: Controls whether or not a zero length line is acceptable. The default is to require the user to keep picking the end point until we get a point different than the start point.
Accessors: get set

Property: Rhino.Input.Custom.GetLine.FeedbackColor
Return: Color
Modifiers: public
Summary: If set, the feedback color is used to draw the dynamic line when the second point is begin picked.  If not set, the active layer color is used.
Accessors: get set

Property: Rhino.Input.Custom.GetLine.FirstPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting first point
Accessors: get set

Property: Rhino.Input.Custom.GetLine.FixedLength
Return: double
Modifiers: public
Summary: If FixedLength > 0, the line must have the specified length
Accessors: get set

Property: Rhino.Input.Custom.GetLine.GetLineMode
Return: GetLineMode
Modifiers: public
Summary: Mode used
Accessors: get set

Property: Rhino.Input.Custom.GetLine.HaveFeedbackColor
Return: bool
Modifiers: public
Summary: If true, the feedback color is used to draw the dynamic line when the second point is begin picked.  If false, the active layer color is used.
Accessors: get

Property: Rhino.Input.Custom.GetLine.MidPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting midpoint
Accessors: get set

Property: Rhino.Input.Custom.GetLine.SecondPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting second point
Accessors: get set

Method: Rhino.Input.Custom.GetLine.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetLine.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetLine.EnableAllVariations(bool on)
Return: void
Modifiers: public
Summary: If true, then all line variations are shown if the default line mode is used

Method: Rhino.Input.Custom.GetLine.EnableFromBothSidesOption(bool on)
Return: void
Modifiers: public
Summary: If true, then the "BothSides" option shows up when the start point is interactively picked.

Method: Rhino.Input.Custom.GetLine.EnableFromMidPointOption(bool on)
Return: void
Modifiers: public
Summary: If true, the "MidPoint" options shows up

Method: Rhino.Input.Custom.GetLine.Get(out Geometry.Line line)
Return: Commands.Result
Modifiers: public
Summary: Perform the 'get' operation.

Method: Rhino.Input.Custom.GetLine.SetFirstPoint(Geometry.Point3d point)
Return: void
Modifiers: public
Summary: Use SetFirstPoint to specify the line's starting point and skip the start point interactive picking

Class: Rhino.Input.Custom.GetNumber
Summary: Used to get double precision numbers.

Constructor: Rhino.Input.Custom.GetNumber.GetNumber()
Summary: Create a new GetNumber.

Method: Rhino.Input.Custom.GetNumber.Get()
Return: GetResult
Modifiers: public
Summary: Call to get a number.

Method: Rhino.Input.Custom.GetNumber.SetLowerLimit(double lowerLimit, bool strictlyGreaterThan)
Return: void
Modifiers: public
Summary: Sets a lower limit on the number that can be returned. By default there is no lower limit.
Parameter: lowerLimit (double)
Parameter Summary: smallest acceptable number.
Parameter: strictlyGreaterThan (bool)
Parameter Summary: If true, then the returned number will be > lower_limit.

Method: Rhino.Input.Custom.GetNumber.SetUpperLimit(double upperLimit, bool strictlyLessThan)
Return: void
Modifiers: public
Summary: Sets an upper limit on the number that can be returned. By default there is no upper limit.
Parameter: upperLimit (double)
Parameter Summary: largest acceptable number.
Parameter: strictlyLessThan (bool)
Parameter Summary: If true, then the returned number will be < upper_limit.

Class: Rhino.Input.Custom.GetObject
Summary: The GetObject class is the tool commands use to interactively select objects.

Constructor: Rhino.Input.Custom.GetObject.GetObject()

Property: Rhino.Input.Custom.GetObject.AlreadySelectedObjectSelect
Return: bool
Modifiers: public
Summary: Allow selecting objects that are already selected. By default, GetObjects() disallows selection of objects that are already selected to avoid putting the same object in the selection set more than once. Calling EnableAlreadySelectedObjectSelect = true overrides that restriction and allows selected objects to be selected and returned by GetObjects. This is useful because, coupled with the return immediately mode of GetObjects(1, -1), it is possible to select a selected object to deselect when the selected objects are being managed outside GetObjects() as in the case of CRhinoPolyEdge::GetEdge().
Accessors: get set

Property: Rhino.Input.Custom.GetObject.BottomObjectPreference
Return: bool
Modifiers: public
Summary: By default, if a call to Input is permitted to select different parts of the same object, like a polysurface, a surface and an edge, then the top-most object is preferred. (polysurface beats face beats edge). If you want the bottom most object to be preferred, then call EnableBottomObjectPreference = True before calling GetObjects().
Accessors: get set

Property: Rhino.Input.Custom.GetObject.ChooseOneQuestion
Return: bool
Modifiers: public
Summary: By default, if a call to Input is permitted to select different parts of the same object, like a polysurface and an edge of that polysurface, then the top-most object is automatically selected. If you want the choose-one-object mechanism to include pop up in these cases, then call EnableChooseOneQuestion = True before calling GetObjects().
Accessors: get set

Property: Rhino.Input.Custom.GetObject.DeselectAllBeforePostSelect
Return: bool
Modifiers: public
Summary: True if pre-selected input will be deselected before post-selection begins when no pre-selected input is valid.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.GeometryAttributeFilter
Return: GeometryAttributeFilter
Modifiers: public
Summary: The geometry attribute filter provides a secondary filter that can be used to restrict which objects can be selected. Control of the type of geometry (points, curves, surfaces, meshes, etc.) is provided by GetObject.SetGeometryFilter. The geometry attribute filter is used to require the selected geometry to have certain attributes (open, closed, etc.). The default attribute filter permits selection of all types of geometry.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.GeometryFilter
Return: ObjectType
Modifiers: public
Summary: The geometry type filter controls which types of geometry (points, curves, surfaces, meshes, etc.) can be selected. The default geometry type filter permits selection of all types of geometry. NOTE: the filter can be a bitwise combination of multiple ObjectTypes.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.GroupSelect
Return: bool
Modifiers: public
Summary: By default, groups are ignored in GetObject. If you want your call to GetObjects() to select every object in a group that has any objects selected, then enable group selection.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.InactiveDetailPickEnabled
Return: bool
Modifiers: public
Summary: By default, objects in inactive details are not permitted to be picked. In a few rare cases this is used (ex. picking circles during DimRadius)
Accessors: get set

Property: Rhino.Input.Custom.GetObject.ObjectCount
Return: int
Modifiers: public
Summary: Gets the number of objects that were selected.
Accessors: get

Property: Rhino.Input.Custom.GetObject.ObjectsWerePreselected
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetObject.OneByOnePostSelect
Return: bool
Modifiers: public
Summary: In one-by-one post selection, the user is forced to select objects by post picking them one at a time.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.ProxyBrepFromSubD
Return: bool
Modifiers: public
Summary: If a subd (or a subd component) cannot be selected, but a brep (or brep component) can be selected, then automatically create and use a proxy brep.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.ReferenceObjectSelect
Return: bool
Modifiers: public
Summary: By default, reference objects can be selected. If you do not want to be able to select reference objects, then call EnableReferenceObjectSelect=false.
Accessors: get set

Property: Rhino.Input.Custom.GetObject.SerialNumber
Return: uint
Modifiers: public
Summary: Each instance of GetObject has a unique runtime serial number that is used to identify object selection events associated with that instance.
Accessors: get

Property: Rhino.Input.Custom.GetObject.SubObjectSelect
Return: bool
Modifiers: public
Summary: By default, GetObject.Input will permit a user to select sub-objects (like a curve in a b-rep or a curve in a group). If you only want the user to select "top" level objects, then call EnableSubObjectSelect = false.
Accessors: get set

Method: Rhino.Input.Custom.GetObject.ActiveGetObject(RhinoDoc doc)
Return: GetObject
Modifiers: public, static
Summary: Get the currently running GetObject for a given document

Method: Rhino.Input.Custom.GetObject.AppendToPickList(ObjRef objref)
Return: void
Modifiers: public

Method: Rhino.Input.Custom.GetObject.ClearObjects()
Return: void
Modifiers: public
Summary: Clear possible special object drawing

Method: Rhino.Input.Custom.GetObject.CustomGeometryFilter(RhinoObject rhObject, GeometryBase geometry, ComponentIndex componentIndex)
Return: bool
Modifiers: public, virtual
Summary: Checks geometry to see if it can be selected. Override to provide fancy filtering.
Parameter: rhObject (RhinoObject)
Parameter Summary: parent object being considered.
Parameter: geometry (GeometryBase)
Parameter Summary: geometry being considered.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: if >= 0, geometry is a proper sub-part of object->Geometry() with componentIndex.

Method: Rhino.Input.Custom.GetObject.DisablePreSelect()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.GetObject.EnableClearObjectsOnEntry(bool enable)
Return: void
Modifiers: public
Summary: By default the picked object list is cleared when GetObject.GetObjects() is called. If you are reusing a GetObject class and do not want the existing object list cleared when you call Input, then call EnableClearObjectsOnEntry(false) before calling GetObjects().
Parameter: enable (bool)
Parameter Summary: The state to set.

Method: Rhino.Input.Custom.GetObject.EnableHighlight(bool enable)
Return: void
Modifiers: public
Summary: By default, any object post-pick selected by GetObjects() is highlighted. If you want to post-pick objects and not have them automatically highlight, then call EnableHighlight = false.

Method: Rhino.Input.Custom.GetObject.EnableIgnoreGrips(bool enable)
Return: void
Modifiers: public
Summary: By default, post selection will select objects with grips on. If you do not want to be able to post select objects with grips on, then call EnableIgnoreGrips = false. The ability to preselect an object with grips on is determined by the value returned by the virtual RhinoObject.IsSelectableWithGripsOn.

Method: Rhino.Input.Custom.GetObject.EnablePostSelect(bool enable)
Return: void
Modifiers: public
Summary: Control the availability of post selection in GetObjects.

Method: Rhino.Input.Custom.GetObject.EnablePreSelect(bool enable, bool ignoreUnacceptablePreselectedObjects)
Return: void
Modifiers: public
Summary: Control the pre-selection behavior GetObjects.
Parameter: enable (bool)
Parameter Summary: if true, pre-selection is enabled.
Parameter: ignoreUnacceptablePreselectedObjects (bool)
Parameter Summary: If True and some acceptable objects are pre-selected, then any unacceptable pre-selected objects are ignored. If False and any unacceptable are pre-selected, then the user is forced to post-select.

Method: Rhino.Input.Custom.GetObject.EnablePressEnterWhenDonePrompt(bool enable)
Return: void
Modifiers: public
Summary: By default, when GetObject.GetObjects is called with minimumNumber > 0 and maximumNumber = 0, the command prompt automatically includes "Press Enter when done" after the user has selected at least minimumNumber of objects. If you want to prohibit the addition of the "Press Enter when done", then call EnablePressEnterWhenDonePrompt = false;

Method: Rhino.Input.Custom.GetObject.EnableSelPrevious(bool enable)
Return: void
Modifiers: public
Summary: By default, any object selected during a command becomes part of the "previous selection set" and can be reselected by the SelPrev command. If you need to select objects but do not want them to be selected by a subsequent call to SelPrev, then call EnableSelPrev = false.

Method: Rhino.Input.Custom.GetObject.EnableUnselectObjectsOnExit(bool enable)
Return: void
Modifiers: public
Summary: By default any objects in the object list are unselected when GetObject.GetObjects() exits with any return code besides Object. If you want to leave the objects selected when non-object input is returned, then call EnableUnselectObjectsOnExit(false) before calling GetObjects().
Parameter: enable (bool)
Parameter Summary: The state to set.

Method: Rhino.Input.Custom.GetObject.Get()
Return: GetResult
Modifiers: public
Summary: Call to select a single object.

Method: Rhino.Input.Custom.GetObject.GetMultiple(int minimumNumber, int maximumNumber)
Return: GetResult
Modifiers: public
Summary: Call to select objects.
Parameter: minimumNumber (int)
Parameter Summary: minimum number of objects to select.
Parameter: maximumNumber (int)
Parameter Summary: maximum number of objects to select. If 0, then the user must press enter to finish object selection. If -1, then object selection stops as soon as there are at least minimumNumber of object selected. If >0, then the picking stops when there are maximumNumber objects.  If a window pick, crossing pick, or Sel* command attempts to add more than maximumNumber, then the attempt is ignored.

Method: Rhino.Input.Custom.GetObject.Object(int index)
Return: ObjRef
Modifiers: public

Method: Rhino.Input.Custom.GetObject.Objects()
Return: ObjRef[]
Modifiers: public

Method: Rhino.Input.Custom.GetObject.PassesGeometryAttributeFilter(RhinoObject rhObject, GeometryBase geometry, ComponentIndex componentIndex)
Return: bool
Modifiers: public
Summary: Checks geometry to see if it passes the basic GeometryAttributeFilter.
Parameter: rhObject (RhinoObject)
Parameter Summary: parent object being considered.
Parameter: geometry (GeometryBase)
Parameter Summary: geometry being considered.
Parameter: componentIndex (ComponentIndex)
Parameter Summary: if >= 0, geometry is a proper sub-part of object->Geometry() with componentIndex.

Method: Rhino.Input.Custom.GetObject.SetCustomGeometryFilter(GetObjectGeometryFilter filter)
Return: void
Modifiers: public
Summary: Set filter callback function that will be called by the CustomGeometryFilter

Method: Rhino.Input.Custom.GetObject.SetPressEnterWhenDonePrompt(string prompt)
Return: void
Modifiers: public
Summary: The default prompt when EnablePressEnterWhenDonePrompt is enabled is "Press Enter when done". Use this function to specify a different string to be appended.
Parameter: prompt (string)
Parameter Summary: The text that will be displayed just after the prompt, after the selection has been made.

Class: Rhino.Input.Custom.GetOption
Summary: If you want to explicitly get string input, then use GetString class with options. If you only want to get options, then use this class (GetOption)

Constructor: Rhino.Input.Custom.GetOption.GetOption()

Method: Rhino.Input.Custom.GetOption.Get()
Return: GetResult
Modifiers: public
Summary: Call to get an option. A return value of "option" means the user selected a valid option. Use Option() the determine which option.

Class: Rhino.Input.Custom.GetPoint
Summary: Used to interactively get a point.

Constructor: Rhino.Input.Custom.GetPoint.GetPoint()
Summary: Create a new GetPoint.

Property: Rhino.Input.Custom.GetPoint.DynamicDrawColor
Return: Color
Modifiers: public
Summary: Color used by CRhinoGetPoint::DynamicDraw to draw the current point and the line from the base point to the current point.
Accessors: get set

Property: Rhino.Input.Custom.GetPoint.FullFrameRedrawDuringGet
Return: bool
Modifiers: public
Summary: In the "RARE" case that you need to draw some depth buffered geometry during a Get() operation, setting this value to True will force entire frames to be redrawn while the user moves the mouse. This allows DisplayPipeline events to be triggered as well as OnPostDrawObjects NOTE!! Setting this value to True comes with a significant performance penalty because the scene needs to be fully regenerated every frame where the standard DynamicDraw event draws temporary decorations (geometry) on top of a static scene.
Accessors: get set

Property: Rhino.Input.Custom.GetPoint.OsnapEventType
Return: OsnapModes
Modifiers: public
Summary: Gets the type of object snap used to obtain the point.
Accessors: get

Property: Rhino.Input.Custom.GetPoint.Tag
Return: object
Modifiers: public
Summary: Gets or sets an arbitrary object that can be attached to this <b>GetPoint</b> instance. Useful for passing some/ information that you may need in a DynamicDraw event since you can get at this Tag from the GetPointDrawEventArgs.
Accessors: get set

Method: Rhino.Input.Custom.GetPoint.AddConstructionPoint(Point3d point)
Return: int
Modifiers: public
Summary: Adds a point to the list of construction points.
Parameter: point (Point3d)
Parameter Summary: A point to be added.

Method: Rhino.Input.Custom.GetPoint.AddConstructionPoints(Point3d[] points)
Return: int
Modifiers: public
Summary: Adds points to the list of construction points.
Parameter: points (Point3d[])
Parameter Summary: An array of points to be added.

Method: Rhino.Input.Custom.GetPoint.AddSnapPoint(Point3d point)
Return: int
Modifiers: public
Summary: Adds a point to the list of osnap points.
Parameter: point (Point3d)
Parameter Summary: A point.

Method: Rhino.Input.Custom.GetPoint.AddSnapPoints(Point3d[] points)
Return: int
Modifiers: public
Summary: Adds points to the list of osnap points.
Parameter: points (Point3d[])
Parameter Summary: An array of points to snap onto.

Method: Rhino.Input.Custom.GetPoint.ClearConstraints()
Return: void
Modifiers: public
Summary: Removes any explicit constraints added by calls to GetPoint::Constraint() and enable the built-in constraint options.

Method: Rhino.Input.Custom.GetPoint.ClearConstructionPoints()
Return: void
Modifiers: public
Summary: Remove all construction points.

Method: Rhino.Input.Custom.GetPoint.ClearSnapPoints()
Return: void
Modifiers: public
Summary: Remove all snap points.

Method: Rhino.Input.Custom.GetPoint.Constrain(Arc arc)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on an arc.
Parameter: arc (Arc)
Parameter Summary: An arc to use as constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Brep brep, int wireDensity, int faceIndex, bool allowPickingPointOffObject)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a brep.
Parameter: brep (Brep)
Parameter Summary: A brep to use as constraint.
Parameter: wireDensity (int)
Parameter Summary: When wire_density<0, isocurve intersection snapping is turned off, when wire_density>=0, the value defines the isocurve density used for isocurve intersection snapping.
Parameter: faceIndex (int)
Parameter Summary: When face_index <0, constrain to whole brep. When face_index >=0, constrain to individual face.
Parameter: allowPickingPointOffObject (bool)
Parameter Summary: defines whether the point pick is allowed to happen off object. When false, a "no no" cursor is shown when the cursor is not on the object. When true, a normal point picking cursor is used and the marker is visible also when the cursor is not on the object.

Method: Rhino.Input.Custom.GetPoint.Constrain(Circle circle)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a circle.
Parameter: circle (Circle)
Parameter Summary: A circle to use as constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Curve curve, bool allowPickingPointOffObject)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a curve.
Parameter: curve (Curve)
Parameter Summary: A curve to use as constraint.
Parameter: allowPickingPointOffObject (bool)
Parameter Summary: defines whether the point pick is allowed to happen off object. When false, a "no no" cursor is shown when the cursor is not on the object. When true, a normal point picking cursor is used and the marker is visible also when the cursor is not on the object.

Method: Rhino.Input.Custom.GetPoint.Constrain(Cylinder cylinder)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a cylinder.
Parameter: cylinder (Cylinder)
Parameter Summary: A cylinder to use as constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Line line)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a line.
Parameter: line (Line)
Parameter Summary: A line to use as constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Mesh mesh, bool allowPickingPointOffObject)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a mesh.
Parameter: mesh (Mesh)
Parameter Summary: A mesh to use as constraint.
Parameter: allowPickingPointOffObject (bool)
Parameter Summary: defines whether the point pick is allowed to happen off object. When false, a "no no" cursor is shown when the cursor is not on the object. When true, a normal point picking cursor is used and the marker is visible also when the cursor is not on the object.

Method: Rhino.Input.Custom.GetPoint.Constrain(Plane plane, bool allowElevator)
Return: bool
Modifiers: public
Summary: constrain the picked point to lie on a plane.
Parameter: plane (Plane)
Parameter Summary: A plane to use as constraint.
Parameter: allowElevator (bool)
Parameter Summary: True if elevator mode should be allowed at user request.

Method: Rhino.Input.Custom.GetPoint.Constrain(Point3d from, Point3d to)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a line.
Parameter: from (Point3d)
Parameter Summary: The start point of constraint.
Parameter: to (Point3d)
Parameter Summary: The end point of constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Sphere sphere)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a sphere.
Parameter: sphere (Sphere)
Parameter Summary: A sphere to use as constraint.

Method: Rhino.Input.Custom.GetPoint.Constrain(Surface surface, bool allowPickingPointOffObject)
Return: bool
Modifiers: public
Summary: Constrains the picked point to lie on a surface.
Parameter: surface (Surface)
Parameter Summary: A surface to use as constraint.
Parameter: allowPickingPointOffObject (bool)
Parameter Summary: defines whether the point pick is allowed to happen off object. When false, a "no no" cursor is shown when the cursor is not on the object. When true, a normal point picking cursor is used and the marker is visible also when the cursor is not on the object.

Method: Rhino.Input.Custom.GetPoint.ConstrainDistanceFromBasePoint(double distance)
Return: void
Modifiers: public
Summary: Sets distance constraint from base point.
Parameter: distance (double)
Parameter Summary: pass UnsetValue to clear this constraint. Pass 0.0 to disable the ability to set this constraint by typing a number during GetPoint.

Method: Rhino.Input.Custom.GetPoint.ConstrainToConstructionPlane(bool throughBasePoint)
Return: bool
Modifiers: public
Summary: If enabled, the picked point is constrained to be on the active construction plane. If the base point is set, then the point is constrained to be on the plane that contains the base point and is parallel to the active construction plane. By default this constraint is enabled.
Parameter: throughBasePoint (bool)
Parameter Summary: True if the base point should be used as compulsory level reference.

Method: Rhino.Input.Custom.GetPoint.ConstrainToTargetPlane()
Return: void
Modifiers: public
Summary: Constrains point to lie on a plane that is parallel to the viewing plane and passes through the view's target point.

Method: Rhino.Input.Custom.GetPoint.ConstrainToVirtualCPlaneIntersection(Plane plane)
Return: bool
Modifiers: public
Summary: If enabled, the picked point is constrained to be on the intersection of the plane and the virtual CPlane going through the plane origin. If the planes are parallel, the constraint works just like planar constraint.
Parameter: plane (Plane)
Parameter Summary: The plane used for the plane - virtual CPlane intersection.

Method: Rhino.Input.Custom.GetPoint.DrawLineFromPoint(Point3d startPoint, bool showDistanceInStatusBar)
Return: void
Modifiers: public
Summary: Use DrawLineFromPoint() if you want a dynamic line drawn from a point to the point being picked.
Parameter: startPoint (Point3d)
Parameter Summary: The line is drawn from startPoint to the point being picked. If the base point has not been set, then it is set to startPoint.
Parameter: showDistanceInStatusBar (bool)
Parameter Summary: if true, the distance from the basePoint to the point begin picked is shown in the status bar.

Method: Rhino.Input.Custom.GetPoint.EnableCurveSnapArrow(bool drawDirectionArrowAtSnapPoint, bool reverseArrow)
Return: void
Modifiers: public
Summary: Controls display of the curve snap arrow icon.
Parameter: drawDirectionArrowAtSnapPoint (bool)
Parameter Summary: True to draw arrow icon whenever GetPoint snaps to a curve.
Parameter: reverseArrow (bool)
Parameter Summary: True if arrow icon direction should be the reverse of the first derivative direction.

Method: Rhino.Input.Custom.GetPoint.EnableCurveSnapPerpBar(bool drawPerpBarAtSnapPoint, bool drawEndPoints)
Return: void
Modifiers: public
Summary: Controls display of the curve snap perpendicular bar icon.
Parameter: drawPerpBarAtSnapPoint (bool)
Parameter Summary: True to draw a tangent bar icon  whenever GetPoint snaps to a curve.
Parameter: drawEndPoints (bool)
Parameter Summary: True to draw points at the end of the tangent bar.

Method: Rhino.Input.Custom.GetPoint.EnableCurveSnapTangentBar(bool drawTangentBarAtSnapPoint, bool drawEndPoints)
Return: void
Modifiers: public
Summary: Controls display of the curve snap tangent bar icon.
Parameter: drawTangentBarAtSnapPoint (bool)
Parameter Summary: True to draw a tangent bar icon whenever GetPoint snaps to a curve.
Parameter: drawEndPoints (bool)
Parameter Summary: True to draw points at the end of the tangent bar.

Method: Rhino.Input.Custom.GetPoint.EnableDrawLineFromPoint(bool enable)
Return: void
Modifiers: public
Summary: Controls drawing of dynamic a line from the start point.
Parameter: enable (bool)
Parameter Summary: if true, a dynamic line is drawn from the DrawLineFromPoint startPoint to the point being picked.

Method: Rhino.Input.Custom.GetPoint.EnableNoRedrawOnExit(bool noRedraw)
Return: void
Modifiers: public
Summary: The default functionality of the GetPoint operation is to perform a redraw on exit. Calling this function with True turns off automatic redraw at the end of GetPoint. May be needed in some commands for flicker free feedback. When set to true, the caller is responsible for cleaning up the screen after GetPoint.

Method: Rhino.Input.Custom.GetPoint.EnableObjectSnapCursors(bool enable)
Return: void
Modifiers: public
Summary: Enables or disables object snap cursors. By default, object snap cursors are enabled.
Parameter: enable (bool)
Parameter Summary: If True then object snap cursors (plus sign with "near", "end", etc.) are used when the point snaps to a object.

Method: Rhino.Input.Custom.GetPoint.EnableSnapToCurves(bool enable)
Return: void
Modifiers: public
Summary: If you want GetPoint() to try to snap to curves when the mouse is near a curve (like the center point in the Circle command when the AroundCurve option is on), then enable the snap to curves option.
Parameter: enable (bool)
Parameter Summary: Whether points should be enabled.

Method: Rhino.Input.Custom.GetPoint.Get()
Return: GetResult
Modifiers: public
Summary: After setting up options and so on, call GetPoint::Get to get a 3d point. The point is retrieved when the mouse goes down.

Method: Rhino.Input.Custom.GetPoint.Get(bool onMouseUp, bool get2DPoint)
Return: GetResult
Modifiers: public
Summary: After setting up options and so on, call this method to get a 2d or 3d point.
Parameter: onMouseUp (bool)
Parameter Summary: If false, the point is returned when the left mouse button goes down. If true, the point is returned when the left mouse button goes up.
Parameter: get2DPoint (bool)
Parameter Summary: If True then get a 2d point otherwise get a 2d point

Method: Rhino.Input.Custom.GetPoint.Get(bool onMouseUp)
Return: GetResult
Modifiers: public
Summary: After setting up options and so on, call this method to get a 3d point.
Parameter: onMouseUp (bool)
Parameter Summary: If false, the point is returned when the left mouse button goes down. If true, the point is returned when the left mouse button goes up.

Method: Rhino.Input.Custom.GetPoint.GetConstructionPoints()
Return: Point3d[]
Modifiers: public
Summary: Gets current construction points.

Method: Rhino.Input.Custom.GetPoint.GetPlanarConstraint(ref RhinoViewport vp, out Plane plane)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.GetPoint.GetSnapPoints()
Return: Point3d[]
Modifiers: public
Summary: Gets current snap points.

Method: Rhino.Input.Custom.GetPoint.InterruptMouseMove()
Return: bool
Modifiers: public
Summary: If you have lengthy computations in OnMouseMove() and/or DymanicDraw() overrides, then periodically call InterruptMouseMove() to see if you should interrupt your work because the mouse has moved again.

Method: Rhino.Input.Custom.GetPoint.NumberPreview(out double number)
Return: bool
Modifiers: public
Summary: If the user is typing a number, but hasn't pressed Enter, True is returned, along with the number the user typed.
Parameter: number (double)
Parameter Summary: The number typed by the user.

Method: Rhino.Input.Custom.GetPoint.OnDynamicDraw(GetPointDrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Default calls the DynamicDraw event.
Parameter: e (GetPointDrawEventArgs)
Parameter Summary: Current argument for the event.

Method: Rhino.Input.Custom.GetPoint.OnMouseDown(GetPointMouseEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Default calls the MouseDown event.
Parameter: e (GetPointMouseEventArgs)
Parameter Summary: Current argument for the event.

Method: Rhino.Input.Custom.GetPoint.OnMouseMove(GetPointMouseEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Calls the <b>MouseMove</b> event and can/should be called by overriding implementation.
Parameter: e (GetPointMouseEventArgs)
Parameter Summary: Current argument for the event.

Method: Rhino.Input.Custom.GetPoint.OnPostDrawObjects(DrawEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: In the "rare" case that you need to draw some depth buffered geometry during a GetPoint operation, override the OnPostDrawObjects function. NOTE!! Overriding this function comes with a significant performance penalty because the scene needs to be fully regenerated every frame where the standard DynamicDraw event draws temporary decorations (geometry) on top of a static scene.
Parameter: e (DrawEventArgs)
Parameter Summary: Current argument for the event.

Method: Rhino.Input.Custom.GetPoint.PermitConstraintOptions(bool permit)
Return: void
Modifiers: public
Summary: Control the availability of the built-in linear, planar, curve, and surface constraint options like "Along", "AlongPerp", "AlongTan", "AlongParallel", "Between", "OnCrv", "OnSrf", ".x", ".y", ".z", ".xy", etc.
Parameter: permit (bool)
Parameter Summary: if true, then the built-in constraint options are automatically available in GetPoint.

Method: Rhino.Input.Custom.GetPoint.PermitElevatorMode(int permitMode)
Return: void
Modifiers: public
Summary: Permits the use of the control key to define a line constraint.
Parameter: permitMode (int)
Parameter Summary: 0: no elevator modes are permitted 1: fixed plane elevator mode (like the Line command) 2: cplane elevator mode (like object dragging)

Method: Rhino.Input.Custom.GetPoint.PermitFromOption(bool permit)
Return: void
Modifiers: public
Summary: Control the availability of the built-in "From" option. By default, the "From" option is enabled.
Parameter: permit (bool)
Parameter Summary: if true, then the "From" option is automatically available in GetPoint.

Method: Rhino.Input.Custom.GetPoint.PermitObjectSnap(bool permit)
Return: void
Modifiers: public
Summary: By default, object snaps like "end", "near", etc. are controlled by the user. If you want to disable this ability, then call PermitObjectSnap(false).
Parameter: permit (bool)
Parameter Summary: True to permit snapping to objects.

Method: Rhino.Input.Custom.GetPoint.PermitOrthoSnap(bool permit)
Return: void
Modifiers: public
Summary: Controls availability of ortho snap. Default is true.
Parameter: permit (bool)
Parameter Summary: if true, then GetPoint pays attention to the Rhino "ortho snap" and "planar snap" settings reported by ModelAidSettings.Ortho and ModelAidSettings.Planar.

Method: Rhino.Input.Custom.GetPoint.PermitTabMode(bool permit)
Return: void
Modifiers: public
Summary: Permits the use of the tab key to define a line constraint.
Parameter: permit (bool)
Parameter Summary: If true, then the built-in tab key mode is available.

Method: Rhino.Input.Custom.GetPoint.PointOnBrep(out double u, out double v)
Return: BrepFace
Modifiers: public
Summary: Use to determine if point was on a Brep face. If the point was on a Brep face, then the (u,v) are the face parameters for the point.
Parameter: u (double)
Parameter Summary: If the point was on a Brep face, then the u parameter.
Parameter: v (double)
Parameter Summary: If the point was on a Brep face, then the v parameter.

Method: Rhino.Input.Custom.GetPoint.PointOnCurve(out double t)
Return: Curve
Modifiers: public
Summary: Use to determine is point was on a curve.
Parameter: t (double)
Parameter Summary: If the point was on a curve, then the t is the curve parameter for the point.  The point returned by Point() is the same as curve.PointAt(t).

Method: Rhino.Input.Custom.GetPoint.PointOnObject()
Return: DocObjects.ObjRef
Modifiers: public
Summary: Call this function to see if the point was on an object. If the point was on an object an ObjRef is returned; otherwise None is returned.

Method: Rhino.Input.Custom.GetPoint.PointOnSurface(out double u, out double v)
Return: Surface
Modifiers: public
Summary: Use to determine if point was on a surface. If the point was on a surface, then the (u,v) are the surface parameters for the point. The point returned by Point() is the same as surface.PointAt(u,v).
Parameter: u (double)
Parameter Summary: If the point was on a surface, then the u parameter.
Parameter: v (double)
Parameter Summary: If the point was on a surface, then the v parameter.

Method: Rhino.Input.Custom.GetPoint.SetBasePoint(Point3d basePoint, bool showDistanceInStatusBar)
Return: void
Modifiers: public
Summary: Sets a base point used by ortho snap, from snap, planar snap, etc.
Parameter: basePoint (Point3d)
Parameter Summary: The new base point.
Parameter: showDistanceInStatusBar (bool)
Parameter Summary: If true, then the distance from base_point to the current point will be in the status bar distance pane.

Method: Rhino.Input.Custom.GetPoint.SetCursor(UI.CursorStyle cursor)
Return: void
Modifiers: public
Summary: Sets cursor that will be used when Get() is called and snap is not happening.

Method: Rhino.Input.Custom.GetPoint.TryGetBasePoint(out Point3d basePoint)
Return: bool
Modifiers: public

Class: Rhino.Input.Custom.GetPointDrawEventArgs
Summary: Arguments for drawing during point getting.

Property: Rhino.Input.Custom.GetPointDrawEventArgs.CurrentPoint
Return: Point3d
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointDrawEventArgs.Source
Return: GetPoint
Modifiers: public
Summary: GetPoint class that this draw event originated from.
Accessors: get

Class: Rhino.Input.Custom.GetPointMouseEventArgs
Summary: Arguments for mouse information during point getting.

Property: Rhino.Input.Custom.GetPointMouseEventArgs.ControlKeyDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.LeftButtonDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.MiddleButtonDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.Point
Return: Point3d
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.RightButtonDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.ShiftKeyDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.Source
Return: GetPoint
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetPointMouseEventArgs.WindowPoint
Return: Point
Modifiers: public
Accessors: get

Class: Rhino.Input.Custom.GetPolyline
Summary: Use to interactively get a polyline.

Constructor: Rhino.Input.Custom.GetPolyline.GetPolyline()

Property: Rhino.Input.Custom.GetPolyline.FirstPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting first point
Accessors: get set

Property: Rhino.Input.Custom.GetPolyline.FourthPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting fourth point
Accessors: get set

Property: Rhino.Input.Custom.GetPolyline.MaxPointCount
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetPolyline.MinPointCount
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetPolyline.SecondPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting second point
Accessors: get set

Property: Rhino.Input.Custom.GetPolyline.ThirdPointPrompt
Return: string
Modifiers: public
Summary: Prompt when getting third point
Accessors: get set

Method: Rhino.Input.Custom.GetPolyline.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetPolyline.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetPolyline.Get(out Geometry.Polyline polyline)
Return: Commands.Result
Modifiers: public
Summary: Perform the 'get' operation.

Method: Rhino.Input.Custom.GetPolyline.SetFirstPoint(Geometry.Point3d point)
Return: void
Modifiers: public
Summary: Use SetFirstPoint to specify the line's starting point and skip the start point interactive picking

Class: Rhino.Input.Custom.GetSphere
Summary: Class provides user interface to define a sphere.

Constructor: Rhino.Input.Custom.GetSphere.GetSphere()

Property: Rhino.Input.Custom.GetSphere.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetSphere.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Method: Rhino.Input.Custom.GetSphere.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetSphere.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetSphere.Get(out Geometry.Sphere sphere)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a sphere.
Parameter: sphere (Geometry.Sphere)
Parameter Summary: The sphere geometry defined by the user.

Method: Rhino.Input.Custom.GetSphere.GetMesh(ref MeshSphereStyle style, ref int verticalFaces, ref int aroundFaces, ref int triangleSubdivisions, ref int quadSubdivisions, out Geometry.Sphere sphere)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh sphere.
Parameter: style (MeshSphereStyle)
Parameter Summary: The style of the mesh sphere.
Parameter: verticalFaces (int)
Parameter Summary: The number of UV mesh faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of UV mesh faces in the around direction.
Parameter: triangleSubdivisions (int)
Parameter Summary: The number of triangle mesh subdivisions.
Parameter: quadSubdivisions (int)
Parameter Summary: The number of quad mesh subdivisions.
Parameter: sphere (Geometry.Sphere)
Parameter Summary: The sphere geometry defined by the user.

Class: Rhino.Input.Custom.GetString
Summary: Used to get strings.

Constructor: Rhino.Input.Custom.GetString.GetString()
Summary: Constructs a new GetString.

Method: Rhino.Input.Custom.GetString.Get()
Return: GetResult
Modifiers: public
Summary: Returns the string that the user typed. By default, space stops the string input.

Method: Rhino.Input.Custom.GetString.GetLiteralString()
Return: GetResult
Modifiers: public
Summary: Returns the string that the user typed. By default, space does not stop input.

Class: Rhino.Input.Custom.GetTorus
Summary: Class provides user interface to define a torus.

Constructor: Rhino.Input.Custom.GetTorus.GetTorus()

Property: Rhino.Input.Custom.GetTorus.AroundDirectionCount
Return: int
Modifiers: public
Summary: The number of faces in the around direction.
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.AroundDirectionMinimumCount
Return: int
Modifiers: public
Summary: The minimum number of faces in the around direction.
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.FixInnerRadius
Return: bool
Modifiers: public
Summary: Second radius option. The first radius chosen sets the inner dimension of the torus and the second radius is constrained to be outside of the first radius.
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.InSecondDiameterMode
Return: bool
Modifiers: public
Summary: Second radius option. Determines if the second "size" value is representing a radius or diameter
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.PromptForMeshDensity
Return: bool
Modifiers: public
Summary: Set True if you are prompting for a mesh or subd torus.
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.SecondSize
Return: double
Modifiers: public
Summary: Second radius or diameter (based on InSecondDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.VerticalDirectionCount
Return: int
Modifiers: public
Summary: The number of faces in the vertical direction.
Accessors: get set

Property: Rhino.Input.Custom.GetTorus.VerticalDirectionMinimumCount
Return: int
Modifiers: public
Summary: The minimum number of faces in the vertical direction.
Accessors: get set

Method: Rhino.Input.Custom.GetTorus.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetTorus.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetTorus.Get(out Geometry.Torus torus)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a torus.
Parameter: torus (Geometry.Torus)
Parameter Summary: The torus geometry defined by the user.

Method: Rhino.Input.Custom.GetTorus.GetMesh(ref int verticalFaces, ref int aroundFaces, out Geometry.Torus torus)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh torus.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: torus (Geometry.Torus)
Parameter Summary: The torus geometry defined by the user.

Class: Rhino.Input.Custom.GetTransform
Summary: Used for getting a Transform

Constructor: Rhino.Input.Custom.GetTransform.GetTransform()

Property: Rhino.Input.Custom.GetTransform.HaveTransform
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.GetTransform.ObjectList
Return: TransformObjectList
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.GetTransform.Transform
Return: Transform
Modifiers: public
Accessors: get set

Method: Rhino.Input.Custom.GetTransform.AddTransformObjects(Collections.TransformObjectList list)
Return: void
Modifiers: public
Summary: Adds any objects you want transformed and grips you want transformed. Make sure no duplicates are in the list and that no grip owners are passed in as objects.
Parameter: list (Collections.TransformObjectList)
Parameter Summary: A custom transform object list.

Method: Rhino.Input.Custom.GetTransform.CalculateTransform(Display.RhinoViewport viewport, Point3d point)
Return: Transform
Modifiers: public, abstract
Summary: Retrieves the final transformation.
Override this virtual function to provide your own custom transformation method. | Since: 5.0 | Parameter: viewport (Display.RhinoViewport) | Parameter Summary: A Rhino viewport that the user is using. | Parameter: point (Point3d) | Parameter Summary: A point that the user is selecting.

Method: Rhino.Input.Custom.GetTransform.GetXform()
Return: GetResult
Modifiers: public
Summary: Gets the Transformation.
Call this after having set up options and so on. | Since: 5.0

Class: Rhino.Input.Custom.GetTruncatedCone
Summary: Class provides user interface to define a truncated cone.

Constructor: Rhino.Input.Custom.GetTruncatedCone.GetTruncatedCone()

Property: Rhino.Input.Custom.GetTruncatedCone.Cap
Return: bool
Modifiers: public
Summary: Gets or sets whether or not the output should be capped.
Accessors: get set

Property: Rhino.Input.Custom.GetTruncatedCone.CylinderConstraint
Return: CylinderConstraint
Modifiers: public
Summary: State of the cone/cylinder constraint option. When the cone/cylinder option is selected, the circle is being made as a base for a cone/cylinder. By default the vertical cone/cylinder option not available but is not selected.  By default the "Vertical" option applies to VerticalCircle.
Accessors: get set

Property: Rhino.Input.Custom.GetTruncatedCone.DefaultSize
Return: double
Modifiers: public
Summary: Default radius or diameter (based on InDiameterMode)
Accessors: get set

Property: Rhino.Input.Custom.GetTruncatedCone.Height
Return: double
Modifiers: public
Summary: Height of truncated cone.
Accessors: get set

Property: Rhino.Input.Custom.GetTruncatedCone.InDiameterMode
Return: bool
Modifiers: public
Summary: Determines if the "size" value is representing a radius or diameter
Accessors: get set

Property: Rhino.Input.Custom.GetTruncatedCone.SecondRadius
Return: double
Modifiers: public
Summary: Radius of second circle.
Accessors: get set

Method: Rhino.Input.Custom.GetTruncatedCone.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Input.Custom.GetTruncatedCone.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Input.Custom.GetTruncatedCone.Get(out Geometry.Brep truncatedCone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a truncated cone.
Parameter: truncatedCone (Geometry.Brep)
Parameter Summary: The truncated cone in Brep form.

Method: Rhino.Input.Custom.GetTruncatedCone.GetMesh(ref int verticalFaces, ref int aroundFaces, out Geometry.Mesh truncatedCone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh truncated cone.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: truncatedCone (Geometry.Mesh)
Parameter Summary: The truncated cone in Mesh form.

Method: Rhino.Input.Custom.GetTruncatedCone.GetMesh(ref int verticalFaces, ref int aroundFaces, ref int capStyle, out Geometry.Mesh truncatedCone)
Return: Commands.Result
Modifiers: public
Summary: Prompt for the getting of a mesh truncated cone.
Parameter: verticalFaces (int)
Parameter Summary: The number of faces in the vertical direction.
Parameter: aroundFaces (int)
Parameter Summary: The number of faces in the around direction
Parameter: capStyle (int)
Parameter Summary: Set to 0 if you don't want the prompt, 3 is triangles, 4 is quads.
Parameter: truncatedCone (Geometry.Mesh)
Parameter Summary: The truncated cone in Mesh form.

Class: Rhino.Input.Custom.OptionColor

Constructor: Rhino.Input.Custom.OptionColor.OptionColor(Color initialValue)

Property: Rhino.Input.Custom.OptionColor.CurrentValue
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.OptionColor.InitialValue
Return: Color
Modifiers: public
Accessors: get

Method: Rhino.Input.Custom.OptionColor.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.OptionColor.Dispose(bool disposing)
Return: void
Modifiers: protected

Class: Rhino.Input.Custom.OptionDouble

Constructor: Rhino.Input.Custom.OptionDouble.OptionDouble(double initialValue, bool setLowerLimit, double limit)
Summary: Initializes a new instance of the double option class.

Constructor: Rhino.Input.Custom.OptionDouble.OptionDouble(double initialValue, double lowerLimit, double upperLimit)
Summary: Initializes a new instance of the <b>OptionDouble</b> class with lower and upper limits.

Constructor: Rhino.Input.Custom.OptionDouble.OptionDouble(double initialValue)

Property: Rhino.Input.Custom.OptionDouble.CurrentValue
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.OptionDouble.InitialValue
Return: double
Modifiers: public
Accessors: get

Method: Rhino.Input.Custom.OptionDouble.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.OptionDouble.Dispose(bool disposing)
Return: void
Modifiers: protected

Class: Rhino.Input.Custom.OptionInteger

Constructor: Rhino.Input.Custom.OptionInteger.OptionInteger(int initialValue, bool setLowerLimit, int limit)
Summary: Initializes a new instance of the <b>OptionInteger</b> class.

Constructor: Rhino.Input.Custom.OptionInteger.OptionInteger(int initialValue, int lowerLimit, int upperLimit)
Summary: Initializes a new instance of the <b>OptionInteger</b> class with both lower and upper limits.

Constructor: Rhino.Input.Custom.OptionInteger.OptionInteger(int initialValue)

Property: Rhino.Input.Custom.OptionInteger.CurrentValue
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.OptionInteger.InitialValue
Return: int
Modifiers: public
Accessors: get

Method: Rhino.Input.Custom.OptionInteger.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.OptionInteger.Dispose(bool disposing)
Return: void
Modifiers: protected

Class: Rhino.Input.Custom.OptionToggle

Constructor: Rhino.Input.Custom.OptionToggle.OptionToggle(bool initialValue, LocalizeStringPair offValue, LocalizeStringPair onValue)

Constructor: Rhino.Input.Custom.OptionToggle.OptionToggle(bool initialValue, string offValue, string onValue)

Property: Rhino.Input.Custom.OptionToggle.CurrentValue
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.OptionToggle.InitialValue
Return: bool
Modifiers: public
Accessors: get

Method: Rhino.Input.Custom.OptionToggle.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.OptionToggle.Dispose(bool disposing)
Return: void
Modifiers: protected

Class: Rhino.Input.Custom.PickContext
Summary: Utility for determining if objects are picked

Constructor: Rhino.Input.Custom.PickContext.PickContext()

Property: Rhino.Input.Custom.PickContext.GetObjectUsed
Return: GetObject
Modifiers: public
Accessors: get

Property: Rhino.Input.Custom.PickContext.PickGroupsEnabled
Return: bool
Modifiers: public
Summary: True if GroupObjects should be added to the pick list
Accessors: get set

Property: Rhino.Input.Custom.PickContext.PickLine
Return: Line
Modifiers: public
Summary: pick chord starts on near clipping plane and ends on far clipping plane.
Accessors: get set

Property: Rhino.Input.Custom.PickContext.PickMode
Return: PickMode
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.PickContext.PickStyle
Return: PickStyle
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.PickContext.SubObjectSelectionEnabled
Return: bool
Modifiers: public
Summary: True if the user had activated sub-object selection
Accessors: get set

Property: Rhino.Input.Custom.PickContext.View
Return: RhinoView
Modifiers: public
Summary: This view can be a model view or a page view. When view is a page view, then you need to distinguish between the viewports MainViewport() and ActiveViewport().  When m_view is a model view, both MainViewport() and ActiveViewport() return the world view's viewport.
Accessors: get set

Method: Rhino.Input.Custom.PickContext.Dispose()
Return: void
Modifiers: public

Method: Rhino.Input.Custom.PickContext.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.BezierCurve bezier, out double t, out double depth, out double distance)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.BoundingBox box, out bool boxCompletelyInFrustum)
Return: bool
Modifiers: public
Summary: Fast test to check if a bounding box intersects a pick frustum.
Parameter: box (Geometry.BoundingBox)
Parameter Summary: 
Parameter: boxCompletelyInFrustum (bool)
Parameter Summary: Set to True if the box is completely contained in the pick frustum. When doing a window or crossing pick, you can immediately return a hit if the object's bounding box is completely inside of the pick frustum.

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.Line line, out double t, out double depth, out double distance)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.Mesh mesh, MeshPickStyle pickStyle, out Geometry.Point3d hitPoint, out double depth, out double distance, out MeshHitFlag hitFlag, out int hitIndex)
Return: bool
Modifiers: public
Summary: Utility for picking meshes
Parameter: mesh (Geometry.Mesh)
Parameter Summary: mesh to test
Parameter: pickStyle (MeshPickStyle)
Parameter Summary: mode used for pick test
Parameter: hitPoint (Geometry.Point3d)
Parameter Summary: location returned here for point picks
Parameter: depth (double)
Parameter Summary: depth returned here for point picks LARGER values are NEARER to the camera. SMALLER values are FARTHER from the camera.
Parameter: distance (double)
Parameter Summary: planar distance returned here for point picks. SMALLER values are CLOSER to the pick point
Parameter: hitFlag (MeshHitFlag)
Parameter Summary: For point picks, How to interpret the hitIndex (vertex hit, edge hit, or face hit)
Parameter: hitIndex (int)
Parameter Summary: index of vertex/edge/face that was hit. Use hitFlag to determine what this index corresponds to

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.Mesh mesh, MeshPickStyle pickStyle, out Geometry.Point3d hitPoint, out Geometry.Point2d hitSurfaceUV, out Geometry.Point2d hitTextureCoordinate, out double depth, out double distance, out MeshHitFlag hitFlag, out int hitIndex)
Return: bool
Modifiers: public
Summary: Utility for picking meshes
Parameter: mesh (Geometry.Mesh)
Parameter Summary: mesh to test
Parameter: pickStyle (MeshPickStyle)
Parameter Summary: mode used for pick test
Parameter: hitPoint (Geometry.Point3d)
Parameter Summary: location returned here for point picks
Parameter: hitSurfaceUV (Geometry.Point2d)
Parameter Summary: If the mesh has surface parameters, set to the surface parameters of the hit point
Parameter: hitTextureCoordinate (Geometry.Point2d)
Parameter Summary: If the mesh has texture coordinates, set to the texture coordinate of the hit point.  Note that the texture coordinates can be set in many different ways and this information is useless unless you know how the texture coordinates are set on this particular mesh.
Parameter: depth (double)
Parameter Summary: depth returned here for point picks LARGER values are NEARER to the camera. SMALLER values are FARTHER from the camera.
Parameter: distance (double)
Parameter Summary: planar distance returned here for point picks. SMALLER values are CLOSER to the pick point
Parameter: hitFlag (MeshHitFlag)
Parameter Summary: For point picks, How to interpret the hitIndex (vertex hit, edge hit, or face hit)
Parameter: hitIndex (int)
Parameter Summary: index of vertex/edge/face that was hit. Use hitFlag to determine what this index corresponds to

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.NurbsCurve curve, out double t, out double depth, out double distance)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.Point3d point, out double depth, out double distance)
Return: bool
Modifiers: public
Summary: Utility for picking 3d point
Parameter: point (Geometry.Point3d)
Parameter Summary: 
Parameter: depth (double)
Parameter Summary: depth returned here for point picks. LARGER values are NEARER to the camera. SMALLER values are FARTHER from the camera.
Parameter: distance (double)
Parameter Summary: planar distance returned here for point picks. SMALLER values are CLOSER to the pick point

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.Point3d[] points, out int pointIndex, out double depth, out double distance)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.PickContext.PickFrustumTest(Geometry.PointCloud cloud, out int pointIndex, out double depth, out double distance)
Return: bool
Modifiers: public

Method: Rhino.Input.Custom.PickContext.PickMeshTopologyVertices(Geometry.Mesh mesh)
Return: int
Modifiers: public
Summary: Utility for picking mesh vertices

Method: Rhino.Input.Custom.PickContext.SetPickTransform(Geometry.Transform transform)
Return: void
Modifiers: public

Method: Rhino.Input.Custom.PickContext.UpdateClippingPlanes()
Return: void
Modifiers: public
Summary: Updates the clipping plane information in pick region. The SetClippingPlanes and View fields must be called before calling UpdateClippingPlanes().

Class: Rhino.Input.Custom.TaskCompleteEventArgs

Constructor: Rhino.Input.Custom.TaskCompleteEventArgs.TaskCompleteEventArgs(Task task, RhinoDoc doc)

Property: Rhino.Input.Custom.TaskCompleteEventArgs.Doc
Return: RhinoDoc
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.TaskCompleteEventArgs.Redraw
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Input.Custom.TaskCompleteEventArgs.Task
Return: Task
Modifiers: public
Accessors: get set

# Namespace: Rhino.NodeInCode

Class: Rhino.NodeInCode.ComponentFunctionInfo
Summary: Defines the base class for a function representing a component. This class is abstract.

Constructor: Rhino.NodeInCode.ComponentFunctionInfo.ComponentFunctionInfo(string name, string @namespace, string description, IReadOnlyList<string> inputNames, IReadOnlyList<string> inputDescriptions, IReadOnlyList<string> inputTypeNames, IReadOnlyList<bool> inputsOptional, IReadOnlyList<string> outputNames, IReadOnlyList<string> outputDescriptions, IReadOnlyList<string> outputTypeNames, Guid componentGuid)
Summary: Instantiates a new instance of the function class. This is not meant for public consumption.

Property: Rhino.NodeInCode.ComponentFunctionInfo.ComponentGuid
Return: Guid
Modifiers: public
Summary: The unique identifier of the Grasshopper component. It is the original developer's responsibility to ensure that this ID is unique.
Accessors: get set

Property: Rhino.NodeInCode.ComponentFunctionInfo.Delegate
Return: Delegate
Modifiers: public
Summary: Returns a delegate that can be directly invoked using a list of arguments. This flattens trees.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.DelegateNoWarnings
Return: Delegate
Modifiers: public
Summary: Returns a delegate that can be directly invoked using a list of arguments. This flattens trees.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.DelegateTree
Return: Delegate
Modifiers: public
Summary: Returns a delegate that can be directly invoked using a list of arguments. This considers trees and simplifies single-output components.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.DelegateTreeNoWarnings
Return: Delegate
Modifiers: public
Summary: Returns a delegate that can be directly invoked using a list of arguments. This considers trees and simplifies single-output components.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.Description
Return: string
Modifiers: public
Summary: The function description.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.FullName
Return: string
Modifiers: public
Summary: Returns the name of the component prefixed by, if existing, the namespace.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.FullScriptingName
Return: string
Modifiers: public
Summary: Shows the full name of the component, including optional periods. Removes spaces and common operator signs.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.InputDescriptions
Return: IReadOnlyList<string>
Modifiers: public
Summary: The function input parameter descriptions.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.InputNames
Return: IReadOnlyList<string>
Modifiers: public
Summary: The function input parameter names.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.InputsOptional
Return: IReadOnlyList<bool>
Modifiers: public
Summary: Indications for each function input parameter whether it is optional.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.InputTypeNames
Return: IReadOnlyList<string>
Modifiers: public
Summary: The function input type names.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.IsDefault
Return: bool
Modifiers: public
Summary: Determines if the component is a default one.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.Name
Return: string
Modifiers: public
Summary: The function name.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.Namespace
Return: string
Modifiers: public
Summary: The function namespace.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.OutputDescriptions
Return: IReadOnlyList<string>
Modifiers: public
Summary: Grasshopper returns several items in general. This property returns the output descriptions.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.OutputNames
Return: IReadOnlyList<string>
Modifiers: public
Summary: Grasshopper returns several items in general. This property returns the output names.
Accessors: get

Property: Rhino.NodeInCode.ComponentFunctionInfo.OutputTypeNames
Return: IReadOnlyList<string>
Modifiers: public
Summary: Grasshopper returns several items in general. This property returns the output type names.
Accessors: get

Method: Rhino.NodeInCode.ComponentFunctionInfo.Evaluate(System.Collections.IEnumerable args, bool keepTree, out string warnings)
Return: object
Modifiers: public, abstract
Summary: Evaluates the component with a set of arguments. There needs to be an argument for each input param, and each output param gives an entry in the output array.
Parameter: args (System.Collections.IEnumerable)
Parameter Summary: The arguments list. Each item is assigned to each input param, in order.
Parameter: keepTree (bool)
Parameter Summary: A value indicating whether trees should be considered valid inputs, and should be returned. In this case, output variables are not simplified to common types.
Parameter: warnings (string)
Parameter Summary: A possible list of warnings, or null.

Method: Rhino.NodeInCode.ComponentFunctionInfo.Invoke(params object args)
Return: object
Modifiers: public
Summary: Runs <b>Evaluate</b> with keepTree equal to false, and raises an exception on the first warning.
Parameter: args (object)
Parameter Summary: Arguments. One for each component input.

Method: Rhino.NodeInCode.ComponentFunctionInfo.InvokeKeepTree(params object args)
Return: object
Modifiers: public
Summary: Runs <b>Evaluate</b> with keepTree equal to True and raises an exception on the first warning.
Parameter: args (object)
Parameter Summary: Arguments. One for each component input.

Method: Rhino.NodeInCode.ComponentFunctionInfo.InvokeKeepTreeSilenceWarnings(params object args)
Return: object
Modifiers: public
Summary: Runs <b>Evaluate</b> with keepTree equal to true, and discards warnings (this is a dangerous operation!).
Parameter: args (object)
Parameter Summary: Arguments.

Method: Rhino.NodeInCode.ComponentFunctionInfo.InvokeSilenceWarnings(params object args)
Return: object
Modifiers: public
Summary: Runs <b>Evaluate</b> with keepTree equal to false, then simplifies output with <b>SimplifyTreeOutput</b> and discards warnings (this is a dangerous operation!).
Parameter: args (object)
Parameter Summary: Arguments. One for each component input.

Method: Rhino.NodeInCode.ComponentFunctionInfo.ToString()
Return: string
Modifiers: public, override
Summary: Returns a string representing this function.

Class: Rhino.NodeInCode.Components
Summary: Provides access to all Grasshopper runtime components.

Constructor: Rhino.NodeInCode.Components.Components()
Summary: Initializes a new instance of the Components class

Property: Rhino.NodeInCode.Components.NodeInCodeFunctions
Return: NodeInCodeTable
Modifiers: public, static
Summary: Returns a collection with all component functions.
Accessors: get

Method: Rhino.NodeInCode.Components.FindComponent(string fullName)
Return: ComponentFunctionInfo
Modifiers: public, static
Summary: Finds a component given its full name.
Parameter: fullName (string)
Parameter Summary: The name, including its library name and a period if it is made by a third-party.

Method: Rhino.NodeInCode.Components.__getAllFunctions()
Return: NodeInCodeTable
Modifiers: protected, virtual
Summary: Returns a collection with all component functions. For infrastructure usage only.

Class: Rhino.NodeInCode.NodeInCodeTable
Summary: Permits rapid access to references to all Grasshopper functions.

Constructor: Rhino.NodeInCode.NodeInCodeTable.NodeInCodeTable(IEnumerable<ComponentFunctionInfo> items)
Summary: Instantiates the table. Users of RhinoCommon do not typically need to call this constructor.

Property: Rhino.NodeInCode.NodeInCodeTable.Count
Return: int
Modifiers: public
Summary: Returns the amount of items in this table.
Accessors: get

Method: Rhino.NodeInCode.NodeInCodeTable.Add(ComponentFunctionInfo item)
Return: void
Modifiers: public
Summary: Adds, or replaces a new instance of component function information.

Method: Rhino.NodeInCode.NodeInCodeTable.GetDynamicMemberNames()
Return: IEnumerable<string>
Modifiers: public, override
Summary: Returns all additional names in the table.

Method: Rhino.NodeInCode.NodeInCodeTable.GetDynamicMembers()
Return: IEnumerable<ComponentFunctionInfo>
Modifiers: public
Summary: Returns component info for all additional names in the table.

Method: Rhino.NodeInCode.NodeInCodeTable.TryGetIndex(GetIndexBinder binder, object indexes, out object result)
Return: bool
Modifiers: public, override
Summary: Gets the ComponentFunctionInfo at
Parameter: binder (GetIndexBinder)
Parameter Summary: The binder.
Parameter: indexes (object)
Parameter Summary: ONE string index.
Parameter: result (object)
Parameter Summary: The bound info.

Method: Rhino.NodeInCode.NodeInCodeTable.TryGetMember(GetMemberBinder binder, out object result)
Return: bool
Modifiers: public, override
Summary: Dynamically binds the table to property-like access via its item names.
Parameter: binder (GetMemberBinder)
Parameter Summary: The dynamic binder.
Parameter: result (object)
Parameter Summary: Returns the result.

Method: Rhino.NodeInCode.NodeInCodeTable.TryInvokeMember(InvokeMemberBinder binder, object args, out object result)
Return: bool
Modifiers: public, override
Summary: Dynamically invokes a member of the table.
Parameter: binder (InvokeMemberBinder)
Parameter Summary: The binder.
Parameter: args (object)
Parameter Summary: The arguments.
Parameter: result (object)
Parameter Summary: The result.

# Namespace: Rhino.ObjectManager

Class: Rhino.ObjectManager.ObjectManager.NodeIds

# Namespace: Rhino.PlugIns

Class: Rhino.PlugIns.CustomRenderSaveFileTypes

Method: Rhino.PlugIns.CustomRenderSaveFileTypes.RegisterFileType(IEnumerable<string> extensions, string description, SaveFileHandler saveFileHandler)
Return: void
Modifiers: public
Summary: Call this method to register a custom file save type with the render output window save dialog.
Parameter: extensions (IEnumerable<string>)
Parameter Summary: List of one or more file extension associated with this custom type, for example: HDR, HDRI
Parameter: description (string)
Parameter Summary: File extension description which appears in the file save dialog file type combo box.
Parameter: saveFileHandler (SaveFileHandler)
Parameter Summary:

Class: Rhino.PlugIns.DigitizerPlugIn
Summary: A Rhino plug-in that interfaces with 3-D digitizing or input devices.

Constructor: Rhino.PlugIns.DigitizerPlugIn.DigitizerPlugIn()

Property: Rhino.PlugIns.DigitizerPlugIn.DigitizerUnitSystem
Return: UnitSystem
Modifiers: protected, abstract
Summary: Unit system of the points the digitizer passes to SendPoint(). Rhino uses this value when it calibrates a digitizer. This unit system must be not change.
Accessors: get

Property: Rhino.PlugIns.DigitizerPlugIn.PointTolerance
Return: double
Modifiers: protected, abstract
Summary: The point tolerance is the distance the digitizer must move (in digitizer coordinates) for a new point to be considered real rather than noise. Small desktop digitizer arms have values like 0.001 inches and 0.01 millimeters.  This value should never be smaller than the accuracy of the digitizing device.
Accessors: get

Method: Rhino.PlugIns.DigitizerPlugIn.EnableDigitizer(bool enable)
Return: bool
Modifiers: protected, abstract
Summary: Called by Rhino to enable/disable input from the digitizer. If enable is True and EnableDigitizer() returns false, then Rhino will not calibrate the digitizer.
Parameter: enable (bool)
Parameter Summary: If true, enable the digitizer. If false, disable the digitizer.

Method: Rhino.PlugIns.DigitizerPlugIn.SendPoint(Geometry.Point3d point, MouseButton mousebuttons, bool shiftKey, bool controlKey)
Return: void
Modifiers: public
Summary: If the digitizer is enabled, call this function to send a point to Rhino. Call this function as much as you like.  The digitizers that Rhino currently supports send a point every 15 milliseconds or so. This function should be called when users press or release any digitizer button.
Parameter: point (Geometry.Point3d)
Parameter Summary: 3d point in digitizer coordinates.
Parameter: mousebuttons (MouseButton)
Parameter Summary: corresponding digitizer button is down.
Parameter: shiftKey (bool)
Parameter Summary: True if the Shift keyboard key was pressed. Otherwise, false.
Parameter: controlKey (bool)
Parameter Summary: True if the Control keyboard key was pressed. Otherwise, false.

Method: Rhino.PlugIns.DigitizerPlugIn.SendRay(Geometry.Ray3d ray, MouseButton mousebuttons, bool shiftKey, bool controlKey)
Return: void
Modifiers: public
Summary: If the digitizer is enabled, call this function to send a point and direction to Rhino. Call this function as much as you like.  The digitizers that Rhino currently supports send a point every 15 milliseconds or so. This function should be called when users press or release any digitizer button.
Parameter: ray (Geometry.Ray3d)
Parameter Summary: 3d ray in digitizer coordinates.
Parameter: mousebuttons (MouseButton)
Parameter Summary: corresponding digitizer button is down.
Parameter: shiftKey (bool)
Parameter Summary: True if the Shift keyboard key was pressed. Otherwise, false.
Parameter: controlKey (bool)
Parameter Summary: True if the Control keyboard key was pressed. Otherwise, false.

Class: Rhino.PlugIns.FileExportPlugIn
Summary: Rhino plug-in that exports data from Rhino to other file formats; can support more than one format.

Constructor: Rhino.PlugIns.FileExportPlugIn.FileExportPlugIn()

Property: Rhino.PlugIns.FileExportPlugIn.ShouldDisplayOptionsDialog
Return: bool
Modifiers: protected, virtual
Accessors: get

Method: Rhino.PlugIns.FileExportPlugIn.AddFileTypes(FileIO.FileWriteOptions options)
Return: FileTypeList
Modifiers: protected, abstract

Method: Rhino.PlugIns.FileExportPlugIn.DisplayOptionsDialog(System.IntPtr parent, string description, string extension)
Return: void
Modifiers: protected, virtual

Method: Rhino.PlugIns.FileExportPlugIn.WriteFile(string filename, int index, RhinoDoc doc, Rhino.FileIO.FileWriteOptions options)
Return: WriteFileResult
Modifiers: protected, abstract

Class: Rhino.PlugIns.FileImportPlugIn
Summary: Rhino plug-in that imports data from other file formats into Rhino; can support more that one format.

Constructor: Rhino.PlugIns.FileImportPlugIn.FileImportPlugIn()

Method: Rhino.PlugIns.FileImportPlugIn.AddFileTypes(FileIO.FileReadOptions options)
Return: FileTypeList
Modifiers: protected, abstract

Method: Rhino.PlugIns.FileImportPlugIn.DisplayOptionsDialog(System.IntPtr parent, string description, string extension)
Return: void
Modifiers: protected, virtual

Method: Rhino.PlugIns.FileImportPlugIn.MakeReferenceTableName(string nameToPrefix)
Return: string
Modifiers: protected

Method: Rhino.PlugIns.FileImportPlugIn.ReadFile(string filename, int index, RhinoDoc doc, FileIO.FileReadOptions options)
Return: bool
Modifiers: protected, abstract

Class: Rhino.PlugIns.FileTypeList

Constructor: Rhino.PlugIns.FileTypeList.FileTypeList()

Constructor: Rhino.PlugIns.FileTypeList.FileTypeList(string description, string extension, bool showOptionsButtonInFileDialog)

Constructor: Rhino.PlugIns.FileTypeList.FileTypeList(string description, string extension)

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, IEnumerable<string> extensions, bool showOptionsButtonInFileDialog)
Return: int
Modifiers: public

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, IEnumerable<string> extensions)
Return: int
Modifiers: public

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, string extension, bool showOptionsButtonInFileDialog)
Return: int
Modifiers: public

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, string extension1, string extension2, bool showOptionsButtonInFileDialog)
Return: int
Modifiers: public

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, string extension1, string extension2)
Return: int
Modifiers: public

Method: Rhino.PlugIns.FileTypeList.AddFileType(string description, string extension)
Return: int
Modifiers: public

Class: Rhino.PlugIns.LicenseChangedEventArgs

Class: Rhino.PlugIns.LicenseData
Summary: Zoo plug-in license data.

Constructor: Rhino.PlugIns.LicenseData.LicenseData()
Summary: Public constructor.

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle, LicenseBuildType buildType, int licenseCount, DateTime? expirationDate, Icon productIcon, bool requiresOnlineValidation, bool isUpgradeFromPreviousVersion)
Summary: Public constructor

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle, LicenseBuildType buildType, int licenseCount, DateTime? expirationDate, Icon productIcon)
Summary: Public constructor

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle, LicenseBuildType buildType, int licenseCount, DateTime? expirationDate)
Summary: Public constructor

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle, LicenseBuildType buildType, int licenseCount)
Summary: Public constructor

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle, LicenseBuildType buildType)
Summary: Public constructor

Constructor: Rhino.PlugIns.LicenseData.LicenseData(string productLicense, string serialNumber, string licenseTitle)
Summary: Public constructor

Property: Rhino.PlugIns.LicenseData.BuildType
Return: LicenseBuildType
Modifiers: public
Summary: The build of the product that this license work with. When your product requests a license from the Zoo, it will specify one of these build types.
Accessors: get set

Property: Rhino.PlugIns.LicenseData.DateToExpire
Return: DateTime?
Modifiers: public
Summary: The date and time the license is set to expire. This is provided by the plug in that validated the license. This time value should be in Coordinated Universal Time (UTC).
Accessors: get set

Property: Rhino.PlugIns.LicenseData.ErrorMessage
Return: string
Modifiers: public
Summary: Error message set by calls to callback functions
Accessors: get set

Property: Rhino.PlugIns.LicenseData.IsUpgradeFromPreviousVersion
Return: bool
Modifiers: public
Summary: Set to True if this license requires a previous version license to be entered. Caller must also pass VerifyPreviousVersionLicenseDelegate to GetLicense/AskUserForLicense.
Accessors: get set

Property: Rhino.PlugIns.LicenseData.LicenseCount
Return: int
Modifiers: public
Summary: The number of instances supported by this license. This is provided by the plug in that validated the license.
Accessors: get set

Property: Rhino.PlugIns.LicenseData.LicenseExpires
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.PlugIns.LicenseData.LicenseTitle
Return: string
Modifiers: public
Summary: The title of the license. This is provided by the plug-in that validated the license. (e.g. "Rhinoceros 6.0 Commercial")
Accessors: get set

Property: Rhino.PlugIns.LicenseData.ProductIcon
Return: Icon
Modifiers: public
Summary: The product's icon. This will displayed in the "license" page in the Options dialog. Note, this can be null. Note, LicenseData creates it's own copy of the icon.
Accessors: get set

Property: Rhino.PlugIns.LicenseData.ProductLicense
Return: string
Modifiers: public
Summary: The actual product license. This is provided by the plug-in that validated the license.
Accessors: get set

Property: Rhino.PlugIns.LicenseData.RequiresOnlineValidation
Return: bool
Modifiers: public
Summary: Set to True if this license requires online validation. Caller must also pass VerifyOnlineValidationCodeDelegate to GetLicense/AskUserForLicense
Accessors: get set

Property: Rhino.PlugIns.LicenseData.SerialNumber
Return: string
Modifiers: public
Summary: The "for display only" product license. This is provided by the plug-in that validated the license.
Accessors: get set

Method: Rhino.PlugIns.LicenseData.IsNotValid(LicenseData data)
Return: bool
Modifiers: public, static
Summary: Indicates whether a LicenseData object is either None or invalid.

Method: Rhino.PlugIns.LicenseData.IsValid(LicenseData data)
Return: bool
Modifiers: public, static
Summary: Indicates whether a LicenseData object is not None and valid.

Method: Rhino.PlugIns.LicenseData.Dispose()
Return: void
Modifiers: public

Method: Rhino.PlugIns.LicenseData.IsValid()
Return: bool
Modifiers: public
Summary: Public validator.

Method: Rhino.PlugIns.LicenseData.IsValid(bool ignoreExpirationDate)
Return: bool
Modifiers: public

Class: Rhino.PlugIns.LicenseIdAttribute

Constructor: Rhino.PlugIns.LicenseIdAttribute.LicenseIdAttribute(string value)

Property: Rhino.PlugIns.LicenseIdAttribute.Value
Return: string
Modifiers: public
Accessors: get

Class: Rhino.PlugIns.LicenseLease
Summary: LicenseLease represents a lease returned from the Cloud Zoo

Constructor: Rhino.PlugIns.LicenseLease.LicenseLease(IntPtr unmanagedPointer)

Constructor: Rhino.PlugIns.LicenseLease.LicenseLease(string productId, string groupName, string groupId, string userName, string userId, string productTitle, string productVersion, string productEdition, string leaseId, DateTime iat, DateTime exp, DateTime renewable_until)

Constructor: Rhino.PlugIns.LicenseLease.LicenseLease(string productId, string groupName, string groupId, string userName, string userId, string productTitle, string productVersion, string productEdition, string leaseId, DateTime iat, DateTime exp)

Property: Rhino.PlugIns.LicenseLease.Expiration
Return: DateTime
Modifiers: public
Summary: The date when this lease will expire
Accessors: get

Property: Rhino.PlugIns.LicenseLease.GroupId
Return: string
Modifiers: public
Summary: ID of Rhino Accounts group that this lease came from
Accessors: get

Property: Rhino.PlugIns.LicenseLease.GroupName
Return: string
Modifiers: public
Summary: Name of Rhino Accounts group that this lease came from
Accessors: get

Property: Rhino.PlugIns.LicenseLease.IssuedAt
Return: DateTime
Modifiers: public
Summary: The date this lease was issued
Accessors: get

Property: Rhino.PlugIns.LicenseLease.LeaseId
Return: string
Modifiers: public
Summary: The ID of this lease.
Accessors: get

Property: Rhino.PlugIns.LicenseLease.ProductEdition
Return: string
Modifiers: public
Summary: Edition of product that this lease is issued to. For example, "Commercial" or "Beta"
Accessors: get

Property: Rhino.PlugIns.LicenseLease.ProductId
Return: string
Modifiers: public
Summary: The ID of the product that this lease is issued to
Accessors: get

Property: Rhino.PlugIns.LicenseLease.ProductTitle
Return: string
Modifiers: public
Summary: Title of product that this lease is issued to. For example, "Rhino 6"
Accessors: get

Property: Rhino.PlugIns.LicenseLease.ProductVersion
Return: string
Modifiers: public
Summary: Version of product that this lease is issued to. For example, "6.0"
Accessors: get

Property: Rhino.PlugIns.LicenseLease.RenewableUntil
Return: DateTime?
Modifiers: public
Summary: The date when the license in the cloud zoo entity will expire, if any
Accessors: get

Property: Rhino.PlugIns.LicenseLease.UserId
Return: string
Modifiers: public
Summary: ID of Rhino Accounts user that was logged in when this lease was obtained
Accessors: get

Property: Rhino.PlugIns.LicenseLease.UserName
Return: string
Modifiers: public
Summary: Name of Rhino Accounts user that was logged in when this lease was obtained
Accessors: get

Class: Rhino.PlugIns.LicenseLeaseChangedEventArgs
Summary: Arguments for OnLeaseChangedDelegate

Constructor: Rhino.PlugIns.LicenseLeaseChangedEventArgs.LicenseLeaseChangedEventArgs(LicenseLease lease)

Property: Rhino.PlugIns.LicenseLeaseChangedEventArgs.Lease
Return: LicenseLease
Modifiers: public
Summary: The lease returned by Rhino Accounts server
Accessors: get

Class: Rhino.PlugIns.LicenseStatus
Summary: LicenseStatus class.

Constructor: Rhino.PlugIns.LicenseStatus.LicenseStatus()
Summary: Public constructor.

Property: Rhino.PlugIns.LicenseStatus.BuildType
Return: LicenseBuildType
Modifiers: public
Summary: The build contentType of the product, where: 100 = A release build, either commercial, education, NFR, etc. 200 = A evaluation build 300 = A beta build, such as a WIP.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.CheckOutExpirationDate
Return: DateTime?
Modifiers: public
Summary: The date and time the checked out license will expire. Note, this is only set if m_license_type = Standalone or CloudZoo and if "limited license checkout" was enabled on the Zoo server in the case of Standalone. Note, date and time is in local time coordinates.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.CloudZooLeaseExpiration
Return: DateTime?
Modifiers: public
Summary: Returns the expiration date of the lease this instance represents.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.CloudZooLeaseIsValid
Return: bool
Modifiers: public
Summary: Returns True if the Cloud Zoo Lease represented by this instance is actively being managed by the Cloud Zoo Manager; else returns false.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.ExpirationDate
Return: DateTime?
Modifiers: public
Summary: The date and time the license will expire. This value can be None if: 1.) The license contentType is "Standalone" and the license does not expire. 2.) The license contentType is "Network". 3.) The license contentType is "NetworkCheckedOut" and the checkout does not expire Note, date and time is in local time coordinates.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.LicenseTitle
Return: string
Modifiers: public
Summary: The title of the license. (e.g. "Rhinoceros 6.0 Commercial")
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.LicenseType
Return: LicenseType
Modifiers: public
Summary: The license contentType. (e.g. Standalone, Network, etc.)
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.PluginId
Return: Guid
Modifiers: public
Summary: The ID of the plug-in that owns this license information
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.ProductIcon
Return: Icon
Modifiers: public
Summary: The product's icon. Note, this can be null.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.ProductId
Return: Guid
Modifiers: public
Summary: The id of the product or plug in.
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.RegisteredOrganization
Return: string
Modifiers: public
Summary: The registered organization of the product (e.g. "Robert McNeel and Associates")
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.RegisteredOwner
Return: string
Modifiers: public
Summary: The registered owner of the product. (e.g. "Dale Fugier")
Accessors: get set

Property: Rhino.PlugIns.LicenseStatus.SerialNumber
Return: string
Modifiers: public
Summary: The "for display only" product license or serial number.
Accessors: get set

Class: Rhino.PlugIns.LicenseUtils
Summary: License Manager Utilities.

Constructor: Rhino.PlugIns.LicenseUtils.LicenseUtils()
Summary: Initializes a new instance of the LicenseUtils class

Method: Rhino.PlugIns.LicenseUtils.AskUserForLicense(int productType, bool standAlone, object parentWindow, string textMask, ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate onLeaseChangedDelegate, string product_path, string product_title, System.Guid pluginId, System.Guid licenseId, LicenseCapabilities capabilities)
Return: bool
Modifiers: public, static
Summary: This version of Rhino.PlugIns.LicenseUtils.AskUserForLicense is used by Rhino C++ plug-ins.

Method: Rhino.PlugIns.LicenseUtils.AskUserForLicense(int productType, bool standAlone, object parentWindow, string textMask, ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate onLeaseChangedDelegate, VerifyLicenseKeyDelegate verifyLicenseKeyDelegate, VerifyPreviousVersionLicenseDelegate verifyPreviousVersionLicenseKeyDelegate, string product_path, string product_title, System.Guid pluginId, System.Guid licenseId, LicenseCapabilities capabilities)
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.CheckInLicense(System.Guid productId)
Return: bool
Modifiers: public, static
Summary: Checks in a previously checked out license to the Zoo server from which it was checked out.
Parameter: productId (System.Guid)
Parameter Summary: The Guid of the product that you want to check in.

Method: Rhino.PlugIns.LicenseUtils.CheckOutLicense(System.Guid productId)
Return: bool
Modifiers: public, static
Summary: Checks out a license that is on loan from a Zoo server on a permanent basis.
Parameter: productId (System.Guid)
Parameter Summary: The Guid of the product that you want to check out.

Method: Rhino.PlugIns.LicenseUtils.ConvertLicense(System.Guid productId)
Return: bool
Modifiers: public, static
Summary: Converts a product license from a standalone node to a network node.
Parameter: productId (System.Guid)
Parameter Summary: The Guid of the product that you want to check in.

Method: Rhino.PlugIns.LicenseUtils.DeleteLicense(System.Guid productId)
Return: bool
Modifiers: public, static
Summary: Deletes a license along with its license file.

Method: Rhino.PlugIns.LicenseUtils.Echo(string message)
Return: string
Modifiers: public, static
Summary: Test connectivity with the Zoo.

Method: Rhino.PlugIns.LicenseUtils.GetLicense(ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate leaseChangedDelegate, int product_type, int capabilities, string textMask, string product_path, string product_title, System.Guid pluginId, System.Guid licenseId)
Return: bool
Modifiers: public, static
Summary: This version of Rhino.PlugIns.LicenseUtils.GetLicense is used by Rhino C++ plug-ins.

Method: Rhino.PlugIns.LicenseUtils.GetLicense(ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate leaseChangedDelegate, VerifyLicenseKeyDelegate verifyLicenseKeyDelegate, VerifyPreviousVersionLicenseDelegate verifyPreviousVersionLicenseKeyDelegate, int product_type, int capabilities, string textMask, string product_path, string product_title, System.Guid pluginId, System.Guid licenseId)
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.GetLicenseCapabilities(int filter)
Return: LicenseCapabilities
Modifiers: public, static
Summary: Converts an integer to a LicenseCapabilities flag

Method: Rhino.PlugIns.LicenseUtils.GetLicenseStatus()
Return: LicenseStatus[]
Modifiers: public, static
Summary: Returns the current status of every license for UI purposes.

Method: Rhino.PlugIns.LicenseUtils.GetLicenseType(System.Guid productId)
Return: int
Modifiers: public, static
Summary: Returns the contentType of a specified product license

Method: Rhino.PlugIns.LicenseUtils.GetOneLicenseStatus(System.Guid productid)
Return: LicenseStatus
Modifiers: public, static
Summary: Returns the current status of a license for UI purposes.

Method: Rhino.PlugIns.LicenseUtils.Initialize()
Return: bool
Modifiers: public, static
Summary: Initializes the license manager.

Method: Rhino.PlugIns.LicenseUtils.IsCheckOutEnabled()
Return: bool
Modifiers: public, static
Summary: Returns whether or not license checkout is enabled.

Method: Rhino.PlugIns.LicenseUtils.LicenseOptionsHandler(System.Guid pluginId, System.Guid licenseId, string productTitle, bool standAlone)
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.LoginToCloudZoo()
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.LogoutOfCloudZoo()
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.ReturnLicense(System.Guid productId)
Return: bool
Modifiers: public, static
Summary: OBSOLETE - REMOVE WHEN POSSIBLE.

Method: Rhino.PlugIns.LicenseUtils.ShowBuyLicenseUi(System.Guid productId)
Return: void
Modifiers: public, static

Method: Rhino.PlugIns.LicenseUtils.ShowLicenseValidationUi(string cdkey)
Return: bool
Modifiers: public, static
Summary: ShowLicenseValidationUi

Method: Rhino.PlugIns.LicenseUtils.ShowRhinoExpiredMessage(Rhino.Runtime.Mode mode, ref int result)
Return: bool
Modifiers: public, static
Summary: Show Rhino or Beta expired message

Class: Rhino.PlugIns.PlugIn
Summary: A general purpose utility plug-in that can contain one or more commands.

Constructor: Rhino.PlugIns.PlugIn.PlugIn()

Property: Rhino.PlugIns.PlugIn.AskOnLoadProtection
Return: bool
Modifiers: public, static
Summary: If true, Rhino will display a warning dialog when load-protected plug-ins are attempting to load. If false, load-protected plug-ins will silently not load.
Accessors: get set

Property: Rhino.PlugIns.PlugIn.InstalledPlugInCount
Return: int
Modifiers: public, static
Summary: Returns the number of installed Rhino plug-ins.
Accessors: get

Property: Rhino.PlugIns.PlugIn.AddToHelpMenu
Return: bool
Modifiers: public, virtual
Summary: Called by Rhino to determine if the plug-in name should be added to the Rhino Help/Plug-ins menu.
Accessors: get

Property: Rhino.PlugIns.PlugIn.Assembly
Return: Assembly
Modifiers: public
Summary: Source assembly for this plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugIn.Description
Return: string
Modifiers: public
Summary: Returns the description of the plug-in, as found in the plug-in's assembly attributes.
Accessors: get

Property: Rhino.PlugIns.PlugIn.Id
Return: Guid
Modifiers: public
Summary: Returns the Guid, or unique Id, of the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugIn.LicenseId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.PlugIns.PlugIn.LoadAtStartup
Return: bool
Modifiers: public, virtual
Accessors: get

Property: Rhino.PlugIns.PlugIn.LoadTime
Return: PlugInLoadTime
Modifiers: public, virtual
Summary: Plug-ins are typically loaded on demand when they are first needed. You can change this behavior to load the plug-in at during different stages in time by overriding this property.
Accessors: get

Property: Rhino.PlugIns.PlugIn.LocalPlugInName
Return: string
Modifiers: virtual, protected
Summary: Optionally override this to provide a localized plug-in name
Accessors: get

Property: Rhino.PlugIns.PlugIn.Name
Return: string
Modifiers: public
Summary: Returns the name of the plug-in, as found in the plug-in's assembly attributes.
Accessors: get

Property: Rhino.PlugIns.PlugIn.Settings
Return: PersistentSettings
Modifiers: public
Summary: Persistent plug-in settings.
Accessors: get

Property: Rhino.PlugIns.PlugIn.SettingsDirectory
Return: string
Modifiers: public
Summary: Get the plug-in's settings directory. This is the directory where the plug-in's persistent settings files are saved. This directory will be located in the user's profile folder. Note, this does not verify the directory exists.
Accessors: get

Property: Rhino.PlugIns.PlugIn.SettingsDirectoryAllUsers
Return: string
Modifiers: public
Summary: Get the plug-in's "all users" settings directory. This directory will be located in the system's program data folder. Note, this does not verify the directory exists.
Accessors: get

Property: Rhino.PlugIns.PlugIn.Version
Return: string
Modifiers: public
Summary: Returns the version of the plug-in, as found in the plug-in's assembly attributes.
Accessors: get

Property: Rhino.PlugIns.PlugIn.WindowPositionSettings
Return: PersistentSettings
Modifiers: public
Accessors: get

Method: Rhino.PlugIns.PlugIn.Find(System.Guid plugInId)
Return: PlugIn
Modifiers: public, static
Summary: Finds the plug-in instance that was loaded from a given plug-in Id.
Parameter: plugInId (System.Guid)
Parameter Summary: The plug-in Id.

Method: Rhino.PlugIns.PlugIn.Find(System.Reflection.Assembly pluginAssembly)
Return: PlugIn
Modifiers: public, static
Summary: Finds the plug-in instance that was loaded from a given assembly.
Parameter: pluginAssembly (System.Reflection.Assembly)
Parameter Summary: The plug-in assembly.
You can get the assembly instance at runtime with the  instance property.

Method: Rhino.PlugIns.PlugIn.FlushSettingsSavedQueue()
Return: void
Modifiers: public, static

Method: Rhino.PlugIns.PlugIn.GetEnglishCommandNames(System.Guid pluginId)
Return: string
Modifiers: public, static
Summary: Gets names of all "non-test" commands for a given plug-in.
Parameter: pluginId (System.Guid)
Parameter Summary: The plug-in ID.

Method: Rhino.PlugIns.PlugIn.GetInstalledPlugInFolders()
Return: string
Modifiers: public, static

Method: Rhino.PlugIns.PlugIn.GetInstalledPlugInNames()
Return: string
Modifiers: public, static
Summary: Returns the names of all installed Rhino plug-ins.

Method: Rhino.PlugIns.PlugIn.GetInstalledPlugInNames(PlugInType typeFilter, bool loaded, bool unloaded, bool localizedPlugInName)
Return: string
Modifiers: public, static
Summary: Gets a list of installed plug-in names.  The list can be restricted by some filters.
Parameter: typeFilter (PlugInType)
Parameter Summary: The enumeration flags that determine which types of plug-ins are included.
Parameter: loaded (bool)
Parameter Summary: True if loaded plug-ins are returned.
Parameter: unloaded (bool)
Parameter Summary: True if unloaded plug-ins are returned.
Parameter: localizedPlugInName (bool)
Parameter Summary: If True localized plug-in names are returned otherwise; English names are returned.

Method: Rhino.PlugIns.PlugIn.GetInstalledPlugInNames(PlugInType typeFilter, bool loaded, bool unloaded)
Return: string
Modifiers: public, static
Summary: Gets a list of installed plug-in names.  The list can be restricted by some filters.
Parameter: typeFilter (PlugInType)
Parameter Summary: The enumeration flags that determine which types of plug-ins are included.
Parameter: loaded (bool)
Parameter Summary: True if loaded plug-ins are returned.
Parameter: unloaded (bool)
Parameter Summary: True if unloaded plug-ins are returned.

Method: Rhino.PlugIns.PlugIn.string> GetInstalledPlugIns()
Return: Dictionary<Guid,
Modifiers: public, static
Summary: Get a list of all registered plug-in's regardless of if they are loaded or not.

Method: Rhino.PlugIns.PlugIn.string> GetInstalledPlugIns(bool localizedPlugInName)
Return: Dictionary<Guid,
Modifiers: public, static
Summary: Get a list of all registered plug-in's regardless of if they are loaded or not.
Parameter: localizedPlugInName (bool)
Parameter Summary: If True then the localize plug-in name is returned otherwise; the English name is used.

Method: Rhino.PlugIns.PlugIn.GetLoadProtection(System.Guid pluginId, out bool loadSilently)
Return: bool
Modifiers: public, static
Summary: Get load protection state for a plug-in

Method: Rhino.PlugIns.PlugIn.GetPlugInInfo(System.Guid pluginId)
Return: PlugInInfo
Modifiers: public, static
Summary: Returns detailed information about an installed Rhino plug-in.
Parameter: pluginId (System.Guid)
Parameter Summary: The id of the plug-in.

Method: Rhino.PlugIns.PlugIn.GetPluginSettings(System.Guid plugInId, bool load)
Return: PersistentSettings
Modifiers: public, static

Method: Rhino.PlugIns.PlugIn.IdFromName(string pluginName)
Return: System.Guid
Modifiers: public, static
Summary: Gets the id of an installed plug-in giving the plug-in's name.
Parameter: pluginName (string)
Parameter Summary: The name of the installed plug-in.

Method: Rhino.PlugIns.PlugIn.IdFromPath(string pluginPath)
Return: System.Guid
Modifiers: public, static
Summary: Gets the id of an installed plug-in giving the plug-in's file path.
Parameter: pluginPath (string)
Parameter Summary: The path to the installed plug-in.

Method: Rhino.PlugIns.PlugIn.LoadComputeExtensionPlugins()
Return: void
Modifiers: public, static
Summary: Used by compute's startup code to load plug-ins that have registered custom endpoints

Method: Rhino.PlugIns.PlugIn.LoadPlugIn(string path, out System.Guid plugInId)
Return: LoadPlugInResult
Modifiers: public, static
Summary: Attempt to load a plug-in at a path. Loaded plug-ins are remembered by Rhino between sessions, so this function can also be considered a plug-in installation routine
Parameter: path (string)
Parameter Summary: full path to plug-in to attempt to load
Parameter: plugInId (System.Guid)
Parameter Summary: If successful (or the plug-in is already loaded), the unique id for the plug-in is returned here. Guid.Empty on failure

Method: Rhino.PlugIns.PlugIn.LoadPlugIn(System.Guid pluginId, bool loadQuietly, bool forceLoad)
Return: bool
Modifiers: public, static
Summary: Loads an installed plug-in.
Parameter: pluginId (System.Guid)
Parameter Summary: The id of the installed plug-in.
Parameter: loadQuietly (bool)
Parameter Summary: Load the plug-in quietly.
Parameter: forceLoad (bool)
Parameter Summary: Load plug-in even if previous attempt to load has failed.

Method: Rhino.PlugIns.PlugIn.LoadPlugIn(System.Guid pluginId)
Return: bool
Modifiers: public, static
Summary: Loads an installed plug-in.
Parameter: pluginId (System.Guid)
Parameter Summary: The id of the installed plug-in.

Method: Rhino.PlugIns.PlugIn.NameFromPath(string pluginPath)
Return: string
Modifiers: public, static
Summary: Gets a plug-in name for an installed plug-in given the path to that plug-in.
Parameter: pluginPath (string)
Parameter Summary: The path of the plug-in.

Method: Rhino.PlugIns.PlugIn.PathFromId(System.Guid pluginId)
Return: string
Modifiers: public, static
Summary: Gets the path to an installed plug-in given the id of that plug-in

Method: Rhino.PlugIns.PlugIn.PathFromName(string pluginName)
Return: string
Modifiers: public, static
Summary: Gets the path to an installed plug-in given the name of that plug-in

Method: Rhino.PlugIns.PlugIn.PlugInExists(System.Guid id, out bool loaded, out bool loadProtected)
Return: bool
Modifiers: public, static
Summary: Verifies that a Rhino plug-in is installed.
Parameter: id (System.Guid)
Parameter Summary: The id of the plug-in.
Parameter: loaded (bool)
Parameter Summary: The loaded state of the plug-in.
Parameter: loadProtected (bool)
Parameter Summary: The load protected state of the plug-in.

Method: Rhino.PlugIns.PlugIn.RaiseOnPlugInSettingsSavedEvent()
Return: void
Modifiers: public, static
Summary: Raise any pending OnPlugInSettingsSaved events, the events are normally queued while a command is running and fired while Rhino is in an idle state.  Calling this method will raise any pending changed events regardless of Rhino's current idle state or if a command is running.

Method: Rhino.PlugIns.PlugIn.SavePluginSettings(System.Guid plugInId)
Return: void
Modifiers: public, static

Method: Rhino.PlugIns.PlugIn.SetLoadProtection(System.Guid pluginId, bool loadSilently)
Return: void
Modifiers: public, static
Summary: Set load protection state for a certain plug-in

Method: Rhino.PlugIns.PlugIn.AskUserForLicense(LicenseBuildType productBuildType, bool standAlone, string textMask, object parentWindow, ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate onLeaseChangedDelegate)
Return: bool
Modifiers: protected

Method: Rhino.PlugIns.PlugIn.CommandSettings(string name)
Return: PersistentSettings
Modifiers: public

Method: Rhino.PlugIns.PlugIn.CreateCommands()
Return: void
Modifiers: protected, virtual
Summary: Called right after plug-in is created and is responsible for creating all of the commands in a given plug-in.  The base class implementation Constructs an instance of every publicly exported command class in your plug-in's assembly.

Method: Rhino.PlugIns.PlugIn.DisplayHelp(System.IntPtr windowHandle)
Return: bool
Modifiers: public, virtual
Summary: Called by Rhino if AddToHelpMenu is True and menu item associated with this plug-in is selected.
Parameter: windowHandle (System.IntPtr)
Parameter Summary: Native Window handle of the active Rhino interface.

Method: Rhino.PlugIns.PlugIn.DocumentPropertiesDialogPages(RhinoDoc doc, List<OptionsDialogPage> pages)
Return: void
Modifiers: protected, virtual
Summary: Override this function if you want to extend the document properties sections of the options dialog. This function is called whenever the user brings up the Options dialog.
Parameter: doc (RhinoDoc)
Parameter Summary: document that the pages are set up for
Parameter: pages (List<OptionsDialogPage>)
Parameter Summary: list of pages to add your custom options dialog page(s) to.

Method: Rhino.PlugIns.PlugIn.GetCommands()
Return: Commands.Command[]
Modifiers: public
Summary: All of the commands associated with this plug-in.

Method: Rhino.PlugIns.PlugIn.GetLicense(LicenseBuildType productBuildType, ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate leaseChangedDelegate)
Return: bool
Modifiers: protected
Summary: Verifies that there is a valid product license for your plug-in, using the Rhino licensing system. If the plug-in is installed as a standalone node, the locally installed license will be validated. If the plug-in is installed as a network node, a loaner license will be requested by the system's assigned Zoo server. If the Zoo server finds and returns a license, then this license will be validated. If no license is found, then the user will be prompted to provide a license key, which will be validated.
Parameter: productBuildType (LicenseBuildType)
Parameter Summary: The product build contentType required by your plug-in.
Parameter: validateProductKeyDelegate (ValidateProductKeyDelegate)
Parameter Summary: Since the Rhino licensing system knows nothing about your product license, you will need to validate the product license provided by the Rhino licensing system. This is done by supplying a callback function, or delegate, that can be called to perform the validation.
Parameter: leaseChangedDelegate (OnLeaseChangedDelegate)
Parameter Summary: Called by the ZooClient when the cloud zoo lease is changed.

Method: Rhino.PlugIns.PlugIn.GetLicense(LicenseCapabilities licenseCapabilities, string textMask, ValidateProductKeyDelegate validateProductKeyDelegate, OnLeaseChangedDelegate leaseChangedDelegate)
Return: bool
Modifiers: protected
Summary: Verifies that there is a valid product license for your plug-in, using the Rhino licensing system. If the plug-in is installed as a standalone node, the locally installed license will be validated. If the plug-in is installed as a network node, a loaner license will be requested by the system's assigned Zoo server. If the Zoo server finds and returns a license, then this license will be validated. If no license is found, then the user will be prompted to provide a license key, which will be validated.
Parameter: licenseCapabilities (LicenseCapabilities)
Parameter Summary: In the event that a license was not found, or if the user wants to change the way your plug-in is licenses, then provide what capabilities your license has by using this enumeration flag.
Parameter: textMask (string)
Parameter Summary: In the event that the user needs to be asked for a license, then you can provide a text mask, which helps the user to distinguish between proper and improper user input of your license code. Note, if you do not want to use a text mask, then pass in a None value for this parameter. For more information on text masks, search MSDN for the System.Windows.Forms.MaskedTextBox class.
Parameter: validateProductKeyDelegate (ValidateProductKeyDelegate)
Parameter Summary: Since the Rhino licensing system knows nothing about your product license, you will need to validate the product license provided by the Rhino licensing system. This is done by supplying a callback function, or delegate, that can be called to perform the validation.
Parameter: leaseChangedDelegate (OnLeaseChangedDelegate)
Parameter Summary: Called by the ZooClient when the cloud zoo lease is changed.

Method: Rhino.PlugIns.PlugIn.GetLicenseOwner(out string registeredOwner, out string registeredOrganization)
Return: bool
Modifiers: protected
Summary: Get the customer name and organization used when entering the product license.

Method: Rhino.PlugIns.PlugIn.GetPlugInObject()
Return: object
Modifiers: public, virtual

Method: Rhino.PlugIns.PlugIn.Icon(System.Drawing.Size size)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Returns the plug-in's icon in bitmap form.
Parameter: size (System.Drawing.Size)
Parameter Summary: The desired size in pixels.

Method: Rhino.PlugIns.PlugIn.IsTextureSupported(RenderTexture texture)
Return: bool
Modifiers: public, virtual
Summary: Returns True if this renderer can render the texture natively without needing it to be baked into a bitmap, False otherwise. By default, returns False for all textures.

Method: Rhino.PlugIns.PlugIn.ObjectPropertiesPages(List<ObjectPropertiesPage> pages)
Return: void
Modifiers: protected, virtual
Summary: Override this function is you want to extend the object properties dialog

Method: Rhino.PlugIns.PlugIn.ObjectPropertiesPages(ObjectPropertiesPageCollection collection)
Return: void
Modifiers: protected, virtual
Summary: Override this function is you want to extend the object properties dialog. This method will be called each time a new document is created for each instance of a object properties panel.  On Windows there will be a single panel per document but on Mac there may be many properties panel per document.
Parameter: collection (ObjectPropertiesPageCollection)
Parameter Summary: Add custom pages by calling collection.Add

Method: Rhino.PlugIns.PlugIn.OnLoad(ref string errorMessage)
Return: LoadReturnCode
Modifiers: protected, virtual
Summary: Is called when the plug-in is being loaded.
Parameter: errorMessage (string)
Parameter Summary: If a load error is returned and this string is set. This string is the error message that will be reported back to the user.

Method: Rhino.PlugIns.PlugIn.OnShutdown()
Return: void
Modifiers: protected, virtual

Method: Rhino.PlugIns.PlugIn.OptionsDialogPages(List<OptionsDialogPage> pages)
Return: void
Modifiers: protected, virtual
Summary: Override this function if you want to extend the options dialog. This function is called whenever the user brings up the Options dialog.
Parameter: pages (List<OptionsDialogPage>)
Parameter Summary: list of pages to add your custom options dialog page(s) to.

Method: Rhino.PlugIns.PlugIn.ReadDocument(RhinoDoc doc, FileIO.BinaryArchiveReader archive, FileIO.FileReadOptions options)
Return: void
Modifiers: protected, virtual
Summary: Called whenever a Rhino document is being loaded and plug-in user data was encountered written by a plug-in with this plug-in's GUID.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document that is being loaded.
Parameter: archive (FileIO.BinaryArchiveReader)
Parameter Summary: OpenNURBS file archive object Rhino is using to read this file. Use BinaryArchiveReader.Read*() functions to read plug-in data.  If any BinaryArchive.Read*() functions throws an exception then archive.ReadErrorOccurve will be True and you should immediately return.
Parameter: options (FileIO.FileReadOptions)
Parameter Summary: Describes what is being written.

Method: Rhino.PlugIns.PlugIn.RegisterCommand(Rhino.Commands.Command command)
Return: bool
Modifiers: protected

Method: Rhino.PlugIns.PlugIn.ResetMessageBoxes()
Return: void
Modifiers: protected, virtual

Method: Rhino.PlugIns.PlugIn.ReturnLicense()
Return: bool
Modifiers: protected
Summary: Returns, or releases, a product license that was obtained from the Rhino licensing system. Note, most plug-ins do not need to call this as the Rhino licensing system will return all licenses when Rhino shuts down.

Method: Rhino.PlugIns.PlugIn.SaveSettings()
Return: void
Modifiers: public
Summary: Write settings to disk which will raise a <b>SettingsSaved</b>  event.

Method: Rhino.PlugIns.PlugIn.SetLicenseCapabilities(string textMask, LicenseCapabilities capabilities, System.Guid licenseId)
Return: void
Modifiers: protected

Method: Rhino.PlugIns.PlugIn.ShouldCallWriteDocument(FileIO.FileWriteOptions options)
Return: bool
Modifiers: protected, virtual
Summary: Called whenever a Rhino is about to save a .3dm file. If you want to save plug-in document data when a model is saved in a version 5 .3dm file, then you must override this function to return True and you must override WriteDocument().
Parameter: options (FileIO.FileWriteOptions)
Parameter Summary: The file write options, such as "include preview image" and "include render meshes".

Method: Rhino.PlugIns.PlugIn.WriteDocument(RhinoDoc doc, FileIO.BinaryArchiveWriter archive, FileIO.FileWriteOptions options)
Return: void
Modifiers: protected, virtual
Summary: Called when Rhino is saving a .3dm file to allow the plug-in to save document user data.
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document instance that is being saved.
Parameter: archive (FileIO.BinaryArchiveWriter)
Parameter Summary: OpenNURBS file archive object Rhino is using to write the file. Use BinaryArchiveWriter.Write*() functions to write plug-in data. OR use the ArchivableDictionary  If any BinaryArchiveWriter.Write*() functions throw an exception, then archive.WriteErrorOccured will be True and you should immediately return. Setting archive.WriteErrorOccured to True will cause Rhino to stop saving the file.
Parameter: options (FileIO.FileWriteOptions)
Parameter Summary: The file write options, such as "include preview image" and "include render meshes".

Class: Rhino.PlugIns.PlugIn.UnknownUserDataEventArgs
Summary: Event argument passed to the <b>Rhino.PlugIns.PlugIn.UnknownUserData</b> event.

Property: Rhino.PlugIns.PlugIn.UnknownUserDataEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.PlugIns.PlugIn.UnknownUserDataEventArgs.PlugInId
Return: Guid
Modifiers: public
Accessors: get

Class: Rhino.PlugIns.PlugInDescriptionAttribute
Summary: Rhino plug-in developer information attributes.

Constructor: Rhino.PlugIns.PlugInDescriptionAttribute.PlugInDescriptionAttribute(DescriptionType descriptionType, string value)

Property: Rhino.PlugIns.PlugInDescriptionAttribute.DescriptionType
Return: DescriptionType
Modifiers: public
Accessors: get

Property: Rhino.PlugIns.PlugInDescriptionAttribute.Value
Return: string
Modifiers: public
Accessors: get

Class: Rhino.PlugIns.PlugInInfo
Summary: Contains detailed information about a Rhino plug-in.

Property: Rhino.PlugIns.PlugInInfo.Address
Return: string
Modifiers: public
Summary: Returns the address of the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.CommandNames
Return: string[]
Modifiers: public
Summary: Returns a plug-in's English command names.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Country
Return: string
Modifiers: public
Summary: Returns the country of the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Description
Return: string
Modifiers: public
Summary: Returns the plug-in's description.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Email
Return: string
Modifiers: public
Summary: Returns the email address of the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Fax
Return: string
Modifiers: public
Summary: Returns the fax number of the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.FileName
Return: string
Modifiers: public
Summary: Returns the plug-in's file name.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.FileTypeDescriptions
Return: string[]
Modifiers: public
Summary: Returns the description of supported file types for file import and file export plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.FileTypeExtensions
Return: string[]
Modifiers: public
Summary: Returns the file types extensions supported for file import and file export plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Id
Return: Guid
Modifiers: public
Summary: Returns the plug-in's Id.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.IsDotNet
Return: bool
Modifiers: public
Summary: Returns True if the plug-in is based on .NET, False otherwise.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.IsLoaded
Return: bool
Modifiers: public
Summary: Returns True if the plug-in is loaded, False otherwise.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Name
Return: string
Modifiers: public
Summary: Returns the plug-in's name.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Organization
Return: string
Modifiers: public
Summary: Returns the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Phone
Return: string
Modifiers: public
Summary: Returns the phone number of the organization or company that created the plug-in.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.PlugInLoadTime
Return: PlugInLoadTime
Modifiers: public
Summary: Returns the plug-in's load time.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.PlugInType
Return: PlugInType
Modifiers: public
Summary: Returns the plug-in type.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.RegistryPath
Return: string
Modifiers: public
Summary: Returns the plug-in's Windows Registry path.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.ShipsWithRhino
Return: bool
Modifiers: public
Summary: Returns True if the plug-in ships with Rhino, False otherwise.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.UpdateUrl
Return: string
Modifiers: public
Summary: Returns the web site, or URL, were an updated version of the plug-in can be found.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.Version
Return: string
Modifiers: public
Summary: Returns the plug-in's version.
Accessors: get

Property: Rhino.PlugIns.PlugInInfo.WebSite
Return: string
Modifiers: public
Summary: Returns the web site, or URL, of the organization or company that created the plug-in.
Accessors: get

Method: Rhino.PlugIns.PlugInInfo.Icon(System.Drawing.Size size)
Return: System.Drawing.Bitmap
Modifiers: public
Summary: Returns the plug-in's icon in bitmap form.

Method: Rhino.PlugIns.PlugInInfo.IsLoadProtected(out bool loadSilently)
Return: bool
Modifiers: public
Summary: Returns the load protection state for a plug-in
Parameter: loadSilently (bool)
Parameter Summary: The plug-in's load silently state.

Class: Rhino.PlugIns.PreviewNotification

Method: Rhino.PlugIns.PreviewNotification.NotifyIntermediateUpdate(RenderWindow rw)
Return: void
Modifiers: public

Class: Rhino.PlugIns.RenderPlugIn
Summary: A Rhino rendering plugin; applies materials, textures, and lights to a scene to produce rendered images.

Constructor: Rhino.PlugIns.RenderPlugIn.RenderPlugIn()

Property: Rhino.PlugIns.RenderPlugIn.InitialChannelToDisplay
Return: Guid
Modifiers: protected, virtual
Accessors: get

Property: Rhino.PlugIns.RenderPlugIn.PerferBasicContent
Return: bool
Modifiers: public
Summary: Set to True if you would like Rhino to quickly create a basic render content in response to 'Create New' commands. Set to False if you would prefer Rhino to display the render content chooser dialog.
Accessors: get set

Property: Rhino.PlugIns.RenderPlugIn.SupportedChannels
Return: Guid[]
Modifiers: protected, virtual
Summary: Override to communicate that the renderer supports more channels beside the default channels RGBA, Depth, Normal, Albedo. See RenderWindow.StandardChannels. RenderWindow.ChannelId can be used to get the GUIDs for the channels to support
Accessors: get

Property: Rhino.PlugIns.RenderPlugIn.SupportsEditProperties
Return: bool
Modifiers: protected, virtual
Summary: Override this property and return True if your plug-in supports decals and overrides <b>ShowDecalProperties</b>
Accessors: get

Method: Rhino.PlugIns.RenderPlugIn.CurrentRendererSupportsFeature(RenderFeature feature)
Return: bool
Modifiers: public, static

Method: Rhino.PlugIns.RenderPlugIn.AllowChooseContent(RenderContent content)
Return: bool
Modifiers: protected, virtual
Summary: Default implementation returns True which means the content can be picked from the content browser by the user. Override this method and return False if you don't want to allow a certain content contentType to be picked from the content browser while your render engine is current.
Parameter: content (RenderContent)
Parameter Summary: A render context.

Method: Rhino.PlugIns.RenderPlugIn.CreatePreview(CreatePreviewEventArgs args)
Return: void
Modifiers: protected, virtual
Summary: Creates the preview bitmap that will appear in the content editor's thumbnail display when previewing materials and environments. If this function is not overridden or the PreviewImage is not set on the arguments, then the internal OpenGL renderer will generate a simulation of the content.  This function is called with four different preview quality settings. The first quality level of RealtimeQuick is called on the main thread and needs to be drawn as fast as possible.  This function is called with the other three quality settings on a separate thread and are meant for generating progressively refined preview.
Parameter: args (CreatePreviewEventArgs)
Parameter Summary: Event argument with several preview option state properties.

Method: Rhino.PlugIns.RenderPlugIn.CreateTexture2dPreview(CreateTexture2dPreviewEventArgs args)
Return: void
Modifiers: protected, virtual
Summary: Creates the preview bitmap that will appear in the content editor's thumbnail display when previewing textures in 2d (UV) mode.  If this function is not overridden or the PreviewImage is not set on the arguments, then the internal OpenGL renderer will generate a simulation.
Parameter: args (CreateTexture2dPreviewEventArgs)
Parameter Summary: Event argument with several preview option state properties.

Method: Rhino.PlugIns.RenderPlugIn.CustomChannelName(System.Guid id)
Return: string
Modifiers: protected, virtual
Summary: Return the localized name of your custom channel.

Method: Rhino.PlugIns.RenderPlugIn.EnableAssignMaterialButton()
Return: bool
Modifiers: public, virtual
Summary: Called to enable/disable the "Material" button located on the "Material" tab in the Properties and Layer dialog boxes.  The default return value is False which will disable the button.  If the button is disabled then the OnAssignMaterial function is never called.

Method: Rhino.PlugIns.RenderPlugIn.EnableCreateMaterialButton()
Return: bool
Modifiers: public, virtual
Summary: Called to enable/disable the "New" button located on the "Material" in the  Properties and Layer dialog boxes.  The default return value is False which will disable the button.  If the button is disabled then the OnEditMaterial function is never called.

Method: Rhino.PlugIns.RenderPlugIn.EnableEditMaterialButton(RhinoDoc doc, DocObjects.Material material)
Return: bool
Modifiers: public, virtual
Summary: Called to enable/disable the "Edit" button located on the "Material" in the Properties and Layer dialog boxes.  The default return value is False  which will disable the button.  If the button is disabled then the OnEditMaterial function is never called.

Method: Rhino.PlugIns.RenderPlugIn.GetRenderSettingsSections()
Return: List<Guid>
Modifiers: public
Summary: This function returns a list of Guids for the render settings pages that should be displayed.

Method: Rhino.PlugIns.RenderPlugIn.InitializeDecalProperties(ref List<NamedValue> properties)
Return: void
Modifiers: protected, virtual
Summary: Initialize your custom decal properties here.  The input list will be empty - add your default named property values and return.
Parameter: properties (List<NamedValue>)
Parameter Summary: A list of named values that will be stored on the object the input values are the current ones, you should modify the values after the dialog closes.

Method: Rhino.PlugIns.RenderPlugIn.OnAssignMaterial(System.IntPtr parent, RhinoDoc doc, ref DocObjects.Material material)
Return: bool
Modifiers: public, virtual
Summary: This function is called by the Object Properties and Layer Control dialogs when the "Material" button is pressed in the "Render" tab. This is only called if EnableAssignMaterialButton returns true.

Method: Rhino.PlugIns.RenderPlugIn.OnCreateMaterial(System.IntPtr parent, RhinoDoc doc, ref DocObjects.Material material)
Return: bool
Modifiers: public, virtual
Summary: This function is called by the Object Properties and Layer Control dialogs when the "New" button is pressed in the "Material" tab.  This is only called if EnableCreateMaterialButton returns true.

Method: Rhino.PlugIns.RenderPlugIn.OnEditMaterial(System.IntPtr parent, RhinoDoc doc, ref DocObjects.Material material)
Return: bool
Modifiers: public, virtual
Summary: This function is called by the Object Properties and Layer Control dialogs when the "Edit" button is pressed in the "Material" tab.  This is only called if EnableEditMaterialButton returns true. A return value of True means the material has been updated.

Method: Rhino.PlugIns.RenderPlugIn.OnSetCurrent(bool current)
Return: void
Modifiers: protected, virtual
Summary: This plug-in (has become)/(is no longer) the current render plug-in
Parameter: current (bool)
Parameter Summary: If True then this plug-in is now the current render plug-in otherwise it is no longer the current render plug-in.

Method: Rhino.PlugIns.RenderPlugIn.PreviewRenderType()
Return: PreviewRenderTypes
Modifiers: protected, virtual
Summary: Tell what kind of preview rendering your renderer supports.

Method: Rhino.PlugIns.RenderPlugIn.RegisterCustomRenderSaveFileTypes(CustomRenderSaveFileTypes saveFileTypes)
Return: void
Modifiers: protected, virtual
Summary: Override this method to add custom file types to the render window save file dialog.

Method: Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(RenderPanels panels)
Return: void
Modifiers: protected, virtual
Summary: Override this method and call <b>RenderPanels.RegisterPanel(PlugIn, RenderPanelType, Type, string, bool, bool)</b>  to add custom render UI to the render output window.

Method: Rhino.PlugIns.RenderPlugIn.RegisterRenderTabs(RenderTabs tabs)
Return: void
Modifiers: protected, virtual
Summary: Override this method and call <b>RenderTabs.RegisterTab(PlugIn, Type, Guid, string, Icon)</b>  to add custom tabs to the render output window

Method: Rhino.PlugIns.RenderPlugIn.Render(RhinoDoc doc, Commands.RunMode mode, bool fastPreview)
Return: Commands.Result
Modifiers: protected, abstract
Summary: Called by Render and RenderPreview commands if this plug-in is set as the default render engine.
Parameter: doc (RhinoDoc)
Parameter Summary: A document.
Parameter: mode (Commands.RunMode)
Parameter Summary: A command running mode.
Parameter: fastPreview (bool)
Parameter Summary: If true, lower quality faster render expected.

Method: Rhino.PlugIns.RenderPlugIn.RenderContentSerializers()
Return: IEnumerable<RenderContentSerializer>
Modifiers: protected, virtual
Summary: Called by Rhino when it is time to register RenderContentSerializer derived classes.  Override this method and return an array of an instance of each serialize custom content object you wish to add.

Method: Rhino.PlugIns.RenderPlugIn.RenderOptionsDialogPage(RhinoDoc doc)
Return: OptionsDialogPage
Modifiers: protected, virtual
Summary: Override this method to replace the render properties page in the Rhino document properties dialog.  The default implementation returns null which means just use the default Rhino page.
Parameter: doc (RhinoDoc)
Parameter Summary: The document properties to edit.

Method: Rhino.PlugIns.RenderPlugIn.RenderSettingsCustomSections(List<ICollapsibleSection> sections)
Return: void
Modifiers: public, virtual
Summary: Override this function to provide custom sections for the render settings panel that are displayed when your plug-in is the current render plug-in.
Parameter: sections (List<ICollapsibleSection>)
Parameter Summary: Create your sections and return a list of them

Method: Rhino.PlugIns.RenderPlugIn.RenderSettingsSections()
Return: List<Guid>
Modifiers: protected, virtual
Summary: Override this method to provide the UUIDs of all sections that should be displayed in the Render Settings tab when this is the current renderer.The default implementation adds all the RDK's built-in Render Settings sections. These UUIDs start with the prefix uuidRenderSettingsSection'. They can be found in RhRdkUuids.h

Method: Rhino.PlugIns.RenderPlugIn.RenderWindow(RhinoDoc doc, Commands.RunMode modes, bool fastPreview, Display.RhinoView view, Rectangle rect, bool inWindow, bool blowup)
Return: Commands.Result
Modifiers: protected, virtual

Method: Rhino.PlugIns.RenderPlugIn.RenderWindow(RhinoDoc doc, Commands.RunMode modes, bool fastPreview, Display.RhinoView view, Rectangle rect, bool inWindow)
Return: Commands.Result
Modifiers: protected, virtual
Summary: This function is obsolete and only exists for legacy purposes. Do not override this function - prefer overriding the version with the blowup parameter.

Method: Rhino.PlugIns.RenderPlugIn.ShowDecalProperties(ref List<NamedValue> properties)
Return: bool
Modifiers: protected, virtual
Summary: Override this function to handle showing a modal dialog with your plug-in's custom decal properties.  You will be passed the current properties for the object being edited.  The defaults will be set in InitializeDecalProperties.
Parameter: properties (List<NamedValue>)
Parameter Summary: A list of named values that will be stored on the object the input values are the current ones, you should modify the values after the dialog closes.

Method: Rhino.PlugIns.RenderPlugIn.SunCustomSections(List<ICollapsibleSection> sections)
Return: void
Modifiers: public, virtual
Summary: Override this function to provide custom sections for the sun panel that are displayed when your plug-in is the current render plug-in.
Parameter: sections (List<ICollapsibleSection>)
Parameter Summary: Create your sections and return a list of them

Method: Rhino.PlugIns.RenderPlugIn.SupportedOutputTypes()
Return: List<FileIO.FileType>
Modifiers: protected, virtual
Summary: Returns a list of output types which your renderer can write.
The default implementation returns BMP, JPG, PNG, TIF, TGA, HDR, EXR and RIMAGE.

Method: Rhino.PlugIns.RenderPlugIn.SupportsFeature(RenderFeature feature)
Return: bool
Modifiers: protected, virtual
Summary: Determines if your renderer supports a specific feature.
Parameter: feature (RenderFeature)
Parameter Summary: A feature to be controlled.

Method: Rhino.PlugIns.RenderPlugIn.UiContentTypes()
Return: List<Guid>
Modifiers: protected, virtual
Summary: Override this method to provide the UUIDs of all content types that should be presented to the user in the types combo box or the[+] button types menu.The default implementation adds only RDK's built-in types. Rhino automatically adds types in the most efficient way to minimize the list length.  If you override this method, you may call the base class first to add the built-in types, a separator will be inserted at the end of the standard list followed by your own types.  You may omit the base class call and only chosen types yourself, followed by a separator and your own types.  A 'More Types...' item is automatically added when needed by Rhino.  Specify a separator by adding uuidUiContentType_Separator.

# Namespace: Rhino.Render

Class: Rhino.Render.AddCustomUISections
Summary: This class contains the event to add custom ui sections when the content ui is created.

Constructor: Rhino.Render.AddCustomUISections.AddCustomUISections()
Summary: Initializes a new instance of the AddCustomUISections class

Class: Rhino.Render.AddCustomUISectionsEventArgs
Summary: Used as Rhino.Render Custom Events args.

Property: Rhino.Render.AddCustomUISectionsEventArgs.EventType
Return: Guid
Modifiers: public
Summary: The type of the event.
Accessors: get

Property: Rhino.Render.AddCustomUISectionsEventArgs.ExpandableContentUI
Return: ExpandableContentUI
Modifiers: public
Accessors: get

Class: Rhino.Render.AsyncRenderContext
Summary: \ingroup rhino_render Inherit from AsyncRenderContext to be able to create asynchronous render engine implementations through RhinoCommon.

Constructor: Rhino.Render.AsyncRenderContext.AsyncRenderContext()

Property: Rhino.Render.AsyncRenderContext.Cancel
Return: bool
Modifiers: protected
Summary: If set to True rendering should be stopped. Is set to True only by StopRendering().
Accessors: get set

Property: Rhino.Render.AsyncRenderContext.RenderThread
Return: Thread
Modifiers: public
Summary: Holder for render thread, that gets set through StartRenderThread()
Accessors: get set

Property: Rhino.Render.AsyncRenderContext.RenderWindow
Return: RenderWindow
Modifiers: public
Summary: Handle to the RenderWindow for the instance of this class. This is a convenience property for implementors to use.
Accessors: get set

Method: Rhino.Render.AsyncRenderContext.DeleteThis()
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.AsyncRenderContext.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.AsyncRenderContext.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.AsyncRenderContext.JoinRenderThread()
Return: void
Modifiers: public
Summary: Join the render thread, then set to null;

Method: Rhino.Render.AsyncRenderContext.StartRenderThread(ThreadStart threadStart, string threadName)
Return: bool
Modifiers: public
Summary: Start a new render thread with given function.
Parameter: threadStart (ThreadStart)
Parameter Summary: Function to start in render thread
Parameter: threadName (string)
Parameter Summary: Name for the thread

Method: Rhino.Render.AsyncRenderContext.StopRendering()
Return: void
Modifiers: public, virtual
Summary: Override StopRendering if you need to do additional tasks besides having Cancel set to true.  Note: you should always base.StopRendering() in your overriding implementation.

Class: Rhino.Render.CachedTextureCoordinates
Summary: Used for cached texture coordinates

Property: Rhino.Render.CachedTextureCoordinates.Count
Return: int
Modifiers: public
Summary: Number of cached coordinates.
Accessors: get

Property: Rhino.Render.CachedTextureCoordinates.Dim
Return: int
Modifiers: public
Summary: Coordinate dimension: 2 = UV, 3 = UVW
Accessors: get

Property: Rhino.Render.CachedTextureCoordinates.IsReadOnly
Return: bool
Modifiers: public
Summary: This collection is always read-only
Accessors: get

Property: Rhino.Render.CachedTextureCoordinates.MappingId
Return: Guid
Modifiers: public
Summary: The texture mapping Id.
Accessors: get

Property: Rhino.Render.CachedTextureCoordinates.this[int index]
Return: Point3d
Modifiers: public
Summary: Gets the element at the specified index. Never call the set method, it will always throw a NotSupportedException because this list is read-only.

Method: Rhino.Render.CachedTextureCoordinates.Contains(Point3d item)
Return: bool
Modifiers: public
Summary: Determines whether this collection contains a specific value.

Method: Rhino.Render.CachedTextureCoordinates.CopyTo(Point3d[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the elements of the this collection to an System.Array, starting at a particular System.Array index.
Parameter: array (Point3d[])
Parameter Summary: The one-dimensional System.Array that is the destination of the elements copied from this collection. The System.Array must have zero-based indexing.
Parameter: arrayIndex (int)
Parameter Summary: The zero-based index in array at which copying begins.

Method: Rhino.Render.CachedTextureCoordinates.GetEnumerator()
Return: IEnumerator<Point3d>
Modifiers: public
Summary: Returns an enumerator that iterates through this collection.

Method: Rhino.Render.CachedTextureCoordinates.IndexOf(Point3d item)
Return: int
Modifiers: public
Summary: Determines the index of a specific point in this collection.
Parameter: item (Point3d)
Parameter Summary: The point (UV or UVW) to locate in this collection.

Method: Rhino.Render.CachedTextureCoordinates.TryGetAt(int index, out double u, out double v, out double w)
Return: bool
Modifiers: public
Summary: Use this method to iterate the cached texture coordinate array.
Parameter: index (int)
Parameter Summary: Index for the vertex to fetch.
Parameter: u (double)
Parameter Summary: Output parameter which will receive the U value.
Parameter: v (double)
Parameter Summary: Output parameter which will receive the V value.
Parameter: w (double)
Parameter Summary: Output parameter which will receive the W value, this is only meaningful if <b>Dim</b> is 3.

Class: Rhino.Render.City
Summary: City

Property: Rhino.Render.City.Latitude
Return: double
Modifiers: public
Summary: Gets latitude of city.
Accessors: get

Property: Rhino.Render.City.Longitude
Return: double
Modifiers: public
Summary: Gets longitude of city.
Accessors: get

Property: Rhino.Render.City.Name
Return: String
Modifiers: public
Summary: Gets name of city.
Accessors: get

Property: Rhino.Render.City.TimeZone
Return: double
Modifiers: public
Summary: Gets time zone of city.
Accessors: get

Method: Rhino.Render.City.Cities()
Return: int
Modifiers: public, static
Summary: Returns number of available cities.

Method: Rhino.Render.City.CityAt(int index)
Return: City
Modifiers: public, static
Summary: Returns city at given index.
Parameter: index (int)
Parameter Summary: index.

Method: Rhino.Render.City.FindNearest(double latitude, double longitude)
Return: City
Modifiers: public, static
Summary: Finds nearest city of specified input parameters.
Parameter: latitude (double)
Parameter Summary: latitude.
Parameter: longitude (double)
Parameter Summary: longitude.

Class: Rhino.Render.ContentCollectionIterator
Summary: An iterator for the RenderContentCollection

Constructor: Rhino.Render.ContentCollectionIterator.ContentCollectionIterator(IntPtr pCollection)

Property: Rhino.Render.ContentCollectionIterator.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.ContentCollectionIterator.DeleteThis()
Return: void
Modifiers: public

Method: Rhino.Render.ContentCollectionIterator.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.ContentCollectionIterator.First()
Return: RenderContent
Modifiers: public

Method: Rhino.Render.ContentCollectionIterator.Next()
Return: RenderContent
Modifiers: public

Class: Rhino.Render.ContentUndoBlocker

Constructor: Rhino.Render.ContentUndoBlocker.ContentUndoBlocker()
Summary: Constructs a ContentUndoBlocker object inside a using block to block undo when modifying a RenderContent while a ContentUndoHelper is active. Alternatively - create the ContentUndoBlocker and explicitly call Dispose when you are done.

Method: Rhino.Render.ContentUndoBlocker.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.ContentUndoBlocker.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.Render.ContentUndoHelper
Summary: Content undo helper to be used with "using {}" to enclose a block of changes.

Constructor: Rhino.Render.ContentUndoHelper.ContentUndoHelper(RhinoDoc doc, String description)
Summary: DEPRECATED: Constructs a ContentUndoHelper object inside a using block to handle undo when modifying a RenderContent or - alternatively - create the ContentUndoHelper and explicitly call Dispose when you are done.

Constructor: Rhino.Render.ContentUndoHelper.ContentUndoHelper(RhinoDoc doc)
Summary: Constructs a ContentUndoHelper object inside a using block to handle undo when modifying a RenderContent or - alternatively - create the ContentUndoHelper and explicitly call Dispose when you are done.

Method: Rhino.Render.ContentUndoHelper.AddContent(RenderContent content, RenderContent parent)
Return: bool
Modifiers: public
Summary: Call this *after* adding a content. Undo will cause the content to be deleted.
Parameter: content (RenderContent)
Parameter Summary: Content you just added to the ContentList.
Parameter: parent (RenderContent)
Parameter Summary: is the content that will become the parent of the new content, or None if the new content is being added at the top level (i.e., not a child).

Method: Rhino.Render.ContentUndoHelper.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.ContentUndoHelper.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.ContentUndoHelper.ModifyContent(RenderContent content)
Return: bool
Modifiers: public
Summary: Call this before modifying or deleting a content. Undo will cause the content to be restored.
Parameter: content (RenderContent)
Parameter Summary: Content you are about to modify.

Method: Rhino.Render.ContentUndoHelper.TweakContent(RenderContent content, System.String parameterName)
Return: bool
Modifiers: public
Summary: Call this before tweaking a single content parameter. Undo will cause the parameter to be restored.
Parameter: content (RenderContent)
Parameter Summary: The render content
Parameter: parameterName (System.String)
Parameter Summary: The parameter name you are about to change.

Class: Rhino.Render.ContentUuids
Summary: Content Guids of RenderContent provided by the RDK SDK.  These Guids can be used to check against RenderContent.TypeId.

Constructor: Rhino.Render.ContentUuids.ContentUuids()
Summary: Initializes a new instance of the ContentUuids class

Property: Rhino.Render.ContentUuids.AddTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.AdvancedDotTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BasicEnvironmentCCI
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BasicEnvironmentType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BasicMaterialCCI
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BasicMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BitmapTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BlendMaterialCCI
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BlendMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.BlendTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.CompositeMaterialCCI
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.CompositeMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.CrossHatchBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.CubeMapTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.DefaultEnvironmentInstance
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.DefaultMaterialInstance
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.DisplayAttributeMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.DotBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.DoubleSidedMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.EmissionMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.ExposureTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.EXRTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.FBmTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GemMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GlassMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GradientTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GraniteTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GridTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.GritBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.HatchBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.HDRTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.LeatherBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.MarbleTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.MaskTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.MetalMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.MultiplyTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.NoiseTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PaintMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PerlinMarbleTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PerturbingTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PhysicallyBasedMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PhysicalSkyTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PictureMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PlasterMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.PlasticMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.ProjectionChangerTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.RealtimeDisplayMaterialType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.ResampleTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.SimpleBitmapTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.SingleColorTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.SpeckleBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.StuccoTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.Texture2DCheckerTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.Texture3DCheckerTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.TextureAdjustmentTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.TileTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.TurbulenceTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.V8BlendMaterialType
Return: Guid
Modifiers: public, static
Summary: Rhino V8 Blend material type Guid
Accessors: get

Property: Rhino.Render.ContentUuids.WavesTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.WoodBumpTexture
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ContentUuids.WoodTextureType
Return: Guid
Modifiers: public, static
Accessors: get

Class: Rhino.Render.ConvertibleExtensions
Summary: Extension methods for IConvertible that work when an object is a Variant.

Constructor: Rhino.Render.ConvertibleExtensions.ConvertibleExtensions()
Summary: Initializes a new instance of the ConvertibleExtensions class

Method: Rhino.Render.ConvertibleExtensions.ToColor4f(this System.IConvertible variant)
Return: Color4f
Modifiers: public, static

Method: Rhino.Render.ConvertibleExtensions.ToVector2d(this System.IConvertible variant)
Return: Vector2d
Modifiers: public, static

Method: Rhino.Render.ConvertibleExtensions.ToVector3d(this System.IConvertible variant)
Return: Vector3d
Modifiers: public, static

Class: Rhino.Render.CreatePreviewEventArgs
Summary: Used in RenderPlugIn virtual CreatePreview function

Property: Rhino.Render.CreatePreviewEventArgs.Cancel
Return: bool
Modifiers: public
Summary: Get set by Rhino if the preview generation should be canceled for this
Accessors: get set

Property: Rhino.Render.CreatePreviewEventArgs.ContentKind
Return: RenderContentKind
Modifiers: public
Summary: Description of content that preview is being generated for.
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.ContentTypeId
Return: Guid
Modifiers: public
Summary: The class Id of content that preview is being generated for.
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Environment
Return: RenderEnvironment
Modifiers: public
Summary: The environment that the previewed object is rendered in.
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Id
Return: int
Modifiers: public
Summary: Unique Id for this scene.
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Lights
Return: Light>
Modifiers: public
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Objects
Return: List<SceneObject>
Modifiers: public
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.PreviewContent
Return: RenderContent
Modifiers: public
Summary: Obsolete, will return always null
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.PreviewImage
Return: Bitmap
Modifiers: public
Summary: Initially null.  If this image is set, then this image will be used for the preview.  If never set, the default internal simulation preview will be used.
Accessors: get set

Property: Rhino.Render.CreatePreviewEventArgs.PreviewImageSize
Return: Size
Modifiers: public
Summary: Pixel size of the image that is being requested for the preview scene
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.PreviewNotifier
Return: PreviewNotification
Modifiers: public
Accessors: get set

Property: Rhino.Render.CreatePreviewEventArgs.Quality
Return: PreviewSceneQuality
Modifiers: public
Summary: Quality of the preview image that is being requested for the preview scene
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Reason
Return: CreatePreviewReason
Modifiers: public
Summary: Reason the preview is getting generated
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.Viewport
Return: ViewportInfo
Modifiers: public
Accessors: get

Method: Rhino.Render.CreatePreviewEventArgs.SkipInitialisation()
Return: void
Modifiers: public
Summary: Call this if you don't want the argument to handle data initialisation.  This is for use with the ChangeQueue

Class: Rhino.Render.CreatePreviewEventArgs.SceneObject

Property: Rhino.Render.CreatePreviewEventArgs.SceneObject.Material
Return: RenderMaterial
Modifiers: public
Accessors: get

Property: Rhino.Render.CreatePreviewEventArgs.SceneObject.Mesh
Return: Mesh
Modifiers: public
Accessors: get

Class: Rhino.Render.CreateTexture2dPreviewEventArgs

Property: Rhino.Render.CreateTexture2dPreviewEventArgs.PreviewImage
Return: Bitmap
Modifiers: public
Summary: Initially null.  If this image is set, then this image will be used for the preview.  If never set, the default internal simulation preview will be used.
Accessors: get set

Property: Rhino.Render.CreateTexture2dPreviewEventArgs.PreviewImageSize
Return: Size
Modifiers: public
Summary: Pixel size of the image that is being requested for the preview scene
Accessors: get

Class: Rhino.Render.CustomRenderContentAttribute
Summary: Attributes for RenderContent

Constructor: Rhino.Render.CustomRenderContentAttribute.CustomRenderContentAttribute(string renderEngineGuid, bool imageBased, string category, bool is_elevated, bool is_built_in, bool is_private, bool is_linear, bool is_hdrcapable, bool is_normalmap)

Constructor: Rhino.Render.CustomRenderContentAttribute.CustomRenderContentAttribute(string renderEngineGuid, bool imageBased, string category, bool is_elevated, bool is_built_in, bool is_private)

Property: Rhino.Render.CustomRenderContentAttribute.Category
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.ImageBased
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsBuiltIn
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsElevated
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsHdrCapable
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsLinear
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsNormalMap
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.IsPrivate
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.CustomRenderContentAttribute.RenderEngineId
Return: Guid
Modifiers: public
Accessors: get set

Class: Rhino.Render.CustomRenderMeshProvider
Summary: You must call CustomRenderMeshProvider.RegisterProviders() from your plug-ins OnLoad override for each assembly containing a custom mesh provider.  Only publicly exported classes derived from CustomRenderMeshProvider with a public constructor that has no parameters will get registered.

Constructor: Rhino.Render.CustomRenderMeshProvider.CustomRenderMeshProvider()
Summary: Default constructor

Property: Rhino.Render.CustomRenderMeshProvider.CurvePipingId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshProvider.DisplacementId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshProvider.EdgeSofteningId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshProvider.ShutLiningId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshProvider.ThickeningId
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshProvider.Name
Return: String
Modifiers: public, abstract
Summary: The name of the provider for UI display.
Accessors: get

Method: Rhino.Render.CustomRenderMeshProvider.AllObjectsChanged()
Return: void
Modifiers: public, static
Summary: Call this method if your render meshes change.

Method: Rhino.Render.CustomRenderMeshProvider.AllObjectsChanged(RhinoDoc doc)
Return: void
Modifiers: public, static
Summary: Call this method if your render meshes change.

Method: Rhino.Render.CustomRenderMeshProvider.DocumentBasedMeshesChanged(RhinoDoc doc)
Return: void
Modifiers: public, static

Method: Rhino.Render.CustomRenderMeshProvider.ObjectChanged(RhinoDoc doc, RhinoObject obj)
Return: void
Modifiers: public, static

Method: Rhino.Render.CustomRenderMeshProvider.RegisterProviders(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: void
Modifiers: public, static
Summary: Call this method once from your plug-ins OnLoad override for each assembly containing a custom mesh provider.  Only publicly exported classes derived from CustomRenderMeshProvider with a public constructor that has no parameters will get registered.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: Assembly to search for valid CustomRenderMeshProvider derived classes.
Parameter: pluginId (System.Guid)
Parameter Summary: The plug-in that owns the custom mesh providers.

Method: Rhino.Render.CustomRenderMeshProvider.BoundingBox(ViewportInfo vp, RhinoObject obj, RhinoDoc doc, System.Guid requestingPlugIn, Rhino.Display.DisplayPipelineAttributes attrs)
Return: BoundingBox
Modifiers: public

Method: Rhino.Render.CustomRenderMeshProvider.BoundingBox(ViewportInfo vp, RhinoObject obj, System.Guid requestingPlugIn, bool preview)
Return: BoundingBox
Modifiers: public, virtual
Summary: Returns a bounding box for the custom render meshes for the given object.
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: obj (RhinoObject)
Parameter Summary: The Rhino object of interest.  This can be None in the case where document meshes (not associated with any object) are being requested.
Parameter: requestingPlugIn (System.Guid)
Parameter Summary: UUID of the RDK plug-in requesting the meshes.
Parameter: preview (bool)
Parameter Summary: Type of mesh to build.

Method: Rhino.Render.CustomRenderMeshProvider.BuildCustomMeshes(ViewportInfo vp, RenderPrimitiveList objMeshes, System.Guid requestingPlugIn, bool meshType)
Return: bool
Modifiers: public, abstract
Summary: Build custom render mesh(es).
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: objMeshes (RenderPrimitiveList)
Parameter Summary: The meshes class to populate with custom meshes.
Parameter: requestingPlugIn (System.Guid)
Parameter Summary: UUID of the RDK plug-in requesting the meshes.
Parameter: meshType (bool)
Parameter Summary: Type of mesh to build.

Method: Rhino.Render.CustomRenderMeshProvider.WillBuildCustomMeshes(ViewportInfo vp, RhinoObject obj, System.Guid requestingPlugIn, bool preview)
Return: bool
Modifiers: public, abstract
Summary: Determines if custom render meshes will be built for a particular object.
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered.
Parameter: obj (RhinoObject)
Parameter Summary: The Rhino object of interest.  This can be None in the case where document meshes (not associated with any object) are being requested.
Parameter: requestingPlugIn (System.Guid)
Parameter Summary: UUID of the RDK plug-in requesting the meshes.
Parameter: preview (bool)
Parameter Summary: Type of mesh to build.

Class: Rhino.Render.CustomRenderMeshProvider2

Constructor: Rhino.Render.CustomRenderMeshProvider2.CustomRenderMeshProvider2()
Summary: Initializes a new instance of the CustomRenderMeshProvider2 class

Method: Rhino.Render.CustomRenderMeshProvider2.BoundingBox(ViewportInfo vp, RhinoObject obj, RhinoDoc doc, System.Guid requestingPlugIn, Rhino.Display.DisplayPipelineAttributes attrs)
Return: BoundingBox
Modifiers: public, new, virtual

Method: Rhino.Render.CustomRenderMeshProvider2.BoundingBox(ViewportInfo vp, RhinoObject obj, System.Guid requestingPlugIn, bool preview)
Return: BoundingBox
Modifiers: public, override

Method: Rhino.Render.CustomRenderMeshProvider2.BuildCustomMeshes(ViewportInfo vp, RenderPrimitiveList objMeshes, System.Guid requestingPlugIn, bool preview)
Return: bool
Modifiers: public, override

Method: Rhino.Render.CustomRenderMeshProvider2.BuildCustomMeshes(ViewportInfo vp, RhinoDoc doc, RenderPrimitiveList objMeshes, System.Guid requestingPlugIn, Rhino.Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public, abstract

Method: Rhino.Render.CustomRenderMeshProvider2.WillBuildCustomMeshes(ViewportInfo vp, RhinoObject obj, RhinoDoc doc, System.Guid requestingPlugIn, Rhino.Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public, abstract

Method: Rhino.Render.CustomRenderMeshProvider2.WillBuildCustomMeshes(ViewportInfo vp, RhinoObject obj, System.Guid requestingPlugIn, bool preview)
Return: bool
Modifiers: public, override

Class: Rhino.Render.Decal
Summary: Represents a decal, or a picture that can be moved on an object.

Property: Rhino.Render.Decal.CRC
Return: int
Modifiers: public
Summary: The decal CRC identifies a decal by its state. Multiple decals which would be exactly the same would have the same CRC and are culled from the system. If you store this value with the intention of using it to find the decal again later, you must update your stored value whenever the decal state changes. You can detect when a decal changes by watching for the OnUserDataTransformed event.
Accessors: get

Property: Rhino.Render.Decal.DecalMapping
Return: DecalMapping
Modifiers: public
Summary: Gets the decal's mapping.
Accessors: get

Property: Rhino.Render.Decal.DecalProjection
Return: DecalProjection
Modifiers: public
Summary: Gets the decal's projection. Used only when mapping is planar.
Accessors: get

Property: Rhino.Render.Decal.EndLatitude
Return: double
Modifiers: public
Summary: Gets the end angle of the decal's arc of latitude or 'horizontal sweep'. This is actually a LONGITUDINAL angle. Only used when mapping is cylindrical or spherical. This is deprecated in favor of HorzSweep().
Accessors: get

Property: Rhino.Render.Decal.EndLongitude
Return: double
Modifiers: public
Summary: Gets the end angle of the decal's arc of longitude or 'vertical sweep'. This is actually a LATITUDINAL angle. Only used when mapping is spherical. This is deprecated in favor of VertSweep().
Accessors: get

Property: Rhino.Render.Decal.Height
Return: double
Modifiers: public
Summary: Gets the height of the decal. Only used when mapping is cylindrical.
Accessors: get

Property: Rhino.Render.Decal.Mapping
Return: DecalMapping
Modifiers: public
Summary: Gets the decal's mapping.
Accessors: get

Property: Rhino.Render.Decal.MapToInside
Return: bool
Modifiers: public
Summary: Used only when mapping is cylindrical or spherical.
Accessors: get

Property: Rhino.Render.Decal.Origin
Return: Point3d
Modifiers: public
Summary: Gets the origin of the decal in world space.
Accessors: get

Property: Rhino.Render.Decal.Projection
Return: DecalProjection
Modifiers: public
Summary: Gets the decal's projection. Used only when mapping is planar.
Accessors: get

Property: Rhino.Render.Decal.Radius
Return: double
Modifiers: public
Summary: Gets the radius of the decal. Only used when mapping is cylindrical or spherical.
Accessors: get

Property: Rhino.Render.Decal.StartLatitude
Return: double
Modifiers: public
Summary: Gets the start angle of the decal's arc of latitude or 'horizontal sweep'. This is actually a LONGITUDINAL angle. Only used when mapping is cylindrical or spherical. This is deprecated in favor of HorzSweep().
Accessors: get

Property: Rhino.Render.Decal.StartLongitude
Return: double
Modifiers: public
Summary: Gets the start angle of the decal's arc of longitude or 'vertical sweep'. This is actually a LATITUDINAL angle. Only used when mapping is spherical. This is deprecated in favor of VertSweep().
Accessors: get

Property: Rhino.Render.Decal.TextureInstanceId
Return: Guid
Modifiers: public
Summary: Gets the texture ID for this decal.
Accessors: get

Property: Rhino.Render.Decal.Transparency
Return: double
Modifiers: public
Summary: Gets the decal's transparency in the range 0 to 1.
Accessors: get

Property: Rhino.Render.Decal.VectorAcross
Return: Vector3d
Modifiers: public
Summary: Gets the vector across. For cylindrical and spherical mapping, the vector is unitized.
Accessors: get

Property: Rhino.Render.Decal.VectorUp
Return: Vector3d
Modifiers: public
Summary: For cylindrical and spherical mapping, the vector is unitized.
Accessors: get

Method: Rhino.Render.Decal.Create(DecalCreateParams createParams)
Return: Decal
Modifiers: static, public

Method: Rhino.Render.Decal.ConstPointer()
Return: System.IntPtr
Modifiers: public

Method: Rhino.Render.Decal.CustomData()
Return: List<Rhino.Render.NamedValue>
Modifiers: public
Summary: Gets decal custom data for the current renderer. See Rhino.Plugins.RenderPlugIn.ShowDecalProperties.

Method: Rhino.Render.Decal.CustomData(System.Guid renderer)
Return: List<Rhino.Render.NamedValue>
Modifiers: public
Summary: Gets decal custom data for a specified renderer. See Rhino.Plugins.RenderPlugIn.ShowDecalProperties.

Method: Rhino.Render.Decal.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.Decal.Dispose(bool isDisposing)
Return: void
Modifiers: public

Method: Rhino.Render.Decal.GetTextureMapping()
Return: TextureMapping
Modifiers: public
Summary: The TextureMapping of the decal.

Method: Rhino.Render.Decal.HorzSweep(out double sta, out double end)
Return: void
Modifiers: public
Summary: Gets the angles of the decal's arc of 'horizontal sweep'. Replaces StartLatitude and EndLatitude.

Method: Rhino.Render.Decal.NonConstPointer()
Return: System.IntPtr
Modifiers: public

Method: Rhino.Render.Decal.TextureRenderCRC(TextureRenderHashFlags rh, LinearWorkflow lw)
Return: uint
Modifiers: public
Summary: This method is deprecated in favor of TextureRenderHash below.

Method: Rhino.Render.Decal.TextureRenderCRC(TextureRenderHashFlags rh)
Return: uint
Modifiers: public
Summary: This method is deprecated in favor of TextureRenderHash below.

Method: Rhino.Render.Decal.TextureRenderHash(CrcRenderHashFlags flags, LinearWorkflow lw)
Return: uint
Modifiers: public
Summary: Get the texture render hash for the referenced texture using the specified CrcRenderHashFlags and linear workflow.

Method: Rhino.Render.Decal.TextureRenderHash(CrcRenderHashFlags flags)
Return: uint
Modifiers: public
Summary: Get the texture render hash for the referenced texture using the specified CrcRenderHashFlags.

Method: Rhino.Render.Decal.TryGetColor(Rhino.Geometry.Point3d point, Rhino.Geometry.Vector3d normal, ref Rhino.Display.Color4f colInOut, ref Rhino.Geometry.Point2d uvOut)
Return: bool
Modifiers: public
Summary: Blend color with the decal color at a given point.
Parameter: point (Rhino.Geometry.Point3d)
Parameter Summary: The point in space or, if the decal is uv-mapped, the uv-coordinate of that point.
Parameter: normal (Rhino.Geometry.Vector3d)
Parameter Summary: The face normal of the given point.
Parameter: colInOut (Rhino.Display.Color4f)
Parameter Summary: The color to blend the decal color to.
Parameter: uvOut (Rhino.Geometry.Point2d)
Parameter Summary: the UV on the texture that the color point was read from.

Method: Rhino.Render.Decal.UVBounds(ref double minUOut, ref double minVOut, ref double maxUOut, ref double maxVOut)
Return: void
Modifiers: public
Summary: The UV bounds of the decal. Only used when mapping is UV.

Method: Rhino.Render.Decal.VertSweep(out double sta, out double end)
Return: void
Modifiers: public
Summary: Gets the angles of the decal's arc of 'vertical sweep'. Replaces StartLongitude and EndLongitude.

Class: Rhino.Render.DecalCreateParams
Summary: Used by RhinoObject.AddDecal() to create and add a decal

Constructor: Rhino.Render.DecalCreateParams.DecalCreateParams()
Summary: Initializes a new instance of the DecalCreateParams class

Property: Rhino.Render.DecalCreateParams.DecalMapping
Return: DecalMapping
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.DecalProjection
Return: DecalProjection
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.EndLatitude
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.EndLongitude
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.Height
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.MapToInside
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.MaxU
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.MaxV
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.MinU
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.MinV
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.Origin
Return: Point3d
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.Radius
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.StartLatitude
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.StartLongitude
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.TextureInstanceId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.Transparency
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.VectorAcross
Return: Vector3d
Modifiers: public
Accessors: get set

Property: Rhino.Render.DecalCreateParams.VectorUp
Return: Vector3d
Modifiers: public
Accessors: get set

Class: Rhino.Render.Decals
Summary: Represents all the decals of an object.

Method: Rhino.Render.Decals.Add(Decal decal)
Return: uint
Modifiers: public
Summary: Add a new Decal to the decals list, use Decal.Create to create a new decal instance to add.

Method: Rhino.Render.Decals.Clear()
Return: void
Modifiers: public

Method: Rhino.Render.Decals.GetEnumerator()
Return: IEnumerator<Decal>
Modifiers: public

Method: Rhino.Render.Decals.Remove(Decal decal)
Return: bool
Modifiers: public
Summary: Remove a single decal from the collection.

Method: Rhino.Render.Decals.RemoveAllDecals()
Return: void
Modifiers: public
Summary: Remove all the decals from the collection.

Class: Rhino.Render.Dithering
Summary: This is the interface to dithering settings.

Constructor: Rhino.Render.Dithering.Dithering()
Summary: Create a utility object not associated with any document

Constructor: Rhino.Render.Dithering.Dithering(Dithering d)
Summary: Create a utility object not associated with any document from another object

Property: Rhino.Render.Dithering.Enabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.Dithering.Method
Return: Methods
Modifiers: public
Accessors: get set

Property: Rhino.Render.Dithering.On
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Render.Dithering.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.Dithering.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.DocumentOrFreeFloatingBase
Summary: Base class for Rhino.Render objects that are owned by the document, or can be delivered separately from other functions.  In general, you cannot create these objects yourself.

Method: Rhino.Render.DocumentOrFreeFloatingBase.BeginChange(Rhino.Render.RenderContent.ChangeContexts cc)
Return: void
Modifiers: public

Method: Rhino.Render.DocumentOrFreeFloatingBase.EndChange()
Return: bool
Modifiers: public

Class: Rhino.Render.FreeFloatingBase
Summary: Base class for Rhino.Render objects that are owned by the document, or can be delivered separately from other functions.  In general, you cannot create these objects yourself.

Method: Rhino.Render.FreeFloatingBase.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, abstract
Summary: Copy from another object

Class: Rhino.Render.GroundPlane
Summary: Represents an infinite plane for implementation by renderers. See <b>Rhino.PlugIns.RenderPlugIn.SupportsFeature</b> .

Constructor: Rhino.Render.GroundPlane.GroundPlane()
Summary: Create a utility object not associated with any document

Constructor: Rhino.Render.GroundPlane.GroundPlane(GroundPlane g)
Summary: Create a utility object not associated with any document from another object

Property: Rhino.Render.GroundPlane.Altitude
Return: double
Modifiers: public
Summary: Height above world XY plane in model units. Auto-altitude is computed if enabled.
Accessors: get set

Property: Rhino.Render.GroundPlane.AutoAltitude
Return: bool
Modifiers: public
Summary: Determines whether the ground plane is fixed by the Altitude property, or whether it is automatically placed at the lowest point in the model.
Accessors: get set

Property: Rhino.Render.GroundPlane.Enabled
Return: bool
Modifiers: public
Summary: Determines whether the document ground plane is enabled.
Accessors: get set

Property: Rhino.Render.GroundPlane.MaterialInstanceId
Return: Guid
Modifiers: public
Summary: Id of material in material table for this ground plane.
Accessors: get set

Property: Rhino.Render.GroundPlane.ShadowOnly
Return: bool
Modifiers: public
Summary: Determines whether the ground plane shows the material assigned, or whether it is transparent, but captures shadows.
Accessors: get set

Property: Rhino.Render.GroundPlane.ShowUnderside
Return: bool
Modifiers: public
Summary: If this is off, the ground plane will not be visible when seen from below.
Accessors: get set

Property: Rhino.Render.GroundPlane.TextureOffset
Return: Vector2d
Modifiers: public
Summary: Texture mapping offset in world units.
Accessors: get set

Property: Rhino.Render.GroundPlane.TextureOffsetLocked
Return: bool
Modifiers: public
Summary: Texture offset locked.
Accessors: get set

Property: Rhino.Render.GroundPlane.TextureRotation
Return: double
Modifiers: public
Summary: Texture mapping rotation around world origin + offset in degrees.
Accessors: get set

Property: Rhino.Render.GroundPlane.TextureSize
Return: Vector2d
Modifiers: public
Summary: Texture mapping single UV span size in world units.
Accessors: get set

Property: Rhino.Render.GroundPlane.TextureSizeLocked
Return: bool
Modifiers: public
Summary: Texture size locked.
Accessors: get set

Method: Rhino.Render.GroundPlane.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.GroundPlane.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.ImageFile
Summary: Controls interaction with RDK render image files

Constructor: Rhino.Render.ImageFile.ImageFile()
Summary: Initializes a new instance of the ImageFile class

Class: Rhino.Render.ImageFileEventArgs

Property: Rhino.Render.ImageFileEventArgs.EllapsedTime
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Render.ImageFileEventArgs.Event
Return: ImageFileEvent
Modifiers: public
Accessors: get set

Property: Rhino.Render.ImageFileEventArgs.FileName
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.ImageFileEventArgs.RenderEngine
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.ImageFileEventArgs.RenderEngineId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Render.ImageFileEventArgs.SessionId
Return: Guid
Modifiers: public
Accessors: get set

Class: Rhino.Render.LightArray

Constructor: Rhino.Render.LightArray.LightArray()

Constructor: Rhino.Render.LightArray.LightArray(IntPtr pLightArray)

Property: Rhino.Render.LightArray.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.LightArray.Append(Rhino.Geometry.Light light)
Return: void
Modifiers: public

Method: Rhino.Render.LightArray.Count()
Return: int
Modifiers: public

Method: Rhino.Render.LightArray.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.LightArray.ElementAt(int index)
Return: Rhino.Geometry.Light
Modifiers: public

Class: Rhino.Render.LightManagerSupport
Summary: Base class for implementing custom light managers in .NET

Constructor: Rhino.Render.LightManagerSupport.LightManagerSupport()
Summary: Default constructor

Method: Rhino.Render.LightManagerSupport.RegisterLightManager(PlugIns.PlugIn plugin)
Return: void
Modifiers: public, static
Summary: Find and register classes that derive from LightManagerSupport from the given plug-in.

Method: Rhino.Render.LightManagerSupport.RegisterProviders(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: void
Modifiers: public, static
Summary: Find and register classes that derive from RealtimeDisplayMode from the given plug-in. The plug-in is found in the given assembly

Method: Rhino.Render.LightManagerSupport.DeleteLight(RhinoDoc doc, Rhino.Geometry.Light light, bool bUndelete)
Return: bool
Modifiers: public, abstract
Summary: Delete light

Method: Rhino.Render.LightManagerSupport.GetLights(RhinoDoc doc, ref LightArray light_array)
Return: void
Modifiers: public, abstract
Summary: Get all the lights that are associated to the light manager. The lights are added to the LightArray parameter passed to the GetLights method

Method: Rhino.Render.LightManagerSupport.GetLightSolo(RhinoDoc doc, System.Guid uuid_light)
Return: bool
Modifiers: public, virtual
Summary: Returns the value of "ON_LIght::m_bOn" if the light is in solo storage, or False if not in solo storage (ie - this is the checkbox state on the light manager dialog)

Method: Rhino.Render.LightManagerSupport.GroupLights(RhinoDoc doc, ref LightArray light_array)
Return: void
Modifiers: public, abstract
Summary: Creates a new group with the lights

Method: Rhino.Render.LightManagerSupport.LightDescription(RhinoDoc doc, ref Rhino.Geometry.Light light)
Return: string
Modifiers: public, abstract
Summary: Gets the string representation of the light description

Method: Rhino.Render.LightManagerSupport.LightFromId(RhinoDoc doc, System.Guid uuid, ref Rhino.Geometry.Light light)
Return: bool
Modifiers: public, abstract
Summary: Get Rhino.Geometry.Light object associated to Guig uuid

Method: Rhino.Render.LightManagerSupport.LightsInSoloStorage(RhinoDoc doc)
Return: int
Modifiers: public, virtual
Summary: Returns the number of lights in solo storage - any number other than 0 means "in solo mode"

Method: Rhino.Render.LightManagerSupport.ModifyLight(RhinoDoc doc, Rhino.Geometry.Light light)
Return: void
Modifiers: public, abstract
Summary: Modify properties of the light

Method: Rhino.Render.LightManagerSupport.ObjectSerialNumberFromLight(RhinoDoc doc, ref Rhino.Geometry.Light light)
Return: int
Modifiers: public, abstract
Summary: Get the object serial number of the light

Method: Rhino.Render.LightManagerSupport.OnCustomLightEvent(RhinoDoc doc, LightMangerSupportCustomEvent le, ref Rhino.Geometry.Light light)
Return: void
Modifiers: public
Summary: Generates LightMangerSupportCustomEvent: light_added, light_deleted, light_undeleted, light_modified, light_sorted, The event triggers a Light table event that the rdk lightmanager listens too

Method: Rhino.Render.LightManagerSupport.OnEditLight(RhinoDoc doc, ref LightArray light_array)
Return: bool
Modifiers: public, abstract
Summary: The default implementation of OnEditLight selects the lights and opens the Lights Properties page

Method: Rhino.Render.LightManagerSupport.PluginId()
Return: System.Guid
Modifiers: public, abstract
Summary: The Guid of the plugin

Method: Rhino.Render.LightManagerSupport.RenderEngineId()
Return: System.Guid
Modifiers: public, abstract
Summary: The Guid of the render engine

Method: Rhino.Render.LightManagerSupport.SetLightSolo(RhinoDoc doc, System.Guid uuid_light, bool bSolo)
Return: bool
Modifiers: public, virtual
Summary: First checks to see if we are in "solo mode" - which means that there are any lights that respond "true" to IsInSoloStorage. If in solo mode: If bSolo = true Sets this light on. If bSolo = false If this is the last light "on", forces all lights out of solo mode. If there are other lights on, turns this light off. If not in solo mode: If bSolo = true Forces all lights into solo storage and sets this light on. If bSolo = false This shouldn't happen.  Will cause an ASSERT

Method: Rhino.Render.LightManagerSupport.UnGroup(RhinoDoc doc, ref LightArray light_array)
Return: void
Modifiers: public, abstract
Summary: UnGroups the lights

Class: Rhino.Render.LightManagerSupportClient

Constructor: Rhino.Render.LightManagerSupportClient.LightManagerSupportClient(uint doc_uuid)

Property: Rhino.Render.LightManagerSupportClient.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.LightManagerSupportClient.DeleteLight(Rhino.Geometry.Light light)
Return: void
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.GetLightFromId(System.Guid uuid)
Return: Rhino.Geometry.Light
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.GetLights()
Return: LightArray
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.GetLightSolo(Rhino.Geometry.Light light)
Return: bool
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.GroupLights(LightArray lights)
Return: void
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.LightDescription(Rhino.Geometry.Light light)
Return: string
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.LightsInSoloStorage()
Return: int
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.ModifyLight(Rhino.Geometry.Light light)
Return: void
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.ObjectFromLight(Rhino.Geometry.Light light)
Return: Rhino.DocObjects.RhinoObject
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.OnEditLight(LightArray lights)
Return: void
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.SetLightSolo(Rhino.Geometry.Light light, bool bSolo)
Return: bool
Modifiers: public

Method: Rhino.Render.LightManagerSupportClient.UnGroup(LightArray lights)
Return: void
Modifiers: public

Class: Rhino.Render.LinearWorkflow
Summary: This is the interface to linear workflow settings.

Constructor: Rhino.Render.LinearWorkflow.LinearWorkflow()
Summary: Create a utility object not associated with any document.

Constructor: Rhino.Render.LinearWorkflow.LinearWorkflow(LinearWorkflow src)
Summary: Create a utility object not associated with any document from another object.

Property: Rhino.Render.LinearWorkflow.Hash
Return: uint
Modifiers: public
Summary: Linear workflow hash.
Accessors: get

Property: Rhino.Render.LinearWorkflow.PostProcessFrameBuffer
Return: bool
Modifiers: public
Summary: Linear workflow post-process frame buffer enabled state.
Accessors: get set

Property: Rhino.Render.LinearWorkflow.PostProcessGamma
Return: float
Modifiers: public
Summary: Linear workflow post-process gamma value.
Accessors: get set

Property: Rhino.Render.LinearWorkflow.PostProcessGammaOn
Return: bool
Modifiers: public
Summary: Linear workflow post-process gamma enabled state.
Accessors: get set

Property: Rhino.Render.LinearWorkflow.PostProcessGammaReciprocal
Return: float
Modifiers: public
Summary: Reciprocal of linear workflow post-process gamma value.
Accessors: get

Property: Rhino.Render.LinearWorkflow.PreProcessColors
Return: bool
Modifiers: public
Summary: Linear workflow pre-process colors enabled state.
Accessors: get set

Property: Rhino.Render.LinearWorkflow.PreProcessGamma
Return: float
Modifiers: public
Summary: Linear workflow pre-process gamma value. This is currently the same as the post-process gamma value.
Accessors: get set

Property: Rhino.Render.LinearWorkflow.PreProcessTextures
Return: bool
Modifiers: public
Summary: Linear workflow pre-process textures enabled state.
Accessors: get set

Method: Rhino.Render.LinearWorkflow.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override
Summary: Copy from another linear workflow object.

Method: Rhino.Render.LinearWorkflow.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.LinearWorkflow.Equals(object obj)
Return: bool
Modifiers: public, override
Summary: Compare two LinearWorkflow objects. They are considered equal if their hashes match.

Method: Rhino.Render.LinearWorkflow.GetHashCode()
Return: int
Modifiers: public, override
Summary: Get hash code for this object. It is the Hash property cast to int.

Class: Rhino.Render.MappingTag
Summary: Holds texture mapping information.

Constructor: Rhino.Render.MappingTag.MappingTag()
Summary: Initializes a new instance of the MappingTag class

Property: Rhino.Render.MappingTag.Id
Return: Guid
Modifiers: public
Summary: Gets or sets a map globally unique identifier.
Accessors: get set

Property: Rhino.Render.MappingTag.MappingCRC
Return: uint
Modifiers: public
Summary: Gets or sets the cyclic redundancy check on the mapping. See also <b>RhinoMath.CRC32(uint,byte[])</b> .
Accessors: get set

Property: Rhino.Render.MappingTag.MappingType
Return: TextureMappingType
Modifiers: public
Summary: Gets or sets a texture mapping type: linear, cylinder, etc...
Accessors: get set

Property: Rhino.Render.MappingTag.MeshTransform
Return: Transform
Modifiers: public
Summary: Gets or sets a 4x4 matrix transform.
Accessors: get set

Class: Rhino.Render.MetaDataProxy
Summary: ProxyClass for MetaData

Constructor: Rhino.Render.MetaDataProxy.MetaDataProxy()
Summary: Constructor for MetaDataProxy

Property: Rhino.Render.MetaDataProxy.CppPointer
Return: IntPtr
Modifiers: public
Summary: MetaDataProxy c++ pointer
Accessors: get

Method: Rhino.Render.MetaDataProxy.Dispose()
Return: void
Modifiers: public
Summary: Dispose for MetaDataProxy

Method: Rhino.Render.MetaDataProxy.SetContentInstanceId(System.Guid uuid)
Return: void
Modifiers: public
Summary: Set Content instance id for meta data

Class: Rhino.Render.NamedValue

Constructor: Rhino.Render.NamedValue.NamedValue(string name, object value)

Property: Rhino.Render.NamedValue.Name
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.NamedValue.Value
Return: object
Modifiers: public
Accessors: get set

Class: Rhino.Render.PhysicallyBasedMaterial

Class: Rhino.Render.PhysicallyBasedMaterial.ParametersNames
Summary: Helper class with fields containing the names of fields available in our PBR implementation.

Constructor: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.PhysicallyBasedMaterial.ParametersNames()
Summary: Initializes a new instance of the PhysicallyBasedMaterial.ParametersNames class

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.AmbientOcclusion
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Anisotropic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.AnisotropicRotation
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.BaseColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.BRDF
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Bump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Clearcoat
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.ClearcoatBump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.ClearcoatRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Displacement
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Emission
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Metallic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Normal
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Opacity
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.OpacityIor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.OpacityRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Roughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Sheen
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.SheenTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Smudge
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Specular
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.SpecularTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.Subsurface
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.SubsurfaceScatteringColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PhysicallyBasedMaterial.ParametersNames.SubsurfaceScatteringRadius
Return: string
Modifiers: public, static
Accessors: get

Class: Rhino.Render.PixelBuffer

Constructor: Rhino.Render.PixelBuffer.PixelBuffer(IntPtr bufferPointer)
Summary: Create a new PixelBuffer pointing to the (unmanaged) pixel data buffer behind IntPtr

Property: Rhino.Render.PixelBuffer.Buffer
Return: IntPtr
Modifiers: public
Accessors: get set

Class: Rhino.Render.PreviewAppearance
Summary: PreviewAppearance class

Constructor: Rhino.Render.PreviewAppearance.PreviewAppearance(IntPtr pRenderContent)
Summary: Constructor for previewappearance

Property: Rhino.Render.PreviewAppearance.CppPointer
Return: IntPtr
Modifiers: public
Summary: Previewappearances c++ pointer
Accessors: get

Property: Rhino.Render.PreviewAppearance.MetaData
Return: MetaData
Modifiers: public
Summary: Previewappearance MetaData
Accessors: get

Property: Rhino.Render.PreviewAppearance.Scale
Return: double
Modifiers: public
Summary: Size - used in the UI.  Always meters.
Accessors: get set

Property: Rhino.Render.PreviewAppearance.SceneScale
Return: double
Modifiers: public
Summary: Scene size - the actual size that is rendered
Accessors: get

Method: Rhino.Render.PreviewAppearance.Background()
Return: PreviewBackground
Modifiers: public
Summary: Background

Method: Rhino.Render.PreviewAppearance.Dispose()
Return: void
Modifiers: public
Summary: Dispose for previewappearance

Method: Rhino.Render.PreviewAppearance.FromMetaData(MetaData md)
Return: void
Modifiers: public
Summary: Copy data from MetaData to PreviewAppearance

Method: Rhino.Render.PreviewAppearance.Geometry()
Return: PreviewGeometry
Modifiers: public
Summary: Geometry

Method: Rhino.Render.PreviewAppearance.Lighting()
Return: PreviewLighting
Modifiers: public
Summary: Lighting

Method: Rhino.Render.PreviewAppearance.RotationType()
Return: IRhRdkPreviewSceneServer_eRotationType
Modifiers: public
Summary: RotationType

Method: Rhino.Render.PreviewAppearance.RotationX()
Return: double
Modifiers: public
Summary: RotationX

Method: Rhino.Render.PreviewAppearance.RotationY()
Return: double
Modifiers: public
Summary: RotationY

Method: Rhino.Render.PreviewAppearance.SetRotationType(IRhRdkPreviewSceneServer_eRotationType type)
Return: void
Modifiers: public
Summary: SetRotationType

Method: Rhino.Render.PreviewAppearance.SetRotationX(double d)
Return: void
Modifiers: public
Summary: SetRotationX

Method: Rhino.Render.PreviewAppearance.SetRotationY(double d)
Return: void
Modifiers: public
Summary: SetRotationY

Method: Rhino.Render.PreviewAppearance.SetSize(double d)
Return: void
Modifiers: public
Summary: SetSize

Method: Rhino.Render.PreviewAppearance.Size()
Return: double
Modifiers: public
Summary: Size - used in the UI.  Always meters.

Method: Rhino.Render.PreviewAppearance.ToMetaData()
Return: void
Modifiers: public
Summary: Copy PreviewAppearance to MetaData

Method: Rhino.Render.PreviewAppearance.ToMetaData(MetaDataProxy mdp)
Return: void
Modifiers: public
Summary: Copy PreviewAppearance to MetaData

Class: Rhino.Render.PreviewBackground
Summary: PreviewBackGround takes care of construction and destruction of PreviewLight

Constructor: Rhino.Render.PreviewBackground.PreviewBackground(IntPtr pPreviewBackground)
Summary: Constructor for PreivewLighting

Property: Rhino.Render.PreviewBackground.CppPointer
Return: IntPtr
Modifiers: public
Summary: CppPointer for PreivewLighting
Accessors: get

Method: Rhino.Render.PreviewBackground.ElementKind()
Return: string
Modifiers: public
Summary: ElementKind

Method: Rhino.Render.PreviewBackground.EnvironmentInstanceId()
Return: System.Guid
Modifiers: public
Summary: EnvironmentInstanceId

Method: Rhino.Render.PreviewBackground.SetEnvironmentInstanceId(System.Guid guid)
Return: void
Modifiers: public
Summary: SetEnvironmentInstanceId

Method: Rhino.Render.PreviewBackground.SetUpPreview(System.IntPtr sceneServerPointer, System.Guid guid)
Return: void
Modifiers: public
Summary: SetUpPreview

Class: Rhino.Render.PreviewGeometry
Summary: PreviewAppearance takes care of construction and destruction of PreviewGeometry

Constructor: Rhino.Render.PreviewGeometry.PreviewGeometry(IntPtr pPreviewGeometry)
Summary: Constructor for PreviewGeometry

Property: Rhino.Render.PreviewGeometry.CppPointer
Return: IntPtr
Modifiers: public
Summary: CppPointer for PreviewGeometry
Accessors: get

Method: Rhino.Render.PreviewGeometry.ElementKind()
Return: string
Modifiers: public
Summary: ElementKind

Method: Rhino.Render.PreviewGeometry.SetUpPreview(System.IntPtr sceneServerPointer, System.IntPtr pRenderContent, bool bCopy)
Return: void
Modifiers: public
Summary: SetUpPreview

Class: Rhino.Render.PreviewJobSignature
Summary: Preview Job Signature is a specific identifier for a specific rendered preview

Constructor: Rhino.Render.PreviewJobSignature.PreviewJobSignature()
Summary: Preview Job Signature constructor

Constructor: Rhino.Render.PreviewJobSignature.PreviewJobSignature(int width, int height, uint sig)
Summary: Preview Job Signature constructor

Constructor: Rhino.Render.PreviewJobSignature.PreviewJobSignature(IntPtr intPtr)
Summary: Preview Job Signature constructor

Property: Rhino.Render.PreviewJobSignature.CppPointer
Return: IntPtr
Modifiers: public
Summary: UnManaged pointer of the PreviewJobsingature
Accessors: get

Method: Rhino.Render.PreviewJobSignature.Compare(PreviewJobSignature pjs)
Return: bool
Modifiers: public
Summary: Compare two Preview Job Signatures. True if they are the same, otherwise false.

Method: Rhino.Render.PreviewJobSignature.Dispose()
Return: void
Modifiers: public
Summary: Dispose

Method: Rhino.Render.PreviewJobSignature.ImageHeight()
Return: int
Modifiers: public
Summary: The Height of the rendered preview image

Method: Rhino.Render.PreviewJobSignature.ImageWidth()
Return: int
Modifiers: public
Summary: The Width of the rendered preview image

Class: Rhino.Render.PreviewLighting
Summary: PreviewAppearance takes care of construction and destruction of PreviewLight

Constructor: Rhino.Render.PreviewLighting.PreviewLighting(IntPtr pPreviewLighting)
Summary: Constructor for PreivewLighting

Property: Rhino.Render.PreviewLighting.CppPointer
Return: IntPtr
Modifiers: public
Summary: CppPointer for PreivewLighting
Accessors: get

Method: Rhino.Render.PreviewLighting.ElementKind()
Return: string
Modifiers: public
Summary: ElementKind

Method: Rhino.Render.PreviewLighting.SetUpPreview(System.IntPtr sceneServerPointer)
Return: void
Modifiers: public
Summary: SetUpPreview

Class: Rhino.Render.PreviewRenderedEventArgs
Summary: PreviewRenderedEventArgs is raised when a content preview has been rendered

Constructor: Rhino.Render.PreviewRenderedEventArgs.PreviewRenderedEventArgs()
Summary: Initializes a new instance of the PreviewRenderedEventArgs class

Property: Rhino.Render.PreviewRenderedEventArgs.Bitmap
Return: Bitmap
Modifiers: public
Summary: The Bitmap of the rendered preview
Accessors: get set

Property: Rhino.Render.PreviewRenderedEventArgs.PreviewJobSignature
Return: PreviewJobSignature
Modifiers: public
Summary: The Preview Job Signature associated with the rendered preview
Accessors: get set

Property: Rhino.Render.PreviewRenderedEventArgs.Quality
Return: PreviewQuality
Modifiers: public
Summary: The Bitmap of the rendered preview
Accessors: get set

Class: Rhino.Render.PreviewSceneServer
Summary: PreviewSceneServer

Constructor: Rhino.Render.PreviewSceneServer.PreviewSceneServer(IntPtr pPreviewSceneServer)
Summary: Constructor for PreviewSceneServer

Property: Rhino.Render.PreviewSceneServer.CppPointer
Return: IntPtr
Modifiers: public
Summary: The CppPointer of PreviewSceneServer
Accessors: get

Method: Rhino.Render.PreviewSceneServer.ApplyRotation(double X, double Y, IRhRdkPreviewSceneServer_eRotationType type)
Return: void
Modifiers: public
Summary: Set Scene Server Rotation

Method: Rhino.Render.PreviewSceneServer.Dispose()
Return: void
Modifiers: public
Summary: Dispose for PreviewSceneServer

Method: Rhino.Render.PreviewSceneServer.Dispose(bool bDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose for PreviewSceneServer

Method: Rhino.Render.PreviewSceneServer.SetSceneScale(double scale)
Return: void
Modifiers: public
Summary: Set Scene Server Scale

Class: Rhino.Render.RdkUndo
Summary: RdkUndo class, which is used to get the RdkUndoRecord

Constructor: Rhino.Render.RdkUndo.RdkUndo(IntPtr pUndoRecord)
Summary: Constructor for RdkUndo

Method: Rhino.Render.RdkUndo.Dispose()
Return: void
Modifiers: public
Summary: Dispose for RdkUndo

Method: Rhino.Render.RdkUndo.NewUndoRecord()
Return: RdkUndoRecord
Modifiers: public
Summary: Get a new UndoRecord

Class: Rhino.Render.RdkUndoRecord
Summary: RdkUndoRecord class

Constructor: Rhino.Render.RdkUndoRecord.RdkUndoRecord(IntPtr pUndoRecord)
Summary: Constructor for RdkUndoRecord

Method: Rhino.Render.RdkUndoRecord.Dispose()
Return: void
Modifiers: public
Summary: Dispose for RdkUndoRecord

Method: Rhino.Render.RdkUndoRecord.SetDescription(System.String description)
Return: void
Modifiers: public
Summary: Set description for RdkUndoRecord

Class: Rhino.Render.RealtimeDisplayMode
Summary: Base class for implementing real-time display modes in .NET.  Pay special attention that in StartRenderer the RenderWindow.SetSize() function is called if the implementation relies on the RenderWindow to do the drawing to the viewport. If i.e. OpenGL is used to draw render results to the viewport then SetSize() doesn't have to be called, nor should the implementation then access channels on the RenderWindow, as those then don't exist. For OpenGL-based drawing the RenderWindow is used as a container for ViewInfo management, nothing else.

Constructor: Rhino.Render.RealtimeDisplayMode.RealtimeDisplayMode()

Property: Rhino.Render.RealtimeDisplayMode.LinearWorkflow
Return: LinearWorkflow
Modifiers: public
Summary: Returns the LinearWorkflow data for this realtime display mode.
Accessors: get

Property: Rhino.Render.RealtimeDisplayMode.Locked
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.RealtimeDisplayMode.MaxPasses
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Render.RealtimeDisplayMode.Paused
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.RealtimeDisplayMode.PostEffectsOn
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Render.RealtimeDisplayMode.GetRealtimeViewport(System.IntPtr realtimeViewport, bool create)
Return: RealtimeDisplayMode
Modifiers: static, public
Summary: Retrieve RealtimeDisplayMode instance. If create is set to true then a new instance is created if not found, None is returned for false.
Parameter: realtimeViewport (System.IntPtr)
Parameter Summary: IntPtr
Parameter: create (bool)
Parameter Summary: True to create if not found, False to return None if not found.

Method: Rhino.Render.RealtimeDisplayMode.GetRealtimeViewport(System.IntPtr realtimeViewport)
Return: RealtimeDisplayMode
Modifiers: static, public
Summary: Retrieve RealtimeDisplayMode instance that the IntPtr refers to.
Parameter: realtimeViewport (System.IntPtr)
Parameter Summary: IntPtr of the instance searched for. If the instance doesn't exist, a new one is created.

Method: Rhino.Render.RealtimeDisplayMode.RegisterDisplayModes(PlugIns.PlugIn plugin)
Return: RealtimeDisplayModeClassInfo[]
Modifiers: public, static
Summary: Find and register classes that derive from RealtimeDisplayMode from the given plug-in.

Method: Rhino.Render.RealtimeDisplayMode.RegisterDisplayModes(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: RealtimeDisplayModeClassInfo[]
Modifiers: public, static
Summary: Find and register classes that derive from RealtimeDisplayMode from the given plug-in. The plug-in is found in the given assembly

Method: Rhino.Render.RealtimeDisplayMode.RemoveRealtimeViewport(System.IntPtr realtimeViewport)
Return: void
Modifiers: static, public
Summary: Remove RealtimeDisplayMode instance from internal dictionary.
Parameter: realtimeViewport (System.IntPtr)
Parameter Summary: IntPtr to the RealtimeDisplayMode instance to remove.

Method: Rhino.Render.RealtimeDisplayMode.UnregisterDisplayModes(PlugIns.PlugIn plugin)
Return: void
Modifiers: public, static

Method: Rhino.Render.RealtimeDisplayMode.UnregisterDisplayModes(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: void
Modifiers: public, static

Method: Rhino.Render.RealtimeDisplayMode.CaptureProgress()
Return: double
Modifiers: public, virtual
Summary: Override to communicate the progress of a capture.

Method: Rhino.Render.RealtimeDisplayMode.ComputeViewportCrc(ViewInfo view)
Return: uint
Modifiers: public
Summary: Compute viewport CRC for the given ViewInfo

Method: Rhino.Render.RealtimeDisplayMode.CreateWorld(RhinoDoc doc, ViewInfo viewInfo, DisplayPipelineAttributes displayPipelineAttributes)
Return: void
Modifiers: public, virtual
Summary: Implement if you need to handle the initial CreateWorld call initiated by the display pipeline system. Note that this is not the same as the CreateWorld call in Rhino.Render.ChangeQueue.ChangeQueue, although related.
Parameter: doc (RhinoDoc)
Parameter Summary: Rhino document
Parameter: viewInfo (ViewInfo)
Parameter Summary: active viewport info
Parameter: displayPipelineAttributes (DisplayPipelineAttributes)
Parameter Summary: display pipeline attributes

Method: Rhino.Render.RealtimeDisplayMode.DrawOpenGl()
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RealtimeDisplayMode.GetRenderSize(out int width, out int height)
Return: void
Modifiers: public, abstract
Summary: Get the current render resolution for the running render session.

Method: Rhino.Render.RealtimeDisplayMode.GetView()
Return: ViewInfo
Modifiers: public
Summary: Get ViewInfo that has been registered with this RealtimeDisplayMode instance.

Method: Rhino.Render.RealtimeDisplayMode.HudAllowEditMaxPasses()
Return: bool
Modifiers: public, virtual
Summary: Override to allow maximum pass editing. By default disabled.

Method: Rhino.Render.RealtimeDisplayMode.HudCustomStatusText()
Return: string
Modifiers: public, virtual
Summary: Override to display status of the render engine.

Method: Rhino.Render.RealtimeDisplayMode.HudLastRenderedPass()
Return: int
Modifiers: public, virtual
Summary: Override to communicate the last completed pass. Can be shown in the HUD

Method: Rhino.Render.RealtimeDisplayMode.HudMaximumPasses()
Return: int
Modifiers: public, virtual
Summary: Override to communicate the maximum passes count currently in use for the render session. Can be shown in the HUD

Method: Rhino.Render.RealtimeDisplayMode.HudProductName()
Return: string
Modifiers: public, virtual
Summary: Override to return the name of your product. This will be printed in the HUD.

Method: Rhino.Render.RealtimeDisplayMode.HudRendererLocked()
Return: bool
Modifiers: public, virtual
Summary: Implement to support locking in the viewport

Method: Rhino.Render.RealtimeDisplayMode.HudRendererPaused()
Return: bool
Modifiers: public, virtual
Summary: Implement to support pausing and resuming in the viewport

Method: Rhino.Render.RealtimeDisplayMode.HudShow()
Return: bool
Modifiers: public, virtual
Summary: Override if you want to hide the HUD. Shown by default

Method: Rhino.Render.RealtimeDisplayMode.HudShowControls()
Return: bool
Modifiers: public, virtual
Summary: Show control buttons on the realtime display HUD.  By default these are shown, override this function and return False if HUD controls aren't needed.

Method: Rhino.Render.RealtimeDisplayMode.HudShowCustomStatusText()
Return: bool
Modifiers: public, virtual
Summary: Override to show status text in HUD. By default disabled.

Method: Rhino.Render.RealtimeDisplayMode.HudShowMaxPasses()
Return: bool
Modifiers: public, virtual
Summary: Override to show maximum passes in HUD. By default disabled.

Method: Rhino.Render.RealtimeDisplayMode.HudShowPasses()
Return: bool
Modifiers: public, virtual
Summary: Override to show current pass in HUD. By default disabled.

Method: Rhino.Render.RealtimeDisplayMode.HudStartTime()
Return: System.DateTime
Modifiers: public, virtual

Method: Rhino.Render.RealtimeDisplayMode.IsCompleted()
Return: bool
Modifiers: public, abstract
Summary: Implement to tell if your render engine has completed a frame for drawing into the viewport

Method: Rhino.Render.RealtimeDisplayMode.IsFrameBufferAvailable(ViewInfo view)
Return: bool
Modifiers: public, abstract
Summary: Implement to tell the render pipeline that a framebuffer is ready

Method: Rhino.Render.RealtimeDisplayMode.IsRendererStarted()
Return: bool
Modifiers: public, abstract
Summary: Override to tell the started state of your render engine.

Method: Rhino.Render.RealtimeDisplayMode.LastRenderedPass()
Return: int
Modifiers: public, virtual
Summary: Implement to communicate last completed pass to the underlying system.

Method: Rhino.Render.RealtimeDisplayMode.OnRenderSizeChanged(int width, int height)
Return: bool
Modifiers: public, virtual
Summary: Override to restart your render engine

Method: Rhino.Render.RealtimeDisplayMode.OpenGlVersion()
Return: int
Modifiers: public

Method: Rhino.Render.RealtimeDisplayMode.PostConstruct()
Return: void
Modifiers: public, virtual
Summary: Override PostConstruct if you need to initialize where the underlying RealtimeDisplayMode is available.  The connection is made right after RealtimeDisplayMode has been instantiated, but just before PostConstruct is called.  For instance finding out OpenGL information can be done in PostConstruct.

Method: Rhino.Render.RealtimeDisplayMode.SetUseDrawOpenGl(bool use)
Return: void
Modifiers: public, virtual
Summary: During run-time change whether to use OpenGL drawing of results or not. For instance offline rendering (viewcapture* with different resolution than viewport) could use RenderWindow instead of direct OpenGL drawing.
Parameter: use (bool)
Parameter Summary: Set to True if OpenGL drawing is wanted, set to False if RenderWindow method is needed.

Method: Rhino.Render.RealtimeDisplayMode.SetView(ViewInfo view)
Return: void
Modifiers: public
Summary: Set ViewInfo for this RealtimeDisplayMode instance.
Parameter: view (ViewInfo)
Parameter Summary: The ViewInfo to set for subsequent tests.

Method: Rhino.Render.RealtimeDisplayMode.ShowCaptureProgress()
Return: bool
Modifiers: public, virtual
Summary: Override if you want to i.e. hide the progress dialog for capture progress.

Method: Rhino.Render.RealtimeDisplayMode.ShutdownRenderer()
Return: void
Modifiers: public, abstract
Summary: Override to shutdown your render engine

Method: Rhino.Render.RealtimeDisplayMode.SignalRedraw()
Return: void
Modifiers: public
Summary: Use to signal the underlying pipeline a redraw is wanted. This can be used for instance when a renderer has completed a pass which should be updated in the associated viewport.

Method: Rhino.Render.RealtimeDisplayMode.StartRenderer(int w, int h, RhinoDoc doc, ViewInfo view, ViewportInfo viewportInfo, bool forCapture, RenderWindow renderWindow)
Return: bool
Modifiers: public, abstract
Summary: Override to start your render engine.  Note that before using the RenderWindow you *must* call SetSize to properly initialize the underlying DIB.
Parameter: w (int)
Parameter Summary: Width of resolution
Parameter: h (int)
Parameter Summary: Height of resolution
Parameter: doc (RhinoDoc)
Parameter Summary: Rhino document
Parameter: view (ViewInfo)
Parameter Summary: active view
Parameter: viewportInfo (ViewportInfo)
Parameter Summary: active viewport info
Parameter: forCapture (bool)
Parameter Summary: True if renderer is started for capture purposes (ViewCaptureTo*), False for regular interactive rendering
Parameter: renderWindow (RenderWindow)
Parameter Summary: RenderWindow to hold render results in.

Method: Rhino.Render.RealtimeDisplayMode.UseFastDraw()
Return: bool
Modifiers: public, virtual
Summary: Implement and return True if you want the display pipeline to not wait for IsFramebufferAvailable during the MiddleGround draw phase. This will also tell the pipeline to draw a complete middleground pass in OpenGL.

Class: Rhino.Render.RealtimeDisplayMode.DisplayPipelineSettingsChangedEventArgs

Constructor: Rhino.Render.RealtimeDisplayMode.DisplayPipelineSettingsChangedEventArgs.RealtimeDisplayMode.DisplayPipelineSettingsChangedEventArgs(DisplayPipelineAttributes dpa)

Property: Rhino.Render.RealtimeDisplayMode.DisplayPipelineSettingsChangedEventArgs.Attributes
Return: DisplayPipelineAttributes
Modifiers: public
Accessors: get set

Class: Rhino.Render.RealtimeDisplayMode.DrawMiddlegroundEventArgs

Constructor: Rhino.Render.RealtimeDisplayMode.DrawMiddlegroundEventArgs.RealtimeDisplayMode.DrawMiddlegroundEventArgs(DisplayPipeline dp)

Property: Rhino.Render.RealtimeDisplayMode.DrawMiddlegroundEventArgs.Pipeline
Return: DisplayPipeline
Modifiers: public
Accessors: get set

Class: Rhino.Render.RealtimeDisplayMode.HudMaxPassesChangedEventArgs

Constructor: Rhino.Render.RealtimeDisplayMode.HudMaxPassesChangedEventArgs.RealtimeDisplayMode.HudMaxPassesChangedEventArgs(int mp)

Property: Rhino.Render.RealtimeDisplayMode.HudMaxPassesChangedEventArgs.MaxPasses
Return: int
Modifiers: public
Accessors: get set

Class: Rhino.Render.RealtimeDisplayMode.InitFramebufferEventArgs

Constructor: Rhino.Render.RealtimeDisplayMode.InitFramebufferEventArgs.RealtimeDisplayMode.InitFramebufferEventArgs(DisplayPipeline dp)

Property: Rhino.Render.RealtimeDisplayMode.InitFramebufferEventArgs.Pipeline
Return: DisplayPipeline
Modifiers: public
Accessors: get set

Class: Rhino.Render.RealtimeDisplayModeClassInfo
Summary: Class information obligatory for registering RealtimeDisplayMode implementations.

Constructor: Rhino.Render.RealtimeDisplayModeClassInfo.RealtimeDisplayModeClassInfo()
Summary: Initializes a new instance of the RealtimeDisplayModeClassInfo class

Property: Rhino.Render.RealtimeDisplayModeClassInfo.DontRegisterAttributesOnStart
Return: bool
Modifiers: public, virtual
Summary: Override and return True when you don't want your class info to cause display attributes to be registered with the system.
Accessors: get

Property: Rhino.Render.RealtimeDisplayModeClassInfo.DrawOpenGl
Return: bool
Modifiers: public, abstract
Summary: Return True if the RealtimeDisplayMode draws its result using OpenGL. RenderWindow usage will then be skipped.
Accessors: get

Property: Rhino.Render.RealtimeDisplayModeClassInfo.GUID
Return: Guid
Modifiers: public, abstract
Summary: Get the RealtimeDisplayMode implementation GUID
Accessors: get

Property: Rhino.Render.RealtimeDisplayModeClassInfo.Name
Return: string
Modifiers: public, abstract
Summary: Get human-facing class description for RealtimeDisplayMode implementation. This string might show up in the Rhino UI.
Accessors: get

Property: Rhino.Render.RealtimeDisplayModeClassInfo.RealtimeDisplayModeType
Return: Type
Modifiers: public, abstract
Summary: Get the type being registered.
Accessors: get

Class: Rhino.Render.RenderChannels
Summary: Render Channels. This corresponds to the user's settings in the Rendering panel.

Constructor: Rhino.Render.RenderChannels.RenderChannels()
Summary: Create a utility object not associated with any document.

Property: Rhino.Render.RenderChannels.CustomList
Return: Guid[]
Modifiers: public
Accessors: get set

Property: Rhino.Render.RenderChannels.Mode
Return: Modes
Modifiers: public
Accessors: get set

Method: Rhino.Render.RenderChannels.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.RenderChannels.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.RenderContent
Summary: Base class for all RenderContent - RenderMaterial, RenderTexture and RenderEnvironment  Contents have a unique type id which is the same for all instances of the same class and an instance id which is unique for each instance.They know how to provide a shader for rendering, how to read and write their state as XML and how to create their own user interfaces.  There are two flavors of content in the RDK -- temporary and persistent.It is very important to understand the distinction between a temporary content instance and a persistent content instance, and the fact that a temporary instance (and all its children) can become persistent.Persistent content is registered with a document and is usually(but not always) owned by it.  Temporary contents get created and deleted very often during the normal operation of the RDK.In fact, just about anything the user clicks on might result in a temporary content being created and deleted again.They are created by the content browser, the thumbnail rendering, and so on.They are 'free floating' and are owned by whomever created them.They do not appear in the modeless UI, they do not get saved in the 3dm file, and they can freely be deleted again after use.  Contrast this with persistent contents which are attached to a document.They are always owned by RDK, appear in the modeless UI and get saved in the 3dm file. Pointers to persistent contents should never be stored by clients; you should only store their instance ids and look them up again using RenderContent.FromId. They can be deleted only after detaching them from the document.  RenderContent::Create is the highest-level function for creating a content.It creates it, initializes it, adds it to the document and sends many events.It even records undo.You cannot call this method from just anywhere. It must only be called by 'UI code'; scripts or buttons on a dialog.It results in a persistent (usually top-level) content being attached to the document and appearing in all the RDK UI elements that display contents, like the thumbnail and tree views.If you call this method and specify a parent and child-slot name, your new content will be attached to the document-resident parent as a child and the UI will be updated accordingly.  The important point is that everything is temporary while the content structure is being built. Only after the whole structure is complete will the top-level parent be attached to the document making the whole structure persistent.

Property: Rhino.Render.RenderContent.CanBeEdited
Return: bool
Modifiers: public
Summary: Determines if the content can be edited.
Accessors: get

Property: Rhino.Render.RenderContent.Category
Return: String
Modifiers: public
Summary: Category for this content.
Accessors: get

Property: Rhino.Render.RenderContent.ChildSlotDisplayName
Return: String
Modifiers: public
Summary: Returns the localized display name of the child slot name
Accessors: get

Property: Rhino.Render.RenderContent.ChildSlotName
Return: String
Modifiers: public
Accessors: get set

Property: Rhino.Render.RenderContent.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderContent.DisplayName
Return: String
Modifiers: public
Summary: Display name for this content.
Accessors: get

Property: Rhino.Render.RenderContent.Document
Return: RhinoDoc
Modifiers: public
Summary: Obsolete. Do not use. You should use DocumentOwner instead.
Accessors: get

Property: Rhino.Render.RenderContent.DocumentAssoc
Return: RhinoDoc
Modifiers: public
Summary: If this render content is associated with a document in any way, the document will be returned. This includes copies of render contents that were attached to a document when the copy was made. Otherwise returns null.
Accessors: get set

Property: Rhino.Render.RenderContent.DocumentOwner
Return: RhinoDoc
Modifiers: public
Summary: If this render content is owned by a document, the document will be returned. This is the same as getting the document the render content is attached to. Otherwise returns null.
Accessors: get

Property: Rhino.Render.RenderContent.DocumentRegistered
Return: RhinoDoc
Modifiers: public
Summary: Obsolete. Do not use. You should use DocumentOwner instead.
Accessors: get

Property: Rhino.Render.RenderContent.Fields
Return: FieldDictionary
Modifiers: public
Summary: Rhino.Render.Fields FieldDictionary which provides access to setting and retrieving field values.
Accessors: get

Property: Rhino.Render.RenderContent.Filename
Return: string
Modifiers: public, virtual
Summary: If the content is file based, this function can be overridden to deal with setting/getting the filename.  Corresponds to IRhRdkFileBasedContent in the C++ SDK
Accessors: get set

Property: Rhino.Render.RenderContent.FilesToEmbed
Return: IEnumerable<string>
Modifiers: public, virtual
Summary: A string array of full paths to files used by the content that may be embedded in .3dm files and library files (.rmtl, .renv, .rtex). The default implementation returns an empty string list. Override this to return the file name or file names used by your content. This is typically used by textures that reference files containing the texture imagery.
Accessors: get

Property: Rhino.Render.RenderContent.FirstChild
Return: RenderContent
Modifiers: public
Summary: Return First child of this content or None if none.
Accessors: get

Property: Rhino.Render.RenderContent.GroupId
Return: Guid
Modifiers: public
Summary: Group ID of the content
Accessors: get set

Property: Rhino.Render.RenderContent.Hidden
Return: bool
Modifiers: public
Summary: Gets or sets the render content's 'hidden' state. This feature only works for top-level render contents because it hides the entire hierarchy. It is normally used for 'implementation detail' render contents. For expert use only. Hidden render contents are never shown in the UI, with the exception of the Object (or Layer) Material Properties UI which always shows whatever is assigned to the object (or layer). In the Object (or Layer) Material Properties UI, if the user drops down the list, hidden render contents are not listed. Hidden render contents, being part of the document content list, will be listed by any scripts or other code that iterates over the document render content list. It is recommended that you set IsHidden once when you create your render content and leave it on to prevent flicker or slow performance.
Accessors: get set

Property: Rhino.Render.RenderContent.Id
Return: Guid
Modifiers: public
Summary: Instance identifier for this content.
Accessors: get set

Property: Rhino.Render.RenderContent.IsDefaultInstance
Return: bool
Modifiers: public
Summary: Checks if render content is default instance.
Accessors: get

Property: Rhino.Render.RenderContent.IsHiddenByAutoDelete
Return: bool
Modifiers: public
Summary: Contents can be created as 'auto-delete' by certain commands such as 'Picture'. These contents are automatically hidden from the user when the associated Rhino object is deleted. They are later deleted when the document is saved.
Accessors: get

Property: Rhino.Render.RenderContent.IsLocked
Return: bool
Modifiers: public
Summary: Set this property to True prior to adding content to the document to lock the content browser editing UI methods.  Setting this to True will keep the browser from allowing things like deleting, renaming or changing content.  This is useful for custom child content that you want to be editable but persistent.  Setting this after adding content to the document will cause an exception to be thrown.
Accessors: get set

Property: Rhino.Render.RenderContent.Name
Return: String
Modifiers: public
Summary: Instance 'raw' name for this content.
Accessors: get set

Property: Rhino.Render.RenderContent.NextSibling
Return: RenderContent
Modifiers: public
Summary: Return First sibling of this content or None if none.
Accessors: get

Property: Rhino.Render.RenderContent.Notes
Return: String
Modifiers: public
Summary: Notes for this content.
Accessors: get set

Property: Rhino.Render.RenderContent.Parent
Return: RenderContent
Modifiers: public
Summary: Returns the top content in this parent/child chain.
Accessors: get

Property: Rhino.Render.RenderContent.ProxyType
Return: ProxyTypes
Modifiers: public
Summary: Gets the proxy type of the render content
Accessors: get

Property: Rhino.Render.RenderContent.RenderHash
Return: uint
Modifiers: public
Summary: Render hash for the content hierarchy. It iterates over children and includes a caching mechanism which means the hash value can be retrieved quickly if it hasn't changed. The cache is invalidated when Changed() is called.  You can override the <b>CalculateRenderHash</b> method to provide a custom hash value.
Accessors: get

Property: Rhino.Render.RenderContent.Styles
Return: RenderContentStyles
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderContent.Tags
Return: String
Modifiers: public
Summary: Tags for this content.
Accessors: get set

Property: Rhino.Render.RenderContent.TopLevel
Return: bool
Modifiers: public
Summary: Returns True if this content has no parent, False if it is the child of another content.
Accessors: get

Property: Rhino.Render.RenderContent.TopLevelParent
Return: RenderContent
Modifiers: public
Summary: Returns the top content in this parent/child chain.
Accessors: get

Property: Rhino.Render.RenderContent.TypeDescription
Return: String
Modifiers: public, abstract
Summary: Description for your content type. i.e., "Procedural checker pattern"
Accessors: get

Property: Rhino.Render.RenderContent.TypeId
Return: Guid
Modifiers: public
Summary: Type identifier for this content
Accessors: get

Property: Rhino.Render.RenderContent.TypeName
Return: String
Modifiers: public, abstract
Summary: Name for your content type. i.e., "My .net Texture"
Accessors: get

Property: Rhino.Render.RenderContent.Xml
Return: String
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderContent.AddPersistentRenderContent(RenderContent renderContent)
Return: bool
Modifiers: public, static
Summary: Add a material, environment or texture to the internal RDK document lists as top level content.  The content must have been returned from RenderContent::MakeCopy, NewContentFromType or a similar function that returns a non-document content. Obsolete - use RhinoDoc.RenderMaterials.Add or similar.
Parameter: renderContent (RenderContent)
Parameter Summary: The render content.

Method: Rhino.Render.RenderContent.AddPersistentRenderContent(RhinoDoc document, RenderContent renderContent)
Return: bool
Modifiers: public, static
Summary: Add a material, environment or texture to the internal RDK document lists as top level content.  The content must have been returned from RenderContent::MakeCopy, NewContentFromType or a similar function that returns a non-document content. Obsolete - use RhinoDoc.RenderMaterials.Add or similar.
Parameter: document (RhinoDoc)
Parameter Summary: The document to attach the render content to.
Parameter: renderContent (RenderContent)
Parameter Summary: The render content.

Method: Rhino.Render.RenderContent.Create(RhinoDoc doc, System.Guid type, RenderContent parent, string childSlotName)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.
Parameter: type (System.Guid)
Parameter Summary: The type of the content to create.
Parameter: parent (RenderContent)
Parameter Summary: Parent is the parent content. If not null, this must be an RDK-owned content that is attached to the document (either top-level or child). The new content then becomes its child. If null, the new content is added to the top-level document content list instead.
Parameter: childSlotName (string)
Parameter Summary: ChildSlotName is the unique child identifier to use for the new content when creating it as a child of parent (i.e., when parent is not null)

Method: Rhino.Render.RenderContent.Create(RhinoDoc doc, System.Guid type)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.
Parameter: type (System.Guid)
Parameter Summary: The type of the content to create.

Method: Rhino.Render.RenderContent.Create(RhinoDoc doc, System.Type type, RenderContent parent, string childSlotName)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.
Parameter: type (System.Type)
Parameter Summary: The type of the content to create.
Parameter: parent (RenderContent)
Parameter Summary: The parent content. If not null, this must be an RDK-owned content that is attached to the document (either top-level or child). The new content then becomes its child. If null, the new content is added to the top-level document content list instead.
Parameter: childSlotName (string)
Parameter Summary: ChildSlotName is the unique child identifier to use for the new content when creating it as a child of parent (i.e., when parent is not null)

Method: Rhino.Render.RenderContent.Create(RhinoDoc doc, System.Type type)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.
Parameter: type (System.Type)
Parameter Summary: The type of the content to create.

Method: Rhino.Render.RenderContent.Create(System.Guid type, RenderContent parent, System.String childSlotName, ShowContentChooserFlags flags, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: type (System.Guid)
Parameter Summary: The type of the content to create.
Parameter: parent (RenderContent)
Parameter Summary: Parent is the parent content. If not null, this must be an RDK-owned content that is attached to the document (either top-level or child). The new content then becomes its child. If null, the new content is added to the top-level document content list instead.
Parameter: childSlotName (System.String)
Parameter Summary: ChildSlotName is the unique child identifier to use for the new content when creating it as a child of parent (i.e., when parent is not null)
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags for future use (please always pass ShowContentChooserFlags::None).
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.

Method: Rhino.Render.RenderContent.Create(System.Guid type, ShowContentChooserFlags flags, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: type (System.Guid)
Parameter Summary: The type of the content to create.
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags for future use (please always pass ShowContentChooserFlags::None).
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.

Method: Rhino.Render.RenderContent.Create(System.Type type, RenderContent parent, System.String childSlotName, ShowContentChooserFlags flags, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: type (System.Type)
Parameter Summary: The type of the content to create.
Parameter: parent (RenderContent)
Parameter Summary: The parent content. If not null, this must be an RDK-owned content that is attached to the document (either top-level or child). The new content then becomes its child. If null, the new content is added to the top-level document content list instead.
Parameter: childSlotName (System.String)
Parameter Summary: ChildSlotName is the unique child identifier to use for the new content when creating it as a child of parent (i.e., when parent is not null)
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags for future use (please always pass ShowContentChooserFlags::None).
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.

Method: Rhino.Render.RenderContent.Create(System.Type type, ShowContentChooserFlags flags, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static
Summary: Constructs a new content of the specified type and attaches it to a document. This function cannot be used to create temporary content that you delete after use. Content created by this function is owned by RDK and appears in the content editor. To create a temporary content which is owned by you, call RenderContentType.NewContentFromTypeId().
Parameter: type (System.Type)
Parameter Summary: The type of the content to create.
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags for future use (please always pass ShowContentChooserFlags::None).
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to attach the new render content to.

Method: Rhino.Render.RenderContent.FromId(RhinoDoc document, System.Guid id)
Return: RenderContent
Modifiers: public, static
Summary: Search for a content object based on its Id
Parameter: document (RhinoDoc)
Parameter Summary: The Rhino document containing the content.
Parameter: id (System.Guid)
Parameter Summary: Id of the content instance to search for.

Method: Rhino.Render.RenderContent.FromXml(System.String xml, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static
Summary: Creates a new content from the XML data.  The resulting content will not be attached to the document.
Parameter: xml (System.String)
Parameter Summary: The input XML data.
Parameter: doc (RhinoDoc)
Parameter Summary: The document that the content will be associated with for units, linear workflow purposes.

Method: Rhino.Render.RenderContent.FromXml(System.String xml)
Return: RenderContent
Modifiers: public, static

Method: Rhino.Render.RenderContent.GenerateQuickContentPreview(RenderContent c, int width, int height, PreviewSceneServer psc, bool bSuppressLocalMapping, int reason, ref Rhino.Commands.Result result)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Generate a quick render content preview
Parameter: c (RenderContent)
Parameter Summary: Render Content
Parameter: width (int)
Parameter Summary: Image width
Parameter: height (int)
Parameter Summary: Image height
Parameter: psc (PreviewSceneServer)
Parameter Summary: PreviewSceneServer
Parameter: bSuppressLocalMapping (bool)
Parameter Summary: SuppressLocalMapping
Parameter: reason (int)
Parameter Summary: ContentChanged = 0, ViewChanged = 1, RefreshDisplay = 2, Other = 99
Parameter: result (Rhino.Commands.Result)
Parameter Summary: Rhino.Command.Result value for successfull quick image creation

Method: Rhino.Render.RenderContent.GenerateRenderContentPreview(LinearWorkflow lwf, RenderContent c, int width, int height, bool bSuppressLocalMapping, PreviewJobSignature pjs, PreviewAppearance pa, ref Utilities.PreviewRenderResult result)
Return: System.Drawing.Bitmap
Modifiers: public, static
Summary: Generate a render content preview
Parameter: lwf (LinearWorkflow)
Parameter Summary: Linear Workflow
Parameter: c (RenderContent)
Parameter Summary: Render Content
Parameter: width (int)
Parameter Summary: Image width
Parameter: height (int)
Parameter Summary: Image height
Parameter: bSuppressLocalMapping (bool)
Parameter Summary: Suppress Local Mapping
Parameter: pjs (PreviewJobSignature)
Parameter Summary: Preivew Job Signature
Parameter: pa (PreviewAppearance)
Parameter Summary: Preivew Appearance
Parameter: result (Utilities.PreviewRenderResult)
Parameter Summary: Reference to PreviewRenderResult value

Method: Rhino.Render.RenderContent.LoadFromFile(System.String filename)
Return: RenderContent
Modifiers: public, static
Summary: Loads content from a library file.  Does not add the content to the document.  Use RhinoDoc.RenderMaterials.Add or similar.
Parameter: filename (System.String)
Parameter Summary: full path to the file to be loaded.

Method: Rhino.Render.RenderContent.RegisterContent(PlugIns.PlugIn plugin)
Return: System.Type[]
Modifiers: public, static
Summary: Call RegisterContent in your plug-in's OnLoad function in order to register all of the custom RenderContent classes in your assembly.

Method: Rhino.Render.RenderContent.RegisterContent(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: System.Type[]
Modifiers: public, static
Summary: Call RegisterContent in your plug-in's OnLoad function in order to register all of the custom RenderContent classes in your assembly.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: Assembly where custom content is defined, this may be a plug-in assembly or another assembly referenced by the plug-in.
Parameter: pluginId (System.Guid)
Parameter Summary: Parent plug-in for this assembly.

Method: Rhino.Render.RenderContent.AddAutomaticUserInterfaceSection(string caption, int id)
Return: bool
Modifiers: public
Summary: Add a new automatic user interface section, Field values which include prompts will be automatically added to this section.
Parameter: caption (string)
Parameter Summary: Expandable tab caption.
Parameter: id (int)
Parameter Summary: Tab id which may be used later on to reference this tab.

Method: Rhino.Render.RenderContent.AddChild(RenderContent renderContent, System.String childSlotName)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.AddChild(RenderContent renderContent)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.AddUserInterfaceSection(Rhino.UI.Controls.ICollapsibleSection section)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.AddUserInterfaceSection(System.Type classType, string caption, bool createExpanded, bool createVisible)
Return: UI.UserInterfaceSection
Modifiers: public
Summary: Add a new .NET control to an content expandable tab section, the height of the createExpanded tabs client area will be the initial height of the specified control.
Parameter: classType (System.Type)
Parameter Summary: The control class to create and embed as a child window in the expandable tab client area.  This class type must be derived from IWin32Window or this method will throw an ArgumentException.  Implement the IUserInterfaceSection interface in your classType to get UserInterfaceSection notification.
Parameter: caption (string)
Parameter Summary: Expandable tab caption.
Parameter: createExpanded (bool)
Parameter Summary: If this value is True then the new expandable tab section will initially be expanded, if it is False it will be collapsed.
Parameter: createVisible (bool)
Parameter Summary: If this value is True then the new expandable tab section will initially be visible, if it is False it will be hidden.

Method: Rhino.Render.RenderContent.BeginChange(ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Begins a change or batch of changes. It may also make a copy of the content state allowing <b>EndChange</b> to send an event with the old and new contents. Calls to this method are counted; you must call EndChange() once for every call to BeginChange(). Note: If Changed() was called between the calls to BeginChange() and EndChange(), the last call to EndChange() may cause the ContentChanged event to be sent.
Parameter: changeContext (ChangeContexts)
Parameter Summary: the change context. If this is ChangeContexts.UI, ChangeContexts.Program,ChangeContexts.Drop or ChangeContexts.Tree, the content will be copied. EndChange() will then send the copy as 'old' in the OnContentChanged event.  <b>EndChange</b>  <b>ContentChanged</b>

Method: Rhino.Render.RenderContent.BeginCreateDynamicFields(bool automatic)
Return: void
Modifiers: public
Summary: Automatic Dynamic Field support. Dynamic fields are typically created in the constructor of RenderContent and they are therefore created automatically whenever the content is created. However, some advanced users require the fields to be created in response to some user action which occurs much later. This creates the problem that the fields do not exist by default and therefore cannot be loaded when the document is loaded. These methods are provided to solve that problem by making it possible to automatically create the dynamic fields on loading if they don't already exist. Dynamic fields that have this auto-create-on-load behavior are referred to as automatic dynamic fields. Dynamic fields that do not require the advanced automatic feature can still be created by using these methods (recommended), or they can be created manually (legacy usage). You must call this before creating any dynamic fields. Calls to this method are counted; you must call EndCreateDynamicFields() once for every call to BeginCreateDynamicFields().
Parameter: automatic (bool)
Parameter Summary: automatic specifies if the dynamic fields are automatic. If so, they will be created automatically during loading of the document.

Method: Rhino.Render.RenderContent.BindParameterToField(string parameterName, Field field, ChangeContexts setEvent)
Return: void
Modifiers: public
Summary: Use bindings to automatically wire parameters to fields

Method: Rhino.Render.RenderContent.BindParameterToField(string parameterName, string childSlotName, Field field, ChangeContexts setEvent)
Return: void
Modifiers: public
Summary: Use bindings to automatically wire parameters to fields

Method: Rhino.Render.RenderContent.CalculateRenderHash(ulong rcrcFlags)
Return: uint
Modifiers: protected, virtual
Summary: Override this method to calculate the render hash of the state that affects how the content is rendered.  Does not include children or perform any caching. Render hash values are now automatically cached by the content framework and you do not have to worry about caching. You also do not have to worry about iterating into children.  This method is now only called internally by the framework, use the RenderHash property to get the current hash value.

Method: Rhino.Render.RenderContent.CalculateRenderHash2(CrcRenderHashFlags flags, string excludeParameterNames)
Return: uint
Modifiers: protected, virtual

Method: Rhino.Render.RenderContent.ChangeChild(RenderContent oldContent, RenderContent newContent)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.ChildSlotAmount(System.String childSlotName)
Return: double
Modifiers: public
Summary: Gets the amount property for the texture in the specified child slot.
Parameter: childSlotName (System.String)
Parameter Summary: The child slot name of the texture.

Method: Rhino.Render.RenderContent.ChildSlotNameFromParamName(System.String paramName)
Return: string
Modifiers: public
Summary: A "child slot" is the specific "slot" that a child (usually a texture) occupies. This is generally the "use" of the child - in other words, the thing the child operates on.  Some examples are "color", "transparency".
Parameter: paramName (System.String)
Parameter Summary: The name of a parameter field. Since child textures will usually correspond with some parameter (they generally either replace or modify a parameter over UV space) these functions are used to specify which parameter corresponded with child slot.  If there is no correspondence, return the empty string.

Method: Rhino.Render.RenderContent.ChildSlotOn(System.String childSlotName)
Return: bool
Modifiers: public
Summary: Gets the on-ness property for the texture in the specified child slot.
Parameter: childSlotName (System.String)
Parameter Summary: The child slot name of the texture.

Method: Rhino.Render.RenderContent.ConvertUnits(UnitSystem from, UnitSystem to)
Return: void
Modifiers: public, virtual
Summary: Modify your content so that it is converted from meters into the units of the unit system. No need to call the base class when you override this, and no need to recurse into children.

Method: Rhino.Render.RenderContent.CreateDynamicField(string internalName, string localName, string englishName, object value, object minValue, object maxValue, int sectionId)
Return: bool
Modifiers: public
Summary: Create a dynamic field with an initial value and min and max limits.
Parameter: internalName (string)
Parameter Summary: is the internal name of the field. Not localized.
Parameter: localName (string)
Parameter Summary: is the localized user-friendly name of the field.
Parameter: englishName (string)
Parameter Summary: is the English user-friendly name of the field.
Parameter: value (object)
Parameter Summary: is the initial value of the field.
Parameter: minValue (object)
Parameter Summary: is the minimum value of the field. Must be the same type as vValue.
Parameter: maxValue (object)
Parameter Summary: is the maximum value of the field. Must be the same type as vValue.
Parameter: sectionId (int)
Parameter Summary: is used for filtering fields between sections. Zero if not needed.

Method: Rhino.Render.RenderContent.DeleteAllChildren(ChangeContexts changeContexts)
Return: void
Modifiers: public

Method: Rhino.Render.RenderContent.DeleteChild(string childSlotName, ChangeContexts changeContexts)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderContent.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose

Method: Rhino.Render.RenderContent.DynamicIcon(Size size, out Bitmap bitmap, DynamicIconUsage usage)
Return: bool
Modifiers: virtual, public

Method: Rhino.Render.RenderContent.Edit()
Return: RenderContent
Modifiers: public
Summary: This method allows a render content hierarchy to be edited using a modal (AKA 'pop-up') editor. If the original render content is in a document, it will remain there, and the edited one will be 'free-floating'. Therefore it is the caller's responsibility to do any replacement in the document if required. The returned new content will be owned by the caller.

Method: Rhino.Render.RenderContent.EndChange()
Return: void
Modifiers: public
Summary: Ends a change or batch of changes. Calls to this method are counted; you must call this method once for every call to <b>BeginChange</b> . Note: If <b>BeginChange</b> was called with ChangeContexts.UI, ChangeContexts.Program, ChangeContexts.Drop or ChangeContexts.UI.Tree and Changed() was called between the calls to <b>BeginChange</b> and EndChange(), the last call to EndChange() will raise the <b>ContentChanged</b> event.

Method: Rhino.Render.RenderContent.EndCreateDynamicFields()
Return: void
Modifiers: public
Summary: You must call this after creating dynamic fields. Calls to this method are counted; you must call BeginCreateDynamicFields() once for every call to EndCreateDynamicFields().

Method: Rhino.Render.RenderContent.Factory()
Return: DataSources.ContentFactory
Modifiers: public

Method: Rhino.Render.RenderContent.FindChild(System.String childSlotName)
Return: RenderContent
Modifiers: public

Method: Rhino.Render.RenderContent.ForDisplay()
Return: RenderContent
Modifiers: public
Summary: **** This method is for proxies and will be marked obsolete in the future ****  The only place a single proxy can be displayed is in the New Content Control main thumbnail. All other attempts to use a single proxy in a UI require it to be replaced with the corresponding multi proxy. Single proxies override this to find the corresponding multi proxy.

Method: Rhino.Render.RenderContent.GetChildSlotParameter(System.String contentParameterName, System.String extraRequirementParameter)
Return: object
Modifiers: public, virtual
Summary: Extra requirements are a way of specifying extra functionality on parameters in the automatic UI. Override this function to specify additional functionality for automatic UI sections or the texture summary. See IAutoUIExtraRequirements.h in the C++ RDK SDK for string definitions for the parameter names. Call the base class from your override if you do not support the extra requirement parameter. Please do not call this function. It is only retained for backward compatibility. You should instead call GetExtraRequirementParameter().
Parameter: contentParameterName (System.String)
Parameter Summary: The parameter or field internal name to which this query applies.
Parameter: extraRequirementParameter (System.String)
Parameter Summary: The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK SDK.

Method: Rhino.Render.RenderContent.GetEmbeddedFilesList()
Return: string
Modifiers: public

Method: Rhino.Render.RenderContent.GetExtraRequirementParameter(string contentParameterName, string extraRequirementParameter)
Return: object
Modifiers: public
Summary: Extra requirements are a way of specifying extra functionality on parameters in the automatic UI. See IAutoUIExtraRequirements.h in the C++ RDK SDK for string definitions for the parameter names.
Parameter: contentParameterName (string)
Parameter Summary: The parameter or field internal name to which this query applies.
Parameter: extraRequirementParameter (string)
Parameter Summary: The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK SDK.

Method: Rhino.Render.RenderContent.GetParameter(System.String parameterName)
Return: object
Modifiers: public, virtual
Summary: Query the content instance for the value of a given named parameter. If you do not support this parameter, call the base class.
Parameter: parameterName (System.String)
Parameter Summary: Name of the parameter

Method: Rhino.Render.RenderContent.GetUiHash()
Return: ulong
Modifiers: public, virtual
Summary: This allows a content to have more than one UI for the same content type.

Method: Rhino.Render.RenderContent.GetUnderlyingInstances(ref RenderContentCollection collection)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.Icon(Size size, out Bitmap bitmap)
Return: bool
Modifiers: virtual, public

Method: Rhino.Render.RenderContent.Initialize()
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.IsCompatible(System.Guid renderEngineId)
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderContent.IsContentTypeAcceptableAsChild(System.Guid type, System.String childSlotName)
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderContent.IsFactoryProductAcceptableAsChild(DataSources.ContentFactory factory, System.String childSlotName)
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderContent.IsFactoryProductAcceptableAsChild(System.Guid kindId, string factoryKind, string childSlotName)
Return: bool
Modifiers: virtual, public
Summary: Override this method to restrict the type of acceptable child content. The default implementation of this method returns True if the factory kind is 'texture'.

Method: Rhino.Render.RenderContent.IsReference()
Return: bool
Modifiers: public
Summary: Query whether or not the content or any of its ancestors is a reference content.

Method: Rhino.Render.RenderContent.IsRenderHashCached()
Return: bool
Modifiers: public
Summary: This method is deprecated and no longer called. For more information see <b>CalculateRenderHash</b>

Method: Rhino.Render.RenderContent.MakeCopy()
Return: RenderContent
Modifiers: public
Summary: Create a copy of the render content. All content is the same, except for the instance Id.

Method: Rhino.Render.RenderContent.MakeGroupInstance()
Return: RenderContent
Modifiers: public
Summary: Create an 'instance' of the content hierarchy and group the new hierarchy with this hierarchy. If the instance is subsequently attached to the same document, the state of all members of the group will be kept synchronized. With the exception of the instance ids, all state is exactly preserved in the new instance hierarchy. \note The grouping will have no effect until the new instance is attached to the same document.

Method: Rhino.Render.RenderContent.MatchData(RenderContent oldContent)
Return: MatchDataResult
Modifiers: public, virtual
Summary: Implement to transfer data from another content to this content during creation.
Parameter: oldContent (RenderContent)
Parameter Summary: An old content object from which the implementation may harvest data.

Method: Rhino.Render.RenderContent.ModifyRenderContentStyles(RenderContentStyles stylesToAdd, RenderContentStyles stylesToRemove)
Return: void
Modifiers: protected
Summary: ModifyRenderContentStyles

Method: Rhino.Render.RenderContent.NewPreviewSceneServer(SceneServerData ssd)
Return: PreviewSceneServer
Modifiers: public
Summary: Gets the PreviewSceneServer of the content
Parameter: ssd (SceneServerData)
Parameter Summary: SceneServerData

Method: Rhino.Render.RenderContent.OnAddUserInterfaceSections()
Return: void
Modifiers: protected, virtual
Summary: Override to provide UI sections to display in the editor.

Method: Rhino.Render.RenderContent.OnGetDefaultsInteractive()
Return: bool
Modifiers: protected, virtual
Summary: Override this method to prompt user for information necessary to create a new content object.  For example, if you are created a textured material you may prompt the user for a bitmap file name prior to creating the textured material.

Method: Rhino.Render.RenderContent.OnMakeCopy(ref RenderContent newContent)
Return: void
Modifiers: protected, virtual
Summary: Override this function to supplement the standard copying behavour for your RenderContent.
Parameter: newContent (RenderContent)
Parameter Summary: Is the content that will be returned from MakeCopy.

Method: Rhino.Render.RenderContent.OpenInEditor()
Return: bool
Modifiers: public
Summary: Call this method to open the content in the relevant thumbnail editor and select it for editing by the user. The content must be in the document or the call will fail.

Method: Rhino.Render.RenderContent.OpenInModalEditor()
Return: bool
Modifiers: public
Summary: Call this method to open the content in the a modal version of the editor. The content must be in the document or the call will fail.

Method: Rhino.Render.RenderContent.ParamNameFromChildSlotName(System.String childSlotName)
Return: string
Modifiers: public
Summary: A "child slot" is the specific "slot" that a child (usually a texture) occupies. This is generally the "use" of the child - in other words, the thing the child operates on.  Some examples are "color", "transparency".
Parameter: childSlotName (System.String)
Parameter Summary: The named of the child slot to receive the parameter name for.

Method: Rhino.Render.RenderContent.RenderHashExclude(CrcRenderHashFlags flags, string excludeParameterNames, LinearWorkflow lw)
Return: uint
Modifiers: public
Summary: As RenderHash, but allows you to specify flags and exclude specific parameters. Use this version of the function to calculate a render hash when you have the linear workflow information and you are not running on the main thread. Access to LinearWorkflow data requires document access. CrcRenderHashFlags.ExcludeLinearWorkflow must be specified.
Parameter: flags (CrcRenderHashFlags)
Parameter Summary: Flags to finely control the render hash.
Parameter: excludeParameterNames (string)
Parameter Summary: Semicolon-delimited string of parameter names to exclude.
Parameter: lw (LinearWorkflow)
Parameter Summary: Linear Workflow to use.

Method: Rhino.Render.RenderContent.RenderHashExclude(CrcRenderHashFlags flags, string excludeParameterNames)
Return: uint
Modifiers: public
Summary: As RenderHash, but allows you to specify flags and exclude specific parameters.
Parameter: flags (CrcRenderHashFlags)
Parameter Summary: Flags to finely control the render hash.
Parameter: excludeParameterNames (string)
Parameter Summary: Semicolon-delimited string of parameter names to exclude.

Method: Rhino.Render.RenderContent.RenderHashExclude(TextureRenderHashFlags flags, string excludeParameterNames)
Return: uint
Modifiers: public
Summary: This method is deprecated in favor of the one that takes CrcRenderHashFlags.

Method: Rhino.Render.RenderContent.Replace(RenderContent newcontent)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderContent.SaveToFile(System.String filename, EmbedFilesChoice embedFilesChoice)
Return: bool
Modifiers: public
Summary: Saves content to a file - RMTL, RENV or RTEX.
Parameter: filename (System.String)
Parameter Summary: Full path to the file to be saved.
Parameter: embedFilesChoice (EmbedFilesChoice)
Parameter Summary:

Method: Rhino.Render.RenderContent.SetChild(RenderContent renderContent, System.String childSlotName, ChangeContexts changeContexts)
Return: bool
Modifiers: public
Summary: Set another content as a child of this content. This content may or may not be attached to a document.  If this content already has a child with the specified child slot name, that child will be deleted.  If this content is not attached to a document, the child will be added without sending any events.  If this content is attached to a document, the necessary events will be sent to update the UI. Note: Do not call this method to add children in your constructor. If you want to add default children, you should override Initialize() and add them there.
Parameter: renderContent (RenderContent)
Parameter Summary: Child content to add to this content. If pChild is NULL, the function will fail.  If pChild is already attached to a document, the function will fail.  If pChild is already a child of this or another content, the function will fail.
Parameter: childSlotName (System.String)
Parameter Summary: The name that will be assigned to this child slot. The child slot name cannot be an empty string. If it is, the function will fail.
Parameter: changeContexts (ChangeContexts)
Parameter Summary:

Method: Rhino.Render.RenderContent.SetChild(RenderContent renderContent, System.String childSlotName)
Return: bool
Modifiers: public
Summary: Set another content as a child of this content. This content may or may not be attached to a document.  If this content already has a child with the specified child slot name, that child will be deleted.  If this content is not attached to a document, the child will be added without sending any events.  If this content is attached to a document, the necessary events will be sent to update the UI. Note: Do not call this method to add children in your constructor. If you want to add default children, you should override Initialize() and add them there.
Parameter: renderContent (RenderContent)
Parameter Summary: Child content to add to this content. If renderContent is null, the function will fail. If renderContent is already attached to a document, the function will fail. If renderContent is already a child of this or another content, the function will fail.
Parameter: childSlotName (System.String)
Parameter Summary: The name that will be assigned to this child slot. The child slot name cannot be an empty string. If it is, the function will fail.

Method: Rhino.Render.RenderContent.SetChildSlotAmount(System.String childSlotName, double amount, ChangeContexts cc)
Return: void
Modifiers: public
Summary: Sets the amount property for the texture in the specified child slot.
Parameter: childSlotName (System.String)
Parameter Summary: The child slot name of the texture.
Parameter: amount (double)
Parameter Summary: The texture amount. Values are typically from 0.0 to 100.0
Parameter: cc (ChangeContexts)
Parameter Summary: The context of the change.

Method: Rhino.Render.RenderContent.SetChildSlotOn(System.String childSlotName, bool bOn, ChangeContexts cc)
Return: void
Modifiers: public
Summary: Sets the on-ness property for the texture in the specified child slot.
Parameter: childSlotName (System.String)
Parameter Summary: The child slot name of the texture.
Parameter: bOn (bool)
Parameter Summary: Value for the on-ness property.
Parameter: cc (ChangeContexts)
Parameter Summary: Context of the change

Method: Rhino.Render.RenderContent.SetChildSlotParameter(System.String contentParameterName, System.String extraRequirementParameter, object value, ExtraRequirementsSetContexts sc)
Return: bool
Modifiers: public, virtual
Summary: Extra requirements are a way of specifying extra functionality on parameters in the automatic UI. Override this function to support values being set from automatic UI sections or the texture summary. See IAutoUIExtraRequirements.h in the C++ RDK SDK for string definitions for the parameter names. Call the base class from your override if you do not support the extra requirement parameter. Please do not call this function. It is only retained for backward compatibility. You should instead call SetExtraRequirementParameter().
Parameter: contentParameterName (System.String)
Parameter Summary: The parameter or field internal name to which this query applies.
Parameter: extraRequirementParameter (System.String)
Parameter Summary: The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK SDK.
Parameter: value (object)
Parameter Summary: The value to set this extra requirement parameter. You will typically use System.Convert to convert the value to the type you need.
Parameter: sc (ExtraRequirementsSetContexts)
Parameter Summary: The context of this operation.

Method: Rhino.Render.RenderContent.SetExtraRequirementParameter(string contentParameterName, string extraRequirementParameter, object value, ExtraRequirementsSetContexts sc)
Return: bool
Modifiers: public
Summary: Extra requirements are a way of specifying extra functionality on parameters in the automatic UI. See IAutoUIExtraRequirements.h in the C++ RDK SDK for string definitions for the parameter names.
Parameter: contentParameterName (string)
Parameter Summary: The parameter or field internal name to which this query applies.
Parameter: extraRequirementParameter (string)
Parameter Summary: The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK SDK.
Parameter: value (object)
Parameter Summary: The value to set this extra requirement parameter. You will typically use System.Convert to convert the value to the type you need.
Parameter: sc (ExtraRequirementsSetContexts)
Parameter Summary: The context of this operation.

Method: Rhino.Render.RenderContent.SetIsRenderHashRecursive(bool recursive)
Return: void
Modifiers: public
Summary: By default, RenderHash recurses into children when computing the render hash. However, some applications may require children to be excluded from the render hash calculation. Call this method to enable or disable recursing into children. see <b>RenderHash</b>

Method: Rhino.Render.RenderContent.SetName(string name, bool renameEvents, bool ensureNameUnique)
Return: void
Modifiers: public
Summary: Set instance name for this content

Method: Rhino.Render.RenderContent.SetParameter(System.String parameterName, object value, ChangeContexts changeContext)
Return: bool
Modifiers: public, virtual
Summary: Set the named parameter value for this content instance. If you do not support this parameter, call the base class.

Method: Rhino.Render.RenderContent.SetParameter(System.String parameterName, object value)
Return: bool
Modifiers: public, virtual
Summary: Set the named parameter value for this content instance. If you do not support this parameter, call the base class.

Method: Rhino.Render.RenderContent.SetRenderHash(uint hash)
Return: void
Modifiers: public
Summary: This method is deprecated and no longer called. For more information see <b>CalculateRenderHash</b>

Method: Rhino.Render.RenderContent.SmartUngroupRecursive()
Return: bool
Modifiers: public
Summary: Remove this content and all its children from any instance groups they may be a member of. If any content in the same document is left alone in the group, that content is also ungrouped. Records undo and sends events OnContentChanged and OnContentGroupIdChanged. \note This method is designed to be called from a content UI and is intended for RDK internal use but may be used as an expert user override.

Method: Rhino.Render.RenderContent.Ungroup()
Return: bool
Modifiers: public
Summary: Remove this content from any instance group it may be a member of. Does not record undo but does send the OnContentGroupIdChanged event.

Method: Rhino.Render.RenderContent.UngroupRecursive()
Return: bool
Modifiers: public
Summary: Remove this content and all its children from any instance groups they may be a member of. Does not record undo but does send the OnContentGroupIdChanged event.

Method: Rhino.Render.RenderContent.Uninitialize()
Return: void
Modifiers: public

Method: Rhino.Render.RenderContent.UseCount()
Return: int
Modifiers: public
Summary: UseCount returns how many times the content is used

Method: Rhino.Render.RenderContent.VirtualIcon(Size size, out Bitmap bitmap)
Return: bool
Modifiers: virtual, public
Summary: Icon to display in the content browser, this bitmap needs to be valid for the life of this content object, the content object that returns the bitmap is responsible for disposing of the bitmap.
Parameter: size (Size)
Parameter Summary: Requested icon size
Parameter: bitmap (Bitmap)
Parameter Summary:

Class: Rhino.Render.RenderContentChangedEventArgs
Summary: EventArgs for the RenderContentChanged event

Property: Rhino.Render.RenderContentChangedEventArgs.ChangeContext
Return: ChangeContexts
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderContentChangedEventArgs.OldContent
Return: RenderContent
Modifiers: public
Accessors: get

Class: Rhino.Render.RenderContentCollection
Summary: A collection of Render content

Constructor: Rhino.Render.RenderContentCollection.RenderContentCollection()
Summary: Construct an empty collection of RenderContent objects

Constructor: Rhino.Render.RenderContentCollection.RenderContentCollection(IntPtr nativePtr)
Summary: Internal function to create collection from native pointer

Property: Rhino.Render.RenderContentCollection.CppPointer
Return: IntPtr
Modifiers: public
Summary: Internal function to get native pointer
Accessors: get

Method: Rhino.Render.RenderContentCollection.Add(Rhino.Render.RenderContentCollection collection)
Return: void
Modifiers: public
Summary: Add an array of non-const contents to the collection.
Parameter: collection (Rhino.Render.RenderContentCollection)
Parameter Summary: The array of contents to add

Method: Rhino.Render.RenderContentCollection.Append(Rhino.Render.RenderContent content)
Return: void
Modifiers: public
Summary: Append a RenderContent to the collection
Parameter: content (Rhino.Render.RenderContent)
Parameter Summary: The array of contents to append.

Method: Rhino.Render.RenderContentCollection.Clear()
Return: void
Modifiers: public
Summary: Clear the collection.

Method: Rhino.Render.RenderContentCollection.ContentAt(int index)
Return: RenderContent
Modifiers: public
Summary: Content at index

Method: Rhino.Render.RenderContentCollection.ContentNeedsPreviewThumbnail(Rhino.Render.RenderContent c, bool includeChildren)
Return: bool
Modifiers: public
Summary: To be documented

Method: Rhino.Render.RenderContentCollection.Count()
Return: int
Modifiers: public
Summary: The number of items in the collection.

Method: Rhino.Render.RenderContentCollection.Dispose()
Return: void
Modifiers: public
Summary: Dispose function for RenderContentCollection

Method: Rhino.Render.RenderContentCollection.Find_Sel(System.Guid uuid)
Return: RenderContent
Modifiers: public
Summary: TODO

Method: Rhino.Render.RenderContentCollection.FirstTag()
Return: string
Modifiers: public
Summary: Gets the first tag

Method: Rhino.Render.RenderContentCollection.GetEnumerator()
Return: System.Collections.IEnumerator
Modifiers: public

Method: Rhino.Render.RenderContentCollection.GetFilterContentByUsage()
Return: FilterContentByUsage
Modifiers: public
Summary: Gets usage filter type for collection

Method: Rhino.Render.RenderContentCollection.GetForcedVaries()
Return: bool
Modifiers: public
Summary: See SetForcedVaries

Method: Rhino.Render.RenderContentCollection.GetSearchPattern()
Return: string
Modifiers: public
Summary: See SetSearchPattern

Method: Rhino.Render.RenderContentCollection.Iterator()
Return: ContentCollectionIterator
Modifiers: public
Summary: Gets an iterator for the collection

Method: Rhino.Render.RenderContentCollection.NextTag()
Return: string
Modifiers: public
Summary: Call FirstTag first - this gets the next tag

Method: Rhino.Render.RenderContentCollection.Remove(Rhino.Render.RenderContentCollection collection)
Return: void
Modifiers: public
Summary: Remove an array of contents from the collection.
Parameter: collection (Rhino.Render.RenderContentCollection)
Parameter Summary: Collection of contents to remove

Method: Rhino.Render.RenderContentCollection.Set(Rhino.Render.RenderContentCollection collection)
Return: void
Modifiers: public
Summary: Set an array of const contents as the collection.
Parameter: collection (Rhino.Render.RenderContentCollection)
Parameter Summary: The array of contents to set.

Method: Rhino.Render.RenderContentCollection.SetForcedVaries(bool b)
Return: void
Modifiers: public
Summary: Set the collection to 'varies'. Only valid if the collection is a 'selection' collection. Useful for clients that only support single content selections.
Parameter: b (bool)
Parameter Summary: Varies if true

Method: Rhino.Render.RenderContentCollection.SetSearchPattern(string pattern)
Return: void
Modifiers: public
Summary: Sets a search pattern for filtering contents. This is not actually used by the iterator, but is stored for use by any UI that wants to filter contents based on a search string by using the function RhRdkCheckSearchPattern()
Parameter: pattern (string)
Parameter Summary: The search pattern. See RhRdkCheckSearchPattern() for details

Class: Rhino.Render.RenderContentEventArgs
Summary: Event args for RenderContent

Property: Rhino.Render.RenderContentEventArgs.Content
Return: RenderContent
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderContentEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get set

Property: Rhino.Render.RenderContentEventArgs.EnvironmentUsage
Return: Usage
Modifiers: public
Summary: Meaningful for CurrentEnvironmentChanged event. Will be one of Background, ReflectionAndRefraction or Skylighting.
Accessors: get set

Property: Rhino.Render.RenderContentEventArgs.EnvironmentUsageEx
Return: EnvironmentUsage
Modifiers: public
Summary: Meaningful for CurrentEnvironmentChanged event. Will be one of Background, Reflection or Skylighting.
Accessors: get set

Property: Rhino.Render.RenderContentEventArgs.Reason
Return: RenderContentChangeReason
Modifiers: public
Summary: Not when used in CurrentEnvironmentChanged (defaults to None).
Accessors: get set

Class: Rhino.Render.RenderContentFieldChangedEventArgs
Summary: EventArgs for the RenderContentFieldChanged event

Property: Rhino.Render.RenderContentFieldChangedEventArgs.FieldName
Return: string
Modifiers: public
Accessors: get

Class: Rhino.Render.RenderContentKindList
Summary: Models a collection of kinds.

Constructor: Rhino.Render.RenderContentKindList.RenderContentKindList()
Summary: Construct an empty kind list

Constructor: Rhino.Render.RenderContentKindList.RenderContentKindList(IntPtr pRdkRenderContentKindList)
Summary: Construct from native pointer - internal use only.

Constructor: Rhino.Render.RenderContentKindList.RenderContentKindList(RenderContentKindList kind_list)
Summary: Construct a kind list from another.

Property: Rhino.Render.RenderContentKindList.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderContentKindList.Add(RenderContentKind kind)
Return: void
Modifiers: public
Summary: Add a kind to a kind list.
Parameter: kind (RenderContentKind)
Parameter Summary: The RenderContent kind to add.

Method: Rhino.Render.RenderContentKindList.Contains(RenderContentKind kind)
Return: bool
Modifiers: public
Summary: Query whether or not the collection contains a particular kind designation.

Method: Rhino.Render.RenderContentKindList.Count()
Return: int
Modifiers: public
Summary: The number of kinds in the collection

Method: Rhino.Render.RenderContentKindList.Dispose()
Return: void
Modifiers: public
Summary: Dispose a kind list.

Method: Rhino.Render.RenderContentKindList.SingleKind()
Return: RenderContentKind
Modifiers: public
Summary: The single kind in the list. If the list does not contain exactly one kind, returns 'None'.

Class: Rhino.Render.RenderContentManager
Summary: RenderContentManager's RestoreRenderContents method unpacks the default render contents from the from the application and places them in the User's folder.  Only available on Mac at the moment.

Constructor: Rhino.Render.RenderContentManager.RenderContentManager()
Summary: Initializes a new instance of the RenderContentManager class

Property: Rhino.Render.RenderContentManager.UserRenderContentPath
Return: string
Modifiers: public, static
Summary: Get the path to: Windows: C:\Users\user\AppData\Roaming\McNeel\Rhinoceros\6.0\Localization\en-US\Render Content macOS: ~/Library/Application Support/McNeel/Rhinoceros/6.0/Render Content If a CustomLibraryPath is set, this is returned
Accessors: get

Method: Rhino.Render.RenderContentManager.RestoreRenderContent()
Return: bool
Modifiers: public, static
Summary: Unpacks the default render contents from the from the application and places them in the User's folder. This will restore the default versions if the version of Rhino that is running is newer than the contents of the last Rhino that wrote the version.txt file.  If the version.txt file is not present, it will automatically restore the default contents.  This does not overwrite files that the user has changed.

Class: Rhino.Render.RenderContentSerializer
Summary: Used to import and export custom render content such as materials, environments and textures.  You must override RenderPlugIn.RenderContentSerializers() and return an array of derived RenderContentSerializer class types to add to the content browsers.

Constructor: Rhino.Render.RenderContentSerializer.RenderContentSerializer(string fileExtension, RenderContentKind contentKind, bool canRead, bool canWrite)
Summary: Protected constructor to be called from derived class

Property: Rhino.Render.RenderContentSerializer.CanRead
Return: bool
Modifiers: public
Summary: If True then the file type can be imported and will be included in the file open box when importing the specified render content kind.
Accessors: get

Property: Rhino.Render.RenderContentSerializer.CanWrite
Return: bool
Modifiers: public
Summary: If True then the file type can be exported and will be included in the file save box when exporting the specified render content kind.
Accessors: get

Property: Rhino.Render.RenderContentSerializer.ContentKind
Return: RenderContentKind
Modifiers: public
Summary: Kind of content created when importing or exporting this file type - ie, Material, Texture or Environment
Accessors: get

Property: Rhino.Render.RenderContentSerializer.ContentType
Return: RenderContentKind
Modifiers: public
Summary: Kind of content created when importing or exporting this file type.  Obsolete - use ContentKind
Accessors: get

Property: Rhino.Render.RenderContentSerializer.EnglishDescription
Return: String
Modifiers: public, abstract
Summary: English string describing this plug-in
Accessors: get

Property: Rhino.Render.RenderContentSerializer.FileExtension
Return: string
Modifiers: public
Summary: File extension associated with this serialize object
Accessors: get

Property: Rhino.Render.RenderContentSerializer.LocalDescription
Return: String
Modifiers: public, virtual
Summary: Localized plug-in description
Accessors: get

Method: Rhino.Render.RenderContentSerializer.CanLoadMultiple()
Return: bool
Modifiers: public, virtual
Summary: If True the plug-in is capable of loading multiple contents.

Method: Rhino.Render.RenderContentSerializer.LoadMultiple(RhinoDoc doc, IEnumerable<string> fileNames, RenderContentKind contentKind, LoadMultipleFlags flags)
Return: bool
Modifiers: public, virtual
Summary: Create any number of new render contents loaded from any number of files.
Parameter: doc (RhinoDoc)
Parameter Summary: Rhino document
Parameter: fileNames (IEnumerable<string>)
Parameter Summary: A list of filenames to load from. Each file can contain any number of render contents.
Parameter: contentKind (RenderContentKind)
Parameter Summary: Only used by I/O plug-ins that support multiple kinds. It tells the plug-in which content kind to create. If the plug-in only supports a single content kind, it can ignore this parameter.
Parameter: flags (LoadMultipleFlags)
Parameter Summary: A set of flags from the enum above.

Method: Rhino.Render.RenderContentSerializer.Read(System.String pathToFile)
Return: RenderContent
Modifiers: public, abstract
Summary: Called to when importing a file, file should be parsed and converted to a valid RenderContent object.
Parameter: pathToFile (System.String)
Parameter Summary: Full path of the file to load.

Method: Rhino.Render.RenderContentSerializer.RegisterSerializer(System.Guid id)
Return: bool
Modifiers: public
Summary: Register the RenderContentSerializer
Parameter: id (System.Guid)
Parameter Summary: Plug-in id

Method: Rhino.Render.RenderContentSerializer.ReportContentAndFile(RenderContent renderContent, string pathToFile, int flags)
Return: void
Modifiers: public, virtual
Summary: This is called from your implementation of LoadMultiple() to add a content and the file it was loaded from when the LoadMultipleFlags.Preload flag is NOT set. See LoadMultiple() for an explanation of this method's use.
Parameter: renderContent (RenderContent)
Parameter Summary: Render content that was loaded from the file.
Parameter: pathToFile (string)
Parameter Summary: Full path of the file that the render content was loaded from.
Parameter: flags (int)
Parameter Summary: Flags for future use; should be passed as zero.

Method: Rhino.Render.RenderContentSerializer.ReportDeferredContentAndFile(RenderContent renderContent, string pathToFile, int flags)
Return: void
Modifiers: public, virtual
Summary: This is called from your implementation of LoadMultiple() to add a 'deferred' content and the file it will be loaded from when the LoadMultipleFlags.Preload flag is set. See LoadMultiple() for an explanation of this method's use. \param c is the deferred content. \param wszFullPath is the full path to the file that 'c' will be loaded from. \param flags is reserved for future use; you should pass zero. \param pReserved is reserved for future use; you should pass nullptr. */
Parameter: renderContent (RenderContent)
Parameter Summary: Deferred render content - represents all contents that will be loaded from the file.
Parameter: pathToFile (string)
Parameter Summary: Full path of the file that render contents will be loaded from.
Parameter: flags (int)
Parameter Summary: Flags for future use; should be passed as zero.

Method: Rhino.Render.RenderContentSerializer.Write(System.String pathToFile, RenderContent renderContent, CreatePreviewEventArgs previewArgs)
Return: bool
Modifiers: public, abstract
Summary: Called to save a custom RenderContent object as an external file.
Parameter: pathToFile (System.String)
Parameter Summary: Full path of file to write
Parameter: renderContent (RenderContent)
Parameter Summary: Render content to save
Parameter: previewArgs (CreatePreviewEventArgs)
Parameter Summary: Parameters used to generate a preview image which may be embedded in the exported file.

Class: Rhino.Render.RenderContentTableEventForwarder.RenderContentTableEventArgs

Class: Rhino.Render.RenderContentType
Summary: Represents one of the render content types registered with Rhino.

Constructor: Rhino.Render.RenderContentType.RenderContentType(Guid typeId)

Property: Rhino.Render.RenderContentType.Id
Return: Guid
Modifiers: public
Summary: Returns the type identifier associated with this type.
Accessors: get

Property: Rhino.Render.RenderContentType.InternalName
Return: String
Modifiers: public
Summary: Returns the internal name identifier associated with this type.
Accessors: get

Property: Rhino.Render.RenderContentType.PlugInId
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderContentType.RenderEngineId
Return: Guid
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderContentType.GetAllAvailableTypes()
Return: RenderContentType[]
Modifiers: public, static
Summary: Gets an array of all available render content types registered with Rhino.

Method: Rhino.Render.RenderContentType.NewContentFromTypeId(System.Guid typeId, RhinoDoc doc)
Return: RenderContent
Modifiers: public, static

Method: Rhino.Render.RenderContentType.NewContentFromTypeId(System.Guid typeId)
Return: RenderContent
Modifiers: public, static
Summary: Create a new content specified by the Guid.  This function can be used to create temporary content, as it calls ::RhRdkContentFactories().NewContentFromType().

Method: Rhino.Render.RenderContentType.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderContentType.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.RenderContentType.NewRenderContent()
Return: RenderContent
Modifiers: public
Summary: Returns a new instance of the render content of this type.  This content can be added to a persistant list.

Class: Rhino.Render.RenderEndEventArgs
Summary: Contains information about why OnRenderEnd was called

Class: Rhino.Render.RenderEnvironment

Constructor: Rhino.Render.RenderEnvironment.RenderEnvironment()
Summary: Initializes a new instance of the RenderEnvironment class

Property: Rhino.Render.RenderEnvironment.CurrentEnvironment
Return: RenderEnvironment
Modifiers: public, static
Accessors: get set

Property: Rhino.Render.RenderEnvironment.TextureChildSlotName
Return: String
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderEnvironment.NewBasicEnvironment(SimulatedEnvironment environment, RhinoDoc doc)
Return: RenderEnvironment
Modifiers: public, static

Method: Rhino.Render.RenderEnvironment.NewBasicEnvironment(SimulatedEnvironment environment)
Return: RenderEnvironment
Modifiers: public, static
Summary: Constructs a new <b>RenderEnvironment</b> from a <b>SimulatedEnvironment</b> .
Parameter: environment (SimulatedEnvironment)
Parameter Summary: The environment to create the basic environment from.

Method: Rhino.Render.RenderEnvironment.SimulateEnvironment(bool isForDataOnly)
Return: SimulatedEnvironment
Modifiers: public, virtual

Method: Rhino.Render.RenderEnvironment.SimulateEnvironment(ref SimulatedEnvironment simulation, bool isForDataOnly)
Return: void
Modifiers: public, virtual

Class: Rhino.Render.RenderEnvironmentTable

Property: Rhino.Render.RenderEnvironmentTable.Count
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderEnvironmentTable.this[int index]
Return: RenderEnvironment
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.Add(RenderEnvironment c)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.BeginChange(RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.EndChange()
Return: void
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.Find(System.Guid id)
Return: RenderEnvironment
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.GetEnumerator()
Return: IEnumerator<RenderEnvironment>
Modifiers: public

Method: Rhino.Render.RenderEnvironmentTable.Remove(RenderEnvironment c)
Return: bool
Modifiers: public

Class: Rhino.Render.RenderMaterial

Constructor: Rhino.Render.RenderMaterial.RenderMaterial()
Summary: Initializes a new instance of the RenderMaterial class

Property: Rhino.Render.RenderMaterial.GemMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.GlassMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.MetalMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.PaintMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.PictureMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.PlasterMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.PlasticMaterialGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.RenderMaterial.DefaultPreviewBackgroundType
Return: PreviewBackgroundType
Modifiers: public
Summary: Set or get the default scene background for the image that appears in preview panes
Accessors: get set

Property: Rhino.Render.RenderMaterial.DefaultPreviewGeometryType
Return: PreviewGeometryType
Modifiers: public
Summary: Set or get the default geometry that appears in preview panes
Accessors: get set

Property: Rhino.Render.RenderMaterial.DefaultPreviewSize
Return: double
Modifiers: public
Summary: The default preview geometry size
Accessors: get set

Property: Rhino.Render.RenderMaterial.SmellsLikeGem
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeGlass
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeMetal
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikePaint
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikePlaster
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikePlastic
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedGem
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedGlass
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedMetal
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedPaint
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedPlaster
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterial.SmellsLikeTexturedPlastic
Return: bool
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderMaterial.CreateBasicMaterial(DocObjects.Material material, RhinoDoc doc)
Return: RenderMaterial
Modifiers: public, static

Method: Rhino.Render.RenderMaterial.CreateBasicMaterial(DocObjects.Material material)
Return: RenderMaterial
Modifiers: public, static
Summary: Constructs a new basic material from a <b>Rhino.DocObjects.Material</b> .
Parameter: material (DocObjects.Material)
Parameter Summary: (optional)The material to create the basic material from.

Method: Rhino.Render.RenderMaterial.CreateImportedMaterial(DocObjects.Material material, RhinoDoc doc, bool reference)
Return: RenderMaterial
Modifiers: public, static

Method: Rhino.Render.RenderMaterial.FromMaterial(DocObjects.Material material, RhinoDoc doc)
Return: RenderMaterial
Modifiers: public, static
Summary: Constructs a new material from a <b>Rhino.DocObjects.Material</b> .
Parameter: material (DocObjects.Material)
Parameter Summary: (optional)The material to create the material from.
Parameter: doc (RhinoDoc)
Parameter Summary: The document to associate this material with.

Method: Rhino.Render.RenderMaterial.ImportMaterialAndAssignToLayers(RhinoDoc doc, string file, IEnumerable<int> layer_indices)
Return: bool
Modifiers: public, static
Summary: Imports a material file (.RMTL) and assigns the imported material to one or more layers.
Parameter: doc (RhinoDoc)
Parameter Summary: The document to attach the imported material to and which also contains the layers.
Parameter: file (string)
Parameter Summary: The full path to the RMTL file to be imported.
Parameter: layer_indices (IEnumerable<int>)
Parameter Summary: An array of indices of the layers to assign the material to.

Method: Rhino.Render.RenderMaterial.SlotFromTextureType(DocObjects.TextureType tt)
Return: StandardChildSlots
Modifiers: static, public

Method: Rhino.Render.RenderMaterial.TextureTypeFromSlot(StandardChildSlots slot)
Return: DocObjects.TextureType
Modifiers: static, public

Method: Rhino.Render.RenderMaterial.AssignTo(DocObjects.ObjRef or)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderMaterial.AssignTo(IEnumerable<ObjRef> objrefs, AssignToSubFaceChoices sfc, AssignToBlockChoices bc, bool bInteractive)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderMaterial.ConvertToPhysicallyBased(RenderTexture.TextureGeneration tg)
Return: DocObjects.PhysicallyBasedMaterial
Modifiers: public
Summary: Returns a material that is the best approximation of the original, but as a physically based material.
Parameter: tg (RenderTexture.TextureGeneration)
Parameter Summary: Determines whether simulated textures will be generated as files.

Method: Rhino.Render.RenderMaterial.GetTextureAmountFromUsage(RenderMaterial.StandardChildSlots slot)
Return: double
Modifiers: public

Method: Rhino.Render.RenderMaterial.GetTextureFromUsage(RenderMaterial.StandardChildSlots slot)
Return: RenderTexture
Modifiers: public

Method: Rhino.Render.RenderMaterial.GetTextureOnFromUsage(RenderMaterial.StandardChildSlots slot)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderMaterial.HandleTexturedValue(string slotname, TexturedValue<T> tc)
Return: bool
Modifiers: public
Summary: Handle a textured content field. Values will be read into an instance of TexturedColor

Method: Rhino.Render.RenderMaterial.SimulatedMaterial(RenderTexture.TextureGeneration tg)
Return: DocObjects.Material
Modifiers: public

Method: Rhino.Render.RenderMaterial.SimulateMaterial(bool isForDataOnly)
Return: DocObjects.Material
Modifiers: public, virtual
Summary: Call this function to receive the simulation for a RenderMaterial used by the display and other rendering engines.
Parameter: isForDataOnly (bool)
Parameter Summary: Called when only asking for a hash - don't write any textures to the disk - just provide the filenames they will get.

Method: Rhino.Render.RenderMaterial.SimulateMaterial(ref DocObjects.Material simulation, bool isForDataOnly)
Return: void
Modifiers: public, virtual
Summary: Override this function to provide a Rhino.DocObjects.Material definition for this material to be used by other rendering engines including the display.
Parameter: simulation (DocObjects.Material)
Parameter Summary: Set the properties of the input basic material to provide the simulation for this material.
Parameter: isForDataOnly (bool)
Parameter Summary: Called when only asking for a hash - don't write any textures to the disk - just provide the filenames they will get.

Method: Rhino.Render.RenderMaterial.SimulateMaterial(ref DocObjects.Material simulation, RenderTexture.TextureGeneration tg)
Return: void
Modifiers: public, virtual
Summary: Override this function to provide a Rhino.DocObjects.Material definition for this material to be used by other rendering engines including the display.
Parameter: simulation (DocObjects.Material)
Parameter Summary: Set the properties of the input basic material to provide the simulation for this material.
Parameter: tg (RenderTexture.TextureGeneration)
Parameter Summary: See RenderTexture.TextureGeneration.

Method: Rhino.Render.RenderMaterial.TextureChildSlotName(StandardChildSlots slot)
Return: string
Modifiers: public, virtual
Summary: Override this function to provide information about which texture is used for the standard (ie - defined in ON_Texture) texture channels.
Parameter: slot (StandardChildSlots)
Parameter Summary: An valid slot.

Method: Rhino.Render.RenderMaterial.ToMaterial(RenderTexture.TextureGeneration tg)
Return: DocObjects.Material
Modifiers: public

Class: Rhino.Render.RenderMaterial.BasicMaterialParameterNames
Summary: Parameter names for use in GetNamedParameter and SetNamedParameter with basic materials.

Constructor: Rhino.Render.RenderMaterial.BasicMaterialParameterNames.RenderMaterial.BasicMaterialParameterNames()
Summary: Initializes a new instance of the RenderMaterial.BasicMaterialParameterNames class

Class: Rhino.Render.RenderMaterialTable

Property: Rhino.Render.RenderMaterialTable.Count
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderMaterialTable.this[int index]
Return: RenderMaterial
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.Add(RenderMaterial c)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.BeginChange(RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.EndChange()
Return: void
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.Find(System.Guid id)
Return: RenderMaterial
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.GetEnumerator()
Return: IEnumerator<RenderMaterial>
Modifiers: public

Method: Rhino.Render.RenderMaterialTable.Remove(RenderMaterial c)
Return: bool
Modifiers: public

Class: Rhino.Render.RenderPanels
Summary: This class is used to extend the standard Render user interface

Method: Rhino.Render.RenderPanels.FromRenderSessionId(PlugIns.PlugIn plugIn, System.Type panelType, System.Guid renderSessionId)
Return: object
Modifiers: public, static
Summary: Get the instance of a render panel associated with a specific render session, this is useful when it is necessary to update a control from a  <b>RenderPipeline</b>
Parameter: plugIn (PlugIns.PlugIn)
Parameter Summary: The plug-in that registered the custom user interface
Parameter: panelType (System.Type)
Parameter Summary: The type of panel to return
Parameter: renderSessionId (System.Guid)
Parameter Summary: The <b>RenderPipeline.RenderSessionId</b> of a specific render session.

Method: Rhino.Render.RenderPanels.RegisterPanel(PlugIn plugin, RenderPanelType renderPanelType, System.Type panelType, string caption, bool alwaysShow, bool initialShow)
Return: void
Modifiers: public
Summary: Register custom render user interface with Rhino.  This should only be done in <b>RenderPlugIn.RegisterRenderPanels</b> .  Panels registered after <b>RenderPlugIn.RegisterRenderPanels</b> is called will be ignored.
Parameter: plugin (PlugIn)
Parameter Summary: The plug-in providing the custom user interface
Parameter: renderPanelType (RenderPanelType)
Parameter Summary: See <b>RenderPanelType</b> for supported user interface types.
Parameter: panelType (System.Type)
Parameter Summary: The type of object to be created and added to the render container.
Parameter: caption (string)
Parameter Summary: The caption for the custom user interface.
Parameter: alwaysShow (bool)
Parameter Summary: If True the custom user interface will always be visible, if False then it may be hidden or shown as requested by the user.
Parameter: initialShow (bool)
Parameter Summary: Initial visibility state of the custom user interface control.

Method: Rhino.Render.RenderPanels.RegisterPanel(PlugIn plugin, RenderPanelType renderPanelType, System.Type panelType, System.Guid renderEngineId, string caption, bool alwaysShow, bool initialShow, ExtraSidePanePosition pos)
Return: void
Modifiers: public
Summary: Register custom render user interface with Rhino.  This should only be done in  <b>RenderPlugIn.RegisterRenderPanels</b> . Panels registered after <b>RenderPlugIn.RegisterRenderPanels</b> is called will be ignored.
Parameter: plugin (PlugIn)
Parameter Summary: The plug-in providing the custom user interface
Parameter: renderPanelType (RenderPanelType)
Parameter Summary: See <b>RenderPanelType</b> for supported user interface types.
Parameter: panelType (System.Type)
Parameter Summary: The type of object to be created and added to the render container.
Parameter: renderEngineId (System.Guid)
Parameter Summary: The render engine id allowing the UI to be shown.
Parameter: caption (string)
Parameter Summary: The caption for the custom user interface.
Parameter: alwaysShow (bool)
Parameter Summary: If True the custom user interface will always be visible, if False then it may be hidden or shown as requested by the renderer.
Parameter: initialShow (bool)
Parameter Summary: Initial visibility state of the custom user interface control.
Parameter: pos (ExtraSidePanePosition)
Parameter Summary: The position to dock the extra side pane at.

Method: Rhino.Render.RenderPanels.RegisterPanel(PlugIn plugin, RenderPanelType renderPanelType, System.Type panelType, System.Guid renderEngineId, string caption, bool alwaysShow, bool initialShow)
Return: void
Modifiers: public
Summary: Register custom render user interface with Rhino.  This should only be done in  <b>RenderPlugIn.RegisterRenderPanels</b> . Panels registered after <b>RenderPlugIn.RegisterRenderPanels</b> is called will be ignored.
Parameter: plugin (PlugIn)
Parameter Summary: The plug-in providing the custom user interface
Parameter: renderPanelType (RenderPanelType)
Parameter Summary: See <b>RenderPanelType</b> for supported user interface types.
Parameter: panelType (System.Type)
Parameter Summary: The type of object to be created and added to the render container.
Parameter: renderEngineId (System.Guid)
Parameter Summary: The render engine id allowing the UI to be shown.
Parameter: caption (string)
Parameter Summary: The caption for the custom user interface.
Parameter: alwaysShow (bool)
Parameter Summary: If True the custom user interface will always be visible, if False then it may be hidden or shown as requested by the renderer.
Parameter: initialShow (bool)
Parameter Summary: Initial visibility state of the custom user interface control.

Class: Rhino.Render.RenderPipeline
Summary: Provides facilities to a render plug-in for integrating with the standard Rhino render window. Also adds helper functions for processing a render scene. This is the suggested class to use when integrating a renderer with Rhino and maintaining a "standard" user interface that users will expect.

Constructor: Rhino.Render.RenderPipeline.RenderPipeline(RhinoDoc doc, RunMode mode, PlugIn plugin, Size sizeRendering, string caption, StandardChannels channels, bool reuseRenderWindow, bool clearLastRendering, AsyncRenderContext aRC)
Summary: Constructs a subclass of this object on the stack in your Rhino plug-in's Render() or RenderWindow() implementation. This constructor should be used when a non-blocking RenderWindow is required.  Note that the asynchronous render context will not be used when mode is Scripted.

Constructor: Rhino.Render.RenderPipeline.RenderPipeline(RhinoDoc doc, RunMode mode, PlugIn plugin, Size sizeRendering, string caption, StandardChannels channels, bool reuseRenderWindow, bool clearLastRendering)
Summary: Constructs a subclass of this object on the stack in your Rhino plug-in's Render() or RenderWindow() implementation.

Property: Rhino.Render.RenderPipeline.ConfirmationSeconds
Return: int
Modifiers: public
Summary: Sets the number of seconds that need to elapse during rendering before the user is asked if the rendered image should be saved.
Accessors: set

Property: Rhino.Render.RenderPipeline.PlugIn
Return: PlugIn
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderPipeline.RenderSessionId
Return: Guid
Modifiers: public
Summary: Get the Id associated with this render session, this is useful when looking up Rhino.Render.RenderPanels.
Accessors: get

Method: Rhino.Render.RenderPipeline.LocalizeRenderReturnCode(RenderReturnCode rc)
Return: string
Modifiers: public, static

Method: Rhino.Render.RenderPipeline.RenderSize()
Return: Size
Modifiers: public, static

Method: Rhino.Render.RenderPipeline.RenderSize(RhinoDoc doc, bool fromRenderSources)
Return: Size
Modifiers: public, static
Summary: Get the render size as specified in the ON_3dmRenderSettings, and from RenderSources when fromRenderSources is true.

Method: Rhino.Render.RenderPipeline.RenderSize(RhinoDoc doc)
Return: Size
Modifiers: public, static
Summary: Get the render size as specified in the ON_3dmRenderSettings. Will automatically return the correct size based on the ActiveView or custom settings.

Method: Rhino.Render.RenderPipeline.AddLightToScene(Rhino.DocObjects.LightObject light)
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.AddRenderMeshToScene(Rhino.DocObjects.RhinoObject obj, Rhino.DocObjects.Material material, Rhino.Geometry.Mesh mesh)
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.CloseWindow()
Return: bool
Modifiers: public
Summary: Closes the render window associated with this render instance.

Method: Rhino.Render.RenderPipeline.CommandResult()
Return: Rhino.Commands.Result
Modifiers: public

Method: Rhino.Render.RenderPipeline.ContinueModal()
Return: bool
Modifiers: protected, abstract
Summary: Frequently called during a rendering by the frame work in order to determine if the rendering should continue.

Method: Rhino.Render.RenderPipeline.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderPipeline.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.GetRenderWindow()
Return: RenderWindow
Modifiers: public
Summary: Get the RenderWindow associated with this RenderPipeline instance.  This is virtual rather than abstract for V5 compat

Method: Rhino.Render.RenderPipeline.GetRenderWindow(bool withWireframeChannel, bool fromRenderViewSource)
Return: RenderWindow
Modifiers: public
Summary: As GetRenderWindow(). The parameter withWireframeChannel controls whether the returned RenderWindow will have the channel added. The parameter fromRenderViewSource controls from where the RenderSize is queried.
Parameter: withWireframeChannel (bool)
Parameter Summary: True if the RenderWindow needs to have a wireframe channel.
Parameter: fromRenderViewSource (bool)
Parameter Summary: True if the RenderWindow size needs to be set from RenderViewSource size. False will use the active view.

Method: Rhino.Render.RenderPipeline.GetRenderWindow(bool withWireframeChannel)
Return: RenderWindow
Modifiers: public
Summary: As GetRenderWindow(), but if withWireframeChannel is true the returned RenderWindow will have the channel added.

Method: Rhino.Render.RenderPipeline.GetRenderWindow(DocObjects.ViewportInfo viewportInfo, bool fromRenderViewSource, Rectangle region)
Return: RenderWindow
Modifiers: public
Summary: As GetRenderWindow(). The parameter withWireframeChannel controls whether the returned RenderWindow will have the channel added. The parameter fromRenderViewSource controls from where the RenderSize is queried. The viewportInfo instance will be used to set up wireframe channel. This is necessary for rendering different view than is currently active in the viewport
Parameter: viewportInfo (DocObjects.ViewportInfo)
Parameter Summary: ViewportInfo used to generate the wireframe channel
Parameter: fromRenderViewSource (bool)
Parameter Summary: True if the RenderWindow size needs to be set from RenderViewSource size. False will use the active view.
Parameter: region (Rectangle)
Parameter Summary: The region to render. Usually the same as the full render window but in the case of RenderWindow and RenderInWindow, it is the region the user selected in the viewport.

Method: Rhino.Render.RenderPipeline.GetRenderWindow(DocObjects.ViewportInfo viewportInfo, bool fromRenderViewSource)
Return: RenderWindow
Modifiers: public
Summary: As GetRenderWindow(). The parameter withWireframeChannel controls whether the returned RenderWindow will have the channel added. The parameter fromRenderViewSource controls from where the RenderSize is queried. The viewportInfo instance will be used to set up wireframe channel. This is necessary for rendering different view than is currently active in the viewport
Parameter: viewportInfo (DocObjects.ViewportInfo)
Parameter Summary: ViewportInfo used to generate the wireframe channel for
Parameter: fromRenderViewSource (bool)
Parameter Summary: True if the RenderWindow size needs to be set from RenderViewSource size. False will use the active view.

Method: Rhino.Render.RenderPipeline.GetRenderWindowFromRenderViewSource(bool fromRenderViewSource)
Return: RenderWindow
Modifiers: public
Summary: Like GetRenderWindow(), but with the size for RenderWindow set from RenderViewSources if fromRenderViewSource is set to true
Parameter: fromRenderViewSource (bool)
Parameter Summary: True if

Method: Rhino.Render.RenderPipeline.IgnoreRhinoObject(Rhino.DocObjects.RhinoObject obj)
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.NeedToProcessGeometryTable()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.NeedToProcessLightTable()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.OnRenderBegin()
Return: bool
Modifiers: protected, abstract
Summary: Called by the framework when it is time to start rendering, the render window will be created at this point and it is safe to start

Method: Rhino.Render.RenderPipeline.OnRenderBeginQuiet(Size imageSize)
Return: bool
Modifiers: protected, virtual
Summary: Called by the framework when it is time to start rendering quietly, there is no user interface when rendering in this mode and the default post process effects will get applied to the scene when the rendering is complete.

Method: Rhino.Render.RenderPipeline.OnRenderEnd(RenderEndEventArgs e)
Return: void
Modifiers: protected, abstract
Summary: Called by the framework when the user closes the render window or clicks on the stop button in the render window.

Method: Rhino.Render.RenderPipeline.OnRenderWindowBegin(Rhino.Display.RhinoView view, System.Drawing.Rectangle rectangle)
Return: bool
Modifiers: protected, abstract

Method: Rhino.Render.RenderPipeline.PauseRendering()
Return: void
Modifiers: public, virtual
Summary: Implement to pause the current render session

Method: Rhino.Render.RenderPipeline.Render()
Return: RenderReturnCode
Modifiers: public
Summary: Call this function to render the scene normally. The function returns when rendering is complete (or cancelled).

Method: Rhino.Render.RenderPipeline.RenderEnterModalLoop()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.RenderExitModalLoop()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.RenderPreCreateWindow()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.RenderSceneWithNoMeshes()
Return: bool
Modifiers: protected, virtual

Method: Rhino.Render.RenderPipeline.RenderWindow(Display.RhinoView view, Rectangle rect, bool inWindow)
Return: RenderReturnCode
Modifiers: public
Summary: Call this function to render the scene in a view window. The function returns when rendering is complete (or cancelled).
Parameter: view (Display.RhinoView)
Parameter Summary: the view that the user selected a rectangle in.
Parameter: rect (Rectangle)
Parameter Summary: rectangle that the user selected.
Parameter: inWindow (bool)
Parameter Summary: True to render directly into the view window.

Method: Rhino.Render.RenderPipeline.ResumeRendering()
Return: void
Modifiers: public, virtual
Summary: Implement to resume current render session

Method: Rhino.Render.RenderPipeline.SaveImage(string fileName, bool saveAlpha)
Return: bool
Modifiers: public
Summary: Saves the rendered image to a file. Does not prompt the user in any way.
Parameter: fileName (string)
Parameter Summary: Full path to the file name to save to.
Parameter: saveAlpha (bool)
Parameter Summary: Determines if alpha will be saved in files that support it (e.g., PNG).

Method: Rhino.Render.RenderPipeline.SetAsyncRenderContext(ref AsyncRenderContext aRC)
Return: void
Modifiers: public

Method: Rhino.Render.RenderPipeline.SupportsPause()
Return: bool
Modifiers: public, virtual
Summary: Override and return True if the renderer supports pausing

Class: Rhino.Render.RenderPlugInInfo

Property: Rhino.Render.RenderPlugInInfo.Name
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.RenderPlugInInfo.PlugInId
Return: Guid
Modifiers: public
Accessors: get set

Class: Rhino.Render.RenderPlugInList

Constructor: Rhino.Render.RenderPlugInList.RenderPlugInList()

Class: Rhino.Render.RenderPrimitive

Property: Rhino.Render.RenderPrimitive.BoundingBox
Return: BoundingBox
Modifiers: public
Summary: The bounding box for this primitive.
Accessors: get

Property: Rhino.Render.RenderPrimitive.InstanceTransform
Return: Transform
Modifiers: public
Summary: Instance reference transform or Identity if not an instance reference.
Accessors: get

Property: Rhino.Render.RenderPrimitive.PrimitiveType
Return: RenderPrimitiveType
Modifiers: public
Summary: Call this before extracting meshes if you support render primitives to get the <b>RenderPrimitiveType</b> of this mesh then call the associated <b>TryGetSphere</b> , <b>TryGetPlane</b> , <b>TryGetCone</b> , or  <b>TryGetBox</b> method.  Calling the <b>Mesh</b> property will mesh the primitive and return a mesh always.
Accessors: get

Property: Rhino.Render.RenderPrimitive.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: The <b>RenderMaterial</b> associated with this mesh or None if there is not one.
Accessors: get

Property: Rhino.Render.RenderPrimitive.RhinoObject
Return: RhinoObject
Modifiers: public
Summary: The Rhino object associated with this render primitive.
Accessors: get

Method: Rhino.Render.RenderPrimitive.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderPrimitive.Dispose(bool isDisposing)
Return: void
Modifiers: protected

Method: Rhino.Render.RenderPrimitive.Mesh()
Return: Mesh
Modifiers: public
Summary: Returns the mesh associated with the object, this will mesh primitives and always return a mesh.

Method: Rhino.Render.RenderPrimitive.TryGetBox(out Box box)
Return: bool
Modifiers: public
Summary: Call this method to get a <b>Box</b> primitive for this mesh.  If this meshes <b>PrimitiveType</b> is not a <b>Rhino.Render.RenderPrimitiveType.Box</b>  then the box parameter is set to <b>Box.Empty</b> .
Parameter: box (Box)
Parameter Summary: Gets set to the box primitive for this object on success or <b>Box.Empty</b> on error.

Method: Rhino.Render.RenderPrimitive.TryGetCone(out Cone cone, out Plane truncation)
Return: bool
Modifiers: public
Summary: Call this method to get a <b>Cone</b> primitive for this mesh.  If this meshes <b>PrimitiveType</b> is not a <b>Rhino.Render.RenderPrimitiveType.Cone</b>  then the cone parameter is set to <b>Cone.Unset</b> and the truncation parameter is set to <b>Plane.Unset</b> .
Parameter: cone (Cone)
Parameter Summary: Gets set to the cone primitive for this object on success or <b>Cone.Unset</b> on error.
Parameter: truncation (Plane)
Parameter Summary: Gets set to the truncation plane for this object on success or <b>Plane.Unset</b> on error.

Method: Rhino.Render.RenderPrimitive.TryGetPlane(out PlaneSurface plane)
Return: bool
Modifiers: public
Summary: Call this method to get a <b>Plane</b> primitive for this mesh.  If this meshes <b>PrimitiveType</b> is not a <b>Rhino.Render.RenderPrimitiveType.Plane</b>  then the plane parameter is set to null.
Parameter: plane (PlaneSurface)
Parameter Summary: Gets set to the plane primitive for this object on success or None on error.

Method: Rhino.Render.RenderPrimitive.TryGetSphere(out Sphere sphere)
Return: bool
Modifiers: public
Summary: Call this method to get a sphere primitive for this mesh.  If this meshes <b>PrimitiveType</b> is not a <b>Rhino.Render.RenderPrimitiveType.Sphere</b>  then the sphere parameter is set to <b>Sphere.Unset</b> .
Parameter: sphere (Sphere)
Parameter Summary: Gets set to the primitive sphere for this object on success.

Class: Rhino.Render.RenderPrimitiveList

Property: Rhino.Render.RenderPrimitiveList.Count
Return: int
Modifiers: public
Summary: Number of meshes in this list
Accessors: get

Property: Rhino.Render.RenderPrimitiveList.RhinoObject
Return: RhinoObject
Modifiers: public
Summary: The Rhino object associated with this list
Accessors: get

Property: Rhino.Render.RenderPrimitiveList.UseObjectsMappingChannels
Return: bool
Modifiers: public
Summary: Returns True if the texture mapping will be taken from the Rhino object otherwise; the texture mapping will use the texture coordinates on the mesh only.
Accessors: get set

Method: Rhino.Render.RenderPrimitiveList.Add(Box box, RenderMaterial material)
Return: void
Modifiers: public
Summary: Add primitive box and material.
Parameter: box (Box)
Parameter Summary: Box to add.
Parameter: material (RenderMaterial)
Parameter Summary: Material to add, may be None if not needed.

Method: Rhino.Render.RenderPrimitiveList.Add(Cone cone, Plane truncation, RenderMaterial material)
Return: void
Modifiers: public
Summary: Add primitive cone and material.
Parameter: cone (Cone)
Parameter Summary: Cone to add.
Parameter: truncation (Plane)
Parameter Summary: The plane used to cut the cone (the non-apex end is kept). Should be equal to cone.plane if not truncated.
Parameter: material (RenderMaterial)
Parameter Summary: Material to add, may be None if not needed.

Method: Rhino.Render.RenderPrimitiveList.Add(IEnumerable<Mesh> meshes, RenderMaterial material)
Return: void
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.Add(Mesh mesh, RenderMaterial material, Transform t)
Return: void
Modifiers: public
Summary: Add mesh and material.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to add.
Parameter: material (RenderMaterial)
Parameter Summary: Transformation of this mesh. Material to add, may be None if not needed.
Parameter: t (Transform)
Parameter Summary: Transformation of this mesh.

Method: Rhino.Render.RenderPrimitiveList.Add(Mesh mesh, RenderMaterial material)
Return: void
Modifiers: public
Summary: Add mesh and material.
Parameter: mesh (Mesh)
Parameter Summary: Mesh to add.
Parameter: material (RenderMaterial)
Parameter Summary: Material to add, may be None if not needed.

Method: Rhino.Render.RenderPrimitiveList.Add(PlaneSurface plane, RenderMaterial material)
Return: void
Modifiers: public
Summary: Add primitive plane and material.
Parameter: plane (PlaneSurface)
Parameter Summary: Plane to add.
Parameter: material (RenderMaterial)
Parameter Summary: Material to add, may be None if not needed.

Method: Rhino.Render.RenderPrimitiveList.Add(Sphere sphere, RenderMaterial material)
Return: void
Modifiers: public
Summary: Add primitive sphere and material.
Parameter: sphere (Sphere)
Parameter Summary: Sphere to add.
Parameter: material (RenderMaterial)
Parameter Summary: Material to add, may be None if not needed.

Method: Rhino.Render.RenderPrimitiveList.AutoDeleteMaterialsOn()
Return: bool
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.AutoDeleteMeshesOn()
Return: bool
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.Clear()
Return: void
Modifiers: public
Summary: Remove all primitives from this list

Method: Rhino.Render.RenderPrimitiveList.ConvertMeshesToTriangles()
Return: void
Modifiers: public
Summary: Convert mesh quad faces to triangle faces.

Method: Rhino.Render.RenderPrimitiveList.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.GetInstanceTransform(int index)
Return: Transform
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.Material(int index)
Return: RenderMaterial
Modifiers: public
Summary: Call this method to get the render material associated with the mesh at the specified index.  Will return None if there is no material associated with the requested mesh.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.

Method: Rhino.Render.RenderPrimitiveList.Mesh(int index)
Return: Mesh
Modifiers: public
Summary: Get the mesh for the primitive at the specified index. If the item at this index is a primitive type other than a mesh then it mesh representation is returned.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.

Method: Rhino.Render.RenderPrimitiveList.MeshInstance(int index, out Transform instance_transform)
Return: Mesh
Modifiers: public
Summary: Get the mesh for the primitive at the specified index. If the item at this index is a primitive type other than a mesh then it mesh representation is returned.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.
Parameter: instance_transform (Transform)
Parameter Summary: Receives the transformation of this mesh.

Method: Rhino.Render.RenderPrimitiveList.PrimitiveType(int index)
Return: RenderPrimitiveType
Modifiers: public
Summary: Type of primitive object at this index.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.

Method: Rhino.Render.RenderPrimitiveList.SetInstanceTransform(int index, Transform xform)
Return: void
Modifiers: public

Method: Rhino.Render.RenderPrimitiveList.ToMaterialArray()
Return: RenderMaterial[]
Modifiers: public
Summary: Call this method to see if there are any RenderMaterials associated with the meshes.  Each primitive can optionally have a RenderMaterial associated with it, if the RenderMaterial is None then check for a RhinoObject.RenderMaterial.

Method: Rhino.Render.RenderPrimitiveList.ToMeshArray()
Return: Mesh[]
Modifiers: public
Summary: Call this method to get a array of meshes, all primitives will get meshed and the meshes will get included in the returned array.

Method: Rhino.Render.RenderPrimitiveList.TryGetBox(int index, out Box box)
Return: bool
Modifiers: public
Summary: Call this method to get a box at the specified index.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.
Parameter: box (Box)
Parameter Summary: Will contain the box at the requested index if the index is in range and the primitive at the requested index is a box.

Method: Rhino.Render.RenderPrimitiveList.TryGetCone(int index, out Cone cone, out Plane truncation)
Return: bool
Modifiers: public
Summary: Call this method to get a box at the specified index.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.
Parameter: cone (Cone)
Parameter Summary: Will contain the cone at the requested index if the index is in range and the primitive at the requested index is a box.
Parameter: truncation (Plane)
Parameter Summary:

Method: Rhino.Render.RenderPrimitiveList.TryGetPlane(int index, out PlaneSurface plane)
Return: bool
Modifiers: public
Summary: Call this method to get a box at the specified index.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.
Parameter: plane (PlaneSurface)
Parameter Summary: Will contain the plane at the requested index if the index is in range and the primitive at the requested index is a plane.

Method: Rhino.Render.RenderPrimitiveList.TryGetSphere(int index, out Sphere sphere)
Return: bool
Modifiers: public
Summary: Call this method to get a box at the specified index.
Parameter: index (int)
Parameter Summary: The zero based index of the item in the list.  Valid values are greater than or equal to 0 and less than Count.
Parameter: sphere (Sphere)
Parameter Summary: Will contain the sphere at the requested index if the index is in range and the primitive at the requested index is a box.

Class: Rhino.Render.RenderPropertyChangedEvent
Summary: Used by Rhino.Render object property value has changed events.

Property: Rhino.Render.RenderPropertyChangedEvent.Context
Return: int
Modifiers: public
Summary: Optional argument which may specify the property being modified.
Accessors: get

Property: Rhino.Render.RenderPropertyChangedEvent.Document
Return: RhinoDoc
Modifiers: public
Summary: The document triggering the event.
Accessors: get

Class: Rhino.Render.RenderSettings
Summary: Contains settings used in rendering.

Constructor: Rhino.Render.RenderSettings.RenderSettings()
Summary: Initialize a new instance of the RenderSettings class.

Constructor: Rhino.Render.RenderSettings.RenderSettings(RenderSettings source)
Summary: Initialize new instance of the RenderSettings class.

Property: Rhino.Render.RenderSettings.AmbientLight
Return: Color
Modifiers: public
Summary: Gets or sets the ambient light color used in rendering.
Accessors: get set

Property: Rhino.Render.RenderSettings.AntialiasLevel
Return: AntialiasLevel
Modifiers: public
Summary: Gets or sets anti-alias level, used for render quality
Accessors: get set

Property: Rhino.Render.RenderSettings.BackgroundColorBottom
Return: Color
Modifiers: public
Summary: Gets or sets the background bottom color used in rendering.
Accessors: get set

Property: Rhino.Render.RenderSettings.BackgroundColorTop
Return: Color
Modifiers: public
Summary: Gets or sets the background top color used in rendering.
Sets also the background color if a solid background color is set. | Since: 5.0 | Accessors: get set

Property: Rhino.Render.RenderSettings.BackgroundStyle
Return: BackgroundStyle
Modifiers: public
Summary: How the viewport's background should be filled.
Accessors: get set

Property: Rhino.Render.RenderSettings.DepthCue
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to render using depth cues.
These are clues to help the perception of position and orientation of objects in the image. | Since: 5.0 | Accessors: get set

Property: Rhino.Render.RenderSettings.Dithering
Return: Dithering
Modifiers: public
Summary: If this object is associated with a document, this gets the document dithering. If this object is associated with a File3dm, this gets the File3dm's dithering. Otherwise it gets a 'free-floating' dithering object.
Accessors: get

Property: Rhino.Render.RenderSettings.FlatShade
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to render using flat shading.
Accessors: get set

Property: Rhino.Render.RenderSettings.GroundPlane
Return: GroundPlane
Modifiers: public
Summary: If this object is associated with a document, this gets the document ground plane. If this object is associated with a File3dm, this gets the File3dm's ground plane. Otherwise it gets a 'free-floating' ground plane object.
Accessors: get

Property: Rhino.Render.RenderSettings.ImageDpi
Return: double
Modifiers: public
Summary: Number of dots/inch (dots=pixels) to use when printing and saving bitmaps. The default is 72.0 dots/inch.
Accessors: get set

Property: Rhino.Render.RenderSettings.ImageSize
Return: Size
Modifiers: public
Summary: Gets or sets a value indicating the size of the rendering result if UseViewportSize is set to false.  If UseViewportSize is set to true, then this value is ignored.
Accessors: get set

Property: Rhino.Render.RenderSettings.ImageUnitSystem
Return: UnitSystem
Modifiers: public
Summary: unit system to use when converting image pixel size and DPI information into a print size.  Default = inches
Accessors: get set

Property: Rhino.Render.RenderSettings.LinearWorkflow
Return: LinearWorkflow
Modifiers: public
Summary: If this object is associated with a document, this gets the document linear workflow. If this object is associated with a File3dm, this gets the File3dm's linear workflow. Otherwise it gets a 'free-floating' linear workflow object.
Accessors: get

Property: Rhino.Render.RenderSettings.NamedView
Return: string
Modifiers: public
Summary: Get or set the given named view
Accessors: get set

Property: Rhino.Render.RenderSettings.PostEffects
Return: PostEffectCollection
Modifiers: public
Summary: If this object is associated with a document, this gets the document post effect data collection. If this object is associated with a File3dm, this gets the File3dm's post effect data collection. Otherwise it gets a 'free-floating' post effect data collection object.
Accessors: get

Property: Rhino.Render.RenderSettings.RenderAnnotations
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to instruct the rendering engine to show annotations, such as linear dimensions or angular dimensions.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderBackfaces
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to render back faces.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderChannels
Return: RenderChannels
Modifiers: public
Summary: If this object is associated with a document, this gets the document render channels. Otherwise it gets a 'free-floating' render channels object.
Accessors: get

Property: Rhino.Render.RenderSettings.RenderCurves
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to instruct the rendering engine to show curves.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderIsoparams
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to instruct the rendering engine to show isocurves.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderMeshEdges
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to instruct the rendering engine to show mesh edges.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderPoints
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to instruct the rendering engine to show points.
Accessors: get set

Property: Rhino.Render.RenderSettings.RenderSource
Return: RenderingSources
Modifiers: public
Summary: Gets or sets the render source <b>RenderingSources</b> enumeration.
Accessors: get set

Property: Rhino.Render.RenderSettings.SafeFrame
Return: SafeFrame
Modifiers: public
Summary: If this object is associated with a document, this gets the document safe-frame. If this object is associated with a File3dm, this gets the File3dm's safe-frame. Otherwise it gets a 'free-floating' safe-frame object.
Accessors: get

Property: Rhino.Render.RenderSettings.ScaleBackgroundToFit
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to scale the wallpaper in the background or not. This is meaningful only if the viewport has a wallpaper and render settings are set to render Wallpaper into the background.
Accessors: get set

Property: Rhino.Render.RenderSettings.ShadowmapLevel
Return: int
Modifiers: public
Summary: 0=none, 1=normal, 2=best.
Accessors: get set

Property: Rhino.Render.RenderSettings.Skylight
Return: Skylight
Modifiers: public
Summary: If this object is associated with a document, this gets the document skylight. If this object is associated with a File3dm, this gets the File3dm's skylight. Otherwise it gets a 'free-floating' skylight object.
Accessors: get

Property: Rhino.Render.RenderSettings.Snapshot
Return: string
Modifiers: public
Summary: Set or get the given snapshot view
Accessors: get set

Property: Rhino.Render.RenderSettings.SpecificViewport
Return: string
Modifiers: public
Summary: Set or get the given specific viewport
Accessors: get set

Property: Rhino.Render.RenderSettings.Sun
Return: Sun
Modifiers: public
Summary: If this object is associated with a document, this gets the document sun. If this object is associated with a File3dm, this gets the File3dm's sun. Otherwise it gets a 'free-floating' sun object.
Accessors: get

Property: Rhino.Render.RenderSettings.TransparentBackground
Return: bool
Modifiers: public
Summary: Gets or sets whether rendering should be done with transparent background.
Accessors: get set

Property: Rhino.Render.RenderSettings.UseHiddenLights
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to render using lights that are on layers that are off.
Accessors: get set

Property: Rhino.Render.RenderSettings.UseViewportSize
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether to use the resolution of the viewport being rendered or ImageSize when rendering
Accessors: get set

Method: Rhino.Render.RenderSettings.Duplicate()
Return: RenderSettings
Modifiers: public
Summary: Makes a free-floating copy of the object.

Method: Rhino.Render.RenderSettings.RenderEnvironment(EnvironmentUsage usage, EnvironmentPurpose purpose)
Return: RenderEnvironment
Modifiers: public
Summary: Get the render environment for a particular usage. Only works if this render settings is in a document. If usage is Background and the background mode is set to 'Solid Color' or 'Gradient' (i.e., not 'Environment'), then None will be returned.

Method: Rhino.Render.RenderSettings.RenderEnvironmentId(EnvironmentUsage usage, EnvironmentPurpose purpose)
Return: System.Guid
Modifiers: public
Summary: Get the id of the render environment for a particular usage. If usage is Background and the background mode is set to 'Solid Color' or 'Gradient' (i.e., not 'Environment'), then Guid.Empty will be returned.

Method: Rhino.Render.RenderSettings.RenderEnvironmentOverride(EnvironmentUsage usage)
Return: bool
Modifiers: public
Summary: For usage background, this checks if the background style is set to 'Environment'. For reflection and skylighting, it checks if the relevant custom override is enabled.

Method: Rhino.Render.RenderSettings.SetRenderEnvironment(EnvironmentUsage usage, RenderEnvironment env)
Return: void
Modifiers: public
Summary: Set the render environment for a particular usage. Passing None for usage Skylighting or Reflection will turn the override for that usage off.

Method: Rhino.Render.RenderSettings.SetRenderEnvironmentId(EnvironmentUsage usage, System.Guid guid)
Return: void
Modifiers: public
Summary: Set the id of the render environment for a particular usage. Passing Guid.Empty for usage Skylighting or Reflection will turn the override for that usage off.

Method: Rhino.Render.RenderSettings.SetRenderEnvironmentOverride(EnvironmentUsage usage, bool on)
Return: void
Modifiers: public
Summary: Set the given environment override on/off. Only works for usage Reflection and Skylighting.

Class: Rhino.Render.RenderSourceView
Summary: Helper class to get the correct view from the Render View Source settings.  An instance of this class is supposed to be used with the using() {} construct.

Constructor: Rhino.Render.RenderSourceView.RenderSourceView(RhinoDoc doc)
Summary: Create a new RenderSourceView for the given doc.  Note that this should be done with using(var rsv = new RenderSourceView(doc)) {}  If the RenderSettings have the source view set to for instance a SnapShot this construct will ensure that the (active) view is set to the correct snapshot, and reverted back to the original once this instance goes out of scope.

Method: Rhino.Render.RenderSourceView.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderSourceView.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.RenderSourceView.GetViewInfo()
Return: Rhino.DocObjects.ViewInfo
Modifiers: public
Summary: Get the ViewInfo as specified by the render source view settings.

Class: Rhino.Render.RenderTabs

Method: Rhino.Render.RenderTabs.FromRenderSessionId(PlugIn plugIn, System.Type tabType, System.Guid renderSessionId)
Return: object
Modifiers: public, static
Summary: Get the instance of a render tab associated with a specific render session, this is useful when it is necessary to update a control from a  <b>RenderPipeline</b>
Parameter: plugIn (PlugIn)
Parameter Summary: The plug-in that registered the custom user interface
Parameter: tabType (System.Type)
Parameter Summary: The type of tab to return
Parameter: renderSessionId (System.Guid)
Parameter Summary: The <b>RenderPipeline.RenderSessionId</b> of a specific render session.

Method: Rhino.Render.RenderTabs.SessionIdFromTab(object tab)
Return: System.Guid
Modifiers: public, static
Summary: Get the render session id that created the specified tab object. Only applies to tabs in the context of a render window, not other contexts like Rhino Options or View Properties. It actually returns the identifier associated with the side pane UI which is typically the same as the render session id.

Method: Rhino.Render.RenderTabs.SidePaneUiIdFromTab(object tab)
Return: System.Guid
Modifiers: public, static
Summary: Get the id of the side pane UI that a tab is in.

Method: Rhino.Render.RenderTabs.RegisterTab(PlugIn plugin, System.Type tabType, string caption, Icon icon)
Return: void
Modifiers: public
Summary: Register custom render user interface with Rhino.  This should only be done in <b>RenderPlugIn.RegisterRenderTabs</b> .  Panels registered after <b>RenderPlugIn.RegisterRenderTabs</b> is called will be ignored.  If the class includes a public method "void DoHelp()" the method will get called when F1 is pressed and the custom tab is active.
Parameter: plugin (PlugIn)
Parameter Summary: The plug-in providing the custom user interface
Parameter: tabType (System.Type)
Parameter Summary: The type of object to be created and added to the render container.
Parameter: caption (string)
Parameter Summary: The caption for the custom user interface.
Parameter: icon (Icon)
Parameter Summary:

Method: Rhino.Render.RenderTabs.RegisterTab(PlugIn plugin, System.Type tabType, System.Guid renderEngineId, string caption, Icon icon)
Return: void
Modifiers: public

Class: Rhino.Render.RenderTexture

Constructor: Rhino.Render.RenderTexture.RenderTexture()
Summary: Initializes a new instance of the RenderTexture class

Property: Rhino.Render.RenderTexture.LocalMappingTransform
Return: Transform
Modifiers: public
Summary: Gets the transformation that can be applied to the UVW vector to convert it from normalized texture space into locally mapped space (ie - with repeat, offset and rotation applied.)
Accessors: get

Property: Rhino.Render.RenderTexture.width, int height, int depth)? PixelSize2
Return: (int
Modifiers: public, virtual
Summary: Override to provide details on the actual pixel sizes of this texture in UVW directions return None if the texture should not be treated as a bitmap.
Accessors: get

Property: Rhino.Render.RenderTexture.RenderHashWithoutLocalMapping
Return: uint
Modifiers: public
Summary: Render hash for texture excluding local mapping.
Accessors: get

Property: Rhino.Render.RenderTexture.RenderHashWithoutLocalMappingOrLinearWorkflow
Return: uint
Modifiers: public
Summary: Render hash for texture excluding local mapping and linear workflow.
Accessors: get

Method: Rhino.Render.RenderTexture.GetEnvironmentMappingProjection(TextureEnvironmentMappingMode mode, Vector3d reflectionVector, out float u, out float v)
Return: bool
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralAaltonenNoiseArrayPointer()
Return: System.IntPtr
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralAaltonenNoiseArraySize()
Return: uint
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralImpulseNoiseArrayPointer()
Return: System.IntPtr
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralImpulseNoiseArraySize()
Return: uint
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralPerlinNoiseArrayPointer()
Return: System.IntPtr
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralPerlinNoiseArraySize()
Return: uint
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralVcNoiseArrayPointer()
Return: System.IntPtr
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetProceduralVcNoiseArraySize()
Return: uint
Modifiers: public, static

Method: Rhino.Render.RenderTexture.GetWcsBoxMapping(Point3d worldXyz, Vector3d normal)
Return: Point3d
Modifiers: public, static

Method: Rhino.Render.RenderTexture.NewBitmapTexture(SimulatedTexture texture, RhinoDoc doc)
Return: RenderTexture
Modifiers: public, static
Summary: Constructs a new basic texture from a SimulatedTexture.
Parameter: texture (SimulatedTexture)
Parameter Summary: The texture to create the basic texture from.
Parameter: doc (RhinoDoc)
Parameter Summary: The document to associate the texture with.

Method: Rhino.Render.RenderTexture.NewBitmapTexture(SimulatedTexture texture)
Return: RenderTexture
Modifiers: public, static
Summary: Constructs a new basic texture from a SimulatedTexture.
Parameter: texture (SimulatedTexture)
Parameter Summary: The texture to create the basic texture from.

Method: Rhino.Render.RenderTexture.NewBitmapTexture(System.Drawing.Bitmap bitmap, RhinoDoc doc)
Return: RenderTexture
Modifiers: public, static
Summary: Constructs a new basic texture from a Bitmap.
Parameter: bitmap (System.Drawing.Bitmap)
Parameter Summary: The bitmap to create the basic texture from.
Parameter: doc (RhinoDoc)
Parameter Summary: The document to associate the texture with.

Method: Rhino.Render.RenderTexture.CreateEvaluator()
Return: TextureEvaluator
Modifiers: public, virtual
Summary: Constructs a texture evaluator. This is an independent lightweight object capable of evaluating texture color throughout uvw space. May be called from within a rendering shade pipeline.

Method: Rhino.Render.RenderTexture.CreateEvaluator(TextureEvaluatorFlags evaluatorFlags)
Return: TextureEvaluator
Modifiers: public, virtual
Summary: Constructs a texture evaluator. This is an independent lightweight object capable of evaluating texture color throughout uvw space. May be called from within a rendering shade pipeline.

Method: Rhino.Render.RenderTexture.GenerateTextureSimulation(ref System.Drawing.Bitmap bitmap, TextureEvaluatorFlags ef)
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetDisplayInViewport()
Return: bool
Modifiers: public

Method: Rhino.Render.RenderTexture.GetEnvironmentMappingMode()
Return: TextureEnvironmentMappingMode
Modifiers: public

Method: Rhino.Render.RenderTexture.GetInternalEnvironmentMappingMode()
Return: TextureEnvironmentMappingMode
Modifiers: public

Method: Rhino.Render.RenderTexture.GetLocalMappingType()
Return: eLocalMappingType
Modifiers: public

Method: Rhino.Render.RenderTexture.GetMappingChannel()
Return: int
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetOffset()
Return: Vector3d
Modifiers: public, virtual
Summary: Get offset value across UVW space. If the projection type is WCS or other type specified in model units, then this is the offset in meters.

Method: Rhino.Render.RenderTexture.GetOffsetLocked()
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetPreviewIn3D()
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetPreviewLocalMapping()
Return: bool
Modifiers: public

Method: Rhino.Render.RenderTexture.GetProjectionMode()
Return: TextureProjectionMode
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetRepeat()
Return: Vector3d
Modifiers: public, virtual
Summary: Get repeat value across UVW space. If the projection type is WCS or other type specified in model units, then this is the repeat across 1 meter of the model.

Method: Rhino.Render.RenderTexture.GetRepeatLocked()
Return: bool
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetRotation()
Return: Vector3d
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GetWrapType()
Return: TextureWrapType
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.GraphInfo(ref TextureGraphInfo tgi)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.IsHdrCapable()
Return: bool
Modifiers: public
Summary: Return True if the texture is HDR capable.  When creating a custom RenderTexture implementation that is HDR capable set the appropriate property on the CustomRenderContentAttribute decorator on that clas.

Method: Rhino.Render.RenderTexture.IsImageBased()
Return: bool
Modifiers: public, virtual
Summary: Query if the texture is image based.  When creating a custom RenderTexture implementation of an image-based texture set the appropriate property on the CustomRenderContentAttribute decorator on that class.  Do not override this function

Method: Rhino.Render.RenderTexture.IsLinear()
Return: bool
Modifiers: public, virtual
Summary: Return True if the texture color data is linear.  NOTE: this function is marked as virtual, but the correct way to make a custom RenderTexture linear is by setting the correct property for the CustomRenderContentAttribute decorator on the class.

Method: Rhino.Render.RenderTexture.IsNormalMap()
Return: bool
Modifiers: public
Summary: Return True if the texture is a normalmap.  When creating a custom RenderTexture implementation of a normal map set the appropriate property on the CustomRenderContentAttribute decorator on that clas.

Method: Rhino.Render.RenderTexture.PixelSize(out int u, out int v, out int w)
Return: void
Modifiers: public
Summary: Get the texture dimensions for the RenderTexture.
Parameter: u (int)
Parameter Summary: width
Parameter: v (int)
Parameter Summary: height
Parameter: w (int)
Parameter Summary: depth, used for 3D textures

Method: Rhino.Render.RenderTexture.SaveAsImage(string FullPath, int width, int height, int depth)
Return: bool
Modifiers: public
Summary: Save texture as image
Parameter: FullPath (string)
Parameter Summary: The full path of the file
Parameter: width (int)
Parameter Summary: Image width
Parameter: height (int)
Parameter Summary: Image height
Parameter: depth (int)
Parameter Summary: Image depth

Method: Rhino.Render.RenderTexture.SetDisplayInViewport(bool value, ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetDisplayInViewport(bool value)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetEnvironmentMappingMode(TextureEnvironmentMappingMode value, ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetEnvironmentMappingMode(TextureEnvironmentMappingMode value)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetGraphInfo(TextureGraphInfo tgi)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetMappingChannel(int value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetOffset(Vector3d value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual
Summary: Set offset value across UVW space. If the projection type is WCS or other type specified in model units, then this is the offset in meters.

Method: Rhino.Render.RenderTexture.SetOffsetLocked(bool value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetPreviewIn3D(bool value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetPreviewLocalMapping(bool value, ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetPreviewLocalMapping(bool value)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTexture.SetProjectionMode(TextureProjectionMode value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetRepeat(Vector3d value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual
Summary: Set repeat value across UVW space. If the projection type is WCS or other type specified in model units, then this is the repeat across 1 meter of the model.

Method: Rhino.Render.RenderTexture.SetRepeatLocked(bool value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetRotation(Vector3d value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SetWrapType(TextureWrapType value, ChangeContexts changeContext)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SimulatedTexture(TextureGeneration tg, int size, Rhino.DocObjects.RhinoObject obj)
Return: SimulatedTexture
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SimulateTexture(ref SimulatedTexture simulation, bool isForDataOnly)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.RenderTexture.SimulateTexture(ref SimulatedTexture simulation, TextureGeneration tg, int size, Rhino.DocObjects.RhinoObject obj)
Return: void
Modifiers: public, virtual

Class: Rhino.Render.RenderTextureTable

Property: Rhino.Render.RenderTextureTable.Count
Return: int
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderTextureTable.this[int index]
Return: RenderTexture
Modifiers: public

Method: Rhino.Render.RenderTextureTable.Add(RenderTexture c)
Return: bool
Modifiers: public

Method: Rhino.Render.RenderTextureTable.BeginChange(RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.RenderTextureTable.EndChange()
Return: void
Modifiers: public

Method: Rhino.Render.RenderTextureTable.Find(System.Guid id)
Return: RenderTexture
Modifiers: public

Method: Rhino.Render.RenderTextureTable.GetEnumerator()
Return: IEnumerator<RenderTexture>
Modifiers: public

Method: Rhino.Render.RenderTextureTable.Remove(RenderTexture c)
Return: bool
Modifiers: public

Class: Rhino.Render.RenderWindow

Property: Rhino.Render.RenderWindow.SessionId
Return: Guid
Modifiers: public
Accessors: get

Method: Rhino.Render.RenderWindow.ChannelId(StandardChannels ch)
Return: System.Guid
Modifiers: public, static

Method: Rhino.Render.RenderWindow.Create(Size szSize)
Return: RenderWindow
Modifiers: public, static

Method: Rhino.Render.RenderWindow.FromSessionId(System.Guid sessionId)
Return: RenderWindow
Modifiers: public, static

Method: Rhino.Render.RenderWindow.StandardChannelForGuid(System.Guid id)
Return: StandardChannels
Modifiers: public, static
Summary: Get the StandardChannels for the given Guid

Method: Rhino.Render.RenderWindow.AddChannel(StandardChannels channel)
Return: bool
Modifiers: public
Summary: Add a channel to the frame buffer in addition to the fixed Red, Green, Blue and Alpha channels.
Parameter: channel (StandardChannels)
Parameter Summary: Channel to add

Method: Rhino.Render.RenderWindow.AddWireframeChannel(RhinoDoc doc, DocObjects.ViewportInfo viewport, System.Drawing.Size size, System.Drawing.Rectangle region)
Return: bool
Modifiers: public
Summary: This method sets the frame buffer size and adds all the necessary wireframe channels automatically. It also creates the wireframe channel data automatically so that your renderer doesn't have to. You typically call this method only when your renderer does not support wireframe rendering itself. If you call this method, then you should not add any wireframe channels returned by GetRenderChannels(). If your renderer is capable of rendering the wireframe channels itself, you should not call this method. Instead, you must make sure you add the wireframe channels if GetRenderChannels() requests them. See IRhRdkRenderWindow::GetRenderChannels(). After the wires are rendered, the wireframe post effects will composite them into the final rendered image. Note: This method should really be called AddWireframeChannels(). [SDK_UNFREEZE] */
Parameter: doc (RhinoDoc)
Parameter Summary: The document to display
Parameter: viewport (DocObjects.ViewportInfo)
Parameter Summary: The view to display
Parameter: size (System.Drawing.Size)
Parameter Summary: The size of the image without clipping (i.e., if you have a region, it is the size of the image before you cut the region out.
Parameter: region (System.Drawing.Rectangle)
Parameter Summary: The area of the rendering you want to display.  This should match the size of the render window itself (i.e, - the one set using SetSize)

Method: Rhino.Render.RenderWindow.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderWindow.EndAsyncRender(RenderSuccessCode successCode)
Return: void
Modifiers: public
Summary: Must be called when an asynchronous render has finished or ended for any reason.
Parameter: successCode (RenderSuccessCode)
Parameter Summary: Completed for a correct or canceled render, Failed for errors.

Method: Rhino.Render.RenderWindow.GetAdjust()
Return: ImageAdjust
Modifiers: public
Summary: OBSOLETE. NOT IMPLEMENTED.

Method: Rhino.Render.RenderWindow.GetBitmap()
Return: Bitmap
Modifiers: public

Method: Rhino.Render.RenderWindow.GetRequestedRenderChannels()
Return: System.Guid[]
Modifiers: public
Summary: Get array of Guids representing the channels requested by the post effect pipeline for this RenderWindow.

Method: Rhino.Render.RenderWindow.GetRequestedRenderChannelsAsStandardChannels()
Return: StandardChannels[]
Modifiers: public
Summary: Get array of StandardChannels enum values representing the channels requested by the post effect pipeline for this RenderWindow.

Method: Rhino.Render.RenderWindow.Invalidate()
Return: void
Modifiers: public
Summary: Invalidate the entire view window so that the pixels get painted.

Method: Rhino.Render.RenderWindow.InvalidateArea(System.Drawing.Rectangle rect)
Return: void
Modifiers: public

Method: Rhino.Render.RenderWindow.IsChannelAvailable(System.Guid id)
Return: bool
Modifiers: public
Summary: Query if a channel is available.

Method: Rhino.Render.RenderWindow.IsChannelShown(System.Guid id)
Return: bool
Modifiers: public
Summary: Query if a channel is being shown.

Method: Rhino.Render.RenderWindow.OpenChannel(StandardChannels id)
Return: Channel
Modifiers: public

Method: Rhino.Render.RenderWindow.RegisterPostEffectExecutionControl(PostEffectExecutionControl ec)
Return: void
Modifiers: public
Summary: Register an instance of PostEffectExecutionControl.

Method: Rhino.Render.RenderWindow.SaveDibAsBitmap(string filename)
Return: void
Modifiers: public
Summary: Save current Dib of RenderWindow as file Helper function for debugging purposes.

Method: Rhino.Render.RenderWindow.SaveRenderImageAs(string filename, bool saveAlpha)
Return: void
Modifiers: public
Summary: Like RenderWindow.SaveRenderImageAs(string,Guid,bool), but with Guid set to Guid.Empty.
Parameter: filename (string)
Parameter Summary: Filename of image file to be created
Parameter: saveAlpha (bool)
Parameter Summary: True if alpha channel should be saved.

Method: Rhino.Render.RenderWindow.SaveRenderImageAs(string filename, System.Guid renderEngineGuid, bool saveAlpha)
Return: void
Modifiers: public
Summary: Save current RenderWindow contents as an image file with the given name. The filetype will be determine.  Pass in render engine Guid if an engine implements saving to a format that is not supported by Rhino. Guid.Empty if there is no need for that.
Parameter: filename (string)
Parameter Summary: Filename of image file to be created
Parameter: renderEngineGuid (System.Guid)
Parameter Summary: render engine ID
Parameter: saveAlpha (bool)
Parameter Summary: True if alpha channel should be saved.

Method: Rhino.Render.RenderWindow.SetAdjust(ImageAdjust imageAdjust)
Return: void
Modifiers: public
Summary: OBSOLETE. NOT IMPLEMENTED.
Parameter: imageAdjust (ImageAdjust)
Parameter Summary: OBSOLETE

Method: Rhino.Render.RenderWindow.SetIsRendering(bool is_rendering)
Return: void
Modifiers: public
Summary: Set whether or not rendering is in progress. Added to support raytraced mode.

Method: Rhino.Render.RenderWindow.SetProgress(string text, float progress)
Return: void
Modifiers: public
Summary: Accepts a rendering progress value to inform the user of the rendering advances.
Parameter: text (string)
Parameter Summary: The progress text.
Parameter: progress (float)
Parameter Summary: A progress value in the domain [0.0f; 1.0f].

Method: Rhino.Render.RenderWindow.SetRenderOutputRect(Rectangle rect)
Return: void
Modifiers: public
Summary: Specify a sub-rectangle of the render window to indicate where the relevant render output has been written. For example, if a renderer chooses to render at half resolution, it could write its data to the top left quadrant of the render window, which can be indicated by setting the render output rectangle. This is set to the full render window size by default. When the render window size is modified, the render output rectangle will be set to reflect the new size.
Parameter: rect (Rectangle)
Parameter Summary: Rectangle

Method: Rhino.Render.RenderWindow.SetRGBAChannelColors(System.Drawing.Rectangle rectangle, Rhino.Display.Color4f[] colors)
Return: void
Modifiers: public
Summary: Call this method to open the RenderWindow.StandardChannels.RGBA channel and set a block of color values
Parameter: rectangle (System.Drawing.Rectangle)
Parameter Summary: rectangle.X is the horizontal pixel position of the left edge. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer. rectangle.Y is the vertical pixel position of the top edge. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer. rectangle.Width is the width of the rectangle in pixels. No validation is done on this value. rectangle.Height is the height of the rectangle in pixels. No validation is done on this value.
Parameter: colors (Rhino.Display.Color4f[])
Parameter Summary: Array of Color4f values used to set the RenderWindow.StandardChannels.RGBA

Method: Rhino.Render.RenderWindow.SetRGBAChannelColors(System.Drawing.Size size, Rhino.Display.Color4f[] colors)
Return: void
Modifiers: public
Summary: Call this method to open the RenderWindow.StandardChannels.RGBA channel and set a block of color values
Parameter: size (System.Drawing.Size)
Parameter Summary: Size of the area to set. No validation is done on this value
Parameter: colors (Rhino.Display.Color4f[])
Parameter Summary: Array of Color4f values used to set the RenderWindow.StandardChannels.RGBA

Method: Rhino.Render.RenderWindow.SetSize(System.Drawing.Size size)
Return: void
Modifiers: public

Method: Rhino.Render.RenderWindow.SetView(ViewInfo view)
Return: void
Modifiers: public

Method: Rhino.Render.RenderWindow.Size()
Return: System.Drawing.Size
Modifiers: public

Class: Rhino.Render.RenderWindow.Channel

Property: Rhino.Render.RenderWindow.Channel.Height
Return: int
Modifiers: public
Summary: Return the channel height.
Accessors: get

Property: Rhino.Render.RenderWindow.Channel.Id
Return: Guid
Modifiers: public
Summary: Return the channel id.
Accessors: get

Property: Rhino.Render.RenderWindow.Channel.Width
Return: int
Modifiers: public
Summary: Return the channel width.
Accessors: get

Method: Rhino.Render.RenderWindow.Channel.AddValue(int x, int y, Rhino.Display.Color4f value)
Return: void
Modifiers: public
Summary: Add value to existing values at point x, y. If x or y are out of range, the function will fail and may crash Rhino.
Parameter: x (int)
Parameter Summary: The horizontal pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: y (int)
Parameter Summary: The vertical pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: value (Rhino.Display.Color4f)
Parameter Summary: The color to store in the channel at the specified position.

Method: Rhino.Render.RenderWindow.Channel.Clone()
Return: Channel
Modifiers: public
Summary: Return a clone of the channel.

Method: Rhino.Render.RenderWindow.Channel.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.RenderWindow.Channel.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.RenderWindow.Channel.GetMinMaxValues(out float min, out float max)
Return: void
Modifiers: public
Summary: Get the minimum and maximum values in the channel. The channel's minimum value. The channel's maximum value.

Method: Rhino.Render.RenderWindow.Channel.GetValue(int x, int y, Rhino.Render.ComponentOrders componentOrder, ref float values)
Return: void
Modifiers: public
Summary: Get values from the channel.

Method: Rhino.Render.RenderWindow.Channel.GetValues(System.Drawing.Rectangle rectangle, int stride, Rhino.Render.ComponentOrders componentOrder, ref float values)
Return: void
Modifiers: public
Summary: Get a rectangle of values from the channel. The input parameters are checked for validity. If the rectangle is not fully inside the frame buffer, the function will fail.

Method: Rhino.Render.RenderWindow.Channel.PixelSize()
Return: int
Modifiers: public
Summary: Returns the size of the data in one pixel in the channel. For RDK standard channels, this value is always sizeof(float). For the special chanRGBA collective channel, this value is 4 * sizeof(float).

Method: Rhino.Render.RenderWindow.Channel.SetValue(int x, int y, float value)
Return: void
Modifiers: public
Summary: Assignto a pixel at coordinate (,).
Parameter: x (int)
Parameter Summary: The horizontal pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: y (int)
Parameter Summary: the vertical pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: value (float)
Parameter Summary: The value to store in the channel at the specified position.

Method: Rhino.Render.RenderWindow.Channel.SetValue(int x, int y, Rhino.Display.Color4f value)
Return: void
Modifiers: public
Summary: If x or y are out of range, the function will fail and may crash Rhino.
Parameter: x (int)
Parameter Summary: The horizontal pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: y (int)
Parameter Summary: The vertical pixel position. No validation is done on this value. The caller is responsible for ensuring that it is within the frame buffer.
Parameter: value (Rhino.Display.Color4f)
Parameter Summary: The color to store in the channel at the specified position.

Method: Rhino.Render.RenderWindow.Channel.SetValues(System.Drawing.Rectangle rectangle, Size bufferResolution, PixelBuffer colorBuffer)
Return: void
Modifiers: public
Summary: Set a pixel buffer
Parameter: rectangle (System.Drawing.Rectangle)
Parameter Summary: 
Parameter: bufferResolution (Size)
Parameter Summary: 
Parameter: colorBuffer (PixelBuffer)
Parameter Summary: PixelBuffer to a color buffer of floats in RGBA format.

Method: Rhino.Render.RenderWindow.Channel.SetValuesFlipped(System.Drawing.Rectangle rectangle, Size bufferResolution, PixelBuffer colorBuffer)
Return: void
Modifiers: public
Summary: Set a pixel buffer y-flipped.
Parameter: rectangle (System.Drawing.Rectangle)
Parameter Summary: 
Parameter: bufferResolution (Size)
Parameter Summary: 
Parameter: colorBuffer (PixelBuffer)
Parameter Summary: PixelBuffer to a color buffer of floats in RGBA format.

Class: Rhino.Render.RenderWindow.ChannelGPU

Property: Rhino.Render.RenderWindow.ChannelGPU.DisplayTechnology
Return: DisplayTechnology
Modifiers: public
Summary: Return the type of API used for this channel's texture handle.
Accessors: get

Method: Rhino.Render.RenderWindow.ChannelGPU.Clone()
Return: ChannelGPU
Modifiers: public
Summary: Return a clone of the channel.

Method: Rhino.Render.RenderWindow.ChannelGPU.Close()
Return: void
Modifiers: public
Summary: Close the channel.

Method: Rhino.Render.RenderWindow.ChannelGPU.CopyTo(Channel channel)
Return: void
Modifiers: public
Summary: Copy the channel to a 'CPU' channel.
Parameter: channel (Channel)
Parameter Summary: The channel to copy to.

Method: Rhino.Render.RenderWindow.ChannelGPU.Dispose()
Return: void
Modifiers: public
Summary: Dispose of the channel.

Method: Rhino.Render.RenderWindow.ChannelGPU.Height()
Return: int
Modifiers: public
Summary: Return the channel height.

Method: Rhino.Render.RenderWindow.ChannelGPU.Id()
Return: System.Guid
Modifiers: public
Summary: Return the channel id.

Method: Rhino.Render.RenderWindow.ChannelGPU.PixelSize()
Return: uint
Modifiers: public
Summary: Return the size of one pixel's data in the channel.

Method: Rhino.Render.RenderWindow.ChannelGPU.TextureHandle()
Return: uint
Modifiers: public
Summary: Return the channel's texture handle.

Method: Rhino.Render.RenderWindow.ChannelGPU.TextureHandleMetal()
Return: System.IntPtr
Modifiers: public
Summary: Return the channel's Metal texture handle (id<MTLTexture>) as an IntPtr. If there isn't one, IntPtr.Zero will be returned. The ChannelGPU.DisplayTechnology property will indicate which type of texture is stored in the channel. The IntPtr can be turned back into an Objective-C id<MTLTexture> using id<MTLTexture> texture = CFBridgingRelease(ptr);

Method: Rhino.Render.RenderWindow.ChannelGPU.TextureHandleOpenGL()
Return: uint
Modifiers: public
Summary: Return the channel's OpenGL texture handle. If there isn't one, a value of 0 will be returned. The ChannelGPU.DisplayTechnology property will indicate which type of texture is stored in the channel.

Method: Rhino.Render.RenderWindow.ChannelGPU.Width()
Return: int
Modifiers: public
Summary: Return the channel width.

Class: Rhino.Render.RenderWindow.ImageAdjust
Summary: Class to set image adjusting settings to a RenderWindow. This can't be directly created. Instead, one should use RenderWindow.GetAdjust() to get an ImageAdjust instance that can be modified, then passed into RenderWindow.SetAdjust() to update image adjusting settings.1

Property: Rhino.Render.RenderWindow.ImageAdjust.Dither
Return: Methods
Modifiers: public
Summary: Set the Dithering method to use when adjusting the RenderWindow content.
Accessors: get set

Property: Rhino.Render.RenderWindow.ImageAdjust.Gamma
Return: float
Modifiers: public
Summary: Set the gamma value. The inverse of this will be used to apply gamma correction to the RenderWindow RGBA channel when necessary.
Accessors: get set

Class: Rhino.Render.RenderWindowClonedEventArgs

Property: Rhino.Render.RenderWindowClonedEventArgs.NewRenderWindow
Return: RenderWindow
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderWindowClonedEventArgs.NewSessionId
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Render.RenderWindowClonedEventArgs.OldRenderWindow
Return: RenderWindow
Modifiers: public
Accessors: get

Property: Rhino.Render.RenderWindowClonedEventArgs.OldSessionId
Return: Guid
Modifiers: public
Accessors: get set

Class: Rhino.Render.SafeFrame
Summary: Safe frame

Constructor: Rhino.Render.SafeFrame.SafeFrame()
Summary: Create a utility object not associated with any document

Constructor: Rhino.Render.SafeFrame.SafeFrame(RhinoDoc doc)
Summary: Create the SafeFrame object which is associated with the document

Constructor: Rhino.Render.SafeFrame.SafeFrame(SafeFrame sf)
Summary: Create a utility object not associated with any document from another object

Property: Rhino.Render.SafeFrame.ActionFrameLinked
Return: bool
Modifiers: public
Summary: Action Frame Linked, On = Use the same scale for X and Y. Off = use different scales for X and Y.
Accessors: get set

Property: Rhino.Render.SafeFrame.ActionFrameOn
Return: bool
Modifiers: public
Summary: Turn on the user specified action area, which shown with blue frames.
Accessors: get set

Property: Rhino.Render.SafeFrame.ActionFrameXScale
Return: double
Modifiers: public
Summary: Action Frame X-scale. This value should be in the range 0..1 but it is not clamped. It is displayed in the UI in the range 0..100.
Accessors: get set

Property: Rhino.Render.SafeFrame.ActionFrameYScale
Return: double
Modifiers: public
Summary: Action Frame Y-scale. This value should be in the range 0..1 but it is not clamped. It is displayed in the UI in the range 0..100.
Accessors: get set

Property: Rhino.Render.SafeFrame.Enabled
Return: bool
Modifiers: public
Summary: Determines whether the safe-frame is enabled.
Accessors: get set

Property: Rhino.Render.SafeFrame.FieldsOn
Return: bool
Modifiers: public
Summary: Show the 4 by 3 field grid in the safe-frame.
Accessors: get set

Property: Rhino.Render.SafeFrame.LiveFrameOn
Return: bool
Modifiers: public
Summary: Turn on the live area, which shows the size of the rendered view as a yellow frame in the viewport.
Accessors: get set

Property: Rhino.Render.SafeFrame.PerspectiveOnly
Return: bool
Modifiers: public
Summary: Show the safe-frame only in perspective views.
Accessors: get set

Property: Rhino.Render.SafeFrame.TitleFrameLinked
Return: bool
Modifiers: public
Summary: Title Frame Linked, On = Use the same scale for X and Y. Off = use different scales for X and Y.
Accessors: get set

Property: Rhino.Render.SafeFrame.TitleFrameOn
Return: bool
Modifiers: public
Summary: Show a user specified title area frame in orange.
Accessors: get set

Property: Rhino.Render.SafeFrame.TitleFrameXScale
Return: double
Modifiers: public
Summary: Title Frame X-scale. This value should be in the range 0..1 but it is not clamped. It is displayed in the UI in the range 0..100.
Accessors: get set

Property: Rhino.Render.SafeFrame.TitleFrameYScale
Return: double
Modifiers: public
Summary: Title Frame Y-scale. This value should be in the range 0..1 but it is not clamped. It is displayed in the UI in the range 0..100.
Accessors: get set

Method: Rhino.Render.SafeFrame.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.SafeFrame.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.SceneServerData
Summary: The Scene Server Data used by the PreviewSceneServer

Constructor: Rhino.Render.SceneServerData.SceneServerData(PreviewAppearance appearance, SceneServerDataUsage usage)

Constructor: Rhino.Render.SceneServerData.SceneServerData(PreviewGeometry geo, PreviewBackground back, PreviewLighting light, SceneServerDataUsage usage)
Summary: Constructor for SceneServerData

Property: Rhino.Render.SceneServerData.CppPointer
Return: IntPtr
Modifiers: public
Summary: The CppPointer of SceneServerData
Accessors: get

Method: Rhino.Render.SceneServerData.Dispose()
Return: void
Modifiers: public
Summary: Dispose for SceneServerData

Method: Rhino.Render.SceneServerData.Dispose(bool bDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose for SceneServerData

Class: Rhino.Render.SimulatedEnvironment

Constructor: Rhino.Render.SimulatedEnvironment.SimulatedEnvironment()

Property: Rhino.Render.SimulatedEnvironment.BackgroundColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedEnvironment.BackgroundImage
Return: SimulatedTexture
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedEnvironment.BackgroundProjection
Return: BackgroundProjections
Modifiers: public
Accessors: get set

Method: Rhino.Render.SimulatedEnvironment.ProjectionFromString(System.String projection)
Return: BackgroundProjections
Modifiers: public, static

Method: Rhino.Render.SimulatedEnvironment.StringFromProjection(BackgroundProjections projection)
Return: string
Modifiers: public, static

Method: Rhino.Render.SimulatedEnvironment.ConstPointer()
Return: System.IntPtr
Modifiers: public

Method: Rhino.Render.SimulatedEnvironment.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.SimulatedEnvironment.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Class: Rhino.Render.SimulatedTexture

Constructor: Rhino.Render.SimulatedTexture.SimulatedTexture()

Constructor: Rhino.Render.SimulatedTexture.SimulatedTexture(RhinoDoc doc, Texture texture)

Constructor: Rhino.Render.SimulatedTexture.SimulatedTexture(RhinoDoc doc)

Constructor: Rhino.Render.SimulatedTexture.SimulatedTexture(Texture texture)

Property: Rhino.Render.SimulatedTexture.BitmapSize
Return: int
Modifiers: public, static
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Filename
Return: String
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Filtered
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.HasTransparentColor
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.LocalMappingTransform
Return: Transform
Modifiers: public
Accessors: get

Property: Rhino.Render.SimulatedTexture.MappingChannel
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Offset
Return: Vector2d
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.OriginalFilename
Return: String
Modifiers: public
Accessors: get

Property: Rhino.Render.SimulatedTexture.ProjectionMode
Return: ProjectionModes
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Repeat
Return: Vector2d
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Repeating
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.Rotation
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.TransparentColor
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.Render.SimulatedTexture.TransparentColorSensitivity
Return: double
Modifiers: public
Accessors: get set

Method: Rhino.Render.SimulatedTexture.ConstPointer()
Return: System.IntPtr
Modifiers: public

Method: Rhino.Render.SimulatedTexture.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.SimulatedTexture.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.SimulatedTexture.MetersToUnits(double units)
Return: double
Modifiers: public

Method: Rhino.Render.SimulatedTexture.MetersToUnits(RhinoDoc doc, double units)
Return: double
Modifiers: public

Method: Rhino.Render.SimulatedTexture.SetMappingChannelAndProjectionMode(ProjectionModes pm, int mappingChannel, EnvironmentMappingModes emm)
Return: void
Modifiers: public

Method: Rhino.Render.SimulatedTexture.Texture()
Return: Rhino.DocObjects.Texture
Modifiers: public

Method: Rhino.Render.SimulatedTexture.UnitsToMeters(double units)
Return: double
Modifiers: public

Method: Rhino.Render.SimulatedTexture.UnitsToMeters(RhinoDoc doc, double units)
Return: double
Modifiers: public

Class: Rhino.Render.Skylight

Constructor: Rhino.Render.Skylight.Skylight()
Summary: Create a utility object not associated with any document

Constructor: Rhino.Render.Skylight.Skylight(Skylight src)
Summary: Create a utility object not associated with any document from another object

Property: Rhino.Render.Skylight.CustomEnvironment
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.Render.Skylight.CustomEnvironmentOn
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.Skylight.Enabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.Skylight.ShadowIntensity
Return: double
Modifiers: public
Summary: ShadowIntensity is currently unused.
Accessors: get set

Method: Rhino.Render.Skylight.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.Skylight.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.Sun
Summary: Represents the Sun on a little portion of Earth.

Constructor: Rhino.Render.Sun.Sun()
Summary: Create a utility object not associated with any document

Property: Rhino.Render.Sun.Accuracy
Return: Accuracies
Modifiers: public
Summary: Accuracy.
Accessors: get set

Property: Rhino.Render.Sun.Altitude
Return: double
Modifiers: public
Summary: The sun's altitude above the horizon in degrees in the range -90 to +90. Setting this value will also set the sun to manual control mode.
Accessors: get set

Property: Rhino.Render.Sun.Azimuth
Return: double
Modifiers: public
Summary: The sun's azimuth in degrees. The value increases Eastwards with North as zero. Setting this value will also set the sun to manual control mode. Note: This value is not affected by the direction of north.
Accessors: get set

Property: Rhino.Render.Sun.DaylightSaving
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.Sun.DaylightSavingMinutes
Return: int
Modifiers: public
Summary: Daylight saving time in minutes
Accessors: get set

Property: Rhino.Render.Sun.DaylightSavingOn
Return: bool
Modifiers: public
Summary: Daylight saving time 'on' state
Accessors: get set

Property: Rhino.Render.Sun.Enabled
Return: bool
Modifiers: public
Summary: Turn the sun on/off in this document.
Accessors: get set

Property: Rhino.Render.Sun.Hash
Return: uint
Modifiers: public
Summary: Get a hash of the sun state.
Accessors: get

Property: Rhino.Render.Sun.Intensity
Return: double
Modifiers: public
Summary: Sun intensity.
Accessors: get set

Property: Rhino.Render.Sun.Latitude
Return: double
Modifiers: public
Summary: The observer's latitude.
Accessors: get set

Property: Rhino.Render.Sun.Light
Return: Light
Modifiers: public
Summary: Get a Light which represents the sun. If manual control is in effect, no sun calculation is performed; the function uses the last known values of azimuth and altitude. If manual control is not in effect, the observer's position, date, time, time zone and daylight saving values are used to calculate the position of the sun.
Accessors: get

Property: Rhino.Render.Sun.Longitude
Return: double
Modifiers: public
Summary: The observer's longitude.
Accessors: get set

Property: Rhino.Render.Sun.ManualControl
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.Sun.ManualControlOn
Return: bool
Modifiers: public
Summary: Manual control 'on' state. When true, allows the user to set the sun azimuth and altitude directly. When false, the values are computed.
Accessors: get set

Property: Rhino.Render.Sun.North
Return: double
Modifiers: public
Summary: Angle in degrees on world X-Y plane that should be considered north in the model. The angle is measured starting at the x-axis and increases anti-clockwise. The y-axis corresponds to a 'north' angle of 90 degrees.
Accessors: get set

Property: Rhino.Render.Sun.SkylightOn
Return: bool
Modifiers: public
Summary: Turn skylight on or off.
Accessors: get set

Property: Rhino.Render.Sun.TimeZone
Return: double
Modifiers: public
Summary: The observer's time zone measured in hours relative to UTC.
Accessors: get set

Property: Rhino.Render.Sun.Vector
Return: Vector3d
Modifiers: public
Accessors: get set

Method: Rhino.Render.Sun.AltitudeFromValues(double latitude, double longitude, double timezoneHours, int daylightMinutes, System.DateTime when, double hours, bool fast)
Return: double
Modifiers: static, public

Method: Rhino.Render.Sun.ColorFromAltitude(double altitudeDegrees)
Return: System.Drawing.Color
Modifiers: static, public
Summary: Get sun color based on altitude.
Parameter: altitudeDegrees (double)
Parameter Summary: The altitude sun angle in degrees.

Method: Rhino.Render.Sun.Here(out double latitude, out double longitude)
Return: bool
Modifiers: static, public

Method: Rhino.Render.Sun.JulianDay(double timezoneHours, int daylightMinutes, System.DateTime when, double hours)
Return: double
Modifiers: static, public

Method: Rhino.Render.Sun.SunDirection(double latitude, double longitude, System.DateTime when)
Return: Geometry.Vector3d
Modifiers: public, static

Method: Rhino.Render.Sun.TwilightZone()
Return: double
Modifiers: static, public

Method: Rhino.Render.Sun.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.Sun.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.Sun.GetDateTime(System.DateTimeKind kind)
Return: System.DateTime
Modifiers: public
Summary: Get the observer's date and time as a DateTime with kind DateTimeKind.Local.  Param 'kind' specifies the kind of date and time to retrieve from the sun.  - If DateTimeKind.Local, the returned DateTime will contain the local sun time, i.e., the time you see in the UI under 'Local'.  - If DateTimeKind.Utc, the returned DateTime will contain the UTC sun time, i.e., the time you see in the UI under 'UTC', which is the Sun's local time adjusted for its time zone and daylight saving (if any).  **** Local sun time is to do with the Sun's time zone and not the time zone of the computer.  **** The returned DateTime object always has a kind of Local even if you requested the sun's UTC date and time. This is because the Sun's time zone is nothing to do with the actual computer's time zone and converting the result would cause further confusion.

Method: Rhino.Render.Sun.SetDateTime(System.DateTime time, System.DateTimeKind kind)
Return: void
Modifiers: public
Summary: Set the observer's date and time. kind specifies the kind of date and time to set to the sun. Note that this is distinct from the DateTimeKind of 'time' which has nothing to do with the sun's local/UTC scenario.  - If 'kind' is DateTimeKind.Local, the sun's local time will be set, i.e., the time you see in the UI under 'Local'. This is the preferred way to use this function.  - If 'kind' is DateTimeKind.Utc, the sun's UTC time will be set, i.e., the time you see in the UI under 'UTC'. This is only for completeness; it's not likely to be useful, but if you do use it, be aware that the sun will convert this time to local using its currently set time zone and daylight saving information (not the locale's information).  Caveat: Local sun time is to do with the Sun's time zone and not the time zone of the computer.  Caveat: If the supplied DateTime object has a kind of Local, it will be used verbatim. If, however, it has a kind of Utc, it will be converted to local time on the computer using the computer's time zone and daylight saving locale information before being passed to the sun. To avoid confusion, it's best to always use DateTimes with Kind 'Local' when setting the sun's date and time. This is because the Sun's time zone is nothing to do with the actual computer's time zone.

Method: Rhino.Render.Sun.SetPosition(double azimuthDegrees, double altitudeDegrees)
Return: void
Modifiers: public

Method: Rhino.Render.Sun.SetPosition(System.DateTime when, double latitudeDegrees, double longitudeDegrees)
Return: void
Modifiers: public

Method: Rhino.Render.Sun.ShowDialog()
Return: void
Modifiers: public
Summary: Show the modal sun dialog.

Class: Rhino.Render.SupportOptions

Constructor: Rhino.Render.SupportOptions.SupportOptions()
Summary: Initializes a new instance of the SupportOptions class

Method: Rhino.Render.SupportOptions.AlwaysShowSunPreview()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.AutoSaveKeepAmount()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.AutoSaveRenderings()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.CheckSupportFilesBeforeRendering()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.CombineEditors()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.CustomLibraryPath()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.CustomPaths()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.DarkPreviewCheckerColor()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.EnablePreviewJobLog()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_CustomPath()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_CustomPathList()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_InitialLocation()
Return: RdkInitialLocation
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_InitialLocationCustomFolder()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_LastNavigatedLocation()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetCustomPath(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetCustomPathList(string path)
Return: void
Modifiers: public, static
Parameter: path (string)
Parameter Summary: Semicolon delimited string of paths.

Method: Rhino.Render.SupportOptions.FileExplorer_SetInitialLocation(RdkInitialLocation l)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetInitialLocationCustomFolder(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetLastNavigatedLocation(string folder)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetShowCustom(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetShowDocuments(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetShowRenderContent(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_SetUseDefaultLocation(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_ShowCustom()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_ShowDocuments()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_ShowRenderContent()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.FileExplorer_UseDefaultLocation()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.HarvestContentParameters()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LabelFormatLoc()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LabelFormatUtc()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LastNavigatedLocation()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_CustomPath()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_CustomPathList()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_InitialLocation()
Return: RdkInitialLocation
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_InitialLocationCustomFolder()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_LastNavigatedLocation()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetCustomPath(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetCustomPathList(string path)
Return: void
Modifiers: public, static
Parameter: path (string)
Parameter Summary: Semicolon delimited string of paths.

Method: Rhino.Render.SupportOptions.Libraries_SetInitialLocation(RdkInitialLocation l)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetInitialLocationCustomFolder(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetLastNavigatedLocation(string folder)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetShowCustom(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetShowDocuments(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetShowRenderContent(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_SetUseDefaultLocation(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_ShowCustom()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_ShowDocuments()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_ShowRenderContent()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.Libraries_UseDefaultLocation()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LibrariesInitialLocation()
Return: RdkInitialLocation
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LibrariesInitialLocationCustomFolder()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.LightPreviewCheckerColor()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.MaxPreviewCacheMB()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.MaxPreviewSeconds()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.MultithreadedTextureEvaluation()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.PreferNativeRenderer()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.PreferredUnpackFolder()
Return: string
Modifiers: public, static

Method: Rhino.Render.SupportOptions.PreviewCustomRenderMeshes()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetAlwaysShowSunPreview(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetAutoSaveKeepAmount(int value)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetAutoSaveRenderings(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetCheckSupportFilesBeforeRendering(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetCombineEditors(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetCustomLibraryPath(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetCustomPaths(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetHarvestContentParameters(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetLabelFormatLoc(int value)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetLabelFormatUtc(int value)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetLastNavigatedLocation(string folder)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetLibrariesInitialLocation(RdkInitialLocation l)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetLibrariesInitialLocationCustomFolder(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetMultithreadedTextureEvaluation(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetPreferNativeRenderer(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetPreferredUnpackFolder(string path)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetPreviewCustomRenderMeshes(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetShowCustom(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetShowDetailsPanel(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetShowDocuments(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetShowRenderContent(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetSupportSharedUIs(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetTextureSize(RdkTextureSize size, bool bSendEvent)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetUseDefaultLibraryPath(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetUsePreviewCache(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SetUseQuickInitialPreview(bool b)
Return: void
Modifiers: public, static

Method: Rhino.Render.SupportOptions.ShowCustom()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.ShowDetailsPanel()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.ShowDocuments()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.ShowRenderContent()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SupportSharedUIs()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.SupportSharedUIsNoCache()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.TextureSize()
Return: int
Modifiers: public, static

Method: Rhino.Render.SupportOptions.UseDefaultLibraryPath()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.UsePreview()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.UsePreviewCache()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.UseQuickInitialPreview()
Return: bool
Modifiers: public, static

Method: Rhino.Render.SupportOptions.UseRenderedPreview()
Return: bool
Modifiers: public, static

Class: Rhino.Render.TexturedColor
Summary: Color4f specialization of TexturedValue.

Constructor: Rhino.Render.TexturedColor.TexturedColor(string name, Color4f value, bool on, float amount)

Class: Rhino.Render.TexturedFloat
Summary: float specialization of TexturedValue.

Constructor: Rhino.Render.TexturedFloat.TexturedFloat(string name, float value, bool on, float amount)

Class: Rhino.Render.TexturedValue<T>
Summary: Generic class to help holding on to related values. This can be used to get data from textured content fields with the HandleTexturedValuefunction.

Constructor: Rhino.Render.TexturedValue<T>.TexturedValue<T>(string name, T value, bool on, float amount)

Class: Rhino.Render.TextureEvaluator
Summary: This is the interface to a lightweight object capable of evaluating texture color throughout uvw space.  Derive from this class to create your own texture evaluator to return from a custom RenderTexture.

Constructor: Rhino.Render.TextureEvaluator.TextureEvaluator()
Summary: Base class constructor

Constructor: Rhino.Render.TextureEvaluator.TextureEvaluator(TextureEvaluatorFlags evaluatorFlags)
Summary: Base class constructor

Method: Rhino.Render.TextureEvaluator.Dispose()
Return: void
Modifiers: public
Summary: For Dispose pattern

Method: Rhino.Render.TextureEvaluator.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For Dispose pattern

Method: Rhino.Render.TextureEvaluator.GetColor(Point3d uvw, Vector3d duvwdx, Vector3d duvwdy, ref Display.Color4f color)
Return: bool
Modifiers: public
Summary: Optimized version of GetColor for callers.  Much faster in the case of a native (C++) evaluator.
Parameter: uvw (Point3d)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: duvwdx (Vector3d)
Parameter Summary: duvwdx is a ray differential.
Parameter: duvwdy (Vector3d)
Parameter Summary: duvwdy is a ray differential.
Parameter: color (Display.Color4f)
Parameter Summary: The texture color at this point in UV space.

Method: Rhino.Render.TextureEvaluator.GetColor(Point3d uvw, Vector3d duvwdx, Vector3d duvwdy)
Return: Display.Color4f
Modifiers: public, virtual
Summary: Get the color of the texture at a particular point in uvw space. May be called from within a rendering shade pipeline. note For ray differentials see Pharr Humphreys, "Physically Based Rendering", chapter 11.
Parameter: uvw (Point3d)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: duvwdx (Vector3d)
Parameter Summary: duvwdx is a ray differential.
Parameter: duvwdy (Vector3d)
Parameter Summary: duvwdy is a ray differential.

Method: Rhino.Render.TextureEvaluator.Initialize()
Return: bool
Modifiers: public, virtual
Summary: Call this function before calling GetColor for the first time. Ideally, this should be on the main thread, but you can also call it on a worker thread as long as you are sure that Initialize() or GetColor() cannot be called at the same time on another thread.

Method: Rhino.Render.TextureEvaluator.WriteToByteArray(int width, int height)
Return: SimpleArrayByte
Modifiers: public, virtual
Summary: Fast access to bitmap evaluator - supply size (which you will probably have received from CRhRdkTexture::PixelSize) to see if the data can be extracted direct to a width*height*4 array of unsigned chars.
Parameter: width (int)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: height (int)
Parameter Summary: duvwdx is a ray differential.

Method: Rhino.Render.TextureEvaluator.WriteToByteArray2(int width, int height)
Return: StdVectorByte
Modifiers: public, virtual
Summary: Fast access to bitmap evaluator - supply size (which you will probably have received from CRhRdkTexture::PixelSize) to see if the data can be extracted direct to a width*height*4 array of unsigned chars.
Parameter: width (int)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: height (int)
Parameter Summary: duvwdx is a ray differential.

Method: Rhino.Render.TextureEvaluator.WriteToFloatArray(int width, int height)
Return: SimpleArrayFloat
Modifiers: public, virtual
Summary: Fast access to bitmap evaluator - supply size (which you will probably have received from CRhRdkTexture::PixelSize) to see if the data can be extracted direct to a width*height*4 array of unsigned chars.
Parameter: width (int)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: height (int)
Parameter Summary: duvwdx is a ray differential.

Method: Rhino.Render.TextureEvaluator.WriteToFloatArray2(int width, int height)
Return: StdVectorFloat
Modifiers: public, virtual
Summary: Fast access to bitmap evaluator - supply size (which you will probably have received from CRhRdkTexture::PixelSize) to see if the data can be extracted direct to a width*height*4 array of unsigned chars.
Parameter: width (int)
Parameter Summary: is the point for which to evaluate the texture.
Parameter: height (int)
Parameter Summary: duvwdx is a ray differential.

Class: Rhino.Render.TextureGraphInfo

Constructor: Rhino.Render.TextureGraphInfo.TextureGraphInfo()

Property: Rhino.Render.TextureGraphInfo.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.TextureGraphInfo.ActiveAxis()
Return: Axis
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.ActiveChannel()
Return: Channel
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.AmountU()
Return: double
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.AmountV()
Return: double
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.AmountW()
Return: double
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.SetActiveAxis(Axis axis)
Return: void
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.SetActiveChannel(Channel channel)
Return: void
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.SetAmountU(double d)
Return: void
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.SetAmountV(double d)
Return: void
Modifiers: public

Method: Rhino.Render.TextureGraphInfo.SetAmountW(double d)
Return: void
Modifiers: public

Class: Rhino.Render.TextureMapping
Summary: Represents a texture mapping.

Property: Rhino.Render.TextureMapping.ComponentType
Return: ModelComponentType
Modifiers: public, override
Summary: Returns <b>ModelComponentType.TextureMapping</b> .
Accessors: get

Property: Rhino.Render.TextureMapping.Id
Return: Guid
Modifiers: public, override
Summary: The unique Id for this texture mapping object.
Accessors: get

Property: Rhino.Render.TextureMapping.MappingType
Return: TextureMappingType
Modifiers: public
Summary: Texture mapping type associated with this Mapping object.
Accessors: get

Property: Rhino.Render.TextureMapping.NormalTransform
Return: Transform
Modifiers: public
Summary: For primitive based mappings, these transformations are used to map the world coordinate (x,y,z) point P and  surface normal N before it is projected to the normalized mapping primitive. The surface normal transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a runtime setting that is not saved in 3dm files. If m_type is srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
Accessors: get set

Property: Rhino.Render.TextureMapping.PrimativeTransform
Return: Transform
Modifiers: public
Summary: For primitive based mappings, these transformations are used to map the world coordinate (x,y,z) point P and  surface normal N before it is projected to the normalized mapping primitive. The surface normal transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a runtime setting that is not saved in 3dm files. If m_type is srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
Accessors: get set

Property: Rhino.Render.TextureMapping.PrimitiveTransform
Return: Transform
Modifiers: public
Summary: For primitive based mappings, these transformations are used to map the world coordinate (x,y,z) point P and  surface normal N before it is projected to the normalized mapping primitive. The surface normal transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a runtime setting that is not saved in 3dm files. If m_type is srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
Accessors: get set

Property: Rhino.Render.TextureMapping.UvwTransform
Return: Transform
Modifiers: public
Summary: Transform applied to mapping coordinate (u,v,w) to convert it into a texture coordinate.
Accessors: get set

Method: Rhino.Render.TextureMapping.CreateBoxMapping(Plane plane, Interval dx, Interval dy, Interval dz, bool capped)
Return: TextureMapping
Modifiers: public, static
Summary: Create a box projection texture mapping.
Parameter: plane (Plane)
Parameter Summary: The sides of the box the box are parallel to the plane's coordinate planes.  The dx, dy, dz intervals determine the location of the sides.
Parameter: dx (Interval)
Parameter Summary: Determines the location of the front and back planes. The vector plane.xaxis is perpendicular to these planes and they pass through plane.PointAt(dx[0],0,0) and plane.PointAt(dx[1],0,0), respectively.
Parameter: dy (Interval)
Parameter Summary: Determines the location of the left and right planes. The vector plane.yaxis is perpendicular to these planes and they pass through plane.PointAt(0,dy[0],0) and plane.PointAt(0,dy[1],0), respectively.
Parameter: dz (Interval)
Parameter Summary: Determines the location of the top and bottom planes. The vector plane.zaxis is perpendicular to these planes and they pass through plane.PointAt(0,0,dz[0]) and plane.PointAt(0,0,dz[1]), respectively.
Parameter: capped (bool)
Parameter Summary: If true, the box is treated as a finite capped box.

Method: Rhino.Render.TextureMapping.CreateCustomMeshMapping(Mesh mesh)
Return: TextureMapping
Modifiers: public, static
Summary: Create custom mesh mapping
Parameter: mesh (Mesh)
Parameter Summary: Mesh with texture coordinates

Method: Rhino.Render.TextureMapping.CreateCylinderMapping(Cylinder cylinder, bool capped)
Return: TextureMapping
Modifiers: public, static
Summary: Create a cylindrical projection texture mapping.
Parameter: cylinder (Cylinder)
Parameter Summary: cylinder in world space used to define a cylindrical coordinate system. The angular parameter maps (0,2pi) to texture "u" (0,1), The height parameter maps (height[0],height[1]) to texture "v" (0,1), and the radial parameter maps (0,r) to texture "w" (0,1).
Parameter: capped (bool)
Parameter Summary: If true, the cylinder is treated as a finite capped cylinder

Method: Rhino.Render.TextureMapping.CreateOcsMapping(Plane plane)
Return: TextureMapping
Modifiers: public, static
Summary: Create a Ocs texture mapping.  Note that OCS mappings must be placed on mapping channel ON_ObjectRenderingAttributes::OCSMappingChannelId() otherwise they will not work.
Parameter: plane (Plane)
Parameter Summary: A plane to use for mapping.

Method: Rhino.Render.TextureMapping.CreatePlaneMapping(Plane plane, Interval dx, Interval dy, Interval dz, bool capped)
Return: TextureMapping
Modifiers: public, static
Summary: Create a planar projection texture mapping
Parameter: plane (Plane)
Parameter Summary: A plane to use for mapping.
Parameter: dx (Interval)
Parameter Summary: portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)
Parameter: dy (Interval)
Parameter Summary: portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)
Parameter: dz (Interval)
Parameter Summary: portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)
Parameter: capped (bool)
Parameter Summary: set to True if planar UVW is meant, False for planar UV

Method: Rhino.Render.TextureMapping.CreatePlaneMapping(Plane plane, Interval dx, Interval dy, Interval dz)
Return: TextureMapping
Modifiers: public, static
Summary: Create a planar UV projection texture mapping
Parameter: plane (Plane)
Parameter Summary: A plane to use for mapping.
Parameter: dx (Interval)
Parameter Summary: portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)
Parameter: dy (Interval)
Parameter Summary: portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)
Parameter: dz (Interval)
Parameter Summary: portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)

Method: Rhino.Render.TextureMapping.CreateSphereMapping(Sphere sphere)
Return: TextureMapping
Modifiers: public, static
Summary: Create a spherical projection texture mapping.
Parameter: sphere (Sphere)
Parameter Summary: sphere in world space used to define a spherical coordinate system. The longitude parameter maps (0,2pi) to texture "u" (0,1). The latitude parameter maps (-pi/2,+pi/2) to texture "v" (0,1). The radial parameter maps (0,r) to texture "w" (0,1).

Method: Rhino.Render.TextureMapping.CreateSurfaceParameterMapping()
Return: TextureMapping
Modifiers: public, static
Summary: Create a mapping that will convert surface parameters into normalized(0,1)x(0,1) texture coordinates.

Method: Rhino.Render.TextureMapping.Evaluate(Point3d p, Vector3d n, out Point3d t, Transform pXform, Transform nXform)
Return: int
Modifiers: public
Summary: Evaluate the mapping to get a texture coordinate
Parameter: p (Point3d)
Parameter Summary: Vertex location
Parameter: n (Vector3d)
Parameter Summary: If the mapping projection is ray_projection, then this is the vertex unit normal.  Otherwise n is ignored.
Parameter: t (Point3d)
Parameter Summary: Texture coordinate (u,v,w)
Parameter: pXform (Transform)
Parameter Summary: Transformation to be applied to P before performing the mapping calculation.
Parameter: nXform (Transform)
Parameter Summary: Transformation to be applied to N before performing the mapping calculation. One way to calculate nXxform is to use the call pXform::GetVectorTransform(nXform).

Method: Rhino.Render.TextureMapping.Evaluate(Point3d p, Vector3d n, out Point3d t)
Return: int
Modifiers: public
Summary: Evaluate the mapping to get a texture coordinate
Parameter: p (Point3d)
Parameter Summary: Vertex location
Parameter: n (Vector3d)
Parameter Summary: If the mapping projection is ray_projection, then this is the vertex unit normal.  Otherwise n is ignored.
Parameter: t (Point3d)
Parameter Summary: Texture coordinate (u,v,w)

Method: Rhino.Render.TextureMapping.TryGetMappingBox(out Plane plane, out Interval dx, out Interval dy, out Interval dz, out bool capped)
Return: bool
Modifiers: public
Summary: Get a box projection from the texture mapping, including capped information
Parameter: plane (Plane)
Parameter Summary: The center of the box is at plane.origin and the sides of the box are parallel to the plane's coordinate planes.
Parameter: dx (Interval)
Parameter Summary: The "front" and "back" sides of the box are in spanned by the vectors plane.yaxis and plane.zaxis.  The back plane contains the point plane.PointAt(dx[0],0,0) and the front plane contains the point plane.PointAt(dx[1],0,0).
Parameter: dy (Interval)
Parameter Summary: The "left" and "right" sides of the box are in spanned by the vectors plane.zaxis and plane.xaxis.  The left plane contains the point plane.PointAt(0,dx[0],0) and the back plane contains the point plane.PointAt(0,dy[1],0).
Parameter: dz (Interval)
Parameter Summary: The "top" and "bottom" sides of the box are in spanned by the vectors plane.xaxis and plane.yaxis.  The bottom plane contains the point plane.PointAt(0,0,dz[0]) and the top plane contains the point plane.PointAt(0,0,dz[1]).
Parameter: capped (bool)
Parameter Summary: True if box mapping is capped.

Method: Rhino.Render.TextureMapping.TryGetMappingBox(out Plane plane, out Interval dx, out Interval dy, out Interval dz)
Return: bool
Modifiers: public
Summary: Get a box projection from the texture mapping.
Parameter: plane (Plane)
Parameter Summary: The center of the box is at plane.origin and the sides of the box are parallel to the plane's coordinate planes.
Parameter: dx (Interval)
Parameter Summary: The "front" and "back" sides of the box are in spanned by the vectors plane.yaxis and plane.zaxis.  The back plane contains the point plane.PointAt(dx[0],0,0) and the front plane contains the point plane.PointAt(dx[1],0,0).
Parameter: dy (Interval)
Parameter Summary: The "left" and "right" sides of the box are in spanned by the vectors plane.zaxis and plane.xaxis.  The left plane contains the point plane.PointAt(0,dx[0],0) and the back plane contains the point plane.PointAt(0,dy[1],0).
Parameter: dz (Interval)
Parameter Summary: The "top" and "bottom" sides of the box are in spanned by the vectors plane.xaxis and plane.yaxis.  The bottom plane contains the point plane.PointAt(0,0,dz[0]) and the top plane contains the point plane.PointAt(0,0,dz[1]).

Method: Rhino.Render.TextureMapping.TryGetMappingCylinder(out Cylinder cylinder, out bool capped)
Return: bool
Modifiers: public
Summary: Get a cylindrical projection parameters from this texture mapping.
Parameter: cylinder (Cylinder)
Parameter Summary: 
Parameter: capped (bool)
Parameter Summary: will be True if capped

Method: Rhino.Render.TextureMapping.TryGetMappingCylinder(out Cylinder cylinder)
Return: bool
Modifiers: public
Summary: Get a cylindrical projection parameters from this texture mapping.

Method: Rhino.Render.TextureMapping.TryGetMappingMesh(out Mesh mesh)
Return: bool
Modifiers: public
Summary: Get custom mapping mesh from this texture mapping.

Method: Rhino.Render.TextureMapping.TryGetMappingPlane(out Plane plane, out Interval dx, out Interval dy, out Interval dz, out bool capped)
Return: bool
Modifiers: public
Summary: Get plane mapping parameters from this texture mapping, including capping information
Parameter: plane (Plane)
Parameter Summary: 
Parameter: dx (Interval)
Parameter Summary: Portion of the plane's x axis that is mapped to [0,1]
Parameter: dy (Interval)
Parameter Summary: Portion of the plane's y axis that is mapped to [0,1]
Parameter: dz (Interval)
Parameter Summary: Portion of the plane's z axis that is mapped to [0,1]
Parameter: capped (bool)
Parameter Summary:

Method: Rhino.Render.TextureMapping.TryGetMappingPlane(out Plane plane, out Interval dx, out Interval dy, out Interval dz)
Return: bool
Modifiers: public
Summary: Get plane mapping parameters from this texture mapping.
Parameter: plane (Plane)
Parameter Summary: 
Parameter: dx (Interval)
Parameter Summary: Portion of the plane's x axis that is mapped to [0,1]
Parameter: dy (Interval)
Parameter Summary: Portion of the plane's y axis that is mapped to [0,1]
Parameter: dz (Interval)
Parameter Summary: Portion of the plane's z axis that is mapped to [0,1]

Method: Rhino.Render.TextureMapping.TryGetMappingSphere(out Sphere sphere)
Return: bool
Modifiers: public
Summary: Get a spherical projection parameters from this texture mapping.

Class: Rhino.Render.TimeZone
Summary: TimeZone

Property: Rhino.Render.TimeZone.Hours
Return: double
Modifiers: public
Summary: Gets hours of a time zone.
Accessors: get

Property: Rhino.Render.TimeZone.Latitude
Return: double
Modifiers: public
Summary: Returns the latitude of a major city nearby
Accessors: get

Property: Rhino.Render.TimeZone.Longitude
Return: double
Modifiers: public
Summary: Returns the Longitude of a major city nearby
Accessors: get

Property: Rhino.Render.TimeZone.Name
Return: String
Modifiers: public
Summary: Gets name of a time zone.
Accessors: get

Method: Rhino.Render.TimeZone.TimeZoneAt(int index)
Return: System.TimeZone
Modifiers: public, static
Summary: Returns a time zone at given index.
Parameter: index (int)
Parameter Summary: index.

Method: Rhino.Render.TimeZone.TimeZones()
Return: int
Modifiers: public, static
Summary: Returns number of available time zones.

Class: Rhino.Render.TwoColorRenderTexture

Constructor: Rhino.Render.TwoColorRenderTexture.TwoColorRenderTexture()

Property: Rhino.Render.TwoColorRenderTexture.Color1
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.Color2
Return: Color4f
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.SuperSample
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.SwapColors
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.Texture1Amount
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.Texture1On
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.Texture2Amount
Return: double
Modifiers: public
Accessors: get set

Property: Rhino.Render.TwoColorRenderTexture.Texture2On
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Render.TwoColorRenderTexture.AddAdditionalUISections()
Return: void
Modifiers: protected, abstract

Method: Rhino.Render.TwoColorRenderTexture.OnAddUserInterfaceSections()
Return: void
Modifiers: protected, override, sealed

Class: Rhino.Render.UndoRedo
Summary: This class contains the event for UndoRedoChanged that is fired from RDK .

Constructor: Rhino.Render.UndoRedo.UndoRedo()
Summary: Initializes a new instance of the UndoRedo class

Class: Rhino.Render.Utilities

Constructor: Rhino.Render.Utilities.Utilities()
Summary: Initializes a new instance of the Utilities class

Property: Rhino.Render.Utilities.DefaultRenderPlugInId
Return: Guid
Modifiers: public, static
Summary: Get the plug-in Id for the default render plug-in
Accessors: get

Property: Rhino.Render.Utilities.ShowIncompatibleEnvironments
Return: bool
Modifiers: public, static
Summary: Specifies whether incompatible content should be shown in the corresponding editor.
Accessors: get set

Property: Rhino.Render.Utilities.ShowIncompatibleMaterials
Return: bool
Modifiers: public, static
Summary: Specifies whether incompatible content should be shown in the corresponding editor.
Accessors: get set

Property: Rhino.Render.Utilities.ShowIncompatibleTextures
Return: bool
Modifiers: public, static
Summary: Specifies whether incompatible content should be shown in the corresponding editor.
Accessors: get set

Method: Rhino.Render.Utilities.ChangeContentType(RenderContent oldContent, System.Guid newType, bool harvestParameters)
Return: RenderContent
Modifiers: public, static
Summary: Changes the type of a content. This deletes the content and creates a replacement of the specified type allowing the caller to decide about harvesting.
Parameter: oldContent (RenderContent)
Parameter Summary: oldContent is the old content which is deleted.
Parameter: newType (System.Guid)
Parameter Summary: The type of content to replace pOldContent with.
Parameter: harvestParameters (bool)
Parameter Summary: Determines whether or not parameter harvesting will be performed.

Method: Rhino.Render.Utilities.FindFile(RhinoDoc doc, string fullPathToFile, bool unpackFromBitmapTableIfNecessary)
Return: string
Modifiers: public, static
Summary: Finds a file and also handles network shares. This is a replacement for CRhinoFileUtilities::FindFile().
Parameter: doc (RhinoDoc)
Parameter Summary: Document to use for locating .3dm file's folder.
Parameter: fullPathToFile (string)
Parameter Summary: The file to be found.
Parameter: unpackFromBitmapTableIfNecessary (bool)
Parameter Summary: True to seasch for the file in the bitmap table and unpack it into the temp folder if not found in the initial search.

Method: Rhino.Render.Utilities.FindFile(RhinoDoc doc, string fullPathToFile)
Return: string
Modifiers: public, static
Summary: Finds a file and also handles network shares. This is a replacement for CRhinoFileUtilities::FindFile().
Parameter: doc (RhinoDoc)
Parameter Summary: Document to use for locating .3dm file's folder.
Parameter: fullPathToFile (string)
Parameter Summary: The file to be found.

Method: Rhino.Render.Utilities.GetUnpackedFilesCacheFolder(RhinoDoc doc, bool create)
Return: string
Modifiers: public, static
Summary: Gets a folder associated with the document for unpacking textures to
Parameter: doc (RhinoDoc)
Parameter Summary: The document the folder is associated with
Parameter: create (bool)
Parameter Summary: If true, this will create a directory if it does not exist

Method: Rhino.Render.Utilities.IsCachedTextureFileInUse(string textureFileName)
Return: bool
Modifiers: public, static
Summary: Determines if any texture in any persistent content list is using the specified file name for caching.
Parameter: textureFileName (string)
Parameter Summary: The file name to check for. The extension is ignored.

Method: Rhino.Render.Utilities.LoadPersistentRenderContentFromFile(uint docSerialNumber, System.String filename)
Return: RenderContent
Modifiers: public, static
Summary: Loads a content from a library file and adds it to the persistent content list of a particular document.
Parameter: docSerialNumber (uint)
Parameter Summary: identifies the document into which the content should be loaded.
Parameter: filename (System.String)
Parameter Summary: is the full path to the file to be loaded.

Method: Rhino.Render.Utilities.MoveWindow(System.IntPtr hwnd, System.Drawing.Rectangle rect, bool bRepaint, bool bRepaintNC)
Return: void
Modifiers: public, static

Method: Rhino.Render.Utilities.PromptForSaveImageFileParameters(string filename, ref int width, ref int height, ref int colorDepth)
Return: string
Modifiers: public, static
Summary: Prompts the user for a save file name and the width, height and depth of an image to be saved.
Parameter: filename (string)
Parameter Summary: The original file path.
Parameter: width (int)
Parameter Summary: A width.
Parameter: height (int)
Parameter Summary: An height.
Parameter: colorDepth (int)
Parameter Summary: A color depth.

Method: Rhino.Render.Utilities.SafeFrameEnabled(RhinoDoc doc)
Return: bool
Modifiers: public, static
Summary: Queries whether or not the Safe Frame is visible.

Method: Rhino.Render.Utilities.SetDefaultRenderPlugIn(System.Guid pluginId)
Return: bool
Modifiers: public, static
Summary: Set default render application
Parameter: pluginId (System.Guid)
Parameter Summary: ID of render plug-in

Method: Rhino.Render.Utilities.ShowContentChooser(RhinoDoc doc, System.Guid defaultType, System.Guid defaultInstanceId, RenderContentKind kinds, ContentChooserFlags flags, string presetCategory, IEnumerable<string> categories, IEnumerable<Guid> types, out System.Guid[] instanceIdsOut)
Return: ShowContentChooserResults
Modifiers: public, static
Summary: Shows the content chooser to allow the user to select a new or existing content, or multiple contents.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document.
Parameter: defaultType (System.Guid)
Parameter Summary: The content type that will be initially selected in the 'New' tab.
Parameter: defaultInstanceId (System.Guid)
Parameter Summary: The content instance that will be initially selected in the 'Existing' tab.
Parameter: kinds (RenderContentKind)
Parameter Summary: Semicolon-delimited string specifying which content kinds will be displayed.
Parameter: flags (ContentChooserFlags)
Parameter Summary: Flags controlling the chooser (tabs to hide, type of selection).
Parameter: presetCategory (string)
Parameter Summary: Specifies the category to preset in the drop-down list on the 'New' tab. If this string is empty, the preset category will be 'All'.
Parameter: categories (IEnumerable<string>)
Parameter Summary: Specifies the categories to display. Render contents that do not belong to one of these categories will not be listed. If this array is empty, all render contents from all categories will be listed.
Parameter: types (IEnumerable<Guid>)
Parameter Summary: Specifies content types to display. Contents that are not one of these types will not be listed. If this array is empty, all content types will be listed.
Parameter: instanceIdsOut (System.Guid[])
Parameter Summary: Array of UUID(s) of the chosen item(s). Depending on eRhRdkSccResult, this can accept type id(s) of content type(s) or instance id(s) of existing content(s).

Method: Rhino.Render.Utilities.ShowContentChooser(RhinoDoc doc, System.Guid defaultType, System.Guid defaultInstanceId, RenderContentKind kinds, ShowContentChooserFlags flags, string presetCategory, IEnumerable<string> categories, IEnumerable<Guid> types, out System.Guid[] instanceIdsOut)
Return: ShowContentChooserResults
Modifiers: public, static
Summary: Shows the content chooser to allow the user to select a new or existing content, or multiple contents.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document.
Parameter: defaultType (System.Guid)
Parameter Summary: The content type that will be initially selected in the 'New' tab.
Parameter: defaultInstanceId (System.Guid)
Parameter Summary: The content instance that will be initially selected in the 'Existing' tab.
Parameter: kinds (RenderContentKind)
Parameter Summary: Semicolon-delimited string specifying which content kinds will be displayed.
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags controlling the chooser (tabs to hide, type of selection).
Parameter: presetCategory (string)
Parameter Summary: Specifies the category to preset in the drop-down list on the 'New' tab. If this string is empty, the preset category will be 'All'.
Parameter: categories (IEnumerable<string>)
Parameter Summary: Specifies the categories to display. Render contents that do not belong to one of these categories will not be listed. If this array is empty, all render contents from all categories will be listed.
Parameter: types (IEnumerable<Guid>)
Parameter Summary: Specifies content types to display. Contents that are not one of these types will not be listed. If this array is empty, all content types will be listed.
Parameter: instanceIdsOut (System.Guid[])
Parameter Summary: Array of UUID(s) of the chosen item(s). Depending on eRhRdkSccResult, this can accept type id(s) of content type(s) or instance id(s) of existing content(s).

Method: Rhino.Render.Utilities.ShowContentChooser(System.Guid defaultType, System.Guid defaultInstanceId, RenderContentKind kinds, ref System.Guid instanceIdOut, ShowContentChooserFlags flags, RhinoDoc doc)
Return: ShowContentChooserResults
Modifiers: public, static
Summary: Shows the content chooser to allow the user to select a new or existing content.
Parameter: defaultType (System.Guid)
Parameter Summary: The content type that will be initially selected in the 'New' tab.
Parameter: defaultInstanceId (System.Guid)
Parameter Summary: The content instance that will be initially selected in the 'Existing' tab.
Parameter: kinds (RenderContentKind)
Parameter Summary: Semicolon-delimited string specifying which content kinds will be displayed.
Parameter: instanceIdOut (System.Guid)
Parameter Summary: The UUID of the chosen item. Depending on eRhRdkSccResult, this can be the type id of a content type or the instance id of an existing content.
Parameter: flags (ShowContentChooserFlags)
Parameter Summary: Flags controlling the chooser. Multiple selection is not valid for this call.
Parameter: doc (RhinoDoc)
Parameter Summary: A Rhino document.

Method: Rhino.Render.Utilities.ShowIORMenu(System.IntPtr hwnd, System.Drawing.Point pt, ref double outIOR, ref string outString)
Return: bool
Modifiers: public, static
Summary: Display and track the context menu.
Parameter: hwnd (System.IntPtr)
Parameter Summary: The window that displays the menu, for example an edit box.
Parameter: pt (System.Drawing.Point)
Parameter Summary: The position to display the menu at inside the window
Parameter: outIOR (double)
Parameter Summary: Accepts the IOR value of the user's chosen substance
Parameter: outString (string)
Parameter Summary: Accepts the name of the user's chosen substance. Can be None if not required.

# Namespace: Rhino.Render.ChangeQueue

Class: Rhino.Render.ChangeQueue.ChangeQueue
Summary: Base class for ChangeQueue.  Generally used by render plugins to build interactive updating of scenes that are being rendered.

Constructor: Rhino.Render.ChangeQueue.ChangeQueue.ChangeQueue(Guid pluginId, CreatePreviewEventArgs createPreviewEventArgs)
Summary: Construct a new ChangeQueue using the given CreatePreviewEventArgs.  The preview scene for these args will be used to populate the world.

Constructor: Rhino.Render.ChangeQueue.ChangeQueue.ChangeQueue(Guid pluginId, uint docRuntimeSerialNumber, ViewInfo viewinfo, bool bRespectDisplayPipelineAttributes)
Summary: Construct a new ChangeQueue from the given document

Constructor: Rhino.Render.ChangeQueue.ChangeQueue.ChangeQueue(Guid pluginId, uint docRuntimeSerialNumber, ViewInfo viewinfo, DisplayPipelineAttributes attributes, bool bRespectDisplayPipelineAttributes, bool bNotifyChanges)
Summary: Construct a new ChangeQueue from the given document, using given display pipeline attributes.

Property: Rhino.Render.ChangeQueue.ChangeQueue.DisplayPipelineAttributes
Return: DisplayPipelineAttributes
Modifiers: public
Summary: Get the DisplayPipelineAttributes if available, None otherwise
Accessors: get

Property: Rhino.Render.ChangeQueue.ChangeQueue.IsPreview
Return: bool
Modifiers: public
Summary: Return True if this ChangeQueue is created for preview rendering.  No view was set for preview rendering.
Accessors: get

Property: Rhino.Render.ChangeQueue.ChangeQueue.ViewId
Return: Guid
Modifiers: public
Summary: Return view ID for a RhinoDoc based ChangeQueue.  Returns Guid.Empty if no view was associated with the changequeue, i.e. preview rendering.
Accessors: get

Method: Rhino.Render.ChangeQueue.ChangeQueue.ConvertCameraBasedLightToWorld(ChangeQueue changequeue, Light light, ViewInfo vp)
Return: void
Modifiers: public, static
Summary: Convert given (camera-based) light to a world-based light (in-place)

Method: Rhino.Render.ChangeQueue.ChangeQueue.CrcFromGuid(System.Guid guid)
Return: uint
Modifiers: public, static
Summary: Helper function to get a CRC from a Guid.

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyClippingPlaneChanges(System.Guid[] deleted, List<ClippingPlane> addedOrModified)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle clippingplane changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyDisplayPipelineAttributesChanges(Display.DisplayPipelineAttributes displayPipelineAttributes)
Return: void
Modifiers: protected, virtual
Summary: Override if you need to react to display attribute changes.  This function is needed to be able to react to different sample settings for i.e. capture preview rendering.
Parameter: displayPipelineAttributes (Display.DisplayPipelineAttributes)
Parameter Summary: The changed DisplayPipelineAttributes.

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicClippingPlaneChanges(List<ClippingPlane> changed)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle dynamicclippingplane changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicLightChanges(List<Light> dynamicLightChanges)
Return: void
Modifiers: protected, virtual
Summary: Handle dynamic light changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyDynamicObjectTransforms(List<DynamicObjectTransform> dynamicObjectTransforms)
Return: void
Modifiers: protected, virtual
Summary: Handle dynamic object transforms

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyEnvironmentChanges(RenderEnvironment.Usage usage)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle environment changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyGroundPlaneChanges(GroundPlane gp)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle groundplane changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyLightChanges(List<Light> lightChanges)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle light changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyLinearWorkflowChanges(LinearWorkflow lw)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle linear workflow changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyMaterialChanges(List<Material> mats)
Return: void
Modifiers: protected, virtual
Summary: Override when you want to handle material changes
Parameter: mats (List<Material>)
Parameter Summary: List of ChangeQueue::Material that have changed

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyMeshChanges(System.Guid[] deleted, List<Mesh> added)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle mesh changes.
Parameter: deleted (System.Guid[])
Parameter Summary: List of Guids to meshes that have been deleted
Parameter: added (List<Mesh>)
Parameter Summary: List of ChangeQueueMeshes that have been added or changed

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyMeshInstanceChanges(List<uint> deleted, List<MeshInstance> addedOrChanged)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle mesh instance changes (block instances and first-time added new meshes)

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyRenderSettingsChanges(DisplayRenderSettings settings)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle render setting changes. These are for the viewport settings.

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyRenderSettingsChanges(RenderSettings rs)
Return: void
Modifiers: protected, virtual
Summary: Override this when you need to handle background changes (through RenderSettings)

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplySkylightChanges(Skylight skylight)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle skylight changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplySunChanges(Geometry.Light sun)
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to handle sun changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.ApplyViewChange(ViewInfo viewInfo)
Return: void
Modifiers: protected, virtual
Summary: Override ApplyViewChange when you want to receive changes to the view/camera
Parameter: viewInfo (ViewInfo)
Parameter Summary: The ViewInfo with the changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.AreViewsEqual(ViewInfo aView, ViewInfo bView)
Return: bool
Modifiers: public, virtual
Summary: Compare to ViewInfo instances and decide whether they are equal or not.  If you need to change the way the comparison is done you can override this function and implement your custom comparison.
Parameter: aView (ViewInfo)
Parameter Summary: First ViewInfo to compare
Parameter: bView (ViewInfo)
Parameter Summary: Second ViewInfo to compare

Method: Rhino.Render.ChangeQueue.ChangeQueue.BakeFor()
Return: BakingFunctions
Modifiers: protected, virtual
Summary: Override this if you need to control baking behavior for textures. By default bake everything.

Method: Rhino.Render.ChangeQueue.ChangeQueue.BakingSize(RhinoObject ro, RenderMaterial material, TextureType type)
Return: int
Modifiers: protected, virtual
Summary: Override this if you need to control the size of the baked bitmaps for textures. By default the value returned is 2048.

Method: Rhino.Render.ChangeQueue.ChangeQueue.ContentRenderHash(RenderContent content, CrcRenderHashFlags flags, string excludeParameterNames, LinearWorkflow lw)
Return: uint
Modifiers: protected, virtual
Summary: Override this if you need to modify the way render hashes are calcuated in the change queue.  This will alter the way materials are grouped.

Method: Rhino.Render.ChangeQueue.ChangeQueue.CreateWorld()
Return: void
Modifiers: public
Summary: Calls CreateWorld with True passed.

Method: Rhino.Render.ChangeQueue.ChangeQueue.CreateWorld(bool bFlushWhenReady)
Return: void
Modifiers: public
Summary: Signal the queue to do the initialisation of the queue, seeding it with the content currently available.
Parameter: bFlushWhenReady (bool)
Parameter Summary: Set to True CreateWorld should automatically flush at the end. Note that the Flush called when True is passed doesn't apply changes.

Method: Rhino.Render.ChangeQueue.ChangeQueue.Dispose()
Return: void
Modifiers: public
Summary: Dispose our ChangeQueue

Method: Rhino.Render.ChangeQueue.ChangeQueue.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose our ChangeQueue. Disposes unmanaged memory.

Method: Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentForid(uint crc)
Return: RenderEnvironment
Modifiers: public
Summary: Get RenderEnvironment for given RenderHash. Can return null.

Method: Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentFromOriginalInstanceId(System.Guid id)
Return: RenderEnvironment
Modifiers: public
Summary: Get the RenderEnvironment from the ChangeQueue content cache from the original instance id
Parameter: id (System.Guid)
Parameter Summary: The original instance id

Method: Rhino.Render.ChangeQueue.ChangeQueue.EnvironmentIdForUsage(RenderEnvironment.Usage usage)
Return: uint
Modifiers: public
Summary: Get RenderEnvironment RenderHash for given usage.

Method: Rhino.Render.ChangeQueue.ChangeQueue.Flush()
Return: void
Modifiers: public
Summary: Tell the ChangeQueue to flush all collected events.  This can trigger a host of Apply* calls.  The following is the order in which those calls get made if there are changes for that specific data type:  ApplyViewChange ApplyLinearWorkflowChanges ApplyDynamicObjectTransforms ApplyDynamicLightChanges ApplyRenderSettingsChanges ApplyEnvironmentChanges (background) ApplyEnvironmentChanges (refl) ApplyEnvironmentChanges (sky) ApplySkylightChanges ApplySunChanges ApplyLightChanges ApplyMaterialChanges ApplyMeshChanges ApplyMeshInstanceChanges ApplyGroundPlaneChanges ApplyClippingPlaneChanges

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueGroundPlane()
Return: GroundPlane
Modifiers: public
Summary: Get groundplane known to the queue at the time of the Flush

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueRenderSettings()
Return: RenderSettings
Modifiers: public
Summary: Get render settings known to the queue at the time of the Flush

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSceneBoundingBox()
Return: BoundingBox
Modifiers: public
Summary: Get the scene bounding box

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSkylight()
Return: Skylight
Modifiers: public
Summary: Get skylight known to the queue at the time of the Flush

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueSun()
Return: Geometry.Light
Modifiers: public
Summary: Get sun known to the queue at the time of the Flush

Method: Rhino.Render.ChangeQueue.ChangeQueue.GetQueueView()
Return: ViewInfo
Modifiers: public
Summary: Get view known to the queue at the time of the Flush

Method: Rhino.Render.ChangeQueue.ChangeQueue.MaterialFromId(uint crc)
Return: RenderMaterial
Modifiers: public
Summary: Get the RenderMaterial from the ChangeQueue material cache based on RenderHash
Parameter: crc (uint)
Parameter Summary: The RenderHash

Method: Rhino.Render.ChangeQueue.ChangeQueue.MaterialFromOriginalInstanceId(System.Guid id)
Return: RenderMaterial
Modifiers: public
Summary: Get the RenderMaterial from the ChangeQueue material cache from the original instance id
Parameter: id (System.Guid)
Parameter Summary: The original instance id

Method: Rhino.Render.ChangeQueue.ChangeQueue.NotifyBeginUpdates()
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to be notified of begin of changes

Method: Rhino.Render.ChangeQueue.ChangeQueue.NotifyDynamicUpdatesAreAvailable()
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to be notified dynamic updates are available

Method: Rhino.Render.ChangeQueue.ChangeQueue.NotifyEndUpdates()
Return: void
Modifiers: protected, virtual
Summary: Override this when you want to be notified when change notifications have ended.

Method: Rhino.Render.ChangeQueue.ChangeQueue.OneShot()
Return: void
Modifiers: public
Summary: Call Flush() once, after that automatically dispose the queue.

Method: Rhino.Render.ChangeQueue.ChangeQueue.ProvideOriginalObject()
Return: bool
Modifiers: protected, virtual
Summary: Override ProvideOriginalObject and return True if you want original objects supplied with ChangeQueue.Mesh. This will then also allow access to the Attributes.UserData of the original object from which the Mesh was generated.

Method: Rhino.Render.ChangeQueue.ChangeQueue.TextureForId(uint crc)
Return: RenderTexture
Modifiers: public
Summary: Get RenderTexture for given RenderHash. Can return null.
Parameter: crc (uint)
Parameter Summary: render hash of the content to search for

Method: Rhino.Render.ChangeQueue.ChangeQueue.TextureFromOriginalInstanceId(System.Guid id)
Return: RenderTexture
Modifiers: public
Summary: Get the RenderTexture from the ChangeQueue content cache from the original instance id
Parameter: id (System.Guid)
Parameter Summary: The original instance id

Class: Rhino.Render.ChangeQueue.ClippingPlane
Summary: ChangeQueue clipping plane

Property: Rhino.Render.ChangeQueue.ClippingPlane.Attributes
Return: ObjectAttributes
Modifiers: public
Summary: Get the ClippingPlaneObject for this clipping plane
Accessors: get

Property: Rhino.Render.ChangeQueue.ClippingPlane.ClipViewports
Return: RhinoViewport[]
Modifiers: public
Summary: Get an array of RhinoViewports this clipping plane is supposed to clip.
Accessors: get

Property: Rhino.Render.ChangeQueue.ClippingPlane.Id
Return: Guid
Modifiers: public
Summary: Get Guid for this clipping plane
Accessors: get

Property: Rhino.Render.ChangeQueue.ClippingPlane.IsEnabled
Return: bool
Modifiers: public
Summary: True if clipping plane is enabled
Accessors: get

Property: Rhino.Render.ChangeQueue.ClippingPlane.Plane
Return: Plane
Modifiers: public
Summary: Get the plane that represents this clipping plane
Accessors: get

Property: Rhino.Render.ChangeQueue.ClippingPlane.ViewIds
Return: List<Guid>
Modifiers: public
Summary: Get list of Viewport IDs this clipping plane is supposed to clip.
Accessors: get

Class: Rhino.Render.ChangeQueue.DisplayRenderSettings
Summary: ChangeQueue DisplayRenderSettings

Property: Rhino.Render.ChangeQueue.DisplayRenderSettings.CullBackFaces
Return: bool
Modifiers: public
Summary: True if backfaces should be culled
Accessors: get

Property: Rhino.Render.ChangeQueue.DisplayRenderSettings.ForceFlatShading
Return: bool
Modifiers: public
Summary: True if flat shading is forced
Accessors: get

Property: Rhino.Render.ChangeQueue.DisplayRenderSettings.SceneLightingOn
Return: bool
Modifiers: public
Summary: True if scene lighting is enabled
Accessors: get

Class: Rhino.Render.ChangeQueue.DynamicObjectTransform
Summary: ChangeQueue DynamicObject

Property: Rhino.Render.ChangeQueue.DynamicObjectTransform.MeshInstanceId
Return: uint
Modifiers: public
Summary: Get the mesh instance id for this dynamic object.
Accessors: get

Property: Rhino.Render.ChangeQueue.DynamicObjectTransform.Transform
Return: Transform
Modifiers: public
Summary: Transform for the DynamicObject
Accessors: get

Method: Rhino.Render.ChangeQueue.DynamicObjectTransform.ToString()
Return: string
Modifiers: public, override
Summary: String representation of DynamicObject

Class: Rhino.Render.ChangeQueue.Environment
Summary: ChangeQueue environment

Class: Rhino.Render.ChangeQueue.GroundPlane
Summary: ChangeQueue ground plane

Property: Rhino.Render.ChangeQueue.GroundPlane.Altitude
Return: double
Modifiers: public
Summary: Get the altitude for ground plane
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.Crc
Return: uint
Modifiers: public
Summary: Get the checksum of this groundplane object
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.Enabled
Return: bool
Modifiers: public
Summary: Return True if ground plane is enabled
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.IsShadowOnly
Return: bool
Modifiers: public
Summary: Get True if ground plane should be shadow-only
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.MaterialId
Return: uint
Modifiers: public
Summary: The CRC / RenderHash of the material on this ground plane
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.ShowUnderside
Return: bool
Modifiers: public
Summary: True if ground plane underside should be shown.
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.TextureOffset
Return: Vector2d
Modifiers: public
Summary: Get texture offset on the ground plane
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.TextureRotation
Return: double
Modifiers: public
Summary: Get texture rotation on the ground plane
Accessors: get

Property: Rhino.Render.ChangeQueue.GroundPlane.TextureScale
Return: Vector2d
Modifiers: public
Summary: Get texture scale on the ground plane
Accessors: get

Class: Rhino.Render.ChangeQueue.Light
Summary: ChangeQueue Light change representation

Property: Rhino.Render.ChangeQueue.Light.ChangeType
Return: Event
Modifiers: public
Summary: Get what type of light change this represents
Accessors: get

Property: Rhino.Render.ChangeQueue.Light.Data
Return: Light
Modifiers: public
Summary: Get the actual light data
Accessors: get

Property: Rhino.Render.ChangeQueue.Light.Id
Return: Guid
Modifiers: public
Summary: Get the light object id
Accessors: get

Property: Rhino.Render.ChangeQueue.Light.IdCrc
Return: uint
Modifiers: public
Summary: Get CRC computed from Id
Accessors: get

Property: Rhino.Render.ChangeQueue.Light.MaterialId
Return: uint
Modifiers: public
Summary: Get material ID of the material assigned to the light. Material ID is 0 if no material was assigned.
Accessors: get

Class: Rhino.Render.ChangeQueue.MappingChannel
Summary: Mapping Channel for a ChangeQueue Mesh

Property: Rhino.Render.ChangeQueue.MappingChannel.Channel
Return: int
Modifiers: public
Summary: Get channel number for this MappingChannel
Accessors: get

Property: Rhino.Render.ChangeQueue.MappingChannel.Local
Return: Transform
Modifiers: public
Summary: Local transform for the mapping
Accessors: get

Property: Rhino.Render.ChangeQueue.MappingChannel.Mapping
Return: TextureMapping
Modifiers: public
Summary: Return TexturMapping for this MappingChannel
Accessors: get

Class: Rhino.Render.ChangeQueue.MappingChannelCollection
Summary: MappingChannels for a Mesh

Property: Rhino.Render.ChangeQueue.MappingChannelCollection.Channels
Return: IEnumerable<MappingChannel>
Modifiers: public
Summary: Enumerate all available channels in this mapping
Accessors: get

Property: Rhino.Render.ChangeQueue.MappingChannelCollection.Count
Return: int
Modifiers: public
Summary: Get count of MappingChannels in this collection
Accessors: get

Property: Rhino.Render.ChangeQueue.MappingChannelCollection.SingleMapping
Return: MappingChannel
Modifiers: public
Accessors: get

Property: Rhino.Render.ChangeQueue.MappingChannelCollection.this[int i]
Return: MappingChannel
Modifiers: public
Summary: Get MappingChannel on index

Class: Rhino.Render.ChangeQueue.Material
Summary: Representation of a Material through the change queue

Property: Rhino.Render.ChangeQueue.Material.Id
Return: uint
Modifiers: public
Summary: Get the material ID (crc)
Accessors: get

Property: Rhino.Render.ChangeQueue.Material.MeshIndex
Return: int
Modifiers: public
Summary: Get mesh index
Accessors: get

Property: Rhino.Render.ChangeQueue.Material.MeshInstanceId
Return: uint
Modifiers: public
Summary: Get the material InstanceAncestry
Accessors: get

Class: Rhino.Render.ChangeQueue.Mesh
Summary: Representation of ChangeQueue Mesh

Property: Rhino.Render.ChangeQueue.Mesh.Attributes
Return: ObjectAttributes
Modifiers: public
Summary: Get object attributes of object associated to this mesh. This will be possible only after returning True from ChangeQueue.ProvideOriginalObject()
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.Mapping
Return: MappingChannelCollection
Modifiers: public
Summary: Get the mapping for this mesh.
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.Mappings
Return: MappingChannel[]
Modifiers: public
Summary: Get the mapping channels for this mesh
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.Object
Return: RhinoObject
Modifiers: public
Summary: Get a copy of the original RhinoObject this Mesh is created from. Possible only after return True from ChangeQueue.ProvideOriginalObject().  Access this only with a using(var o = mesh.Object) {} construct.  Note that the object is free floating, i.e. not part of a document.
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.OcsTransform
Return: Transform
Modifiers: public
Summary: OCS Transform for the MeshInstance - this is the Object Coordinate System texture mapping transformation set in the texture mapping properties dialog. (identity means no OCS, potentially just simple WCS/WCS Box)
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.SingleMapping
Return: MappingChannel
Modifiers: public
Summary: Get texture mapping info as single mapping
Accessors: get

Property: Rhino.Render.ChangeQueue.Mesh.SingleMesh
Return: Mesh
Modifiers: public
Summary: Get the single mesh.
Accessors: get

Method: Rhino.Render.ChangeQueue.Mesh.GetMeshes()
Return: Geometry.Mesh[]
Modifiers: public
Summary: Get a SimpleArrayMeshPointer containing all meshes for the related Mesh Since Rhino 8.0, this function only ever returns a single mesh.  Use the Mesh property to get this single mesh.

Method: Rhino.Render.ChangeQueue.Mesh.Id()
Return: System.Guid
Modifiers: public
Summary: Get the Object Guid this mesh is for.

Class: Rhino.Render.ChangeQueue.MeshInstance
Summary: Representation of ChangeQueue MeshInstance

Property: Rhino.Render.ChangeQueue.MeshInstance.Ancestry
Return: AncestryRecord[]
Modifiers: public
Summary: Returns a the ancestry information for this object.  Note well - the ancestry records contain complete copies of the object attributes for each level of the block hierarchy.  Please do not be tempted to use the ModelObjectId of the instance objects to look them up in the document - the document may have changed since the change queue entries were added.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.CastShadows
Return: bool
Modifiers: public
Summary: Return True if mesh instance should cast shadows
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.Decals
Return: Decals
Modifiers: public
Summary: Read-only access to the decals for this MeshInstance if any. Null if no object attributes exist for this mesh instance.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.GroupId
Return: uint
Modifiers: public
Summary: Get identifier that specifies the grouping of these mesh instances - usually based on the object that this originally comprised.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.InstanceId
Return: uint
Modifiers: public
Summary: Get the instance identifier for this mesh instance.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.MaterialId
Return: uint
Modifiers: public
Summary: The Material CRC / RenderHash
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.MeshId
Return: Guid
Modifiers: public
Summary: Get the mesh identifier for this mesh instance.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.MeshIndex
Return: int
Modifiers: public
Summary: Get the mesh index for this mesh instance.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.ObjectAttributes
Return: ObjectAttributes
Modifiers: public
Summary: The ObjectAttributes associated with a MeshInstance
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.OcsTransform
Return: Transform
Modifiers: public
Summary: OCS Transform for the MeshInstance - this is the Object Coordinate System texture mapping transformation set in the texture mapping properties dialog. (identity means no OCS, potentially just simple WCS/WCS Box)
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.ParentId
Return: Guid
Modifiers: public
Summary: Get the Guid of the object that is at the parent of the MeshInstance ancestry, or Guid.Empty if there is no parent.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.ReceiveShadows
Return: bool
Modifiers: public
Summary: Return True if mesh instance should receive shadows
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.RenderMaterial
Return: RenderMaterial
Modifiers: public
Summary: RenderMaterial associated with mesh instance
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.RootId
Return: Guid
Modifiers: public
Summary: Get the Guid of the object that is at the root of the MeshInstance ancestry, or Guid.Empty if this has no root.
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.Transform
Return: Transform
Modifiers: public
Summary: Transform for the MeshInstance
Accessors: get

Class: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord
Summary: Information about the ancestry of a MeshInstance

Constructor: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.MeshInstance.AncestryRecord()
Summary: Initializes a new instance of the MeshInstance.AncestryRecord class

Property: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.DefinitionId
Return: Guid
Modifiers: public
Summary: The ModelObjectId of the InstanceDefinition
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.ReferenceAttributes
Return: ObjectAttributes
Modifiers: public
Summary: The object attributes from the InstanceObject
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.ReferenceId
Return: Guid
Modifiers: public
Summary: The ModelObjectId of the InstanceObject
Accessors: get

Property: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Transform
Return: Transform
Modifiers: public
Summary: The transform from the InstanceObject
Accessors: get

Method: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Dispose()
Return: void
Modifiers: public
Summary: Dispose

Method: Rhino.Render.ChangeQueue.MeshInstance.AncestryRecord.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose. Disposes unmanaged memory.

Class: Rhino.Render.ChangeQueue.Skylight
Summary: ChangeQueue skylight

Property: Rhino.Render.ChangeQueue.Skylight.Enabled
Return: bool
Modifiers: public
Summary: Return True if skylight is enabled
Accessors: get

Property: Rhino.Render.ChangeQueue.Skylight.ShadowIntensity
Return: double
Modifiers: public
Summary: Get shadow intensity for skylight. This is unused at present.
Accessors: get

Property: Rhino.Render.ChangeQueue.Skylight.UsesCustomEnvironment
Return: bool
Modifiers: public
Summary: Return True if skylight uses custom environment
Accessors: get

Method: Rhino.Render.ChangeQueue.Skylight.ToString()
Return: string
Modifiers: public, override
Summary: Textual representation of Skylight

# Namespace: Rhino.Render.ChildSlotNames

Class: Rhino.Render.ChildSlotNames.PhysicallyBased
Summary: Helper class with properties containing the names of children available in our PBR implementation.

Constructor: Rhino.Render.ChildSlotNames.PhysicallyBased.PhysicallyBased()
Summary: Initializes a new instance of the PhysicallyBased class

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Alpha
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.AmbientOcclusion
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Anisotropic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.AnisotropicRotation
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.BaseColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Bump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Clearcoat
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.ClearcoatBump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.ClearcoatRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Displacement
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Emission
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Metallic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Opacity
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.OpacityIor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.OpacityRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Roughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Sheen
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.SheenTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Specular
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.SpecularTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.Subsurface
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.SubsurfaceScatteringColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ChildSlotNames.PhysicallyBased.SubsurfaceScatteringRadius
Return: string
Modifiers: public, static
Accessors: get

Method: Rhino.Render.ChildSlotNames.PhysicallyBased.FromTextureType(Rhino.DocObjects.TextureType textureType)
Return: string
Modifiers: public, static

# Namespace: Rhino.Render.CustomRenderMeshes

Class: Rhino.Render.CustomRenderMeshes.CustomRenderMeshProviderAttribute
Summary: Attributes for RenderMeshProvider

Constructor: Rhino.Render.CustomRenderMeshes.CustomRenderMeshProviderAttribute.CustomRenderMeshProviderAttribute(bool nonObjectIdsOnly)
Summary: Constructor

Property: Rhino.Render.CustomRenderMeshes.CustomRenderMeshProviderAttribute.NonObjectIdsOnly
Return: bool
Modifiers: public
Summary: If set to true, this will quickly return False for HasCustomRenderMeshes if the objectId is in the document.
Accessors: get set

Class: Rhino.Render.CustomRenderMeshes.Instance
Summary: The core of the custom render primitive delivery system - and instance defines a single mesh. Each instance has a shared mesh and a transform, along with a material, mapping channels (at the mesh and instance level).

Constructor: Rhino.Render.CustomRenderMeshes.Instance.Instance()
Summary: Construct a new Instance object

Property: Rhino.Render.CustomRenderMeshes.Instance.IsForcedMaterial
Return: bool
Modifiers: public
Summary: The material for this instance should override any display mode materials.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.Instance.IsRequestingPlugInDependent
Return: bool
Modifiers: public
Summary: If this instance will change depending on the requesting plug-in.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.Instance.IsViewDependent
Return: bool
Modifiers: public
Summary: If this instance will change depending on the view direction.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.Instance.Material
Return: RenderMaterial
Modifiers: public
Summary: The material for this instance.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.Instance.Mesh
Return: Mesh
Modifiers: public
Summary: Returns the mesh associated with this geometry.  Note that this function will always return a mesh even if the type is not a mesh...so you can always call this function without checking the type to give you the mesh.  It's more efficient to use the primitive directly of course...but if you don't support it...
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.Instance.Transform
Return: Transform
Modifiers: public
Summary: The transform for this instance.  Transform the geometry by this to set its final location in world space.
Accessors: get set

Method: Rhino.Render.CustomRenderMeshes.Instance.Dispose()
Return: void
Modifiers: public
Summary: Dispose method

Method: Rhino.Render.CustomRenderMeshes.Instance.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose method.

Class: Rhino.Render.CustomRenderMeshes.MeshProviderIds
Summary: Built in primitive provider ids.

Constructor: Rhino.Render.CustomRenderMeshes.MeshProviderIds.MeshProviderIds()
Summary: Initializes a new instance of the MeshProviderIds class

Property: Rhino.Render.CustomRenderMeshes.MeshProviderIds.CurvePiping
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.MeshProviderIds.Displacement
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.MeshProviderIds.EdgeSoftening
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.MeshProviderIds.Shutlining
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.MeshProviderIds.Thickening
Return: Guid
Modifiers: public, static
Accessors: get

Class: Rhino.Render.CustomRenderMeshes.RenderMeshes
Summary: RenderMeshes is a collection of geometry instances for a given ObjectId typically returned by the Custom Render primitive system. As each set of primitives is returned by the RenderMeshProviders in turn, the running hash is updated with new information about the primitive modifications that have been made along the way.

Constructor: Rhino.Render.CustomRenderMeshes.RenderMeshes.RenderMeshes(RhinoDoc doc, Guid objectId, Guid renderMeshProviderId, uint runningHash, uint flags)
Summary: Create a new render primitives collection.

Constructor: Rhino.Render.CustomRenderMeshes.RenderMeshes.RenderMeshes(RhinoDoc doc, Guid objectId, Guid renderMeshProviderId, uint runningHash)
Summary: Create a new render primitives collection.

Property: Rhino.Render.CustomRenderMeshes.RenderMeshes.Document
Return: RhinoDoc
Modifiers: public
Summary: The document with which this IRenderMeshes object is associated.
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.RenderMeshes.Hash
Return: uint
Modifiers: public
Summary: The running hash for these render meshes.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.RenderMeshes.InstanceCount
Return: int
Modifiers: public
Summary: The number of instance objects in this collection.
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.RenderMeshes.ObjectId
Return: Guid
Modifiers: public
Summary: The ObjectId with which this IRenderMeshes object is associated.
Accessors: get

Method: Rhino.Render.CustomRenderMeshes.RenderMeshes.AddInstance(Instance instance)
Return: void
Modifiers: public
Summary: Adds a new instance to the render primitives collection.
Parameter: instance (Instance)
Parameter Summary: The instance to be added.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshes.Dispose()
Return: void
Modifiers: public
Summary: Dispose this collection

Method: Rhino.Render.CustomRenderMeshes.RenderMeshes.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose

Method: Rhino.Render.CustomRenderMeshes.RenderMeshes.GetEnumerator()
Return: IEnumerator<Instance>
Modifiers: public
Summary: Return an object to iterator over the instances in the collection

Method: Rhino.Render.CustomRenderMeshes.RenderMeshes.GetHashCode()
Return: int
Modifiers: public, override
Summary: Overrides default hash code function - just returns Hash

Class: Rhino.Render.CustomRenderMeshes.RenderMeshProvider
Summary: A RenderMeshProvider delivers custom render primitives (in the form of RenderMeshes).  Derive a public class from this with a public constructor, and this primitive provider will be added to the RDK forming a collection of providers. Each RenderMeshProvider::HasCustomRenderMeshes will be called and if it returns true, a call to RenderMeshes will be made. It is up to the provider to cache its own primitives - the IRenderMeshes::ProviderTracking class is provided for that. A provider may optionally return a collection of non-object Ids that it will provide custom render primitives for.  An example of this is Grasshopper, which which will typically return a collection of the Ids of each CustomPreview component. Override this class if you are a plug-in developer intending to supply a custom set of primitives for a given object, or objectId.  Examples of IRenderMeshProviders are CurvePiping, EdgeSoftening, Displacement, Shutlining, Grasshopper's CustomPreview component.

Constructor: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RenderMeshProvider()
Summary: Initializes a new instance of the RenderMeshProvider class

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Name
Return: String
Modifiers: public, abstract
Summary: The localized name of the provider for UI display.
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.NonObjectIds
Return: List<Guid>
Modifiers: public, virtual
Summary: A provider may optionally return a collection of non-object Ids that it will provide custom render primitives for.  An example of this is Grasshopper, which which will typically return a collection of the Ids of each CustomPreview component.
Accessors: get

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.ProviderId
Return: Guid
Modifiers: public, virtual
Summary: The localized name of the provider for UI display.
Accessors: get

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.ProgressForAll(RhinoDoc doc, System.Guid[] optional_objectIds)
Return: RenderMeshProviderProgress[]
Modifiers: public, static
Summary: Returns a complete list of progress reports for all providers for either the document or a collection of objects

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProvider(RenderMeshProvider provider, PlugIns.PlugIn plugin)
Return: bool
Modifiers: public, static
Summary: Register RenderMeshProvider without relying on the auto-plug-in registration.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProviders(PlugIns.PlugIn plugin)
Return: void
Modifiers: public, static
Summary: Register RenderMeshProviders without relying on the auto-plug-in registration

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RegisterProviders(System.Reflection.Assembly assembly, PlugIns.PlugIn plugin)
Return: void
Modifiers: public, static
Summary: Register RenderMeshProviders without relying on the auto-plug-in registration

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Dispose()
Return: void
Modifiers: public
Summary: Dispose method

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Dispose(bool isDisposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose method.  Note that you should only ever call Dispose if you explicitly registered this RenderMeshProvider using RegisterProvider If this provider was created using automatic registration, the Dispose function will thrown an exception.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.GetParameter(RhinoDoc doc, System.Guid objectId, System.String parameterName)
Return: object
Modifiers: public, virtual
Summary: Runtime access to specific parameters on for a given objectId relating to this primitive provider.
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document of interest.
Parameter: objectId (System.Guid)
Parameter Summary: The objectId for which the parameter should be supplied.
Parameter: parameterName (System.String)
Parameter Summary: The name of the parameter.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.HasCustomRenderMeshes(MeshType mt, ViewportInfo vp, RhinoDoc doc, System.Guid objectId, ref Flags flags, PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: bool
Modifiers: public, abstract
Summary: Determine if custom render primitives will be supplied for a particular object.
Parameter: mt (MeshType)
Parameter Summary: The mesh type to provide meshes for
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document associated with the objectId
Parameter: objectId (System.Guid)
Parameter Summary: The objectId for which the primitives should be supplied.
Parameter: flags (Flags)
Parameter Summary: See Flags.
Parameter: plugin (PlugIn)
Parameter Summary: The requesting plug-in - typically the render plug-in requesting the primitives.
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: The display attributes currently being used - nullptr if this is production rendering.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.Progress(RhinoDoc doc, System.Guid[] optional_objectIds)
Return: RenderMeshProviderProgress
Modifiers: public, virtual
Summary: Provides details on the progress of custom render meshes for a document or collection of objects

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.RenderMeshes(MeshType mt, ViewportInfo vp, RhinoDoc doc, System.Guid objectId, List<InstanceObject> ancestry, ref Flags flags, RenderMeshes previousPrimitives, PlugIn plugin, Display.DisplayPipelineAttributes attrs)
Return: RenderMeshes
Modifiers: public, abstract
Summary: Returns a complete set of custom render primitives for a given ObjectId.
Parameter: mt (MeshType)
Parameter Summary: The mesh type to provide meshes for
Parameter: vp (ViewportInfo)
Parameter Summary: The viewport being rendered
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document associated with the objectId
Parameter: objectId (System.Guid)
Parameter Summary: The objectId for which the primitives should be supplied.
Parameter: ancestry (List<DocObjects.InstanceObject>)
Parameter Summary: The ancestry of the object - ie, block references referring to this definition. This is only used to handle ByParent attributes, and should not be used to transform geometry.
Parameter: flags (Flags)
Parameter Summary: See Flags.
Parameter: previousPrimitives (RenderMeshes)
Parameter Summary: Optionally a custom set of initial primitives.  If this parameter is empty, the standard render primitives for the object will be used, or an empty set of primitives will be used where they are not available.  This is typically used in meshing exporters, which produce specific meshes for the output rather than using the render primitives.
Parameter: plugin (PlugIn)
Parameter Summary: The requesting plug-in - typically the render plug-in requesting the meshes.
Parameter: attrs (Display.DisplayPipelineAttributes)
Parameter Summary: The display attributes currently being used - nullptr if this is production rendering.

Method: Rhino.Render.CustomRenderMeshes.RenderMeshProvider.SetParameter(RhinoDoc doc, System.Guid objectId, System.String parameterName, object value)
Return: void
Modifiers: public, virtual
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document of interest.
Parameter: objectId (System.Guid)
Parameter Summary: The objectId for which the parameter should be supplied.
Parameter: parameterName (System.String)
Parameter Summary: The name of the parameter.
Parameter: value (object)
Parameter Summary: The value to set.

Class: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress
Summary: Expresses the progress of a custom render mesh provider.

Constructor: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.RenderMeshProviderProgress()
Summary: Initializes a new instance of the RenderMeshProviderProgress class

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.Amount
Return: double
Modifiers: public
Summary: The amount of progress towards the target
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.IsComplete
Return: bool
Modifiers: public
Summary: True if complete, otherwise false.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.ProviderId
Return: Guid
Modifiers: public
Summary: The Id of the RenderMeshProvider that this report came from.
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.Target
Return: double
Modifiers: public
Summary: Target progress
Accessors: get set

Property: Rhino.Render.CustomRenderMeshes.RenderMeshProviderProgress.Text
Return: string
Modifiers: public
Summary: Return a textural progress report
Accessors: get set

# Namespace: Rhino.Render.DataSources

Class: Rhino.Render.DataSources.ContentFactories

Constructor: Rhino.Render.DataSources.ContentFactories.ContentFactories(IntPtr pRdkContentFactories)

Property: Rhino.Render.DataSources.ContentFactories.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.ContentFactories.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactories.FindFactory(System.Guid uuid)
Return: ContentFactory
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactories.FirstFactory()
Return: ContentFactory
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactories.NextFactory()
Return: ContentFactory
Modifiers: public

Class: Rhino.Render.DataSources.ContentFactory

Constructor: Rhino.Render.DataSources.ContentFactory.ContentFactory(IntPtr pRdkContentFactory)

Property: Rhino.Render.DataSources.ContentFactory.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.ContentFactory.ContentTypeId()
Return: System.Guid
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactory.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactory.Kind()
Return: RenderContentKind
Modifiers: public

Method: Rhino.Render.DataSources.ContentFactory.NewContent()
Return: RenderContent
Modifiers: public
Summary: New Content returns a new content, which is Initialized with the Initialize() function. The content should be unitilized after use with the Unitialize function.

Class: Rhino.Render.DataSources.MetaData

Constructor: Rhino.Render.DataSources.MetaData.MetaData(IntPtr pMetaData)

Property: Rhino.Render.DataSources.MetaData.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.MetaData.ContentInstanceId()
Return: System.Guid
Modifiers: public

Method: Rhino.Render.DataSources.MetaData.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.MetaData.Geometry()
Return: string
Modifiers: public

Class: Rhino.Render.DataSources.RdkEdit

Constructor: Rhino.Render.DataSources.RdkEdit.RdkEdit(IntPtr pRdkEdit)

Property: Rhino.Render.DataSources.RdkEdit.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.RdkEdit.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RdkEdit.Execute(RenderContentCollection collection)
Return: bool
Modifiers: public

Class: Rhino.Render.DataSources.RdkModalEditContentBucket

Constructor: Rhino.Render.DataSources.RdkModalEditContentBucket.RdkModalEditContentBucket(IntPtr pRdkModalEditContentBucket)

Property: Rhino.Render.DataSources.RdkModalEditContentBucket.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.RdkModalEditContentBucket.ContentsIn()
Return: RenderContentCollection
Modifiers: public

Method: Rhino.Render.DataSources.RdkModalEditContentBucket.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RdkModalEditContentBucket.SetContentsOut(RenderContentCollection collection)
Return: void
Modifiers: public

Class: Rhino.Render.DataSources.RdkSelectionNavigator

Constructor: Rhino.Render.DataSources.RdkSelectionNavigator.RdkSelectionNavigator(IntPtr pRhinoSettings)

Property: Rhino.Render.DataSources.RdkSelectionNavigator.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.Render.DataSources.RdkSelectionNavigator.Add(Rhino.Render.RenderContentCollection selectedContentArray)
Return: void
Modifiers: public
Summary: Add a selection of contents at the current position. Clears the navigator ahead of the current position.
Parameter: selectedContentArray (Rhino.Render.RenderContentCollection)
Parameter Summary: The selected content

Method: Rhino.Render.DataSources.RdkSelectionNavigator.CanGoBackwards()
Return: bool
Modifiers: public
Summary: Check the backwards status of the navigator

Method: Rhino.Render.DataSources.RdkSelectionNavigator.CanGoForwards()
Return: bool
Modifiers: public
Summary: Check the forwards status of the navigator

Method: Rhino.Render.DataSources.RdkSelectionNavigator.Clear()
Return: void
Modifiers: public
Summary: Clear the navigator.

Method: Rhino.Render.DataSources.RdkSelectionNavigator.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RdkSelectionNavigator.GoBackwards(ref Rhino.Render.RenderContentCollection selectedContentArray)
Return: bool
Modifiers: public
Summary: Navigate backwards if possible
Parameter: selectedContentArray (Rhino.Render.RenderContentCollection)
Parameter Summary: selectedContentArray is the new selection after navigating backwards

Method: Rhino.Render.DataSources.RdkSelectionNavigator.GoForwards(ref Rhino.Render.RenderContentCollection selectedContentArray)
Return: bool
Modifiers: public
Summary: Navigate forwards if possible
Parameter: selectedContentArray (Rhino.Render.RenderContentCollection)
Parameter Summary: selectedContentArray is the new selection after navigating forwards

Class: Rhino.Render.DataSources.RhinoSettings

Constructor: Rhino.Render.DataSources.RhinoSettings.RhinoSettings(IntPtr pRhinoSettings)

Property: Rhino.Render.DataSources.RhinoSettings.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Property: Rhino.Render.DataSources.RhinoSettings.CustomImageSizeIsPreset
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.Render.DataSources.RhinoSettings.ActiveView()
Return: RhinoView
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.GetCustomRenderSizes()
Return: List<System.Drawing.Size>
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.GetRenderSettings()
Return: RenderSettings
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.GroundPlaneOnInViewDisplayMode(RhinoView view)
Return: bool
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.RenderingView()
Return: Rhino.DocObjects.ViewInfo
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.SetGroundPlaneOnInViewDisplayMode(RhinoView view, bool bOn)
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.SetRenderSettings(RenderSettings renderSettings)
Return: void
Modifiers: public

Method: Rhino.Render.DataSources.RhinoSettings.ViewSupportsShading(RhinoView view)
Return: bool
Modifiers: public

# Namespace: Rhino.Render.Fields

Class: Rhino.Render.Fields.BoolField
Summary: bool field value class

Property: Rhino.Render.Fields.BoolField.Value
Return: bool
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.BoolField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.ByteArrayField
Summary: ByteArray field value class

Property: Rhino.Render.Fields.ByteArrayField.Value
Return: byte[]
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.ByteArrayField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Color4fField
Summary: Color4f field value class

Property: Rhino.Render.Fields.Color4fField.SystemColorValue
Return: Color
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Property: Rhino.Render.Fields.Color4fField.Value
Return: Color4f
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Color4fField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.DateTimeField
Summary: DateTime field value class

Property: Rhino.Render.Fields.DateTimeField.Value
Return: DateTime
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.DateTimeField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.DoubleField
Summary: double field value class

Property: Rhino.Render.Fields.DoubleField.Value
Return: double
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.DoubleField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Field
Summary: Generic data fields used to add publicly accessible properties to RenderContent.FieldDictionary.  These should be created by calling a FieldDictaionary.Add() method on a Render content object.  These are allocated after the RenderContent object's C++ object is created and added to the underlying C++ objects content dictionary, who ever allocates a field is responsible for deleting it so these objects clean up the C++ pointers when they are disposed of.

Constructor: Rhino.Render.Fields.Field.Field(RenderContent renderContent, IntPtr pointer)

Constructor: Rhino.Render.Fields.Field.Field(RenderContent renderContent, string name, string prompt, object initialValue, bool isTextured, bool treatAsLinear, int sectionId)

Constructor: Rhino.Render.Fields.Field.Field(RenderContent renderContent, string name, string prompt, object initialValue, bool isTextured, bool treatAsLinear)

Constructor: Rhino.Render.Fields.Field.Field(RenderContent renderContent, string name, string prompt, object initialValue, bool isTextured)

Constructor: Rhino.Render.Fields.Field.Field(RenderContent renderContent, string name)

Property: Rhino.Render.Fields.Field.IsHiddenInAutoUI
Return: bool
Modifiers: public
Summary: When fields are used by the automatic UI, they can be hidden from it by calling this method.
Accessors: get set

Property: Rhino.Render.Fields.Field.Key
Return: string
Modifiers: public
Summary: Field name value string passed to the constructor
Accessors: get

Property: Rhino.Render.Fields.Field.Name
Return: string
Modifiers: public
Summary: Field name value string passed to the constructor.
Accessors: get

Property: Rhino.Render.Fields.Field.Tag
Return: object
Modifiers: public
Summary: Gets or sets an object that contains data to associate with the field.
Accessors: get set

Property: Rhino.Render.Fields.Field.TextureAmountMax
Return: double
Modifiers: public
Summary: Set Max value for Texture amount
Accessors: get set

Property: Rhino.Render.Fields.Field.TextureAmountMin
Return: double
Modifiers: public
Summary: Set Min value for Texture amount
Accessors: get set

Property: Rhino.Render.Fields.Field.UseTextureAmount
Return: bool
Modifiers: public
Summary: True if 'texture amount' is in use, otherwise false. The 'texture amount' is represented as a numeric stepper in the UI. If true, then the stepper is shown. If false, then the stepper is hidden.
Accessors: get set

Property: Rhino.Render.Fields.Field.UseTextureOn
Return: bool
Modifiers: public
Summary: True if 'texture on' is in use, otherwise false. In the UI 'texture on' is represented as a checkbox. If True then the checbox is shown. If False then the checkbox is not shown.
Accessors: get set

Method: Rhino.Render.Fields.Field.CreateCppPointer(RenderContent content, string key, string prompt, object initialValue, bool isTextured, bool treatAsLinear)
Return: void
Modifiers: protected

Method: Rhino.Render.Fields.Field.GetValue()
Return: T
Modifiers: public
Summary: Parametrized version of GetValue calling appropriate ValueAs* methods.

Method: Rhino.Render.Fields.Field.ValueAsBool()
Return: bool
Modifiers: protected
Summary: Return field value as a bool.

Method: Rhino.Render.Fields.Field.ValueAsByteArray()
Return: byte
Modifiers: protected
Summary: Return field as a byte array.

Method: Rhino.Render.Fields.Field.ValueAsColor4f()
Return: Color4f
Modifiers: protected
Summary: Return field as a Rhino.Display.Color4f color value.

Method: Rhino.Render.Fields.Field.ValueAsDateTime()
Return: System.DateTime
Modifiers: protected
Summary: Return field as a DateTime value.

Method: Rhino.Render.Fields.Field.ValueAsDouble()
Return: double
Modifiers: protected
Summary: Return field value as a double precision number.

Method: Rhino.Render.Fields.Field.ValueAsFloat()
Return: float
Modifiers: protected
Summary: Return field value as floating point number.

Method: Rhino.Render.Fields.Field.ValueAsGuid()
Return: System.Guid
Modifiers: protected
Summary: Return field value as Guid.

Method: Rhino.Render.Fields.Field.ValueAsInt()
Return: int
Modifiers: protected
Summary: Return field value as integer.

Method: Rhino.Render.Fields.Field.ValueAsObject()
Return: object
Modifiers: public, abstract

Method: Rhino.Render.Fields.Field.ValueAsPoint2d()
Return: Point2d
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Point2d color value.

Method: Rhino.Render.Fields.Field.ValueAsPoint3d()
Return: Point3d
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Point3d color value.

Method: Rhino.Render.Fields.Field.ValueAsPoint4d()
Return: Point4d
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Point4d color value.

Method: Rhino.Render.Fields.Field.ValueAsString()
Return: string
Modifiers: protected
Summary: Get field value as a string.

Method: Rhino.Render.Fields.Field.ValueAsTransform()
Return: Transform
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Transform color value.

Method: Rhino.Render.Fields.Field.ValueAsVector2d()
Return: Vector2d
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Vector2d color value.

Method: Rhino.Render.Fields.Field.ValueAsVector3d()
Return: Vector3d
Modifiers: protected
Summary: Return field as a Rhino.Geometry.Vector3d color value.

Class: Rhino.Render.Fields.FieldDictionary
Summary: Dictionary containing RenderContent data fields. Add fields to this dictionary in your derived RenderContent classes constructor. Get field values using the TryGet[data type]() methods and set them using the Set() method.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, bool value, string prompt, int sectionId)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, bool value, string prompt)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, bool value)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, byte value)
Return: ByteArrayField
Modifiers: public
Summary: AddField a new ByteArrayField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (byte)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Color4f value, string prompt, int sectionId)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Color4f)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Color4f value, string prompt)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Color4f)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Color4f value)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Color4f)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, double value, string prompt, int sectionId)
Return: DoubleField
Modifiers: public
Summary: Add a new DoubleField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, double value, string prompt)
Return: DoubleField
Modifiers: public
Summary: Add a new DoubleField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, double value)
Return: DoubleField
Modifiers: public
Summary: AddField a new DoubleField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, float value, string prompt, int sectionId)
Return: FloatField
Modifiers: public
Summary: AddField a new FloatField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above
Parameter: value (float)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, float value, string prompt)
Return: FloatField
Modifiers: public
Summary: AddField a new FloatField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (float)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, float value)
Return: FloatField
Modifiers: public
Summary: Add a new FloatField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (float)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, int value, string prompt, int sectionId)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, int value, string prompt)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, int value)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point2d value, string prompt, int sectionId)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point2d value, string prompt)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point2d value)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point3d value, string prompt, int sectionId)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point3d value, string prompt)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point3d value)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point4d value, string prompt, int sectionId)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point4d value, string prompt)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Point4d value)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, string prompt, int sectionId)
Return: NullField
Modifiers: public
Summary: Add a new NullField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: Id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, string value, string prompt, int sectionId)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, string value, string prompt)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, string value)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary.  This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.DateTime value, string prompt, int sectionId)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.DateTime value, string prompt)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.DateTime value)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.Drawing.Color value, string prompt)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.Drawing.Color value)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.Guid value, string prompt, int sectionId)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.Guid value, string prompt)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, System.Guid value)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Transform value, string prompt, int sectionId)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Transform value, string prompt)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Transform value)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector2d value, string prompt, int sectionId)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector2d value, string prompt)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector2d value)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector3d value, string prompt, int sectionId)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector3d value, string prompt)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.Add(string key, Vector3d value)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary. This will be a data only field and not show up in the content browsers.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.

Method: Rhino.Render.Fields.FieldDictionary.AddFilename(string key, string value, string prompt, int sectionId)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary which will reference a filename.  A file watcher will automatically be attached to the referenced file, and the content will be considered changed when the file is changed on disk.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, bool value, string prompt, bool treatAsLinear, int sectionId)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, bool value, string prompt, bool treatAsLinear)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, bool value, string prompt)
Return: BoolField
Modifiers: public
Summary: Add a new BoolField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (bool)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Color4f value, string prompt, bool treatAsLinear, int sectionId)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Color4f)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Color4f value, string prompt, bool treatAsLinear)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Color4f)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Color4f value, string prompt)
Return: Color4fField
Modifiers: public

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, double value, string prompt, bool treatAsLinear, int sectionId)
Return: DoubleField
Modifiers: public
Summary: Add a new DoubleField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, double value, string prompt, bool treatAsLinear)
Return: DoubleField
Modifiers: public
Summary: Add a new DoubleField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, double value, string prompt)
Return: DoubleField
Modifiers: public
Summary: Add a new DoubleField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (double)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, float value, string prompt, bool treatAsLinear, int sectionId)
Return: FloatField
Modifiers: public
Summary: Add a new FloatField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above
Parameter: value (float)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, float value, string prompt, bool treatAsLinear)
Return: FloatField
Modifiers: public
Summary: Add a new FloatField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (float)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, float value, string prompt)
Return: FloatField
Modifiers: public
Summary: Add a new FloatField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (float)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, int value, string prompt, bool treatAsLinear, int sectionId)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, int value, string prompt, bool treatAsLinear)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, int value, string prompt)
Return: IntField
Modifiers: public
Summary: Add a new IntField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (int)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point2d value, string prompt, bool treatAsLinear, int sectionId)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point2d value, string prompt, bool treatAsLinear)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point2d value, string prompt)
Return: Point2dField
Modifiers: public
Summary: Add a new Point2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point3d value, string prompt, bool treatAsLinear, int sectionId)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point3d value, string prompt, bool treatAsLinear)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point3d value, string prompt)
Return: Point3dField
Modifiers: public
Summary: Add a new Point3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point4d value, string prompt, bool treatAsLinear, int sectionId)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point4d value, string prompt, bool treatAsLinear)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Point4d value, string prompt)
Return: Point4dField
Modifiers: public
Summary: Add a new Point4dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Point4d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string prompt, bool treatAsLinear, int sectionId)
Return: NullField
Modifiers: public
Summary: Add a new NullField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string prompt, bool treatAsLinear)
Return: NullField
Modifiers: public
Summary: Add a new NullField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string value, string prompt, bool treatAsLinear, int sectionId)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string value, string prompt, bool treatAsLinear)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string value, string prompt)
Return: StringField
Modifiers: public
Summary: Add a new StringField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (string)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, string prompt)
Return: NullField
Modifiers: public
Summary: Add a new NullField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.DateTime value, string prompt, bool treatAsLinear, int sectionId)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.DateTime value, string prompt, bool treatAsLinear)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.DateTime value, string prompt)
Return: DateTimeField
Modifiers: public
Summary: Add a new DateTimeField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.Drawing.Color value, string prompt, bool treatAsLinear)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.Drawing.Color value, string prompt)
Return: Color4fField
Modifiers: public
Summary: Add a new Color4fField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.Guid value, string prompt, bool treatAsLinear, int sectionId)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.Guid value, string prompt, bool treatAsLinear)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, System.Guid value, string prompt)
Return: GuidField
Modifiers: public
Summary: Add a new GuidField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (System.Guid)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Transform value, string prompt, bool treatAsLinear, int sectionId)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Transform value, string prompt, bool treatAsLinear)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Transform value, string prompt)
Return: TransformField
Modifiers: public
Summary: Add a new TransformField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Transform)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector2d value, string prompt, bool treatAsLinear, int sectionId)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector2d value, string prompt, bool treatAsLinear)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector2d value, string prompt)
Return: Vector2dField
Modifiers: public
Summary: Add a new Vector2dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector2d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector3d value, string prompt, bool treatAsLinear, int sectionId)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).
Parameter: sectionId (int)
Parameter Summary: The id of the section containing the field

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector3d value, string prompt, bool treatAsLinear)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.
Parameter: treatAsLinear (bool)
Parameter Summary: Determines whether the texture in this slot will be treated as linear by rendering engines (ie - not gamma packed).

Method: Rhino.Render.Fields.FieldDictionary.AddTextured(string key, Vector3d value, string prompt)
Return: Vector3dField
Modifiers: public
Summary: Add a new Vector3dField to the dictionary. This overload will cause the field to be tagged as "textured" so that the texturing UI will appear in automatic UIs.
Parameter: key (string)
Parameter Summary: Key name for the field value to add. See important note above.
Parameter: value (Vector3d)
Parameter Summary: Initial value for this field.
Parameter: prompt (string)
Parameter Summary: Prompt to display in the user interface (Content Browsers) if this is None or an empty string the this field is a data only field and will not appear in the user interface.

Method: Rhino.Render.Fields.FieldDictionary.ContainsField(string fieldName)
Return: bool
Modifiers: public
Summary: Call this method to determine if a this FieldsList contains a field with the specified field name.
Parameter: fieldName (string)
Parameter Summary: Field to search for

Method: Rhino.Render.Fields.FieldDictionary.GetEnumerator()
Return: IEnumerator<Field>
Modifiers: public

Method: Rhino.Render.Fields.FieldDictionary.GetField(string fieldName)
Return: Field
Modifiers: public
Summary: Call this method to get the field with the specified name.
Parameter: fieldName (string)
Parameter Summary: Field name to search for.

Method: Rhino.Render.Fields.FieldDictionary.RemoveField(string fieldName)
Return: void
Modifiers: public

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, bool value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (bool)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, bool value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (bool)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, byte value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (byte)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, byte value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (byte)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Color4f value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Color4f)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Color4f value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Color4f)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, double value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (double)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, double value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (double)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, float value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (float)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, float value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (float)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, int value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (int)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, int value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (int)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point2d value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point2d)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point2d value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point2d)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point3d value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point3d)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point3d value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point3d)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point4d value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point4d)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Point4d value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Point4d)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, string value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (string)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, string value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (string)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.DateTime value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.DateTime value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.DateTime)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.Drawing.Color value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.Drawing.Color value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.Drawing.Color)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.Guid value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.Guid)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, System.Guid value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (System.Guid)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Transform value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Transform)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Transform value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Transform)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Vector2d value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Vector2d)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Vector2d value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Vector2d)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Vector3d value, RenderContent.ChangeContexts changeContext)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Vector3d)
Parameter Summary: New value for this field.
Parameter: changeContext (RenderContent.ChangeContexts)
Parameter Summary: The reason why the value is changing.

Method: Rhino.Render.Fields.FieldDictionary.Set(string key, Vector3d value)
Return: void
Modifiers: public
Summary: Set the field value and send the appropriate change notification to the render SDK.  Will throw a InvalidOperationException exception if the key name is not valid.
Parameter: key (string)
Parameter Summary: Key name for the field value to change. See important note above.
Parameter: value (Vector3d)
Parameter Summary: New value for this field.

Method: Rhino.Render.Fields.FieldDictionary.SetTag(string key, object tag)
Return: bool
Modifiers: public
Summary: Sets an object that contains data to associate with the field.  THIS IS NOW OBSOLETE - if you were using this, please email andy@mcneel.com and let me know why.
Parameter: key (string)
Parameter Summary: Key name for the field to tag.
Parameter: tag (object)
Parameter Summary: Data to associate with the field.

Method: Rhino.Render.Fields.FieldDictionary.TryGetTag(string key, out object tag)
Return: bool
Modifiers: public
Summary: Gets object that contains data associate with a field. THIS IS NOW OBSOLETE - if you were using this, please email andy@mcneel.com and let me know why.
Parameter: key (string)
Parameter Summary: Key name of the field to get.
Parameter: tag (object)
Parameter Summary: Data associated with the field.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out bool value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (bool)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out byte value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (byte)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Color4f value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Color4f)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out double value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (double)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out float value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (float)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out int value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (int)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Point2d value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Point2d)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Point3d value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Point3d)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Point4d value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Point4d)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out string value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (string)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out System.DateTime value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (System.DateTime)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out System.Drawing.Color value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (System.Drawing.Color)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out System.Guid value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (System.Guid)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out T value)
Return: bool
Modifiers: public
Summary: Parametrized version of TryGetValue.
Parameter: key (string)
Parameter Summary: Name of field to find.
Parameter: value (T)
Parameter Summary: out parameter to be set.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Transform value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Transform)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Vector2d value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Vector2d)
Parameter Summary: Output parameter which will receive the field value.

Method: Rhino.Render.Fields.FieldDictionary.TryGetValue(string key, out Vector3d value)
Return: bool
Modifiers: public
Summary: Find a field with the specified key and get its value if found.
Parameter: key (string)
Parameter Summary: Key name of the field to get a value for.
Parameter: value (Vector3d)
Parameter Summary: Output parameter which will receive the field value.

Class: Rhino.Render.Fields.FloatField
Summary: float field value class

Property: Rhino.Render.Fields.FloatField.Value
Return: float
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.FloatField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.GuidField
Summary: Guid field value class

Property: Rhino.Render.Fields.GuidField.Value
Return: Guid
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.GuidField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.IntField
Summary: Integer field value class

Property: Rhino.Render.Fields.IntField.Value
Return: int
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.IntField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.NullField
Summary: Null field value class

Property: Rhino.Render.Fields.NullField.Value
Return: bool
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.NullField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Point2dField
Summary: Point2d field value class

Property: Rhino.Render.Fields.Point2dField.Value
Return: Point2d
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Point2dField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Point3dField
Summary: Point3d field value class

Property: Rhino.Render.Fields.Point3dField.Value
Return: Point3d
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Point3dField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Point4dField
Summary: Point4d field value class

Property: Rhino.Render.Fields.Point4dField.Value
Return: Point4d
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Point4dField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.StringField
Summary: String field value class

Property: Rhino.Render.Fields.StringField.Value
Return: string
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.StringField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.TransformField
Summary: Transform field value class

Property: Rhino.Render.Fields.TransformField.Value
Return: Transform
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.TransformField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Vector2dField
Summary: Vector2d field value class

Property: Rhino.Render.Fields.Vector2dField.Value
Return: Vector2d
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Vector2dField.ValueAsObject()
Return: object
Modifiers: public, override

Class: Rhino.Render.Fields.Vector3dField
Summary: Vector3d field value class

Property: Rhino.Render.Fields.Vector3dField.Value
Return: Vector3d
Modifiers: public
Summary: Gets or sets the field value
Accessors: get set

Method: Rhino.Render.Fields.Vector3dField.ValueAsObject()
Return: object
Modifiers: public, override

# Namespace: Rhino.Render.ParameterNames

Class: Rhino.Render.ParameterNames.PhysicallyBased
Summary: Helper class with properties containing the names of fields available in our PBR implementation.

Constructor: Rhino.Render.ParameterNames.PhysicallyBased.PhysicallyBased()
Summary: Initializes a new instance of the PhysicallyBased class

Property: Rhino.Render.ParameterNames.PhysicallyBased.Alpha
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.AmbientOcclusion
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Anisotropic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.AnisotropicRotation
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.BaseColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.BRDF
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Bump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Clearcoat
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.ClearcoatBump
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.ClearcoatRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Displacement
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Emission
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Metallic
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Opacity
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.OpacityIor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.OpacityRoughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Roughness
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Sheen
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.SheenTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Specular
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.SpecularTint
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.Subsurface
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.SubsurfaceScatteringColor
Return: string
Modifiers: public, static
Accessors: get

Property: Rhino.Render.ParameterNames.PhysicallyBased.SubsurfaceScatteringRadius
Return: string
Modifiers: public, static
Accessors: get

# Namespace: Rhino.Render.PostEffects

Class: Rhino.Render.PostEffects.CustomPostEffectAttribute

Constructor: Rhino.Render.PostEffects.CustomPostEffectAttribute.CustomPostEffectAttribute(PostEffectType postEffectType, string name, PostEffectStyles styles, PostEffectExecuteWhileRenderingOptions executeWhileRenderingOption, bool canDisplayHelp, int executeWhileRenderingDelay)

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.CanDisplayHelp
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.ExecuteWhileRenderingDelay
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.ExecuteWhileRenderingOption
Return: PostEffectExecuteWhileRenderingOptions
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.Name
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.PostEffectType
Return: PostEffectType
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.CustomPostEffectAttribute.Styles
Return: PostEffectStyles
Modifiers: public
Accessors: get set

Class: Rhino.Render.PostEffects.PostEffect

Constructor: Rhino.Render.PostEffects.PostEffect.PostEffect()

Property: Rhino.Render.PostEffects.PostEffect.CanDisplayHelp
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.ExecuteWhileRenderingOption
Return: PostEffectExecuteWhileRenderingOptions
Modifiers: public
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.Id
Return: Guid
Modifiers: public
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.IsSelected
Return: bool
Modifiers: public
Summary: Return True if the post effect is selected.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.LocalName
Return: string
Modifiers: public
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.On
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffect.PostEffectType
Return: PostEffectType
Modifiers: public
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.RequiredChannels
Return: Guid[]
Modifiers: public, virtual
Summary: The RDK calls this method to determine which channels a post effect requires. If a required channel is not available, the RDK will hide the post effect's UI and display explanatory text instead. Note: As a convenience, the default implementation adds IRhRdkRenderWindow::chanRGBA to the output array. Most post effects should be able to use this default with no need to override the method.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffect.SerialNumber
Return: int
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffect.Shown
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffect.Styles
Return: PostEffectStyles
Modifiers: public
Accessors: get

Method: Rhino.Render.PostEffects.PostEffect.RegisterPostEffect(PlugIns.PlugIn plugin)
Return: System.Type[]
Modifiers: public, static

Method: Rhino.Render.PostEffects.PostEffect.RegisterPostEffect(System.Reflection.Assembly assembly, System.Guid pluginId)
Return: System.Type[]
Modifiers: public, static

Method: Rhino.Render.PostEffects.PostEffect.AddUISections(PostEffectUI ui)
Return: void
Modifiers: public, abstract
Summary: Create each of your UI sections using 'new' and then call ui.AddSection() on them. RDK takes ownership of the sections.If your post effect does not need a UI, then your implementation of this method can be a no-op.
Parameter: ui (PostEffectUI)
Parameter Summary: PostEffectUI

Method: Rhino.Render.PostEffects.PostEffect.BeginChange(ChangeContexts changeContext)
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffect.CanExecute(PostEffectPipeline pipeline)
Return: bool
Modifiers: public, virtual
Summary: Return True if the post effect can execute, else false. The base implementation checks if the post effect is 'On' and 'Shown'. Post effect authors can override this to include other criteria but cannot disable the base criteria.
Parameter: pipeline (PostEffectPipeline)
Parameter Summary: PostEffectPipeline

Method: Rhino.Render.PostEffects.PostEffect.Changed()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffect.DisplayHelp()
Return: bool
Modifiers: public, abstract
Summary: Displays the post effect's help page, if any.

Method: Rhino.Render.PostEffects.PostEffect.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffect.Dispose(bool bDisposing)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.PostEffects.PostEffect.EndChange()
Return: bool
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffect.Execute(PostEffectPipeline pipeline, Rectangle rect)
Return: bool
Modifiers: public, abstract
Summary: Execute the post effect.
Parameter: pipeline (PostEffectPipeline)
Parameter Summary: pipeline provides access to the post-effect pipeline.
Parameter: rect (Rectangle)
Parameter Summary: rect is the pixel area to process.

Method: Rhino.Render.PostEffects.PostEffect.GetHashCode()
Return: int
Modifiers: public, override
Summary: A CRC of the state of this post effect.

Method: Rhino.Render.PostEffects.PostEffect.GetParam(string param, ref object v)
Return: bool
Modifiers: public, abstract
Summary: Get a parameter.
Parameter: param (string)
Parameter Summary: is the name of the parameter to get.
Parameter: v (object)
Parameter Summary: accepts the parameter value.

Method: Rhino.Render.PostEffects.PostEffect.ReadFromDocumentDefaults(RhinoDoc doc)
Return: bool
Modifiers: public, virtual
Summary: Because post effects are now in the render settings, this function can no longer be called.

Method: Rhino.Render.PostEffects.PostEffect.ReadState(PostEffectState state)
Return: bool
Modifiers: public, abstract
Summary: Read the state. If your post effect has no state, you must still return True for success.
Parameter: state (PostEffectState)
Parameter Summary: PostEffectState

Method: Rhino.Render.PostEffects.PostEffect.ResetToFactoryDefaults()
Return: void
Modifiers: public, abstract
Summary: Reset the state to factory defaults.

Method: Rhino.Render.PostEffects.PostEffect.SetParam(string param, object v)
Return: bool
Modifiers: public, abstract
Summary: Set a parameter.
Parameter: param (string)
Parameter Summary: is the name of the parameter to set.
Parameter: v (object)
Parameter Summary: specifies the type and value to set.

Method: Rhino.Render.PostEffects.PostEffect.WriteState(ref PostEffectState state)
Return: bool
Modifiers: public, abstract
Summary: Write the state. If your post effect has no state, you must still return True for success.
Parameter: state (PostEffectState)
Parameter Summary: PostEffectState

Method: Rhino.Render.PostEffects.PostEffect.WriteToDocumentDefaults(RhinoDoc doc)
Return: bool
Modifiers: public, virtual
Summary: Because post effects are now in the render settings, this function can no longer be called.

Class: Rhino.Render.PostEffects.PostEffectChannel

Property: Rhino.Render.PostEffects.PostEffectChannel.Id
Return: Guid
Modifiers: virtual, public
Summary: Return the channel id which indicates what type of data is used in this channel.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectChannel.PixelSize
Return: int
Modifiers: public
Summary: Return the pixel size in bytes for this channel.
Accessors: get

Method: Rhino.Render.PostEffects.PostEffectChannel.Clone()
Return: PostEffectChannel
Modifiers: public
Summary: Return a clone of this channel.

Method: Rhino.Render.PostEffects.PostEffectChannel.Commit()
Return: void
Modifiers: public
Summary: Commit changes to the channel so that those changes can be used by subsequent post effects in the chain. Only valid for channels that were obtained by calling GetChannelForWrite(). If the channel has the same id as an existing channel, the existing channel will be replaced by the new one. If the existing channel was created by a previous post effect in the chain, it will be deleted. Changes to channels that are not commited simply get ignored. Note: This call merely sets a flag. The process is deferred until after the post effect has finished executing.

Method: Rhino.Render.PostEffects.PostEffectChannel.CPU()
Return: RenderWindow.Channel
Modifiers: public
Summary: Return an interface to this channel for doing channel operations on the CPU.

Method: Rhino.Render.PostEffects.PostEffectChannel.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectChannel.GPU()
Return: RenderWindow.ChannelGPU
Modifiers: public
Summary: Return an interface to this channel for doing channel operations on the GPU.

Class: Rhino.Render.PostEffects.PostEffectCollection
Summary: Represents the collection of post effects in render settings.

Constructor: Rhino.Render.PostEffects.PostEffectCollection.PostEffectCollection()
Summary: Create a utility object not associated with any document

Constructor: Rhino.Render.PostEffects.PostEffectCollection.PostEffectCollection(PostEffectCollection c)
Summary: Create a utility object not associated with any document from another object

Method: Rhino.Render.PostEffects.PostEffectCollection.CopyFrom(FreeFloatingBase src)
Return: void
Modifiers: public, override

Method: Rhino.Render.PostEffects.PostEffectCollection.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectCollection.GetEnumerator()
Return: IEnumerator<PostEffectData>
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectCollection.GetSelectedPostEffect(PostEffectType type, out System.Guid id)
Return: bool
Modifiers: public
Summary: Gets the selected post effect for a certain type into 'id'. Returns True if successful or False if the selection information could not be found.

Method: Rhino.Render.PostEffects.PostEffectCollection.MovePostEffectBefore(System.Guid id_move, System.Guid id_before)
Return: bool
Modifiers: public
Summary: Move a post effect before another post effect in the list. Param 'id_move' is the id of the post effect to move. Param 'id_before' is the id of a post effect before which the post effect should be moved. If this is Guid.Empty, the post effect is moved to the end of the list. If the post effect identified by 'id_before' is not found, the method will fail. Returns True if successful, else false.

Method: Rhino.Render.PostEffects.PostEffectCollection.PostEffectDataFromId(System.Guid id)
Return: PostEffectData
Modifiers: public
Summary: Get a post effect data for an id.

Method: Rhino.Render.PostEffects.PostEffectCollection.SetSelectedPostEffect(PostEffectType type, System.Guid id)
Return: void
Modifiers: public
Summary: Sets the selected post effect for a certain type.

Class: Rhino.Render.PostEffects.PostEffectData
Summary: This is a wrapper around the data ('on', 'shown', 'state' parameters, etc.) of a post effect.

Property: Rhino.Render.PostEffects.PostEffectData.Collection
Return: PostEffectCollection
Modifiers: public
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffectData.Id
Return: Guid
Modifiers: public
Summary: Returns the unique id of this post effect.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectData.LocalName
Return: string
Modifiers: public
Summary: Returns the localized name of this post effect.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectData.On
Return: bool
Modifiers: public
Summary: The 'on' state of this post effect.
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffectData.Shown
Return: bool
Modifiers: public
Summary: The 'shown' state of this post effect.
Accessors: get set

Property: Rhino.Render.PostEffects.PostEffectData.Type
Return: PostEffectType
Modifiers: public
Summary: Returns the type of this post effect.
Accessors: get

Method: Rhino.Render.PostEffects.PostEffectData.DataCRC(uint current_remainder)
Return: uint
Modifiers: public
Summary: Get a CRC representing the state of the entire post effect.

Method: Rhino.Render.PostEffects.PostEffectData.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectData.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Render.PostEffects.PostEffectData.GetParameter(string param_name)
Return: System.IConvertible
Modifiers: public
Summary: Get an arbitrary parameter from this post effect by its name. If the parameter is not known to the post effect, the method will fail. Returns a variant object if successful or None on failure.

Method: Rhino.Render.PostEffects.PostEffectData.SetParameter(string param_name, object param_value)
Return: bool
Modifiers: public
Summary: Set an arbitrary parameter to the post effect by its name. If the parameter is not known to the post effect, the method will fail. Returns True if successful or False on failure.

Class: Rhino.Render.PostEffects.PostEffectExecutionControl

Constructor: Rhino.Render.PostEffects.PostEffectExecutionControl.PostEffectExecutionControl()

Method: Rhino.Render.PostEffects.PostEffectExecutionControl.Detach()
Return: System.IntPtr
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectExecutionControl.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectExecutionControl.Dispose(bool bDisposing)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.PostEffects.PostEffectExecutionControl.ReadyToExecutePostEffect(System.Guid pep_id)
Return: bool
Modifiers: public, abstract

Class: Rhino.Render.PostEffects.PostEffectJob

Constructor: Rhino.Render.PostEffects.PostEffectJob.PostEffectJob()

Method: Rhino.Render.PostEffects.PostEffectJob.Clone()
Return: PostEffectJob
Modifiers: public, abstract

Method: Rhino.Render.PostEffects.PostEffectJob.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectJob.Dispose(bool bDisposing)
Return: void
Modifiers: public, virtual

Method: Rhino.Render.PostEffects.PostEffectJob.Execute(Rectangle rect, PostEffectJobChannels access)
Return: bool
Modifiers: public, abstract

Class: Rhino.Render.PostEffects.PostEffectJobChannels

Method: Rhino.Render.PostEffects.PostEffectJobChannels.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectJobChannels.GetChannel(System.Guid channelId)
Return: PostEffectChannel
Modifiers: public

Class: Rhino.Render.PostEffects.PostEffectPipeline
Summary: This object provides a way for post effects to access the frame buffer channels from a rendering and create new channels containing post-processed information which can be passed to the next post effect in the chain. Consider a simple post effect that just modifies the red component of a rendering.It will call GetChannel() to get the red channel as its input, and it will call NewChannel() to get a new red channel for its output. It will then read the input channel, do calculations and write to the output channel.When finished, it will call Commit() passing the new channel.Because both channels have the same identifier, this will replace the old channel with the new one so that subsequent post effects in the chain will use the new channel instead of the original.Note that this will only replace the channel used by the pipeline.The original channel will still exist in the frame buffer.This system allows any post effect to access any number of channels for reading and create any number of new channels which may or may not replace existing channels depending on the channel id.The final stage (convert to 8-bit) operates on the channels left in the pipeline by the post effect chain to produce the final 32-bit RGBA image in a dib.  It is also possible for a post effect to create and use any number of 'scratch' channels.If a post effect needs a temporary pixel buffer for some intermediate results, it can call NewChannel() with a custom (random) id. Once it is finished with this scratch channel, it can call Discard() on it.

Property: Rhino.Render.PostEffects.PostEffectPipeline.GPUAllowed
Return: bool
Modifiers: public
Summary: Post effect authors should check that GPU use is allowed before using the GPU in a post effect.
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectPipeline.IsRendering
Return: bool
Modifiers: public
Summary: IsRendering
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectPipeline.RenderingId
Return: Guid
Modifiers: public
Summary: Return a UUID that uniquely identifies the rendering being processed.
Accessors: get

Method: Rhino.Render.PostEffects.PostEffectPipeline.Dimensions()
Return: Size
Modifiers: public
Summary: Get the dimensions of the frame buffer. All channels in the frame buffer have the same dimensions.

Method: Rhino.Render.PostEffects.PostEffectPipeline.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectPipeline.Execute(Rectangle p, bool renderingInProgress, PostEffectExecuteContexts usageContexts, PostEffectHistograms histogramsToUpdate)
Return: bool
Modifiers: public
Summary: Execute the pipeline. This executes all the post effects in order. Only this rectangle need be modified by the post effects.
Parameter: p (Rectangle)
Parameter Summary: p is a rectangle within the frame buffer.
Parameter: renderingInProgress (bool)
Parameter Summary: rendering is True if rendering is in progress.
Parameter: usageContexts (PostEffectExecuteContexts)
Parameter Summary: Context this pipeline is being executed in.
Parameter: histogramsToUpdate (PostEffectHistograms)
Parameter Summary: Bitwise list of histograms to update during the execution of the pipeline

Method: Rhino.Render.PostEffects.PostEffectPipeline.ExecutionOrder()
Return: System.Guid[]
Modifiers: public
Summary: Returns a list of the post effects to be executed by this pipeline in order.

Method: Rhino.Render.PostEffects.PostEffectPipeline.GetChannelForRead(System.Guid id)
Return: PostEffectChannel
Modifiers: public
Summary: Get a channel for reading. A post effect will use this to get channel data as input to its process. Output will be written to new channel(s). \see GetChannelForWrite() This method returns the current state of the channel at this stage in the pipeline. If the first post effect calls this, it will get the actual frame buffer channel. Subsequent post effects will get the data left behind by the previous post effect. A post effect calls GetChannelForRead() to get its input and GetChannelForWrite() to get the object to which it will write its output. Even when the same channel id is specified, these are separate, unconnected objects.
Parameter: id (System.Guid)
Parameter Summary: The channel identifier.

Method: Rhino.Render.PostEffects.PostEffectPipeline.GetChannelForWrite(System.Guid id)
Return: PostEffectChannel
Modifiers: public
Summary: Get a channel for writing. A post effect will use this to get channel(s) to write the output of its processing to. Input will usually come from existing channels, although a post effect is free to read its own output channels if needed. See GetChannelForRead() You are allowed to create one new channel with the same identifier as an existing channel, in which case IChannel::Commit() will replace the existing channel with the new one in the pipeline.
Parameter: id (System.Guid)
Parameter Summary: The channel identifier.

Method: Rhino.Render.PostEffects.PostEffectPipeline.GetEndTimeInMilliseconds()
Return: ulong
Modifiers: public
Summary: Get the end time of the rendering expressed in milliseconds since some unspecified epoch. Do not make assumptions about what the epoch is; it might be different on different platforms.

Method: Rhino.Render.PostEffects.PostEffectPipeline.GetMaxLuminance()
Return: float
Modifiers: public
Summary: Get the max luminance in the rendering.

Method: Rhino.Render.PostEffects.PostEffectPipeline.GetStartTimeInMilliseconds()
Return: ulong
Modifiers: public
Summary: Get the start time of the rendering expressed in milliseconds since some unspecified epoch. Do not make assumptions about what the epoch is; it might be different on different platforms.

Method: Rhino.Render.PostEffects.PostEffectPipeline.SetStartTimeInMilliseconds(ulong ms)
Return: void
Modifiers: public
Summary: Set the start time of the rendering in milliseconds since some unspecified epoch.
Parameter: ms (ulong)
Parameter Summary: milliseconds

Method: Rhino.Render.PostEffects.PostEffectPipeline.ThreadEngine()
Return: PostEffectThreadEngine
Modifiers: public
Summary: Get the post effect thread engine.

Class: Rhino.Render.PostEffects.PostEffectState

Method: Rhino.Render.PostEffects.PostEffectState.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectState.SetValue(string name, T vValue)
Return: bool
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectState.TryGetValue(string name, out T vValue)
Return: bool
Modifiers: public

Class: Rhino.Render.PostEffects.PostEffectThreadEngine

Method: Rhino.Render.PostEffects.PostEffectThreadEngine.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.PostEffects.PostEffectThreadEngine.RunPostEffect(PostEffectJob job, PostEffectPipeline pipeline, PostEffect plugin, Rectangle rect, System.Guid[] channels)
Return: bool
Modifiers: public

Class: Rhino.Render.PostEffects.PostEffectUI
Summary: PostEffectUI class provides a way for post effect plug-ins to add ui sections.

Method: Rhino.Render.PostEffects.PostEffectUI.AddSection(ICollapsibleSection section)
Return: void
Modifiers: public
Summary: Add a section to the UI.

Method: Rhino.Render.PostEffects.PostEffectUI.Dispose()
Return: void
Modifiers: public

Class: Rhino.Render.PostEffects.PostEffectUuids

Constructor: Rhino.Render.PostEffects.PostEffectUuids.PostEffectUuids()
Summary: Initializes a new instance of the PostEffectUuids class

Property: Rhino.Render.PostEffects.PostEffectUuids.Bloom
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.BriCon
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.DepthOfField
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Dithering
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Fog
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Gamma
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.GaussianBlur
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Glare
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Glow
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.HueSatLum
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Multiplier
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Noise
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.ToneMapper_BlackWhitePoint
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.ToneMapper_Clamp
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.ToneMapper_FalseColor
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.ToneMapper_Filmic
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.ToneMapper_Logarithmic
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.Watermark
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.WireframeAnnotationsRGBA
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.WireframeCurvesRGBA
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.WireframeIsocurvesRGBA
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.Render.PostEffects.PostEffectUuids.WireframePointsRGBA
Return: Guid
Modifiers: public, static
Accessors: get

# Namespace: Rhino.Render.UI

Class: Rhino.Render.UI.UserInterfaceSection
Summary: Custom user interface section manager

Property: Rhino.Render.UI.UserInterfaceSection.RenderContent
Return: RenderContent
Modifiers: public
Summary: The RenderContent object that created this user interface object.
Accessors: get

Property: Rhino.Render.UI.UserInterfaceSection.Window
Return: object
Modifiers: public
Summary: The user control associated with this user interface object.
Accessors: get

Method: Rhino.Render.UI.UserInterfaceSection.FromWindow(object window)
Return: UserInterfaceSection
Modifiers: public, static
Summary: Find the UserInterfaceSection that created the specified instance of a window.
Parameter: window (object)
Parameter Summary: If window is not None then look for the UserInterfaceSection that created the window.

Method: Rhino.Render.UI.UserInterfaceSection.Expand(bool expand)
Return: void
Modifiers: public
Summary: Expand or collapse this content section.
Parameter: expand (bool)
Parameter Summary: If True then expand the content section otherwise collapse it.

Method: Rhino.Render.UI.UserInterfaceSection.GetContentList()
Return: RenderContent[]
Modifiers: public
Summary: Returns a list of currently selected content items to be edited.

Method: Rhino.Render.UI.UserInterfaceSection.Show(bool visible)
Return: void
Modifiers: public
Summary: Show or hide this content section.
Parameter: visible (bool)
Parameter Summary: If True then show the content section otherwise hide it.

Class: Rhino.Render.UI.WorldMapDayNight

Constructor: Rhino.Render.UI.WorldMapDayNight.WorldMapDayNight()

Method: Rhino.Render.UI.WorldMapDayNight.Dispose()
Return: void
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.HasMapForCurrentSettings()
Return: bool
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.LocationToMap(Rhino.Geometry.Point2d latlong)
Return: System.Drawing.Point
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.MakeMapBitmap()
Return: void
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.Map()
Return: System.Drawing.Image
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.MapToLocation(System.Drawing.Point mapPoint)
Return: Rhino.Geometry.Point2d
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.SetDayNightDisplay(bool bOn)
Return: void
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.SetEnabled(bool bEnabled)
Return: void
Modifiers: public

Method: Rhino.Render.UI.WorldMapDayNight.SetTimeInfo(System.DateTime dt, double timezone, int daylightSavingMinutes, bool bDaylightSavingsOn)
Return: void
Modifiers: public

# Namespace: Rhino.Runtime

Class: Rhino.Runtime.Analytics
Summary: Provides tools for sending Google Analytics events using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details.

Constructor: Rhino.Runtime.Analytics.Analytics(string TrackingID, string Name, string Platform, string InstallerId, string Version)
Summary: Construct Analytics class

Constructor: Rhino.Runtime.Analytics.Analytics(string TrackingID, string Name)
Summary: Construct Analytics class

Property: Rhino.Runtime.Analytics.UsageStatisticsEnabled
Return: bool
Modifiers: public, static
Summary: Determine if user allows automatic data collection from Rhino
Accessors: get

Property: Rhino.Runtime.Analytics.UserId
Return: Guid
Modifiers: public, static
Summary: Returns a GUID that allows events to be aggregated by user. There is no way to determine who the end user is based on this GUID, unless the user tells you their ID.  On Windows, this uses the registry to store the ID.  On Mac, the Hardware UUID is used as the ID.
Accessors: get

Property: Rhino.Runtime.Analytics.AppInstallerId
Return: string
Modifiers: public
Summary: App Installer Id. In Rhino, we use this to differentiate between different builds such as "WIP" and "Commercial". Maps to Google Analytics parameter 'aiid'
Accessors: get set

Property: Rhino.Runtime.Analytics.AppName
Return: string
Modifiers: public
Summary: Name of Application. For example, "Ocelot". Do not include version numbers. Maps to Google Analytics parameter 'an'
Accessors: get set

Property: Rhino.Runtime.Analytics.AppPlatform
Return: string
Modifiers: public
Summary: Platform application is running on. For example "Mac", "Windows". Again, don't include version numbers. Maps to Google Analytics parameter 'ai'
Accessors: get set

Property: Rhino.Runtime.Analytics.AppVersion
Return: string
Modifiers: public
Summary: Application version string. Maps to Google Analytics parameter 'av'
Accessors: get set

Property: Rhino.Runtime.Analytics.GoogleAnalyticsTrackingID
Return: string
Modifiers: public
Summary: Google Analytics Tracking ID
Accessors: get set

Method: Rhino.Runtime.Analytics.Send(string Category, string Action, string Label, uint Value)
Return: void
Modifiers: public
Summary: Sends a Google Analytics event using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details. This method is asyncrhonous and the return code is completely ignored. Validate the data you send
Parameter: Category (string)
Parameter Summary: Event category. We use the feature or subsystem, such as "installer" or "app" or "document" or "loft". Maps to the Google Analytics parameter "ec".
Parameter: Action (string)
Parameter Summary: Event action. A verb: "open" or "start" or "option" Maps to the Google Analytics parameter "ea".
Parameter: Label (string)
Parameter Summary: Event label. Maps to the Google Analytics parameter "el".
Parameter: Value (uint)
Parameter Summary: Event value. Maps to the Google Analytics parameter "ev".

Method: Rhino.Runtime.Analytics.Send(string Category, string Action, string Label)
Return: void
Modifiers: public
Summary: Sends a Google Analytics event using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details.
Parameter: Category (string)
Parameter Summary: Event category. We use the feature or subsystem, such as "installer" or "app" or "document" or "loft". Maps to the Google Analytics parameter "ec".
Parameter: Action (string)
Parameter Summary: Event action. A verb: "open" or "start" or "option" Maps to the Google Analytics parameter "ea".
Parameter: Label (string)
Parameter Summary: Event label. Maps to the Google Analytics parameter "el".

Method: Rhino.Runtime.Analytics.Send(string Category, string Action)
Return: void
Modifiers: public
Summary: Sends a Google Analytics event using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details.
Parameter: Category (string)
Parameter Summary: Event category. We use the feature or subsystem, such as "installer" or "app" or "document" or "loft". Maps to the Google Analytics parameter "ec".
Parameter: Action (string)
Parameter Summary: Event action. A verb: "open" or "start" or "option" Maps to the Google Analytics parameter "ea".

Method: Rhino.Runtime.Analytics.Send(string Category)
Return: void
Modifiers: public
Summary: Sends a Google Analytics event using the Measurement Protocol. See https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide#event for details.
Parameter: Category (string)
Parameter Summary: Event category. We use the feature or subsystem, such as "installer" or "app" or "document" or "loft". Maps to the Google Analytics parameter "ec".

Method: Rhino.Runtime.Analytics.Send(System.Collections.Specialized.NameValueCollection data)
Return: void
Modifiers: public
Summary: Advanced method for sending Google Analytics data. It is the caller's responsibility to make sure that all parameters passed will result in a valid Google Analytics hit. Failure to do so will result in Google Analytics ignoring your hit, and the caller will get no data. The Analytics class will populate data from the Application, the GoogleAnalyticsTrackingID, the User ID, and set the hit type "t" to "event". It also sets other information about the system.
Parameter: data (System.Collections.Specialized.NameValueCollection)
Parameter Summary: Name-Value pairs of data to send. Any valid Google Analytics Measurement Protocol parameter is allowed. No input validation is performed.

Class: Rhino.Runtime.AssemblyResolver
Summary: Assembly Resolver for the Rhino App Domain.

Constructor: Rhino.Runtime.AssemblyResolver.AssemblyResolver()
Summary: Initializes a new instance of the AssemblyResolver class

Property: Rhino.Runtime.AssemblyResolver.CurrentDomainAssemblyResolve
Return: ResolveEventHandler
Modifiers: public, static
Summary: Standard resolver function used by Rhino in execution context. This is added to the Current <b>AppDomain.AssemblyResolve</b> .
Accessors: get

Property: Rhino.Runtime.AssemblyResolver.CurrentDomainReflectionOnlyAssemblyResolve
Return: ResolveEventHandler
Modifiers: public, static
Summary: Standard resolver function used by Rhino in reflection-only context. This is added to the Current <b>AppDomain.ReflectionOnlyAssemblyResolve</b> .
Accessors: get

Method: Rhino.Runtime.AssemblyResolver.AddSearchFile(string file)
Return: void
Modifiers: public, static
Summary: Register another file with the Assembly Resolver. File must be a .NET assembly, so it should probably be a dll, rhp or exe.
Parameter: file (string)
Parameter Summary: Path of file to include during Assembly Resolver events.

Method: Rhino.Runtime.AssemblyResolver.AddSearchFolder(string folder)
Return: void
Modifiers: public, static
Summary: Register a custom folder with the Assembly Resolver. Folders will be searched recursively, so this could potentially be a very expensive operation. If at all possible, you should consider only registering individual files.
Parameter: folder (string)
Parameter Summary: Path of folder to include during Assembly Resolver events.

Class: Rhino.Runtime.CommonObject
Summary: Base class for .NET classes that wrap C++ unmanaged Rhino classes.

Constructor: Rhino.Runtime.CommonObject.CommonObject()
Summary: Allows construction from inheriting classes.

Constructor: Rhino.Runtime.CommonObject.CommonObject(SerializationInfo info, StreamingContext context)
Summary: Protected constructor for internal use.

Property: Rhino.Runtime.CommonObject.PerformCorruptionTesting
Return: bool
Modifiers: public, static
Summary: Used to test ON_Object* pointers to see if they are a brep or mesh that is corrupt enough to crash Rhino.
Accessors: get set

Property: Rhino.Runtime.CommonObject.Disposed
Return: bool
Modifiers: public
Summary: Indicates if this object has been disposed or the document it originally belonged to has been disposed.
Accessors: get

Property: Rhino.Runtime.CommonObject.HasUserData
Return: bool
Modifiers: public
Summary: Gets True if this class has any custom information attached to it through UserData.
Accessors: get

Property: Rhino.Runtime.CommonObject.IsDocumentControlled
Return: bool
Modifiers: public, virtual
Summary: If True this object may not be modified. Any properties or functions that attempt to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
Accessors: get

Property: Rhino.Runtime.CommonObject.IsValid
Return: bool
Modifiers: public, virtual
Summary: Tests an object to see if it is valid.
Accessors: get

Property: Rhino.Runtime.CommonObject.UserData
Return: UserDataList
Modifiers: public
Summary: List of custom information that is attached to this class.
Accessors: get

Property: Rhino.Runtime.CommonObject.UserDictionary
Return: ArchivableDictionary
Modifiers: public
Summary: Dictionary of custom information attached to this class. The dictionary is actually user data provided as an easy to use shareable set of information.
Accessors: get

Method: Rhino.Runtime.CommonObject.FromBase64String(int archive3dm, int opennurbs, string base64Data)
Return: CommonObject
Modifiers: public, static
Summary: Create a CommonObject instance from a Base64 encoded string. This is typically the values used when passing common objects around as JSON data

Method: Rhino.Runtime.CommonObject.FromJSON(Dictionary<string, string> jsonDictionary)
Return: CommonObject
Modifiers: public, static
Summary: Create a CommonObject instance from a JSON dictionary

Method: Rhino.Runtime.CommonObject.FromJSON(string json)
Return: CommonObject
Modifiers: public, static
Summary: Create a CommonObject instance from a JSON string

Method: Rhino.Runtime.CommonObject.ConstructConstObject(object parentObject, int subobjectIndex)
Return: void
Modifiers: protected
Summary: Assigns a parent object and a sub-object index to this.
Parameter: parentObject (object)
Parameter Summary: The parent object.
Parameter: subobjectIndex (int)
Parameter Summary: The sub-object index.

Method: Rhino.Runtime.CommonObject.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.CommonObject.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.CommonObject.EnsurePrivateCopy()
Return: void
Modifiers: public
Summary: If you want to keep a copy of this class around by holding onto it in a variable after a command completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can call this function as many times as you want.

Method: Rhino.Runtime.CommonObject.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
Return: void
Modifiers: public, virtual
Summary: Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
Parameter: info (System.Runtime.Serialization.SerializationInfo)
Parameter Summary: The System.Runtime.Serialization.SerializationInfo to populate with data.
Parameter: context (System.Runtime.Serialization.StreamingContext)
Parameter Summary: The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.

Method: Rhino.Runtime.CommonObject.IsValidWithLog(out string log)
Return: bool
Modifiers: public
Summary: Determines if an object is valid. Also provides a report on errors if this object happens not to be valid.
Parameter: log (string)
Parameter Summary: A textual log. This out parameter is assigned during this call.

Method: Rhino.Runtime.CommonObject.NonConstOperation()
Return: void
Modifiers: protected, virtual
Summary: For derived classes implementers.
Defines the necessary implementation to free the instance from being constant.

Method: Rhino.Runtime.CommonObject.OnSwitchToNonConst()
Return: void
Modifiers: protected, virtual
Summary: Is called when a non-constant operation first occurs.

Method: Rhino.Runtime.CommonObject.ToJSON(Rhino.FileIO.SerializationOptions options)
Return: string
Modifiers: public
Summary: Create a JSON string representation of this object

Class: Rhino.Runtime.CorruptGeometryException
Summary: Thrown when Rhino finds a brep or mesh that will cause a crash if used for calculations.

Property: Rhino.Runtime.CorruptGeometryException.CommonObject
Return: CommonObject
Modifiers: public
Summary: Corrupt geometry .NET class
Accessors: get set

Property: Rhino.Runtime.CorruptGeometryException.Pointer
Return: IntPtr
Modifiers: public
Summary: pointer to base geometry (ON_Object*)
Accessors: get set

Class: Rhino.Runtime.DocumentCollectedException
Summary: Represents the error that happen when a class user attempts to execute a modifying operation on an object that has been added to a document.

Constructor: Rhino.Runtime.DocumentCollectedException.DocumentCollectedException()
Summary: Initializes a new instance of the document controlled exception class.

Constructor: Rhino.Runtime.DocumentCollectedException.DocumentCollectedException(string message)
Summary: Initializes a new instance of the document collected exception class.

Class: Rhino.Runtime.HostUtils
Summary: Contains static methods to deal with the runtime environment.

Constructor: Rhino.Runtime.HostUtils.HostUtils()
Summary: Initializes a new instance of the HostUtils class

Property: Rhino.Runtime.HostUtils.ComputerSerialNumber
Return: string
Modifiers: public, static
Summary: Gets the serial number of the computer running Rhino.
Accessors: get

Property: Rhino.Runtime.HostUtils.CurrentOSLanguage
Return: uint
Modifiers: public, static
Summary: Get the current operating system language.
Accessors: get

Property: Rhino.Runtime.HostUtils.DeviceId
Return: Guid
Modifiers: public, static
Summary: The DeviceId is a unique, stable ID that anonymously identifies the device that Rhino is running on. It is computed based on hardware information that should not change when the OS is upgraded, or if commonly modified hardware are added or removed from the computer. The machine-specific information is hashed using a cryptographic hash to make it anonymous.
Accessors: get

Property: Rhino.Runtime.HostUtils.DeviceName
Return: string
Modifiers: public, static
Summary: Name of the computer running Rhino. If the computer is part of a Windows Domain, the computer name has "@[DOMAIN]" appended.
Accessors: get

Property: Rhino.Runtime.HostUtils.IsPreRelease
Return: bool
Modifiers: public, static
Summary: Returns True when Rhino build is Beta or WIP, False otherwise
Accessors: get

Property: Rhino.Runtime.HostUtils.OperatingSystemBuildNumber
Return: string
Modifiers: public, static
Summary: Returns Operating System Build Number "11763"
"7601"
...
"Unknown"
Accessors: get

Property: Rhino.Runtime.HostUtils.OperatingSystemEdition
Return: string
Modifiers: public, static
Summary: Returns Operating System Edition: "Professional"
"ServerDatacenter"
...
"Unknown"
Accessors: get

Property: Rhino.Runtime.HostUtils.OperatingSystemInstallationType
Return: string
Modifiers: public, static
Summary: Returns Operating System Installation Type: "Client"
"Server"
"Unknown"
Accessors: get

Property: Rhino.Runtime.HostUtils.OperatingSystemProductName
Return: string
Modifiers: public, static
Summary: Returns Operating System Edition: "Professional"
"ServerDatacenter"
...
"Unknown"
Accessors: get

Property: Rhino.Runtime.HostUtils.OperatingSystemVersion
Return: string
Modifiers: public, static
Summary: Returns Operating System Version "6.1"
"6.3"
...
"Unknown"
Accessors: get

Property: Rhino.Runtime.HostUtils.RhinoAssemblyDirectory
Return: string
Modifiers: public, static
Summary: Gets the Rhino system managed assembly directory.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningAsRhinoInside
Return: bool
Modifiers: public, static
Summary: Indicates whether Rhino is running inside another application. returns False if Rhino.exe is the top-level application. returns True if some other application is the top-level application.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInDarkMode
Return: bool
Modifiers: public, static
Summary: Returns True if the host operating system is in dark mode and Rhino supports dark mode.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInMono
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing under the Mono runtime.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInNetCore
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing under the .NET Core runtime.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInNetFramework
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing under the .NET Framework runtime.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInRhino
Return: bool
Modifiers: public, static
Summary: Tests if RhinoCommon is currently executing inside of the Rhino.exe process. There are other cases where RhinoCommon could be running; specifically inside of Visual Studio when something like a windows form is being worked on in the resource editor or running stand-alone when compiled to be used as a version of OpenNURBS.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningInWindowsContainer
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing inside a Windows Container.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningOniOS
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing on the iOS platform.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningOnOSX
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing on the Mac OSX platform.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningOnServer
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing in a server environment.
Accessors: get

Property: Rhino.Runtime.HostUtils.RunningOnWindows
Return: bool
Modifiers: public, static
Summary: Tests if this process is currently executing on the Windows platform.
Accessors: get

Property: Rhino.Runtime.HostUtils.SendDebugToCommandLine
Return: bool
Modifiers: public, static
Summary: Gets or sets whether debug messages are printed to the command line.
Accessors: get set

Method: Rhino.Runtime.HostUtils.AutoInstallPlugInFolder(bool currentUser)
Return: string
Modifiers: public, static
Summary: Gets the auto install plug-in folder for machine or current user.
Parameter: currentUser (bool)
Parameter Summary: True if the query relates to the current user.

Method: Rhino.Runtime.HostUtils.CallFromCoreRhino(string task)
Return: int
Modifiers: public, static
Summary: Don't change this function in ANY way unless you chat with Steve first! This function is called by Rhino on initial startup and the signature must be exact

Method: Rhino.Runtime.HostUtils.CheckForRdk(bool throwOnFalse, bool usePreviousResult)
Return: bool
Modifiers: public, static
Summary: Determines if the RDK is loaded.
Parameter: throwOnFalse (bool)
Parameter Summary: if the RDK is not loaded, then throws a  <b>RdkNotLoadedException</b> .
Parameter: usePreviousResult (bool)
Parameter Summary: if true, then the last result can be used instaed of performing a full check.

Method: Rhino.Runtime.HostUtils.ClearFpuExceptionStatus()
Return: void
Modifiers: public, static
Summary: Clear FPU exception and busy flags (Intel assembly fnclex)

Method: Rhino.Runtime.HostUtils.CreateCommands(PlugIn plugin)
Return: void
Modifiers: public, static
Summary: Parses a plugin and create all the commands defined therein.
Parameter: plugin (PlugIn)
Parameter Summary: Plugin to harvest for commands.

Method: Rhino.Runtime.HostUtils.CreateCommands(System.IntPtr pPlugIn, System.Reflection.Assembly pluginAssembly)
Return: int
Modifiers: public, static
Summary: Parses a plugin and create all the commands defined therein.
Parameter: pPlugIn (System.IntPtr)
Parameter Summary: Plugin to harvest for commands.
Parameter: pluginAssembly (System.Reflection.Assembly)
Parameter Summary: Assembly associated with the plugin.

Method: Rhino.Runtime.HostUtils.CreatePlugIn(System.Type pluginType, bool printDebugMessages)
Return: PlugIn
Modifiers: public, static
Summary: Instantiates a plug-in type and registers the associated commands and classes.
Parameter: pluginType (System.Type)
Parameter Summary: A plug-in type. This type must derive from <b>PlugIn</b> .
Parameter: printDebugMessages (bool)
Parameter Summary: True if debug messages should be printed.

Method: Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.BezierCurve bezierCurve)
Return: string
Modifiers: public, static
Summary: Gets the debug dumps. This is a text description of the geometric contents. DebugDump() is intended for debugging and is not suitable for creating high quality text descriptions of an object.
Parameter: bezierCurve (Rhino.Geometry.BezierCurve)
Parameter Summary: curve to evaluate

Method: Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.GeometryBase geometry)
Return: string
Modifiers: public, static
Summary: Gets the debug dumps. This is a text description of the geometric contents. DebugDump() is intended for debugging and is not suitable for creating high quality text descriptions of an object.
Parameter: geometry (Rhino.Geometry.GeometryBase)
Parameter Summary: Some geometry.

Method: Rhino.Runtime.HostUtils.DebugString(string format, params object args)
Return: void
Modifiers: public, static
Summary: Prints a debug message to the Rhino Command Line. The message will only appear if the SendDebugToCommandLine property is set to true.
Parameter: format (string)
Parameter Summary: Message to format and print.
Parameter: args (object)
Parameter Summary: An Object array containing zero or more objects to format.

Method: Rhino.Runtime.HostUtils.DebugString(string msg)
Return: void
Modifiers: public, static
Summary: Prints a debug message to the Rhino Command Line. The message will only appear if the SendDebugToCommandLine property is set to true.
Parameter: msg (string)
Parameter Summary: Message to print.

Method: Rhino.Runtime.HostUtils.DescribeGeometry(Rhino.Geometry.GeometryBase geometry)
Return: string
Modifiers: public, static
Summary: Returns a description that is similar to the one in the _What command, except for not mentioning units and other attribute data. This description is translated in the current Rhino version.

Method: Rhino.Runtime.HostUtils.DisplayOleAlerts(bool display)
Return: void
Modifiers: public, static
Summary: Defines if Ole alerts ("Server busy") alerts should be visualized.
This function makes no sense on Mono. | Since: 5.0 | Parameter: display (bool) | Parameter Summary: Whether alerts should be visible.

Method: Rhino.Runtime.HostUtils.ExceptionReport(string source, System.Exception ex)
Return: void
Modifiers: public, static
Summary: Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
Parameter: source (string)
Parameter Summary: An exception source text.
Parameter: ex (System.Exception)
Parameter Summary: An exception.

Method: Rhino.Runtime.HostUtils.ExceptionReport(System.Exception ex)
Return: void
Modifiers: public, static
Summary: Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
Parameter: ex (System.Exception)
Parameter Summary: An exception.

Method: Rhino.Runtime.HostUtils.ExecuteNamedCallback(string name, NamedParametersEventArgs args)
Return: bool
Modifiers: public, static
Summary: Execute a named callback

Method: Rhino.Runtime.HostUtils.FileNameEndsWithRhinoBackupExtension(string fileName)
Return: bool
Modifiers: public, static
Summary: Strip file extension from file name and check to see if it is a valid Rhino backup file extension.
Parameter: fileName (string)
Parameter Summary: File name to check.

Method: Rhino.Runtime.HostUtils.FileNameEndsWithRhinoExtension(string fileName)
Return: bool
Modifiers: public, static
Summary: Strip file extension from file name and check to see if it is a valid Rhino file extension.
Parameter: fileName (string)
Parameter Summary: File name to check.

Method: Rhino.Runtime.HostUtils.GetAbsolutePath(string relativePath, bool bRelativePathisFileName, string relativeTo, bool bRelativeToIsFileName, out string pathOut)
Return: bool
Modifiers: public, static
Summary: Call this method to convert a relative path to an absolute path relative to the specified path.
Parameter: relativePath (string)
Parameter Summary: Relative path to convert to an absolute path
Parameter: bRelativePathisFileName (bool)
Parameter Summary: If True then lpsFrom is treated as a file name otherwise it is treated as a directory name
Parameter: relativeTo (string)
Parameter Summary: File or folder the path is relative to
Parameter: bRelativeToIsFileName (bool)
Parameter Summary: If True then lpsFrom is treated as a file name otherwise it is treated as a directory name
Parameter: pathOut (string)
Parameter Summary: Reference to string which will receive the computed absolute path

Method: Rhino.Runtime.HostUtils.GetActivePlugInVersionFolders()
Return: IEnumerable<System.IO.DirectoryInfo>
Modifiers: public, static
Summary: Recurses through the auto install plug-in folders and returns the directories containing "active" versions of plug-ins.

Method: Rhino.Runtime.HostUtils.GetActivePlugInVersionFolders(bool currentUser)
Return: IEnumerable<System.IO.DirectoryInfo>
Modifiers: public, static
Summary: Recurses through the auto install plug-in folders and returns the directories containing "active" versions of plug-ins.
Parameter: currentUser (bool)
Parameter Summary: Current user (true) or machine (false).

Method: Rhino.Runtime.HostUtils.GetAssemblySearchPaths()
Return: string
Modifiers: public, static
Summary: Returns list of directory names where additional assemblies (plug-ins, DLLs, Grasshopper components) may be located

Method: Rhino.Runtime.HostUtils.GetCurrentProcessInfo(out string processName, out System.Version processVersion)
Return: void
Modifiers: public, static
Summary: Returns information about the current process. If Rhino is the top level process, processName is "Rhino". Otherwise, processName is the name, without extension, of the main module that is executing. For example, "compute.backend" or "Revit".  processVersion is the System.Version of the running process. It is the FileVersion of the executable.

Method: Rhino.Runtime.HostUtils.Type>[] GetCustomComputeEndpoints()
Return: Tuple<string,
Modifiers: public, static
Summary: Used by compute to define custom endpoints

Method: Rhino.Runtime.HostUtils.GetPlatformService(string assemblyPath, string typeFullName)
Return: T
Modifiers: public, static
Summary: For internal use only. Loads an assembly for dependency injection via IPlatformServiceLocator.
Parameter: assemblyPath (string)
Parameter Summary: The relative path of the assembly, relative to the position of RhinoCommon.dll
Parameter: typeFullName (string)
Parameter Summary: The full name of the type that is IPlatformServiceLocator. This is optional.

Method: Rhino.Runtime.HostUtils.GetPrinterDPI(string printerName, bool horizontal)
Return: double
Modifiers: public, static
Summary: Get the output resolution for a given printer.
Parameter: printerName (string)
Parameter Summary: 
Parameter: horizontal (bool)
Parameter Summary: get the horizontal or vertical resolution

Method: Rhino.Runtime.HostUtils.GetPrinterFormMargins(string printerName, string formName, bool portrait, out double leftMillimeters, out double topMillimeters, out double rightMillimeters, out double bottomMillimeters)
Return: bool
Modifiers: public, static
Summary: Get limit margins for a given form (page size) and a given printer. This is the physical limit area that a printer can print on a given page

Method: Rhino.Runtime.HostUtils.GetPrinterFormNames(string printerName)
Return: string
Modifiers: public, static
Summary: Get list of form names available for a given printer
Parameter: printerName (string)
Parameter Summary: name or printer to query

Method: Rhino.Runtime.HostUtils.GetPrinterFormSize(string printerName, string formName, out double widthMillimeters, out double heightMillimeters)
Return: bool
Modifiers: public, static
Summary: Get the size of a sheet for a given form name / printer combination

Method: Rhino.Runtime.HostUtils.GetPrinterNames()
Return: string
Modifiers: public, static
Summary: Get list of printers available on this system

Method: Rhino.Runtime.HostUtils.GetRhinoDotNetAssembly()
Return: System.Reflection.Assembly
Modifiers: public, static
Summary: Only works on Windows. Returns None on Mac.

Method: Rhino.Runtime.HostUtils.GetSystemProcessorCount()
Return: int
Modifiers: public, static
Summary: Get the processor count on this hardware. It supports querying on CPUs with more than 64 processors (Windows).

Method: Rhino.Runtime.HostUtils.GetSystemReferenceAssemblies()
Return: IEnumerable<string>
Modifiers: public, static
Summary: Gets the system reference assemblies to use when compiling code dynamically with Roslyn. Includes RhinoCommon, Rhino.UI, and Eto.

Method: Rhino.Runtime.HostUtils.InitializeRhinoCommon_RDK()
Return: void
Modifiers: public, static
Summary: Makes sure all static RhinoCommon RDK components are set up correctly. This happens automatically when the RDK is loaded, so you probably won't have to call this method.

Method: Rhino.Runtime.HostUtils.InitializeRhinoCommon()
Return: void
Modifiers: public, static
Summary: Makes sure all static RhinoCommon components is set up correctly. This happens automatically when a plug-in is loaded, so you probably won't have to call this method.

Method: Rhino.Runtime.HostUtils.InitializeZooClient()
Return: void
Modifiers: public, static
Summary: Initializes the ZooClient and Rhino license manager, this should get called automatically when RhinoCommon is loaded so you probably won't have to call this method.

Method: Rhino.Runtime.HostUtils.InPlaceConstCast(Rhino.Geometry.GeometryBase geometry, bool makeNonConst)
Return: void
Modifiers: public, static
Summary: DO NOT USE UNLESS YOU ARE CERTAIN ABOUT THE IMPLICATIONS.
This is an expert user function which should not be needed in most     cases. This function is similar to a const_cast in C++ to allow an object     to be made temporarily modifiable without causing RhinoCommon to convert     the class from const to non-const by creating a duplicate.
You must call this function with a True parameter, make your     modifications, and then restore the const flag by calling this function     again with a False parameter. If you have any questions, please     contact McNeel developer support before using! | Since: 5.0 | Parameter: geometry (Rhino.Geometry.GeometryBase) | Parameter Summary: Some geometry. | Parameter: makeNonConst (bool) | Parameter Summary: A boolean value.

Method: Rhino.Runtime.HostUtils.IsManagedDll(string path)
Return: bool
Modifiers: public, static
Summary: Inspects a dll to see if it is compiled as native code or as a .NET assembly

Method: Rhino.Runtime.HostUtils.IsRhinoBackupFileExtension(string fileExtension)
Return: bool
Modifiers: public, static
Summary: Check to see if the file extension is a valid Rhino file extension.

Method: Rhino.Runtime.HostUtils.IsRhinoFileExtension(string fileExtension)
Return: bool
Modifiers: public, static
Summary: Check to see if the file extension is a valid Rhino file extension.

Method: Rhino.Runtime.HostUtils.LoadAssemblyFrom(string path)
Return: System.Reflection.Assembly
Modifiers: public, static
Summary: Calls Assembly.LoadFrom in .NET 4.8. May call a different routine under .NET 7

Method: Rhino.Runtime.HostUtils.LogDebugEvent(string message)
Return: void
Modifiers: public, static
Summary: Logs a debug event. The function will log the filename and line number from where this function is called, in addition to the input message.
Parameter: message (string)
Parameter Summary: The event message.

Method: Rhino.Runtime.HostUtils.RecordInitInstanceTime(string description)
Return: void
Modifiers: public, static
Summary: Used to help record times at startup with the -stopwatch flag to help determine bottlenecks in start up speed

Method: Rhino.Runtime.HostUtils.RegisterComputeEndpoint(string endpointPath, System.Type t)
Return: void
Modifiers: public, static
Summary: Register a class that can participate as a compute endpoint

Method: Rhino.Runtime.HostUtils.RegisterDynamicCommand(PlugIn plugin, Commands.Command cmd)
Return: bool
Modifiers: public, static
Summary: Adds a new dynamic command to Rhino.
Parameter: plugin (PlugIn)
Parameter Summary: Plugin that owns the command.
Parameter: cmd (Commands.Command)
Parameter Summary: Command to add.

Method: Rhino.Runtime.HostUtils.RegisterNamedCallback(string name, EventHandler<NamedParametersEventArgs> callback)
Return: void
Modifiers: public, static
Summary: Register a named callback

Method: Rhino.Runtime.HostUtils.RemoveNamedCallback(string name)
Return: void
Modifiers: public, static
Summary: Remove a named callback from the dictionary of callbacks

Method: Rhino.Runtime.HostUtils.RhinoCommonExceptionHandler(string title, object sender, System.Exception ex)
Return: void
Modifiers: public, static
Summary: For internal use only!!! Unhanded exception handler, writes stack trace to RhinoDotNet.txt file
Parameter: title (string)
Parameter Summary: Exception title to write to text file
Parameter: sender (object)
Parameter Summary: 
Parameter: ex (System.Exception)
Parameter Summary:

Method: Rhino.Runtime.HostUtils.SendLogMessageToCloudCallbackProc(LogMessageType msg_type, System.IntPtr pwStringClass, System.IntPtr pwStringDesc, System.IntPtr pwStringMessage)
Return: void
Modifiers: public, static
Summary: Informs RhinoCommon of an message that has been handled but that the developer wants to screen.
Parameter: msg_type (LogMessageType)
Parameter Summary: The messag type
Parameter: pwStringClass (System.IntPtr)
Parameter Summary: The top level message type.
Parameter: pwStringDesc (System.IntPtr)
Parameter Summary: Finer grained description of the message.
Parameter: pwStringMessage (System.IntPtr)
Parameter Summary: The message.

Method: Rhino.Runtime.HostUtils.SetInShutDown()
Return: void
Modifiers: public, static
Summary: Informs the runtime that the application is shutting down.

Method: Rhino.Runtime.HostUtils.ShutDownRhinoCommon_RDK()
Return: void
Modifiers: public, static
Summary: Makes sure all static RhinoCommon RDK components are de-initialized so they aren't calling into space when the RDK is unloaded.

Method: Rhino.Runtime.HostUtils.UnhandledThreadException(object sender, System.Threading.ThreadExceptionEventArgs e)
Return: void
Modifiers: public, static
Summary: Exception handler for exceptions occurring on the UI thread

Class: Rhino.Runtime.Interop
Summary: Contains static methods to marshal objects between RhinoCommon and legacy Rhino_DotNet or C++.

Constructor: Rhino.Runtime.Interop.Interop()
Summary: Initializes a new instance of the Interop class

Method: Rhino.Runtime.Interop.CommandLineOptionFromNativePointer(System.IntPtr ptrCommandLineOption)
Return: Rhino.Input.Custom.CommandLineOption
Modifiers: public, static
Summary: Create a command line option for a native pointer. Do not hold onto this class as it does not control the lifetime of the underlying pointer

Method: Rhino.Runtime.Interop.CreateFromNativePointer(System.IntPtr pGeometry)
Return: Geometry.GeometryBase
Modifiers: public, static
Summary: Constructs a RhinoCommon Geometry class from a given ON_Geomety*. The ON_Geometry* must be declared on the heap and its lifetime becomes controlled by RhinoCommon.
Parameter: pGeometry (System.IntPtr)
Parameter Summary: ON_Geometry*

Method: Rhino.Runtime.Interop.FileReadOptionsConstPointer(FileIO.FileReadOptions options)
Return: System.IntPtr
Modifiers: public, static
Summary: Returns the underlying const CRhinoFileReadOptions* for a Rhino.FileIO.FileReadOptions object. You should only be interested in using this function if you are writing C++ code.
Parameter: options (FileIO.FileReadOptions)
Parameter Summary: A FileReadOptions object.

Method: Rhino.Runtime.Interop.FileWriteOptionsConstPointer(FileIO.FileWriteOptions options)
Return: System.IntPtr
Modifiers: public, static
Summary: Returns the underlying const CRhinoFileWriteOptions* for a Rhino.FileIO.FileWriteOptions object. You should only be interested in using this function if you are writing C++ code.
Parameter: options (FileIO.FileWriteOptions)
Parameter Summary: A FileWriteOptions object.

Method: Rhino.Runtime.Interop.FontFromPointer(System.IntPtr ptrManagedFont)
Return: DocObjects.Font
Modifiers: public, static
Summary: Create managed Font from native ON_Font*

Method: Rhino.Runtime.Interop.FromOnBrep(object source)
Return: Geometry.Brep
Modifiers: public, static
Summary: Copies a Rhino_DotNet brep to a RhinoCommon brep class.
Parameter: source (object)
Parameter Summary: RMA.OpenNURBS.IOnBrep or RMA.OpenNURBS.OnBrep.

Method: Rhino.Runtime.Interop.FromOnCurve(object source)
Return: Geometry.Curve
Modifiers: public, static
Summary: Copies a Rhino_DotNet curve to a RhinoCommon curve class.
Parameter: source (object)
Parameter Summary: RMA.OpenNURBS.IOnCurve or RMA.OpenNURBS.OnCurve.

Method: Rhino.Runtime.Interop.FromOnMesh(object source)
Return: Geometry.Mesh
Modifiers: public, static
Summary: Copies a Rhino_DotNet mesh to a RhinoCommon mesh class.
Parameter: source (object)
Parameter Summary: RMA.OpenNURBS.IOnMesh or RMA.OpenNURBS.OnMesh.

Method: Rhino.Runtime.Interop.FromOnSurface(object source)
Return: Geometry.Surface
Modifiers: public, static
Summary: Copies a Rhino_DotNet surface to a RhinoCommon Surface class.
Parameter: source (object)
Parameter Summary: Any of the following in the RMA.OpenNURBS namespace are acceptable. IOnSurface, OnSurface, IOnPlaneSurface, OnPlaneSurface, IOnClippingPlaneSurface, OnClippingPlaneSurface, IOnNurbsSurface, OnNurbsSurfac, IOnRevSurface, OnRevSurface, IOnSumSurface, OnSumSurface.

Method: Rhino.Runtime.Interop.NativeGeometryConstPointer(Geometry.GeometryBase geometry)
Return: System.IntPtr
Modifiers: public, static
Summary: Returns the underlying const ON_Geometry* for a RhinoCommon class. You should only be interested in using this function if you are writing C++ code.
Parameter: geometry (Geometry.GeometryBase)
Parameter Summary: A geometry object. This can be None and in such a case <b>IntPtr.Zero</b> is returned.

Method: Rhino.Runtime.Interop.NativeGeometryNonConstPointer(Geometry.GeometryBase geometry)
Return: System.IntPtr
Modifiers: public, static
Summary: Returns the underlying non-const ON_Geometry* for a RhinoCommon class. You should only be interested in using this function if you are writing C++ code.
Parameter: geometry (Geometry.GeometryBase)
Parameter Summary: A geometry object. This can be None and in such a case <b>IntPtr.Zero</b> is returned.

Method: Rhino.Runtime.Interop.NativeNonConstPointer(Display.DisplayPipeline pipeline)
Return: System.IntPtr
Modifiers: public, static
Summary: Get CRhinoDisplayPipeline* for a DisplayPipeline instance

Method: Rhino.Runtime.Interop.NativeNonConstPointer(Display.RhinoViewport viewport)
Return: System.IntPtr
Modifiers: public, static
Summary: Get CRhinoViewport* from a RhinoViewport instance

Method: Rhino.Runtime.Interop.NativeNonConstPointer(Display.ViewCaptureSettings settings)
Return: System.IntPtr
Modifiers: public, static
Summary: Get a CRhinoPrintInfo* for a given ViewCaptureSettings class

Method: Rhino.Runtime.Interop.NativeNonConstPointer(DocObjects.ViewportInfo viewport)
Return: System.IntPtr
Modifiers: public, static
Summary: Get ON_Viewport* from a ViewportInfo instance

Method: Rhino.Runtime.Interop.NativeNonConstPointer(Input.Custom.GetPoint getPoint)
Return: System.IntPtr
Modifiers: public, static
Summary: Get CRhinoGetPoint* from a GetPoint instance

Method: Rhino.Runtime.Interop.NativeRhinoDocPointer(RhinoDoc doc)
Return: System.IntPtr
Modifiers: public, static
Summary: Gets the C++ CRhinoDoc* for a given RhinoCommon RhinoDoc class.
Parameter: doc (RhinoDoc)
Parameter Summary: A document.

Method: Rhino.Runtime.Interop.NSFontFromFont(Rhino.DocObjects.Font font, double pointSize)
Return: System.IntPtr
Modifiers: public, static
Summary: Get native NSFont* from a Rhino Font. Only works on Mac
Parameter: font (Rhino.DocObjects.Font)
Parameter Summary: 
Parameter: pointSize (double)
Parameter Summary: Point size

Method: Rhino.Runtime.Interop.NSFontFromFont(Rhino.DocObjects.Font font)
Return: System.IntPtr
Modifiers: public, static
Summary: Get native NSFont* from a Rhino Font. Only works on Mac

Method: Rhino.Runtime.Interop.PlugInPointer(PlugIns.PlugIn plugin)
Return: System.IntPtr
Modifiers: public, static
Summary: Gets a C++ plug-in pointer for a given RhinoCommon plug-in.
This is a Rhino SDK function. | Since: 5.0 | Parameter: plugin (PlugIns.PlugIn) | Parameter Summary: A plug-in.

Method: Rhino.Runtime.Interop.RhinoObjectConstPointer(DocObjects.RhinoObject rhinoObject)
Return: System.IntPtr
Modifiers: public, static
Summary: Returns the underlying const CRhinoObject* for a RhinoCommon class. You should only be interested in using this function if you are writing C++ code.
Parameter: rhinoObject (DocObjects.RhinoObject)
Parameter Summary: A Rhino object.

Method: Rhino.Runtime.Interop.RhinoObjectFromPointer(System.IntPtr pRhinoObject)
Return: DocObjects.RhinoObject
Modifiers: public, static
Summary: Constructs a RhinoCommon Rhino object from an unmanaged C++ RhinoObject pointer.
Parameter: pRhinoObject (System.IntPtr)
Parameter Summary: The original pointer.

Method: Rhino.Runtime.Interop.ToIRhinoViewport(Display.RhinoViewport source)
Return: object
Modifiers: public, static
Summary: Convert a Rhino.Display.Viewport to an RMA.Rhino.IRhinoViewport.
Parameter: source (Display.RhinoViewport)
Parameter Summary: A RhinoCommon viewport.

Method: Rhino.Runtime.Interop.ToOnBrep(Geometry.Brep source)
Return: object
Modifiers: public, static
Summary: Constructs a Rhino_DotNet OnBrep that is a copy of a given brep.
Parameter: source (Geometry.Brep)
Parameter Summary: A source brep.

Method: Rhino.Runtime.Interop.ToOnCurve(Geometry.Curve source)
Return: object
Modifiers: public, static
Summary: Constructs a Rhino_DotNet OnCurve that is a copy of a given curve.
Parameter: source (Geometry.Curve)
Parameter Summary: A RhinoCommon source curve.

Method: Rhino.Runtime.Interop.ToOnMesh(Geometry.Mesh source)
Return: object
Modifiers: public, static
Summary: Constructs a Rhino_DotNet OnMesh that is a copy of a given mesh.
Parameter: source (Geometry.Mesh)
Parameter Summary: A source brep.

Method: Rhino.Runtime.Interop.ToOnSurface(Geometry.Surface source)
Return: object
Modifiers: public, static
Summary: Constructs a Rhino_DotNet OnSurface that is a copy of a given curve.
Parameter: source (Geometry.Surface)
Parameter Summary: A source brep.

Method: Rhino.Runtime.Interop.ToOnXform(Geometry.Transform source)
Return: object
Modifiers: public, static
Summary: Constructs a Rhino_DotNet OnXform from a given RhinoCommon Transform.
Parameter: source (Geometry.Transform)
Parameter Summary: A RhinoCommon source transform.

Method: Rhino.Runtime.Interop.TryCopyFromOnArc(object source, out Geometry.Arc destination)
Return: bool
Modifiers: public, static
Summary: Attempts to copy the contents of a RMA.OpenNURBS.OnArc to a Rhino.Geometry.Arc.
Parameter: source (object)
Parameter Summary: A source OnArc.
Parameter: destination (Geometry.Arc)
Parameter Summary: A destination arc.

Method: Rhino.Runtime.Interop.TryCopyToOnArc(Geometry.Arc source, object destination)
Return: bool
Modifiers: public, static
Summary: Attempts to copy the contents of a Rhino.Geometry.Arc to a RMA.OpenNURBS.OnArc.
Parameter: source (Geometry.Arc)
Parameter Summary: A source arc.
Parameter: destination (object)
Parameter Summary: A destination OnArc.

Method: Rhino.Runtime.Interop.ViewCaptureFromPointer(System.IntPtr ptrViewCapture)
Return: Display.ViewCaptureSettings
Modifiers: public, static
Summary: Create a ViewCaptureSettings class from a native const CRhinoPrintInfo* The pointer values are copied

Class: Rhino.Runtime.LicenseStateChangedEventArgs
Summary: Passed to LicenseStateChanged event on RhinoApp

Constructor: Rhino.Runtime.LicenseStateChangedEventArgs.LicenseStateChangedEventArgs(bool callingRhinoCommonAllowed)
Summary: LicenseStateChangedEventArgs constructor

Property: Rhino.Runtime.LicenseStateChangedEventArgs.CallingRhinoCommonAllowed
Return: bool
Modifiers: public
Summary: True if RhinoCommon calls will never raise Rhino.Runtime.NotLicensedException. False otherwise
Accessors: get set

Class: Rhino.Runtime.NamedParametersEventArgs
Summary: Dictionary style class used for named callbacks from C++ -> .NET

Constructor: Rhino.Runtime.NamedParametersEventArgs.NamedParametersEventArgs()
Summary: Construct a new named parameter even args. You should dispose this class when you are done with it

Method: Rhino.Runtime.NamedParametersEventArgs.Dispose()
Return: void
Modifiers: public
Summary: Dispose native resources

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, bool value)
Return: void
Modifiers: public
Summary: Set a bool value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Color value)
Return: void
Modifiers: public
Summary: Set a Color value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, double value)
Return: void
Modifiers: public
Summary: Set a double value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Geometry.GeometryBase value)
Return: void
Modifiers: public
Summary: Set geometry for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Geometry.MeshingParameters value)
Return: void
Modifiers: public
Summary: Set an MeshingParameters for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Geometry.Point3d value)
Return: void
Modifiers: public
Summary: Set a Point3d value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Geometry.Vector3d value)
Return: void
Modifiers: public
Summary: Set a Vector3d value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, IEnumerable<GeometryBase> values)
Return: void
Modifiers: public
Summary: Set a list of geometry for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, IEnumerable<Guid> guidList)
Return: void
Modifiers: public
Summary: Set a list of UUIDs as a value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, IEnumerable<ObjRef> values)
Return: void
Modifiers: public
Summary: Set a list of ObjRef instances as a value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, IEnumerable<string> strings)
Return: void
Modifiers: public
Summary: Set a list of strings as a value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, IEnumerable<uint> values)
Return: void
Modifiers: public
Summary: Set a list of uint as a value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, int value)
Return: void
Modifiers: public
Summary: Set an int value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Point value)
Return: void
Modifiers: public
Summary: Set a Point value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Rhino.Geometry.Arc value)
Return: void
Modifiers: public
Summary: Set an arc for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Rhino.Geometry.Line value)
Return: void
Modifiers: public
Summary: Set a line for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Rhino.Geometry.Plane plane)
Return: void
Modifiers: public
Summary: Set a plane for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, Rhino.Geometry.Point3d[] pts)
Return: void
Modifiers: public
Summary: Set a point array for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, string value)
Return: void
Modifiers: public
Summary: Set a string value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, System.Guid value)
Return: void
Modifiers: public
Summary: Set a Color value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.Set(string name, uint value)
Return: void
Modifiers: public
Summary: Set an unsigned int for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.SetWindowHandle(string name, System.IntPtr value)
Return: void
Modifiers: public
Summary: Set a HWND on Windows or NSView* on Mac

Method: Rhino.Runtime.NamedParametersEventArgs.SetWindowImageHandle(string name, System.IntPtr value)
Return: void
Modifiers: public
Summary: Set a HWND on Windows or NSView* on Mac

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetArc(string name, out Rhino.Geometry.Arc value)
Return: bool
Modifiers: public
Summary: Get a arc for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetBool(string name, out bool value)
Return: bool
Modifiers: public
Summary: Try to get a bool value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetColor(string name, out Color value)
Return: bool
Modifiers: public
Summary: Try to get a Color value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetDouble(string name, out double value)
Return: bool
Modifiers: public
Summary: Try to get a double value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetGeometry(string name, out Geometry.GeometryBase[] values)
Return: bool
Modifiers: public

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetGuid(string name, out System.Guid value)
Return: bool
Modifiers: public
Summary: Try to get a Color value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetGuids(string name, out System.Guid[] value)
Return: bool
Modifiers: public
Summary: Try to get a UUID array value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetInt(string name, out int value)
Return: bool
Modifiers: public
Summary: Try to get an int value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetLine(string name, out Rhino.Geometry.Line value)
Return: bool
Modifiers: public
Summary: Get a line for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetMeshParameters(string name, out Geometry.MeshingParameters value)
Return: bool
Modifiers: public
Summary: Get an MeshingParameters for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetObjRefs(string name, out ObjRef[] value)
Return: bool
Modifiers: public
Summary: Try to get an array of ObjRef instances for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetPlane(string name, out Rhino.Geometry.Plane plane)
Return: bool
Modifiers: public
Summary: Get a plane for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetPoint(string name, out Geometry.Point3d value)
Return: bool
Modifiers: public
Summary: Try to get a Point3d value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetPoint2i(string name, out Point value)
Return: bool
Modifiers: public
Summary: Try to get a Point value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetPoints(string name, out Rhino.Geometry.Point3d[] pts)
Return: bool
Modifiers: public
Summary: Gets a point array for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetRhinoObjects(string key, out DocObjects.RhinoObject[] values)
Return: bool
Modifiers: public
Summary: Get array of RhinoObject for the specified key

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetString(string name, out string value)
Return: bool
Modifiers: public
Summary: Try to get a string value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetStrings(string name, out string value)
Return: bool
Modifiers: public
Summary: Try to get a string array for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetUints(string name, out uint value)
Return: bool
Modifiers: public
Summary: Try to get a uint array value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetUnmangedPointer(string name, out System.IntPtr value)
Return: bool
Modifiers: public
Summary: Gets a HWND on Windows or NSVIew* on Mac

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetUnsignedInt(string name, out uint value)
Return: bool
Modifiers: public
Summary: Try to get an unsigned int for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetVector(string name, out Geometry.Vector3d value)
Return: bool
Modifiers: public
Summary: Try to get a Vector3d value for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetViewport(string name, out ViewportInfo viewport)
Return: bool
Modifiers: public
Summary: Try to get a viewport for a given key name

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetWindowHandle(string name, out System.IntPtr value)
Return: bool
Modifiers: public
Summary: Gets a HWND on Windows or NSVIew* on Mac

Method: Rhino.Runtime.NamedParametersEventArgs.TryGetWindowImageHandle(string name, out System.IntPtr value)
Return: bool
Modifiers: public
Summary: Gets a HWND on Windows or NSVIew* on Mac

Class: Rhino.Runtime.NotLicensedException
Summary: Exception thrown when calling functions in RhinoCommon and the application is executing without a license

Constructor: Rhino.Runtime.NotLicensedException.NotLicensedException()
Summary: Default constructor

Constructor: Rhino.Runtime.NotLicensedException.NotLicensedException(string message, Exception inner)
Summary: Create a new instance with a custom message and an inner exception

Constructor: Rhino.Runtime.NotLicensedException.NotLicensedException(string message)
Summary: Create a new instance with a custom message

Class: Rhino.Runtime.PythonCompiledCode
Summary: Represents scripting compiled code.

Constructor: Rhino.Runtime.PythonCompiledCode.PythonCompiledCode()
Summary: Initializes a new instance of the PythonCompiledCode class

Method: Rhino.Runtime.PythonCompiledCode.Execute(PythonScript scope)
Return: void
Modifiers: public, abstract
Summary: Executes the script in a specific scope.
Parameter: scope (PythonScript)
Parameter Summary: The scope where the script should be executed.

Class: Rhino.Runtime.PythonScript
Summary: Represents a Python script.

Constructor: Rhino.Runtime.PythonScript.PythonScript()
Summary: Initializes a new instance of the <b>PythonScript</b> class.

Property: Rhino.Runtime.PythonScript.SearchPaths
Return: string[]
Modifiers: public, static
Summary: Get/Set additional search paths used by the python interpreter
Accessors: get set

Property: Rhino.Runtime.PythonScript.ContextId
Return: int
Modifiers: public
Summary: Gets or sets a context unique identified.
Accessors: get set

Property: Rhino.Runtime.PythonScript.Output
Return: Action<string>
Modifiers: public
Summary: Gets or sets the Python script "print()" target.
By default string output goes to the Rhino.RhinoApp.Write function.     Set Output if you want to redirect the output from python to a different function     while this script executes. | Since: 5.0 | Accessors: get set

Property: Rhino.Runtime.PythonScript.ScriptContextCommand
Return: Command
Modifiers: public
Summary: Command associated with this script. Used for localiation
Accessors: get set

Property: Rhino.Runtime.PythonScript.ScriptContextDoc
Return: object
Modifiers: public
Summary: object set to variable held in scriptcontext.doc.
Accessors: get set

Method: Rhino.Runtime.PythonScript.AddRuntimeAssembly(System.Reflection.Assembly assembly)
Return: void
Modifiers: public, static
Summary: Add assembly to list of assemblies used by python

Method: Rhino.Runtime.PythonScript.Create()
Return: PythonScript
Modifiers: public, static
Summary: Constructs a new Python script context.

Method: Rhino.Runtime.PythonScript.RuntimeAssemblies()
Return: System.Reflection.Assembly[]
Modifiers: public, static
Summary: Get list of assemblies used by python for library browser and inclusion into the runtime

Method: Rhino.Runtime.PythonScript.Compile(string script)
Return: PythonCompiledCode
Modifiers: public, abstract
Summary: Compiles a class in a quick-to-execute proxy.
Parameter: script (string)
Parameter Summary: A string text.

Method: Rhino.Runtime.PythonScript.ContainsVariable(string name)
Return: bool
Modifiers: public, abstract
Summary: Determines if the main scripting context has a variable with a name.
Parameter: name (string)
Parameter Summary: The variable name.

Method: Rhino.Runtime.PythonScript.CreateTextEditorControl(string script, Action<string> helpcallback)
Return: object
Modifiers: public, abstract
Summary: Creates a control where the user is able to type Python code.
Parameter: script (string)
Parameter Summary: A starting script.
Parameter: helpcallback (Action<string>)
Parameter Summary: A method that is called when help is shown for a function, a class or a method.

Method: Rhino.Runtime.PythonScript.EvaluateExpression(string statements, string expression)
Return: object
Modifiers: public, abstract
Summary: Evaluates statements and an expression in the main scripting context.
Parameter: statements (string)
Parameter Summary: One or several statements.
Parameter: expression (string)
Parameter Summary: An expression.

Method: Rhino.Runtime.PythonScript.ExecuteFile(string path)
Return: bool
Modifiers: public, abstract
Summary: Executes a Python file. The file is executed in a new, __main__ scope.
Parameter: path (string)
Parameter Summary: The path to the file.

Method: Rhino.Runtime.PythonScript.ExecuteFileInScope(string path)
Return: bool
Modifiers: public, abstract
Summary: Executes a Python file in the calling script scope. All old variables are kept.
Parameter: path (string)
Parameter Summary: The path to the file.

Method: Rhino.Runtime.PythonScript.ExecuteScript(string script)
Return: bool
Modifiers: public, abstract
Summary: Executes a Python string.
Parameter: script (string)
Parameter Summary: A Python text.

Method: Rhino.Runtime.PythonScript.GetSearchPaths()
Return: string
Modifiers: protected, abstract
Summary: Protected helper function for static SearchPaths

Method: Rhino.Runtime.PythonScript.GetStackTraceFromException(System.Exception ex)
Return: string
Modifiers: public, abstract
Summary: Retrieves a meaningful representation of the call stack.
Parameter: ex (System.Exception)
Parameter Summary: An exception that was thrown by some of the methods in this class.

Method: Rhino.Runtime.PythonScript.GetVariable(string name)
Return: object
Modifiers: public, abstract
Summary: Gets the object associated with a variable name in the main scripting context.
Parameter: name (string)
Parameter Summary: A variable name.

Method: Rhino.Runtime.PythonScript.GetVariableNames()
Return: System.Collections.Generic.IEnumerable<string>
Modifiers: public, abstract
Summary: Retrieves all variable names in the script.

Method: Rhino.Runtime.PythonScript.RemoveVariable(string name)
Return: void
Modifiers: public, abstract
Summary: Removes a defined variable from the main scripting context.
Parameter: name (string)
Parameter Summary: The variable name.

Method: Rhino.Runtime.PythonScript.SetIntellisenseVariable(string name, object value)
Return: void
Modifiers: public, virtual
Summary: Sets a variable for runtime introspection.
Parameter: name (string)
Parameter Summary: A variable name.
Parameter: value (object)
Parameter Summary: A variable value.

Method: Rhino.Runtime.PythonScript.SetSearchPaths(string paths)
Return: void
Modifiers: protected, abstract
Summary: Protected helper function for static SearchPaths

Method: Rhino.Runtime.PythonScript.SetupScriptContext(object doc)
Return: void
Modifiers: public, virtual
Summary: Setups the script context. Use a RhinoDoc instance unless unsure.
Parameter: doc (object)
Parameter Summary: Document.

Method: Rhino.Runtime.PythonScript.SetVariable(string name, object value)
Return: void
Modifiers: public, abstract
Summary: Sets a variable with a name and an object. Object can be None (Nothing in Visual Basic).
Parameter: name (string)
Parameter Summary: A valid variable name in Python.
Parameter: value (object)
Parameter Summary: A valid value for that variable name.

Class: Rhino.Runtime.RdkNotLoadedException
Summary: Is thrown when the RDK is not loaded.

Constructor: Rhino.Runtime.RdkNotLoadedException.RdkNotLoadedException()
Summary: Initializes a new instance of the RDK not loaded exception with a standard message.

Class: Rhino.Runtime.RiskyAction
Summary: Defines risky actions that need to be reported in crash exceptions

Constructor: Rhino.Runtime.RiskyAction.RiskyAction(string description, string file, string member, int line)
Summary: Always create this in a using block

Method: Rhino.Runtime.RiskyAction.Dispose()
Return: void
Modifiers: public
Summary: IDisposable implementation

Class: Rhino.Runtime.Skin
Summary: Represents a customized environment that changes the appearance of Rhino.
Skin DLLs must contain a single class that derives from the Skin class.

Constructor: Rhino.Runtime.Skin.Skin()
Summary: Initializes a new instance of the <b>Skin</b> class.

Property: Rhino.Runtime.Skin.ActiveSkin
Return: Skin
Modifiers: public, static
Summary: Any time Rhino is running there is at most one skin being used (and possibly no skin).  If a RhinoCommon based Skin class is being used, use ActiveSkin to get at the instance of this Skin class. May return null if no Skin is being used or if the skin is not a RhinoCommon based skin.
Accessors: get

Property: Rhino.Runtime.Skin.ApplicationName
Return: string
Modifiers: protected, virtual
Summary: If you want to provide a custom name for your skin.
Accessors: get

Property: Rhino.Runtime.Skin.MainRhinoIcon
Return: Bitmap
Modifiers: protected, virtual
Summary: If you want to provide a custom icon for your skin.
Accessors: get

Property: Rhino.Runtime.Skin.Settings
Return: PersistentSettings
Modifiers: public
Summary: Gets access to the skin persistent settings.
Accessors: get

Method: Rhino.Runtime.Skin.HideSplash()
Return: void
Modifiers: protected, virtual
Summary: Is called when the splash screen should be hidden.

Method: Rhino.Runtime.Skin.OnBeginLoadAtStartPlugIns(int expectedCount)
Return: void
Modifiers: protected, virtual
Summary: Is called when the first plug-in that loads at start-up is going to be loaded.
Parameter: expectedCount (int)
Parameter Summary: The complete amount of plug-ins.

Method: Rhino.Runtime.Skin.OnBeginLoadPlugIn(string description)
Return: void
Modifiers: protected, virtual
Summary: Is called when a specific plug-in is going to be loaded.
Parameter: description (string)
Parameter Summary: The plug-in description.

Method: Rhino.Runtime.Skin.OnBuiltInCommandsRegistered()
Return: void
Modifiers: protected, virtual
Summary: Is called when built-in commands are registered.

Method: Rhino.Runtime.Skin.OnEndLoadAtStartPlugIns()
Return: void
Modifiers: protected, virtual
Summary: Is called after all of the load at start plug-ins have been loaded.

Method: Rhino.Runtime.Skin.OnEndLoadPlugIn()
Return: void
Modifiers: protected, virtual
Summary: Is called after each plug-in has been loaded.

Method: Rhino.Runtime.Skin.OnLicenseCheckCompleted()
Return: void
Modifiers: protected, virtual
Summary: Is called when the license check is completed.

Method: Rhino.Runtime.Skin.OnMainFrameWindowCreated()
Return: void
Modifiers: protected, virtual
Summary: Is called when the main frame window is created.

Method: Rhino.Runtime.Skin.ShowHelp()
Return: void
Modifiers: protected, virtual
Summary: Called when the "help" splash screen should be shown. Default implementation just calls ShowSplash()

Method: Rhino.Runtime.Skin.ShowSplash()
Return: void
Modifiers: protected, virtual
Summary: Is called when the splash screen should be shown.

Class: Rhino.Runtime.TextFields
Summary: This Class Processes Text Field Functions

Constructor: Rhino.Runtime.TextFields.TextFields()
Summary: Initializes a new instance of the TextFields class

Method: Rhino.Runtime.TextFields.Area(string id, string unitSystem)
Return: double
Modifiers: public, static
Summary: Returns the area value for a selected object id in a specified unit system

Method: Rhino.Runtime.TextFields.Area(string id)
Return: double
Modifiers: public, static
Summary: Returns the area value for a selected object id

Method: Rhino.Runtime.TextFields.BlockAttributeText(string key, string prompt, string defaultValue)
Return: string
Modifiers: public, static
Summary: User text associated with a block

Method: Rhino.Runtime.TextFields.BlockDescription(string definitionNameOrId)
Return: string
Modifiers: public, static
Summary: Returns a block definition description

Method: Rhino.Runtime.TextFields.BlockInstanceCount(string instanceDefinitionNameOrId)
Return: int
Modifiers: public, static
Summary: Returns the number of block instances found in the document with the specified block definition name or the instance reference id.

Method: Rhino.Runtime.TextFields.BlockInstanceName(string blockId)
Return: string
Modifiers: public, static
Summary: Returns the block definition name of a block instance Use BlockName Instead

Method: Rhino.Runtime.TextFields.BlockName(string blockId)
Return: string
Modifiers: public, static
Summary: Returns the block definition name of a block instance

Method: Rhino.Runtime.TextFields.CurveLength(string id, string unitSystem)
Return: double
Modifiers: public, static
Summary: Get length of a curve given a string id in a specified unit system. UnitSystem enumeration as string

Method: Rhino.Runtime.TextFields.CurveLength(string id)
Return: double
Modifiers: public, static
Summary: Get length of a curve given a string id

Method: Rhino.Runtime.TextFields.Date()
Return: string
Modifiers: public, static
Summary: Current date

Method: Rhino.Runtime.TextFields.Date(string dateFormat, string languageId)
Return: string
Modifiers: public, static
Summary: Current Date in a specific format and language

Method: Rhino.Runtime.TextFields.Date(string dateFormat)
Return: string
Modifiers: public, static
Summary: Current date in a specified format

Method: Rhino.Runtime.TextFields.DateModified()
Return: string
Modifiers: public, static
Summary: Date the document was last edited

Method: Rhino.Runtime.TextFields.DateModified(string dateFormat, string languageId)
Return: string
Modifiers: public, static
Summary: Date the document was last edited in a specific format and language in local time

Method: Rhino.Runtime.TextFields.DateModified(string dateFormat)
Return: string
Modifiers: public, static
Summary: Date the document was last edited in a specified format

Method: Rhino.Runtime.TextFields.DetailScale(string detailId, string scaleFormat)
Return: string
Modifiers: public, static
Summary: Returns a detail views scale

Method: Rhino.Runtime.TextFields.DocumentText(string key)
Return: string
Modifiers: public, static
Summary: Return document user string for a given key

Method: Rhino.Runtime.TextFields.FileName()
Return: string
Modifiers: public, static
Summary: Return full path to the document

Method: Rhino.Runtime.TextFields.FileName(string options)
Return: string
Modifiers: public, static
Summary: Return path to the document

Method: Rhino.Runtime.TextFields.GetInstanceAttributeFields(InstanceDefinition idef)
Return: InstanceAttributeField[]
Modifiers: public, static

Method: Rhino.Runtime.TextFields.GetInstanceAttributeFields(string str)
Return: InstanceAttributeField[]
Modifiers: public, static
Summary: Gets an array of block attribute definitions associated with a TextObject.
Parameter: str (string)
Parameter Summary: TextObject to check for block attribute definitions

Method: Rhino.Runtime.TextFields.GetInstanceAttributeFields(TextObject text)
Return: InstanceAttributeField[]
Modifiers: public, static
Summary: Gets an array of block attribute definitions associated with a TextObject.
Parameter: text (TextObject)
Parameter Summary: TextObject to check for block attribute definitions

Method: Rhino.Runtime.TextFields.LayerName(string layerId)
Return: string
Modifiers: public, static
Summary: Returns the name of a layer based on the layers guid

Method: Rhino.Runtime.TextFields.LayoutUserText(string layoutId, string key)
Return: string
Modifiers: public, static
Summary: Returns user text value from a layout id Key

Method: Rhino.Runtime.TextFields.LayoutUserText(string key)
Return: string
Modifiers: public, static
Summary: Returns a value from the active layouts user text strings for the specified key.

Method: Rhino.Runtime.TextFields.ModelUnits()
Return: string
Modifiers: public, static

Method: Rhino.Runtime.TextFields.Notes()
Return: string
Modifiers: public, static
Summary: Notes for a RhinoDoc

Method: Rhino.Runtime.TextFields.NumPages()
Return: int
Modifiers: public, static
Summary: Number of layout pages in a document

Method: Rhino.Runtime.TextFields.ObjectLayer(string id)
Return: string
Modifiers: public, static
Summary: Return an object's layer name

Method: Rhino.Runtime.TextFields.ObjectName()
Return: string
Modifiers: public, static
Summary: Returns an attached Text objects attribute name.

Method: Rhino.Runtime.TextFields.ObjectName(string id)
Return: string
Modifiers: public, static
Summary: Return an object's name

Method: Rhino.Runtime.TextFields.ObjectPageName(string id)
Return: string
Modifiers: public, static
Summary: Returns the layout page name the object resides on

Method: Rhino.Runtime.TextFields.ObjectPageNumber(string id)
Return: int
Modifiers: public, static
Summary: Returns the layout page number the object resides on

Method: Rhino.Runtime.TextFields.PageHeight()
Return: double
Modifiers: public, static
Summary: Return the current layout page height in the layout units

Method: Rhino.Runtime.TextFields.PageName()
Return: string
Modifiers: public, static
Summary: Return the current layout page name

Method: Rhino.Runtime.TextFields.PageName(string id)
Return: string
Modifiers: public, static
Summary: Return the page name for the specified View ID

Method: Rhino.Runtime.TextFields.PageNumber()
Return: int
Modifiers: public, static
Summary: Returns the current layouts page number

Method: Rhino.Runtime.TextFields.PageWidth()
Return: double
Modifiers: public, static
Summary: Return the current layout page width in the layout units

Method: Rhino.Runtime.TextFields.PaperName()
Return: string
Modifiers: public, static
Summary: Returns the layouts selected paper name example Letter / A4 / A6

Method: Rhino.Runtime.TextFields.PointCoordinate(string pointId, string axis)
Return: string
Modifiers: public, static
Summary: returns the location of a 3d point

Method: Rhino.Runtime.TextFields.TryFormat(string text, RhinoDoc doc, out string result)
Return: bool
Modifiers: public, static
Summary: Formats the contents of a text string with field expressions and returns the result
Parameter: text (string)
Parameter Summary: The text formula to format
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to evaluate
Parameter: result (string)
Parameter Summary: The result of the formatted expression. Otherwise, if the text is null or the evaluation process fails, the result will be empty.

Method: Rhino.Runtime.TextFields.TryParse(string text, RhinoDoc doc, out List<string> result)
Return: bool
Modifiers: public, static
Summary: Evaluates the contents of a text string with field expressions and returns the result
Parameter: text (string)
Parameter Summary: The text formula to parse and evaluate
Parameter: doc (RhinoDoc)
Parameter Summary: The Rhino document to evaluate
Parameter: result (List<string>)
Parameter Summary: The result of the evaluated expression. Otherwise, if the text is null or the evaluation process fails, the result will be empty.

Method: Rhino.Runtime.TextFields.UserText(string id, string key, string prompt, string defaultValue)
Return: string
Modifiers: public, static
Summary: User text associated with an object, block or layout

Method: Rhino.Runtime.TextFields.UserText(string id, string key, string prompt)
Return: string
Modifiers: public, static
Summary: User text associated with an object, block or layout

Method: Rhino.Runtime.TextFields.UserText(string id, string key)
Return: string
Modifiers: public, static
Summary: User text associated with an object, block or layout

Method: Rhino.Runtime.TextFields.Volume(string id, string unitSystem, string allowOpenObjects)
Return: double
Modifiers: public, static
Summary: Returns a volume from an object Id. If allowOpenObjects = False objects which are open will return 0.0 as a volume.

Method: Rhino.Runtime.TextFields.Volume(string id, string opt)
Return: double
Modifiers: public, static
Summary: Returns a volume; if the opt param is a bool "true/false" or "1/0" then open objects are inspected or ignored. if the opt param is a unit system as a string "millimeter" then the volume will be returned if the object is closed and in the specified unit system. Open objects return 0

Method: Rhino.Runtime.TextFields.Volume(string id)
Return: double
Modifiers: public, static
Summary: Returns the volume for the selected object id open objects return 0 volume

Class: Rhino.Runtime.TextFields.InstanceAttributeField

Constructor: Rhino.Runtime.TextFields.InstanceAttributeField.TextFields.InstanceAttributeField(string key, string prompt, string defaultValue)
Summary: Block attribute definition.

Property: Rhino.Runtime.TextFields.InstanceAttributeField.DefaultValue
Return: string
Modifiers: public
Summary: Default value used when inserting a block
Accessors: get

Property: Rhino.Runtime.TextFields.InstanceAttributeField.Key
Return: string
Modifiers: public
Summary: Attribute key
Accessors: get

Property: Rhino.Runtime.TextFields.InstanceAttributeField.Prompt
Return: string
Modifiers: public
Summary: Prompt displayed by the UI when inserting a block
Accessors: get

Class: Rhino.Runtime.ViewCaptureWriter
Summary: Callback system used by SVG and PDF exporter to generate documents. Not intended for general SDK usage

Constructor: Rhino.Runtime.ViewCaptureWriter.ViewCaptureWriter(double dpi, Size pageSize)

Property: Rhino.Runtime.ViewCaptureWriter.Dpi
Return: double
Modifiers: protected
Accessors: get

Property: Rhino.Runtime.ViewCaptureWriter.PageSize
Return: Size
Modifiers: protected
Accessors: get

Method: Rhino.Runtime.ViewCaptureWriter.Draw(System.IntPtr constPtrPrintInfo, RhinoDoc doc)
Return: void
Modifiers: public

Method: Rhino.Runtime.ViewCaptureWriter.DrawBitmap(Bitmap bitmap, double m11, double m12, double m21, double m22, double dx, double dy)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.DrawCircle(PointF center, float diameter, Color fillColor, Pen stroke)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.DrawGradientHatch(Display.DisplayPipeline pipeline, Hatch hatch, Rhino.DocObjects.HatchPattern pattern, Color[] gradientColors, float gradientStops, Point3d gradientPoint1, Point3d gradientPoint2, bool linearGradient, Color boundaryColor, double pointScale, double effectiveHatchScale)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.DrawPath(PathPoint[] points, Pen pen, bool linearGradient, Display.ColorStop[] stops, Point2d[] gradientPoints, double pointScale)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.DrawRectangle(RectangleF rect, Color fillColor, float strokeWidth, Color strokeColor, float cornerRadius)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.DrawScreenText(string text, Color textColor, double x, double y, float angle, int horizontalAlignment, float heightPoints, DocObjects.Font font)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.FillPolygon(PointF[] points, Color fillColor)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.Flush()
Return: void
Modifiers: protected

Method: Rhino.Runtime.ViewCaptureWriter.PopClipPath()
Return: void
Modifiers: protected

Method: Rhino.Runtime.ViewCaptureWriter.PushClipPath(PathPoint[] points)
Return: void
Modifiers: protected

Method: Rhino.Runtime.ViewCaptureWriter.PushClipPath(RectangleF rect)
Return: void
Modifiers: protected

Method: Rhino.Runtime.ViewCaptureWriter.SetClipPath(PathPoint[] points)
Return: void
Modifiers: protected, abstract

Method: Rhino.Runtime.ViewCaptureWriter.SupportsArc()
Return: bool
Modifiers: protected, virtual

Class: Rhino.Runtime.ViewCaptureWriter.Pen

Constructor: Rhino.Runtime.ViewCaptureWriter.Pen.ViewCaptureWriter.Pen()
Summary: Initializes a new instance of the ViewCaptureWriter.Pen class

Property: Rhino.Runtime.ViewCaptureWriter.Pen.Cap
Return: LineCapStyle
Modifiers: public
Accessors: get set

Property: Rhino.Runtime.ViewCaptureWriter.Pen.Color
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.Runtime.ViewCaptureWriter.Pen.Join
Return: LineJoinStyle
Modifiers: public
Accessors: get set

Property: Rhino.Runtime.ViewCaptureWriter.Pen.Pattern
Return: float[]
Modifiers: public
Accessors: get set

Property: Rhino.Runtime.ViewCaptureWriter.Pen.Width
Return: float
Modifiers: public
Accessors: get set

Class: Rhino.Runtime.ZooClientParameters
Summary: ZooClientParameters is a read-only set of parameters that control the flow of licensing inside ZooClient. Because this class flows through a number of other classes, functions, and UI, it is read-only so that inadvertent changes are not made to the data as it propagates from the caller.

Constructor: Rhino.Runtime.ZooClientParameters.ZooClientParameters(Guid productGuid, Guid licenseGuid, string productTitle, int productBuildType, LicenseCapabilities capabilities, string licenseEntryTextMask, string productPath, object parentWindow, LicenseTypes selectedLicenseType, ValidateProductKeyDelegate validateProductKey, OnLeaseChangedDelegate onLeaseChangedDelegate, VerifyLicenseKeyDelegate verifyLicenseKeyDelegate, VerifyPreviousVersionLicenseDelegate verifyPreviousVersionLicenseKeyDelegate)
Summary: ZooClientParameters Constructor

Property: Rhino.Runtime.ZooClientParameters.Capabilities
Return: LicenseCapabilities
Modifiers: public
Summary: LicenseCapabilities flags that set options for how licenses can be obtained for this product
Accessors: get set

Property: Rhino.Runtime.ZooClientParameters.LicenseEntryTextMask
Return: string
Modifiers: public
Summary: Text mask in the form @"RH4A-AAAA-AAAA-AAAA-AAAA-AAAA" that informs the user what numbers they are looking for
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.LicenseGuid
Return: Guid
Modifiers: public
Summary: Guid used by ZooClient to identify the license saved by ZooClient. This differs from ProductGuid because different versions of a plug-in with the same Plug-in ID may need different licenses.
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.OnLeaseChanged
Return: OnLeaseChangedDelegate
Modifiers: public
Summary: Delegate called by ZooClient when a cloud zoo lease is changed
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.ParentWindow
Return: object
Modifiers: public
Summary: Parent window assigned to any licensing dialogs that appear. If null, the Rhino main window is used.
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.ProductBuildType
Return: int
Modifiers: public
Summary: Product build type. Must be one of LicenseBuildType values.
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.ProductGuid
Return: Guid
Modifiers: public
Summary: Guid used by ZooClient to identify the plug-in requesting a license from ZooClient. This Guid may be used by different versions of the plug-in. If different licenses are used by different versions of the plug-in, the plug-in must also specify a LicenseGuid.
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.ProductPath
Return: string
Modifiers: public
Summary: Path to the application calling ZooClient
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.ProductTitle
Return: string
Modifiers: public
Summary: Title of the product, "Rhinoceros 6" for example.
Accessors: get

Property: Rhino.Runtime.ZooClientParameters.SelectedLicenseType
Return: LicenseTypes
Modifiers: public
Summary: License type selected by default when user is prompted to enter a license key
Accessors: get set

Method: Rhino.Runtime.ZooClientParameters.VerifyLicenseKey(string licenseKey, string validationCode, System.DateTime validationCodeInstallDate, bool gracePeriodExpired, out LicenseData licenseData)
Return: ValidateResult
Modifiers: public
Summary: Called by GetLicense to ensure that the license key entered by the user is legitimate and can be used.
Parameter: licenseKey (string)
Parameter Summary: License key string entered by user
Parameter: validationCode (string)
Parameter Summary: Validation code entered by user (only if a previous call to VerifyLicenseKey set LicenseData.RequiresOnlineValidation to true).
Parameter: validationCodeInstallDate (System.DateTime)
Parameter Summary: Date that validation code was entered by user (only if a previous call to VerifyLicenseKey set LicenseData.RequiresOnlineValidation to true).
Parameter: gracePeriodExpired (bool)
Parameter Summary: Date by which license validation must complete successfully.
Parameter: licenseData (LicenseData)
Parameter Summary: Output parameter where return data about the license is set.

Method: Rhino.Runtime.ZooClientParameters.VerifyPreviousVersionLicense(string license, string previousVersionLicense, out string errorMessage)
Return: bool
Modifiers: public
Summary: When a caller calls GetLicense, ZooClient may call VerifyPreviousVersionLicense to ensure previousVersionLicense is legitimate and can be used to upgrade license.
Parameter: license (string)
Parameter Summary: License key for current product. This was returned by a previous call to VerifyLicenseKey or ValidateProductKey.
Parameter: previousVersionLicense (string)
Parameter Summary: License key entered by user to show upgrade eligibility for license.
Parameter: errorMessage (string)
Parameter Summary: Error message to be displayed to user if something isn't correct.

# Namespace: Rhino.Runtime.InProcess

Class: Rhino.Runtime.InProcess.RhinoCore
Summary: Represents an instance of RhinoCore.DLL.

Constructor: Rhino.Runtime.InProcess.RhinoCore.RhinoCore()
Summary: Initializes a new instance of the <b>RhinoCore</b> class.

Constructor: Rhino.Runtime.InProcess.RhinoCore.RhinoCore(string[] args, WindowStyle windowStyle, IntPtr hostWnd)
Summary: Initializes a new instance of the <b>RhinoCore</b> class.

Constructor: Rhino.Runtime.InProcess.RhinoCore.RhinoCore(string[] args, WindowStyle windowStyle)
Summary: Initializes a new instance of the <b>RhinoCore</b> class.

Constructor: Rhino.Runtime.InProcess.RhinoCore.RhinoCore(string[] args)
Summary: Initializes a new instance of the <b>RhinoCore</b> class.

Method: Rhino.Runtime.InProcess.RhinoCore.Dispose()
Return: void
Modifiers: public
Summary: IDisposable implementation

Method: Rhino.Runtime.InProcess.RhinoCore.DoEvents()
Return: bool
Modifiers: public
Summary: If a Rhino owned window is active processes all Windows messages currently in the message queue.

Method: Rhino.Runtime.InProcess.RhinoCore.DoIdle()
Return: bool
Modifiers: public
Summary: Processes all Rhino Idle tasks.

Method: Rhino.Runtime.InProcess.RhinoCore.InvokeInHostContext(Func<T> func)
Return: T
Modifiers: public
Summary: Invokes function in Host context

Method: Rhino.Runtime.InProcess.RhinoCore.InvokeInHostContext(System.Action action)
Return: void
Modifiers: public
Summary: Invokes action in Host context

Method: Rhino.Runtime.InProcess.RhinoCore.RaiseIdle()
Return: void
Modifiers: public
Summary: Raises the Idle event.

Method: Rhino.Runtime.InProcess.RhinoCore.Run()
Return: int
Modifiers: public
Summary: Runs RhinoApp Message loop

# Namespace: Rhino.Runtime.InteropWrappers

Class: Rhino.Runtime.InteropWrappers.ClassArrayObjRef
Summary: Represents a wrapper to an unmanaged "array" (list) of CRhinoObjRef instances.
Wrapper for a C++ ON_ClassArray of CRhinoObjRef

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ClassArrayObjRef()
Summary: Initializes a new <b>ClassArrayObjRef</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ClassArrayObjRef(IEnumerable<ObjRef> objrefs)
Summary: Initializes a new instances from a set of ObjRefs

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ClassArrayObjRef(IntPtr ptr, bool deleteOnDispose)
Summary: Construct from a pointer

Property: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Count
Return: int
Modifiers: public
Summary: Gets the number of CRhinoObjRef instances in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Add(Rhino.DocObjects.ObjRef objref)
Return: void
Modifiers: public
Summary: Adds an ObjRef to the list.
Parameter: objref (Rhino.DocObjects.ObjRef)
Parameter Summary: An ObjRef to add.

Method: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ToNonConstArray()
Return: Rhino.DocObjects.ObjRef[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef
Summary: Represents a wrapper to an unmanaged "array" (list) of ON_ObjRef instances.
Wrapper for a C++ ON_ClassArray of ON_ObjRef

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ClassArrayOnObjRef()
Summary: Initializes a new <b>ClassArrayOnObjRef</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ClassArrayOnObjRef(IEnumerable<ObjRef> objrefs)
Summary: Initializes a new instances from a set of ObjRefs

Property: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Count
Return: int
Modifiers: public
Summary: Gets the number of ObjRef instances in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Add(DocObjects.ObjRef objref)
Return: void
Modifiers: public
Summary: Adds an ObjRef to the list.
Parameter: objref (DocObjects.ObjRef)
Parameter Summary: An ObjRef to add.

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ToNonConstArray()
Return: DocObjects.ObjRef[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Method: Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ToNonConstArray(RhinoDoc doc)
Return: DocObjects.ObjRef[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.
Parameter: doc (RhinoDoc)
Parameter Summary: Document containing the array of objects

Class: Rhino.Runtime.InteropWrappers.ClassArrayString
Summary: Wrapper for a C++ ON_ClassArray<ON_wString> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.ClassArrayString.ClassArrayString()
Summary: Initializes a new <b>ClassArrayString</b> instance.

Property: Rhino.Runtime.InteropWrappers.ClassArrayString.Count
Return: int
Modifiers: public
Summary: Gets the number of strings in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.Add(string s)
Return: void
Modifiers: public
Summary: Adds a string to the list.
Parameter: s (string)
Parameter Summary: A string to add.

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.ClassArrayString.ToArray()
Return: string
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArray2dex
Summary: Wrapper for ON_SimpleArray<ON_2dex>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArray2dex.SimpleArray2dex()
Summary: Initializes a new <b>SimpleArray2dex</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArray2dex.SimpleArray2dex(IEnumerable<IndexPair> values)
Summary: Initializes a new <b>SimpleArray2dex</b> class

Property: Rhino.Runtime.InteropWrappers.SimpleArray2dex.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArray2dex.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArray2dex.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArray2dex.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArray2dex.ToArray()
Return: IndexPair[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d
Summary: Wrapper for ON_SimpleArray<ON_PolyLine*>, ON_SimpleArray<ON_3dPointArray*> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.SimpleArrayArrayPoint3d()
Summary: Initializes a new empty <b>SimpleArrayArrayPoint3d</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Count
Return: int
Modifiers: public
Summary: Gets the amount of polylines in this array.
Accessors: get

Property: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.this[int index]
Return: Point3d
Modifiers: public
Summary: Gets a point in a polyline.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PointCountAt(int index)
Return: int
Modifiers: public
Summary: Gets the amount of points in a polyline.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayArrayPoint3d.PolylineAt(int index)
Return: Polyline
Modifiers: public
Summary: Gets a polyline at an index.
Parameter: index (int)
Parameter Summary: The index.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader
Summary: Wrapper for ON_SimpleArray<ON_BinaryArchive>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.SimpleArrayBinaryArchiveReader()
Summary: Initializes a new <b>SimpleArrayBinaryArchiveReader</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.SimpleArrayBinaryArchiveReader(IntPtr p)
Summary: Initializes a new <b>SimpleArrayBinaryArchiveReader</b> class.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Add(BinaryArchiveReader reader)
Return: void
Modifiers: public
Summary: Adds a new <b>Interval</b> at the end of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.Get(int index)
Return: BinaryArchiveReader
Modifiers: public
Summary: Get the Guid at index

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBinaryArchiveReader.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer
Summary: Wrapper for a C++ ON_SimpleArray<ON_Brep*> or ON_SimpleArray<constant ON_Brep*> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.SimpleArrayBrepPointer()
Summary: Initializes a new <b>SimpleArrayBrepPointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of breps in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Add(Geometry.Brep brep, bool asConst)
Return: void
Modifiers: public
Summary: Adds a brep to the list.
Parameter: brep (Geometry.Brep)
Parameter Summary: A brep to add.
Parameter: asConst (bool)
Parameter Summary: Whether this brep should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ToNonConstArray()
Return: Geometry.Brep[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayByte
Summary: Wrapper for ON_SimpleArray<unsigned char>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayByte.SimpleArrayByte()
Summary: Initializes a new <b>SimpleArrayByte</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayByte.SimpleArrayByte(IEnumerable<byte> values)
Summary: Initializes a new <b>SimpleArrayByte</b> class

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayByte.SimpleArrayByte(int initialSize)
Summary: Initializes a new <b>SimpleArrayByte</b> class. Initial size of the array - all values are set to zero.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayByte.SimpleArrayByte(SimpleArrayByte other)
Summary: Initializes a new <b>SimpleArrayByte</b> with the contents of another SimpleArrayByte.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayByte.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.Array()
Return: System.IntPtr
Modifiers: public
Summary: Return the raw data.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.CopyTo(SimpleArrayByte other)
Return: void
Modifiers: public
Summary: Copies the contents of a <b>SimpleArrayByte</b> into another SimpleArrayByte.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayByte.ToArray()
Return: byte
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer
Summary: ON_SimpleArray of CRhinoClippingPlaneObject*

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.SimpleArrayClippingPlaneObjectPointer()
Summary: Initializes a new <b>SimpleArrayClippingPlaneObjectPointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of clipping planes in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Add(DocObjects.ClippingPlaneObject clippingplane, bool asConst)
Return: void
Modifiers: public
Summary: Adds a clipping plane to the list.
Parameter: clippingplane (DocObjects.ClippingPlaneObject)
Parameter Summary: A clipping plane to add.
Parameter: asConst (bool)
Parameter Summary: Whether this clipping plane should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.SimpleArrayClippingPlaneObjectPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer
Summary: Wrapper for a C++ ON_SimpleArray of ON_Curve* or constant ON_Curve*.  If you are not writing C++ code, then you can ignore this class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.SimpleArrayCurvePointer()
Summary: Initializes a new <b>SimpleArrayCurvePointer</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.SimpleArrayCurvePointer(IEnumerable<Curve> curves)
Summary: Initializes a new <b>SimpleArrayCurvePointer</b> instance, from a set of input curves.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ToNonConstArray()
Return: Curve[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayDouble
Summary: Wrapper for ON_SimpleArray<double>. If you are not writing C++ code, then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.SimpleArrayDouble()
Summary: Initializes a new <b>SimpleArrayDouble</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.SimpleArrayDouble(IEnumerable<double> items)
Summary: Initializes a new <b>SimpleArrayDouble</b> instance, with items.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ToArray()
Return: double
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer
Summary: Wrapper for a C++ ON_SimpleArray<ON_Extrusion*> or ON_SimpleArray<constant ON_Extrusion*> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.SimpleArrayExtrusionPointer()
Summary: Initializes a new <b>SimpleArrayExtrusionPointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of Extrusions in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Add(Geometry.Extrusion extrusion, bool asConst)
Return: void
Modifiers: public
Summary: Adds a extrusion to the list.
Parameter: extrusion (Geometry.Extrusion)
Parameter Summary: A extrusion to add.
Parameter: asConst (bool)
Parameter Summary: Whether this extrusion should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayExtrusionPointer.ToNonConstArray()
Return: Geometry.Extrusion[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayFloat
Summary: Wrapper for ON_SimpleArray<float>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.SimpleArrayFloat()
Summary: Initializes a new <b>SimpleArrayFloat</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.SimpleArrayFloat(IEnumerable<float> values)
Summary: Initializes a new <b>SimpleArrayFloat</b> class

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.SimpleArrayFloat(int initialSize)
Summary: Initializes a new <b>SimpleArrayFloat</b> class. Initial size of the array - all values are set to zero.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.SimpleArrayFloat(SimpleArrayFloat other)
Summary: Initializes a new <b>SimpleArrayFloat</b> with the contents of another SimpleArrayFloat.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Array()
Return: System.IntPtr
Modifiers: public
Summary: Return the raw data.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.CopyTo(SimpleArrayFloat other)
Return: void
Modifiers: public
Summary: Copies the contents of a <b>SimpleArrayFloat</b> into another SimpleArrayFloat.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayFloat.ToArray()
Return: float
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer
Summary: Wrapper for a C++ ON_SimpleArray<ON_Geometry*>* or ON_SimpleArray<constant ON_Geometry*>. If you are not writing C++ code, then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.SimpleArrayGeometryPointer()
Summary: Initializes a new <b>SimpleArrayGeometryPointer</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.SimpleArrayGeometryPointer(IEnumerable geometry)
Summary: Expects all of the items in the IEnumerable to be GeometryBase types

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.SimpleArrayGeometryPointer(IEnumerable<GeometryBase> geometry)
Summary: Create an ON_SimpleArray<ON_Geometry*> filled with items in geometry

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ToNonConstArray()
Return: GeometryBase[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayGuid
Summary: Wrapper for ON_SimpleArray<ON_UUID>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.SimpleArrayGuid()
Summary: Initializes a new <b>SimpleArrayGuid</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.SimpleArrayGuid(IEnumerable<Guid> values)
Summary: Initializes a new <b>SimpleArrayGuid</b> class

Property: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Property: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.this[int index]
Return: Guid
Modifiers: public
Summary: Get the Guid at index

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Append(System.Guid uuid)
Return: void
Modifiers: public
Summary: Appends a new <b>Guid</b> at the end of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ToArray()
Return: System.Guid[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer
Summary: Wrapper for ON_SimpleArray<ON_UUID>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.SimpleArrayGuidPointer()
Summary: Initializes a new <b>SimpleArrayGuidPointer</b> class.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Property: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.this[int index]
Return: Guid
Modifiers: public
Summary: Get the Guid at index

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayGuidPointer.ToArray()
Return: System.Guid[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer
Summary: Wrapper for a C++ ON_SimpleArray of ON_HatchLine*. If you are not writing C++ code, then you can ignore this class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.SimpleArrayHatchLinePointer()
Summary: Initializes a new <b>SimpleArrayHatchLinePointer</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.SimpleArrayHatchLinePointer(IEnumerable<HatchLine> hatchLines)
Summary: Initializes a new <b>SimpleArrayHatchLinePointer</b> instance, from a set of input hatch lines.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayHatchLinePointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayInt
Summary: Wrapper for ON_SimpleArray<int>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayInt.SimpleArrayInt()
Summary: Initializes a new <b>SimpleArrayInt</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayInt.SimpleArrayInt(IEnumerable<int> values)
Summary: Initializes a new <b>SimpleArrayInt</b> class

Property: Rhino.Runtime.InteropWrappers.SimpleArrayInt.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInt.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInt.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInt.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInt.ToArray()
Return: int
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayInterval
Summary: Wrapper for ON_SimpleArray<ON_Interval>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.SimpleArrayInterval()
Summary: Initializes a new <b>SimpleArrayInterval</b> class.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Count
Return: int
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Add(Interval interval)
Return: void
Modifiers: public
Summary: Adds a new <b>Interval</b> at the end of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ToArray()
Return: Interval[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr
Summary: Wrapper for ON_SimpleArray<IntPtr>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.SimpleArrayIntPtr()
Summary: Initializes a new <b>SimpleArrayIntPtr</b> class.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Count
Return: int
Modifiers: public
Summary: Gets the number of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayIntPtr.ToArray()
Return: System.IntPtr[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayLine
Summary: Wrapper for ON_SimpleArray<ON_Line>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayLine.SimpleArrayLine()
Summary: Initializes a new <b>SimpleArrayLine</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayLine.Count
Return: int
Modifiers: public
Summary: Gets the amount of lines in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLine.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLine.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLine.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLine.ToArray()
Return: Line[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer
Summary: Wrapper for a C++ ON_SimpleArray<ON_Linetype*> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.SimpleArrayLinetypePointer()
Summary: Initializes a new <b>SimpleArrayLinetypePointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of linetypes in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Dispose

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayLinetypePointer.ToNonConstArray()
Return: DocObjects.Linetype[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace
Summary: Wrapper for ON_SimpleArray<ON_MeshFace>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.SimpleArrayMeshFace()
Summary: Initializes a new <b>SimpleArrayMeshFace</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Count
Return: int
Modifiers: public
Summary: Gets the amount of mesh faces in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshFace.ToArray()
Return: MeshFace[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer
Summary: Represents a wrapper to an unmanaged array of mesh pointers.
Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not   writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.SimpleArrayMeshPointer()
Summary: Initializes a new <b>SimpleArrayMeshPointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of meshes in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Add(Geometry.Mesh mesh, bool asConst)
Return: void
Modifiers: public
Summary: Adds a mesh to the list.
Parameter: mesh (Geometry.Mesh)
Parameter Summary: A mesh to add.
Parameter: asConst (bool)
Parameter Summary: Whether this mesh should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ToNonConstArray()
Return: Geometry.Mesh[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayPlane
Summary: Wrapper for ON_SimpleArray<ON_Plane>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.SimpleArrayPlane()
Summary: Initializes a new <b>SimpleArrayLine</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Count
Return: int
Modifiers: public
Summary: Gets the amount of lines in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPlane.ToArray()
Return: Plane[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d
Summary: ON_SimpleArray<ON_2dPoint> class wrapper.  If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.SimpleArrayPoint2d()
Summary: Initializes a new empty <b>SimpleArrayPoint3d</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Count
Return: int
Modifiers: public
Summary: Gets the amount of points in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ToArray()
Return: Point2d[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d
Summary: ON_SimpleArray<ON_3dPoint>, ON_3dPointArray, ON_PolyLine all have the same size This class wraps all of these C++ versions.  If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.SimpleArrayPoint3d()
Summary: Initializes a new empty <b>SimpleArrayPoint3d</b> instance.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.SimpleArrayPoint3d(IEnumerable<Point3d> pts)
Summary: Initializes a new <b>SimpleArrayPoint3d</b> instance from a set of points

Property: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Count
Return: int
Modifiers: public
Summary: Gets the amount of points in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Add(Point3d pt)
Return: void
Modifiers: public
Summary: Adds a point to the list

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ToArray()
Return: Point3d[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer
Summary: Wrapper for a C++ ON_SimpleArray<ON_SubD*> or ON_SimpleArray<constant ON_SubD*> If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.SimpleArraySubDPointer()
Summary: Initializes a new <b>SimpleArraySubDPointer</b> instance.

Property: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Count
Return: int
Modifiers: public
Summary: Gets the amount of subds in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Add(Geometry.SubD subd, bool asConst)
Return: void
Modifiers: public
Summary: Adds a subd to the list.
Parameter: subd (Geometry.SubD)
Parameter Summary: A subd to add.
Parameter: asConst (bool)
Parameter Summary: Whether this subd should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySubDPointer.ToNonConstArray()
Return: Geometry.SubD[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer
Summary: Wrapper for a C++ ON_SimpleArray of ON_Surface* or constant ON_Surface*.  If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.SimpleArraySurfacePointer()
Summary: Initializes a new <b>SimpleArraySurfacePointer</b> instance.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: For derived class implementers.
This method is called with argument True when class user calls Dispose(), while with argument False when     the Garbage Collector invokes the finalizer, or Finalize() method.
You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.
Also, you must call the base virtual method within your overriding method. | Parameter: disposing (bool) | Parameter Summary: True if the call comes from the Dispose() method; False if it comes from the Garbage Collector finalizer.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ToNonConstArray()
Return: Surface[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart. Elements are made non-constant.

Class: Rhino.Runtime.InteropWrappers.SimpleArrayUint
Summary: Wrapper for ON_SimpleArray<unsigned int>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayUint.SimpleArrayUint()
Summary: Initializes a new <b>SimpleArrayInt</b> class.

Constructor: Rhino.Runtime.InteropWrappers.SimpleArrayUint.SimpleArrayUint(IEnumerable<uint> values)
Summary: Initializes a new <b>SimpleArrayInt</b> class.

Property: Rhino.Runtime.InteropWrappers.SimpleArrayUint.Count
Return: int
Modifiers: public
Summary: Gets the number of elements in this array.
Accessors: get

Property: Rhino.Runtime.InteropWrappers.SimpleArrayUint.UnsignedCount
Return: uint
Modifiers: public
Summary: Gets the number of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.SimpleArrayUint.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayUint.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayUint.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.SimpleArrayUint.ToArray()
Return: uint
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.StdVectorByte
Summary: Wrapper for std::vector<unsigned char>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorByte.StdVectorByte()
Summary: Initializes a new <b>SimpleArrayByte</b> class.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorByte.StdVectorByte(IEnumerable<byte> values)
Summary: Initializes a new <b>StdVectorByte</b> class

Constructor: Rhino.Runtime.InteropWrappers.StdVectorByte.StdVectorByte(StdVectorByte other)
Summary: Initializes a new <b>SimpleArrayByte</b> with the contents of another SimpleArrayByte.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorByte.StdVectorByte(ulong initialSize)
Summary: Initializes a new <b>SimpleArrayByte</b> class. Initial size of the array - all values are set to zero.

Property: Rhino.Runtime.InteropWrappers.StdVectorByte.Count
Return: ulong
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this vector.

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.CopyTo(StdVectorByte other)
Return: void
Modifiers: public
Summary: Copies the contents of a <b>StdVectorByte</b> into another StdVectorByte.

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.Memory()
Return: System.IntPtr
Modifiers: public
Summary: Return the raw data.

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this vector.

Method: Rhino.Runtime.InteropWrappers.StdVectorByte.ToArray()
Return: byte
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.StdVectorFloat
Summary: Wrapper for ON_SimpleArray<float>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorFloat.StdVectorFloat()
Summary: Initializes a new <b>StdVectorFloat</b> class.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorFloat.StdVectorFloat(IEnumerable<float> values)
Summary: Initializes a new <b>SimpleArrayFloat</b> class

Constructor: Rhino.Runtime.InteropWrappers.StdVectorFloat.StdVectorFloat(StdVectorFloat other)
Summary: Initializes a new <b>StdVectorFloat</b> with the contents of another SimpleArrayFloat.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorFloat.StdVectorFloat(ulong initialSize)
Summary: Initializes a new <b>StdVectorFloat</b> class. Initial size of the array - all values are set to zero.

Property: Rhino.Runtime.InteropWrappers.StdVectorFloat.Count
Return: ulong
Modifiers: public
Summary: Gets the amount of elements in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.CopyTo(StdVectorFloat other)
Return: void
Modifiers: public
Summary: Copies the contents of a <b>StdVectorFloat</b> into another SimpleArrayFloat.

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.Memory()
Return: System.IntPtr
Modifiers: public
Summary: Return the raw data.

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.StdVectorFloat.ToArray()
Return: float
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged array.

Class: Rhino.Runtime.InteropWrappers.StdVectorGuid
Summary: Wrapper for std::vector<ON_UUID>. If you are not writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorGuid.StdVectorGuid()
Summary: Initializes a new <b>StdVectorGuid</b> class.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorGuid.StdVectorGuid(IEnumerable<Guid> values)
Summary: Initializes a new <b>StdVectorGuid</b> class

Property: Rhino.Runtime.InteropWrappers.StdVectorGuid.Count
Return: ulong
Modifiers: public
Summary: Gets the amount of elements in this vector.
Accessors: get

Property: Rhino.Runtime.InteropWrappers.StdVectorGuid.this[ulong index]
Return: Guid
Modifiers: public
Summary: Get the Guid at index

Method: Rhino.Runtime.InteropWrappers.StdVectorGuid.Append(System.Guid uuid)
Return: void
Modifiers: public
Summary: Appends a new <b>Guid</b> at the end of this vector.

Method: Rhino.Runtime.InteropWrappers.StdVectorGuid.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this vector.

Method: Rhino.Runtime.InteropWrappers.StdVectorGuid.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.StdVectorGuid.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this vector.

Method: Rhino.Runtime.InteropWrappers.StdVectorGuid.ToArray()
Return: System.Guid[]
Modifiers: public
Summary: Returns the managed counterpart of the unmanaged vector.

Class: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh
Summary: Represents a wrapper to an unmanaged array of mesh pointers.
Wrapper for a C++ ON_SimpleArray of ON_Mesh* or constant ON_Mesh*. If you are not   writing C++ code then this class is not for you.

Constructor: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.StdVectorOfSharedPtrToMesh()
Summary: Initializes a new <b>StdVectorOfSharedPtrToMesh</b> instance.

Property: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Count
Return: int
Modifiers: public
Summary: Gets the amount of meshes in this array.
Accessors: get

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Add(Geometry.Mesh mesh, bool asConst)
Return: void
Modifiers: public
Summary: Adds a mesh to the list.
Parameter: mesh (Geometry.Mesh)
Parameter Summary: A mesh to add.
Parameter: asConst (bool)
Parameter Summary: Whether this mesh should be treated as non-modifiable.

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the constant (immutable) pointer of this array.

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (for modification) of this array.

Method: Rhino.Runtime.InteropWrappers.StdVectorOfSharedPtrToMesh.ToNonConstArray()
Return: Geometry.Mesh[]
Modifiers: public
Summary: Copies the unmanaged array to a managed counterpart.

Class: Rhino.Runtime.InteropWrappers.StringHolder
Summary: This class is used to pass strings back and forth between managed and unmanaged code.  This should not be needed by plug-ins.
If you are just dealing with an ON_wString*,   use

Constructor: Rhino.Runtime.InteropWrappers.StringHolder.StringHolder()
Summary: Constructor

Method: Rhino.Runtime.InteropWrappers.StringHolder.GetString(System.IntPtr pStringHolder)
Return: string
Modifiers: public, static
Summary: Gets managed string from unmanaged ON_wString pointer.

Method: Rhino.Runtime.InteropWrappers.StringHolder.ConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: C++ pointer used to access the ON_wString, managed plug-ins should never need this.

Method: Rhino.Runtime.InteropWrappers.StringHolder.Dispose()
Return: void
Modifiers: public
Summary: IDispose implementation

Method: Rhino.Runtime.InteropWrappers.StringHolder.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: Called by Dispose and finalizer

Method: Rhino.Runtime.InteropWrappers.StringHolder.NonConstPointer()
Return: System.IntPtr
Modifiers: public
Summary: C++ pointer used to access the ON_wString, managed plug-ins should never need this.

Method: Rhino.Runtime.InteropWrappers.StringHolder.ToString()
Return: string
Modifiers: public, override
Summary: Marshals unmanaged ON_wString to a managed .NET string

Method: Rhino.Runtime.InteropWrappers.StringHolder.ToStringSafe()
Return: string
Modifiers: public
Summary: Marshals unmanaged ON_wString to a managed .NET string and never returns null.

Class: Rhino.Runtime.InteropWrappers.StringWrapper
Summary: Represents a wrapper to an unmanaged OpenNurbs string.
Wraps a C++ ON_wString*.

Constructor: Rhino.Runtime.InteropWrappers.StringWrapper.StringWrapper()
Summary: Initializes a new empty unmanaged string (ON_wString*).

Constructor: Rhino.Runtime.InteropWrappers.StringWrapper.StringWrapper(string s)
Summary: Initializes a new unmanaged string with an initial value. The string s can be null.

Property: Rhino.Runtime.InteropWrappers.StringWrapper.ConstPointer
Return: IntPtr
Modifiers: public
Summary: Gets the constant pointer (constant ON_wString*).
Accessors: get

Property: Rhino.Runtime.InteropWrappers.StringWrapper.NonConstPointer
Return: IntPtr
Modifiers: public
Summary: Gets the non-constant pointer (ON_wString*).
Accessors: get

Method: Rhino.Runtime.InteropWrappers.StringWrapper.GetStringFromPointer(System.IntPtr pConstON_wString)
Return: string
Modifiers: public, static
Summary: Get string from an ON_wString*

Method: Rhino.Runtime.InteropWrappers.StringWrapper.SetStringOnPointer(System.IntPtr pON_wString, string s)
Return: void
Modifiers: public, static
Summary: Set contents of an ON_wString*

Method: Rhino.Runtime.InteropWrappers.StringWrapper.Dispose()
Return: void
Modifiers: public
Summary: Actively reclaims unmanaged resources that this instance uses.

Method: Rhino.Runtime.InteropWrappers.StringWrapper.SetString(string s)
Return: void
Modifiers: public
Summary: Set contents of this string.
Parameter: s (string)
Parameter Summary: The new string.

Method: Rhino.Runtime.InteropWrappers.StringWrapper.ToString()
Return: string
Modifiers: public, override
Summary: Returns the string contents of this wrapper.

# Namespace: Rhino.Runtime.Notifications

Class: Rhino.Runtime.Notifications.Notification
Summary: A Notification instance can be used to inform the user about various events. For a Notification instance to be displayed in Rhino, it must be added to the  <b>NotificationCenter</b> . When added, it will be displayed in the Notifications panel in Rhino. A Notification contains 1 to 3 buttons that are automatically wired to its <b>ButtonClicked</b> Action if it is not null. The buttons are displayed when the Notification is shown modally by either the user clicking on a particular notification in the Notifications panel, or by programatically showing it using <b>ShowModal</b> .  Currently, only process-wide notifications are supported; document specific notifications are not possible.  Notification instances contain metadata that can be added, modified, or removed during its life. The metadata is important for LINQ queries and other patterns. For example, a particular action may require that multiple notifications be modified. Thus, a LINQ query can be performed on the <b>NotificationCenter</b> using metadata to retrieve related Notification objects and modify them as a batch.  Notification objects implement <b>IAssemblyRestrictedObject</b> . By default, a Notification can be editedby any assembly, but explicitly specifing allowed assemblies in the constructor changes this behavior.  Notification objects are not thread-safe and should only be manipulated in UI thread.

Constructor: Rhino.Runtime.Notifications.Notification.Notification()
Summary: Creates a new instance that can be edited by any assembly.

Constructor: Rhino.Runtime.Notifications.Notification.Notification(IEnumerable<Assembly> allowedAssemblies)
Summary: Creates a new instance that can be edited by the given assemblies.

Property: Rhino.Runtime.Notifications.Notification.AllowedAssemblies
Return: ICollection<Assembly>
Modifiers: public
Summary: The assemblies that can modify this instance.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.AlternateButtonTitle
Return: string
Modifiers: public
Summary: The localized title of the Alternate button.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.ButtonClicked
Return: Action<ButtonType>
Modifiers: public
Summary: An Action that will be invoked whenever a button for the notification is clicked or the notification is closed.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.CancelButtonTitle
Return: string
Modifiers: public
Summary: The localized title of the Cancel button.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.ConfirmButtonTitle
Return: string
Modifiers: public
Summary: The localized title of the Confirm button.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.DateUpdated
Return: DateTime
Modifiers: public
Summary: The date the notification was last modified.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.Description
Return: string
Modifiers: public
Summary: The description of the notification. The description is displayed in the Notifications panel in Rhino.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.Message
Return: string
Modifiers: public
Summary: The message of the notification. The message is shown only when the instance is displayed modally. It should contain details about the notification.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.string> MetadataCopy
Return: IDictionary<string,
Modifiers: public
Summary: A copy of all the metadata for this class.
Accessors: get

Property: Rhino.Runtime.Notifications.Notification.SeverityLevel
Return: Severity
Modifiers: public
Summary: The severity of the notification. Changing the severity of the notification may change the way Rhino chooses to display the Notifications panel.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.ShowEventId
Return: Guid?
Modifiers: public
Summary: A field used by Rhino for displaying notifications. Not intended for public use.
Accessors: get

Property: Rhino.Runtime.Notifications.Notification.Title
Return: string
Modifiers: public
Summary: The title of the notification. The title is displayed when the notification is displayed modally in Rhino.
Accessors: get set

Property: Rhino.Runtime.Notifications.Notification.this[string key]
Return: string
Modifiers: public
Summary: Gets or sets metadata for this instance.

Method: Rhino.Runtime.Notifications.Notification.ExecuteAssemblyProtectedCode(Func<TResult> func)
Return: TResult
Modifiers: public, static
Summary: If a <b>Notification</b> object is only allowed to be modified by certain assemblies, then any code that interacts with it must be wrapped around this method, or a <b>InvalidOperationException</b> will be thrown. For performance reasons, the code wrapped by this method should be kept as simple as possible.
Parameter: func (Func<TResult>)
Parameter Summary: The code to run that modifies one or more notification objects

Method: Rhino.Runtime.Notifications.Notification.ExecuteAssemblyProtectedCode(System.Action action)
Return: void
Modifiers: public, static
Summary: If a <b>Notification</b> object is only allowed to be modified by certain assemblies, then any code that interacts with it must be wrapped around this method, or a <b>InvalidOperationException</b> will be thrown. For performance reasons, the code wrapped by this method should be kept as simple as possible.
Parameter: action (System.Action)
Parameter Summary: The code to run that modifies one or more notification objects

Method: Rhino.Runtime.Notifications.Notification.Editable()
Return: bool
Modifiers: public
Summary: Determines whether an assembly can modify the instance. Any code that modifies an assembly protected notification must be wrapped in a <b>ExecuteAssemblyProtectedCode(Action)</b> method.

Method: Rhino.Runtime.Notifications.Notification.HideModal()
Return: void
Modifiers: public
Summary: Tells Rhino to hide the notification if it is being currently shown as a modal.

Method: Rhino.Runtime.Notifications.Notification.RemoveMetadata(string key)
Return: bool
Modifiers: public
Summary: Removes metadata from this instance.
Parameter: key (string)
Parameter Summary: The key of the metadata to remove.

Method: Rhino.Runtime.Notifications.Notification.ShowModal()
Return: void
Modifiers: public
Summary: Tells Rhino to display the notification modally.

Method: Rhino.Runtime.Notifications.Notification.ToString()
Return: string
Modifiers: public, override
Summary: Returns a readable string representation of the instance.

Class: Rhino.Runtime.Notifications.NotificationButtonClickedArgs
Summary: Used when a button is clicked for a notification.

Constructor: Rhino.Runtime.Notifications.NotificationButtonClickedArgs.NotificationButtonClickedArgs(Notification notification, ButtonType buttonClicked)
Summary: Creates a new instance.

Property: Rhino.Runtime.Notifications.NotificationButtonClickedArgs.ButtonClicked
Return: ButtonType
Modifiers: public
Summary: The button that was clicked.
Accessors: get set

Property: Rhino.Runtime.Notifications.NotificationButtonClickedArgs.Notification
Return: Notification
Modifiers: public
Summary: The notification whose button was clicked.
Accessors: get set

Class: Rhino.Runtime.Notifications.NotificationCenter
Summary: The NotificationCenter holds all <b>Notification</b> objects that are displayed in the Notifications panel by Rhino.  The NotificationCenter is not thread-safe and should only be used in the UI thread.

Constructor: Rhino.Runtime.Notifications.NotificationCenter.NotificationCenter()
Summary: Initializes a new instance of the NotificationCenter class

Class: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>
Summary: An ordered set that notifies its subscribers whenever one of its INotifyPropertyChanged elements raises its PropertyChanged event.

Constructor: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.TrulyObservableOrderedSet<T>()
Summary: Creates an empty instance.

Constructor: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.TrulyObservableOrderedSet<T>(IEnumerable<T> items)
Summary: Creates an instance with the given items.

Property: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Count
Return: int
Modifiers: public
Summary: Returns the total number of items in the set.
Accessors: get

Property: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.IsReadOnly
Return: bool
Modifiers: public
Summary: Always returns false.
Accessors: get

Property: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.this[int index]
Return: T
Modifiers: public
Summary: Gets or replaces an element in the ordered set at the specified index.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Add(T item)
Return: void
Modifiers: public
Summary: Adds an object to the end of the ordered set if the set does not already contain the item.
Parameter: item (T)
Parameter Summary: The item to add.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Clear()
Return: void
Modifiers: public
Summary: Clears the ordered set.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Contains(T item)
Return: bool
Modifiers: public
Summary: Determines whether an element is in the set.
Parameter: item (T)
Parameter Summary: The item to check for inclusion.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.CopyTo(T[] array, int arrayIndex)
Return: void
Modifiers: public
Summary: Copies the values of the set to an array.
Parameter: array (T[])
Parameter Summary: The array to copy the values to.
Parameter: arrayIndex (int)
Parameter Summary: The index of the array to start the copy.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.GetEnumerator()
Return: IEnumerator<T>
Modifiers: public
Summary: Returns an enumerator that iterates through the set.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.IndexOf(T item)
Return: int
Modifiers: public
Summary: Searches for the specified object and returns the zero-based index of the first occurrence.
Parameter: item (T)
Parameter Summary: The item to locate.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Insert(int index, T item)
Return: void
Modifiers: public
Summary: Inserts an element at the specified index.
Parameter: index (int)
Parameter Summary: The index to insert the element at.
Parameter: item (T)
Parameter Summary: The item to insert.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Remove(T item)
Return: bool
Modifiers: public
Summary: Removes an element from the set.
Parameter: item (T)
Parameter Summary: The element to remove.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.RemoveAt(int index)
Return: void
Modifiers: public
Summary: Removes an element at the specified index from the set.
Parameter: index (int)
Parameter Summary: The index of the element to remove.

Method: Rhino.Runtime.Notifications.TrulyObservableOrderedSet<T>.Sort(Func<T, TKey> keySelector, bool descending)
Return: void
Modifiers: public
Summary: Sorts the set.
Parameter: keySelector (Func<T, TKey>)
Parameter Summary: 
Parameter: descending (bool)
Parameter Summary: If true, the sort will happen in descending other; if false, it will happen in ascending order.

# Namespace: Rhino.Runtime.RhinoAccounts

Class: Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo
Summary: This class is designed to convey the progress of an asynchronous operation through .NET's <b>IProgress{T}</b> interface. It can be used by callers of such tasks to relay the tasks' progress, as well as useful metadata information that may be of interest.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo.RhinoAccoountsProgressInfo(ProgressState state, Dictionary<object, object> metadata, string customDescription)
Summary: Creates a new instance.

Property: Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo.Description
Return: string
Modifiers: public
Summary: A localized description of the state that may be shown to the user of the application.
Accessors: get set

Property: Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo.object> Metadata
Return: Dictionary<object,
Modifiers: public
Summary: Any metadata of interest that may be used by the caller of a task.
Accessors: get

Property: Rhino.Runtime.RhinoAccounts.RhinoAccoountsProgressInfo.State
Return: ProgressState
Modifiers: public
Summary: The state to report.
Accessors: get set

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException
Summary: Exception thrown when the currently logged in user is different from the newly logged in user.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.RhinoAccountsAuthTokenMismatchException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.RhinoAccountsAuthTokenMismatchException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsAuthTokenMismatchException.RhinoAccountsAuthTokenMismatchException(string currentUsername, string newUsername, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsCannotListenException
Summary: Exception thrown when there is no port available on the machine for Rhino to listen for Rhino Accounts' response.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsCannotListenException.RhinoAccountsCannotListenException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsCannotListenException.RhinoAccountsCannotListenException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsException
Summary: Base exception for all Rhino Accounts operations.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsException.RhinoAccountsException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsException.RhinoAccountsException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsGroup
Summary: Represents a Rhino Accounts group.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsGroup.RhinoAccountsGroup(string id, string name)
Summary: Represents a group in Rhino Accounts. Groups are a collection of individual members that can share resources.

Property: Rhino.Runtime.RhinoAccounts.RhinoAccountsGroup.Id
Return: string
Modifiers: public
Summary: The id of the group. The id is unique to a group within Rhino Accounts.
Accessors: get

Property: Rhino.Runtime.RhinoAccounts.RhinoAccountsGroup.Name
Return: string
Modifiers: public
Summary: The name of the group. The name can be changed at anytime by group members.
Accessors: get

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidResponseException
Summary: Exception thrown when the response returned by Rhino Accounts is not valid.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidResponseException.RhinoAccountsInvalidResponseException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidResponseException.RhinoAccountsInvalidResponseException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidStateException
Summary: Occurs when the state returned by the Rhino Accounts server is not the same as the one sent to the server. It usually indicates the request has been tampered with.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidStateException.RhinoAccountsInvalidStateException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidStateException.RhinoAccountsInvalidStateException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidTokenException
Summary: Exception thrown when the token returned by Rhino Accounts is not valid.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidTokenException.RhinoAccountsInvalidTokenException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsInvalidTokenException.RhinoAccountsInvalidTokenException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager
Summary: Performs various Rhino Accounts-related tasks.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.RhinoAccountsManager()
Summary: Initializes a new instance of the RhinoAccountsManager class

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.ExecuteProtectedCode(Action<SecretKey> protectedCode)
Return: void
Modifiers: public, static
Summary: Any synchronous method in the <b>IRhinoAccountsManager</b> class must be executed within the function passed to this method, or an <b>InvalidOperationException</b> will be thrown.
Parameter: protectedCode (Action<SecretKey>)
Parameter Summary: A function returning an awaitable task that has a <b>SecretKey</b> passed to it. You will need to pass this secret key to any method you wish to call within <b>IRhinoAccountsManager</b> .

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.ExecuteProtectedCodeAsync(Func<SecretKey, Task> protectedCode)
Return: System.Threading.Tasks.Task
Modifiers: public, static
Summary: Any asynchronous method in the <b>IRhinoAccountsManager</b> class must be executed within the function passed to this method, or an <b>InvalidOperationException</b> will be thrown.
Parameter: protectedCode (Func<SecretKey, Task>)
Parameter Summary: A function returning an awaitable task that has a <b>SecretKey</b> passed to it. You will need to pass this secret key to any method you wish to call within <b>IRhinoAccountsManager</b> .

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.IOAuth2Token>> GetAuthTokensAsync(string clientId, string clientSecret, IEnumerable<string> scope, string prompt, int maxAge, bool showUI, IProgress<RhinoAccoountsProgressInfo> progress, SecretKey secretKey, System.Threading.CancellationToken cancellationToken)
Return: Task<Tuple<IOpenIDConnectToken,
Modifiers: public, static
Summary: Asynchronously retrieves auth tokens with the given criteria from the Rhino Accounts server.
Parameter: clientId (string)
Parameter Summary: The unique id of the client registered in Rhino Accounts.
Parameter: clientSecret (string)
Parameter Summary: The secret of the client registered in Rhino Accounts
Parameter: scope (IEnumerable<string>)
Parameter Summary: The scope desired for the tokens. Valid scope values can be found in the Rhino Accounts documentation.
Parameter: prompt (string)
Parameter Summary: The prompt of the request. See Rhino Accounts documentation for details. You may pass None if no prompt is desired.
Parameter: maxAge (int)
Parameter Summary: The maxAge of the request. See Rhino Accounts documentation for details. You may pass None if no maxAge should be enforced.
Parameter: showUI (bool)
Parameter Summary: True if the user should see a UI showing the progress of the operation and a way to cancel it, or False if the UI should not be displayed. If false, it is strongly recommended that you pass aobject and display your own UI to the user.
Parameter: progress (IProgress<RhinoAccoountsProgressInfo>)
Parameter Summary: An object that will report the progress of the operation to the caller. If no progress is needed, you may pass null.
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>
Parameter: cancellationToken (System.Threading.CancellationToken)
Parameter Summary: A token that can be used to signal that the operation should be cancelled.

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.IOAuth2Token>> GetAuthTokensAsync(string clientId, string clientSecret, SecretKey secretKey, System.Threading.CancellationToken cancellationToken)
Return: Task<Tuple<IOpenIDConnectToken,
Modifiers: public, static
Summary: Asynchronously retrieves auth tokens with the given criteria from the Rhino Accounts server.
Parameter: clientId (string)
Parameter Summary: The unique id of the client registered in Rhino Accounts.
Parameter: clientSecret (string)
Parameter Summary: The secret of the client registered in Rhino Accounts
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>
Parameter: cancellationToken (System.Threading.CancellationToken)
Parameter Summary: A token that can be used to signal that the operation should be cancelled.

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.RevokeAuthTokenAsync(IOAuth2Token oauth2Token, SecretKey secretKey, System.Threading.CancellationToken cancellationToken)
Return: System.Threading.Tasks.Task
Modifiers: public, static
Summary: Invalidates/revokes an <b>IOAuth2Token</b> object from the Rhino Accounts server.
Parameter: oauth2Token (IOAuth2Token)
Parameter Summary: The token to revoke.
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>
Parameter: cancellationToken (System.Threading.CancellationToken)
Parameter Summary: A token that can be used to signal that the operation should be cancelled.

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.IOAuth2Token> TryGetAuthTokens(string clientId, IEnumerable<string> scope, SecretKey secretKey)
Return: Tuple<IOpenIDConnectToken,
Modifiers: public, static
Summary: Attempts to return cached auth tokens that match the given criteria if any have been stored in cache.
Parameter: clientId (string)
Parameter Summary: The unique id of the client registered in Rhino Accounts.
Parameter: scope (IEnumerable<string>)
Parameter Summary: The scope desired for the tokens. Valid scope values can be found in the Rhino Accounts documentation.
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.IOAuth2Token> TryGetAuthTokens(string clientId, SecretKey secretKey)
Return: Tuple<IOpenIDConnectToken,
Modifiers: public, static
Summary: Attempts to return cached auth tokens that match the given criteria if any have been stored in cache.
Parameter: clientId (string)
Parameter Summary: The unique id of the client registered in Rhino Accounts.
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>

Method: Rhino.Runtime.RhinoAccounts.RhinoAccountsManager.UpdateOpenIDConnectTokenAsync(IOpenIDConnectToken currentToken, IOAuth2Token oauth2Token, SecretKey secretKey, System.Threading.CancellationToken cancellationToken)
Return: Task<IOpenIDConnectToken>
Modifiers: public, static
Summary: Updates an OpenID Connect token so that it contains the latest user information by contacting the Rhino Account's server userinfo endpoint using a compatible O
Parameter: currentToken (IOpenIDConnectToken)
Parameter Summary: The existing OpenID Connect token that you wish to updated with the latest user information.
Parameter: oauth2Token (IOAuth2Token)
Parameter Summary: A valid OAuth2 token used for authorization. The OAuth2 token must have been issued together with the OpenID Connect token passed or a <b>RhinoAccountsAuthTokenMismatchException</b> will be thrown.
Parameter: secretKey (SecretKey)
Parameter Summary: A special key that was handed to you in <b>ExecuteProtectedCodeAsync(Func{SecretKey, Task})</b>
Parameter: cancellationToken (System.Threading.CancellationToken)
Parameter Summary: A token that can be used to signal that the operation should be cancelled.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsOperationInProgressException
Summary: Exception thrown when there is already a Rhino Accounts operation taking place.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsOperationInProgressException.RhinoAccountsOperationInProgressException(Assembly assembly, Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsOperationInProgressException.RhinoAccountsOperationInProgressException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsProxyException
Summary: Exception thrown when there is a problem with a proxy setting during a Rhino Accounts operation.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsProxyException.RhinoAccountsProxyException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsProxyException.RhinoAccountsProxyException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerException
Summary: Exception thrown when the Rhino Accounts server returned an unsuccessful HTTP response with a code of 400 or greater.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerException.RhinoAccountsServerException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerException.RhinoAccountsServerException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerNotReachableException
Summary: Exception thrown when the Rhino Accounts server cannot be reached due to a network problem.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerNotReachableException.RhinoAccountsServerNotReachableException(Exception innerException)
Summary: Generates a new instance of the exception.

Constructor: Rhino.Runtime.RhinoAccounts.RhinoAccountsServerNotReachableException.RhinoAccountsServerNotReachableException(string message, Exception innerException)
Summary: Generates a new instance of the exception.

Class: Rhino.Runtime.RhinoAccounts.SecretKey
Summary: An instance of this of this class is given to the function you pass to ExceuteProtectedCodeAsync and must be passed to any method of the RhinoAccountsManager that requires it. Failure to do so will throw an <b>InvalidOperationException</b> .

# Namespace: Rhino.UI

Class: Rhino.UI.Dialogs

Constructor: Rhino.UI.Dialogs.Dialogs()
Summary: Initializes a new instance of the Dialogs class

Method: Rhino.UI.Dialogs.KillSplash()
Return: void
Modifiers: public, static
Summary: Destroy the splash screen if it is being displayed.

Method: Rhino.UI.Dialogs.SetCustomColorDialog(EventHandler<GetColorEventArgs> handler)
Return: void
Modifiers: public, static

Method: Rhino.UI.Dialogs.ShowAboutDialog(bool forceSimpleDialog)
Return: void
Modifiers: public, static

Method: Rhino.UI.Dialogs.ShowCheckListBox(string title, string message, System.Collections.IList items, IList<bool> checkState)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's check list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (System.Collections.IList)
Parameter Summary: A list of items to show.
Parameter: checkState (IList<bool>)
Parameter Summary: A list of true/False boolean values.

Method: Rhino.UI.Dialogs.ShowColorDialog(object parent, ref Display.Color4f color, bool allowAlpha, NamedColorList namedColorList, OnColorChangedEvent colorCallback)
Return: bool
Modifiers: public, static
Summary: Displays the standard modal color picker dialog for floating point colors.
Parameter: parent (object)
Parameter Summary: Parent window for this dialog, should always pass this if calling from a form or user control.
Parameter: color (Display.Color4f)
Parameter Summary: The initial color to set the picker to and also accepts the user's choice.
Parameter: allowAlpha (bool)
Parameter Summary: Specifies if the color picker should allow changes to the alpha channel or not.
Parameter: namedColorList (NamedColorList)
Parameter Summary: If not None and contains at least one named color this list will replace the standard Rhino Color list displayed by the rhino color dialog.
Parameter: colorCallback (OnColorChangedEvent)
Parameter Summary: May be optionally passed to ShowColorDialog and will get called when the color value changes in the color dialog.

Method: Rhino.UI.Dialogs.ShowColorDialog(object parent, ref Display.Color4f color, bool allowAlpha, OnColorChangedEvent colorCallback)
Return: bool
Modifiers: public, static
Summary: Displays the standard modal color picker dialog for floating point colors.
Parameter: parent (object)
Parameter Summary: Parent window for this dialog, should always pass this if calling from a form or user control.
Parameter: color (Display.Color4f)
Parameter Summary: The initial color to set the picker to and also accepts the user's choice.
Parameter: allowAlpha (bool)
Parameter Summary: Specifies if the color picker should allow changes to the alpha channel or not.
Parameter: colorCallback (OnColorChangedEvent)
Parameter Summary: May be optionally passed to ShowColorDialog and will get called when the color value changes in the color dialog.

Method: Rhino.UI.Dialogs.ShowColorDialog(object parent, ref Display.Color4f color, bool allowAlpha)
Return: bool
Modifiers: public, static
Summary: Displays the standard modal color picker dialog for floating point colors.
Parameter: parent (object)
Parameter Summary: Parent window for this dialog, should always pass this if calling from a form or user control.
Parameter: color (Display.Color4f)
Parameter Summary: The initial color to set the picker to and also accepts the user's choice.
Parameter: allowAlpha (bool)
Parameter Summary: Specifies if the color picker should allow changes to the alpha channel or not.

Method: Rhino.UI.Dialogs.ShowColorDialog(ref Display.Color4f color, bool allowAlpha)
Return: bool
Modifiers: public, static
Summary: Displays the standard modal color picker dialog for floating point colors.
Parameter: color (Display.Color4f)
Parameter Summary: The initial color to set the picker to and also accepts the user's choice.
Parameter: allowAlpha (bool)
Parameter Summary: Specifies if the color picker should allow changes to the alpha channel or not.

Method: Rhino.UI.Dialogs.ShowColorDialog(ref System.Drawing.Color color, bool includeButtonColors, string dialogTitle, NamedColorList namedColorList)
Return: bool
Modifiers: public, static
Summary: Display Rhino's color selection dialog.
Parameter: color (System.Drawing.Color)
Parameter Summary: [in/out] Default color for dialog, and will receive new color if function returns true.
Parameter: includeButtonColors (bool)
Parameter Summary: Display button face and text options at top of named color list.
Parameter: dialogTitle (string)
Parameter Summary: The title of the dialog.
Parameter: namedColorList (NamedColorList)
Parameter Summary: If not None and contains one or more named colors the Rhino color dialog named color list will be replaces with this list.

Method: Rhino.UI.Dialogs.ShowColorDialog(ref System.Drawing.Color color, bool includeButtonColors, string dialogTitle)
Return: bool
Modifiers: public, static
Summary: Display Rhino's color selection dialog.
Parameter: color (System.Drawing.Color)
Parameter Summary: [in/out] Default color for dialog, and will receive new color if function returns true.
Parameter: includeButtonColors (bool)
Parameter Summary: Display button face and text options at top of named color list.
Parameter: dialogTitle (string)
Parameter Summary: The title of the dialog.

Method: Rhino.UI.Dialogs.ShowColorDialog(ref System.Drawing.Color color)
Return: bool
Modifiers: public, static
Summary: Display Rhino's color selection dialog.
Parameter: color (System.Drawing.Color)
Parameter Summary: [in/out] Default color for dialog, and will receive new color if function returns true.

Method: Rhino.UI.Dialogs.ShowColorDialog(System.Windows.Forms.IWin32Window parent, ref Display.Color4f color, bool allowAlpha)
Return: bool
Modifiers: public, static
Summary: Displays the standard modal color picker dialog for floating point colors.
Parameter: parent (System.Windows.Forms.IWin32Window)
Parameter Summary: Parent window for this dialog, should always pass this if calling from a form or user control.
Parameter: color (Display.Color4f)
Parameter Summary: The initial color to set the picker to and also accepts the user's choice.
Parameter: allowAlpha (bool)
Parameter Summary: Specifies if the color picker should allow changes to the alpha channel or not.

Method: Rhino.UI.Dialogs.ShowComboListBox(string title, string message, System.Collections.IList items)
Return: object
Modifiers: public, static
Summary: Displays Rhino's combo list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (System.Collections.IList)
Parameter Summary: A list of items to show.

Method: Rhino.UI.Dialogs.ShowContextMenu(IEnumerable<string> items, System.Drawing.Point screenPoint, IEnumerable<int> modes)
Return: int
Modifiers: public, static
Summary: Creates an ETO ContextMenu from an array of strings. Use the modes array to enable/disable menu items

Method: Rhino.UI.Dialogs.ShowEditBox(string title, string message, string defaultText, bool multiline, out string text)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's string edit box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: defaultText (string)
Parameter Summary: The default text.
Parameter: multiline (bool)
Parameter Summary: Set True for multi line editing.
Parameter: text (string)
Parameter Summary: The modified text.

Method: Rhino.UI.Dialogs.ShowLayerMaterialDialog(RhinoDoc doc, IEnumerable<int> layerIndices)
Return: bool
Modifiers: public, static
Summary: Show a modal dialog to edit the material in the layer specified in layerIndices.
Parameter: doc (RhinoDoc)
Parameter Summary: Rhino document
Parameter: layerIndices (IEnumerable<int>)
Parameter Summary: True if the new layer button will be visible.

Method: Rhino.UI.Dialogs.ShowLineTypes(string title, string message, RhinoDoc doc, System.Guid selectedLineTypeId)
Return: System.Guid
Modifiers: public, static

Method: Rhino.UI.Dialogs.ShowLineTypes(string title, string message, RhinoDoc doc)
Return: object
Modifiers: public, static
Summary: Displays Rhino's LineType list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.

Method: Rhino.UI.Dialogs.ShowListBox(string title, string message, System.Collections.IList items, object selectedItem)
Return: object
Modifiers: public, static
Summary: Displays Rhino's list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (System.Collections.IList)
Parameter Summary: A list of items to show.
Parameter: selectedItem (object)
Parameter Summary: The item to preselect.

Method: Rhino.UI.Dialogs.ShowListBox(string title, string message, System.Collections.IList items)
Return: object
Modifiers: public, static
Summary: Displays Rhino's list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (System.Collections.IList)
Parameter Summary: A list of items to show.

Method: Rhino.UI.Dialogs.ShowMessage(object parent, string message, string title, ShowMessageButton buttons, ShowMessageIcon icon, ShowMessageDefaultButton defaultButton, ShowMessageOptions options, ShowMessageMode mode)
Return: ShowMessageResult
Modifiers: public, static
Summary: Same as System.Windows.Forms.MessageBox.Show but using a message box tailored to Rhino.
Parameter: parent (object)
Parameter Summary: Parent window
Parameter: message (string)
Parameter Summary: Message box text content.
Parameter: title (string)
Parameter Summary: Message box title text.
Parameter: buttons (ShowMessageButton)
Parameter Summary: Which buttons to display in the message box.
Parameter: icon (ShowMessageIcon)
Parameter Summary: Which icon to display in the message box.
Parameter: defaultButton (ShowMessageDefaultButton)
Parameter Summary: Which button is the default button.
Parameter: options (ShowMessageOptions)
Parameter Summary: Additional message box options.
Parameter: mode (ShowMessageMode)
Parameter Summary: The modality of the message box.

Method: Rhino.UI.Dialogs.ShowMessage(string message, string title, ShowMessageButton buttons, ShowMessageIcon icon)
Return: ShowMessageResult
Modifiers: public, static
Summary: Same as System.Windows.Forms.MessageBox.Show but using a message box tailored to Rhino.
Parameter: message (string)
Parameter Summary: Message box text content.
Parameter: title (string)
Parameter Summary: Message box title text.
Parameter: buttons (ShowMessageButton)
Parameter Summary: Which buttons to display in the message box.
Parameter: icon (ShowMessageIcon)
Parameter Summary: Which icon to display in the message box.

Method: Rhino.UI.Dialogs.ShowMessage(string message, string title)
Return: ShowMessageResult
Modifiers: public, static
Summary: Same as System.Windows.Forms.MessageBox.Show but using a message box tailored to Rhino.
Parameter: message (string)
Parameter Summary: Message box text content.
Parameter: title (string)
Parameter Summary: Message box title text.

Method: Rhino.UI.Dialogs.ShowMessageBox(string message, string title, System.Windows.Forms.MessageBoxButtons buttons, System.Windows.Forms.MessageBoxIcon icon)
Return: System.Windows.Forms.DialogResult
Modifiers: public, static
Summary: Same as System.Windows.Forms.MessageBox.Show but using a message box tailored to Rhino.

Method: Rhino.UI.Dialogs.ShowMessageBox(string message, string title)
Return: System.Windows.Forms.DialogResult
Modifiers: public, static
Summary: Same as System.Windows.Forms.MessageBox.Show but using a message box tailored to Rhino.

Method: Rhino.UI.Dialogs.ShowMultiListBox(string title, string message, IList<string> items, IList<string> defaults)
Return: string
Modifiers: public, static
Summary: Displays Rhino's multiple selection list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (IList<string>)
Parameter Summary: A list of items to show.
Parameter: defaults (IList<string>)
Parameter Summary: The items to preselect.

Method: Rhino.UI.Dialogs.ShowNumberBox(string title, string message, ref double number, double minimum, double maximum)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's number edit box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: number (double)
Parameter Summary: The default and return value.
Parameter: minimum (double)
Parameter Summary: The minimum allowable value.
Parameter: maximum (double)
Parameter Summary: The maximum allowable value.

Method: Rhino.UI.Dialogs.ShowNumberBox(string title, string message, ref double number)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's number edit box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: number (double)
Parameter Summary: The default and return value.

Method: Rhino.UI.Dialogs.ShowPrintWidths(string title, string message, double selectedWidth)
Return: double
Modifiers: public, static
Summary: Shows the print widths dialogs

Method: Rhino.UI.Dialogs.ShowPrintWidths(string title, string message)
Return: double
Modifiers: public, static
Summary: Shows the print widths dialogs

Method: Rhino.UI.Dialogs.ShowPropertyListBox(string title, string message, List<KeyValuePair<string, string>> items)
Return: string
Modifiers: public, static
Summary: Displays Rhino's property list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (List<KeyValuePair<string, string>>)
Parameter Summary: A list of key value pairs

Method: Rhino.UI.Dialogs.ShowPropertyListBox(string title, string message, System.Collections.IList items, IList<string> values)
Return: string
Modifiers: public, static
Summary: Displays Rhino's property list box.
Parameter: title (string)
Parameter Summary: The dialog title.
Parameter: message (string)
Parameter Summary: The dialog message.
Parameter: items (System.Collections.IList)
Parameter Summary: A list of property names.
Parameter: values (IList<string>)
Parameter Summary: A list of property values.

Method: Rhino.UI.Dialogs.ShowSelectLayerDialog(ref int layerIndex, string dialogTitle, bool showNewLayerButton, bool showSetCurrentButton, ref bool initialSetCurrentState)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's single layer selection dialog.
Parameter: layerIndex (int)
Parameter Summary: Initial layer for the dialog, and will receive selected layer if function returns DialogResult.OK.
Parameter: dialogTitle (string)
Parameter Summary: The dialog title.
Parameter: showNewLayerButton (bool)
Parameter Summary: True if the new layer button will be visible.
Parameter: showSetCurrentButton (bool)
Parameter Summary: True if the set current button will be visible.
Parameter: initialSetCurrentState (bool)
Parameter Summary: True if the current state will be initially set.

Method: Rhino.UI.Dialogs.ShowSelectLinetypeDialog(ref int linetypeIndex, bool displayByLayer)
Return: bool
Modifiers: public, static
Summary: Displays Rhino's single linetype selection dialog.
Parameter: linetypeIndex (int)
Parameter Summary: Initial linetype for the dialog, and will receive selected linetype if function returns true.
Parameter: displayByLayer (bool)
Parameter Summary: Displays the "ByLayer" linetype in the list. Defaults to false.

Method: Rhino.UI.Dialogs.ShowSelectMultipleLayersDialog(IEnumerable<int> defaultLayerIndices, string dialogTitle, bool showNewLayerButton, out int layerIndices)
Return: bool
Modifiers: public, static

Method: Rhino.UI.Dialogs.ShowSemiModal(System.Windows.Forms.Form form)
Return: System.Windows.Forms.DialogResult
Modifiers: public, static
Summary: Show a windows form that is modal in the sense that this function does not return until the form is closed, but also allows for interaction with other elements of the Rhino user interface.
Parameter: form (System.Windows.Forms.Form)
Parameter Summary: The form must have buttons that are assigned to the "AcceptButton" and "CancelButton".

Method: Rhino.UI.Dialogs.ShowSunDialog(Render.Sun sun)
Return: bool
Modifiers: public, static
Summary: Show the modal sun dialog.

Method: Rhino.UI.Dialogs.ShowTextDialog(string message, string title)
Return: void
Modifiers: public, static
Summary: Display a text dialog similar to the dialog used for the "What" command.
Parameter: message (string)
Parameter Summary: Text to display as the message content.
Parameter: title (string)
Parameter Summary: Test to display as the form title.

Class: Rhino.UI.DrawingUtilities
Summary: RhinoCommon Drawing Utilities

Constructor: Rhino.UI.DrawingUtilities.DrawingUtilities()
Summary: Initializes a new instance of the DrawingUtilities class

Method: Rhino.UI.DrawingUtilities.BitmapFromIconResource(string resourceName, Size bitmapSize, System.Reflection.Assembly assembly)
Return: Bitmap
Modifiers: public, static
Summary: Load a Icon from an embedded resource and convert it to a bitmap of the specified size.  Will look for a icon image that is greater than or equal to the requested size, if all images are less than the requested size the largest image will be used.
Parameter: resourceName (string)
Parameter Summary: 
Parameter: bitmapSize (Size)
Parameter Summary: Desired bitmap size
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource, will use the calling assembly if null.

Method: Rhino.UI.DrawingUtilities.BitmapFromIconResource(string resourceName, System.Reflection.Assembly assembly)
Return: Bitmap
Modifiers: public, static
Summary: Load a Icon from an embedded resource and convert it to a bitmap of the specified size.  Will look for a icon image that is greater than or equal to the requested size, if all images are less than the requested size the largest image will be used.
Parameter: resourceName (string)
Parameter Summary: 
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource, will use the calling assembly if null.

Method: Rhino.UI.DrawingUtilities.BitmapFromSvg(string svg, int width, int height, bool adjustForDarkMode)
Return: Bitmap
Modifiers: public, static
Summary: Create bitmap of a given size from an svg string

Method: Rhino.UI.DrawingUtilities.BitmapFromSvg(string svg, int width, int height)
Return: Bitmap
Modifiers: public, static
Summary: Create bitmap of a given size from an svg string

Method: Rhino.UI.DrawingUtilities.CreateCurvePreviewGeometry(Rhino.Geometry.Curve curve, Rhino.DocObjects.Linetype linetype, int width, int height)
Return: List<Rhino.Geometry.Point2f[]>
Modifiers: public, static
Summary: Create a series of closed polyline loops representing a curve and a linetype combination.

Method: Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(IEnumerable<Mesh> meshes, IEnumerable<Color> colors, Size size)
Return: Bitmap
Modifiers: public, static
Summary: Creates a preview image of one or more meshes.
Parameter: meshes (IEnumerable<Geometry.Mesh>)
Parameter Summary: The meshes.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: The draw colors, one for each mesh.
Parameter: size (Size)
Parameter Summary: The size of the preview image.

Method: Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(Rhino.Geometry.Mesh mesh, Color color, Size size)
Return: Bitmap
Modifiers: public, static
Summary: Creates a preview image of a mesh.
Parameter: mesh (Rhino.Geometry.Mesh)
Parameter Summary: The mesh.
Parameter: color (Color)
Parameter Summary: The draw color.
Parameter: size (Size)
Parameter Summary: The size of the preview image.

Method: Rhino.UI.DrawingUtilities.CreateMeshPreviewImage(RhinoDoc doc, IEnumerable<Mesh> meshes, IEnumerable<Color> colors, Size size)
Return: Bitmap
Modifiers: public, static
Summary: Creates a preview image of one or more meshes.
Parameter: doc (RhinoDoc)
Parameter Summary: The active document.
Parameter: meshes (IEnumerable<Geometry.Mesh>)
Parameter Summary: The meshes.
Parameter: colors (IEnumerable<Color>)
Parameter Summary: The draw colors, one for each mesh.
Parameter: size (Size)
Parameter Summary: The size of the preview image.

Method: Rhino.UI.DrawingUtilities.DarkModeConvertPixel(ref byte r, ref byte g, ref byte b)
Return: void
Modifiers: public, static
Summary: Attempt to adjust pixels to an image that works for dark mode

Method: Rhino.UI.DrawingUtilities.DarkModeConvertPixels(ref byte rgbaBytes)
Return: void
Modifiers: public, static
Summary: Attempt to adjust pixels to an image that works for dark mode

Method: Rhino.UI.DrawingUtilities.IconFromResource(string resourceName, Size size, System.Reflection.Assembly assembly)
Return: Icon
Modifiers: public, static
Summary: Load a Icon from an embedded resource.
Parameter: resourceName (string)
Parameter Summary: The case-sensitive name of the icon manifest resource being requested.
Parameter: size (Size)
Parameter Summary: The desired size of the icon.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource, will use the calling assembly if null.

Method: Rhino.UI.DrawingUtilities.IconFromResource(string resourceName, System.Reflection.Assembly assembly)
Return: Icon
Modifiers: public, static
Summary: Load a Icon from an embedded resource.
Parameter: resourceName (string)
Parameter Summary: The case-sensitive name of the icon manifest resource being requested.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource, will use the calling assembly if null.

Method: Rhino.UI.DrawingUtilities.ImageFromResource(string resourceName, System.Reflection.Assembly assembly)
Return: Image
Modifiers: public, static
Summary: Load a Image from an embedded resource.
Parameter: resourceName (string)
Parameter Summary: The case-sensitive name of the image manifest resource being requested.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource, will use the calling assembly if null.

Method: Rhino.UI.DrawingUtilities.LoadBitmapWithScaleDown(string iconName, int sizeDesired, System.Reflection.Assembly assembly)
Return: Bitmap
Modifiers: public, static
Summary: Loads an icon from an embedded resource and converts it to a bitmap. If the icon is not a standard size, this function scales down a larger image.
Parameter: iconName (string)
Parameter Summary: The case-sensitive name of the icon manifest resource being requested.
Parameter: sizeDesired (int)
Parameter Summary: The desired size, in pixels, of the icon.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource.

Method: Rhino.UI.DrawingUtilities.LoadIconWithScaleDown(string iconName, int sizeDesired, System.Reflection.Assembly assembly)
Return: Icon
Modifiers: public, static
Summary: Loads an icon from an embedded resource. If the icon is not a standard size, this function scales down a larger image.
Parameter: iconName (string)
Parameter Summary: The case-sensitive name of the icon manifest resource being requested.
Parameter: sizeDesired (int)
Parameter Summary: The desired size, in pixels, of the icon.
Parameter: assembly (System.Reflection.Assembly)
Parameter Summary: The assembly containing the manifest resource.

Method: Rhino.UI.DrawingUtilities.MakeArgb(byte a, byte r, byte g, byte b)
Return: int
Modifiers: public, static

Method: Rhino.UI.DrawingUtilities.PixelsFromSvg(string svg, int width, int height, bool premultiplyAlpha, Color backgroundColor)
Return: byte
Modifiers: public, static
Summary: Get array of bytes that represent RGBA values for an image of a given size created from SVG
Parameter: svg (string)
Parameter Summary: 
Parameter: width (int)
Parameter Summary: 
Parameter: height (int)
Parameter Summary: 
Parameter: premultiplyAlpha (bool)
Parameter Summary: Pre-lends the background color with the pixels based on their alpha value
Parameter: backgroundColor (Color)
Parameter Summary: Background color - pass Color.Empty if you don't know what to pass.

Method: Rhino.UI.DrawingUtilities.SvgToRhinoDibIntPtr(string svg, int width, int height, bool adjustForDarkMode, System.IntPtr pRhinoDib)
Return: void
Modifiers: public, static
Summary: Create bitmap of a given size from an svg string

Class: Rhino.UI.Fonts
Summary: Rhino.Rumtime.UI

Constructor: Rhino.UI.Fonts.Fonts()
Summary: Initializes a new instance of the Fonts class

Property: Rhino.UI.Fonts.BoldHeadingFont
Return: Font
Modifiers: public, static
Summary: Returns a font that is 1.2x NormalFont and Bold
Accessors: get

Property: Rhino.UI.Fonts.HeadingFont
Return: Font
Modifiers: public, static
Summary: Returns a font used for dialog headings. 1.2x the size of NormalFont.
Accessors: get

Property: Rhino.UI.Fonts.NormalFont
Return: Font
Modifiers: public, static
Summary: Returns the normal font used for dialog boxes and buttons.
Accessors: get

Property: Rhino.UI.Fonts.SmallFont
Return: Font
Modifiers: public, static
Summary: Returns a font use for small text in dialog boxes. 0.8x the size of NormalFont.
Accessors: get

Property: Rhino.UI.Fonts.TitleFont
Return: Font
Modifiers: public, static
Summary: Returns a font used for dialog titles. 2x the size of NormalFont, and bold.
Accessors: get

Method: Rhino.UI.Fonts.GetUiFont(Style style, Size size)
Return: Font
Modifiers: public, static
Summary: GetUiFont provides access to a set of unmanaged fonts used by Rhino.
Parameter: style (Style)
Parameter Summary: Normal, Bold, Italic
Parameter: size (Size)
Parameter Summary: One of several preset enumerable sizes

Class: Rhino.UI.GetColorEventArgs

Property: Rhino.UI.GetColorEventArgs.IncludeButtonColors
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.UI.GetColorEventArgs.InputColor
Return: Color
Modifiers: public
Accessors: get

Property: Rhino.UI.GetColorEventArgs.SelectedColor
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.UI.GetColorEventArgs.Title
Return: string
Modifiers: public
Accessors: get

Class: Rhino.UI.LOC
Summary: Used a placeholder which is used by LocalizationProcessor application to create contextId mapped localized strings.

Constructor: Rhino.UI.LOC.LOC()
Summary: Initializes a new instance of the LOC class

Method: Rhino.UI.LOC.COMMANDNAME(string english)
Return: string
Modifiers: public, static
Summary: Command names that need to be localized should call this function. The COMMANDNAME function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.COMMANDNAME and builds a record for each command name for the translators that can be used by developers in a commands overridden Rhino.Commands.Command.LocalName which should call Rhino.UI.Localization.LocalizeCommandName(EnglishName)
Parameter: english (string)
Parameter Summary: [in] The English string to localize.

Method: Rhino.UI.LOC.CON(string english, int contextid)
Return: LocalizeStringPair
Modifiers: public, static
Summary: DO NOT use this function, it is a trap to determine where context IDs have been copied from other, already extracted, strings.
Parameter: english (string)
Parameter Summary: The English name.
Parameter: contextid (int)
Parameter Summary: Copied context id.

Method: Rhino.UI.LOC.CON(string english, object assemblyFromObject)
Return: LocalizeStringPair
Modifiers: public, static
Summary: Command option name strings that need to be localized should call this function. The CON function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.CON. The function is then replaced with a call to Localization.LocalizeCommandOptionName using a unique context ID.
Parameter: english (string)
Parameter Summary: [in] The English string to localize.
Parameter: assemblyFromObject (object)
Parameter Summary: [in] The object that identifies the assembly that owns the command option name.

Method: Rhino.UI.LOC.CON(string english)
Return: LocalizeStringPair
Modifiers: public, static
Summary: Command option name strings that need to be localized should call this function. The CON function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.CON. The function is then replaced with a call to Localization.LocalizeCommandOptionName using a unique context ID.
Parameter: english (string)
Parameter Summary: [in] The English string to localize.

Method: Rhino.UI.LOC.COV(string english, object assemblyFromObject)
Return: LocalizeStringPair
Modifiers: public, static
Summary: Command option name strings that need to be localized should call this function. The COV function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.COV. The function is then replaced with a call to Localization.LocalizeCommandOptionValue using a unique context ID.
Parameter: english (string)
Parameter Summary: [in] The English string to localize.
Parameter: assemblyFromObject (object)
Parameter Summary: [in] The object that identifies the assembly that owns the command option value.

Method: Rhino.UI.LOC.COV(string english)
Return: LocalizeStringPair
Modifiers: public, static
Summary: Command option name strings that need to be localized should call this function. The COV function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.COV. The function is then replaced with a call to Localization.LocalizeCommandOptionValue using a unique context ID.
Parameter: english (string)
Parameter Summary: [in] The English string to localize.

Method: Rhino.UI.LOC.STR(string english, int contextid)
Return: string
Modifiers: public, static
Summary: DO NOT use this function, it is a trap to determine where context IDs have been copied from other, already extracted, strings.
Parameter: english (string)
Parameter Summary: The English name.
Parameter: contextid (int)
Parameter Summary: Copied context id.

Method: Rhino.UI.LOC.STR(string english, object assemblyOrObject)
Return: string
Modifiers: public, static
Summary: Similar to <b>string.Format(string, object)</b> function.
Parameter: english (string)
Parameter Summary: The English name.
Parameter: assemblyOrObject (object)
Parameter Summary: Unused.

Method: Rhino.UI.LOC.STR(string english)
Return: string
Modifiers: public, static
Summary: Strings that need to be localized should call this function. The STR function doesn't actually do anything but return the original string. The LocalizationProcessor application walks through the source code of a project and looks for LOC.STR. The function is then replaced with a call to Localization.LocalizeString using a unique context ID.
Parameter: english (string)
Parameter Summary: [in] The English string to localize.

Class: Rhino.UI.Localization

Constructor: Rhino.UI.Localization.Localization()
Summary: Initializes a new instance of the Localization class

Property: Rhino.UI.Localization.CurrentLanguageId
Return: int
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Localization.RunningAsEnglish
Return: bool
Modifiers: public, static
Accessors: get

Method: Rhino.UI.Localization.FormatArea(double area, UnitSystem units, Rhino.DocObjects.DimensionStyle dimStyle, bool alternate)
Return: string
Modifiers: public, static
Summary: Format an Area string from a number

Method: Rhino.UI.Localization.FormatDistanceAndTolerance(double distance, UnitSystem units, Rhino.DocObjects.DimensionStyle dimStyle, bool alternate)
Return: string
Modifiers: public, static
Parameter: distance (double)
Parameter Summary: 
Parameter: units (UnitSystem)
Parameter Summary: 
Parameter: dimStyle (Rhino.DocObjects.DimensionStyle)
Parameter Summary: 
Parameter: alternate (bool)
Parameter Summary: primary or alternate

Method: Rhino.UI.Localization.FormatNumber(double x, UnitSystem units, DistanceDisplayMode mode, int precision, bool appendUnitSystemName)
Return: string
Modifiers: public, static
Summary: Get a string version of a number in a given unit system / display mode.
Parameter: x (double)
Parameter Summary: The number to format into a string.
Parameter: units (UnitSystem)
Parameter Summary: The unit system for the number.
Parameter: mode (DistanceDisplayMode)
Parameter Summary: How the number should be formatted.
Parameter: precision (int)
Parameter Summary: The precision of the number.
Parameter: appendUnitSystemName (bool)
Parameter Summary: Adds unit system name to the end of the number.

Method: Rhino.UI.Localization.FormatNumber(double x)
Return: string
Modifiers: public, static
Summary: Get a string version of a number.
Parameter: x (double)
Parameter Summary: The number to format into a string.

Method: Rhino.UI.Localization.FormatVolume(double volume, UnitSystem units, Rhino.DocObjects.DimensionStyle dimStyle, bool alternate)
Return: string
Modifiers: public, static
Summary: Format a Volume string from a number

Method: Rhino.UI.Localization.GetLanguages(out SimpleArrayInt ids, out ClassArrayString names)
Return: bool
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeCommandName(string english, object assemblyOrObject)
Return: string
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeCommandName(string english)
Return: string
Modifiers: public, static
Summary: Commands that need to be localized should call this function.
Parameter: english (string)
Parameter Summary: The localized command name.

Method: Rhino.UI.Localization.LocalizeCommandOptionName(string english, int wrongcontextId, int contextId)
Return: LocalizeStringPair
Modifiers: public, static
Summary: DO NOT use this function, it is a trap to determine where context IDs have been copied from other, already extracted, strings.
Parameter: english (string)
Parameter Summary: The text in English.
Parameter: wrongcontextId (int)
Parameter Summary: The copied ID.
Parameter: contextId (int)
Parameter Summary: The context ID.

Method: Rhino.UI.Localization.LocalizeCommandOptionName(string english, int contextId)
Return: LocalizeStringPair
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeCommandOptionName(string english, object assemblyOrObject, int contextId)
Return: LocalizeStringPair
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeCommandOptionValue(string english, int contextId)
Return: LocalizeStringPair
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeCommandOptionValue(string english, object assemblyOrObject, int contextId)
Return: LocalizeStringPair
Modifiers: public, static

Method: Rhino.UI.Localization.LocalizeDialogItem(object assemblyOrObject, string key, string english)
Return: string
Modifiers: public, static
Summary: Look in the dialog item list for the specified key and return the translated localized string if the key is found otherwise return the English string.
Parameter: assemblyOrObject (object)
Parameter Summary: An assembly or an object from an assembly.
Parameter: key (string)
Parameter Summary: 
Parameter: english (string)
Parameter Summary: The text in English.

Method: Rhino.UI.Localization.LocalizeForm(object formOrUserControl)
Return: void
Modifiers: public, static
Summary: Look in the dialog item list for the specified key and return the translated localized string if the key is found otherwise return the English string.

Method: Rhino.UI.Localization.LocalizeString(string english, int wrongcontextId, int contextId)
Return: string
Modifiers: public, static
Summary: DO NOT use this function, it is a trap to determine where context IDs have been copied from other, already extracted, strings.
Parameter: english (string)
Parameter Summary: The text in English.
Parameter: wrongcontextId (int)
Parameter Summary: The copied ID.
Parameter: contextId (int)
Parameter Summary: The context ID.

Method: Rhino.UI.Localization.LocalizeString(string english, int contextId)
Return: string
Modifiers: public, static
Summary: Returns localized version of a given English string. This function should be auto-generated by the RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
Parameter: english (string)
Parameter Summary: The text in English.
Parameter: contextId (int)
Parameter Summary: The context ID.

Method: Rhino.UI.Localization.LocalizeString(string english, object assemblyOrObject, int contextId)
Return: string
Modifiers: public, static
Summary: Returns localized version of a given English string. This function should be auto-generated by the RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
Parameter: english (string)
Parameter Summary: The text in English.
Parameter: assemblyOrObject (object)
Parameter Summary: An assembly or an object from an assembly.
Parameter: contextId (int)
Parameter Summary: The context ID.

Method: Rhino.UI.Localization.SetLanguageId(int id)
Return: bool
Modifiers: public, static
Summary: Sets the Id used for Localization in RhinoCommon.  Only useful for when using RhinoCommon outside of the Rhino process

Method: Rhino.UI.Localization.UnitSystemName(UnitSystem units, bool capitalize, bool singular, bool abbreviate)
Return: string
Modifiers: public, static
Summary: Gets localized unit system name.  Uses current application locale id.
Parameter: units (UnitSystem)
Parameter Summary: The unit system.
Parameter: capitalize (bool)
Parameter Summary: True if the name should be capitalized.
Parameter: singular (bool)
Parameter Summary: True if the name is expressed for a singular element.
Parameter: abbreviate (bool)
Parameter Summary: True if name should be the abbreviation.

Class: Rhino.UI.LocalizeStringPair
Summary: Pair of strings used for localization.

Constructor: Rhino.UI.LocalizeStringPair.LocalizeStringPair(string english, string local)

Property: Rhino.UI.LocalizeStringPair.English
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.UI.LocalizeStringPair.Local
Return: string
Modifiers: public
Accessors: get set

Method: Rhino.UI.LocalizeStringPair.ToString()
Return: string
Modifiers: public, override

Class: Rhino.UI.MouseCallback
Summary: Used for intercepting mouse events in the Rhino views.

Constructor: Rhino.UI.MouseCallback.MouseCallback()
Summary: Initializes a new instance of the MouseCallback class

Property: Rhino.UI.MouseCallback.Enabled
Return: bool
Modifiers: public
Accessors: get set

Method: Rhino.UI.MouseCallback.OnEndMouseDown(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the end of handling of a mouse down event in Rhino. All of the default Rhino mouse down functionality has already been executed unless a MouseCallback has set Cancel to True for the event arguments. You can tell if this is the case by inspecting the Cancel property in the event arguments parameter. Base class implementation of this function does nothing

Method: Rhino.UI.MouseCallback.OnEndMouseMove(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the end of handling of a mouse move event in Rhino. All of the default Rhino mouse move functionality has already been executed unless a MouseCallback has set Cancel to True for the event arguments. You can tell if this is the case by inspecting the Cancel property in the event arguments parameter. Base class implementation of this function does nothing.

Method: Rhino.UI.MouseCallback.OnEndMouseUp(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the end of handling of a mouse up event in Rhino. All of the default Rhino mouse down functionality has already been executed unless a MouseCallback has set Cancel to True for the event arguments. You can tell if this is the case by inspecting the Cancel property in the event arguments parameter. Base class implementation of this function does nothing

Method: Rhino.UI.MouseCallback.OnMouseDoubleClick(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.MouseCallback.OnMouseDown(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the beginning of handling of a mouse down event in Rhino. If you don't want the default Rhino functionality to be run, then set Cancel to True on the passed in event arguments Base class implementation of this function does nothing

Method: Rhino.UI.MouseCallback.OnMouseEnter(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.MouseCallback.OnMouseHover(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.MouseCallback.OnMouseLeave(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.MouseCallback.OnMouseMove(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the beginning of handling of a mouse move event in Rhino. If you don't want the default Rhino functionality to be run, then set Cancel to True on the passed in event arguments. Base class implementation of this function does nothing.

Method: Rhino.UI.MouseCallback.OnMouseUp(MouseCallbackEventArgs e)
Return: void
Modifiers: protected, virtual
Summary: Called at the beginning of handling of a mouse up event in Rhino. If you don't want the default Rhino functionality to be run, then set Cancel to True on the passed in event arguments Base class implementation of this function does nothing

Class: Rhino.UI.MouseCallbackEventArgs

Property: Rhino.UI.MouseCallbackEventArgs.Button
Return: MouseButtons
Modifiers: public
Accessors: get

Property: Rhino.UI.MouseCallbackEventArgs.CtrlKeyDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.UI.MouseCallbackEventArgs.MouseButton
Return: MouseButton
Modifiers: public
Accessors: get

Property: Rhino.UI.MouseCallbackEventArgs.ShiftKeyDown
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.UI.MouseCallbackEventArgs.View
Return: RhinoView
Modifiers: public
Accessors: get

Property: Rhino.UI.MouseCallbackEventArgs.ViewportPoint
Return: Point
Modifiers: public
Accessors: get

Method: Rhino.UI.MouseCallbackEventArgs.IsOverGumball()
Return: Gumball.GumballMode
Modifiers: public

Class: Rhino.UI.MouseCursor
Summary: Contains static methods to control the mouse icon.

Constructor: Rhino.UI.MouseCursor.MouseCursor()
Summary: Initializes a new instance of the MouseCursor class

Property: Rhino.UI.MouseCursor.Location
Return: Point2d
Modifiers: public, static
Summary: Retrieves the position of the mouse cursor, in screen coordinates
Accessors: get

Method: Rhino.UI.MouseCursor.SetToolTip(string tooltip)
Return: void
Modifiers: public, static
Summary: Sets a cursor tooltip string shown next to the mouse cursor. Overrides all cursor tooltip panes.
Parameter: tooltip (string)
Parameter Summary: The text to show.

Class: Rhino.UI.NamedColor
Summary: An entry with name and color for the <b>NamedColorList</b>

Constructor: Rhino.UI.NamedColor.NamedColor(string name, Color color)
Summary: Initializes a new instance of the ColorListEntry with the specified name and color.

Property: Rhino.UI.NamedColor.Color
Return: Color
Modifiers: public
Summary: Gets the color for this entry.
Accessors: get

Property: Rhino.UI.NamedColor.Name
Return: string
Modifiers: public
Summary: Gets the name of this color to show to the user.
Accessors: get

Class: Rhino.UI.NamedColorList
Summary: A list of color name/value pairs.

Constructor: Rhino.UI.NamedColorList.NamedColorList(string name, IEnumerable<NamedColor> entries)
Summary: Initializes a new instance of the ColorList with the specified name and entries.

Constructor: Rhino.UI.NamedColorList.NamedColorList(string name)
Summary: Initializes a new instance of the ColorList with the specified name.

Property: Rhino.UI.NamedColorList.Default
Return: NamedColorList
Modifiers: public, static
Summary: Get the Rhino applications named color list.
Accessors: get

Property: Rhino.UI.NamedColorList.Name
Return: string
Modifiers: public
Summary: The name of the color list, which may be displayed to the user.
Accessors: get set

Class: Rhino.UI.ObjectPropertiesPage
Summary: Base class used to add object property user interface panels

Constructor: Rhino.UI.ObjectPropertiesPage.ObjectPropertiesPage()
Summary: Initializes a new instance of the ObjectPropertiesPage class

Property: Rhino.UI.ObjectPropertiesPage.AllObjectsMustBeSupported
Return: bool
Modifiers: public, virtual
Summary: Returns False which only requires a single item of SupportedTypes to be selected.  Override if you wish to change the above behavior.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.EnglishPageTitle
Return: string
Modifiers: public, abstract
Summary: English string used to describe this page
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.Icon
Return: Icon
Modifiers: public, virtual
Summary: (OBSOLETE - Override PageIcon instead) Icon to display in the object properties tab control
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.Index
Return: int
Modifiers: public, virtual
Summary: The page navigation control adds buttons in the order the pages are processed, override this method and return a sort index to move the button to the beginning of the list.  By default this returns -1 which puts the button at the end of the list.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.LocalPageTitle
Return: string
Modifiers: public, virtual
Summary: Localized page description string, returns the EnglishPageTitle by default.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.PageControl
Return: object
Modifiers: public, virtual
Summary: The control that represents this page. Rhino Windows supports classes that implement the IWin32Windows interface, are derived from System.Windows.FrameworkElement or Eto.Forms.Control.  Mac Rhino supports controls that are derived from NSview or Eto.Forms.Control.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.PageIconEmbeddedResourceString
Return: string
Modifiers: public, virtual
Summary: Resource string for a embedded icon resource in the assembly containing the page instance.  If this returns a valid resource and Rhino can load the icon the loaded icon will get used directly otherwise; the PageIcon method will get called.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.PageType
Return: PropertyPageType
Modifiers: public, virtual
Summary: Override this and return the page you want to replace a specific object properties page.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.SelectedObjects
Return: RhinoObject[]
Modifiers: public
Summary: Return a list of Rhino objects to be processed by this object properties page
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.SupportedTypes
Return: ObjectType
Modifiers: public, virtual
Summary: Override to specify which objects this page supports
Accessors: get

Property: Rhino.UI.ObjectPropertiesPage.SupportsSubObjects
Return: bool
Modifiers: public, virtual
Summary: If your object properties page supports sub-object selection, you should override this method and return true.  This is ignored for view pages.  The default implementation returns false.
Accessors: get

Method: Rhino.UI.ObjectPropertiesPage.AnySelectedObject()
Return: bool
Modifiers: public
Summary: Return True if any of the selected objects match the given type

Method: Rhino.UI.ObjectPropertiesPage.AnySelectedObject(bool allMustMatch)
Return: bool
Modifiers: public
Summary: Return True if any of the selected objects match the given type
Parameter: allMustMatch (bool)
Parameter Summary: If True then every selected object must match the object type otherwise; only a single object has to be of the specified type

Method: Rhino.UI.ObjectPropertiesPage.GetSelectedObjects()
Return: T[]
Modifiers: public
Summary: Get selected objects of a given type

Method: Rhino.UI.ObjectPropertiesPage.GetSelectedObjects(ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Get selected objects that match a given filter

Method: Rhino.UI.ObjectPropertiesPage.InitializeControls(RhinoObject rhObj)
Return: void
Modifiers: public, virtual
Summary: Called on the active page after the selected objects list has changed to notify the page to initialize its content to reflect the new object list.

Method: Rhino.UI.ObjectPropertiesPage.ModifyPage(Action<ObjectPropertiesPageEventArgs> callbackAction)
Return: void
Modifiers: public
Summary: Call this method when the page is ready to modify the selected objects list.  Rhino will suspend UpdatePageNotfictaion, call the passed action then restore UpdatePageNotfictaion.
Parameter: callbackAction (Action<ObjectPropertiesPageEventArgs>)
Parameter Summary: Called when it is safe to modify objects.

Method: Rhino.UI.ObjectPropertiesPage.OnActivate(bool active)
Return: bool
Modifiers: public, virtual
Summary: Called when this page is activated/deactivated.
Parameter: active (bool)
Parameter Summary: If True then this page is on top otherwise it is about to be hidden.

Method: Rhino.UI.ObjectPropertiesPage.OnCreateParent(System.IntPtr hwndParent)
Return: void
Modifiers: public, virtual
Summary: Called when the parent container is initially created.

Method: Rhino.UI.ObjectPropertiesPage.OnHelp()
Return: void
Modifiers: public, virtual
Summary: Called when the F1 key or help button is pressed, override to display plug-in specific help for this page.

Method: Rhino.UI.ObjectPropertiesPage.OnSizeParent(int width, int height)
Return: void
Modifiers: public, virtual
Summary: Called when the parent containers client rectangle size has changed and the PageControl has been resized.

Method: Rhino.UI.ObjectPropertiesPage.PageIcon(System.Drawing.Size sizeInPixels)
Return: System.Drawing.Icon
Modifiers: public, virtual
Summary: Icon to display in the object properties tab control.  Will not get called if PageIconEmbeddedResourceString is overridden and provides a string for a successfully loaded icon resource.
Parameter: sizeInPixels (System.Drawing.Size)
Parameter Summary: The requested icon size in pixels, DPI scaling has been applied.  The default value is 24 X DPI scale.

Method: Rhino.UI.ObjectPropertiesPage.RunScript(ObjectPropertiesPageEventArgs e)
Return: Commands.Result
Modifiers: public, virtual
Summary: This method is called when scripting the Rhino Properties command and choosing this page.
Parameter: e (ObjectPropertiesPageEventArgs)
Parameter Summary: Provides access to the selected object list and document.

Method: Rhino.UI.ObjectPropertiesPage.RunScript(RhinoDoc doc, RhinoObject[] objectList)
Return: Commands.Result
Modifiers: public, virtual
Summary: This method is called when scripting the Rhino Properties command and choosing this page.
Parameter: doc (RhinoDoc)
Parameter Summary: Active <b>RhinoDoc</b>
Parameter: objectList (RhinoObject[])
Parameter Summary: List of objects selected by the Properties command.

Method: Rhino.UI.ObjectPropertiesPage.ShouldDisplay(ObjectPropertiesPageEventArgs e)
Return: bool
Modifiers: public, virtual
Summary: Called when the selected objects list changes, return True if the object list contains one or more object the page can modify.

Method: Rhino.UI.ObjectPropertiesPage.ShouldDisplay(RhinoObject rhObj)
Return: bool
Modifiers: public, virtual
Summary: Called when the selected objects list changes, return True if the object list contains one or more object the page can modify.

Method: Rhino.UI.ObjectPropertiesPage.UpdatePage(ObjectPropertiesPageEventArgs e)
Return: void
Modifiers: public, virtual
Summary: Called on the active page after the selected objects list has changed to notify the page to initialize its content to reflect the new object list.

Class: Rhino.UI.ObjectPropertiesPageCollection
Summary: Passed to Rhino.PlugIns.PlugIn.ObjectPropertiesPages to allow a plug-in to add custom ObjectPropertiesPage pages to the Rhino properties panel.

Property: Rhino.UI.ObjectPropertiesPageCollection.Document
Return: RhinoDoc
Modifiers: public
Summary: Document associated with the Rhino properties panel.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageCollection.DocumentRuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Document associated with the Rhino properties panel.
Accessors: get

Method: Rhino.UI.ObjectPropertiesPageCollection.Add(ObjectPropertiesPage page)
Return: void
Modifiers: public
Summary: Custom page to add

Class: Rhino.UI.ObjectPropertiesPageEventArgs

Constructor: Rhino.UI.ObjectPropertiesPageEventArgs.ObjectPropertiesPageEventArgs(ObjectPropertiesPage page)
Summary: Used by <b>ObjectPropertiesPage</b> to notify the page when updating, modifying or determining if the page should be included in the navigation bar

Property: Rhino.UI.ObjectPropertiesPageEventArgs.DocRuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Document containing the objects and views
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.Document
Return: RhinoDoc
Modifiers: public
Summary: Document containing the objects and views
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.EventRuntimeSerialNumber
Return: uint
Modifiers: public
Summary: Gets the runtime serial number.
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.ObjectCount
Return: int
Modifiers: public
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.Objects
Return: RhinoObject[]
Modifiers: public
Summary: Return a list of Rhino objects to be processed by this object properties page
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.ObjectTypes
Return: uint
Modifiers: public
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.Page
Return: ObjectPropertiesPage
Modifiers: public
Summary: The page sending these arguments
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.View
Return: RhinoView
Modifiers: public
Summary: Active view
Accessors: get

Property: Rhino.UI.ObjectPropertiesPageEventArgs.Viewport
Return: RhinoViewport
Modifiers: public
Summary: Active viewport
Accessors: get

Method: Rhino.UI.ObjectPropertiesPageEventArgs.GetObjects()
Return: T[]
Modifiers: public
Summary: Get selected objects of a given type

Method: Rhino.UI.ObjectPropertiesPageEventArgs.GetObjects(ObjectType filter)
Return: RhinoObject[]
Modifiers: public
Summary: Get selected objects that match a given filter

Method: Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType()
Return: bool
Modifiers: public
Summary: Return True if any of the selected objects match the given type

Method: Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType(bool allMustMatch)
Return: bool
Modifiers: public
Summary: Return True if any of the selected objects match the given type
Parameter: allMustMatch (bool)
Parameter Summary: If True then every selected object must match the object type otherwise; only a single object has to be of the specified type

Method: Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType(ObjectType objectTypes, bool allMustMatch)
Return: bool
Modifiers: public
Parameter: objectTypes (ObjectType)
Parameter Summary: 
Parameter: allMustMatch (bool)
Parameter Summary: If True then every selected object must match the object type otherwise; only a single object has to be of the specified type

Method: Rhino.UI.ObjectPropertiesPageEventArgs.IncludesObjectsType(ObjectType objectTypes)
Return: bool
Modifiers: public

Class: Rhino.UI.OpenFileDialog
Summary: Similar to the System.Windows.Forms.OpenFileDialog, but with customized Rhino user interface.

Constructor: Rhino.UI.OpenFileDialog.OpenFileDialog()
Summary: Create a new open file dialog.

Property: Rhino.UI.OpenFileDialog.DefaultExt
Return: string
Modifiers: public
Summary: The default file name extension. The returned string does not include the period.
Accessors: get set

Property: Rhino.UI.OpenFileDialog.FileName
Return: string
Modifiers: public
Summary: Gets or sets a string containing the file name selected in the file dialog box.
Accessors: get set

Property: Rhino.UI.OpenFileDialog.FileNames
Return: string[]
Modifiers: public
Summary: Gets the names of all of the selected files in the dialog box
Accessors: get set

Property: Rhino.UI.OpenFileDialog.Filter
Return: string
Modifiers: public
Summary: Gets or sets the current file name filter string, which determines the choices that appear in the "Save as file type" or "Files of type" box in the dialog box. See System.Windows.Forms.FileDialog for details.
Accessors: get set

Property: Rhino.UI.OpenFileDialog.InitialDirectory
Return: string
Modifiers: public
Summary: Gets or sets the initial directory displayed by the file dialog box.
Accessors: get set

Property: Rhino.UI.OpenFileDialog.MultiSelect
Return: bool
Modifiers: public
Summary: Gets or sets a value indicating whether the dialog box allows multiple files to be selected
Accessors: get set

Property: Rhino.UI.OpenFileDialog.Title
Return: string
Modifiers: public
Summary: Gets or sets the file dialog box title.
Accessors: get set

Method: Rhino.UI.OpenFileDialog.ShowDialog()
Return: System.Windows.Forms.DialogResult
Modifiers: public

Method: Rhino.UI.OpenFileDialog.ShowOpenDialog()
Return: bool
Modifiers: public
Summary: Show the actual dialog to allow the user to select a file.

Class: Rhino.UI.OptionsDialogPage

Constructor: Rhino.UI.OptionsDialogPage.OptionsDialogPage(string englishPageTitle)

Property: Rhino.UI.OptionsDialogPage.OptionsPageType
Return: PageType
Modifiers: public
Summary: 17 March 2021 John Morse For internal use in determining the page type.  RhinoMac uses this to ensure pages are sized properly when hosting them.
Accessors: get set

Method: Rhino.UI.OptionsDialogPage.RunScript(RhinoDoc doc, Commands.RunMode mode)
Return: Commands.Result
Modifiers: public, virtual

Class: Rhino.UI.PanelEventArgs
Summary: Panels.Show event arguments

Constructor: Rhino.UI.PanelEventArgs.PanelEventArgs(Guid panelId, uint documentSerialNumber)

Property: Rhino.UI.PanelEventArgs.Document
Return: RhinoDoc
Modifiers: public
Accessors: get

Property: Rhino.UI.PanelEventArgs.DocumentSerialNumber
Return: uint
Modifiers: public
Accessors: get set

Property: Rhino.UI.PanelEventArgs.PanelId
Return: Guid
Modifiers: public
Summary: Class Id for panel being shown or hidden
Accessors: get set

Class: Rhino.UI.PanelIds
Summary: Standard Rhino panel ids.

Constructor: Rhino.UI.PanelIds.PanelIds()
Summary: Initializes a new instance of the PanelIds class

Property: Rhino.UI.PanelIds.BoxEdit
Return: Guid
Modifiers: public, static
Summary: Rhino BoxEdit panel.
Accessors: get

Property: Rhino.UI.PanelIds.ContextHelp
Return: Guid
Modifiers: public, static
Summary: Rhino Context-Sensitive Help panel.
Accessors: get

Property: Rhino.UI.PanelIds.Display
Return: Guid
Modifiers: public, static
Summary: Rhino Display Properties panel.
Accessors: get

Property: Rhino.UI.PanelIds.Environment
Return: Guid
Modifiers: public, static
Summary: Rhino Environment panel.
Accessors: get

Property: Rhino.UI.PanelIds.FileExplorer
Return: Guid
Modifiers: public, static
Summary: Rhino File Explorer panel.
Accessors: get

Property: Rhino.UI.PanelIds.GroundPlane
Return: Guid
Modifiers: public, static
Summary: Rhino Ground Plane panel.
Accessors: get

Property: Rhino.UI.PanelIds.Layers
Return: Guid
Modifiers: public, static
Summary: Rhino Layer panel.
Accessors: get

Property: Rhino.UI.PanelIds.Libraries
Return: Guid
Modifiers: public, static
Summary: Rhino Render Libraries panel.
Accessors: get

Property: Rhino.UI.PanelIds.LightManager
Return: Guid
Modifiers: public, static
Summary: Rhino Lights panel.
Accessors: get

Property: Rhino.UI.PanelIds.Materials
Return: Guid
Modifiers: public, static
Summary: Rhino Materials panel.
Accessors: get

Property: Rhino.UI.PanelIds.Notes
Return: Guid
Modifiers: public, static
Summary: Rhino Notes panel.
Accessors: get

Property: Rhino.UI.PanelIds.ObjectProperties
Return: Guid
Modifiers: public, static
Summary: Rhino Object Properties panel.
Accessors: get

Property: Rhino.UI.PanelIds.Rendering
Return: Guid
Modifiers: public, static
Summary: Rhino Rendering Properties panel.
Accessors: get

Property: Rhino.UI.PanelIds.Sun
Return: Guid
Modifiers: public, static
Summary: Rhino Sun panel.
Accessors: get

Property: Rhino.UI.PanelIds.Texture
Return: Guid
Modifiers: public, static
Summary: Rhino Texture panel.
Accessors: get

Class: Rhino.UI.Panels
Summary: Access to Rhino panels and register custom panels

Constructor: Rhino.UI.Panels.Panels()
Summary: Initializes a new instance of the Panels class

Property: Rhino.UI.Panels.EtoPanelStyleName
Return: string
Modifiers: public, static
Summary: Style applied to Eto controls hosted by the Rhino.UI.Panels and Rhino.UI.ObjectProperties systems.
Accessors: get

Property: Rhino.UI.Panels.IconSize
Return: Size
Modifiers: public, static
Summary: Gets the panel icon size in logical units.
Accessors: get

Property: Rhino.UI.Panels.IconSizeInPixels
Return: Size
Modifiers: public, static
Summary: Gets the panel icon size in pixels.
Accessors: get

Property: Rhino.UI.Panels.ScaledIconSize
Return: Size
Modifiers: public, static
Summary: Gets the panel icon size in pixels with DPI scaling applied.
Accessors: get

Method: Rhino.UI.Panels.ChangePanelIcon(System.Type panelType, string fullPathToResource)
Return: void
Modifiers: public, static
Summary: Update the icon used for a panel tab.
Parameter: panelType (System.Type)
Parameter Summary: 
Parameter: fullPathToResource (string)
Parameter Summary: Full path to the new icon resource

Method: Rhino.UI.Panels.ChangePanelIcon(System.Type panelType, System.Drawing.Icon icon)
Return: void
Modifiers: public, static
Summary: Update the icon used for a panel tab.
Parameter: panelType (System.Type)
Parameter Summary: 
Parameter: icon (System.Drawing.Icon)
Parameter Summary: New icon to use

Method: Rhino.UI.Panels.ClosePanel(System.Guid panelId, RhinoDoc doc)
Return: void
Modifiers: public, static
Summary: Will close or hide the specified panel type, in Windows Rhino, if it is the only visible tab the tab dock bar will be closed as well.  In Mac Rhino it will always close the modeless dialog hosting the panel.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id of the panel to close.
Parameter: doc (RhinoDoc)
Parameter Summary: Document associated with panel you wish to close.

Method: Rhino.UI.Panels.ClosePanel(System.Guid panelId)
Return: void
Modifiers: public, static
Summary: Will close or hide the specified panel type, in Windows Rhino, if it is the only visible tab the tab dock bar will be closed as well.  In Mac Rhino it will always close the modeless dialog hosting the panel.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id of the panel to close.

Method: Rhino.UI.Panels.ClosePanel(System.Type panelType, RhinoDoc doc)
Return: void
Modifiers: public, static
Summary: Will close or hide the specified panel type, in Windows Rhino, if it is the only visible tab the tab dock bar will be closed as well.  In Mac Rhino it will always close the modeless dialog hosting the panel.
Parameter: panelType (System.Type)
Parameter Summary: Class type of the panel to close.
Parameter: doc (RhinoDoc)
Parameter Summary: Document associated with panel you wish to close.

Method: Rhino.UI.Panels.ClosePanel(System.Type panelType)
Return: void
Modifiers: public, static
Summary: Will close or hide the specified panel type, in Windows Rhino, if it is the only visible tab the tab dock bar will be closed as well.  In Mac Rhino it will always close the modeless dialog hosting the panel.
Parameter: panelType (System.Type)
Parameter Summary: Class type of the panel to close.

Method: Rhino.UI.Panels.DockBarIdInUse(System.Guid dockBarId)
Return: bool
Modifiers: public, static
Summary: For internal use, call this method to see if a dock bar Id is currently being used by any Rhino dock bar. Rhino

Method: Rhino.UI.Panels.FloatPanel(System.Guid panelTypeId, FloatPanelMode mode)
Return: bool
Modifiers: public, static
Summary: Mac support: Display the specified panel in a floating window on Mac, the floating window will only contain the specified panel.  Windows support: On Windows this will show or hide the floating container containing the specified panel.  If the tab is docked with other tabs it will be floated in a new container.
Parameter: panelTypeId (System.Guid)
Parameter Summary: Guid for the panel type to show/hide.
Parameter: mode (FloatPanelMode)
Parameter Summary: Show, hide or toggle the visibility state of the specified panel

Method: Rhino.UI.Panels.FloatPanel(System.Type panelType, FloatPanelMode mode)
Return: bool
Modifiers: public, static
Summary: Mac support: Display the specified panel in a floating window on Mac, the floating window will only contain the specified panel.  Windows support: On Windows this will show or hide the floating container containing the specified panel.  If the tab is docked with other tabs it will be floated in a new container.
Parameter: panelType (System.Type)
Parameter Summary: Panel type to show/hide.
Parameter: mode (FloatPanelMode)
Parameter Summary: Show, hide or toggle the visibility state of the specified panel

Method: Rhino.UI.Panels.GetOpenPanelIds()
Return: System.Guid[]
Modifiers: public, static
Summary: Get a list of the currently open panel tabs in Windows Rhino, on Mac Rhino it will be a list of the currently visible modeless panel dialogs.

Method: Rhino.UI.Panels.GetPanel()
Return: T
Modifiers: public, static
Summary: Return an instance of a .Net panel

Method: Rhino.UI.Panels.GetPanel(RhinoDoc rhinoDoc)
Return: T
Modifiers: public, static
Summary: Return an instance of a .Net panel
Parameter: rhinoDoc (RhinoDoc)
Parameter Summary: Runtime document Id associated with the requested panel.

Method: Rhino.UI.Panels.GetPanel(System.Guid panelId, RhinoDoc rhinoDoc)
Return: object
Modifiers: public, static
Summary: Will return an instance of a .Net panel if the panel has been displayed at least once.  Panel instances are not created until a panel is displayed.
Parameter: panelId (System.Guid)
Parameter Summary: Class Id of the panel to search for.
Parameter: rhinoDoc (RhinoDoc)
Parameter Summary: Runtime document Id associated with the requested panel.

Method: Rhino.UI.Panels.GetPanel(System.Guid panelId, uint documentSerialNumber)
Return: object
Modifiers: public, static
Summary: Will return an instance of a .Net panel if the panel has been displayed at least once.  Panel instances are not created until a panel is displayed.
Parameter: panelId (System.Guid)
Parameter Summary: Class Id of the panel to search for.
Parameter: documentSerialNumber (uint)
Parameter Summary: Runtime document Id associated with the requested panel.

Method: Rhino.UI.Panels.GetPanel(System.Guid panelId)
Return: object
Modifiers: public, static
Summary: Will return an instance of a .Net panel if the panel has been displayed at least once.  Panel instances are not created until a panel is displayed.
Parameter: panelId (System.Guid)
Parameter Summary: Class Id of the panel to search for.

Method: Rhino.UI.Panels.GetPanel(uint documentSerialNumber)
Return: T
Modifiers: public, static
Summary: Return an instance of a .Net panel
Parameter: documentSerialNumber (uint)
Parameter Summary: Runtime document Id associated with the requested panel.

Method: Rhino.UI.Panels.GetPanels(RhinoDoc doc)
Return: T[]
Modifiers: public, static

Method: Rhino.UI.Panels.GetPanels(System.Guid panelId, RhinoDoc doc)
Return: object
Modifiers: public, static
Summary: Gets the panels.
Parameter: panelId (System.Guid)
Parameter Summary: Panel identifier.
Parameter: doc (RhinoDoc)
Parameter Summary: Document.

Method: Rhino.UI.Panels.GetPanels(System.Guid panelId, uint documentRuntimeSerialNumber)
Return: object
Modifiers: public, static
Summary: Gets the panels.
Parameter: panelId (System.Guid)
Parameter Summary: Panel identifier.
Parameter: documentRuntimeSerialNumber (uint)
Parameter Summary: Document runtime serial number.

Method: Rhino.UI.Panels.[] GetPanels(uint documentRuntimeSerialNumber)
Return: T
Modifiers: public, static
Summary: Gets the panels.
Parameter: documentRuntimeSerialNumber (uint)
Parameter Summary: Document runtime serial number.

Method: Rhino.UI.Panels.IsHiding(ShowPanelReason reason)
Return: bool
Modifiers: public, static
Summary: Check to see if reason is equal to any of the show events

Method: Rhino.UI.Panels.IsPanelVisible(System.Guid panelId, bool isSelectedTab)
Return: bool
Modifiers: public, static
Summary: Check to see if a panel is currently visible, if isSelectedTab is True then the tab must be the active tab as well.
Parameter: panelId (System.Guid)
Parameter Summary: Class Id for the panel to check.
Parameter: isSelectedTab (bool)
Parameter Summary: This parameter is ignored on Mac.  If Windows and True the panel must be visible in a container and if it is a tabbed container it must be the active tab to be true.

Method: Rhino.UI.Panels.IsPanelVisible(System.Guid panelId)
Return: bool
Modifiers: public, static
Summary: Check to see if a panel is currently visible, on Windows this means you can see the tab, it does not necessarily mean it is the current tab.
Parameter: panelId (System.Guid)
Parameter Summary: Class Id for the panel to check.

Method: Rhino.UI.Panels.IsPanelVisible(System.Type panelType, bool isSelectedTab)
Return: bool
Modifiers: public, static
Summary: Check to see if a panel is currently visible, if isSelectedTab is True then the tab must be the active tab as well.
Parameter: panelType (System.Type)
Parameter Summary: Type of panel to check for, this type must include a GUID attribute.
Parameter: isSelectedTab (bool)
Parameter Summary: This parameter is ignored on Mac.  If Windows and True the panel must be visible in a container and if it is a tabbed container it must be the active tab to be true.

Method: Rhino.UI.Panels.IsPanelVisible(System.Type panelType)
Return: bool
Modifiers: public, static
Summary: Check to see if a panel is currently visible, on Windows this means you can see the tab, it does not necessarily mean it is the current tab.
Parameter: panelType (System.Type)
Parameter Summary: Type of panel to check for, this type must include a GUID attribute.

Method: Rhino.UI.Panels.IsShowing(ShowPanelReason reason)
Return: bool
Modifiers: public, static
Summary: Check to see if reason is equal to any of the hide events

Method: Rhino.UI.Panels.OnClosePanel(System.Guid panelId, uint documentSerialNumber)
Return: void
Modifiers: public, static
Summary: Call this method to raise the Closed event
Parameter: panelId (System.Guid)
Parameter Summary: Panel identifier.
Parameter: documentSerialNumber (uint)
Parameter Summary: The document associated with the closed panel.

Method: Rhino.UI.Panels.OnShowPanel(System.Guid panelId, uint documentSerialNumber, bool show)
Return: void
Modifiers: public, static
Summary: Call this method to raise the Show event
Parameter: panelId (System.Guid)
Parameter Summary: 
Parameter: documentSerialNumber (uint)
Parameter Summary: The document associated with the shown/hidden panel.
Parameter: show (bool)
Parameter Summary:

Method: Rhino.UI.Panels.OpenPanel(System.Guid panelId, bool makeSelectedPanel)
Return: void
Modifiers: public, static
Summary: Open the specified panel in its current or default location and if it is in a dock bar containing more than one tab, make it the current tab.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id for the panel to open.
Parameter: makeSelectedPanel (bool)
Parameter Summary: If True then the panel is set as the active tab after opening it otherwise; the panel is opened but not set as the active tab.

Method: Rhino.UI.Panels.OpenPanel(System.Guid dockBarId, System.Guid panelId, bool makeSelectedPanel)
Return: System.Guid
Modifiers: public, static
Summary: In Mac Rhino this will just call the version of OpenPanel that takes a class type Id.  In Windows Rhino this will look for a dock bar with the specified Id and open or move the specified panel to that dock bar.
Parameter: dockBarId (System.Guid)
Parameter Summary: Id of the dock bar hosting one or more panels.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id for the panel to open.
Parameter: makeSelectedPanel (bool)
Parameter Summary: If True then the panel is set as the active tab after opening it otherwise; the panel is opened but not set as the active tab.

Method: Rhino.UI.Panels.OpenPanel(System.Guid dockBarId, System.Guid panelId)
Return: System.Guid
Modifiers: public, static
Summary: In Mac Rhino this will just call the version of OpenPanel that takes a class type Id.  In Windows Rhino this will look for a dock bar with the specified Id and open or move the specified panel to that dock bar.
Parameter: dockBarId (System.Guid)
Parameter Summary: Id of the dock bar hosting one or more panels.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id for the panel to open.

Method: Rhino.UI.Panels.OpenPanel(System.Guid dockBarId, System.Type panelType, bool makeSelectedPanel)
Return: System.Guid
Modifiers: public, static
Summary: In Mac Rhino this will just call the version of OpenPanel that takes a class type Id.  In Windows Rhino this will look for a dock bar with the specified Id and open or move the specified panel to that dock bar.
Parameter: dockBarId (System.Guid)
Parameter Summary: Id of the dock bar hosting one or more panels.
Parameter: panelType (System.Type)
Parameter Summary: Class type for the panel to open.
Parameter: makeSelectedPanel (bool)
Parameter Summary: If True then the panel is set as the active tab after opening it otherwise; the panel is opened but not set as the active tab.

Method: Rhino.UI.Panels.OpenPanel(System.Guid dockBarId, System.Type panelType)
Return: System.Guid
Modifiers: public, static
Summary: In Mac Rhino this will just call the version of OpenPanel that takes a class type Id.  In Windows Rhino this will look for a dock bar with the specified Id and open or move the specified panel to that dock bar.
Parameter: dockBarId (System.Guid)
Parameter Summary: Id of the dock bar hosting one or more panels.
Parameter: panelType (System.Type)
Parameter Summary: Class type for the panel to open.

Method: Rhino.UI.Panels.OpenPanel(System.Guid panelId)
Return: void
Modifiers: public, static
Summary: Open the specified panel in its current or default location and if it is in a dock bar containing more than one tab, make it the current tab.
Parameter: panelId (System.Guid)
Parameter Summary: Class type Id for the panel to open.

Method: Rhino.UI.Panels.OpenPanel(System.Type panelType, bool makeSelectedPanel)
Return: void
Modifiers: public, static
Summary: Open the specified panel in its current or default location and if it is in a dock bar containing more than one tab, make it the current tab.
Parameter: panelType (System.Type)
Parameter Summary: Class type of the panel to open.
Parameter: makeSelectedPanel (bool)
Parameter Summary: If True then the panel is set as the active tab after opening it otherwise; the panel is opened but not set as the active tab.

Method: Rhino.UI.Panels.OpenPanel(System.Type panelType)
Return: void
Modifiers: public, static
Summary: Open the specified panel in its current or default location and if it is in a dock bar containing more than one tab, make it the current tab.
Parameter: panelType (System.Type)
Parameter Summary: Class type of the panel to open.

Method: Rhino.UI.Panels.OpenPanelAsSibling(System.Guid panelId, System.Guid siblingPanelId, bool makeSelectedPanel)
Return: bool
Modifiers: public, static
Summary: In Mac Rhino this will currently just call OpenPanel, in Windows Rhino this will look for a dock bar which contains the sibling panel and add this panel to that dock bar as necessary, if the panel was in another dock bar it will be moved to this dock bar.
Parameter: panelId (System.Guid)
Parameter Summary: The class Id of the panel type to open.
Parameter: siblingPanelId (System.Guid)
Parameter Summary: The class Id of the sibling panel.
Parameter: makeSelectedPanel (bool)
Parameter Summary: If True then the panel is set as the active tab after opening it otherwise; the panel is opened but not set as the active tab.

Method: Rhino.UI.Panels.OpenPanelAsSibling(System.Guid panelId, System.Guid siblingPanelId)
Return: bool
Modifiers: public, static
Summary: In Mac Rhino this will currently just call OpenPanel, in Windows Rhino this will look for a dock bar which contains the sibling panel and add this panel to that dock bar as necessary, if the panel was in another dock bar it will be moved to this dock bar.
Parameter: panelId (System.Guid)
Parameter Summary: The class Id of the panel type to open.
Parameter: siblingPanelId (System.Guid)
Parameter Summary: The class Id of the sibling panel.

Method: Rhino.UI.Panels.PanelDockBar(System.Guid panelId)
Return: System.Guid
Modifiers: public, static
Summary: Will always return Guid.Empty in Mac Rhino.  In Windows Rhino it will look for the dock bar which contains the specified panel class Id and return the dock bar Id.
Parameter: panelId (System.Guid)
Parameter Summary: Panel class Id for of the panel to look for.

Method: Rhino.UI.Panels.PanelDockBar(System.Type panelType)
Return: System.Guid
Modifiers: public, static
Summary: Will always return Guid.Empty in Mac Rhino.  In Windows Rhino it will look for the dock bar which contains the specified panel class Id and return the dock bar Id.
Parameter: panelType (System.Type)
Parameter Summary: Panel class for of the panel to look for.

Method: Rhino.UI.Panels.PanelDockBars(System.Guid panelId)
Return: System.Guid[]
Modifiers: public, static
Summary: Will always return a empty array in Mac Rhino.  In Windows Rhino it will look for any panel dock bars that contain the specified panel class Id and return the dock bar Id's.
Parameter: panelId (System.Guid)
Parameter Summary: Panel class Id for of the panel to look for.

Method: Rhino.UI.Panels.RegisterPanel(PlugIns.PlugIn plugIn, System.Type type, string caption, System.Drawing.Icon icon, PanelType panelType)
Return: void
Modifiers: public, static
Summary: Call once to register a panel type which will get dynamically created and embedded in a Rhino docking/floating location.
Parameter: plugIn (PlugIns.PlugIn)
Parameter Summary: Plug-in restringing the panel
Parameter: type (System.Type)
Parameter Summary: Type of the control object to be displayed in the panel
Parameter: caption (string)
Parameter Summary: Panel caption also used as a tool-tip.  On Windows the panel may be displayed using the icon, caption or both.  On Mac the icon will be used and the caption will be the tool-tip.
Parameter: icon (System.Drawing.Icon)
Parameter Summary: The panel icon.  On Windows the panel may be displayed using the icon, caption or both.  On Mac the icon will be used and the caption will be the tool-tip.
Parameter: panelType (PanelType)
Parameter Summary: See <b>PanelType</b>

Method: Rhino.UI.Panels.RegisterPanel(PlugIns.PlugIn plugin, System.Type panelType, string caption, System.Drawing.Icon icon)
Return: void
Modifiers: public, static
Summary: You typically register your panel class in your plug-in's OnLoad function.  This will register your custom call with Rhino, Rhino will create an instance of your class the first time your panel is created and embed this instance of your class in a panel container.
Parameter: plugin (PlugIns.PlugIn)
Parameter Summary: Plug-in this panel is associated with
Parameter: panelType (System.Type)
Parameter Summary: Class type to construct when a panel is shown.  If your class is derived from Eto.Forms.Control it will work on both the Mac and Windows version of Rhino.  In addition Windows Rhino will support any class types that implement the IWin32Window interface or that are derived from System.Windows.FrameworkElement.  Mac Rhino will also support classes that are derived from NsView.  In addition to the type requirements the class must have a public constructor with no parameters or a constructor with a single uint that represents the document serial number and have a GuidAttribute applied with a unique Id.  n Windows there is only one panel created which gets recycled for each new document.  On the Mac a panel will be created for each open document and destroyed when the document closes.  In certain situations in Mac Rhino a a panel may get created and destroyed multiple times when opening/closing a panel while editing a document.
Parameter: caption (string)
Parameter Summary: Displays in the panel tab on Windows or at the top of the modeless window on Mac.
Parameter: icon (System.Drawing.Icon)
Parameter Summary: The panel icon.  On Windows the panel may be displayed using the icon, caption or both.  On Mac the icon will be used and the caption will be the tool-tip.

Method: Rhino.UI.Panels.RegisterPanel(PlugIns.PlugIn plugIn, System.Type type, string caption, System.Reflection.Assembly iconAssembly, string iconResourceId, PanelType panelType)
Return: void
Modifiers: public, static
Summary: You typically register your panel class in your plug-in's OnLoad function.  This will register your custom call with Rhino, Rhino will create an instance of your class the first time your panel is created and embed this instance of your class in a panel container.
Parameter: plugIn (PlugIns.PlugIn)
Parameter Summary: Plug-in this panel is associated with
Parameter: type (System.Type)
Parameter Summary: Class type to construct when a panel is shown.  If your class is derived from Eto.Forms.Control it will work on both the Mac and Windows version of Rhino.  In addition Windows Rhino will support any class types that implement the IWin32Window interface or that are derived from System.Windows.FrameworkElement.  Mac Rhino will also support classes that are derived from NsView.  In addition to the type requirements the class must have a public constructor with no parameters or a constructor with a single uint that represents the document serial number and have a GuidAttribute applied with a unique Id.  n Windows there is only one panel created which gets recycled for each new document.  On the Mac a panel will be created for each open document and destroyed when the document closes.  In certain situations in Mac Rhino a a panel may get created and destroyed multiple times when opening/closing a panel while editing a document.
Parameter: caption (string)
Parameter Summary: Displays in the panel tab on Windows or at the top of the modeless window on Mac.
Parameter: iconAssembly (System.Reflection.Assembly)
Parameter Summary: Assembly conataining the iconResourceId, if None it is assumed the iconResourceId is a starndard Rhino resource and the Rhino.UI assembly will be used. assembly will be used
Parameter: iconResourceId (string)
Parameter Summary: The resource Id string used to load the panel icon from the iconAssembly. On Windows the panel may be displayed using the icon, caption or both. On Mac the icon will be used and the caption will be the tool-tip.
Parameter: panelType (PanelType)
Parameter Summary: See <b>PanelType</b>

Class: Rhino.UI.RhinoHelp
Summary: Provides access to the built in Rhino help system

Constructor: Rhino.UI.RhinoHelp.RhinoHelp()
Summary: Initializes a new instance of the RhinoHelp class

Method: Rhino.UI.RhinoHelp.Show(string helpLink)
Return: bool
Modifiers: public, static
Summary: Call this method to display standard Rhino help
Parameter: helpLink (string)
Parameter Summary: Rhino help links are formatted like this: http://docs.mcneel.com/rhino/6/help/en-us/index.htm#commands/line.htm This parameter would be equal to "#commands/line.htm" in the link above.  Rhino will calculate the string up to and including the index.html and append this value to the end.

Class: Rhino.UI.RhinoPageInterop
Summary: For internal use only, provides access to unmanaged core Rhino.

Constructor: Rhino.UI.RhinoPageInterop.RhinoPageInterop()
Summary: Initializes a new instance of the RhinoPageInterop class

Method: Rhino.UI.RhinoPageInterop.NewPropertiesPanelPagePointer(ObjectPropertiesPage page, uint rhinoDocRuntimeSn)
Return: System.IntPtr
Modifiers: public, static
Summary: For internal use only, provides access to unmanaged core

Method: Rhino.UI.RhinoPageInterop.StackedDialogPageFromUnmanagedPointer(System.IntPtr pointer)
Return: StackedDialogPage
Modifiers: public, static
Summary: For internal use only, provides access to unmanaged core

Class: Rhino.UI.RuiUpdateUi

Property: Rhino.UI.RuiUpdateUi.Checked
Return: bool
Modifiers: public
Summary: Set to True to enable menu item or False to check menu item
Accessors: get set

Property: Rhino.UI.RuiUpdateUi.Enabled
Return: bool
Modifiers: public
Summary: Set to True to enable menu item or False to disable menu item
Accessors: get set

Property: Rhino.UI.RuiUpdateUi.FileId
Return: Guid
Modifiers: public
Summary: Id of the RUI file that owns this menu item
Accessors: get

Property: Rhino.UI.RuiUpdateUi.MenuHandle
Return: IntPtr
Modifiers: public
Summary: Windows menu handle of menu that contains this item
Accessors: get

Property: Rhino.UI.RuiUpdateUi.MenuId
Return: Guid
Modifiers: public
Summary: Id of the menu that owns this menu item
Accessors: get

Property: Rhino.UI.RuiUpdateUi.MenuIndex
Return: int
Modifiers: public
Summary: Zero based index of item in the Windows menu
Accessors: get

Property: Rhino.UI.RuiUpdateUi.MenuItemId
Return: Guid
Modifiers: public
Summary: Id of the menu item that owns this menu item
Accessors: get

Property: Rhino.UI.RuiUpdateUi.RadioChecked
Return: bool
Modifiers: public
Summary: Set to True to enable menu item or False to check menu item
Accessors: get set

Property: Rhino.UI.RuiUpdateUi.Text
Return: string
Modifiers: public
Summary: Menu item text
Accessors: get set

Property: Rhino.UI.RuiUpdateUi.WindowsMenuItemId
Return: uint
Modifiers: public
Summary: Windows menu item ID
Accessors: get

Method: Rhino.UI.RuiUpdateUi.RegisterMenuItem(string fileId, string menuId, string itemId, UpdateMenuItemEventHandler callBack)
Return: bool
Modifiers: static, public
Summary: Register menu item update delegate
Parameter: fileId (string)
Parameter Summary: Menu file Id
Parameter: menuId (string)
Parameter Summary: Menu Id
Parameter: itemId (string)
Parameter Summary: Menu item Id
Parameter: callBack (UpdateMenuItemEventHandler)
Parameter Summary:

Method: Rhino.UI.RuiUpdateUi.RegisterMenuItem(System.Guid file, System.Guid menu, System.Guid item, UpdateMenuItemEventHandler callBack)
Return: bool
Modifiers: static, public
Summary: Register menu item update delegate
Parameter: file (System.Guid)
Parameter Summary: Menu file Id
Parameter: menu (System.Guid)
Parameter Summary: Menu Id
Parameter: item (System.Guid)
Parameter Summary: Menu item Id
Parameter: callBack (UpdateMenuItemEventHandler)
Parameter Summary:

Class: Rhino.UI.SaveFileDialog
Summary: Similar to the System.Windows.Forms.SaveFileDialog, but with customized Rhino user interface.

Constructor: Rhino.UI.SaveFileDialog.SaveFileDialog()

Property: Rhino.UI.SaveFileDialog.DefaultExt
Return: string
Modifiers: public
Summary: The default file name extension. The returned string does not include the period.
Accessors: get set

Property: Rhino.UI.SaveFileDialog.FileName
Return: string
Modifiers: public
Summary: Gets or sets a string containing the file name selected in the file dialog box.
Accessors: get set

Property: Rhino.UI.SaveFileDialog.Filter
Return: string
Modifiers: public
Summary: Gets or sets the current file name filter string, which determines the choices that appear in the "Save as file type" or "Files of type" box in the dialog box. See System.Windows.Forms.FileDialog for details.
Accessors: get set

Property: Rhino.UI.SaveFileDialog.InitialDirectory
Return: string
Modifiers: public
Summary: Gets or sets the initial directory displayed by the file dialog box.
Accessors: get set

Property: Rhino.UI.SaveFileDialog.Title
Return: string
Modifiers: public
Summary: Gets or sets the file dialog box title.
Accessors: get set

Method: Rhino.UI.SaveFileDialog.ShowDialog()
Return: System.Windows.Forms.DialogResult
Modifiers: public

Method: Rhino.UI.SaveFileDialog.ShowSaveDialog()
Return: bool
Modifiers: public

Class: Rhino.UI.ShowPanelEventArgs
Summary: Panels.Show event arguments

Constructor: Rhino.UI.ShowPanelEventArgs.ShowPanelEventArgs(Guid panelId, uint documentSerialNumber, bool show)

Property: Rhino.UI.ShowPanelEventArgs.Show
Return: bool
Modifiers: public
Summary: Will be True if showing or False if hiding
Accessors: get set

Class: Rhino.UI.StackedDialogPage
Summary: Base class to inherit from for the addition of stacked dialog pages.

Constructor: Rhino.UI.StackedDialogPage.StackedDialogPage(string englishPageTitle)
Summary: Protected constructor

Property: Rhino.UI.StackedDialogPage.Children
Return: List<StackedDialogPage>
Modifiers: public
Summary: List of child (sub) pages of this page
Accessors: get

Property: Rhino.UI.StackedDialogPage.EnglishPageTitle
Return: string
Modifiers: public
Summary: English string used when scripting this page and a user prefixes a command option with "_"
Accessors: get set

Property: Rhino.UI.StackedDialogPage.Handle
Return: IntPtr
Modifiers: public
Summary: When running on Windows return the window handle for the parent of this page otherwise; return IntPtr.Zero.
Accessors: get

Property: Rhino.UI.StackedDialogPage.HasChildren
Return: bool
Modifiers: public
Summary: Will be True if this page contains sub pages.
Accessors: get

Property: Rhino.UI.StackedDialogPage.LocalPageTitle
Return: string
Modifiers: public, virtual
Summary: Localized page title that will appear on a tab or other page navigation control.  This is also uses as a command line option when scripting this page.
Accessors: get

Property: Rhino.UI.StackedDialogPage.Modified
Return: bool
Modifiers: public
Summary: Check to see if the page has been marked as modified or not.  Marking the page as modified will cause the Apply button to get enabled if this is currently the visible page and the page includes the Apply button.
Accessors: get set

Property: Rhino.UI.StackedDialogPage.NavigationTextColor
Return: Color
Modifiers: public
Summary: Currently only used by Windows Rhino.  If this is set to True then the tree control item text be drawn using this color.  Set the color to System.Drawing.Color.Empty to use the default color.
Accessors: get set

Property: Rhino.UI.StackedDialogPage.NavigationTextIsBold
Return: bool
Modifiers: public
Summary: Currently only used by Windows Rhino.  If this is set to True then the tree control item text will be bold.
Accessors: get set

Property: Rhino.UI.StackedDialogPage.PageControl
Return: object
Modifiers: public, virtual
Summary: Return the control that represents this page. Rhino Windows supports classes that implement the IWin32Windows interface or are derived from some form of System.Windows.FrameworkElement or Eto.Forms.Control.  Mac Rhino supports controls that are derived from NSview or Eto.Forms.Control.
Accessors: get

Property: Rhino.UI.StackedDialogPage.PageImage
Return: Image
Modifiers: public, virtual
Summary: Optionally override to provide a image to display in the Mac Rhino UI
Accessors: get

Property: Rhino.UI.StackedDialogPage.ShowApplyButton
Return: bool
Modifiers: public, virtual
Summary: Called when this page is activated
Accessors: get

Property: Rhino.UI.StackedDialogPage.ShowDefaultsButton
Return: bool
Modifiers: public, virtual
Summary: Called when this page is activated.
Accessors: get

Method: Rhino.UI.StackedDialogPage.AddChildPage(StackedDialogPage pageToAdd)
Return: void
Modifiers: public
Summary: Currently only supported on Windows.  Call this method to add a child page to a page after the parent dialog has been created.

Method: Rhino.UI.StackedDialogPage.MakeActivePage()
Return: void
Modifiers: public
Summary: Make this page the active, visible page

Method: Rhino.UI.StackedDialogPage.OnActivate(bool active)
Return: bool
Modifiers: public, virtual
Summary: Called when this page is activated/deactivated.
Parameter: active (bool)
Parameter Summary: If True then this page is on top otherwise it is about to be hidden.

Method: Rhino.UI.StackedDialogPage.OnApply()
Return: bool
Modifiers: public, virtual
Summary: Called when stacked dialog OK button is pressed.

Method: Rhino.UI.StackedDialogPage.OnCancel()
Return: void
Modifiers: public, virtual
Summary: Called when stacked dialog Cancel button is pressed.

Method: Rhino.UI.StackedDialogPage.OnCreateParent(System.IntPtr hwndParent)
Return: void
Modifiers: public, virtual
Summary: Called when the parent window has been created on Windows platforms only.

Method: Rhino.UI.StackedDialogPage.OnDefaults()
Return: void
Modifiers: public, virtual
Summary: Called when stacked dialog Defaults button is pressed (see ShowDefaultsButton).

Method: Rhino.UI.StackedDialogPage.OnHelp()
Return: void
Modifiers: public, virtual
Summary: Called when the parent dialog requests help for this page.

Method: Rhino.UI.StackedDialogPage.OnSizeParent(int width, int height)
Return: void
Modifiers: public, virtual
Summary: Called when the parent window has been resized

Method: Rhino.UI.StackedDialogPage.RemovePage()
Return: void
Modifiers: public
Summary: Remove this page from the dialog box

Method: Rhino.UI.StackedDialogPage.SetActivePageTo(string pageName, bool documentPropertiesPage)
Return: bool
Modifiers: public

Method: Rhino.UI.StackedDialogPage.SetEnglishPageTitle(string newPageTile)
Return: void
Modifiers: public
Summary: Change the title passed to the constructor and, this will cause LocalPageTitle to get called also.

Class: Rhino.UI.StatusBar
Summary: Contains static methods to control the application status bar.

Constructor: Rhino.UI.StatusBar.StatusBar()
Summary: Initializes a new instance of the StatusBar class

Method: Rhino.UI.StatusBar.ClearMessagePane()
Return: void
Modifiers: public, static
Summary: Removes the message from the message pane.

Method: Rhino.UI.StatusBar.HideProgressMeter()
Return: void
Modifiers: public, static
Summary: Ends, or hides, Rhino's status bar progress meter.

Method: Rhino.UI.StatusBar.HideProgressMeter(uint docSerialNumber)
Return: void
Modifiers: public, static
Summary: Ends, or hides, Rhino's status bar progress meter.
Parameter: docSerialNumber (uint)
Parameter Summary: The document runtime serial number.

Method: Rhino.UI.StatusBar.SetDistancePane(double distance)
Return: void
Modifiers: public, static
Summary: Sets the distance pane to a distance value.
Parameter: distance (double)
Parameter Summary: The distance value.

Method: Rhino.UI.StatusBar.SetMessagePane(string message)
Return: void
Modifiers: public, static
Summary: Sets the message pane to a message.
Parameter: message (string)
Parameter Summary: The message value.

Method: Rhino.UI.StatusBar.SetNumberPane(double number)
Return: void
Modifiers: public, static
Summary: Sets the number pane to a number value

Method: Rhino.UI.StatusBar.SetPointPane(Point3d point)
Return: void
Modifiers: public, static
Summary: Sets the point pane to a point value.
Parameter: point (Point3d)
Parameter Summary: The point value.

Method: Rhino.UI.StatusBar.ShowProgressMeter(int lowerLimit, int upperLimit, string label, bool embedLabel, bool showPercentComplete)
Return: int
Modifiers: public, static
Summary: Starts, or shows, Rhino's status bar progress meter.
Parameter: lowerLimit (int)
Parameter Summary: The lower limit of the progress meter's range.
Parameter: upperLimit (int)
Parameter Summary: The upper limit of the progress meter's range.
Parameter: label (string)
Parameter Summary: The short description of the progress (e.g. "Calculating", "Meshing", etc)
Parameter: embedLabel (bool)
Parameter Summary: If true, then the label will be embedded in the progress meter. If false, then the label will appear to the left of the progress meter.
Parameter: showPercentComplete (bool)
Parameter Summary: If true, then the percent complete will appear in the progress meter.

Method: Rhino.UI.StatusBar.ShowProgressMeter(uint docSerialNumber, int lowerLimit, int upperLimit, string label, bool embedLabel, bool showPercentComplete)
Return: int
Modifiers: public, static
Summary: Starts, or shows, Rhino's status bar progress meter.
Parameter: docSerialNumber (uint)
Parameter Summary: The document runtime serial number.
Parameter: lowerLimit (int)
Parameter Summary: The lower limit of the progress meter's range.
Parameter: upperLimit (int)
Parameter Summary: The upper limit of the progress meter's range.
Parameter: label (string)
Parameter Summary: The short description of the progress (e.g. "Calculating", "Meshing", etc)
Parameter: embedLabel (bool)
Parameter Summary: If true, then the label will be embedded in the progress meter. If false, then the label will appear to the left of the progress meter.
Parameter: showPercentComplete (bool)
Parameter Summary: If true, then the percent complete will appear in the progress meter.

Method: Rhino.UI.StatusBar.UpdateProgressMeter(int position, bool absolute)
Return: int
Modifiers: public, static
Summary: Sets the current position of Rhino's status bar progress meter.
Parameter: position (int)
Parameter Summary: The new value. This can be stated in absolute terms, or relative compared to the current position.
The interval bounds are specified when you first show the bar. | Parameter: absolute (bool) | Parameter Summary: If true, then the progress meter is moved to position. If false, then the progress meter is moved position from the current position (relative).

Method: Rhino.UI.StatusBar.UpdateProgressMeter(string label, int position, bool absolute)
Return: int
Modifiers: public, static
Summary: Sets the label and current position of Rhino's status bar progress meter.
Parameter: label (string)
Parameter Summary: The short description of the progress (e.g. "Calculating", "Meshing", etc)
Parameter: position (int)
Parameter Summary: The new value. This can be stated in absolute terms, or relative compared to the current position. The interval bounds are specified when you first show the bar. Note, if value is <b>RhinoMath.UnsetIntIndex</b> , only the label is updated.
Parameter: absolute (bool)
Parameter Summary: If true, then the progress meter is moved to position. If false, then the progress meter is moved position from the current position (relative).

Method: Rhino.UI.StatusBar.UpdateProgressMeter(uint docSerialNumber, int position, bool absolute)
Return: int
Modifiers: public, static
Summary: Sets the current position of Rhino's status bar progress meter.
Parameter: docSerialNumber (uint)
Parameter Summary: The document runtime serial number.
Parameter: position (int)
Parameter Summary: The new value. This can be stated in absolute terms, or relative compared to the current position.
The interval bounds are specified when you first show the bar. | Parameter: absolute (bool) | Parameter Summary: If true, then the progress meter is moved to position. If false, then the progress meter is moved position from the current position (relative).

Method: Rhino.UI.StatusBar.UpdateProgressMeter(uint docSerialNumber, string label, int position, bool absolute)
Return: int
Modifiers: public, static
Summary: Sets the label and current position of Rhino's status bar progress meter.
Parameter: docSerialNumber (uint)
Parameter Summary: The document runtime serial number.
Parameter: label (string)
Parameter Summary: The short description of the progress (e.g. "Calculating", "Meshing", etc)
Parameter: position (int)
Parameter Summary: The new value. This can be stated in absolute terms, or relative compared to the current position. The interval bounds are specified when you first show the bar. Note, if value is <b>RhinoMath.UnsetIntIndex</b> , only the label is updated.
Parameter: absolute (bool)
Parameter Summary: If true, then the progress meter is moved to position. If false, then the progress meter is moved position from the current position (relative).

Class: Rhino.UI.Toolbar
Summary: Represents a toolbar in a Rhino toolbar, or .RUI, file.

Property: Rhino.UI.Toolbar.BitmapSize
Return: Size
Modifiers: public, static
Summary: Gets and sets the size of the toolbar image.
Accessors: get set

Property: Rhino.UI.Toolbar.TabSize
Return: Size
Modifiers: public, static
Summary: Gets and sets the size of the toolbar tab.
Accessors: get set

Property: Rhino.UI.Toolbar.Id
Return: Guid
Modifiers: public
Summary: Gets the id of the toolbar.
Accessors: get

Property: Rhino.UI.Toolbar.Name
Return: string
Modifiers: public
Summary: Gets the name of the toolbar.
Accessors: get

Class: Rhino.UI.ToolbarFile
Summary: Represents a Rhino toolbar, or .RUI, file.

Property: Rhino.UI.ToolbarFile.GroupCount
Return: int
Modifiers: public
Summary: Get the number of toolbar groups in the toolbar file.
Accessors: get

Property: Rhino.UI.ToolbarFile.Id
Return: Guid
Modifiers: public
Summary: Gets the id of the toolbar file.
Accessors: get

Property: Rhino.UI.ToolbarFile.Name
Return: string
Modifiers: public
Summary: Gets the name, or alias, of the toolbar file.
Accessors: get

Property: Rhino.UI.ToolbarFile.Path
Return: string
Modifiers: public
Summary: Gets the full path to the toolbar file.
Accessors: get

Property: Rhino.UI.ToolbarFile.ToolbarCount
Return: int
Modifiers: public
Summary: Get the number of toolbars in the toolbar file.
Accessors: get

Method: Rhino.UI.ToolbarFile.Close(bool prompt)
Return: bool
Modifiers: public
Summary: Closes the toolbar file.
Parameter: prompt (bool)
Parameter Summary: Set True if you want to be prompted to cllose the file.

Method: Rhino.UI.ToolbarFile.GetGroup(int index)
Return: ToolbarGroup
Modifiers: public
Summary: Gets a toolbar group.
Parameter: index (int)
Parameter Summary: The index of the toolbar group.

Method: Rhino.UI.ToolbarFile.GetGroup(string name)
Return: ToolbarGroup
Modifiers: public
Summary: Gets a toolbar group.
Parameter: name (string)
Parameter Summary: The name of the toolbar group.

Method: Rhino.UI.ToolbarFile.GetToolbar(int index)
Return: Toolbar
Modifiers: public
Summary: Gets a toolbar.
Parameter: index (int)
Parameter Summary: The index of the toolbar.

Method: Rhino.UI.ToolbarFile.Save()
Return: bool
Modifiers: public
Summary: Saves the toolbar file.

Method: Rhino.UI.ToolbarFile.SaveAs(string path)
Return: bool
Modifiers: public
Summary: Saves the toolbar file to a different path.

Class: Rhino.UI.ToolbarFileCollection
Summary: Represents a collection of Rhino toolbars, or .RUI, files.

Property: Rhino.UI.ToolbarFileCollection.MruSidebarIsVisible
Return: bool
Modifiers: public, static
Summary: Returns True if the most-recently-used sizebar is visible.
Accessors: get set

Property: Rhino.UI.ToolbarFileCollection.SidebarIsVisible
Return: bool
Modifiers: public, static
Summary: Returns True if the sizebar is visible.
Accessors: get set

Property: Rhino.UI.ToolbarFileCollection.Count
Return: int
Modifiers: public
Summary: Get tne number of open toolbar files.
Accessors: get

Property: Rhino.UI.ToolbarFileCollection.this[int index]
Return: ToolbarFile
Modifiers: public
Summary: Gets an open toolbar file by index.

Method: Rhino.UI.ToolbarFileCollection.FindByName(string name, bool ignoreCase)
Return: ToolbarFile
Modifiers: public
Summary: Gets an open toolbar file by name, or alias.
Parameter: name (string)
Parameter Summary: The name, or alias, of the toolbar file.
Parameter: ignoreCase (bool)
Parameter Summary: True to ignore case during the comparison; otherwise, false.

Method: Rhino.UI.ToolbarFileCollection.FindByPath(string path)
Return: ToolbarFile
Modifiers: public
Summary: Gets an open toolbar by full path.
Parameter: path (string)
Parameter Summary: The full path to the toolbar file.

Method: Rhino.UI.ToolbarFileCollection.GetEnumerator()
Return: IEnumerator<ToolbarFile>
Modifiers: public
Summary: Gets a toolbar file enumerator.

Method: Rhino.UI.ToolbarFileCollection.Open(string path)
Return: ToolbarFile
Modifiers: public
Summary: Opens a toolbar file.
Parameter: path (string)
Parameter Summary: The full path to the toolbar file.

Class: Rhino.UI.ToolbarGroup
Summary: Represents a toolbar group in a Rhino toolbar, or .RUI, file.

Property: Rhino.UI.ToolbarGroup.Id
Return: Guid
Modifiers: public
Summary: Gets the id of the toolbar group.
Accessors: get

Property: Rhino.UI.ToolbarGroup.IsDocked
Return: bool
Modifiers: public
Summary: Returns True if the toolbar group is docked.
Accessors: get

Property: Rhino.UI.ToolbarGroup.Name
Return: string
Modifiers: public
Summary: Gets the name of the toolbar group.
Accessors: get

Property: Rhino.UI.ToolbarGroup.Visible
Return: bool
Modifiers: public
Summary: Gets and sets a toolbar group's visibility.
Accessors: get set

Class: Rhino.UI.WaitCursor

Constructor: Rhino.UI.WaitCursor.WaitCursor()

Method: Rhino.UI.WaitCursor.Clear()
Return: void
Modifiers: public

Method: Rhino.UI.WaitCursor.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.WaitCursor.Set()
Return: void
Modifiers: public

# Namespace: Rhino.UI.Controls

Class: Rhino.UI.Controls.CollapsibleSectionHolderImpl

Constructor: Rhino.UI.Controls.CollapsibleSectionHolderImpl.CollapsibleSectionHolderImpl(ICollapsibleSectionHolder client)

Property: Rhino.UI.Controls.CollapsibleSectionHolderImpl.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.UI.Controls.CollapsibleSectionHolderImpl.Find(System.IntPtr cpp)
Return: ICollapsibleSectionHolder
Modifiers: static, public

Method: Rhino.UI.Controls.CollapsibleSectionHolderImpl.NewNativeWrapper(System.IntPtr cpp)
Return: ICollapsibleSectionHolder
Modifiers: static, public

Method: Rhino.UI.Controls.CollapsibleSectionHolderImpl.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionHolderImpl.IsSameObject(System.IntPtr cpp)
Return: bool
Modifiers: public

Class: Rhino.UI.Controls.CollapsibleSectionImpl

Constructor: Rhino.UI.Controls.CollapsibleSectionImpl.CollapsibleSectionImpl(ICollapsibleSection section)

Property: Rhino.UI.Controls.CollapsibleSectionImpl.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Property: Rhino.UI.Controls.CollapsibleSectionImpl.ViewModel
Return: IRdkViewModel
Modifiers: public
Accessors: get set

Method: Rhino.UI.Controls.CollapsibleSectionImpl.CreateHostedSection(ICollapsibleSection section)
Return: void
Modifiers: public, static

Method: Rhino.UI.Controls.CollapsibleSectionImpl.Find(System.IntPtr cpp)
Return: ICollapsibleSection
Modifiers: static, public

Method: Rhino.UI.Controls.CollapsibleSectionImpl.GetSibling(ICollapsibleSection section, System.Guid siblingSectionId)
Return: ICollapsibleSection
Modifiers: public, static

Method: Rhino.UI.Controls.CollapsibleSectionImpl.GetSiblings(ICollapsibleSection section)
Return: ICollapsibleSection[]
Modifiers: public, static

Method: Rhino.UI.Controls.CollapsibleSectionImpl.NewNativeWrapper(System.IntPtr cpp)
Return: ICollapsibleSection
Modifiers: static, public

Method: Rhino.UI.Controls.CollapsibleSectionImpl.__InternalSetParent(System.IntPtr parent)
Return: void
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionImpl.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionImpl.IsSameObject(System.IntPtr cpp)
Return: bool
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionImpl.ReplaceClient(ICollapsibleSection client)
Return: void
Modifiers: public

Class: Rhino.UI.Controls.CollapsibleSectionImpl.Factory

Constructor: Rhino.UI.Controls.CollapsibleSectionImpl.Factory.CollapsibleSectionImpl.Factory()
Summary: Initializes a new instance of the CollapsibleSectionImpl.Factory class

Class: Rhino.UI.Controls.CollapsibleSectionViewModel
Summary: Derive from this class to implement your own view model that wraps around a built in implementation of IRdkViewModel.  Use GetData etc to implement your properties.

Constructor: Rhino.UI.Controls.CollapsibleSectionViewModel.CollapsibleSectionViewModel(ICollapsibleSection section)
Summary: Construct from your section - the view model should be a member of the section

Property: Rhino.UI.Controls.CollapsibleSectionViewModel.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.UI.Controls.CollapsibleSectionViewModel.Commit(System.Guid uuidDataType)
Return: void
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionViewModel.Discard(System.Guid uuidDataType)
Return: void
Modifiers: public

Method: Rhino.UI.Controls.CollapsibleSectionViewModel.GetData(System.Guid uuidDataType, bool bForWrite, bool bAutoChangeBracket)
Return: object
Modifiers: public
Summary: Call for an interface to data

Method: Rhino.UI.Controls.CollapsibleSectionViewModel.UndoHelper(string description)
Return: UndoRecord
Modifiers: public
Summary: Helper function to ease the use of undo records

Class: Rhino.UI.Controls.ContentUI
Summary: This class represents the user interface (UI) of a content. A content's UI appears inside an editor which is represented by IRhRdkContentEditor.The UI is the part of the editor which allows the user to view and modify the persistent state of the selected content(s). This interface is implemented by RDK internally in the core content class, CRhRdkCoreContent. If you do not override CRhRdkCoreContent::CreateUI() you do not have to concern yourself with the details.If however, you do want to override CreateUI() to create your own custom UI, then you must derive your UI class from CRhRdkCustomContentUI and implement this interface to support your own UI design. \note CRhRdkCustomContentUI implements some of this interface for you.

Constructor: Rhino.UI.Controls.ContentUI.ContentUI(IntPtr pContentUI)
Summary: ContentUI constructor

Property: Rhino.UI.Controls.ContentUI.CppPointer
Return: IntPtr
Modifiers: public
Accessors: get

Method: Rhino.UI.Controls.ContentUI.ContentUIHolder()
Return: ICollapsibleSectionHolder
Modifiers: public, virtual
Summary: Returns the holder that contains the UI sections, if this is an expandable content UI with sections inside holders. Returns None for custom UIs.

Method: Rhino.UI.Controls.ContentUI.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.Controls.ContentUI.EditorUuid()
Return: System.Guid
Modifiers: public, virtual
Summary: Get the unique identifier of the editor that the UI is being displayed in.

Method: Rhino.UI.Controls.ContentUI.IsCreated()
Return: bool
Modifiers: public, virtual
Summary: Returns True if the UI is created, else false

Method: Rhino.UI.Controls.ContentUI.IsShown()
Return: bool
Modifiers: public, virtual
Summary: Returns True if the UI is being shown, else false

Method: Rhino.UI.Controls.ContentUI.Uuid()
Return: System.Guid
Modifiers: public, virtual
Summary: Get the unique identifier of the UI.

Class: Rhino.UI.Controls.Delegates

Class: Rhino.UI.Controls.ExpandableContentUI
Summary: This class extends ContentUI to represent the default user interface which the RDK provides for a content.This is the UI created by the default implementation of CRhRdkCoreContent::CreateUI(). The main feature of this implementation is a 'holder' containing one or more expandable 'sections' (AKA 'roll-ups').

Method: Rhino.UI.Controls.ExpandableContentUI.AddSection(ICollapsibleSection pSection, IRdkViewModel vm)
Return: void
Modifiers: public, virtual
Summary: Add a section to the UI with a custom controller. Called \e before Create().

Method: Rhino.UI.Controls.ExpandableContentUI.AddSection(ICollapsibleSection pSection)
Return: void
Modifiers: public, virtual
Summary: Add a section to the UI. Called \e before Create(). A generic controller is attached.

Class: Rhino.UI.Controls.FactoryBase
Summary: Base class for CollapsibleSection and ViewModel factories used by the RDK UI

Method: Rhino.UI.Controls.FactoryBase.Register()
Return: System.Type[]
Modifiers: public, static
Summary: Call this function during startup of current assembly to load classes with factory creation support are registed

Method: Rhino.UI.Controls.FactoryBase.Register(PlugIns.PlugIn plugin)
Return: System.Type[]
Modifiers: public, static
Summary: Call this function during the startup of your plug-in to ensure that all classes that support factory creation are registed

Method: Rhino.UI.Controls.FactoryBase.Get(System.Guid id)
Return: System.IntPtr
Modifiers: public, virtual
Summary: Override this method to return a new instance of your class for the given ID

Class: Rhino.UI.Controls.InternalRdkViewModel.NewUndoRecord

Class: Rhino.UI.Controls.InternalRdkViewModel.UndoHelper

Class: Rhino.UI.Controls.InternalRdkViewModelFactory

Constructor: Rhino.UI.Controls.InternalRdkViewModelFactory.InternalRdkViewModelFactory()
Summary: Initializes a new instance of the InternalRdkViewModelFactory class

Class: Rhino.UI.Controls.UndoRecord
Summary: Undo Record

Constructor: Rhino.UI.Controls.UndoRecord.UndoRecord(string description, IRdkViewModel viewModel)
Summary: UndoRecord Constructor

Method: Rhino.UI.Controls.UndoRecord.Dispose()
Return: void
Modifiers: public
Summary: UndoRecord Dispose

Method: Rhino.UI.Controls.UndoRecord.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual
Summary: UndoRecord Dispose

# Namespace: Rhino.UI.Controls.DataSource

Class: Rhino.UI.Controls.DataSource.EventArgs

Property: Rhino.UI.Controls.DataSource.EventArgs.DataType
Return: Guid
Modifiers: public
Accessors: get set

Class: Rhino.UI.Controls.DataSource.EventInfoArgs

Property: Rhino.UI.Controls.DataSource.EventInfoArgs.DataType
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.DataSource.EventInfoArgs.EventInfoPtr
Return: IntPtr
Modifiers: public
Accessors: get set

Class: Rhino.UI.Controls.DataSource.ProviderIds

Constructor: Rhino.UI.Controls.DataSource.ProviderIds.ProviderIds()
Summary: Initializes a new instance of the ProviderIds class

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentChildSlot
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentDatabase
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentDisplayCollection
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentEditorSettings
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentLookup
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentParam
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentPreviewRendered
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentSelection
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentSelectionForSetParams
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentUIs
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ContentUpdatePreviewMarkersEventInfo
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.CurrentEnvironment
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.Decals
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.Dithering
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.GroundPlane
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ImageFileInfo
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.ImageFileInfo_V8
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.LinearWorkflow
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.NamedItem
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.NewContentControlAssignBy
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.NullGuid
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.PreviewSettings
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkEdit
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRendering
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingGamma
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffectBloom
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffectDOF
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffectFog
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffectGlare
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffectGlow
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingPostEffects
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingProgress
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RdkRenderingToneMapping
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RenderChannels
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.RhinoSettings
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.SelectionNavigator
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.Skylight
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.Sun
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.Undo
Return: Guid
Modifiers: public, static
Accessors: get

Property: Rhino.UI.Controls.DataSource.ProviderIds.UndoRecord
Return: Guid
Modifiers: public, static
Accessors: get

# Namespace: Rhino.UI.Controls.Thumbnaillist

Class: Rhino.UI.Controls.Thumbnaillist.ThumbnailList

Constructor: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.ThumbnailList()

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.CEC
Return: ContentEditingContext
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Created
Return: bool
Modifiers: public, virtual
Accessors: get

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Enabled
Return: bool
Modifiers: public, new, virtual
Accessors: get set

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.EnglishCaption
Return: string
Modifiers: public, virtual
Accessors: get

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Hidden
Return: bool
Modifiers: public, virtual
Accessors: get set

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.HolderParent
Return: IntPtr
Modifiers: public, virtual
Accessors: set

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.LocalCaption
Return: string
Modifiers: public, virtual
Accessors: get

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Shown
Return: bool
Modifiers: public, new, virtual
Accessors: get set

Property: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.ViewModel
Return: RdkThumbnaillistViewModel
Modifiers: public
Accessors: get

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Add(ref IRhRdkThumbnail t)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Clear()
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.ContentFromThumbId(ref System.Guid uuidThumb)
Return: Rhino.Render.RenderContent
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Dispose(bool disposing)
Return: void
Modifiers: protected, override

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Get(ref System.Guid u)
Return: IRhRdkThumbnail
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.GetGridMetrics(ref int w, ref int h, ref int ox, ref int oy)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.GetSize()
Return: IRhRdkContentThumbnailList_Sizes
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.GetStatisticsHeaderHeight()
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Mode()
Return: IRhRdkThumbnailList_Modes
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Move(System.Drawing.Rectangle rect, bool bRepaint, bool bRepaintNC)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.PropagateSelectedAppearance()
Return: bool
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SaveMetaDataToDocument()
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SelectedAppearance()
Return: Rhino.Render.PreviewAppearance
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetClientText(string w)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetCustomBitmapSize(int w, int h)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetMode(IRhRdkThumbnailList_Modes m, bool b)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetSearchPattern(string w)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetSettingsPath(string w)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.SetShowLabels(bool b)
Return: void
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.Shape()
Return: IRhRdkThumbnailList_Shapes
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.ShowLabels()
Return: bool
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.UUID()
Return: System.Guid
Modifiers: public, virtual

Method: Rhino.UI.Controls.Thumbnaillist.ThumbnailList.ViewModelActivated()
Return: void
Modifiers: public

# Namespace: Rhino.UI.Controls.ThumbnailUI

Class: Rhino.UI.Controls.ThumbnailUI.ThumbData

Constructor: Rhino.UI.Controls.ThumbnailUI.ThumbData.ThumbData()
Summary: Initializes a new instance of the ThumbData class

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Children
Return: List<ThumbData>
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Content
Return: RenderContent
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Id
Return: Guid
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Image
Return: Bitmap
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Intensity
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.InUse
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.InUseColor
Return: Color4f>
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Name
Return: string
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Parent
Return: ThumbData
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.PreviewAppearance
Return: PreviewAppearance
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Selected
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Tags
Return: List<string>
Modifiers: public
Accessors: get set

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.TopLevel
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.UI.Controls.ThumbnailUI.ThumbData.Type
Return: string
Modifiers: public
Accessors: get set

Method: Rhino.UI.Controls.ThumbnailUI.ThumbData.GetPreviewHeigth(Rhino.Render.DataSources.Sizes thumb_size, Rhino.Render.DataSources.Shapes shape)
Return: int
Modifiers: public, static

Method: Rhino.UI.Controls.ThumbnailUI.ThumbData.GetPreviewWidth(Rhino.Render.DataSources.Sizes thumb_size, Rhino.Render.DataSources.Shapes shape)
Return: int
Modifiers: public, static

Class: Rhino.UI.Controls.ThumbnailUI.Thumbnail

Constructor: Rhino.UI.Controls.ThumbnailUI.Thumbnail.Thumbnail(IntPtr pRdkThumbnail)
Summary: Constructor for Thumbnail

Property: Rhino.UI.Controls.ThumbnailUI.Thumbnail.CppPointer
Return: IntPtr
Modifiers: public
Summary: Thumbnail c++ pointer
Accessors: get

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.Dib(ref Bitmap dibOut)
Return: void
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.Dispose()
Return: void
Modifiers: public
Summary: Dispose for Thumbnail

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.GetDib()
Return: System.Drawing.Bitmap
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.GetDisplayRect(ref RectangleF rectOut)
Return: void
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.Id()
Return: System.Guid
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.IsHot()
Return: bool
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.IsSelected()
Return: bool
Modifiers: public

Method: Rhino.UI.Controls.ThumbnailUI.Thumbnail.Label()
Return: string
Modifiers: public

Class: Rhino.UI.Controls.ThumbnailUI.ThumbnailViewModelFactory

Constructor: Rhino.UI.Controls.ThumbnailUI.ThumbnailViewModelFactory.ThumbnailViewModelFactory()

Method: Rhino.UI.Controls.ThumbnailUI.ThumbnailViewModelFactory.Get(System.Guid id)
Return: System.IntPtr
Modifiers: public, override

# Namespace: Rhino.UI.Gumball

Class: Rhino.UI.Gumball.GumballAppearanceSettings

Constructor: Rhino.UI.Gumball.GumballAppearanceSettings.GumballAppearanceSettings()

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ArcThickness
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ArrowHeadLength
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ArrowHeadWidth
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.AxisThickness
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ColorMenuButton
Return: Color
Modifiers: public
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ColorX
Return: Color
Modifiers: public
Summary: Default is Red.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ColorY
Return: Color
Modifiers: public
Summary: Default is Green.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ColorZ
Return: Color
Modifiers: public
Summary: Default is Blue.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.FreeTranslate
Return: int
Modifiers: public
Summary: When FreeTranslate is 1, the center translation control can be dragged in any direction and moves the object the gumball controls. When FreeTranslate is 2, the center translation control can be dragged in any direction and moves the object the gumball itself. The default value is 2.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.MenuDistance
Return: int
Modifiers: public
Summary: Distance of menu ball from center.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.MenuEnabled
Return: bool
Modifiers: public
Summary: When MenuEnabled is true, the menu "button" is drawn on the gumball. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.MenuSize
Return: int
Modifiers: public
Summary: Radius of menu circle.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.PlanarTranslationGripCorner
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.PlanarTranslationGripSize
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.Radius
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.RelocateEnabled
Return: bool
Modifiers: public
Summary: When RelocateEnabled is true, the user can reposition the gumball by tapping the control key while dragging.  Once the repostion drag is terminated by releasing the/ mouse button, ordinary editing resumes. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.RotateXEnabled
Return: bool
Modifiers: public
Summary: When RotateX is true, the X rotation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.RotateYEnabled
Return: bool
Modifiers: public
Summary: When RotateY is true, the Y rotation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.RotateZEnabled
Return: bool
Modifiers: public
Summary: When RotateZ is true, the Z rotation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ScaleGripSize
Return: int
Modifiers: public
Summary: in pixels.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ScaleXEnabled
Return: bool
Modifiers: public
Summary: When ScaleXEnabled is true, the X scale control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ScaleYEnabled
Return: bool
Modifiers: public
Summary: When ScaleYEnabled is true, the Y scale control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.ScaleZEnabled
Return: bool
Modifiers: public
Summary: When ScaleZEnabled is true, the Z scale control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateXEnabled
Return: bool
Modifiers: public
Summary: TranslateXEnabled is true, the X axis translation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateXYEnabled
Return: bool
Modifiers: public
Summary: When TranslateXY is true, the XY plane translation control is available in appropriate views. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateYEnabled
Return: bool
Modifiers: public
Summary: TranslateYEnabled is true, the Y axis translation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateYZEnabled
Return: bool
Modifiers: public
Summary: When TranslateYZ is true, the YZ plane translation control is available in appropriate views. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateZEnabled
Return: bool
Modifiers: public
Summary: TranslateZEnabled is true, the Z axis translation control is available. The default setting is true.
Accessors: get set

Property: Rhino.UI.Gumball.GumballAppearanceSettings.TranslateZXEnabled
Return: bool
Modifiers: public
Summary: When TranslateZX is true, the ZX plane translation control is available in appropriate views. The default setting is true.
Accessors: get set

Class: Rhino.UI.Gumball.GumballDisplayConduit

Constructor: Rhino.UI.Gumball.GumballDisplayConduit.GumballDisplayConduit()

Constructor: Rhino.UI.Gumball.GumballDisplayConduit.GumballDisplayConduit(ActiveSpace space)

Property: Rhino.UI.Gumball.GumballDisplayConduit.BaseGumball
Return: GumballObject
Modifiers: public
Summary: Starting location.
Accessors: get

Property: Rhino.UI.Gumball.GumballDisplayConduit.Enabled
Return: bool
Modifiers: public
Accessors: get set

Property: Rhino.UI.Gumball.GumballDisplayConduit.Gumball
Return: GumballObject
Modifiers: public
Accessors: get

Property: Rhino.UI.Gumball.GumballDisplayConduit.GumballTransform
Return: Transform
Modifiers: public
Summary: The gumball transformation is the transformation calculated by comparing the current gumball to the starting BaseGumball.
Accessors: get

Property: Rhino.UI.Gumball.GumballDisplayConduit.InRelocate
Return: bool
Modifiers: public
Accessors: get

Property: Rhino.UI.Gumball.GumballDisplayConduit.PickResult
Return: GumballPickResult
Modifiers: public
Summary: The initial mouse down event sets PickResult.
Accessors: get

Property: Rhino.UI.Gumball.GumballDisplayConduit.PreTransform
Return: Transform
Modifiers: public
Summary: The pre-transform is a transformation that needs to be applied before the gumball transformation.
Accessors: get set

Property: Rhino.UI.Gumball.GumballDisplayConduit.TotalTransform
Return: Transform
Modifiers: public
Summary: The total transformation is GumballTransform * PreTransform.
Accessors: get

Method: Rhino.UI.Gumball.GumballDisplayConduit.CheckShiftAndControlKeys()
Return: void
Modifiers: public

Method: Rhino.UI.Gumball.GumballDisplayConduit.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.Gumball.GumballDisplayConduit.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.Gumball.GumballDisplayConduit.PickGumball(Rhino.Input.Custom.PickContext pickContext, Rhino.Input.Custom.GetPoint getPoint)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(GumballObject gumball, GumballAppearanceSettings appearanceSettings)
Return: void
Modifiers: public
Summary: Contents of the gumball are copied to the base gumball of this class.
Parameter: gumball (GumballObject)
Parameter Summary: The gumball source.
Parameter: appearanceSettings (GumballAppearanceSettings)
Parameter Summary: The gumball appearance and behavior settings. Argument can be null.

Method: Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(GumballObject gumball)
Return: void
Modifiers: public
Summary: Contents of the gumball are copied to the base gumball of this class.
Parameter: gumball (GumballObject)
Parameter Summary: The gumball source.

Method: Rhino.UI.Gumball.GumballDisplayConduit.UpdateGumball(Point3d point, Line worldLine)
Return: bool
Modifiers: public

Class: Rhino.UI.Gumball.GumballObject

Constructor: Rhino.UI.Gumball.GumballObject.GumballObject()

Property: Rhino.UI.Gumball.GumballObject.Frame
Return: GumballFrame
Modifiers: public
Accessors: get set

Method: Rhino.UI.Gumball.GumballObject.Dispose()
Return: void
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.Dispose(bool disposing)
Return: void
Modifiers: protected, virtual

Method: Rhino.UI.Gumball.GumballObject.SetFromArc(Arc arc)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromBoundingBox(BoundingBox boundingBox)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromBoundingBox(Plane frame, BoundingBox frameBoundingBox)
Return: bool
Modifiers: public
Summary: Sets the gumball bounding box with respect to a frame.
Parameter: frame (Plane)
Parameter Summary: The frame.
Parameter: frameBoundingBox (BoundingBox)
Parameter Summary: Bounding box with respect to frame.

Method: Rhino.UI.Gumball.GumballObject.SetFromCircle(Circle circle)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromCurve(Curve curve)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromEllipse(Ellipse ellipse)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromExtrusion(Extrusion extrusion)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromHatch(Hatch hatch)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromLight(Light light)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromLine(Line line)
Return: bool
Modifiers: public

Method: Rhino.UI.Gumball.GumballObject.SetFromPlane(Plane plane)
Return: bool
Modifiers: public

Class: Rhino.UI.Gumball.GumballPickResult

Property: Rhino.UI.Gumball.GumballPickResult.Mode
Return: GumballMode
Modifiers: public
Accessors: get

Method: Rhino.UI.Gumball.GumballPickResult.SetToDefault()
Return: void
Modifiers: public
